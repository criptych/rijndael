#include "rijndael.h"

#include "catch.hpp"

#include <string.h>

#ifndef NDEBUG
# define TRACE(...) do { \
    fprintf(stderr, "%s:%d: ", __FILE__, __LINE__); \
    fprintf(stderr, ##__VA_ARGS__); \
    fputc('\n', stderr); \
} while(0)

#else
# define TRACE(...)
#endif

TEST_CASE("demo") {
    aes_state state;

    const uint8_t KEY[] = { 0x2b,0x7e,0x15,0x16,0x28,0xae,0xd2,0xa6,0xab,0xf7,0x15,0x88,0x09,0xcf,0x4f,0x3c };
    const uint8_t PLAINTEXT[] = { 0x32,0x43,0xf6,0xa8,0x88,0x5a,0x30,0x8d,0x31,0x31,0x98,0xa2,0xe0,0x37,0x07,0x34 };
    const uint8_t CIPHERTEXT[] = { 0x39,0x25,0x84,0x1d,0x02,0xdc,0x09,0xfb,0xdc,0x11,0x85,0x97,0x19,0x6a,0x0b,0x32 };

    uint8_t out[sizeof(CIPHERTEXT)];
    REQUIRE(aes_begin(&state, KEY, 128));
    REQUIRE(state.key_size == 4);
    REQUIRE(state.block_size == 4);
    REQUIRE(state.num_rounds == 10);

    // check that key was expanded properly
    CHECK(state.key[ 0] == 0x16157e2b);
    CHECK(state.key[ 1] == 0xa6d2ae28);
    CHECK(state.key[ 2] == 0x8815f7ab);
    CHECK(state.key[ 3] == 0x3c4fcf09);
    CHECK(state.key[ 4] == 0x17fefaa0);
    CHECK(state.key[ 5] == 0xb12c5488);
    CHECK(state.key[ 6] == 0x3939a323);
    CHECK(state.key[ 7] == 0x05766c2a);
    CHECK(state.key[ 8] == 0xf295c2f2);
    CHECK(state.key[ 9] == 0x43b9967a);
    CHECK(state.key[10] == 0x7a803559);
    CHECK(state.key[11] == 0x7ff65973);
    CHECK(state.key[12] == 0x7d47803d);
    CHECK(state.key[13] == 0x3efe1647);
    CHECK(state.key[14] == 0x447e231e);
    CHECK(state.key[15] == 0x3b887a6d);
    // ...
    CHECK(state.key[40] == 0xa8f914d0);
    CHECK(state.key[41] == 0x8925eec9);
    CHECK(state.key[42] == 0xc80c3fe1);
    CHECK(state.key[43] == 0xa60c63b6);

    REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);

    aes_finish(&state);
}

TEST_CASE("ECBGFSbox128-encrypt", "[ECB][GF][Sbox][128][ENCRYPT]") {
    aes_state state;

    SECTION("Test 0") {
        const uint8_t KEY[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, };
        const uint8_t PLAINTEXT[] = { 0xf3,0x44,0x81,0xec,0x3c,0xc6,0x27,0xba,0xcd,0x5d,0xc3,0xfb,0x08,0xf2,0x73,0xe6, };
        const uint8_t CIPHERTEXT[] = { 0x03,0x36,0x76,0x3e,0x96,0x6d,0x92,0x59,0x5a,0x56,0x7c,0xc9,0xce,0x53,0x7f,0x5e, };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 1") {
        const uint8_t KEY[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, };
        const uint8_t PLAINTEXT[] = { 0x97,0x98,0xc4,0x64,0x0b,0xad,0x75,0xc7,0xc3,0x22,0x7d,0xb9,0x10,0x17,0x4e,0x72, };
        const uint8_t CIPHERTEXT[] = { 0xa9,0xa1,0x63,0x1b,0xf4,0x99,0x69,0x54,0xeb,0xc0,0x93,0x95,0x7b,0x23,0x45,0x89, };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 2") {
        const uint8_t KEY[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, };
        const uint8_t PLAINTEXT[] = { 0x96,0xab,0x5c,0x2f,0xf6,0x12,0xd9,0xdf,0xaa,0xe8,0xc3,0x1f,0x30,0xc4,0x21,0x68, };
        const uint8_t CIPHERTEXT[] = { 0xff,0x4f,0x83,0x91,0xa6,0xa4,0x0c,0xa5,0xb2,0x5d,0x23,0xbe,0xdd,0x44,0xa5,0x97, };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 3") {
        const uint8_t KEY[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, };
        const uint8_t PLAINTEXT[] = { 0x6a,0x11,0x8a,0x87,0x45,0x19,0xe6,0x4e,0x99,0x63,0x79,0x8a,0x50,0x3f,0x1d,0x35, };
        const uint8_t CIPHERTEXT[] = { 0xdc,0x43,0xbe,0x40,0xbe,0x0e,0x53,0x71,0x2f,0x7e,0x2b,0xf5,0xca,0x70,0x72,0x09, };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 4") {
        const uint8_t KEY[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, };
        const uint8_t PLAINTEXT[] = { 0xcb,0x9f,0xce,0xec,0x81,0x28,0x6c,0xa3,0xe9,0x89,0xbd,0x97,0x9b,0x0c,0xb2,0x84, };
        const uint8_t CIPHERTEXT[] = { 0x92,0xbe,0xed,0xab,0x18,0x95,0xa9,0x4f,0xaa,0x69,0xb6,0x32,0xe5,0xcc,0x47,0xce, };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 5") {
        const uint8_t KEY[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, };
        const uint8_t PLAINTEXT[] = { 0xb2,0x6a,0xeb,0x18,0x74,0xe4,0x7c,0xa8,0x35,0x8f,0xf2,0x23,0x78,0xf0,0x91,0x44, };
        const uint8_t CIPHERTEXT[] = { 0x45,0x92,0x64,0xf4,0x79,0x8f,0x6a,0x78,0xba,0xcb,0x89,0xc1,0x5e,0xd3,0xd6,0x01, };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 6") {
        const uint8_t KEY[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, };
        const uint8_t PLAINTEXT[] = { 0x58,0xc8,0xe0,0x0b,0x26,0x31,0x68,0x6d,0x54,0xea,0xb8,0x4b,0x91,0xf0,0xac,0xa1, };
        const uint8_t CIPHERTEXT[] = { 0x08,0xa4,0xe2,0xef,0xec,0x8a,0x8e,0x33,0x12,0xca,0x74,0x60,0xb9,0x04,0x0b,0xbf, };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    aes_finish(&state);
}

TEST_CASE("ECBGFSbox128-decrypt", "[ECB][GF][Sbox][128][DECRYPT]") {
    aes_state state;

    SECTION("Test 0") {
        uint8_t KEY[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0x03,0x36,0x76,0x3e,0x96,0x6d,0x92,0x59,0x5a,0x56,0x7c,0xc9,0xce,0x53,0x7f,0x5e };
        uint8_t PLAINTEXT[] = { 0xf3,0x44,0x81,0xec,0x3c,0xc6,0x27,0xba,0xcd,0x5d,0xc3,0xfb,0x08,0xf2,0x73,0xe6 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 1") {
        uint8_t KEY[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0xa9,0xa1,0x63,0x1b,0xf4,0x99,0x69,0x54,0xeb,0xc0,0x93,0x95,0x7b,0x23,0x45,0x89 };
        uint8_t PLAINTEXT[] = { 0x97,0x98,0xc4,0x64,0x0b,0xad,0x75,0xc7,0xc3,0x22,0x7d,0xb9,0x10,0x17,0x4e,0x72 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 2") {
        uint8_t KEY[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0xff,0x4f,0x83,0x91,0xa6,0xa4,0x0c,0xa5,0xb2,0x5d,0x23,0xbe,0xdd,0x44,0xa5,0x97 };
        uint8_t PLAINTEXT[] = { 0x96,0xab,0x5c,0x2f,0xf6,0x12,0xd9,0xdf,0xaa,0xe8,0xc3,0x1f,0x30,0xc4,0x21,0x68 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 3") {
        uint8_t KEY[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0xdc,0x43,0xbe,0x40,0xbe,0x0e,0x53,0x71,0x2f,0x7e,0x2b,0xf5,0xca,0x70,0x72,0x09 };
        uint8_t PLAINTEXT[] = { 0x6a,0x11,0x8a,0x87,0x45,0x19,0xe6,0x4e,0x99,0x63,0x79,0x8a,0x50,0x3f,0x1d,0x35 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 4") {
        uint8_t KEY[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0x92,0xbe,0xed,0xab,0x18,0x95,0xa9,0x4f,0xaa,0x69,0xb6,0x32,0xe5,0xcc,0x47,0xce };
        uint8_t PLAINTEXT[] = { 0xcb,0x9f,0xce,0xec,0x81,0x28,0x6c,0xa3,0xe9,0x89,0xbd,0x97,0x9b,0x0c,0xb2,0x84 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 5") {
        uint8_t KEY[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0x45,0x92,0x64,0xf4,0x79,0x8f,0x6a,0x78,0xba,0xcb,0x89,0xc1,0x5e,0xd3,0xd6,0x01 };
        uint8_t PLAINTEXT[] = { 0xb2,0x6a,0xeb,0x18,0x74,0xe4,0x7c,0xa8,0x35,0x8f,0xf2,0x23,0x78,0xf0,0x91,0x44 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 6") {
        uint8_t KEY[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0x08,0xa4,0xe2,0xef,0xec,0x8a,0x8e,0x33,0x12,0xca,0x74,0x60,0xb9,0x04,0x0b,0xbf };
        uint8_t PLAINTEXT[] = { 0x58,0xc8,0xe0,0x0b,0x26,0x31,0x68,0x6d,0x54,0xea,0xb8,0x4b,0x91,0xf0,0xac,0xa1 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    aes_finish(&state);
}

TEST_CASE("ECBGFSbox192-encrypt", "[ECB][GF][Sbox][192][ENCRYPT]") {
    aes_state state;

    SECTION("Test 0") {
        const uint8_t KEY[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, };
        const uint8_t PLAINTEXT[] = { 0x1b,0x07,0x7a,0x6a,0xf4,0xb7,0xf9,0x82,0x29,0xde,0x78,0x6d,0x75,0x16,0xb6,0x39, };
        const uint8_t CIPHERTEXT[] = { 0x27,0x5c,0xfc,0x04,0x13,0xd8,0xcc,0xb7,0x05,0x13,0xc3,0x85,0x9b,0x1d,0x0f,0x72, };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 1") {
        const uint8_t KEY[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, };
        const uint8_t PLAINTEXT[] = { 0x9c,0x2d,0x88,0x42,0xe5,0xf4,0x8f,0x57,0x64,0x82,0x05,0xd3,0x9a,0x23,0x9a,0xf1, };
        const uint8_t CIPHERTEXT[] = { 0xc9,0xb8,0x13,0x5f,0xf1,0xb5,0xad,0xc4,0x13,0xdf,0xd0,0x53,0xb2,0x1b,0xd9,0x6d, };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 2") {
        const uint8_t KEY[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, };
        const uint8_t PLAINTEXT[] = { 0xbf,0xf5,0x25,0x10,0x09,0x5f,0x51,0x8e,0xcc,0xa6,0x0a,0xf4,0x20,0x54,0x44,0xbb, };
        const uint8_t CIPHERTEXT[] = { 0x4a,0x36,0x50,0xc3,0x37,0x1c,0xe2,0xeb,0x35,0xe3,0x89,0xa1,0x71,0x42,0x74,0x40, };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 3") {
        const uint8_t KEY[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, };
        const uint8_t PLAINTEXT[] = { 0x51,0x71,0x97,0x83,0xd3,0x18,0x5a,0x53,0x5b,0xd7,0x5a,0xdc,0x65,0x07,0x1c,0xe1, };
        const uint8_t CIPHERTEXT[] = { 0x4f,0x35,0x45,0x92,0xff,0x7c,0x88,0x47,0xd2,0xd0,0x87,0x0c,0xa9,0x48,0x1b,0x7c, };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 4") {
        const uint8_t KEY[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, };
        const uint8_t PLAINTEXT[] = { 0x26,0xaa,0x49,0xdc,0xfe,0x76,0x29,0xa8,0x90,0x1a,0x69,0xa9,0x91,0x4e,0x6d,0xfd, };
        const uint8_t CIPHERTEXT[] = { 0xd5,0xe0,0x8b,0xf9,0xa1,0x82,0xe8,0x57,0xcf,0x40,0xb3,0xa3,0x6e,0xe2,0x48,0xcc, };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 5") {
        const uint8_t KEY[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, };
        const uint8_t PLAINTEXT[] = { 0x94,0x1a,0x47,0x73,0x05,0x82,0x24,0xe1,0xef,0x66,0xd1,0x0e,0x0a,0x6e,0xe7,0x82, };
        const uint8_t CIPHERTEXT[] = { 0x06,0x7c,0xd9,0xd3,0x74,0x92,0x07,0x79,0x18,0x41,0x56,0x25,0x07,0xfa,0x96,0x26, };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    aes_finish(&state);
}

TEST_CASE("ECBGFSbox192-decrypt", "[ECB][GF][Sbox][192][DECRYPT]") {
    aes_state state;
}

