#include "rijndael.h"

#include "catch.hpp"

#include <string.h>

#ifndef NDEBUG
# define TRACE(...) do { \
    fprintf(stderr, "%s:%d: ", __FILE__, __LINE__); \
    fprintf(stderr, ##__VA_ARGS__); \
    fputc('\n', stderr); \
} while(0)

#else
# define TRACE(...)
#endif

TEST_CASE("demo") {
    aes_state state;

    const uint8_t KEY[] = { 0x2b,0x7e,0x15,0x16,0x28,0xae,0xd2,0xa6,0xab,0xf7,0x15,0x88,0x09,0xcf,0x4f,0x3c };
    const uint8_t PLAINTEXT[] = { 0x32,0x43,0xf6,0xa8,0x88,0x5a,0x30,0x8d,0x31,0x31,0x98,0xa2,0xe0,0x37,0x07,0x34 };
    const uint8_t CIPHERTEXT[] = { 0x39,0x25,0x84,0x1d,0x02,0xdc,0x09,0xfb,0xdc,0x11,0x85,0x97,0x19,0x6a,0x0b,0x32 };

    uint8_t out[sizeof(CIPHERTEXT)];
    REQUIRE(aes_begin(&state, KEY, 128));
    REQUIRE(state.key_size == 4);
    REQUIRE(state.block_size == 4);
    REQUIRE(state.num_rounds == 10);

    // check that key was expanded properly
    CHECK(state.key[ 0] == 0x16157e2b);
    CHECK(state.key[ 1] == 0xa6d2ae28);
    CHECK(state.key[ 2] == 0x8815f7ab);
    CHECK(state.key[ 3] == 0x3c4fcf09);
    CHECK(state.key[ 4] == 0x17fefaa0);
    CHECK(state.key[ 5] == 0xb12c5488);
    CHECK(state.key[ 6] == 0x3939a323);
    CHECK(state.key[ 7] == 0x05766c2a);
    CHECK(state.key[ 8] == 0xf295c2f2);
    CHECK(state.key[ 9] == 0x43b9967a);
    CHECK(state.key[10] == 0x7a803559);
    CHECK(state.key[11] == 0x7ff65973);
    CHECK(state.key[12] == 0x7d47803d);
    CHECK(state.key[13] == 0x3efe1647);
    CHECK(state.key[14] == 0x447e231e);
    CHECK(state.key[15] == 0x3b887a6d);
    // ...
    CHECK(state.key[40] == 0xa8f914d0);
    CHECK(state.key[41] == 0x8925eec9);
    CHECK(state.key[42] == 0xc80c3fe1);
    CHECK(state.key[43] == 0xa60c63b6);

    REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);

    aes_finish(&state);
}

TEST_CASE("ECBGFSbox128-encrypt", "[ECB][GF][Sbox][128][ENCRYPT]") {
    aes_state state;

    SECTION("Test 0") {
        const uint8_t KEY[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        const uint8_t PLAINTEXT[] = { 0xf3,0x44,0x81,0xec,0x3c,0xc6,0x27,0xba,0xcd,0x5d,0xc3,0xfb,0x08,0xf2,0x73,0xe6 };
        const uint8_t CIPHERTEXT[] = { 0x03,0x36,0x76,0x3e,0x96,0x6d,0x92,0x59,0x5a,0x56,0x7c,0xc9,0xce,0x53,0x7f,0x5e };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 1") {
        const uint8_t KEY[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        const uint8_t PLAINTEXT[] = { 0x97,0x98,0xc4,0x64,0x0b,0xad,0x75,0xc7,0xc3,0x22,0x7d,0xb9,0x10,0x17,0x4e,0x72 };
        const uint8_t CIPHERTEXT[] = { 0xa9,0xa1,0x63,0x1b,0xf4,0x99,0x69,0x54,0xeb,0xc0,0x93,0x95,0x7b,0x23,0x45,0x89 };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 2") {
        const uint8_t KEY[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        const uint8_t PLAINTEXT[] = { 0x96,0xab,0x5c,0x2f,0xf6,0x12,0xd9,0xdf,0xaa,0xe8,0xc3,0x1f,0x30,0xc4,0x21,0x68 };
        const uint8_t CIPHERTEXT[] = { 0xff,0x4f,0x83,0x91,0xa6,0xa4,0x0c,0xa5,0xb2,0x5d,0x23,0xbe,0xdd,0x44,0xa5,0x97 };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 3") {
        const uint8_t KEY[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        const uint8_t PLAINTEXT[] = { 0x6a,0x11,0x8a,0x87,0x45,0x19,0xe6,0x4e,0x99,0x63,0x79,0x8a,0x50,0x3f,0x1d,0x35 };
        const uint8_t CIPHERTEXT[] = { 0xdc,0x43,0xbe,0x40,0xbe,0x0e,0x53,0x71,0x2f,0x7e,0x2b,0xf5,0xca,0x70,0x72,0x09 };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 4") {
        const uint8_t KEY[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        const uint8_t PLAINTEXT[] = { 0xcb,0x9f,0xce,0xec,0x81,0x28,0x6c,0xa3,0xe9,0x89,0xbd,0x97,0x9b,0x0c,0xb2,0x84 };
        const uint8_t CIPHERTEXT[] = { 0x92,0xbe,0xed,0xab,0x18,0x95,0xa9,0x4f,0xaa,0x69,0xb6,0x32,0xe5,0xcc,0x47,0xce };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 5") {
        const uint8_t KEY[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        const uint8_t PLAINTEXT[] = { 0xb2,0x6a,0xeb,0x18,0x74,0xe4,0x7c,0xa8,0x35,0x8f,0xf2,0x23,0x78,0xf0,0x91,0x44 };
        const uint8_t CIPHERTEXT[] = { 0x45,0x92,0x64,0xf4,0x79,0x8f,0x6a,0x78,0xba,0xcb,0x89,0xc1,0x5e,0xd3,0xd6,0x01 };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 6") {
        const uint8_t KEY[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        const uint8_t PLAINTEXT[] = { 0x58,0xc8,0xe0,0x0b,0x26,0x31,0x68,0x6d,0x54,0xea,0xb8,0x4b,0x91,0xf0,0xac,0xa1 };
        const uint8_t CIPHERTEXT[] = { 0x08,0xa4,0xe2,0xef,0xec,0x8a,0x8e,0x33,0x12,0xca,0x74,0x60,0xb9,0x04,0x0b,0xbf };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    aes_finish(&state);
}

TEST_CASE("ECBGFSbox128-decrypt", "[ECB][GF][Sbox][128][DECRYPT]") {
    aes_state state;

    SECTION("Test 0") {
        uint8_t KEY[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0x03,0x36,0x76,0x3e,0x96,0x6d,0x92,0x59,0x5a,0x56,0x7c,0xc9,0xce,0x53,0x7f,0x5e };
        uint8_t PLAINTEXT[] = { 0xf3,0x44,0x81,0xec,0x3c,0xc6,0x27,0xba,0xcd,0x5d,0xc3,0xfb,0x08,0xf2,0x73,0xe6 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 1") {
        uint8_t KEY[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0xa9,0xa1,0x63,0x1b,0xf4,0x99,0x69,0x54,0xeb,0xc0,0x93,0x95,0x7b,0x23,0x45,0x89 };
        uint8_t PLAINTEXT[] = { 0x97,0x98,0xc4,0x64,0x0b,0xad,0x75,0xc7,0xc3,0x22,0x7d,0xb9,0x10,0x17,0x4e,0x72 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 2") {
        uint8_t KEY[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0xff,0x4f,0x83,0x91,0xa6,0xa4,0x0c,0xa5,0xb2,0x5d,0x23,0xbe,0xdd,0x44,0xa5,0x97 };
        uint8_t PLAINTEXT[] = { 0x96,0xab,0x5c,0x2f,0xf6,0x12,0xd9,0xdf,0xaa,0xe8,0xc3,0x1f,0x30,0xc4,0x21,0x68 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 3") {
        uint8_t KEY[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0xdc,0x43,0xbe,0x40,0xbe,0x0e,0x53,0x71,0x2f,0x7e,0x2b,0xf5,0xca,0x70,0x72,0x09 };
        uint8_t PLAINTEXT[] = { 0x6a,0x11,0x8a,0x87,0x45,0x19,0xe6,0x4e,0x99,0x63,0x79,0x8a,0x50,0x3f,0x1d,0x35 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 4") {
        uint8_t KEY[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0x92,0xbe,0xed,0xab,0x18,0x95,0xa9,0x4f,0xaa,0x69,0xb6,0x32,0xe5,0xcc,0x47,0xce };
        uint8_t PLAINTEXT[] = { 0xcb,0x9f,0xce,0xec,0x81,0x28,0x6c,0xa3,0xe9,0x89,0xbd,0x97,0x9b,0x0c,0xb2,0x84 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 5") {
        uint8_t KEY[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0x45,0x92,0x64,0xf4,0x79,0x8f,0x6a,0x78,0xba,0xcb,0x89,0xc1,0x5e,0xd3,0xd6,0x01 };
        uint8_t PLAINTEXT[] = { 0xb2,0x6a,0xeb,0x18,0x74,0xe4,0x7c,0xa8,0x35,0x8f,0xf2,0x23,0x78,0xf0,0x91,0x44 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 6") {
        uint8_t KEY[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0x08,0xa4,0xe2,0xef,0xec,0x8a,0x8e,0x33,0x12,0xca,0x74,0x60,0xb9,0x04,0x0b,0xbf };
        uint8_t PLAINTEXT[] = { 0x58,0xc8,0xe0,0x0b,0x26,0x31,0x68,0x6d,0x54,0xea,0xb8,0x4b,0x91,0xf0,0xac,0xa1 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    aes_finish(&state);
}

TEST_CASE("ECBGFSbox192-encrypt", "[ECB][GF][Sbox][192][ENCRYPT]") {
    aes_state state;

    SECTION("Test 0") {
        const uint8_t KEY[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        const uint8_t PLAINTEXT[] = { 0x1b,0x07,0x7a,0x6a,0xf4,0xb7,0xf9,0x82,0x29,0xde,0x78,0x6d,0x75,0x16,0xb6,0x39 };
        const uint8_t CIPHERTEXT[] = { 0x27,0x5c,0xfc,0x04,0x13,0xd8,0xcc,0xb7,0x05,0x13,0xc3,0x85,0x9b,0x1d,0x0f,0x72 };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 1") {
        const uint8_t KEY[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        const uint8_t PLAINTEXT[] = { 0x9c,0x2d,0x88,0x42,0xe5,0xf4,0x8f,0x57,0x64,0x82,0x05,0xd3,0x9a,0x23,0x9a,0xf1 };
        const uint8_t CIPHERTEXT[] = { 0xc9,0xb8,0x13,0x5f,0xf1,0xb5,0xad,0xc4,0x13,0xdf,0xd0,0x53,0xb2,0x1b,0xd9,0x6d };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 2") {
        const uint8_t KEY[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        const uint8_t PLAINTEXT[] = { 0xbf,0xf5,0x25,0x10,0x09,0x5f,0x51,0x8e,0xcc,0xa6,0x0a,0xf4,0x20,0x54,0x44,0xbb };
        const uint8_t CIPHERTEXT[] = { 0x4a,0x36,0x50,0xc3,0x37,0x1c,0xe2,0xeb,0x35,0xe3,0x89,0xa1,0x71,0x42,0x74,0x40 };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 3") {
        const uint8_t KEY[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        const uint8_t PLAINTEXT[] = { 0x51,0x71,0x97,0x83,0xd3,0x18,0x5a,0x53,0x5b,0xd7,0x5a,0xdc,0x65,0x07,0x1c,0xe1 };
        const uint8_t CIPHERTEXT[] = { 0x4f,0x35,0x45,0x92,0xff,0x7c,0x88,0x47,0xd2,0xd0,0x87,0x0c,0xa9,0x48,0x1b,0x7c };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 4") {
        const uint8_t KEY[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        const uint8_t PLAINTEXT[] = { 0x26,0xaa,0x49,0xdc,0xfe,0x76,0x29,0xa8,0x90,0x1a,0x69,0xa9,0x91,0x4e,0x6d,0xfd };
        const uint8_t CIPHERTEXT[] = { 0xd5,0xe0,0x8b,0xf9,0xa1,0x82,0xe8,0x57,0xcf,0x40,0xb3,0xa3,0x6e,0xe2,0x48,0xcc };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 5") {
        const uint8_t KEY[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        const uint8_t PLAINTEXT[] = { 0x94,0x1a,0x47,0x73,0x05,0x82,0x24,0xe1,0xef,0x66,0xd1,0x0e,0x0a,0x6e,0xe7,0x82 };
        const uint8_t CIPHERTEXT[] = { 0x06,0x7c,0xd9,0xd3,0x74,0x92,0x07,0x79,0x18,0x41,0x56,0x25,0x07,0xfa,0x96,0x26 };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    aes_finish(&state);
}

TEST_CASE("ECBGFSbox192-decrypt", "[ECB][GF][Sbox][192][DECRYPT]") {
    aes_state state;

    SECTION("Test 0") {
        uint8_t KEY[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0x27,0x5c,0xfc,0x04,0x13,0xd8,0xcc,0xb7,0x05,0x13,0xc3,0x85,0x9b,0x1d,0x0f,0x72 };
        uint8_t PLAINTEXT[] = { 0x1b,0x07,0x7a,0x6a,0xf4,0xb7,0xf9,0x82,0x29,0xde,0x78,0x6d,0x75,0x16,0xb6,0x39 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 1") {
        uint8_t KEY[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0xc9,0xb8,0x13,0x5f,0xf1,0xb5,0xad,0xc4,0x13,0xdf,0xd0,0x53,0xb2,0x1b,0xd9,0x6d };
        uint8_t PLAINTEXT[] = { 0x9c,0x2d,0x88,0x42,0xe5,0xf4,0x8f,0x57,0x64,0x82,0x05,0xd3,0x9a,0x23,0x9a,0xf1 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 2") {
        uint8_t KEY[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0x4a,0x36,0x50,0xc3,0x37,0x1c,0xe2,0xeb,0x35,0xe3,0x89,0xa1,0x71,0x42,0x74,0x40 };
        uint8_t PLAINTEXT[] = { 0xbf,0xf5,0x25,0x10,0x09,0x5f,0x51,0x8e,0xcc,0xa6,0x0a,0xf4,0x20,0x54,0x44,0xbb };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 3") {
        uint8_t KEY[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0x4f,0x35,0x45,0x92,0xff,0x7c,0x88,0x47,0xd2,0xd0,0x87,0x0c,0xa9,0x48,0x1b,0x7c };
        uint8_t PLAINTEXT[] = { 0x51,0x71,0x97,0x83,0xd3,0x18,0x5a,0x53,0x5b,0xd7,0x5a,0xdc,0x65,0x07,0x1c,0xe1 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 4") {
        uint8_t KEY[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0xd5,0xe0,0x8b,0xf9,0xa1,0x82,0xe8,0x57,0xcf,0x40,0xb3,0xa3,0x6e,0xe2,0x48,0xcc };
        uint8_t PLAINTEXT[] = { 0x26,0xaa,0x49,0xdc,0xfe,0x76,0x29,0xa8,0x90,0x1a,0x69,0xa9,0x91,0x4e,0x6d,0xfd };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 5") {
        uint8_t KEY[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0x06,0x7c,0xd9,0xd3,0x74,0x92,0x07,0x79,0x18,0x41,0x56,0x25,0x07,0xfa,0x96,0x26 };
        uint8_t PLAINTEXT[] = { 0x94,0x1a,0x47,0x73,0x05,0x82,0x24,0xe1,0xef,0x66,0xd1,0x0e,0x0a,0x6e,0xe7,0x82 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    aes_finish(&state);
}

TEST_CASE("ECBKeySbox128-encrypt", "[ECB][Key][Sbox][128][ENCRYPT]") {
    aes_state state;

    SECTION("Test 0") {
        uint8_t KEY[] = { 0x10,0xa5,0x88,0x69,0xd7,0x4b,0xe5,0xa3,0x74,0xcf,0x86,0x7c,0xfb,0x47,0x38,0x59 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0x6d,0x25,0x1e,0x69,0x44,0xb0,0x51,0xe0,0x4e,0xaa,0x6f,0xb4,0xdb,0xf7,0x84,0x65 };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 1") {
        uint8_t KEY[] = { 0xca,0xea,0x65,0xcd,0xbb,0x75,0xe9,0x16,0x9e,0xcd,0x22,0xeb,0xe6,0xe5,0x46,0x75 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0x6e,0x29,0x20,0x11,0x90,0x15,0x2d,0xf4,0xee,0x05,0x81,0x39,0xde,0xf6,0x10,0xbb };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 2") {
        uint8_t KEY[] = { 0xa2,0xe2,0xfa,0x9b,0xaf,0x7d,0x20,0x82,0x2c,0xa9,0xf0,0x54,0x2f,0x76,0x4a,0x41 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0xc3,0xb4,0x4b,0x95,0xd9,0xd2,0xf2,0x56,0x70,0xee,0xe9,0xa0,0xde,0x09,0x9f,0xa3 };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 3") {
        uint8_t KEY[] = { 0xb6,0x36,0x4a,0xc4,0xe1,0xde,0x1e,0x28,0x5e,0xaf,0x14,0x4a,0x24,0x15,0xf7,0xa0 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0x5d,0x9b,0x05,0x57,0x8f,0xc9,0x44,0xb3,0xcf,0x1c,0xcf,0x0e,0x74,0x6c,0xd5,0x81 };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 4") {
        uint8_t KEY[] = { 0x64,0xcf,0x9c,0x7a,0xbc,0x50,0xb8,0x88,0xaf,0x65,0xf4,0x9d,0x52,0x19,0x44,0xb2 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0xf7,0xef,0xc8,0x9d,0x5d,0xba,0x57,0x81,0x04,0x01,0x6c,0xe5,0xad,0x65,0x9c,0x05 };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 5") {
        uint8_t KEY[] = { 0x47,0xd6,0x74,0x2e,0xef,0xcc,0x04,0x65,0xdc,0x96,0x35,0x5e,0x85,0x1b,0x64,0xd9 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0x03,0x06,0x19,0x4f,0x66,0x6d,0x18,0x36,0x24,0xaa,0x23,0x0a,0x8b,0x26,0x4a,0xe7 };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 6") {
        uint8_t KEY[] = { 0x3e,0xb3,0x97,0x90,0x67,0x8c,0x56,0xbe,0xe3,0x4b,0xbc,0xde,0xcc,0xf6,0xcd,0xb5 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0x85,0x80,0x75,0xd5,0x36,0xd7,0x9c,0xce,0xe5,0x71,0xf7,0xd7,0x20,0x4b,0x1f,0x67 };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 7") {
        uint8_t KEY[] = { 0x64,0x11,0x0a,0x92,0x4f,0x07,0x43,0xd5,0x00,0xcc,0xad,0xae,0x72,0xc1,0x34,0x27 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0x35,0x87,0x0c,0x6a,0x57,0xe9,0xe9,0x23,0x14,0xbc,0xb8,0x08,0x7c,0xde,0x72,0xce };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 8") {
        uint8_t KEY[] = { 0x18,0xd8,0x12,0x65,0x16,0xf8,0xa1,0x2a,0xb1,0xa3,0x6d,0x9f,0x04,0xd6,0x8e,0x51 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0x6c,0x68,0xe9,0xbe,0x5e,0xc4,0x1e,0x22,0xc8,0x25,0xb7,0xc7,0xaf,0xfb,0x43,0x63 };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 9") {
        uint8_t KEY[] = { 0xf5,0x30,0x35,0x79,0x68,0x57,0x84,0x80,0xb3,0x98,0xa3,0xc2,0x51,0xcd,0x10,0x93 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0xf5,0xdf,0x39,0x99,0x0f,0xc6,0x88,0xf1,0xb0,0x72,0x24,0xcc,0x03,0xe8,0x6c,0xea };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 10") {
        uint8_t KEY[] = { 0xda,0x84,0x36,0x7f,0x32,0x5d,0x42,0xd6,0x01,0xb4,0x32,0x69,0x64,0x80,0x2e,0x8e };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0xbb,0xa0,0x71,0xbc,0xb4,0x70,0xf8,0xf6,0x58,0x6e,0x5d,0x3a,0xdd,0x18,0xbc,0x66 };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 11") {
        uint8_t KEY[] = { 0xe3,0x7b,0x1c,0x6a,0xa2,0x84,0x6f,0x6f,0xdb,0x41,0x3f,0x23,0x8b,0x08,0x9f,0x23 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0x43,0xc9,0xf7,0xe6,0x2f,0x5d,0x28,0x8b,0xb2,0x7a,0xa4,0x0e,0xf8,0xfe,0x1e,0xa8 };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 12") {
        uint8_t KEY[] = { 0x6c,0x00,0x2b,0x68,0x24,0x83,0xe0,0xca,0xbc,0xc7,0x31,0xc2,0x53,0xbe,0x56,0x74 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0x35,0x80,0xd1,0x9c,0xff,0x44,0xf1,0x01,0x4a,0x7c,0x96,0x6a,0x69,0x05,0x9d,0xe5 };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 13") {
        uint8_t KEY[] = { 0x14,0x3a,0xe8,0xed,0x65,0x55,0xab,0xa9,0x61,0x10,0xab,0x58,0x89,0x3a,0x8a,0xe1 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0x80,0x6d,0xa8,0x64,0xdd,0x29,0xd4,0x8d,0xea,0xfb,0xe7,0x64,0xf8,0x20,0x2a,0xef };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 14") {
        uint8_t KEY[] = { 0xb6,0x94,0x18,0xa8,0x53,0x32,0x24,0x0d,0xc8,0x24,0x92,0x35,0x39,0x56,0xae,0x0c };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0xa3,0x03,0xd9,0x40,0xde,0xd8,0xf0,0xba,0xff,0x6f,0x75,0x41,0x4c,0xac,0x52,0x43 };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 15") {
        uint8_t KEY[] = { 0x71,0xb5,0xc0,0x8a,0x19,0x93,0xe1,0x36,0x2e,0x4d,0x0c,0xe9,0xb2,0x2b,0x78,0xd5 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0xc2,0xda,0xbd,0x11,0x7f,0x8a,0x3e,0xca,0xbf,0xbb,0x11,0xd1,0x21,0x94,0xd9,0xd0 };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 16") {
        uint8_t KEY[] = { 0xe2,0x34,0xcd,0xca,0x26,0x06,0xb8,0x1f,0x29,0x40,0x8d,0x5f,0x6d,0xa2,0x12,0x06 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0xff,0xf6,0x0a,0x47,0x40,0x08,0x6b,0x3b,0x9c,0x56,0x19,0x5b,0x98,0xd9,0x1a,0x7b };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 17") {
        uint8_t KEY[] = { 0x13,0x23,0x7c,0x49,0x07,0x4a,0x3d,0xa0,0x78,0xdc,0x1d,0x82,0x8b,0xb7,0x8c,0x6f };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0x81,0x46,0xa0,0x8e,0x23,0x57,0xf0,0xca,0xa3,0x0c,0xa8,0xc9,0x4d,0x1a,0x05,0x44 };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 18") {
        uint8_t KEY[] = { 0x30,0x71,0xa2,0xa4,0x8f,0xe6,0xcb,0xd0,0x4f,0x1a,0x12,0x90,0x98,0xe3,0x08,0xf8 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0x4b,0x98,0xe0,0x6d,0x35,0x6d,0xeb,0x07,0xeb,0xb8,0x24,0xe5,0x71,0x3f,0x7b,0xe3 };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 19") {
        uint8_t KEY[] = { 0x90,0xf4,0x2e,0xc0,0xf6,0x83,0x85,0xf2,0xff,0xc5,0xdf,0xc0,0x3a,0x65,0x4d,0xce };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0x7a,0x20,0xa5,0x3d,0x46,0x0f,0xc9,0xce,0x04,0x23,0xa7,0xa0,0x76,0x4c,0x6c,0xf2 };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 20") {
        uint8_t KEY[] = { 0xfe,0xbd,0x9a,0x24,0xd8,0xb6,0x5c,0x1c,0x78,0x7d,0x50,0xa4,0xed,0x36,0x19,0xa9 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0xf4,0xa7,0x0d,0x8a,0xf8,0x77,0xf9,0xb0,0x2b,0x4c,0x40,0xdf,0x57,0xd4,0x5b,0x17 };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    aes_finish(&state);
}

TEST_CASE("ECBKeySbox128-decrypt", "[ECB][Key][Sbox][128][DECRYPT]") {
    aes_state state;

    SECTION("Test 0") {
        uint8_t KEY[] = { 0x10,0xa5,0x88,0x69,0xd7,0x4b,0xe5,0xa3,0x74,0xcf,0x86,0x7c,0xfb,0x47,0x38,0x59 };
        uint8_t CIPHERTEXT[] = { 0x6d,0x25,0x1e,0x69,0x44,0xb0,0x51,0xe0,0x4e,0xaa,0x6f,0xb4,0xdb,0xf7,0x84,0x65 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 1") {
        uint8_t KEY[] = { 0xca,0xea,0x65,0xcd,0xbb,0x75,0xe9,0x16,0x9e,0xcd,0x22,0xeb,0xe6,0xe5,0x46,0x75 };
        uint8_t CIPHERTEXT[] = { 0x6e,0x29,0x20,0x11,0x90,0x15,0x2d,0xf4,0xee,0x05,0x81,0x39,0xde,0xf6,0x10,0xbb };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 2") {
        uint8_t KEY[] = { 0xa2,0xe2,0xfa,0x9b,0xaf,0x7d,0x20,0x82,0x2c,0xa9,0xf0,0x54,0x2f,0x76,0x4a,0x41 };
        uint8_t CIPHERTEXT[] = { 0xc3,0xb4,0x4b,0x95,0xd9,0xd2,0xf2,0x56,0x70,0xee,0xe9,0xa0,0xde,0x09,0x9f,0xa3 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 3") {
        uint8_t KEY[] = { 0xb6,0x36,0x4a,0xc4,0xe1,0xde,0x1e,0x28,0x5e,0xaf,0x14,0x4a,0x24,0x15,0xf7,0xa0 };
        uint8_t CIPHERTEXT[] = { 0x5d,0x9b,0x05,0x57,0x8f,0xc9,0x44,0xb3,0xcf,0x1c,0xcf,0x0e,0x74,0x6c,0xd5,0x81 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 4") {
        uint8_t KEY[] = { 0x64,0xcf,0x9c,0x7a,0xbc,0x50,0xb8,0x88,0xaf,0x65,0xf4,0x9d,0x52,0x19,0x44,0xb2 };
        uint8_t CIPHERTEXT[] = { 0xf7,0xef,0xc8,0x9d,0x5d,0xba,0x57,0x81,0x04,0x01,0x6c,0xe5,0xad,0x65,0x9c,0x05 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 5") {
        uint8_t KEY[] = { 0x47,0xd6,0x74,0x2e,0xef,0xcc,0x04,0x65,0xdc,0x96,0x35,0x5e,0x85,0x1b,0x64,0xd9 };
        uint8_t CIPHERTEXT[] = { 0x03,0x06,0x19,0x4f,0x66,0x6d,0x18,0x36,0x24,0xaa,0x23,0x0a,0x8b,0x26,0x4a,0xe7 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 6") {
        uint8_t KEY[] = { 0x3e,0xb3,0x97,0x90,0x67,0x8c,0x56,0xbe,0xe3,0x4b,0xbc,0xde,0xcc,0xf6,0xcd,0xb5 };
        uint8_t CIPHERTEXT[] = { 0x85,0x80,0x75,0xd5,0x36,0xd7,0x9c,0xce,0xe5,0x71,0xf7,0xd7,0x20,0x4b,0x1f,0x67 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 7") {
        uint8_t KEY[] = { 0x64,0x11,0x0a,0x92,0x4f,0x07,0x43,0xd5,0x00,0xcc,0xad,0xae,0x72,0xc1,0x34,0x27 };
        uint8_t CIPHERTEXT[] = { 0x35,0x87,0x0c,0x6a,0x57,0xe9,0xe9,0x23,0x14,0xbc,0xb8,0x08,0x7c,0xde,0x72,0xce };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 8") {
        uint8_t KEY[] = { 0x18,0xd8,0x12,0x65,0x16,0xf8,0xa1,0x2a,0xb1,0xa3,0x6d,0x9f,0x04,0xd6,0x8e,0x51 };
        uint8_t CIPHERTEXT[] = { 0x6c,0x68,0xe9,0xbe,0x5e,0xc4,0x1e,0x22,0xc8,0x25,0xb7,0xc7,0xaf,0xfb,0x43,0x63 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 9") {
        uint8_t KEY[] = { 0xf5,0x30,0x35,0x79,0x68,0x57,0x84,0x80,0xb3,0x98,0xa3,0xc2,0x51,0xcd,0x10,0x93 };
        uint8_t CIPHERTEXT[] = { 0xf5,0xdf,0x39,0x99,0x0f,0xc6,0x88,0xf1,0xb0,0x72,0x24,0xcc,0x03,0xe8,0x6c,0xea };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 10") {
        uint8_t KEY[] = { 0xda,0x84,0x36,0x7f,0x32,0x5d,0x42,0xd6,0x01,0xb4,0x32,0x69,0x64,0x80,0x2e,0x8e };
        uint8_t CIPHERTEXT[] = { 0xbb,0xa0,0x71,0xbc,0xb4,0x70,0xf8,0xf6,0x58,0x6e,0x5d,0x3a,0xdd,0x18,0xbc,0x66 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 11") {
        uint8_t KEY[] = { 0xe3,0x7b,0x1c,0x6a,0xa2,0x84,0x6f,0x6f,0xdb,0x41,0x3f,0x23,0x8b,0x08,0x9f,0x23 };
        uint8_t CIPHERTEXT[] = { 0x43,0xc9,0xf7,0xe6,0x2f,0x5d,0x28,0x8b,0xb2,0x7a,0xa4,0x0e,0xf8,0xfe,0x1e,0xa8 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 12") {
        uint8_t KEY[] = { 0x6c,0x00,0x2b,0x68,0x24,0x83,0xe0,0xca,0xbc,0xc7,0x31,0xc2,0x53,0xbe,0x56,0x74 };
        uint8_t CIPHERTEXT[] = { 0x35,0x80,0xd1,0x9c,0xff,0x44,0xf1,0x01,0x4a,0x7c,0x96,0x6a,0x69,0x05,0x9d,0xe5 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 13") {
        uint8_t KEY[] = { 0x14,0x3a,0xe8,0xed,0x65,0x55,0xab,0xa9,0x61,0x10,0xab,0x58,0x89,0x3a,0x8a,0xe1 };
        uint8_t CIPHERTEXT[] = { 0x80,0x6d,0xa8,0x64,0xdd,0x29,0xd4,0x8d,0xea,0xfb,0xe7,0x64,0xf8,0x20,0x2a,0xef };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 14") {
        uint8_t KEY[] = { 0xb6,0x94,0x18,0xa8,0x53,0x32,0x24,0x0d,0xc8,0x24,0x92,0x35,0x39,0x56,0xae,0x0c };
        uint8_t CIPHERTEXT[] = { 0xa3,0x03,0xd9,0x40,0xde,0xd8,0xf0,0xba,0xff,0x6f,0x75,0x41,0x4c,0xac,0x52,0x43 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 15") {
        uint8_t KEY[] = { 0x71,0xb5,0xc0,0x8a,0x19,0x93,0xe1,0x36,0x2e,0x4d,0x0c,0xe9,0xb2,0x2b,0x78,0xd5 };
        uint8_t CIPHERTEXT[] = { 0xc2,0xda,0xbd,0x11,0x7f,0x8a,0x3e,0xca,0xbf,0xbb,0x11,0xd1,0x21,0x94,0xd9,0xd0 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 16") {
        uint8_t KEY[] = { 0xe2,0x34,0xcd,0xca,0x26,0x06,0xb8,0x1f,0x29,0x40,0x8d,0x5f,0x6d,0xa2,0x12,0x06 };
        uint8_t CIPHERTEXT[] = { 0xff,0xf6,0x0a,0x47,0x40,0x08,0x6b,0x3b,0x9c,0x56,0x19,0x5b,0x98,0xd9,0x1a,0x7b };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 17") {
        uint8_t KEY[] = { 0x13,0x23,0x7c,0x49,0x07,0x4a,0x3d,0xa0,0x78,0xdc,0x1d,0x82,0x8b,0xb7,0x8c,0x6f };
        uint8_t CIPHERTEXT[] = { 0x81,0x46,0xa0,0x8e,0x23,0x57,0xf0,0xca,0xa3,0x0c,0xa8,0xc9,0x4d,0x1a,0x05,0x44 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 18") {
        uint8_t KEY[] = { 0x30,0x71,0xa2,0xa4,0x8f,0xe6,0xcb,0xd0,0x4f,0x1a,0x12,0x90,0x98,0xe3,0x08,0xf8 };
        uint8_t CIPHERTEXT[] = { 0x4b,0x98,0xe0,0x6d,0x35,0x6d,0xeb,0x07,0xeb,0xb8,0x24,0xe5,0x71,0x3f,0x7b,0xe3 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 19") {
        uint8_t KEY[] = { 0x90,0xf4,0x2e,0xc0,0xf6,0x83,0x85,0xf2,0xff,0xc5,0xdf,0xc0,0x3a,0x65,0x4d,0xce };
        uint8_t CIPHERTEXT[] = { 0x7a,0x20,0xa5,0x3d,0x46,0x0f,0xc9,0xce,0x04,0x23,0xa7,0xa0,0x76,0x4c,0x6c,0xf2 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 20") {
        uint8_t KEY[] = { 0xfe,0xbd,0x9a,0x24,0xd8,0xb6,0x5c,0x1c,0x78,0x7d,0x50,0xa4,0xed,0x36,0x19,0xa9 };
        uint8_t CIPHERTEXT[] = { 0xf4,0xa7,0x0d,0x8a,0xf8,0x77,0xf9,0xb0,0x2b,0x4c,0x40,0xdf,0x57,0xd4,0x5b,0x17 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 128));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    aes_finish(&state);
}

TEST_CASE("ECBKeySbox192-encrypt", "[ECB][Key][Sbox][192][ENCRYPT]") {
    aes_state state;

    SECTION("Test 0") {
        uint8_t KEY[] = { 0xe9,0xf0,0x65,0xd7,0xc1,0x35,0x73,0x58,0x7f,0x78,0x75,0x35,0x7d,0xfb,0xb1,0x6c,0x53,0x48,0x9f,0x6a,0x4b,0xd0,0xf7,0xcd };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0x09,0x56,0x25,0x9c,0x9c,0xd5,0xcf,0xd0,0x18,0x1c,0xca,0x53,0x38,0x0c,0xde,0x06 };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 1") {
        uint8_t KEY[] = { 0x15,0xd2,0x0f,0x6e,0xbc,0x7e,0x64,0x9f,0xd9,0x5b,0x76,0xb1,0x07,0xe6,0xda,0xba,0x96,0x7c,0x8a,0x94,0x84,0x79,0x7f,0x29 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0x8e,0x4e,0x18,0x42,0x4e,0x59,0x1a,0x3d,0x5b,0x6f,0x08,0x76,0xf1,0x6f,0x85,0x94 };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 2") {
        uint8_t KEY[] = { 0xa8,0xa2,0x82,0xee,0x31,0xc0,0x3f,0xae,0x4f,0x8e,0x9b,0x89,0x30,0xd5,0x47,0x3c,0x2e,0xd6,0x95,0xa3,0x47,0xe8,0x8b,0x7c };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0x93,0xf3,0x27,0x0c,0xfc,0x87,0x7e,0xf1,0x7e,0x10,0x6c,0xe9,0x38,0x97,0x9c,0xb0 };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 3") {
        uint8_t KEY[] = { 0xcd,0x62,0x37,0x6d,0x5e,0xbb,0x41,0x49,0x17,0xf0,0xc7,0x8f,0x05,0x26,0x64,0x33,0xdc,0x91,0x92,0xa1,0xec,0x94,0x33,0x00 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0x7f,0x6c,0x25,0xff,0x41,0x85,0x85,0x61,0xbb,0x62,0xf3,0x64,0x92,0xe9,0x3c,0x29 };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 4") {
        uint8_t KEY[] = { 0x50,0x2a,0x6a,0xb3,0x69,0x84,0xaf,0x26,0x8b,0xf4,0x23,0xc7,0xf5,0x09,0x20,0x52,0x07,0xfc,0x15,0x52,0xaf,0x4a,0x91,0xe5 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0x8e,0x06,0x55,0x6d,0xcb,0xb0,0x0b,0x80,0x9a,0x02,0x50,0x47,0xcf,0xf2,0xa9,0x40 };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 5") {
        uint8_t KEY[] = { 0x25,0xa3,0x9d,0xbf,0xd8,0x03,0x4f,0x71,0xa8,0x1f,0x9c,0xeb,0x55,0x02,0x6e,0x40,0x37,0xf8,0xf6,0xaa,0x30,0xab,0x44,0xce };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0x36,0x08,0xc3,0x44,0x86,0x8e,0x94,0x55,0x5d,0x23,0xa1,0x20,0xf8,0xa5,0x50,0x2d };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 6") {
        uint8_t KEY[] = { 0xe0,0x8c,0x15,0x41,0x17,0x74,0xec,0x4a,0x90,0x8b,0x64,0xea,0xdc,0x6a,0xc4,0x19,0x9c,0x7c,0xd4,0x53,0xf3,0xaa,0xef,0x53 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0x77,0xda,0x20,0x21,0x93,0x5b,0x84,0x0b,0x7f,0x5d,0xcc,0x39,0x13,0x2d,0xa9,0xe5 };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 7") {
        uint8_t KEY[] = { 0x3b,0x37,0x5a,0x1f,0xf7,0xe8,0xd4,0x44,0x09,0x69,0x6e,0x63,0x26,0xec,0x9d,0xec,0x86,0x13,0x8e,0x2a,0xe0,0x10,0xb9,0x80 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0x3b,0x7c,0x24,0xf8,0x25,0xe3,0xbf,0x98,0x73,0xc9,0xf1,0x4d,0x39,0xa0,0xe6,0xf4 };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 8") {
        uint8_t KEY[] = { 0x95,0x0b,0xb9,0xf2,0x2c,0xc3,0x5b,0xe6,0xfe,0x79,0xf5,0x2c,0x32,0x0a,0xf9,0x3d,0xec,0x5b,0xc9,0xc0,0xc2,0xf9,0xcd,0x53 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0x64,0xeb,0xf9,0x56,0x86,0xb3,0x53,0x50,0x8c,0x90,0xec,0xd8,0xb6,0x13,0x43,0x16 };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 9") {
        uint8_t KEY[] = { 0x70,0x01,0xc4,0x87,0xcc,0x3e,0x57,0x2c,0xfc,0x92,0xf4,0xd0,0xe6,0x97,0xd9,0x82,0xe8,0x85,0x6f,0xdc,0xc9,0x57,0xda,0x40 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0xff,0x55,0x8c,0x5d,0x27,0x21,0x0b,0x79,0x29,0xb7,0x3f,0xc7,0x08,0xeb,0x4c,0xf1 };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 10") {
        uint8_t KEY[] = { 0xf0,0x29,0xce,0x61,0xd4,0xe5,0xa4,0x05,0xb4,0x1e,0xad,0x0a,0x88,0x3c,0xc6,0xa7,0x37,0xda,0x2c,0xf5,0x0a,0x6c,0x92,0xae };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0xa2,0xc3,0xb2,0xa8,0x18,0x07,0x54,0x90,0xa7,0xb4,0xc1,0x43,0x80,0xf0,0x27,0x02 };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 11") {
        uint8_t KEY[] = { 0x61,0x25,0x71,0x34,0xa5,0x18,0xa0,0xd5,0x7d,0x9d,0x24,0x4d,0x45,0xf6,0x49,0x8c,0xbc,0x32,0xf2,0xba,0xfc,0x52,0x2d,0x79 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0xcf,0xe4,0xd7,0x40,0x02,0x69,0x6c,0xcf,0x7d,0x87,0xb1,0x4a,0x2f,0x9c,0xaf,0xc9 };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 12") {
        uint8_t KEY[] = { 0xb0,0xab,0x0a,0x6a,0x81,0x8b,0xae,0xf2,0xd1,0x1f,0xa3,0x3e,0xac,0x94,0x72,0x84,0xfb,0x7d,0x74,0x8c,0xfb,0x75,0xe5,0x70 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0xd2,0xea,0xfd,0x86,0xf6,0x3b,0x10,0x9b,0x91,0xf5,0xdb,0xb3,0xa3,0xfb,0x7e,0x13 };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 13") {
        uint8_t KEY[] = { 0xee,0x05,0x3a,0xa0,0x11,0xc8,0xb4,0x28,0xcd,0xcc,0x36,0x36,0x31,0x3c,0x54,0xd6,0xa0,0x3c,0xac,0x01,0xc7,0x15,0x79,0xd6 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0x9b,0x9f,0xdd,0x1c,0x59,0x75,0x65,0x5f,0x53,0x99,0x98,0xb3,0x06,0xa3,0x24,0xaf };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 14") {
        uint8_t KEY[] = { 0xd2,0x92,0x65,0x27,0xe0,0xaa,0x9f,0x37,0xb4,0x5e,0x2e,0xc2,0xad,0xe5,0x85,0x3e,0xf8,0x07,0x57,0x61,0x04,0xc7,0xac,0xe3 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0xdd,0x61,0x9e,0x1c,0xf2,0x04,0x44,0x61,0x12,0xe0,0xaf,0x2b,0x9a,0xfa,0x8f,0x8c };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 15") {
        uint8_t KEY[] = { 0x98,0x22,0x15,0xf4,0xe1,0x73,0xdf,0xa0,0xfc,0xff,0xe5,0xd3,0xda,0x41,0xc4,0x81,0x2c,0x7b,0xcc,0x8e,0xd3,0x54,0x0f,0x93 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0xd4,0xf0,0xaa,0xe1,0x3c,0x8f,0xe9,0x33,0x9f,0xbf,0x9e,0x69,0xed,0x0a,0xd7,0x4d };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 16") {
        uint8_t KEY[] = { 0x98,0xc6,0xb8,0xe0,0x1e,0x37,0x9f,0xbd,0x14,0xe6,0x1a,0xf6,0xaf,0x89,0x15,0x96,0x58,0x35,0x65,0xf2,0xa2,0x7d,0x59,0xe9 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0x19,0xc8,0x0e,0xc4,0xa6,0xde,0xb7,0xe5,0xed,0x10,0x33,0xdd,0xa9,0x33,0x49,0x8f };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 17") {
        uint8_t KEY[] = { 0xb3,0xad,0x5c,0xea,0x1d,0xdd,0xc2,0x14,0xca,0x96,0x9a,0xc3,0x5f,0x37,0xda,0xe1,0xa9,0xa9,0xd1,0x52,0x8f,0x89,0xbb,0x35 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0x3c,0xf5,0xe1,0xd2,0x1a,0x17,0x95,0x6d,0x1d,0xff,0xad,0x6a,0x7c,0x41,0xc6,0x59 };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 18") {
        uint8_t KEY[] = { 0x45,0x89,0x93,0x67,0xc3,0x13,0x28,0x49,0x76,0x30,0x73,0xc4,0x35,0xa9,0x28,0x8a,0x76,0x6c,0x8b,0x9e,0xc2,0x30,0x85,0x16 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0x69,0xfd,0x12,0xe8,0x50,0x5f,0x8d,0xed,0x2f,0xdc,0xb1,0x97,0xa1,0x21,0xb3,0x62 };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 19") {
        uint8_t KEY[] = { 0xec,0x25,0x0e,0x04,0xc3,0x90,0x3f,0x60,0x26,0x47,0xb8,0x5a,0x40,0x1a,0x1a,0xe7,0xca,0x2f,0x02,0xf6,0x7f,0xa4,0x25,0x3e };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0x8a,0xa5,0x84,0xe2,0xcc,0x4d,0x17,0x41,0x7a,0x97,0xcb,0x9a,0x28,0xba,0x29,0xc8 };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 20") {
        uint8_t KEY[] = { 0xd0,0x77,0xa0,0x3b,0xd8,0xa3,0x89,0x73,0x92,0x8c,0xca,0xfe,0x4a,0x9d,0x2f,0x45,0x51,0x30,0xbd,0x0a,0xf5,0xae,0x46,0xa9 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0xab,0xc7,0x86,0xfb,0x1e,0xdb,0x50,0x45,0x80,0xc4,0xd8,0x82,0xef,0x29,0xa0,0xc7 };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 21") {
        uint8_t KEY[] = { 0xd1,0x84,0xc3,0x6c,0xf0,0xdd,0xdf,0xec,0x39,0xe6,0x54,0x19,0x50,0x06,0x02,0x22,0x37,0x87,0x1a,0x47,0xc3,0x3d,0x31,0x98 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0x2e,0x19,0xfb,0x60,0xa3,0xe1,0xde,0x01,0x66,0xf4,0x83,0xc9,0x78,0x24,0xa9,0x78 };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 22") {
        uint8_t KEY[] = { 0x4c,0x69,0x94,0xff,0xa9,0xdc,0xdc,0x80,0x5b,0x60,0xc2,0xc0,0x09,0x53,0x34,0xc4,0x2d,0x95,0xa8,0xfc,0x0c,0xa5,0xb0,0x80 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0x76,0x56,0x70,0x95,0x38,0xdd,0x5f,0xec,0x41,0xe0,0xce,0x6a,0x0f,0x8e,0x20,0x7d };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    SECTION("Test 23") {
        uint8_t KEY[] = { 0xc8,0x8f,0x5b,0x00,0xa4,0xef,0x9a,0x68,0x40,0xe2,0xac,0xaf,0x33,0xf0,0x0a,0x3b,0xdc,0x4e,0x25,0x89,0x53,0x03,0xfa,0x72 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        uint8_t CIPHERTEXT[] = { 0xa6,0x7c,0xf3,0x33,0xb3,0x14,0xd4,0x11,0xd3,0xc0,0xae,0x6e,0x1c,0xfc,0xd8,0xf5 };

        uint8_t out[sizeof(CIPHERTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_encrypt(&state, PLAINTEXT, out, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
        REQUIRE(memcmp(CIPHERTEXT, out, sizeof(CIPHERTEXT)) == 0);
    }

    aes_finish(&state);
}

TEST_CASE("ECBKeySbox192-decrypt", "") {
    aes_state state;

    SECTION("Test 0") {
        uint8_t KEY[] = { 0xe9,0xf0,0x65,0xd7,0xc1,0x35,0x73,0x58,0x7f,0x78,0x75,0x35,0x7d,0xfb,0xb1,0x6c,0x53,0x48,0x9f,0x6a,0x4b,0xd0,0xf7,0xcd };
        uint8_t CIPHERTEXT[] = { 0x09,0x56,0x25,0x9c,0x9c,0xd5,0xcf,0xd0,0x18,0x1c,0xca,0x53,0x38,0x0c,0xde,0x06 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 1") {
        uint8_t KEY[] = { 0x15,0xd2,0x0f,0x6e,0xbc,0x7e,0x64,0x9f,0xd9,0x5b,0x76,0xb1,0x07,0xe6,0xda,0xba,0x96,0x7c,0x8a,0x94,0x84,0x79,0x7f,0x29 };
        uint8_t CIPHERTEXT[] = { 0x8e,0x4e,0x18,0x42,0x4e,0x59,0x1a,0x3d,0x5b,0x6f,0x08,0x76,0xf1,0x6f,0x85,0x94 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 2") {
        uint8_t KEY[] = { 0xa8,0xa2,0x82,0xee,0x31,0xc0,0x3f,0xae,0x4f,0x8e,0x9b,0x89,0x30,0xd5,0x47,0x3c,0x2e,0xd6,0x95,0xa3,0x47,0xe8,0x8b,0x7c };
        uint8_t CIPHERTEXT[] = { 0x93,0xf3,0x27,0x0c,0xfc,0x87,0x7e,0xf1,0x7e,0x10,0x6c,0xe9,0x38,0x97,0x9c,0xb0 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 3") {
        uint8_t KEY[] = { 0xcd,0x62,0x37,0x6d,0x5e,0xbb,0x41,0x49,0x17,0xf0,0xc7,0x8f,0x05,0x26,0x64,0x33,0xdc,0x91,0x92,0xa1,0xec,0x94,0x33,0x00 };
        uint8_t CIPHERTEXT[] = { 0x7f,0x6c,0x25,0xff,0x41,0x85,0x85,0x61,0xbb,0x62,0xf3,0x64,0x92,0xe9,0x3c,0x29 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 4") {
        uint8_t KEY[] = { 0x50,0x2a,0x6a,0xb3,0x69,0x84,0xaf,0x26,0x8b,0xf4,0x23,0xc7,0xf5,0x09,0x20,0x52,0x07,0xfc,0x15,0x52,0xaf,0x4a,0x91,0xe5 };
        uint8_t CIPHERTEXT[] = { 0x8e,0x06,0x55,0x6d,0xcb,0xb0,0x0b,0x80,0x9a,0x02,0x50,0x47,0xcf,0xf2,0xa9,0x40 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 5") {
        uint8_t KEY[] = { 0x25,0xa3,0x9d,0xbf,0xd8,0x03,0x4f,0x71,0xa8,0x1f,0x9c,0xeb,0x55,0x02,0x6e,0x40,0x37,0xf8,0xf6,0xaa,0x30,0xab,0x44,0xce };
        uint8_t CIPHERTEXT[] = { 0x36,0x08,0xc3,0x44,0x86,0x8e,0x94,0x55,0x5d,0x23,0xa1,0x20,0xf8,0xa5,0x50,0x2d };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 6") {
        uint8_t KEY[] = { 0xe0,0x8c,0x15,0x41,0x17,0x74,0xec,0x4a,0x90,0x8b,0x64,0xea,0xdc,0x6a,0xc4,0x19,0x9c,0x7c,0xd4,0x53,0xf3,0xaa,0xef,0x53 };
        uint8_t CIPHERTEXT[] = { 0x77,0xda,0x20,0x21,0x93,0x5b,0x84,0x0b,0x7f,0x5d,0xcc,0x39,0x13,0x2d,0xa9,0xe5 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 7") {
        uint8_t KEY[] = { 0x3b,0x37,0x5a,0x1f,0xf7,0xe8,0xd4,0x44,0x09,0x69,0x6e,0x63,0x26,0xec,0x9d,0xec,0x86,0x13,0x8e,0x2a,0xe0,0x10,0xb9,0x80 };
        uint8_t CIPHERTEXT[] = { 0x3b,0x7c,0x24,0xf8,0x25,0xe3,0xbf,0x98,0x73,0xc9,0xf1,0x4d,0x39,0xa0,0xe6,0xf4 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 8") {
        uint8_t KEY[] = { 0x95,0x0b,0xb9,0xf2,0x2c,0xc3,0x5b,0xe6,0xfe,0x79,0xf5,0x2c,0x32,0x0a,0xf9,0x3d,0xec,0x5b,0xc9,0xc0,0xc2,0xf9,0xcd,0x53 };
        uint8_t CIPHERTEXT[] = { 0x64,0xeb,0xf9,0x56,0x86,0xb3,0x53,0x50,0x8c,0x90,0xec,0xd8,0xb6,0x13,0x43,0x16 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 9") {
        uint8_t KEY[] = { 0x70,0x01,0xc4,0x87,0xcc,0x3e,0x57,0x2c,0xfc,0x92,0xf4,0xd0,0xe6,0x97,0xd9,0x82,0xe8,0x85,0x6f,0xdc,0xc9,0x57,0xda,0x40 };
        uint8_t CIPHERTEXT[] = { 0xff,0x55,0x8c,0x5d,0x27,0x21,0x0b,0x79,0x29,0xb7,0x3f,0xc7,0x08,0xeb,0x4c,0xf1 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 10") {
        uint8_t KEY[] = { 0xf0,0x29,0xce,0x61,0xd4,0xe5,0xa4,0x05,0xb4,0x1e,0xad,0x0a,0x88,0x3c,0xc6,0xa7,0x37,0xda,0x2c,0xf5,0x0a,0x6c,0x92,0xae };
        uint8_t CIPHERTEXT[] = { 0xa2,0xc3,0xb2,0xa8,0x18,0x07,0x54,0x90,0xa7,0xb4,0xc1,0x43,0x80,0xf0,0x27,0x02 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 11") {
        uint8_t KEY[] = { 0x61,0x25,0x71,0x34,0xa5,0x18,0xa0,0xd5,0x7d,0x9d,0x24,0x4d,0x45,0xf6,0x49,0x8c,0xbc,0x32,0xf2,0xba,0xfc,0x52,0x2d,0x79 };
        uint8_t CIPHERTEXT[] = { 0xcf,0xe4,0xd7,0x40,0x02,0x69,0x6c,0xcf,0x7d,0x87,0xb1,0x4a,0x2f,0x9c,0xaf,0xc9 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 12") {
        uint8_t KEY[] = { 0xb0,0xab,0x0a,0x6a,0x81,0x8b,0xae,0xf2,0xd1,0x1f,0xa3,0x3e,0xac,0x94,0x72,0x84,0xfb,0x7d,0x74,0x8c,0xfb,0x75,0xe5,0x70 };
        uint8_t CIPHERTEXT[] = { 0xd2,0xea,0xfd,0x86,0xf6,0x3b,0x10,0x9b,0x91,0xf5,0xdb,0xb3,0xa3,0xfb,0x7e,0x13 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 13") {
        uint8_t KEY[] = { 0xee,0x05,0x3a,0xa0,0x11,0xc8,0xb4,0x28,0xcd,0xcc,0x36,0x36,0x31,0x3c,0x54,0xd6,0xa0,0x3c,0xac,0x01,0xc7,0x15,0x79,0xd6 };
        uint8_t CIPHERTEXT[] = { 0x9b,0x9f,0xdd,0x1c,0x59,0x75,0x65,0x5f,0x53,0x99,0x98,0xb3,0x06,0xa3,0x24,0xaf };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 14") {
        uint8_t KEY[] = { 0xd2,0x92,0x65,0x27,0xe0,0xaa,0x9f,0x37,0xb4,0x5e,0x2e,0xc2,0xad,0xe5,0x85,0x3e,0xf8,0x07,0x57,0x61,0x04,0xc7,0xac,0xe3 };
        uint8_t CIPHERTEXT[] = { 0xdd,0x61,0x9e,0x1c,0xf2,0x04,0x44,0x61,0x12,0xe0,0xaf,0x2b,0x9a,0xfa,0x8f,0x8c };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 15") {
        uint8_t KEY[] = { 0x98,0x22,0x15,0xf4,0xe1,0x73,0xdf,0xa0,0xfc,0xff,0xe5,0xd3,0xda,0x41,0xc4,0x81,0x2c,0x7b,0xcc,0x8e,0xd3,0x54,0x0f,0x93 };
        uint8_t CIPHERTEXT[] = { 0xd4,0xf0,0xaa,0xe1,0x3c,0x8f,0xe9,0x33,0x9f,0xbf,0x9e,0x69,0xed,0x0a,0xd7,0x4d };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 16") {
        uint8_t KEY[] = { 0x98,0xc6,0xb8,0xe0,0x1e,0x37,0x9f,0xbd,0x14,0xe6,0x1a,0xf6,0xaf,0x89,0x15,0x96,0x58,0x35,0x65,0xf2,0xa2,0x7d,0x59,0xe9 };
        uint8_t CIPHERTEXT[] = { 0x19,0xc8,0x0e,0xc4,0xa6,0xde,0xb7,0xe5,0xed,0x10,0x33,0xdd,0xa9,0x33,0x49,0x8f };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 17") {
        uint8_t KEY[] = { 0xb3,0xad,0x5c,0xea,0x1d,0xdd,0xc2,0x14,0xca,0x96,0x9a,0xc3,0x5f,0x37,0xda,0xe1,0xa9,0xa9,0xd1,0x52,0x8f,0x89,0xbb,0x35 };
        uint8_t CIPHERTEXT[] = { 0x3c,0xf5,0xe1,0xd2,0x1a,0x17,0x95,0x6d,0x1d,0xff,0xad,0x6a,0x7c,0x41,0xc6,0x59 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 18") {
        uint8_t KEY[] = { 0x45,0x89,0x93,0x67,0xc3,0x13,0x28,0x49,0x76,0x30,0x73,0xc4,0x35,0xa9,0x28,0x8a,0x76,0x6c,0x8b,0x9e,0xc2,0x30,0x85,0x16 };
        uint8_t CIPHERTEXT[] = { 0x69,0xfd,0x12,0xe8,0x50,0x5f,0x8d,0xed,0x2f,0xdc,0xb1,0x97,0xa1,0x21,0xb3,0x62 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 19") {
        uint8_t KEY[] = { 0xec,0x25,0x0e,0x04,0xc3,0x90,0x3f,0x60,0x26,0x47,0xb8,0x5a,0x40,0x1a,0x1a,0xe7,0xca,0x2f,0x02,0xf6,0x7f,0xa4,0x25,0x3e };
        uint8_t CIPHERTEXT[] = { 0x8a,0xa5,0x84,0xe2,0xcc,0x4d,0x17,0x41,0x7a,0x97,0xcb,0x9a,0x28,0xba,0x29,0xc8 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 20") {
        uint8_t KEY[] = { 0xd0,0x77,0xa0,0x3b,0xd8,0xa3,0x89,0x73,0x92,0x8c,0xca,0xfe,0x4a,0x9d,0x2f,0x45,0x51,0x30,0xbd,0x0a,0xf5,0xae,0x46,0xa9 };
        uint8_t CIPHERTEXT[] = { 0xab,0xc7,0x86,0xfb,0x1e,0xdb,0x50,0x45,0x80,0xc4,0xd8,0x82,0xef,0x29,0xa0,0xc7 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 21") {
        uint8_t KEY[] = { 0xd1,0x84,0xc3,0x6c,0xf0,0xdd,0xdf,0xec,0x39,0xe6,0x54,0x19,0x50,0x06,0x02,0x22,0x37,0x87,0x1a,0x47,0xc3,0x3d,0x31,0x98 };
        uint8_t CIPHERTEXT[] = { 0x2e,0x19,0xfb,0x60,0xa3,0xe1,0xde,0x01,0x66,0xf4,0x83,0xc9,0x78,0x24,0xa9,0x78 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 22") {
        uint8_t KEY[] = { 0x4c,0x69,0x94,0xff,0xa9,0xdc,0xdc,0x80,0x5b,0x60,0xc2,0xc0,0x09,0x53,0x34,0xc4,0x2d,0x95,0xa8,0xfc,0x0c,0xa5,0xb0,0x80 };
        uint8_t CIPHERTEXT[] = { 0x76,0x56,0x70,0x95,0x38,0xdd,0x5f,0xec,0x41,0xe0,0xce,0x6a,0x0f,0x8e,0x20,0x7d };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    SECTION("Test 23") {
        uint8_t KEY[] = { 0xc8,0x8f,0x5b,0x00,0xa4,0xef,0x9a,0x68,0x40,0xe2,0xac,0xaf,0x33,0xf0,0x0a,0x3b,0xdc,0x4e,0x25,0x89,0x53,0x03,0xfa,0x72 };
        uint8_t CIPHERTEXT[] = { 0xa6,0x7c,0xf3,0x33,0xb3,0x14,0xd4,0x11,0xd3,0xc0,0xae,0x6e,0x1c,0xfc,0xd8,0xf5 };
        uint8_t PLAINTEXT[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

        uint8_t out[sizeof(PLAINTEXT)];
        REQUIRE(aes_begin(&state, KEY, 192));
        REQUIRE(aes_decrypt(&state, CIPHERTEXT, out, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
        REQUIRE(memcmp(PLAINTEXT, out, sizeof(PLAINTEXT)) == 0);
    }

    aes_finish(&state);
}

