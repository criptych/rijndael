#include "rijndael.h"
#include "catch.hpp"
#include <cstring>

static inline std::string buf2str(const uint8_t *buf, size_t len) {
    std::ostringstream ss; ss << std::hex << std::setfill('0');
    for (size_t i = 0; i < len; ++i) {
        ss << std::setw(2) << static_cast<int>(buf[i]) << ' ';
    }
    return ss.str();
}

TEST_CASE("CFB128MMT256-ENCRYPT-0", "[CFB128][MMT][256][ENCRYPT][n0]") {
    const uint8_t KEY[] = { 0xe1,0xc6,0xe6,0x88,0x4e,0xee,0x69,0x55,0x2d,0xbf,0xee,0x21,0xf2,0x2c,0xa9,0x26,0x85,0xd5,0xd0,0x8e,0xf0,0xe3,0xf3,0x7e,0x5b,0x33,0x8c,0x53,0x3b,0xb8,0xd7,0x2c };
    const uint8_t IV[] = { 0xce,0xa9,0xf2,0x3a,0xe8,0x7a,0x63,0x7a,0xb0,0xcd,0xa6,0x38,0x1e,0xcc,0x12,0x02 };
    const uint8_t PLAINTEXT[] = { 0xb7,0x26,0x06,0xc9,0x8d,0x8e,0x4f,0xab,0xf0,0x88,0x39,0xab,0xf7,0xa0,0xac,0x61 };
    const uint8_t CIPHERTEXT[] = { 0x29,0x81,0x76,0x1d,0x97,0x9b,0xb1,0x76,0x5a,0x28,0xb2,0xdd,0x19,0x12,0x5b,0x54 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MMT256-ENCRYPT-1", "[CFB128][MMT][256][ENCRYPT][n1]") {
    const uint8_t KEY[] = { 0xae,0x59,0x25,0x4c,0x66,0xd8,0xf5,0x33,0xe7,0xf5,0x00,0x2c,0xed,0x48,0x0c,0x33,0x98,0x4a,0x42,0x1d,0x78,0x16,0xe2,0x7b,0xe6,0x6c,0x34,0xc1,0x9b,0xfb,0xc2,0xa8 };
    const uint8_t IV[] = { 0x82,0x1d,0xd2,0x16,0x53,0xec,0xe3,0xaf,0x67,0x5c,0xd2,0x5d,0x26,0x01,0x7a,0xe3 };
    const uint8_t PLAINTEXT[] = { 0x3c,0xb4,0xf1,0x7e,0x77,0x5c,0x2d,0x6d,0x06,0xdd,0x60,0xf1,0x5d,0x6c,0x3a,0x10,0x3e,0x51,0x31,0x72,0x7f,0x9c,0x6c,0xb8,0x0d,0x13,0xe0,0x0f,0x31,0x6e,0xb9,0x04 };
    const uint8_t CIPHERTEXT[] = { 0xae,0x37,0x5d,0xb9,0xf2,0x81,0x48,0xc4,0x60,0xf6,0xc6,0xb6,0x66,0x5f,0xcc,0x2f,0xf6,0xb5,0x0b,0x8e,0xaf,0x82,0xc6,0x4b,0xba,0x8c,0x64,0x9e,0xfd,0x47,0x31,0xbc };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MMT256-ENCRYPT-2", "[CFB128][MMT][256][ENCRYPT][n2]") {
    const uint8_t KEY[] = { 0xcd,0xed,0xa3,0xec,0xc3,0x56,0xc6,0xac,0x4c,0xa5,0x61,0x87,0xf4,0x41,0x0a,0x4d,0x9a,0xa2,0x32,0x3f,0xd2,0x1b,0xa7,0x7b,0x87,0xf7,0x5c,0xbb,0xe5,0xc8,0x6d,0x3f };
    const uint8_t IV[] = { 0xe5,0xed,0x19,0x3d,0x8c,0x5a,0xed,0xaf,0xa4,0x05,0x52,0x8a,0x38,0x1f,0xcb,0x12 };
    const uint8_t PLAINTEXT[] = { 0xc1,0x98,0xf5,0x66,0xea,0x88,0x1d,0x43,0x90,0x17,0x2a,0x30,0xd4,0x74,0xdf,0xf0,0x34,0xaf,0x59,0x3e,0x54,0x70,0xf2,0x1c,0xfe,0xe9,0x66,0x68,0x67,0x09,0x34,0xb0,0xb4,0xf2,0x47,0x47,0xbc,0xae,0xd6,0x98,0x10,0x1d,0x89,0xbb,0x39,0x32,0xdd,0x46 };
    const uint8_t CIPHERTEXT[] = { 0xce,0x62,0xfe,0x00,0xea,0xed,0x5a,0x8c,0x63,0x9e,0x31,0x79,0xbd,0x75,0x21,0x6c,0xf8,0xe6,0x0b,0x42,0x93,0x6c,0xed,0x7c,0xde,0x0e,0x80,0x3c,0x92,0x3d,0xfc,0xfd,0x46,0xbe,0x83,0x78,0x25,0x19,0xe4,0x99,0x7d,0xc7,0x41,0xe2,0x2c,0x10,0xa1,0x72 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MMT256-ENCRYPT-3", "[CFB128][MMT][256][ENCRYPT][n3]") {
    const uint8_t KEY[] = { 0x15,0x1a,0x6d,0x82,0x84,0x6d,0xd5,0x62,0xdf,0xb1,0x4d,0x70,0x96,0x23,0x6c,0xf5,0xa3,0x6b,0x8b,0xf4,0xc9,0xcd,0x2a,0x03,0x19,0xa3,0x90,0x5a,0xbb,0x0b,0xb2,0x2a };
    const uint8_t IV[] = { 0xd1,0x48,0x13,0x13,0x20,0x3f,0xbd,0xa4,0xfe,0x35,0x70,0x0b,0x84,0xa9,0x3e,0x62 };
    const uint8_t PLAINTEXT[] = { 0xba,0xcf,0xb5,0x85,0xc0,0x7f,0xa2,0x09,0x8e,0x3e,0x23,0x82,0x6e,0x01,0xf3,0x11,0x07,0xa2,0x08,0x20,0x2f,0x71,0x0e,0xff,0x00,0xeb,0x13,0xcf,0x2e,0xc9,0x84,0xa0,0x97,0x3d,0x58,0xd6,0x1c,0x78,0x8b,0xd1,0xb0,0x6f,0xce,0xcd,0xae,0xdf,0x7d,0x06,0x70,0x8e,0xd1,0x20,0x1d,0xd5,0x57,0xc7,0xc2,0x5b,0xa0,0x93,0xa5,0x23,0x3a,0x2e };
    const uint8_t CIPHERTEXT[] = { 0xeb,0x3f,0x30,0x4d,0xa9,0xaa,0xdb,0xea,0x00,0xb4,0x00,0x72,0xf0,0xc3,0xaf,0xda,0x70,0xe2,0xfe,0x45,0xc2,0x38,0x7d,0xd0,0x3f,0x79,0x19,0xad,0x27,0x31,0xef,0xbd,0x9c,0xa8,0x1d,0xca,0xa8,0xe1,0x3c,0xe1,0x5a,0xce,0xfe,0xca,0xe6,0xd6,0x80,0xac,0x47,0xd7,0x41,0x9f,0x37,0x40,0xdb,0x68,0xa8,0xe6,0x7c,0xe1,0x21,0xd3,0x66,0xfb };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MMT256-ENCRYPT-4", "[CFB128][MMT][256][ENCRYPT][n4]") {
    const uint8_t KEY[] = { 0x29,0x84,0x9b,0x91,0xed,0x55,0x18,0x89,0xf7,0x9e,0x46,0x25,0xf6,0x63,0xe8,0xa6,0x78,0x11,0x8c,0xf8,0x08,0x0e,0xc9,0xe4,0x9a,0x93,0xc6,0x87,0x2a,0xbe,0xfb,0x03 };
    const uint8_t IV[] = { 0xad,0xde,0x8e,0xa7,0x0e,0x35,0x60,0xed,0x4b,0x8f,0x5f,0x0c,0xdb,0x5a,0xce,0x8a };
    const uint8_t PLAINTEXT[] = { 0xbc,0xc7,0xd5,0x08,0x86,0x39,0x4b,0x83,0xc2,0xc0,0x48,0x18,0x9d,0xa1,0x8b,0xde,0xe2,0x4e,0x4f,0x71,0xcc,0xe8,0xc2,0x98,0x18,0x02,0xb8,0x25,0x5d,0xa8,0xa1,0x1d,0xa0,0x9f,0xb8,0x19,0x23,0xef,0x7e,0xec,0x7f,0x9f,0x67,0x86,0xf2,0xc0,0xd3,0x19,0xfa,0xad,0x3f,0x7a,0x23,0x90,0xbd,0xc9,0x1d,0x28,0xa1,0x54,0x11,0xca,0x7e,0xb9,0x35,0xa6,0x51,0x4b,0x9f,0x4c,0xfb,0xb7,0x57,0x6f,0xf5,0xe8,0xaf,0xe8,0x3f,0x27 };
    const uint8_t CIPHERTEXT[] = { 0xf9,0x75,0xed,0xf2,0xd5,0xca,0x72,0x82,0x59,0x98,0x67,0xc4,0xcd,0xdb,0x7b,0x99,0xde,0x01,0xe3,0x57,0xea,0x93,0xd4,0x13,0x2b,0x6a,0x17,0x18,0xa4,0xcb,0x3d,0x74,0x3a,0x56,0x03,0xd6,0xaa,0x55,0x61,0x80,0xd8,0x47,0x71,0xed,0x5a,0x9a,0x0c,0xaa,0x12,0xb9,0x25,0xc9,0xd3,0xfb,0xfe,0x4c,0x35,0x10,0x88,0x39,0x66,0x97,0xaf,0xbe,0xf2,0x1f,0xe0,0x77,0x58,0xc8,0xcc,0x68,0x92,0x9b,0x7a,0xa2,0x2a,0x6e,0x58,0x37 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MMT256-ENCRYPT-5", "[CFB128][MMT][256][ENCRYPT][n5]") {
    const uint8_t KEY[] = { 0x3a,0x11,0xea,0x32,0x14,0xad,0xd7,0x67,0xc0,0x0b,0xd3,0x72,0xe5,0x09,0xd4,0xbc,0x59,0xf3,0x85,0x98,0x36,0x4a,0xf7,0x24,0x30,0xc4,0x93,0x70,0x25,0x93,0x54,0xe3 };
    const uint8_t IV[] = { 0x49,0xc7,0xee,0x47,0xc0,0xf3,0xf1,0xe5,0x32,0xfe,0xf3,0xbb,0x5b,0xc0,0x36,0x92 };
    const uint8_t PLAINTEXT[] = { 0x5a,0x30,0x6d,0xe9,0x8d,0x48,0x51,0xfe,0x4c,0x50,0xb1,0xb8,0xd4,0xda,0xe5,0xdd,0x5c,0x98,0xed,0x40,0x02,0x7a,0x06,0xfa,0x06,0x17,0x7b,0xf8,0x36,0x4e,0xbe,0xb6,0xa9,0x2d,0xb7,0x49,0xb0,0x11,0x5c,0xa3,0x0a,0x0f,0x82,0x13,0x57,0x93,0xf2,0x0b,0xcf,0x47,0xc0,0x26,0x34,0x37,0xd8,0x69,0x05,0x32,0xda,0xca,0xf5,0x73,0x28,0xee,0x9c,0x81,0x3d,0x37,0x6b,0x53,0x40,0xfe,0xe5,0xb8,0xd8,0x1d,0x0c,0xf6,0x43,0xb1,0x1a,0xb1,0xa2,0x1e,0x72,0x0f,0x97,0x53,0xd6,0x1a,0x12,0x4f,0xda,0x66,0x68,0xe3 };
    const uint8_t CIPHERTEXT[] = { 0x8c,0x77,0xe7,0x67,0xc1,0xa2,0xf6,0xad,0xc1,0x72,0x7f,0xd4,0x40,0xfb,0x01,0x9b,0x93,0x05,0x8e,0x0a,0x36,0xa0,0x59,0xad,0xa7,0xf7,0x45,0x3b,0x9f,0x01,0x09,0x73,0x5f,0x31,0x8e,0x44,0x2a,0x12,0x09,0x46,0x6e,0xdc,0xe0,0x2e,0x17,0xab,0xc1,0xa7,0x80,0x9b,0x28,0x58,0x5e,0xce,0xfa,0x0a,0xbb,0x05,0x43,0x64,0x37,0x87,0xdd,0x84,0xcf,0x90,0x89,0xd2,0xde,0xfd,0x5d,0x38,0x61,0xdc,0x15,0xf9,0xb4,0xa0,0xde,0xf5,0x04,0x23,0x07,0x05,0x94,0xf7,0xe5,0xf6,0x11,0xef,0x8c,0x02,0x12,0x33,0xc2,0x88 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MMT256-ENCRYPT-6", "[CFB128][MMT][256][ENCRYPT][n6]") {
    const uint8_t KEY[] = { 0xd8,0xfe,0xeb,0x74,0x9d,0xc6,0x88,0xfb,0x28,0x00,0x8f,0x11,0xaf,0x56,0x0b,0x5b,0xcb,0x4e,0x81,0x26,0x2b,0x29,0x38,0x64,0x8a,0x0c,0xd8,0xf0,0xde,0x5d,0x37,0x1a };
    const uint8_t IV[] = { 0x32,0x7b,0xed,0xa3,0x90,0x0f,0x6f,0xa3,0x3d,0x3c,0x8b,0xa5,0x72,0x29,0x5e,0xa5 };
    const uint8_t PLAINTEXT[] = { 0x33,0x98,0xdc,0x27,0xb0,0xce,0x77,0xe1,0x20,0xd9,0x7f,0x8c,0x16,0x54,0x33,0x3c,0xe2,0xa1,0x82,0xf6,0x05,0x88,0x1d,0x71,0xe8,0x20,0xd1,0x1d,0xcd,0xf3,0x14,0x65,0x05,0x5d,0xde,0x31,0x63,0x35,0xba,0xb0,0xf2,0xaf,0x1c,0x54,0xe3,0x81,0xf5,0x1e,0xc9,0x45,0x85,0x1b,0x09,0x1f,0x70,0x2f,0x8b,0x9f,0x15,0x11,0xb6,0xe9,0x1b,0x97,0x9c,0x13,0x4c,0x34,0x71,0xce,0xa7,0xbf,0x42,0x49,0xb0,0x75,0xe3,0x52,0x0b,0x42,0x2a,0xbf,0x49,0x3c,0x5a,0x0c,0x02,0x70,0xe2,0x45,0x24,0xe2,0x48,0x26,0x8a,0xcf,0x60,0x82,0xd1,0x35,0xc1,0xe1,0x67,0x96,0x79,0x6d,0xe4,0xf8,0x00,0x0f,0x9e,0x30 };
    const uint8_t CIPHERTEXT[] = { 0x3c,0x91,0x2c,0x51,0xec,0xf3,0x2a,0x3e,0xfd,0xa9,0xf8,0x28,0xe5,0x44,0x5b,0x49,0x50,0xce,0x09,0x9e,0xca,0x9f,0xee,0xab,0xa4,0xf4,0x8b,0xba,0x2d,0xfe,0xa0,0x31,0x78,0x68,0x72,0x05,0x4d,0x40,0x21,0xa1,0x83,0x30,0xe9,0x5b,0x54,0x24,0x62,0x28,0xfb,0xad,0x12,0x63,0x58,0x19,0x43,0xe0,0x71,0x00,0x6f,0x79,0x9d,0x25,0xba,0x23,0x5a,0x4f,0x27,0x1b,0xab,0x05,0x6b,0x69,0x18,0xe9,0xe8,0x99,0x50,0x50,0x8e,0x2c,0x9a,0x01,0x97,0xd7,0x18,0x34,0xd1,0x63,0xf0,0xdc,0x8b,0xdb,0xf3,0xbe,0xd5,0x80,0x9e,0x24,0xff,0x16,0x17,0xa7,0x02,0xac,0x40,0xde,0x9e,0xc6,0x25,0x41,0x77,0x6e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MMT256-ENCRYPT-7", "[CFB128][MMT][256][ENCRYPT][n7]") {
    const uint8_t KEY[] = { 0x53,0x3b,0xc9,0x38,0xd1,0xc6,0x5b,0x33,0x10,0xb7,0xbc,0xb2,0xf3,0x37,0x06,0xb4,0x88,0xe7,0xe4,0x8e,0xdf,0x6a,0xff,0x91,0x1d,0x25,0xb9,0xe7,0xcc,0x42,0x1e,0xbe };
    const uint8_t IV[] = { 0x29,0x55,0x45,0x8d,0x1f,0x15,0x61,0x69,0x3b,0xf4,0x6a,0x96,0x18,0x72,0xf4,0x2a };
    const uint8_t PLAINTEXT[] = { 0x6d,0xf0,0xb4,0x2f,0x59,0x3b,0xe7,0x99,0x51,0xec,0x41,0x83,0xeb,0x58,0x94,0x08,0x26,0x8c,0x89,0xbb,0x96,0xe0,0xe4,0xe0,0xc1,0xcf,0x09,0xdd,0xc8,0x05,0xbf,0xeb,0x4a,0xba,0x35,0x11,0x85,0x3f,0x43,0x53,0xbe,0xd6,0xf1,0x27,0xe3,0xc7,0x3d,0x28,0x70,0xb0,0x19,0x0e,0x8f,0x1d,0xb4,0xde,0x83,0x58,0xfa,0x5e,0x46,0x83,0x5e,0xcc,0x71,0xe3,0xd7,0xcf,0x5d,0x7f,0x28,0xae,0x88,0xea,0x65,0xc0,0x3a,0x5d,0xb3,0x24,0x68,0x08,0x4f,0xb1,0xd8,0xaa,0xd2,0x30,0x86,0x60,0xb3,0xc9,0x47,0xba,0x0d,0xbc,0xac,0x14,0xa2,0x52,0x29,0x24,0x21,0x12,0x76,0xcf,0xa4,0x37,0x36,0x41,0x7d,0x62,0xd7,0x3c,0x32,0x8d,0xb9,0xb0,0xc6,0x40,0x92,0x8d,0x3a,0x07,0x11,0xd5,0x54,0x23 };
    const uint8_t CIPHERTEXT[] = { 0x9c,0x0c,0x92,0x56,0xc3,0x33,0xe1,0xff,0x37,0x34,0x46,0x81,0x46,0x49,0xbd,0xa9,0xc0,0x68,0xbc,0xdc,0x87,0x9f,0x9d,0xe3,0x94,0x98,0x2c,0x30,0xb1,0xa2,0xf0,0x7f,0x8a,0xa0,0xce,0xa5,0x8c,0x38,0x31,0x05,0xa7,0x29,0x1f,0x2c,0xa1,0x49,0xbe,0x9b,0x20,0x46,0xef,0xec,0x96,0x80,0xb8,0x7c,0x9c,0x9a,0x54,0xe2,0x11,0x8d,0x51,0x0e,0x49,0x8c,0x3d,0xf4,0x3b,0xbb,0x42,0x35,0x92,0xf1,0x93,0x57,0xdc,0x98,0xc4,0x3e,0xd1,0xd9,0x0d,0xf2,0xf5,0x99,0xfa,0x58,0x5a,0x14,0xb7,0x33,0x5d,0xc4,0x1d,0xf1,0xdd,0x0c,0x8b,0xba,0x08,0x5b,0x3a,0x97,0x85,0x78,0xaa,0x06,0x5d,0x44,0xd6,0xc5,0x9f,0x6e,0x9a,0x85,0x5b,0x20,0x1c,0x2e,0xf2,0xac,0x1a,0x5f,0x51,0x80,0x85,0x46 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MMT256-ENCRYPT-8", "[CFB128][MMT][256][ENCRYPT][n8]") {
    const uint8_t KEY[] = { 0x39,0x38,0xac,0x6c,0x83,0x26,0xb4,0x19,0x6c,0xdc,0x84,0x19,0x63,0x57,0x2e,0x01,0x33,0x8a,0xf2,0xe6,0x35,0xb8,0x0f,0xd8,0xc3,0x21,0xd9,0xac,0xef,0xe0,0x0c,0xff };
    const uint8_t IV[] = { 0xe9,0xd5,0x86,0x88,0xef,0x67,0x29,0xcf,0xc9,0x09,0xea,0xd7,0x15,0x3b,0x5b,0xb5 };
    const uint8_t PLAINTEXT[] = { 0x8e,0x57,0x8a,0x39,0x84,0x0d,0xe3,0x00,0xfa,0x8d,0x02,0x08,0xfa,0x85,0x6d,0x0b,0x65,0x27,0x21,0x62,0x43,0x2a,0x87,0x25,0x57,0x11,0xa5,0x94,0xf6,0xaf,0x91,0xb5,0x1a,0xeb,0x2c,0x3f,0xb3,0xc1,0x0c,0xb7,0x3d,0x89,0xba,0xd9,0x97,0x7c,0x1e,0x39,0x13,0x74,0x37,0x2a,0xca,0xf3,0x10,0xdf,0x32,0x67,0xef,0xd0,0xf2,0xac,0xcf,0x5f,0xf4,0xd3,0x10,0xbc,0xbc,0x22,0x6e,0x06,0xf9,0x5b,0x30,0xb3,0x5a,0x42,0xa1,0x31,0xa3,0x59,0xc4,0xcd,0x00,0xee,0x44,0xd5,0x99,0x57,0xaa,0xf9,0x66,0x7d,0xd2,0xf7,0x45,0x97,0xa0,0x78,0x4a,0x38,0xef,0x34,0x56,0x8c,0xca,0x5d,0xeb,0xde,0xdf,0x3b,0x3e,0x5e,0x30,0x14,0x8e,0x22,0x0c,0x4e,0xb5,0x6a,0x3e,0xd7,0xfd,0x28,0x84,0xc5,0x34,0xc0,0x43,0x3a,0x03,0x0c,0x78,0x8b,0x7b,0xa3,0xf2,0xa1,0xf1,0x5b,0xbf,0x9f };
    const uint8_t CIPHERTEXT[] = { 0x86,0x79,0xe8,0x34,0xf0,0xb4,0xe0,0xf6,0xe8,0xb0,0xd2,0x13,0x12,0xb4,0xc3,0x72,0xad,0x89,0x8e,0x2d,0xa6,0x25,0x81,0x33,0x3f,0xd2,0x21,0x03,0x5a,0xcf,0x96,0xdd,0x97,0xda,0x56,0xbe,0x50,0x83,0x6e,0x0f,0xd2,0xc8,0x7c,0xd1,0x2e,0x00,0x75,0x02,0x05,0xd3,0xcf,0x3a,0x55,0xdd,0x1c,0x18,0x3b,0xa4,0x21,0xd5,0xdc,0x9d,0x8c,0x7d,0x34,0xf9,0x8d,0x3f,0xd7,0x3c,0x4e,0x02,0xa0,0xa1,0xbf,0xbd,0x45,0x34,0x12,0x92,0x27,0x44,0x0a,0xdc,0x8a,0x1b,0x70,0xdd,0x3b,0xb4,0x41,0xde,0x32,0xdb,0x53,0x56,0x7a,0xea,0x5f,0x88,0x0a,0xb0,0x5a,0x6c,0x9c,0x16,0x61,0x27,0xf2,0xc1,0x4d,0x03,0x22,0x86,0x46,0x93,0x83,0x06,0x7f,0x42,0x68,0x47,0x25,0x10,0xe5,0xba,0xf3,0x0c,0x29,0x05,0xc0,0x4c,0xa0,0x2a,0x7d,0x2b,0x88,0xca,0x7c,0x17,0x1b,0x11,0xd1,0x65 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MMT256-ENCRYPT-9", "[CFB128][MMT][256][ENCRYPT][n9]") {
    const uint8_t KEY[] = { 0x04,0xc4,0x49,0x9a,0x7a,0x10,0xa3,0x19,0x99,0x22,0x58,0x72,0x61,0x91,0xf8,0x08,0x7a,0xf1,0x18,0x2e,0xbd,0x48,0xf4,0x3b,0xf6,0xc1,0x58,0xdc,0xe8,0xa5,0xc0,0xaf };
    const uint8_t IV[] = { 0x7f,0xc2,0x68,0xd6,0x59,0x9f,0xcd,0xef,0x74,0x57,0xcd,0xbd,0xe5,0xb9,0xc5,0xb6 };
    const uint8_t PLAINTEXT[] = { 0x04,0xa6,0x60,0x03,0x96,0x9b,0xbe,0x72,0xee,0xdb,0x63,0x8f,0xb1,0x88,0xbe,0xa1,0x56,0x4d,0x96,0xdf,0x87,0x39,0x94,0xe2,0xca,0xcd,0x02,0x59,0x60,0x53,0xd2,0xff,0x6d,0x72,0xe2,0xca,0x5a,0x00,0x7e,0x65,0x78,0x17,0x27,0xe1,0xe6,0x6b,0x92,0xa8,0xb4,0xda,0xf4,0xb2,0x48,0x45,0x7d,0xfb,0x01,0x9f,0x22,0x34,0x1b,0x43,0xa0,0xb8,0xd3,0x8b,0xbe,0xc3,0xcb,0x9e,0xd2,0xde,0xaf,0x89,0x86,0x9e,0x19,0x92,0xdc,0x8e,0xb2,0xc8,0x70,0x6a,0x9b,0xdf,0xfe,0x8e,0x0b,0x3b,0x23,0xad,0x39,0x4b,0x68,0xc6,0x7c,0x18,0x7c,0x54,0xb0,0x1e,0xc1,0xc6,0xdd,0x5a,0x0a,0x2e,0x13,0xa4,0xa4,0x3d,0x98,0x3f,0x93,0x6f,0x46,0xaf,0x1d,0x83,0x2e,0xca,0x8d,0x2e,0x81,0x12,0x31,0x10,0xb1,0x42,0xa5,0xe7,0xd3,0x27,0x53,0x03,0x48,0xb1,0x3b,0xfa,0x9c,0x4a,0xf0,0x9c,0xae,0x66,0xe3,0x29,0x11,0x5c,0xe4,0xc2,0xb3,0x74,0xe6,0x1e,0xbc,0x41,0x03,0x7e };
    const uint8_t CIPHERTEXT[] = { 0x52,0x35,0x63,0x98,0x33,0xe0,0x22,0xfa,0x28,0xab,0x90,0xd2,0x82,0x0a,0xbe,0xc0,0x7d,0x2c,0x31,0x85,0xa9,0xc6,0xe1,0x76,0x18,0xb8,0xb6,0x8f,0xb2,0x21,0xbb,0x5d,0xb2,0x42,0xad,0x18,0xc5,0x35,0xd7,0x69,0x4d,0x13,0x06,0xec,0x26,0xaf,0xdd,0x45,0x9a,0x53,0xbb,0x46,0x04,0x85,0x24,0x9c,0x4f,0x5f,0xa7,0x3d,0x41,0xa0,0xd6,0xcc,0x56,0x98,0x89,0x49,0xf7,0xad,0x82,0x25,0x9f,0xe3,0xa3,0x22,0x6f,0x0b,0xd8,0xd4,0x79,0xf4,0x0a,0x2b,0xd3,0x64,0x00,0x07,0x59,0x81,0x20,0x6f,0x50,0xf2,0x68,0xc9,0x21,0x33,0x8e,0x91,0x61,0x3b,0x3a,0x3c,0x0c,0xee,0x1c,0x0f,0xf6,0xc4,0xe1,0xd3,0x0c,0x4c,0xa0,0xf9,0xa3,0x11,0xe9,0x58,0x6d,0x9e,0xd2,0x9d,0xcc,0x87,0x6f,0xd0,0x9e,0xb6,0x40,0x50,0x23,0xeb,0xc1,0x80,0xc5,0x63,0x5d,0x4c,0x79,0x87,0x28,0x60,0x80,0x84,0x7d,0x3a,0x74,0xe9,0xde,0xea,0xfa,0xee,0xc0,0x69,0x7c,0xa8,0xdb,0x75 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MMT256-DECRYPT-0", "[CFB128][MMT][256][DECRYPT][n0]") {
    const uint8_t KEY[] = { 0xec,0x89,0xfb,0x34,0x87,0x87,0xcf,0x90,0x2c,0xa9,0x73,0xc4,0x70,0x81,0x43,0x8d,0xa9,0x59,0x6f,0x2c,0xa5,0x1a,0x4f,0x69,0x9c,0x6c,0xf6,0xd8,0x62,0x1f,0x09,0x5b };
    const uint8_t IV[] = { 0x94,0x14,0x4f,0xdc,0x26,0x65,0x88,0xf0,0xf4,0x22,0x19,0x21,0xed,0xd0,0x85,0xbe };
    const uint8_t PLAINTEXT[] = { 0x75,0x96,0x16,0xb0,0xc0,0x7b,0x10,0x32,0x56,0x00,0x2b,0x5f,0x7e,0x0c,0xf8,0x63 };
    const uint8_t CIPHERTEXT[] = { 0x93,0x9b,0xac,0x6c,0x09,0x89,0x2f,0x39,0xdb,0xa6,0x65,0x38,0x3d,0xa2,0x48,0x46 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MMT256-DECRYPT-1", "[CFB128][MMT][256][DECRYPT][n1]") {
    const uint8_t KEY[] = { 0xc0,0xe8,0x21,0x55,0x4e,0x16,0x56,0xbf,0x34,0x32,0xd3,0x13,0x1d,0x12,0xaa,0x67,0xd0,0x29,0x12,0x6c,0x4d,0x4e,0x15,0x51,0x18,0xbe,0x88,0xe4,0xd5,0x65,0x40,0xfb };
    const uint8_t IV[] = { 0xdb,0x2c,0xfd,0xab,0xf0,0x25,0xa5,0x3b,0xe6,0x90,0xc3,0x03,0x6b,0xaa,0xb1,0xc4 };
    const uint8_t PLAINTEXT[] = { 0x3e,0x5b,0xa8,0xe7,0xf4,0x14,0x01,0x0d,0x99,0x28,0x10,0x1d,0xe1,0xcd,0x50,0x8e,0x09,0xdb,0x27,0xe4,0xa7,0xd8,0xa7,0x13,0xd5,0x79,0x34,0xf6,0x92,0xc6,0x47,0x8b };
    const uint8_t CIPHERTEXT[] = { 0xf2,0x5e,0xc3,0x0d,0x70,0x72,0x20,0x68,0x47,0x7b,0x9c,0x72,0xf3,0x55,0xaf,0x8d,0xe2,0x07,0x59,0x8c,0x29,0xa4,0x71,0xbb,0x76,0x6f,0x3b,0x20,0x45,0x42,0x38,0x01 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MMT256-DECRYPT-2", "[CFB128][MMT][256][DECRYPT][n2]") {
    const uint8_t KEY[] = { 0x9c,0xc5,0x41,0xd5,0x2c,0x5d,0xd9,0x29,0x1a,0x18,0x5e,0xb9,0x52,0xfb,0x4f,0x54,0x74,0xfc,0x5f,0x35,0xe2,0xc0,0x26,0xe3,0x17,0xa9,0x15,0x55,0x3a,0x10,0xaf,0x5a };
    const uint8_t IV[] = { 0xba,0x61,0x99,0x17,0x16,0xe0,0xa2,0xaf,0x80,0x51,0x7b,0xd7,0x28,0x39,0x6d,0x4b };
    const uint8_t PLAINTEXT[] = { 0x37,0xb0,0x85,0xdc,0x65,0x0e,0xd9,0x11,0x0a,0xb6,0x2c,0x6d,0x13,0x94,0x32,0x5a,0x4d,0x4c,0xe5,0x83,0xba,0x17,0x1c,0x87,0xfd,0x09,0x63,0x8f,0xd9,0x33,0xd3,0x56,0xc9,0x6d,0x3f,0x39,0x2f,0xf2,0x17,0x4f,0xb9,0xaa,0xa8,0x08,0x3c,0x05,0x05,0x7c };
    const uint8_t CIPHERTEXT[] = { 0x78,0xfb,0x1c,0x2f,0x44,0x0b,0xd0,0xa4,0x6e,0x33,0xa9,0x65,0x88,0x09,0xf6,0x51,0x86,0x07,0x59,0x58,0x2b,0x30,0xd5,0x3a,0xc1,0xf6,0x27,0x91,0x0d,0x5c,0x5a,0x12,0x82,0x58,0x96,0x10,0xb5,0x7b,0x39,0x41,0x11,0xd3,0x28,0xc5,0xcc,0x11,0x68,0x64 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MMT256-DECRYPT-3", "[CFB128][MMT][256][DECRYPT][n3]") {
    const uint8_t KEY[] = { 0x76,0x4b,0x93,0xd1,0x85,0x17,0x86,0x39,0xce,0xf3,0x03,0xca,0x42,0x64,0x90,0xc4,0xb0,0x46,0xa7,0x8a,0x80,0xb3,0x09,0xa5,0xa3,0x26,0x56,0x0c,0xca,0xe0,0xdb,0xa2 };
    const uint8_t IV[] = { 0x55,0x7d,0x3d,0x09,0x6f,0x0a,0x46,0x1d,0xe7,0xca,0xce,0x67,0x9b,0x31,0x4b,0x1a };
    const uint8_t PLAINTEXT[] = { 0xb3,0x9b,0x2a,0x4a,0x58,0x01,0x68,0x58,0x2b,0x4e,0x2f,0x6a,0xfb,0xd3,0x34,0xd5,0x52,0x35,0xb6,0x11,0xbf,0x21,0x78,0xe0,0x0a,0x6c,0xa4,0x53,0x66,0x47,0xa6,0x02,0x24,0x3c,0x51,0xf4,0x10,0x19,0x1d,0x6b,0x81,0x60,0x6f,0x90,0xa0,0x82,0x6e,0x51,0x4b,0xa1,0xd3,0xad,0xbd,0x12,0xd1,0xfd,0x80,0xf3,0x84,0x05,0xdc,0xab,0xe3,0xc6 };
    const uint8_t CIPHERTEXT[] = { 0x34,0xe3,0x1c,0xce,0x15,0xde,0x96,0x66,0x7b,0x60,0x3a,0x3c,0xf1,0x54,0x99,0xb1,0x24,0x47,0x5a,0xda,0xa2,0x1e,0x24,0xd6,0xe2,0x04,0xbe,0x5f,0x85,0xa7,0x74,0x9e,0xdb,0xa4,0xbd,0x44,0xa9,0x3f,0x1c,0xd6,0x29,0x58,0x44,0x48,0x53,0x9b,0x7f,0xce,0x5b,0xf6,0x50,0xef,0x7b,0x50,0x57,0xdb,0xf2,0x78,0x76,0xfe,0x4d,0x5b,0x32,0xd5 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MMT256-DECRYPT-4", "[CFB128][MMT][256][DECRYPT][n4]") {
    const uint8_t KEY[] = { 0x83,0x3b,0xc1,0x94,0x99,0xfc,0xaa,0x8d,0xd0,0x2e,0xd1,0x24,0x24,0x2a,0x34,0x32,0x97,0x3b,0x07,0xe9,0x25,0xbb,0x4b,0x14,0xf9,0x78,0xa2,0xa0,0xe1,0x5d,0x62,0x5c };
    const uint8_t IV[] = { 0x53,0xab,0xde,0xc0,0x19,0xc8,0x79,0x56,0x5f,0x19,0x5a,0x78,0xeb,0xdf,0x0d,0x92 };
    const uint8_t PLAINTEXT[] = { 0x8e,0x24,0x71,0x92,0x0b,0xd3,0x39,0x81,0x46,0xf9,0x8c,0x9c,0xc9,0x0f,0x7d,0xae,0x4f,0xfa,0xdc,0x0b,0x1c,0x8f,0x7b,0x5f,0x8a,0xb5,0x9c,0x8d,0x33,0x94,0x2f,0x9f,0x7a,0x56,0x5e,0x51,0x1b,0xfb,0x19,0xdd,0x91,0xf8,0x5f,0xa7,0xf4,0xad,0xc3,0x81,0x24,0x2e,0x09,0xd3,0xc9,0x96,0x7c,0x65,0xcb,0x73,0x06,0xf2,0xb1,0xfe,0x21,0xab,0x81,0xf9,0xe2,0x27,0x20,0x5b,0xbf,0x66,0x50,0xac,0x17,0x4a,0x3e,0x56,0x57,0xd2 };
    const uint8_t CIPHERTEXT[] = { 0xd0,0x3d,0x8b,0x0f,0xad,0x02,0x64,0x48,0xf2,0xa6,0x63,0xcd,0x1b,0x43,0x88,0xb0,0xc3,0x96,0xea,0xb7,0x69,0xb3,0x9f,0xaf,0x75,0xf7,0xe0,0x02,0x76,0x3f,0x69,0x8c,0xae,0x57,0x1f,0xab,0xd0,0xb6,0xf5,0x95,0x08,0x68,0x10,0xef,0x3c,0x4b,0x2a,0x9b,0x92,0x7e,0x34,0xd1,0x32,0x17,0x3f,0x71,0x4d,0x14,0x9c,0x97,0x5e,0x95,0x42,0x70,0xaf,0x48,0x71,0x4d,0x1f,0x24,0x95,0xf6,0x24,0x5a,0x6d,0x41,0x0c,0x88,0x6c,0xe3 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MMT256-DECRYPT-5", "[CFB128][MMT][256][DECRYPT][n5]") {
    const uint8_t KEY[] = { 0xf3,0x6b,0x3e,0x45,0x1e,0x76,0xb6,0x52,0xd5,0xf4,0x95,0xe7,0xbf,0x7c,0x67,0x70,0x65,0x07,0x91,0xd0,0xf0,0xa5,0x34,0xb0,0x34,0x6f,0x54,0x16,0xee,0xbd,0x3a,0x39 };
    const uint8_t IV[] = { 0x6b,0xbd,0xbc,0x90,0x8f,0x4d,0x51,0x3b,0x8f,0x87,0x33,0x24,0x69,0x82,0xec,0x3c };
    const uint8_t PLAINTEXT[] = { 0xc9,0x13,0x34,0xf7,0x17,0x3b,0xf0,0x58,0x38,0xe0,0x79,0x55,0x48,0x55,0xfd,0x10,0x0c,0x9d,0x32,0xa2,0x49,0x5c,0x78,0xe6,0xf8,0x20,0xeb,0x3f,0x50,0x8f,0xc9,0x21,0xbc,0xc1,0x1b,0x96,0x63,0x1e,0x35,0x7e,0x28,0x98,0x7d,0x9f,0x67,0x41,0x5d,0x7a,0x61,0xd9,0x74,0xbf,0x87,0xd4,0xb2,0xbe,0xec,0x05,0xba,0x32,0xde,0x63,0xaf,0xf4,0x9e,0xdd,0x45,0x08,0xcf,0x30,0x89,0x9d,0x29,0x37,0x76,0x33,0x80,0xca,0x65,0xb5,0x50,0xb0,0xad,0xda,0xf6,0x30,0x0e,0x1c,0xbd,0x93,0x6e,0x88,0x34,0x35,0xfb,0xf6 };
    const uint8_t CIPHERTEXT[] = { 0x0d,0x62,0xda,0xf9,0x36,0x22,0x27,0xa9,0xa6,0x96,0xbf,0x46,0xda,0x17,0x24,0xa1,0x72,0x94,0x1a,0xb6,0x88,0x92,0xa4,0xd4,0x41,0x70,0x2e,0xfe,0xa1,0xf0,0x0c,0x92,0xa4,0xf3,0x23,0x28,0x8a,0x84,0xe6,0xbd,0x72,0x18,0x85,0x11,0x2a,0x14,0x60,0x4d,0x46,0x90,0xc2,0xe9,0x6f,0x5b,0xcc,0xcd,0xfe,0x3f,0xaf,0xb6,0xca,0x86,0x1f,0xdc,0x3d,0xbc,0x04,0xd2,0xae,0xb7,0x72,0xad,0xea,0xd5,0xdb,0x68,0x14,0x85,0x83,0x87,0xb0,0x09,0x35,0xfb,0xfa,0x7a,0x35,0x46,0x7c,0x0c,0x75,0xdf,0xdf,0x93,0x0b,0xd8 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MMT256-DECRYPT-6", "[CFB128][MMT][256][DECRYPT][n6]") {
    const uint8_t KEY[] = { 0x11,0x54,0xd5,0x23,0xb8,0xad,0x1b,0x9e,0xa2,0x1e,0x83,0x77,0x23,0xb4,0xb3,0x4c,0xb3,0x1a,0x7e,0x38,0x4f,0x6a,0x63,0x48,0x1c,0x43,0x56,0x33,0x4e,0x1c,0xc4,0x45 };
    const uint8_t IV[] = { 0xf4,0x65,0x57,0xdd,0xa8,0xe6,0x3c,0x34,0xd0,0x1f,0xbb,0x79,0xf9,0xfb,0x64,0x0d };
    const uint8_t PLAINTEXT[] = { 0xef,0xf0,0xac,0x9c,0x78,0xbc,0xad,0x5f,0x2a,0x28,0x8d,0x0b,0xed,0xf5,0xdb,0xc7,0x07,0x5f,0x62,0x6b,0x6d,0x07,0xbf,0x04,0x73,0x77,0x23,0xc5,0xc5,0xec,0x99,0xac,0xf6,0x50,0x38,0x2c,0xd4,0xd8,0xed,0x03,0x37,0xaf,0xa6,0xd4,0x3a,0x02,0xca,0x5d,0x66,0x70,0x96,0x30,0x33,0x4a,0x66,0x2a,0xe6,0xf7,0x94,0xa1,0xe1,0xe6,0x25,0x51,0xa7,0x23,0x43,0x64,0xcd,0x9d,0xa2,0x00,0x55,0x13,0x93,0x4e,0xc5,0x74,0x3e,0x08,0xfa,0x97,0x72,0xdd,0xc0,0xf3,0xf9,0x45,0x1a,0x32,0x60,0xd9,0x4a,0x5e,0x96,0xb2,0x7a,0xdb,0xfc,0xf7,0xa1,0x8a,0xd9,0x89,0x46,0xf2,0xf5,0x92,0x63,0x9e,0x8c,0xcf };
    const uint8_t CIPHERTEXT[] = { 0x30,0xcd,0x5e,0x5f,0x6e,0x7f,0x43,0x00,0xdf,0x71,0xdb,0x26,0xdd,0x64,0x78,0x30,0x5c,0x4e,0xc4,0x6f,0x7b,0xa2,0xf8,0x87,0x59,0xd1,0x4e,0x18,0x2a,0x11,0xb8,0x9e,0x8a,0x5d,0xd2,0x96,0x10,0xbd,0x15,0xe3,0x27,0xc7,0x4e,0x6f,0x19,0x66,0x4f,0x15,0x6d,0xda,0xe5,0xbf,0x73,0x00,0x0a,0xcb,0x1d,0xd4,0x5b,0xb4,0x10,0x34,0xcc,0xee,0xfb,0xe7,0x9a,0x11,0x28,0xdd,0x81,0x3a,0x51,0xb8,0x30,0xae,0xb4,0x8c,0xfa,0xc1,0x69,0xe3,0xce,0xf7,0xf4,0x05,0x69,0x68,0x17,0x76,0xca,0x69,0xea,0xbf,0xe6,0x68,0x2d,0x71,0x9e,0x18,0xdc,0x68,0xee,0xcf,0x04,0x4d,0x67,0x2c,0xd6,0x5e,0xdf,0xfc };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MMT256-DECRYPT-7", "[CFB128][MMT][256][DECRYPT][n7]") {
    const uint8_t KEY[] = { 0x36,0xc8,0xe2,0x97,0x19,0xa1,0x12,0x10,0xda,0x1e,0x96,0xd4,0xdc,0x6c,0xf5,0x1e,0x01,0x30,0x4c,0x6b,0x63,0x70,0x9f,0x7f,0x45,0xb0,0x6d,0xaa,0x49,0x5b,0x87,0x49 };
    const uint8_t IV[] = { 0x56,0xa4,0xb3,0x8b,0x28,0x57,0x65,0x58,0x5c,0x2b,0xd9,0x6d,0x03,0xc1,0xbc,0x1b };
    const uint8_t PLAINTEXT[] = { 0x1c,0xe5,0xcd,0x0d,0x02,0xa5,0x96,0x3f,0xa0,0x00,0x74,0x30,0x97,0x35,0x27,0xa4,0x85,0x57,0xce,0x25,0x12,0x6a,0x56,0x8b,0x09,0x72,0x4c,0x2e,0x59,0x2d,0xd6,0xa3,0xc7,0xb4,0x9c,0xca,0xfa,0x03,0xa6,0x3d,0xf5,0x4e,0x4c,0xe0,0x39,0x2a,0xae,0x7e,0x0b,0xff,0x05,0x42,0x8c,0x56,0x3a,0x0f,0x71,0x72,0xec,0x80,0x59,0x31,0x88,0x5a,0x35,0x90,0xe3,0x17,0x74,0xe4,0x8c,0xe2,0x48,0xc9,0xb7,0x0c,0x85,0x6d,0xcb,0x09,0xa1,0xcb,0xb0,0xd7,0x22,0x2f,0x49,0x54,0x3a,0xb2,0x0b,0xda,0x6e,0xe1,0x71,0x8d,0x04,0x40,0x98,0x40,0x1a,0x05,0xa9,0x43,0x28,0x1b,0xe5,0x98,0x5f,0x8c,0x18,0xfd,0x2d,0x30,0x9c,0x0d,0xf1,0x7e,0x18,0x88,0x65,0x1b,0xe6,0xdd,0x67,0x26,0x98,0xe1 };
    const uint8_t CIPHERTEXT[] = { 0xee,0x56,0x73,0x10,0x8c,0x8c,0xe0,0xda,0x35,0xbb,0x18,0x27,0xb5,0x4f,0x64,0x69,0xbe,0xfe,0x36,0x98,0x82,0x05,0x62,0x8c,0x81,0xb5,0x8a,0xaa,0xa0,0x2f,0xda,0xc2,0x7c,0x6c,0xf6,0x38,0xfd,0x80,0x31,0x62,0x2e,0x1f,0x00,0x32,0x4c,0x60,0xae,0x15,0x1d,0xc1,0x51,0x1a,0x82,0x6b,0xfc,0x57,0x50,0xb8,0x36,0x89,0x5c,0xf3,0xab,0xfa,0xd5,0x5f,0x22,0xa8,0xd7,0x7a,0xaf,0xa3,0x3c,0x82,0x2a,0xb7,0xb6,0x39,0xdf,0x4b,0x1b,0xe6,0x87,0x89,0xff,0x9c,0x78,0xbf,0x88,0xbe,0x18,0x05,0x7e,0xc3,0x97,0x21,0xa2,0x37,0xde,0xa7,0x41,0x02,0xc2,0x65,0x08,0xed,0x7e,0xfd,0x1a,0x62,0x60,0xd4,0x60,0x73,0xc2,0x2b,0x20,0x1f,0x3c,0x8c,0xd2,0xd0,0x18,0x68,0x2f,0x27,0x06,0xfe };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MMT256-DECRYPT-8", "[CFB128][MMT][256][DECRYPT][n8]") {
    const uint8_t KEY[] = { 0xe1,0xf4,0x43,0x6c,0xa3,0x1d,0xc1,0x4e,0x2d,0x29,0xde,0x76,0x79,0x3b,0x01,0x41,0xbb,0xcb,0x92,0x06,0x41,0xfa,0x02,0x04,0x9e,0x22,0x0c,0x98,0x07,0xb2,0x3b,0xb4 };
    const uint8_t IV[] = { 0x00,0xc9,0x80,0x95,0x55,0x0b,0x39,0x29,0xa0,0x5b,0xf7,0x27,0x40,0xed,0x2d,0x06 };
    const uint8_t PLAINTEXT[] = { 0x48,0x67,0x4f,0xcf,0x0e,0xba,0x77,0x4c,0xa9,0xd4,0x29,0x45,0x5a,0x1a,0x8d,0x55,0x12,0xd6,0x66,0x51,0xbc,0xc4,0x25,0xa0,0xa6,0xa4,0xbb,0x66,0x4d,0x16,0x70,0xeb,0xe3,0x49,0x16,0xb5,0x40,0xc8,0x80,0x71,0x1c,0xb3,0x95,0x25,0xf7,0xe7,0x19,0x05,0xc1,0x22,0xe0,0x0e,0xe9,0x2f,0x81,0xbc,0x08,0x82,0x4c,0xa1,0x1a,0x36,0x20,0x34,0xb4,0x2b,0xfb,0x51,0x9f,0xa7,0x3b,0xbb,0xe8,0xa7,0x53,0x33,0x24,0xd0,0x3b,0x50,0xdf,0x24,0x58,0xb7,0xfd,0x8a,0xae,0xf0,0x5f,0xdb,0xf7,0xb0,0x8b,0xf7,0xb7,0x0c,0x32,0xab,0x49,0x5b,0x6a,0x42,0x41,0x5f,0xf5,0xf8,0xbf,0x1b,0x8d,0x82,0xb3,0x46,0x9a,0x95,0x5f,0xd6,0xb2,0xaf,0x82,0xd9,0x67,0x67,0x93,0xc4,0xb2,0x0d,0x67,0x26,0x13,0x6a,0xb1,0xb0,0x24,0xfe,0x1f,0xd7,0xa3,0x87,0xe1,0x8a,0x57,0x07,0x33,0xa0 };
    const uint8_t CIPHERTEXT[] = { 0xb8,0x6d,0x66,0xe2,0x29,0x51,0x54,0x8b,0x10,0x2f,0x3a,0x93,0x0d,0x39,0x57,0xc9,0x02,0xdb,0x37,0x1b,0x74,0x90,0x36,0x08,0x34,0xf9,0x40,0x58,0x3e,0x30,0xda,0x0a,0xe1,0x5a,0x66,0x8e,0x20,0x7b,0xa2,0x34,0x59,0x8f,0x73,0xe5,0x24,0xd6,0xe1,0x11,0x7e,0x6f,0x62,0xe8,0x27,0x28,0x5b,0xcd,0x48,0x95,0xe4,0x07,0x59,0x5f,0xcc,0xba,0x42,0xdf,0xdc,0x16,0xc0,0xeb,0x60,0xcf,0x0b,0xf0,0xe4,0xcd,0xb6,0x41,0x3c,0x24,0xd6,0xaf,0xc7,0x46,0x66,0x5a,0xf4,0x78,0xea,0xc7,0x04,0x82,0x53,0x32,0x12,0xab,0x23,0x25,0x51,0xe4,0xd1,0x49,0x96,0x44,0x6f,0x7d,0x16,0xb4,0x8a,0x25,0x70,0xec,0x52,0xc4,0xee,0x9e,0xfa,0xce,0x07,0xf0,0x62,0xb7,0x29,0x30,0xf4,0x50,0xb6,0xc3,0xcc,0x53,0x4d,0x5f,0x1b,0x3c,0x4a,0x7b,0xcd,0x5b,0x90,0x03,0x69,0x28,0x86,0x4f };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MMT256-DECRYPT-9", "[CFB128][MMT][256][DECRYPT][n9]") {
    const uint8_t KEY[] = { 0x4d,0x3e,0x4c,0xec,0x63,0xed,0xaf,0xbb,0x4d,0x60,0x00,0x07,0xe9,0x51,0x24,0xf5,0x54,0xb3,0x52,0xad,0xa4,0x96,0x6a,0x60,0xda,0x4c,0x89,0x89,0x12,0xca,0xda,0x73 };
    const uint8_t IV[] = { 0x05,0xae,0xf5,0xcc,0xf4,0x62,0x98,0xe0,0xfe,0xb5,0x8d,0x77,0x12,0x2b,0x58,0xd9 };
    const uint8_t PLAINTEXT[] = { 0x95,0xd6,0xb8,0x3e,0x1c,0x10,0xc7,0x21,0xe0,0xf0,0xc3,0x59,0x07,0xb3,0xa4,0xe3,0x5c,0x27,0x94,0xa6,0xa8,0x23,0x48,0x74,0x44,0x0b,0xe7,0xa7,0x95,0xdc,0x8e,0x2f,0x7e,0xc5,0xcf,0x73,0x9d,0x0b,0xb1,0x3b,0x1f,0xc5,0x1c,0xf5,0xd4,0xd2,0x7d,0x2e,0xd4,0xb9,0x3c,0x11,0x89,0x3c,0x7b,0x9a,0x64,0x9b,0x22,0xcb,0xbc,0x96,0xa8,0xcd,0x58,0x47,0xd1,0x35,0xc4,0x3d,0x1a,0x11,0x85,0x58,0x11,0xb8,0x2c,0xff,0xbd,0x22,0x87,0xe6,0xc5,0x5f,0x45,0xd1,0x24,0xd4,0x7d,0x54,0x92,0x18,0xc1,0xea,0x00,0x49,0x28,0x1d,0xd5,0x39,0xa6,0x0c,0xdb,0xb8,0x05,0x49,0xdb,0x3a,0xf3,0xb9,0xf8,0xd4,0xca,0x12,0x7e,0xfc,0xb5,0xcd,0xe7,0xec,0xc9,0x8e,0x00,0x8f,0x1e,0xde,0xff,0x69,0x80,0xf1,0x72,0x65,0x28,0x06,0xff,0x93,0x95,0xaf,0x7a,0x62,0xf8,0x8a,0xba,0xaf,0x89,0x74,0xeb,0xef,0x1a,0x02,0xd7,0x8e,0x4b,0xd5,0x21,0x49,0xfa,0x1e,0xe1,0x83 };
    const uint8_t CIPHERTEXT[] = { 0xfe,0xdc,0x27,0x08,0xce,0x2e,0x24,0x71,0xab,0x8e,0x66,0xc6,0x9a,0x34,0x51,0xa9,0x43,0x80,0xda,0x0e,0x5e,0x99,0x98,0xfa,0x68,0x54,0x1d,0x89,0x9a,0x57,0x86,0x36,0x1b,0x7e,0x51,0x57,0x75,0x7d,0x6f,0xe7,0x46,0xc7,0x9a,0x88,0x38,0xaf,0xe9,0xc8,0x32,0xcd,0xa2,0xa4,0xd0,0xa4,0x4f,0x4b,0x11,0x81,0x14,0x24,0x50,0xa6,0x3f,0x11,0x76,0xa8,0x21,0xf6,0x6d,0x16,0x1d,0x75,0xd8,0x5b,0xfe,0xfc,0x01,0xe6,0x8d,0x02,0x12,0x88,0x64,0x8d,0x89,0x1d,0xfd,0xf8,0xe6,0x6e,0x0e,0xf3,0xa6,0x56,0x19,0xcb,0x75,0x24,0x3e,0xec,0xa0,0x41,0x55,0xa4,0xc9,0x13,0x39,0x29,0xde,0x20,0x66,0xde,0x4c,0x77,0xc7,0xd2,0x6f,0x4c,0xc9,0x89,0x4d,0xe2,0xb4,0x00,0x85,0xae,0x3b,0xeb,0x82,0xb9,0x52,0x41,0xf4,0x46,0x3f,0xfa,0x81,0xb5,0xf4,0x18,0xb7,0xa7,0x9c,0xe4,0x46,0x63,0x74,0x7a,0x6c,0x78,0xdc,0x87,0xb0,0xa4,0xae,0x52,0xd3,0xf5,0xce,0xf9 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

