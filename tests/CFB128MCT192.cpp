#include "rijndael.h"
#include "catch.hpp"
#include <cstring>

static inline std::string buf2str(const uint8_t *buf, size_t len) {
    std::ostringstream ss; ss << std::hex << std::setfill('0');
    for (size_t i = 0; i < len; ++i) {
        ss << std::setw(2) << static_cast<int>(buf[i]) << ' ';
    }
    return ss.str();
}

TEST_CASE("CFB128MCT192-ENCRYPT-0", "[CFB128][MCT][192][ENCRYPT][n0]") {
    const uint8_t KEY[] = { 0x17,0x84,0x90,0xe1,0x45,0x03,0x39,0xb3,0x9f,0xbf,0xe9,0x3e,0x78,0x0f,0xa7,0x33,0x44,0xe5,0xb3,0xaa,0x50,0xae,0xd2,0x21 };
    const uint8_t IV[] = { 0xf3,0x6c,0x37,0x5f,0xbc,0xd9,0xd4,0x1a,0x16,0x69,0x8b,0x03,0x71,0x5c,0xe8,0x89 };
    const uint8_t PLAINTEXT[] = { 0xd6,0x66,0x6b,0x2b,0xad,0x54,0x8b,0x51,0xee,0xbd,0x0e,0xd0,0xa0,0x59,0x5c,0xba };
    const uint8_t CIPHERTEXT[] = { 0x3b,0xfa,0x4b,0x57,0x59,0x34,0x6a,0xaa,0xe1,0x6f,0xf6,0xf8,0xd2,0x50,0x00,0x27 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-1", "[CFB128][MCT][192][ENCRYPT][n1]") {
    const uint8_t KEY[] = { 0xac,0xf8,0x6f,0x09,0x9f,0xeb,0xa8,0xd7,0xa4,0x45,0xa2,0x69,0x21,0x3b,0xcd,0x99,0xa5,0x8a,0x45,0x52,0x82,0xfe,0xd2,0x06 };
    const uint8_t IV[] = { 0x3b,0xfa,0x4b,0x57,0x59,0x34,0x6a,0xaa,0xe1,0x6f,0xf6,0xf8,0xd2,0x50,0x00,0x27 };
    const uint8_t PLAINTEXT[] = { 0x44,0xc0,0x7d,0x1c,0xaa,0x45,0x03,0xc2,0xbb,0x7c,0xff,0xe8,0xda,0xe8,0x91,0x64 };
    const uint8_t CIPHERTEXT[] = { 0xfb,0x82,0x48,0x60,0x06,0xe6,0x7b,0x4f,0x3b,0xb0,0xfe,0x20,0x0c,0x65,0x75,0xdd };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-2", "[CFB128][MCT][192][ENCRYPT][n2]") {
    const uint8_t KEY[] = { 0xbc,0x27,0x5a,0x67,0x52,0x79,0x88,0xa7,0x5f,0xc7,0xea,0x09,0x27,0xdd,0xb6,0xd6,0x9e,0x3a,0xbb,0x72,0x8e,0x9b,0xa7,0xdb };
    const uint8_t IV[] = { 0xfb,0x82,0x48,0x60,0x06,0xe6,0x7b,0x4f,0x3b,0xb0,0xfe,0x20,0x0c,0x65,0x75,0xdd };
    const uint8_t PLAINTEXT[] = { 0x51,0x58,0x63,0x68,0xcb,0xdc,0x36,0x1b,0x10,0xdf,0x35,0x6e,0xcd,0x92,0x20,0x70 };
    const uint8_t CIPHERTEXT[] = { 0x0a,0x88,0x66,0x81,0xe9,0xf9,0xbc,0x02,0x9b,0x59,0xdc,0xdb,0xa6,0x40,0xe2,0x4d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-3", "[CFB128][MCT][192][ENCRYPT][n3]") {
    const uint8_t KEY[] = { 0xb9,0xb1,0x71,0x7c,0x3b,0xf6,0x06,0x68,0x55,0x4f,0x8c,0x88,0xce,0x24,0x0a,0xd4,0x05,0x63,0x67,0xa9,0x28,0xdb,0x45,0x96 };
    const uint8_t IV[] = { 0x0a,0x88,0x66,0x81,0xe9,0xf9,0xbc,0x02,0x9b,0x59,0xdc,0xdb,0xa6,0x40,0xe2,0x4d };
    const uint8_t PLAINTEXT[] = { 0x4a,0x73,0x18,0x52,0x14,0xdb,0xc5,0x78,0x05,0x96,0x2b,0x1b,0x69,0x8f,0x8e,0xcf };
    const uint8_t CIPHERTEXT[] = { 0x69,0x2f,0xee,0xa9,0xd3,0x5c,0x38,0x1c,0x32,0xc4,0xe6,0x1d,0x0e,0xda,0xa5,0x06 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-4", "[CFB128][MCT][192][ENCRYPT][n4]") {
    const uint8_t KEY[] = { 0xa5,0x9c,0x56,0xc9,0x23,0x35,0xc6,0xff,0x3c,0x60,0x62,0x21,0x1d,0x78,0x32,0xc8,0x37,0xa7,0x81,0xb4,0x26,0x01,0xe0,0x90 };
    const uint8_t IV[] = { 0x69,0x2f,0xee,0xa9,0xd3,0x5c,0x38,0x1c,0x32,0xc4,0xe6,0x1d,0x0e,0xda,0xa5,0x06 };
    const uint8_t PLAINTEXT[] = { 0x55,0x50,0x2c,0x7a,0xaa,0x32,0x6a,0xe1,0x1c,0x2d,0x27,0xb5,0x18,0xc3,0xc0,0x97 };
    const uint8_t CIPHERTEXT[] = { 0xb4,0x1e,0xdb,0xc2,0x81,0x9e,0xee,0x9d,0xac,0xf2,0x95,0x99,0xbd,0xaa,0x40,0x96 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-5", "[CFB128][MCT][192][ENCRYPT][n5]") {
    const uint8_t KEY[] = { 0x2e,0xfe,0xae,0xfb,0xa7,0x65,0x02,0xdf,0x88,0x7e,0xb9,0xe3,0x9c,0xe6,0xdc,0x55,0x9b,0x55,0x14,0x2d,0x9b,0xab,0xa0,0x06 };
    const uint8_t IV[] = { 0xb4,0x1e,0xdb,0xc2,0x81,0x9e,0xee,0x9d,0xac,0xf2,0x95,0x99,0xbd,0xaa,0x40,0x96 };
    const uint8_t PLAINTEXT[] = { 0xa3,0x41,0x96,0x46,0x62,0x0c,0xb7,0x92,0x8b,0x62,0xf8,0x32,0x84,0x50,0xc4,0x20 };
    const uint8_t CIPHERTEXT[] = { 0x01,0x0c,0x10,0x1f,0x93,0x5e,0xa8,0xc3,0xca,0x00,0xea,0xcd,0xec,0x21,0x8f,0xed };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-6", "[CFB128][MCT][192][ENCRYPT][n6]") {
    const uint8_t KEY[] = { 0xc7,0x8c,0x34,0xf7,0x2e,0xf9,0x54,0xbd,0x89,0x72,0xa9,0xfc,0x0f,0xb8,0x74,0x96,0x51,0x55,0xfe,0xe0,0x77,0x8a,0x2f,0xeb };
    const uint8_t IV[] = { 0x01,0x0c,0x10,0x1f,0x93,0x5e,0xa8,0xc3,0xca,0x00,0xea,0xcd,0xec,0x21,0x8f,0xed };
    const uint8_t PLAINTEXT[] = { 0xcd,0x8b,0x8c,0x89,0xf0,0xba,0x94,0xd4,0xe9,0x72,0x9a,0x0c,0x89,0x9c,0x56,0x62 };
    const uint8_t CIPHERTEXT[] = { 0x4a,0xb2,0x69,0x24,0x6f,0xea,0x25,0x89,0x08,0x39,0x90,0x2a,0xf6,0x27,0x12,0x50 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-7", "[CFB128][MCT][192][ENCRYPT][n7]") {
    const uint8_t KEY[] = { 0x25,0xe5,0x05,0x57,0xe4,0x1a,0x59,0xf9,0xc3,0xc0,0xc0,0xd8,0x60,0x52,0x51,0x1f,0x59,0x6c,0x6e,0xca,0x81,0xad,0x3d,0xbb };
    const uint8_t IV[] = { 0x4a,0xb2,0x69,0x24,0x6f,0xea,0x25,0x89,0x08,0x39,0x90,0x2a,0xf6,0x27,0x12,0x50 };
    const uint8_t PLAINTEXT[] = { 0x89,0x9c,0xd9,0x85,0x0d,0xb6,0x2a,0xfb,0xe2,0x69,0x31,0xa0,0xca,0xe3,0x0d,0x44 };
    const uint8_t CIPHERTEXT[] = { 0x88,0x0a,0xf9,0x5f,0x20,0x3e,0x7b,0x32,0xc9,0x6c,0x54,0x3d,0x57,0x9c,0x6a,0x0b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-8", "[CFB128][MCT][192][ENCRYPT][n8]") {
    const uint8_t KEY[] = { 0xba,0xfb,0x27,0xb6,0xb9,0x96,0x35,0x7a,0x4b,0xca,0x39,0x87,0x40,0x6c,0x2a,0x2d,0x90,0x00,0x3a,0xf7,0xd6,0x31,0x57,0xb0 };
    const uint8_t IV[] = { 0x88,0x0a,0xf9,0x5f,0x20,0x3e,0x7b,0x32,0xc9,0x6c,0x54,0x3d,0x57,0x9c,0x6a,0x0b };
    const uint8_t PLAINTEXT[] = { 0x57,0xa8,0x9d,0x11,0x4a,0x85,0xef,0xd3,0x9f,0x1e,0x22,0xe1,0x5d,0x8c,0x6c,0x83 };
    const uint8_t CIPHERTEXT[] = { 0xcd,0xcd,0x1d,0xed,0x9d,0x9f,0xc6,0xd4,0x21,0x14,0x74,0xb0,0x88,0x89,0xc4,0x02 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-9", "[CFB128][MCT][192][ENCRYPT][n9]") {
    const uint8_t KEY[] = { 0xb2,0xc3,0xb7,0x29,0xc1,0xd6,0xfe,0x61,0x86,0x07,0x24,0x6a,0xdd,0xf3,0xec,0xf9,0xb1,0x14,0x4e,0x47,0x5e,0xb8,0x93,0xb2 };
    const uint8_t IV[] = { 0xcd,0xcd,0x1d,0xed,0x9d,0x9f,0xc6,0xd4,0x21,0x14,0x74,0xb0,0x88,0x89,0xc4,0x02 };
    const uint8_t PLAINTEXT[] = { 0xe2,0x10,0x8a,0xfd,0x76,0x3f,0x70,0x94,0x08,0x38,0x90,0x9f,0x78,0x40,0xcb,0x1b };
    const uint8_t CIPHERTEXT[] = { 0x4b,0x84,0x4e,0xce,0xf4,0xe3,0xdb,0x3a,0x45,0xbb,0xbd,0x80,0xb5,0xb6,0x17,0x5e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-10", "[CFB128][MCT][192][ENCRYPT][n10]") {
    const uint8_t KEY[] = { 0x9a,0xfb,0xca,0xa2,0xdf,0x2f,0x0c,0x56,0xcd,0x83,0x6a,0xa4,0x29,0x10,0x37,0xc3,0xf4,0xaf,0xf3,0xc7,0xeb,0x0e,0x84,0xec };
    const uint8_t IV[] = { 0x4b,0x84,0x4e,0xce,0xf4,0xe3,0xdb,0x3a,0x45,0xbb,0xbd,0x80,0xb5,0xb6,0x17,0x5e };
    const uint8_t PLAINTEXT[] = { 0x10,0x5f,0xf1,0x3c,0x9f,0x70,0x46,0xbc,0x28,0x38,0x7d,0x8b,0x1e,0xf9,0xf2,0x37 };
    const uint8_t CIPHERTEXT[] = { 0x9d,0x42,0xd9,0x3d,0x35,0x9f,0x61,0x63,0xf3,0xf5,0x18,0xde,0x2b,0x5b,0x57,0x99 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-11", "[CFB128][MCT][192][ENCRYPT][n11]") {
    const uint8_t KEY[] = { 0xbf,0xb0,0xa5,0xe2,0xff,0xcf,0xab,0xbd,0x50,0xc1,0xb3,0x99,0x1c,0x8f,0x56,0xa0,0x07,0x5a,0xeb,0x19,0xc0,0x55,0xd3,0x75 };
    const uint8_t IV[] = { 0x9d,0x42,0xd9,0x3d,0x35,0x9f,0x61,0x63,0xf3,0xf5,0x18,0xde,0x2b,0x5b,0x57,0x99 };
    const uint8_t PLAINTEXT[] = { 0x06,0x2b,0xf7,0x0a,0x0f,0xef,0xa9,0x54,0x25,0x4b,0x6f,0x40,0x20,0xe0,0xa7,0xeb };
    const uint8_t CIPHERTEXT[] = { 0xdc,0x88,0x0e,0x4a,0xed,0x3c,0xc4,0xc0,0x3a,0x5b,0x77,0xbe,0x6e,0x4f,0xb4,0x73 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-12", "[CFB128][MCT][192][ENCRYPT][n12]") {
    const uint8_t KEY[] = { 0x5e,0xf1,0x78,0x09,0x75,0x86,0x88,0x10,0x8c,0x49,0xbd,0xd3,0xf1,0xb3,0x92,0x60,0x3d,0x01,0x9c,0xa7,0xae,0x1a,0x67,0x06 };
    const uint8_t IV[] = { 0xdc,0x88,0x0e,0x4a,0xed,0x3c,0xc4,0xc0,0x3a,0x5b,0x77,0xbe,0x6e,0x4f,0xb4,0x73 };
    const uint8_t PLAINTEXT[] = { 0x96,0xe5,0xb3,0x11,0xd0,0x52,0x2f,0xbd,0xe1,0x41,0xdd,0xeb,0x8a,0x49,0x23,0xad };
    const uint8_t CIPHERTEXT[] = { 0xc0,0x1a,0x89,0x17,0xeb,0x36,0x24,0x5c,0x67,0x6c,0xc8,0xe7,0x6c,0xf3,0x49,0x70 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-13", "[CFB128][MCT][192][ENCRYPT][n13]") {
    const uint8_t KEY[] = { 0x41,0x60,0x78,0x97,0x18,0xf6,0xb8,0x29,0x4c,0x53,0x34,0xc4,0x1a,0x85,0xb6,0x3c,0x5a,0x6d,0x54,0x40,0xc2,0xe9,0x2e,0x76 };
    const uint8_t IV[] = { 0xc0,0x1a,0x89,0x17,0xeb,0x36,0x24,0x5c,0x67,0x6c,0xc8,0xe7,0x6c,0xf3,0x49,0x70 };
    const uint8_t PLAINTEXT[] = { 0x14,0x8b,0x4c,0x74,0x6b,0xc4,0x89,0x45,0x1f,0x91,0x00,0x9e,0x6d,0x70,0x30,0x39 };
    const uint8_t CIPHERTEXT[] = { 0xf5,0x77,0xd9,0x89,0x05,0x21,0xae,0x43,0xb8,0x43,0x0d,0xba,0xb4,0x1e,0x1c,0x2d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-14", "[CFB128][MCT][192][ENCRYPT][n14]") {
    const uint8_t KEY[] = { 0xc9,0x5f,0xf2,0xee,0x28,0x4b,0xfd,0xcb,0xb9,0x24,0xed,0x4d,0x1f,0xa4,0x18,0x7f,0xe2,0x2e,0x59,0xfa,0x76,0xf7,0x32,0x5b };
    const uint8_t IV[] = { 0xf5,0x77,0xd9,0x89,0x05,0x21,0xae,0x43,0xb8,0x43,0x0d,0xba,0xb4,0x1e,0x1c,0x2d };
    const uint8_t PLAINTEXT[] = { 0x63,0x5b,0xbe,0x5c,0xcd,0x14,0x9d,0x6b,0x88,0x3f,0x8a,0x79,0x30,0xbd,0x45,0xe2 };
    const uint8_t CIPHERTEXT[] = { 0x18,0x8e,0x6f,0x9e,0x77,0xd3,0xd7,0xe0,0x72,0x2c,0xce,0x7c,0x3b,0x7d,0xb2,0x73 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-15", "[CFB128][MCT][192][ENCRYPT][n15]") {
    const uint8_t KEY[] = { 0xa1,0x98,0x6c,0x37,0xb0,0x95,0x6b,0x71,0xa1,0xaa,0x82,0xd3,0x68,0x77,0xcf,0x9f,0x90,0x02,0x97,0x86,0x4d,0x8a,0x80,0x28 };
    const uint8_t IV[] = { 0x18,0x8e,0x6f,0x9e,0x77,0xd3,0xd7,0xe0,0x72,0x2c,0xce,0x7c,0x3b,0x7d,0xb2,0x73 };
    const uint8_t PLAINTEXT[] = { 0x8b,0x5b,0x3d,0xdd,0xed,0xa1,0x27,0xee,0x68,0xc7,0x9e,0xd9,0x98,0xde,0x96,0xba };
    const uint8_t CIPHERTEXT[] = { 0x1d,0xf4,0xe3,0x01,0x94,0x18,0x98,0x0e,0x3d,0x3b,0x12,0x4b,0x1f,0x26,0xe8,0xe6 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-16", "[CFB128][MCT][192][ENCRYPT][n16]") {
    const uint8_t KEY[] = { 0x20,0x18,0x26,0x09,0xc2,0x8e,0x5a,0xcb,0xbc,0x5e,0x61,0xd2,0xfc,0x6f,0x57,0x91,0xad,0x39,0x85,0xcd,0x52,0xac,0x68,0xce };
    const uint8_t IV[] = { 0x1d,0xf4,0xe3,0x01,0x94,0x18,0x98,0x0e,0x3d,0x3b,0x12,0x4b,0x1f,0x26,0xe8,0xe6 };
    const uint8_t PLAINTEXT[] = { 0xfe,0xb0,0x67,0x90,0x0e,0x09,0xa3,0x16,0x81,0x80,0x4a,0x3e,0x72,0x1b,0x31,0xba };
    const uint8_t CIPHERTEXT[] = { 0xfd,0x9a,0xa6,0x05,0xcc,0x9b,0xb8,0xdb,0x27,0xa9,0xad,0x01,0x7b,0x1b,0x91,0xb1 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-17", "[CFB128][MCT][192][ENCRYPT][n17]") {
    const uint8_t KEY[] = { 0x58,0x98,0x1b,0x01,0xbe,0xd9,0x65,0x42,0x41,0xc4,0xc7,0xd7,0x30,0xf4,0xef,0x4a,0x8a,0x90,0x28,0xcc,0x29,0xb7,0xf9,0x7f };
    const uint8_t IV[] = { 0xfd,0x9a,0xa6,0x05,0xcc,0x9b,0xb8,0xdb,0x27,0xa9,0xad,0x01,0x7b,0x1b,0x91,0xb1 };
    const uint8_t PLAINTEXT[] = { 0x30,0x01,0x23,0x2d,0x84,0x84,0x70,0xb8,0x78,0x80,0x3d,0x08,0x7c,0x57,0x3f,0x89 };
    const uint8_t CIPHERTEXT[] = { 0x1b,0x1c,0x60,0xda,0x48,0x90,0x87,0x88,0x6d,0x44,0x62,0xa6,0x3c,0x37,0x81,0x20 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-18", "[CFB128][MCT][192][ENCRYPT][n18]") {
    const uint8_t KEY[] = { 0xde,0x5d,0x8c,0xa6,0xfa,0xec,0x33,0x6b,0x5a,0xd8,0xa7,0x0d,0x78,0x64,0x68,0xc2,0xe7,0xd4,0x4a,0x6a,0x15,0x80,0x78,0x5f };
    const uint8_t IV[] = { 0x1b,0x1c,0x60,0xda,0x48,0x90,0x87,0x88,0x6d,0x44,0x62,0xa6,0x3c,0x37,0x81,0x20 };
    const uint8_t PLAINTEXT[] = { 0x3b,0x49,0x5f,0x5a,0x88,0x14,0xc7,0xa3,0x86,0xc5,0x97,0xa7,0x44,0x35,0x56,0x29 };
    const uint8_t CIPHERTEXT[] = { 0x19,0x5d,0x5d,0x9c,0x91,0xf8,0x68,0x8b,0x9f,0xa3,0x94,0x48,0x40,0xcc,0x1f,0x88 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-19", "[CFB128][MCT][192][ENCRYPT][n19]") {
    const uint8_t KEY[] = { 0x2e,0xd3,0xcd,0x4a,0x30,0xa7,0x31,0xc7,0x43,0x85,0xfa,0x91,0xe9,0x9c,0x00,0x49,0x78,0x77,0xde,0x22,0x55,0x4c,0x67,0xd7 };
    const uint8_t IV[] = { 0x19,0x5d,0x5d,0x9c,0x91,0xf8,0x68,0x8b,0x9f,0xa3,0x94,0x48,0x40,0xcc,0x1f,0x88 };
    const uint8_t PLAINTEXT[] = { 0x4b,0xfc,0x63,0x41,0x59,0x94,0xab,0x20,0xf0,0x8e,0x41,0xec,0xca,0x4b,0x02,0xac };
    const uint8_t CIPHERTEXT[] = { 0x01,0xd6,0xa4,0x1b,0x4a,0xea,0x65,0x62,0xef,0x71,0xe7,0x17,0xc2,0xa2,0x94,0xef };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-20", "[CFB128][MCT][192][ENCRYPT][n20]") {
    const uint8_t KEY[] = { 0x87,0x8c,0xa7,0x42,0x28,0x66,0x25,0xc4,0x42,0x53,0x5e,0x8a,0xa3,0x76,0x65,0x2b,0x97,0x06,0x39,0x35,0x97,0xee,0xf3,0x38 };
    const uint8_t IV[] = { 0x01,0xd6,0xa4,0x1b,0x4a,0xea,0x65,0x62,0xef,0x71,0xe7,0x17,0xc2,0xa2,0x94,0xef };
    const uint8_t PLAINTEXT[] = { 0x0f,0x0c,0xfa,0xa4,0x5c,0x9e,0x2d,0x56,0xa9,0x5f,0x6a,0x08,0x18,0xc1,0x14,0x03 };
    const uint8_t CIPHERTEXT[] = { 0xb0,0x89,0xa5,0xad,0xfd,0x8c,0xfa,0x64,0x32,0x1b,0x70,0x56,0x08,0xd1,0xcd,0x4c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-21", "[CFB128][MCT][192][ENCRYPT][n21]") {
    const uint8_t KEY[] = { 0xd5,0xdc,0x7c,0x43,0x29,0xe6,0x57,0xea,0xf2,0xda,0xfb,0x27,0x5e,0xfa,0x9f,0x4f,0xa5,0x1d,0x49,0x63,0x9f,0x3f,0x3e,0x74 };
    const uint8_t IV[] = { 0xb0,0x89,0xa5,0xad,0xfd,0x8c,0xfa,0x64,0x32,0x1b,0x70,0x56,0x08,0xd1,0xcd,0x4c };
    const uint8_t PLAINTEXT[] = { 0x28,0xca,0x2b,0xcf,0x8b,0x80,0xa0,0xc8,0x52,0x50,0xdb,0x01,0x01,0x80,0x72,0x2e };
    const uint8_t CIPHERTEXT[] = { 0xbf,0x6d,0xb1,0x29,0x77,0x10,0x2d,0xa3,0x27,0xd5,0x6b,0x8e,0x52,0x0a,0x19,0x85 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-22", "[CFB128][MCT][192][ENCRYPT][n22]") {
    const uint8_t KEY[] = { 0x98,0xd1,0x36,0x77,0x2e,0xbf,0x7c,0xd1,0x4d,0xb7,0x4a,0x0e,0x29,0xea,0xb2,0xec,0x82,0xc8,0x22,0xed,0xcd,0x35,0x27,0xf1 };
    const uint8_t IV[] = { 0xbf,0x6d,0xb1,0x29,0x77,0x10,0x2d,0xa3,0x27,0xd5,0x6b,0x8e,0x52,0x0a,0x19,0x85 };
    const uint8_t PLAINTEXT[] = { 0x06,0xf3,0x83,0x9a,0x9e,0xb4,0x40,0x4f,0x4d,0x0d,0x4a,0x34,0x07,0x59,0x2b,0x3b };
    const uint8_t CIPHERTEXT[] = { 0x06,0x79,0x82,0x0a,0x0c,0xcd,0xd8,0xa8,0xdf,0x9e,0xd9,0x96,0xaf,0xad,0xea,0x0b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-23", "[CFB128][MCT][192][ENCRYPT][n23]") {
    const uint8_t KEY[] = { 0x36,0x6c,0xf0,0x05,0x03,0x0b,0xb1,0x60,0x4b,0xce,0xc8,0x04,0x25,0x27,0x6a,0x44,0x5d,0x56,0xfb,0x7b,0x62,0x98,0xcd,0xfa };
    const uint8_t IV[] = { 0x06,0x79,0x82,0x0a,0x0c,0xcd,0xd8,0xa8,0xdf,0x9e,0xd9,0x96,0xaf,0xad,0xea,0x0b };
    const uint8_t PLAINTEXT[] = { 0xe8,0xd3,0x10,0xf7,0x61,0x98,0x11,0xd0,0xae,0xbd,0xc6,0x72,0x2d,0xb4,0xcd,0xb1 };
    const uint8_t CIPHERTEXT[] = { 0x70,0x5e,0xf5,0xa1,0xc6,0xf9,0x15,0xc8,0x03,0xdc,0xf7,0xd1,0x19,0x21,0x3b,0x86 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-24", "[CFB128][MCT][192][ENCRYPT][n24]") {
    const uint8_t KEY[] = { 0xec,0x6b,0x5b,0xab,0xfb,0x0f,0xe6,0x05,0x3b,0x90,0x3d,0xa5,0xe3,0xde,0x7f,0x8c,0x5e,0x8a,0x0c,0xaa,0x7b,0xb9,0xf6,0x7c };
    const uint8_t IV[] = { 0x70,0x5e,0xf5,0xa1,0xc6,0xf9,0x15,0xc8,0x03,0xdc,0xf7,0xd1,0x19,0x21,0x3b,0x86 };
    const uint8_t PLAINTEXT[] = { 0x0a,0xa5,0xe3,0x06,0xe0,0x0d,0xe3,0xe0,0xda,0x07,0xab,0xae,0xf8,0x04,0x57,0x65 };
    const uint8_t CIPHERTEXT[] = { 0x63,0xd5,0x11,0xe2,0x4a,0x62,0x56,0x55,0x35,0xda,0x0a,0x91,0x1a,0xe9,0x0f,0x2b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-25", "[CFB128][MCT][192][ENCRYPT][n25]") {
    const uint8_t KEY[] = { 0x4d,0x82,0x40,0x5c,0x45,0xd7,0x27,0xa5,0x58,0x45,0x2c,0x47,0xa9,0xbc,0x29,0xd9,0x6b,0x50,0x06,0x3b,0x61,0x50,0xf9,0x57 };
    const uint8_t IV[] = { 0x63,0xd5,0x11,0xe2,0x4a,0x62,0x56,0x55,0x35,0xda,0x0a,0x91,0x1a,0xe9,0x0f,0x2b };
    const uint8_t PLAINTEXT[] = { 0x45,0xb0,0xbe,0xb5,0x29,0x48,0xb3,0x42,0xa1,0xe9,0x1b,0xf7,0xbe,0xd8,0xc1,0xa0 };
    const uint8_t CIPHERTEXT[] = { 0xb2,0xe0,0x08,0xc4,0x0c,0xb0,0xe4,0x27,0x6a,0x88,0xc2,0x50,0xf0,0x80,0xeb,0x99 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-26", "[CFB128][MCT][192][ENCRYPT][n26]") {
    const uint8_t KEY[] = { 0x4e,0xf0,0x4e,0x90,0x4e,0x63,0x0c,0x56,0xea,0xa5,0x24,0x83,0xa5,0x0c,0xcd,0xfe,0x01,0xd8,0xc4,0x6b,0x91,0xd0,0x12,0xce };
    const uint8_t IV[] = { 0xb2,0xe0,0x08,0xc4,0x0c,0xb0,0xe4,0x27,0x6a,0x88,0xc2,0x50,0xf0,0x80,0xeb,0x99 };
    const uint8_t PLAINTEXT[] = { 0xc9,0xe6,0x58,0x0e,0x6c,0xc9,0xbe,0x47,0x03,0x72,0x0e,0xcc,0x0b,0xb4,0x2b,0xf3 };
    const uint8_t CIPHERTEXT[] = { 0x94,0x26,0x43,0x0f,0xdb,0xe0,0xeb,0x02,0xfc,0x0c,0x89,0x2d,0xb8,0xfb,0x8f,0x0f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-27", "[CFB128][MCT][192][ENCRYPT][n27]") {
    const uint8_t KEY[] = { 0xe5,0x92,0x69,0x86,0x91,0xe0,0x2e,0x65,0x7e,0x83,0x67,0x8c,0x7e,0xec,0x26,0xfc,0xfd,0xd4,0x4d,0x46,0x29,0x2b,0x9d,0xc1 };
    const uint8_t IV[] = { 0x94,0x26,0x43,0x0f,0xdb,0xe0,0xeb,0x02,0xfc,0x0c,0x89,0x2d,0xb8,0xfb,0x8f,0x0f };
    const uint8_t PLAINTEXT[] = { 0xd2,0x19,0xd2,0x30,0x0d,0x83,0xe4,0xe9,0xab,0x62,0x27,0x16,0xdf,0x83,0x22,0x33 };
    const uint8_t CIPHERTEXT[] = { 0xa4,0x93,0x4d,0x24,0xc7,0x5e,0x94,0xb4,0x6d,0x99,0xf1,0x57,0x1c,0x00,0x1f,0x25 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-28", "[CFB128][MCT][192][ENCRYPT][n28]") {
    const uint8_t KEY[] = { 0x68,0x2f,0x56,0x27,0x58,0xcc,0x38,0x16,0xda,0x10,0x2a,0xa8,0xb9,0xb2,0xb2,0x48,0x90,0x4d,0xbc,0x11,0x35,0x2b,0x82,0xe4 };
    const uint8_t IV[] = { 0xa4,0x93,0x4d,0x24,0xc7,0x5e,0x94,0xb4,0x6d,0x99,0xf1,0x57,0x1c,0x00,0x1f,0x25 };
    const uint8_t PLAINTEXT[] = { 0x71,0x81,0xee,0xec,0xa2,0xc6,0xc8,0xc8,0x8d,0xbd,0x3f,0xa1,0xc9,0x2c,0x16,0x73 };
    const uint8_t CIPHERTEXT[] = { 0xbb,0xd7,0xcb,0x9e,0xc2,0x8d,0x78,0x32,0xad,0x88,0x1d,0x74,0xd0,0xf9,0x3c,0xca };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-29", "[CFB128][MCT][192][ENCRYPT][n29]") {
    const uint8_t KEY[] = { 0xe2,0x09,0x53,0x23,0x42,0x9c,0xaf,0x17,0x61,0xc7,0xe1,0x36,0x7b,0x3f,0xca,0x7a,0x3d,0xc5,0xa1,0x65,0xe5,0xd2,0xbe,0x2e };
    const uint8_t IV[] = { 0xbb,0xd7,0xcb,0x9e,0xc2,0x8d,0x78,0x32,0xad,0x88,0x1d,0x74,0xd0,0xf9,0x3c,0xca };
    const uint8_t PLAINTEXT[] = { 0xdc,0x79,0x12,0x66,0xd0,0x4a,0xff,0x3d,0x8a,0x26,0x05,0x04,0x1a,0x50,0x97,0x01 };
    const uint8_t CIPHERTEXT[] = { 0x79,0x8f,0xd6,0xc7,0xc5,0xbe,0x30,0x01,0x1a,0x4e,0x71,0x6c,0xe4,0x71,0x14,0x3f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-30", "[CFB128][MCT][192][ENCRYPT][n30]") {
    const uint8_t KEY[] = { 0x8f,0x95,0x6a,0xd4,0xf7,0x73,0xf8,0x9a,0x18,0x48,0x37,0xf1,0xbe,0x81,0xfa,0x7b,0x27,0x8b,0xd0,0x09,0x01,0xa3,0xaa,0x11 };
    const uint8_t IV[] = { 0x79,0x8f,0xd6,0xc7,0xc5,0xbe,0x30,0x01,0x1a,0x4e,0x71,0x6c,0xe4,0x71,0x14,0x3f };
    const uint8_t PLAINTEXT[] = { 0xb3,0x41,0xc0,0x5d,0x70,0x99,0x32,0x4a,0x6d,0x9c,0x39,0xf7,0xb5,0xef,0x57,0x8d };
    const uint8_t CIPHERTEXT[] = { 0xe2,0xfa,0xe1,0x38,0xe4,0x41,0xc1,0xfa,0x30,0xc8,0x46,0x28,0x82,0xfe,0x15,0xa5 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-31", "[CFB128][MCT][192][ENCRYPT][n31]") {
    const uint8_t KEY[] = { 0xbf,0xae,0xa1,0xde,0x98,0x83,0xfa,0x77,0xfa,0xb2,0xd6,0xc9,0x5a,0xc0,0x3b,0x81,0x17,0x43,0x96,0x21,0x83,0x5d,0xbf,0xb4 };
    const uint8_t IV[] = { 0xe2,0xfa,0xe1,0x38,0xe4,0x41,0xc1,0xfa,0x30,0xc8,0x46,0x28,0x82,0xfe,0x15,0xa5 };
    const uint8_t PLAINTEXT[] = { 0x57,0xc6,0x80,0xb4,0x1f,0xd8,0x05,0xb9,0x30,0x3b,0xcb,0x0a,0x6f,0xf0,0x02,0xed };
    const uint8_t CIPHERTEXT[] = { 0xcb,0x5b,0x3c,0xf5,0xf0,0xa3,0x8f,0x66,0x3c,0x7b,0xe2,0x10,0x3b,0x1a,0x8c,0x6d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-32", "[CFB128][MCT][192][ENCRYPT][n32]") {
    const uint8_t KEY[] = { 0x20,0x64,0xb8,0xe1,0x3f,0xcc,0x34,0xa9,0x31,0xe9,0xea,0x3c,0xaa,0x63,0xb4,0xe7,0x2b,0x38,0x74,0x31,0xb8,0x47,0x33,0xd9 };
    const uint8_t IV[] = { 0xcb,0x5b,0x3c,0xf5,0xf0,0xa3,0x8f,0x66,0x3c,0x7b,0xe2,0x10,0x3b,0x1a,0x8c,0x6d };
    const uint8_t PLAINTEXT[] = { 0xb8,0x83,0x18,0xce,0x2f,0xb8,0xe0,0xba,0x9f,0xca,0x19,0x3f,0xa7,0x4f,0xce,0xde };
    const uint8_t CIPHERTEXT[] = { 0xf6,0xda,0x27,0x6c,0xc7,0xd9,0xb8,0x8a,0x73,0x63,0xfa,0xd1,0xbb,0xf3,0xfe,0xe2 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-33", "[CFB128][MCT][192][ENCRYPT][n33]") {
    const uint8_t KEY[] = { 0x46,0x45,0xa8,0xda,0x75,0x69,0x0a,0x86,0xc7,0x33,0xcd,0x50,0x6d,0xba,0x0c,0x6d,0x58,0x5b,0x8e,0xe0,0x03,0xb4,0xcd,0x3b };
    const uint8_t IV[] = { 0xf6,0xda,0x27,0x6c,0xc7,0xd9,0xb8,0x8a,0x73,0x63,0xfa,0xd1,0xbb,0xf3,0xfe,0xe2 };
    const uint8_t PLAINTEXT[] = { 0x21,0x90,0xc0,0x1b,0x18,0x22,0x5b,0x42,0x66,0x21,0x10,0x3b,0x4a,0xa5,0x3e,0x2f };
    const uint8_t CIPHERTEXT[] = { 0x42,0xa9,0x09,0xe3,0x2f,0xd7,0x4f,0xfc,0x69,0xa6,0xce,0xcc,0x9d,0xb5,0xda,0x08 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-34", "[CFB128][MCT][192][ENCRYPT][n34]") {
    const uint8_t KEY[] = { 0xf3,0xbf,0x59,0x35,0x1a,0x26,0x64,0xaa,0x85,0x9a,0xc4,0xb3,0x42,0x6d,0x43,0x91,0x31,0xfd,0x40,0x2c,0x9e,0x01,0x17,0x33 };
    const uint8_t IV[] = { 0x42,0xa9,0x09,0xe3,0x2f,0xd7,0x4f,0xfc,0x69,0xa6,0xce,0xcc,0x9d,0xb5,0xda,0x08 };
    const uint8_t PLAINTEXT[] = { 0x42,0xbb,0xd3,0x98,0x02,0x1e,0xf3,0x10,0xb5,0xfa,0xf1,0xef,0x6f,0x4f,0x6e,0x2c };
    const uint8_t CIPHERTEXT[] = { 0xd8,0xf2,0xee,0x5b,0x3b,0x11,0x8b,0x56,0x39,0xeb,0x04,0x78,0xe9,0xe7,0x77,0x3f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-35", "[CFB128][MCT][192][ENCRYPT][n35]") {
    const uint8_t KEY[] = { 0x30,0x8b,0x83,0x4a,0xd8,0x4c,0x07,0x38,0x5d,0x68,0x2a,0xe8,0x79,0x7c,0xc8,0xc7,0x08,0x16,0x44,0x54,0x77,0xe6,0x60,0x0c };
    const uint8_t IV[] = { 0xd8,0xf2,0xee,0x5b,0x3b,0x11,0x8b,0x56,0x39,0xeb,0x04,0x78,0xe9,0xe7,0x77,0x3f };
    const uint8_t PLAINTEXT[] = { 0xff,0x4a,0x01,0x82,0x49,0x12,0x88,0x74,0xc3,0x34,0xda,0x7f,0xc2,0x6a,0x63,0x92 };
    const uint8_t CIPHERTEXT[] = { 0x03,0xfe,0x3f,0x3d,0x4c,0x60,0x03,0x9a,0xff,0xc3,0x7f,0xe7,0x84,0xb6,0xad,0x32 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-36", "[CFB128][MCT][192][ENCRYPT][n36]") {
    const uint8_t KEY[] = { 0x55,0x4f,0xee,0xc7,0x9c,0xf5,0x0f,0x21,0x5e,0x96,0x15,0xd5,0x35,0x1c,0xcb,0x5d,0xf7,0xd5,0x3b,0xb3,0xf3,0x50,0xcd,0x3e };
    const uint8_t IV[] = { 0x03,0xfe,0x3f,0x3d,0x4c,0x60,0x03,0x9a,0xff,0xc3,0x7f,0xe7,0x84,0xb6,0xad,0x32 };
    const uint8_t PLAINTEXT[] = { 0xd7,0xa9,0x45,0x52,0xa2,0x13,0x6f,0xf2,0x65,0xc4,0x6d,0x8d,0x44,0xb9,0x08,0x19 };
    const uint8_t CIPHERTEXT[] = { 0x1e,0x7d,0xbf,0x9d,0x72,0xa6,0x3a,0xcd,0xd5,0xaa,0x82,0xa7,0xe3,0xc5,0xeb,0x1a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-37", "[CFB128][MCT][192][ENCRYPT][n37]") {
    const uint8_t KEY[] = { 0x5e,0x13,0x6e,0x23,0xe9,0x37,0x05,0x03,0x40,0xeb,0xaa,0x48,0x47,0xba,0xf1,0x90,0x22,0x7f,0xb9,0x14,0x10,0x95,0x26,0x24 };
    const uint8_t IV[] = { 0x1e,0x7d,0xbf,0x9d,0x72,0xa6,0x3a,0xcd,0xd5,0xaa,0x82,0xa7,0xe3,0xc5,0xeb,0x1a };
    const uint8_t PLAINTEXT[] = { 0x29,0x48,0xcd,0xa6,0xc7,0x84,0xaf,0x8c,0x0b,0x5c,0x80,0xe4,0x75,0xc2,0x0a,0x22 };
    const uint8_t CIPHERTEXT[] = { 0x72,0xc1,0xe1,0x9e,0x9e,0x38,0x01,0x3b,0x7a,0xd9,0xba,0x1f,0xb9,0x4e,0x8f,0xde };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-38", "[CFB128][MCT][192][ENCRYPT][n38]") {
    const uint8_t KEY[] = { 0xed,0x09,0xd3,0x57,0x2d,0x3c,0x4e,0x6a,0x32,0x2a,0x4b,0xd6,0xd9,0x82,0xf0,0xab,0x58,0xa6,0x03,0x0b,0xa9,0xdb,0xa9,0xfa };
    const uint8_t IV[] = { 0x72,0xc1,0xe1,0x9e,0x9e,0x38,0x01,0x3b,0x7a,0xd9,0xba,0x1f,0xb9,0x4e,0x8f,0xde };
    const uint8_t PLAINTEXT[] = { 0x5b,0xe3,0x64,0x41,0x89,0x60,0x06,0x89,0xb3,0x1a,0xbd,0x74,0xc4,0x0b,0x4b,0x69 };
    const uint8_t CIPHERTEXT[] = { 0x85,0x58,0xa7,0xf9,0x2a,0xaa,0x63,0x05,0xbc,0x35,0xec,0xc5,0xb5,0x33,0x65,0x2b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-39", "[CFB128][MCT][192][ENCRYPT][n39]") {
    const uint8_t KEY[] = { 0x85,0x6b,0xc2,0xf3,0x2c,0xe7,0x63,0x38,0xb7,0x72,0xec,0x2f,0xf3,0x28,0x93,0xae,0xe4,0x93,0xef,0xce,0x1c,0xe8,0xcc,0xd1 };
    const uint8_t IV[] = { 0x85,0x58,0xa7,0xf9,0x2a,0xaa,0x63,0x05,0xbc,0x35,0xec,0xc5,0xb5,0x33,0x65,0x2b };
    const uint8_t PLAINTEXT[] = { 0x75,0x58,0xe6,0xc7,0x42,0xc0,0xde,0xda,0x68,0x62,0x11,0xa4,0x01,0xdb,0x2d,0x52 };
    const uint8_t CIPHERTEXT[] = { 0xda,0x8c,0x3f,0x7a,0xaa,0x06,0xb5,0xf6,0x86,0x8c,0x06,0xd4,0xdb,0xe5,0xc8,0x07 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-40", "[CFB128][MCT][192][ENCRYPT][n40]") {
    const uint8_t KEY[] = { 0xcb,0x1f,0xbe,0x30,0x67,0x92,0xbb,0x16,0x6d,0xfe,0xd3,0x55,0x59,0x2e,0x26,0x58,0x62,0x1f,0xe9,0x1a,0xc7,0x0d,0x04,0xd6 };
    const uint8_t IV[] = { 0xda,0x8c,0x3f,0x7a,0xaa,0x06,0xb5,0xf6,0x86,0x8c,0x06,0xd4,0xdb,0xe5,0xc8,0x07 };
    const uint8_t PLAINTEXT[] = { 0x41,0x9e,0x2b,0xc4,0x4c,0xbb,0xf2,0x92,0x4e,0x74,0x7c,0xc3,0x4b,0x75,0xd8,0x2e };
    const uint8_t CIPHERTEXT[] = { 0x5a,0x25,0x4a,0x2c,0x90,0x34,0x39,0x33,0x19,0x88,0x9e,0xaa,0xa6,0xf1,0x96,0x43 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-41", "[CFB128][MCT][192][ENCRYPT][n41]") {
    const uint8_t KEY[] = { 0xab,0x5c,0x6b,0x95,0xae,0xd0,0xeb,0x9c,0x37,0xdb,0x99,0x79,0xc9,0x1a,0x1f,0x6b,0x7b,0x97,0x77,0xb0,0x61,0xfc,0x92,0x95 };
    const uint8_t IV[] = { 0x5a,0x25,0x4a,0x2c,0x90,0x34,0x39,0x33,0x19,0x88,0x9e,0xaa,0xa6,0xf1,0x96,0x43 };
    const uint8_t PLAINTEXT[] = { 0xe8,0x23,0x17,0x26,0x35,0x5f,0xf3,0xc3,0x60,0x43,0xd5,0xa5,0xc9,0x42,0x50,0x8a };
    const uint8_t CIPHERTEXT[] = { 0xb8,0x9a,0xd8,0x8e,0x25,0xb4,0x9d,0x19,0xca,0x49,0x3b,0x5e,0x79,0x2a,0x5f,0x5b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-42", "[CFB128][MCT][192][ENCRYPT][n42]") {
    const uint8_t KEY[] = { 0xc4,0xb3,0x9f,0x6c,0x38,0x4d,0x88,0x89,0x8f,0x41,0x41,0xf7,0xec,0xae,0x82,0x72,0xb1,0xde,0x4c,0xee,0x18,0xd6,0xcd,0xce };
    const uint8_t IV[] = { 0xb8,0x9a,0xd8,0x8e,0x25,0xb4,0x9d,0x19,0xca,0x49,0x3b,0x5e,0x79,0x2a,0x5f,0x5b };
    const uint8_t PLAINTEXT[] = { 0xa8,0x4c,0xbc,0xc8,0xac,0xeb,0xd2,0x14,0x6f,0xef,0xf4,0xf9,0x96,0x9d,0x63,0x15 };
    const uint8_t CIPHERTEXT[] = { 0x12,0x39,0x5f,0x54,0xdf,0x56,0x20,0x45,0x88,0xb7,0xf2,0x68,0xe9,0x6f,0x73,0x20 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-43", "[CFB128][MCT][192][ENCRYPT][n43]") {
    const uint8_t KEY[] = { 0x4e,0x62,0x77,0xb0,0x9f,0x17,0xa7,0x6f,0x9d,0x78,0x1e,0xa3,0x33,0xf8,0xa2,0x37,0x39,0x69,0xbe,0x86,0xf1,0xb9,0xbe,0xee };
    const uint8_t IV[] = { 0x12,0x39,0x5f,0x54,0xdf,0x56,0x20,0x45,0x88,0xb7,0xf2,0x68,0xe9,0x6f,0x73,0x20 };
    const uint8_t PLAINTEXT[] = { 0xbc,0x61,0x51,0x7e,0xb2,0x05,0xcc,0x23,0x8a,0xd1,0xe8,0xdc,0xa7,0x5a,0x2f,0xe6 };
    const uint8_t CIPHERTEXT[] = { 0x91,0x3d,0x0c,0x82,0x80,0x88,0x96,0x36,0xae,0x20,0x5a,0xe1,0x26,0x49,0x4f,0x8e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-44", "[CFB128][MCT][192][ENCRYPT][n44]") {
    const uint8_t KEY[] = { 0x05,0x95,0x4f,0x5d,0x2c,0xb2,0x07,0xca,0x0c,0x45,0x12,0x21,0xb3,0x70,0x34,0x01,0x97,0x49,0xe4,0x67,0xd7,0xf0,0xf1,0x60 };
    const uint8_t IV[] = { 0x91,0x3d,0x0c,0x82,0x80,0x88,0x96,0x36,0xae,0x20,0x5a,0xe1,0x26,0x49,0x4f,0x8e };
    const uint8_t PLAINTEXT[] = { 0x0b,0xf9,0xe3,0xe2,0xf6,0xd4,0x17,0x7d,0x4b,0xf7,0x38,0xed,0xb3,0xa5,0xa0,0xa5 };
    const uint8_t CIPHERTEXT[] = { 0x57,0x1b,0x5e,0x04,0x0c,0x72,0x9e,0x6f,0x65,0xa0,0xa9,0xd4,0x47,0x17,0xf3,0xc9 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-45", "[CFB128][MCT][192][ENCRYPT][n45]") {
    const uint8_t KEY[] = { 0x6b,0x90,0x75,0x85,0x2d,0xd8,0x76,0xa8,0x5b,0x5e,0x4c,0x25,0xbf,0x02,0xaa,0x6e,0xf2,0xe9,0x4d,0xb3,0x90,0xe7,0x02,0xa9 };
    const uint8_t IV[] = { 0x57,0x1b,0x5e,0x04,0x0c,0x72,0x9e,0x6f,0x65,0xa0,0xa9,0xd4,0x47,0x17,0xf3,0xc9 };
    const uint8_t PLAINTEXT[] = { 0xbe,0x9a,0x50,0x24,0x70,0xd9,0xd8,0xbd,0x6e,0x05,0x3a,0xd8,0x01,0x6a,0x71,0x62 };
    const uint8_t CIPHERTEXT[] = { 0x45,0x34,0xce,0x22,0x61,0x73,0x72,0x94,0x12,0xc4,0xe0,0x28,0x02,0x8c,0x4f,0xcd };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-46", "[CFB128][MCT][192][ENCRYPT][n46]") {
    const uint8_t KEY[] = { 0xbf,0x0a,0x26,0xb6,0x74,0xe5,0x15,0x71,0x1e,0x6a,0x82,0x07,0xde,0x71,0xd8,0xfa,0xe0,0x2d,0xad,0x9b,0x92,0x6b,0x4d,0x64 };
    const uint8_t IV[] = { 0x45,0x34,0xce,0x22,0x61,0x73,0x72,0x94,0x12,0xc4,0xe0,0x28,0x02,0x8c,0x4f,0xcd };
    const uint8_t PLAINTEXT[] = { 0xf9,0xd1,0xb2,0x68,0x69,0x71,0x1a,0x1d,0xd4,0x9a,0x53,0x33,0x59,0x3d,0x63,0xd9 };
    const uint8_t CIPHERTEXT[] = { 0xb3,0x12,0x23,0xd2,0x80,0x02,0xce,0x3a,0xea,0xeb,0x47,0xd7,0x0f,0xba,0xbd,0x0b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-47", "[CFB128][MCT][192][ENCRYPT][n47]") {
    const uint8_t KEY[] = { 0x0d,0x56,0xeb,0xef,0x5f,0xea,0x2c,0xf6,0xad,0x78,0xa1,0xd5,0x5e,0x73,0x16,0xc0,0x0a,0xc6,0xea,0x4c,0x9d,0xd1,0xf0,0x6f };
    const uint8_t IV[] = { 0xb3,0x12,0x23,0xd2,0x80,0x02,0xce,0x3a,0xea,0xeb,0x47,0xd7,0x0f,0xba,0xbd,0x0b };
    const uint8_t PLAINTEXT[] = { 0x6a,0x3f,0xb9,0x31,0x34,0xcb,0x49,0xdb,0xb2,0x5c,0xcd,0x59,0x2b,0x0f,0x39,0x87 };
    const uint8_t CIPHERTEXT[] = { 0xf2,0xb9,0xe5,0xbf,0xa8,0xaf,0xb3,0xa8,0x19,0x4a,0x00,0x16,0x7d,0x92,0xc9,0xa7 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-48", "[CFB128][MCT][192][ENCRYPT][n48]") {
    const uint8_t KEY[] = { 0xec,0x8c,0x1b,0x68,0xeb,0x34,0x0c,0x22,0x5f,0xc1,0x44,0x6a,0xf6,0xdc,0xa5,0x68,0x13,0x8c,0xea,0x5a,0xe0,0x43,0x39,0xc8 };
    const uint8_t IV[] = { 0xf2,0xb9,0xe5,0xbf,0xa8,0xaf,0xb3,0xa8,0x19,0x4a,0x00,0x16,0x7d,0x92,0xc9,0xa7 };
    const uint8_t PLAINTEXT[] = { 0xb6,0x16,0x90,0x81,0x01,0x92,0xf7,0xf1,0xe1,0xda,0xf0,0x87,0xb4,0xde,0x20,0xd4 };
    const uint8_t CIPHERTEXT[] = { 0xdb,0xb5,0xba,0x45,0xe4,0x6d,0x4d,0x2b,0x08,0xb0,0x10,0x0d,0xc1,0x7e,0xdb,0xc5 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-49", "[CFB128][MCT][192][ENCRYPT][n49]") {
    const uint8_t KEY[] = { 0x14,0x3b,0x0d,0xbf,0xa9,0x9f,0xbe,0xc1,0x84,0x74,0xfe,0x2f,0x12,0xb1,0xe8,0x43,0x1b,0x3c,0xfa,0x57,0x21,0x3d,0xe2,0x0d };
    const uint8_t IV[] = { 0xdb,0xb5,0xba,0x45,0xe4,0x6d,0x4d,0x2b,0x08,0xb0,0x10,0x0d,0xc1,0x7e,0xdb,0xc5 };
    const uint8_t PLAINTEXT[] = { 0xb6,0xf6,0x23,0x08,0x1d,0x52,0x13,0x9d,0xf8,0xb7,0x16,0xd7,0x42,0xab,0xb2,0xe3 };
    const uint8_t CIPHERTEXT[] = { 0xe2,0x94,0xea,0x4a,0x66,0x3f,0xc4,0x8d,0x69,0xcb,0x41,0xcf,0x5d,0x55,0x17,0x0b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-50", "[CFB128][MCT][192][ENCRYPT][n50]") {
    const uint8_t KEY[] = { 0xa0,0x78,0x1b,0xc8,0x8b,0xc2,0xf0,0xc0,0x66,0xe0,0x14,0x65,0x74,0x8e,0x2c,0xce,0x72,0xf7,0xbb,0x98,0x7c,0x68,0xf5,0x06 };
    const uint8_t IV[] = { 0xe2,0x94,0xea,0x4a,0x66,0x3f,0xc4,0x8d,0x69,0xcb,0x41,0xcf,0x5d,0x55,0x17,0x0b };
    const uint8_t PLAINTEXT[] = { 0x0f,0x00,0xf1,0x16,0xe9,0x11,0x38,0x7b,0xb4,0x43,0x16,0x77,0x22,0x5d,0x4e,0x01 };
    const uint8_t CIPHERTEXT[] = { 0xcf,0xdd,0x8e,0x5b,0xc7,0x5f,0x32,0xbe,0xfc,0x14,0xa0,0x75,0xd2,0x26,0x14,0x9c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-51", "[CFB128][MCT][192][ENCRYPT][n51]") {
    const uint8_t KEY[] = { 0x02,0xe3,0xcb,0xff,0xdc,0xda,0x47,0x99,0xa9,0x3d,0x9a,0x3e,0xb3,0xd1,0x1e,0x70,0x8e,0xe3,0x1b,0xed,0xae,0x4e,0xe1,0x9a };
    const uint8_t IV[] = { 0xcf,0xdd,0x8e,0x5b,0xc7,0x5f,0x32,0xbe,0xfc,0x14,0xa0,0x75,0xd2,0x26,0x14,0x9c };
    const uint8_t PLAINTEXT[] = { 0x33,0xca,0x83,0x82,0x92,0xd7,0x20,0x1e,0xa2,0x9b,0xd0,0x37,0x57,0x18,0xb7,0x59 };
    const uint8_t CIPHERTEXT[] = { 0x64,0x80,0x47,0x46,0xf9,0xb5,0x07,0x9f,0xe2,0x3e,0xbd,0x25,0x2a,0xc7,0x97,0xee };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-52", "[CFB128][MCT][192][ENCRYPT][n52]") {
    const uint8_t KEY[] = { 0xad,0x7a,0xcd,0x67,0x99,0x6c,0xf7,0xda,0xcd,0xbd,0xdd,0x78,0x4a,0x64,0x19,0xef,0x6c,0xdd,0xa6,0xc8,0x84,0x89,0x76,0x74 };
    const uint8_t IV[] = { 0x64,0x80,0x47,0x46,0xf9,0xb5,0x07,0x9f,0xe2,0x3e,0xbd,0x25,0x2a,0xc7,0x97,0xee };
    const uint8_t PLAINTEXT[] = { 0xaf,0x37,0x94,0x59,0x4f,0xc9,0xa6,0x81,0xaf,0x99,0x06,0x98,0x45,0xb6,0xb0,0x43 };
    const uint8_t CIPHERTEXT[] = { 0x93,0x64,0xfc,0xf9,0xd7,0x24,0xc3,0x21,0x22,0xf3,0xa9,0x63,0x9a,0x35,0x86,0x13 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-53", "[CFB128][MCT][192][ENCRYPT][n53]") {
    const uint8_t KEY[] = { 0x52,0x1c,0xa9,0xcd,0xbe,0x67,0x1e,0xd6,0x5e,0xd9,0x21,0x81,0x9d,0x40,0xda,0xce,0x4e,0x2e,0x0f,0xab,0x1e,0xbc,0xf0,0x67 };
    const uint8_t IV[] = { 0x93,0x64,0xfc,0xf9,0xd7,0x24,0xc3,0x21,0x22,0xf3,0xa9,0x63,0x9a,0x35,0x86,0x13 };
    const uint8_t PLAINTEXT[] = { 0x96,0x6f,0x06,0x22,0x88,0x53,0xe2,0x71,0xff,0x66,0x64,0xaa,0x27,0x0b,0xe9,0x0c };
    const uint8_t CIPHERTEXT[] = { 0xe7,0x6a,0xb4,0x2a,0xc7,0x15,0x73,0x1c,0x1f,0xf6,0xfb,0x4c,0x36,0x67,0xbf,0xba };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-54", "[CFB128][MCT][192][ENCRYPT][n54]") {
    const uint8_t KEY[] = { 0x83,0x87,0x96,0x8f,0x30,0xb7,0xcc,0x6e,0xb9,0xb3,0x95,0xab,0x5a,0x55,0xa9,0xd2,0x51,0xd8,0xf4,0xe7,0x28,0xdb,0x4f,0xdd };
    const uint8_t IV[] = { 0xe7,0x6a,0xb4,0x2a,0xc7,0x15,0x73,0x1c,0x1f,0xf6,0xfb,0x4c,0x36,0x67,0xbf,0xba };
    const uint8_t PLAINTEXT[] = { 0xd6,0xdd,0xba,0x6e,0xb9,0xe0,0xd0,0xd9,0xd1,0x9b,0x3f,0x42,0x8e,0xd0,0xd2,0xb8 };
    const uint8_t CIPHERTEXT[] = { 0x95,0xd7,0xc3,0x9d,0xca,0x0c,0x5f,0x8e,0xab,0x95,0x54,0xdd,0x97,0xf0,0x93,0x71 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-55", "[CFB128][MCT][192][ENCRYPT][n55]") {
    const uint8_t KEY[] = { 0x72,0xb2,0x97,0xf1,0x14,0x33,0x29,0x35,0x2c,0x64,0x56,0x36,0x90,0x59,0xf6,0x5c,0xfa,0x4d,0xa0,0x3a,0xbf,0x2b,0xdc,0xac };
    const uint8_t IV[] = { 0x95,0xd7,0xc3,0x9d,0xca,0x0c,0x5f,0x8e,0xab,0x95,0x54,0xdd,0x97,0xf0,0x93,0x71 };
    const uint8_t PLAINTEXT[] = { 0x99,0x73,0xa5,0x2d,0x4d,0xc5,0x1d,0xe2,0xf1,0x35,0x01,0x7e,0x24,0x84,0xe5,0x5b };
    const uint8_t CIPHERTEXT[] = { 0xfc,0x34,0x71,0x0e,0x71,0xe8,0x31,0x29,0x63,0x9e,0x91,0x2c,0xea,0x56,0x82,0x59 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-56", "[CFB128][MCT][192][ENCRYPT][n56]") {
    const uint8_t KEY[] = { 0xc9,0xd3,0xf6,0xaf,0xde,0xe8,0x0b,0x00,0xd0,0x50,0x27,0x38,0xe1,0xb1,0xc7,0x75,0x99,0xd3,0x31,0x16,0x55,0x7d,0x5e,0xf5 };
    const uint8_t IV[] = { 0xfc,0x34,0x71,0x0e,0x71,0xe8,0x31,0x29,0x63,0x9e,0x91,0x2c,0xea,0x56,0x82,0x59 };
    const uint8_t PLAINTEXT[] = { 0x53,0x88,0xb6,0xc5,0xb7,0xac,0xec,0x19,0xbb,0x61,0x61,0x5e,0xca,0xdb,0x22,0x35 };
    const uint8_t CIPHERTEXT[] = { 0x6d,0x29,0xd9,0x15,0x57,0xd3,0x67,0xee,0x6e,0xb5,0x81,0xd1,0x29,0x93,0xde,0xeb };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-57", "[CFB128][MCT][192][ENCRYPT][n57]") {
    const uint8_t KEY[] = { 0xaf,0x28,0x6c,0xe4,0x9f,0x8d,0x40,0xc1,0xbd,0x79,0xfe,0x2d,0xb6,0x62,0xa0,0x9b,0xf7,0x66,0xb0,0xc7,0x7c,0xee,0x80,0x1e };
    const uint8_t IV[] = { 0x6d,0x29,0xd9,0x15,0x57,0xd3,0x67,0xee,0x6e,0xb5,0x81,0xd1,0x29,0x93,0xde,0xeb };
    const uint8_t PLAINTEXT[] = { 0x78,0x40,0x11,0x88,0x69,0xe8,0xf5,0xbd,0x66,0xfb,0x9a,0x4b,0x41,0x65,0x4b,0xc1 };
    const uint8_t CIPHERTEXT[] = { 0xc1,0xcc,0x58,0x5a,0x40,0x7c,0x1f,0xbf,0xf2,0xe2,0xf8,0x7f,0xd8,0xc0,0xab,0x7f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-58", "[CFB128][MCT][192][ENCRYPT][n58]") {
    const uint8_t KEY[] = { 0xbc,0x64,0xec,0x72,0xde,0xb9,0xfd,0x11,0x7c,0xb5,0xa6,0x77,0xf6,0x1e,0xbf,0x24,0x05,0x84,0x48,0xb8,0xa4,0x2e,0x2b,0x61 };
    const uint8_t IV[] = { 0xc1,0xcc,0x58,0x5a,0x40,0x7c,0x1f,0xbf,0xf2,0xe2,0xf8,0x7f,0xd8,0xc0,0xab,0x7f };
    const uint8_t PLAINTEXT[] = { 0x7c,0x8a,0xf5,0x39,0x82,0x3f,0xc6,0xda,0x13,0x4c,0x80,0x96,0x41,0x34,0xbd,0xd0 };
    const uint8_t CIPHERTEXT[] = { 0x0e,0xb5,0x4e,0x8d,0x43,0x6e,0xca,0xd7,0x7b,0x62,0xc3,0x28,0x13,0x3c,0x4c,0xb7 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-59", "[CFB128][MCT][192][ENCRYPT][n59]") {
    const uint8_t KEY[] = { 0x84,0x69,0x20,0xcb,0x9d,0x1f,0x6f,0x0c,0x72,0x00,0xe8,0xfa,0xb5,0x70,0x75,0xf3,0x7e,0xe6,0x8b,0x90,0xb7,0x12,0x67,0xd6 };
    const uint8_t IV[] = { 0x0e,0xb5,0x4e,0x8d,0x43,0x6e,0xca,0xd7,0x7b,0x62,0xc3,0x28,0x13,0x3c,0x4c,0xb7 };
    const uint8_t PLAINTEXT[] = { 0x6e,0xac,0x5b,0xcb,0x85,0xa5,0x3b,0xfd,0x38,0x0d,0xcc,0xb9,0x43,0xa6,0x92,0x1d };
    const uint8_t CIPHERTEXT[] = { 0xa6,0xdb,0xeb,0xbb,0xa1,0x14,0xf3,0xe6,0x81,0x0f,0x2f,0x86,0x33,0x14,0x1c,0xd0 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-60", "[CFB128][MCT][192][ENCRYPT][n60]") {
    const uint8_t KEY[] = { 0xaa,0xfe,0xf3,0x38,0x25,0xb0,0x1c,0x30,0xd4,0xdb,0x03,0x41,0x14,0x64,0x86,0x15,0xff,0xe9,0xa4,0x16,0x84,0x06,0x7b,0x06 };
    const uint8_t IV[] = { 0xa6,0xdb,0xeb,0xbb,0xa1,0x14,0xf3,0xe6,0x81,0x0f,0x2f,0x86,0x33,0x14,0x1c,0xd0 };
    const uint8_t PLAINTEXT[] = { 0xdb,0x14,0x7e,0x1f,0xdd,0xca,0x87,0xf0,0x2e,0x97,0xd3,0xf3,0xb8,0xaf,0x73,0x3c };
    const uint8_t CIPHERTEXT[] = { 0x53,0x9b,0x27,0x03,0x9f,0x36,0x93,0xef,0x81,0xed,0x2b,0xbe,0xa4,0xae,0x62,0x42 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-61", "[CFB128][MCT][192][ENCRYPT][n61]") {
    const uint8_t KEY[] = { 0x1d,0x83,0x51,0x0a,0x29,0xbf,0xb4,0xdf,0x87,0x40,0x24,0x42,0x8b,0x52,0x15,0xfa,0x7e,0x04,0x8f,0xa8,0x20,0xa8,0x19,0x44 };
    const uint8_t IV[] = { 0x53,0x9b,0x27,0x03,0x9f,0x36,0x93,0xef,0x81,0xed,0x2b,0xbe,0xa4,0xae,0x62,0x42 };
    const uint8_t PLAINTEXT[] = { 0xe7,0xfe,0xf1,0x9a,0xb3,0x47,0x3a,0x23,0xb7,0x7d,0xa2,0x32,0x0c,0x0f,0xa8,0xef };
    const uint8_t CIPHERTEXT[] = { 0xf2,0x1a,0xc6,0x2d,0x87,0x58,0xdf,0xd2,0xf3,0x1e,0xf8,0x04,0x5f,0x04,0xf8,0x4a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-62", "[CFB128][MCT][192][ENCRYPT][n62]") {
    const uint8_t KEY[] = { 0xc0,0x26,0xb4,0x85,0xb9,0xdb,0x94,0x90,0x75,0x5a,0xe2,0x6f,0x0c,0x0a,0xca,0x28,0x8d,0x1a,0x77,0xac,0x7f,0xac,0xe1,0x0e };
    const uint8_t IV[] = { 0xf2,0x1a,0xc6,0x2d,0x87,0x58,0xdf,0xd2,0xf3,0x1e,0xf8,0x04,0x5f,0x04,0xf8,0x4a };
    const uint8_t PLAINTEXT[] = { 0x95,0xd9,0x3a,0x5e,0x6c,0x7f,0x9c,0x42,0xdd,0xa5,0xe5,0x8f,0x90,0x64,0x20,0x4f };
    const uint8_t CIPHERTEXT[] = { 0xc4,0x27,0x00,0x50,0xeb,0x0e,0xd3,0x41,0xe1,0x10,0x89,0x04,0xa7,0x51,0x5f,0xd7 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-63", "[CFB128][MCT][192][ENCRYPT][n63]") {
    const uint8_t KEY[] = { 0x9c,0x8f,0xc2,0x7d,0x86,0x17,0xfd,0x32,0xb1,0x7d,0xe2,0x3f,0xe7,0x04,0x19,0x69,0x6c,0x0a,0xfe,0xa8,0xd8,0xfd,0xbe,0xd9 };
    const uint8_t IV[] = { 0xc4,0x27,0x00,0x50,0xeb,0x0e,0xd3,0x41,0xe1,0x10,0x89,0x04,0xa7,0x51,0x5f,0xd7 };
    const uint8_t PLAINTEXT[] = { 0x0a,0x9d,0x10,0xec,0xad,0x3c,0xb6,0xe3,0x5c,0xa9,0x76,0xf8,0x3f,0xcc,0x69,0xa2 };
    const uint8_t CIPHERTEXT[] = { 0xd7,0x8b,0x4e,0x76,0xd0,0xd9,0xcd,0xfa,0xc6,0x1b,0x00,0xe1,0x17,0xeb,0x72,0x99 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-64", "[CFB128][MCT][192][ENCRYPT][n64]") {
    const uint8_t KEY[] = { 0x7b,0x2a,0xae,0x24,0xff,0xbd,0x95,0xbe,0x66,0xf6,0xac,0x49,0x37,0xdd,0xd4,0x93,0xaa,0x11,0xfe,0x49,0xcf,0x16,0xcc,0x40 };
    const uint8_t IV[] = { 0xd7,0x8b,0x4e,0x76,0xd0,0xd9,0xcd,0xfa,0xc6,0x1b,0x00,0xe1,0x17,0xeb,0x72,0x99 };
    const uint8_t PLAINTEXT[] = { 0x35,0xb8,0xfe,0xd0,0x5f,0xea,0x92,0xda,0xe7,0xa5,0x6c,0x59,0x79,0xaa,0x68,0x8c };
    const uint8_t CIPHERTEXT[] = { 0xfb,0x0c,0x90,0x2e,0xc9,0xac,0x45,0xef,0x54,0x1d,0x84,0x3c,0x2b,0x69,0x42,0xfd };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-65", "[CFB128][MCT][192][ENCRYPT][n65]") {
    const uint8_t KEY[] = { 0x10,0xb2,0xad,0xbf,0xdd,0x9b,0x55,0xb5,0x9d,0xfa,0x3c,0x67,0xfe,0x71,0x91,0x7c,0xfe,0x0c,0x7a,0x75,0xe4,0x7f,0x8e,0xbd };
    const uint8_t IV[] = { 0xfb,0x0c,0x90,0x2e,0xc9,0xac,0x45,0xef,0x54,0x1d,0x84,0x3c,0x2b,0x69,0x42,0xfd };
    const uint8_t PLAINTEXT[] = { 0xe2,0x0e,0xb4,0xa7,0xe1,0xc8,0xa3,0x1f,0x6b,0x98,0x03,0x9b,0x22,0x26,0xc0,0x0b };
    const uint8_t CIPHERTEXT[] = { 0x28,0x57,0x87,0xf2,0x09,0xe0,0x45,0x7e,0x09,0xa5,0x73,0xe1,0xe9,0x5b,0x19,0x5f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-66", "[CFB128][MCT][192][ENCRYPT][n66]") {
    const uint8_t KEY[] = { 0x10,0x4e,0x88,0x49,0x06,0x9e,0x9e,0x22,0xb5,0xad,0xbb,0x95,0xf7,0x91,0xd4,0x02,0xf7,0xa9,0x09,0x94,0x0d,0x24,0x97,0xe2 };
    const uint8_t IV[] = { 0x28,0x57,0x87,0xf2,0x09,0xe0,0x45,0x7e,0x09,0xa5,0x73,0xe1,0xe9,0x5b,0x19,0x5f };
    const uint8_t PLAINTEXT[] = { 0xc5,0x14,0x76,0x5d,0x15,0xeb,0x06,0x94,0x00,0xfc,0x25,0xf6,0xdb,0x05,0xcb,0x97 };
    const uint8_t CIPHERTEXT[] = { 0x92,0x49,0x5f,0x9d,0xb1,0x6c,0xef,0xcd,0xf0,0x79,0xd6,0x1b,0x95,0x3c,0x59,0x2e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-67", "[CFB128][MCT][192][ENCRYPT][n67]") {
    const uint8_t KEY[] = { 0x70,0x8f,0x40,0xfa,0x43,0x37,0x5e,0x22,0x27,0xe4,0xe4,0x08,0x46,0xfd,0x3b,0xcf,0x07,0xd0,0xdf,0x8f,0x98,0x18,0xce,0xcc };
    const uint8_t IV[] = { 0x92,0x49,0x5f,0x9d,0xb1,0x6c,0xef,0xcd,0xf0,0x79,0xd6,0x1b,0x95,0x3c,0x59,0x2e };
    const uint8_t PLAINTEXT[] = { 0x08,0x03,0x9f,0xcd,0x10,0xcd,0x0d,0xb7,0x60,0xc1,0xc8,0xb3,0x45,0xa9,0xc0,0x00 };
    const uint8_t CIPHERTEXT[] = { 0x2c,0x40,0xa7,0x98,0x6e,0x00,0x33,0xfc,0x98,0x8c,0xf1,0x88,0xf8,0x5c,0xe0,0x76 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-68", "[CFB128][MCT][192][ENCRYPT][n68]") {
    const uint8_t KEY[] = { 0xdb,0x56,0xc6,0xe4,0xb8,0x0b,0x2f,0x1d,0x0b,0xa4,0x43,0x90,0x28,0xfd,0x08,0x33,0x9f,0x5c,0x2e,0x07,0x60,0x44,0x2e,0xba };
    const uint8_t IV[] = { 0x2c,0x40,0xa7,0x98,0x6e,0x00,0x33,0xfc,0x98,0x8c,0xf1,0x88,0xf8,0x5c,0xe0,0x76 };
    const uint8_t PLAINTEXT[] = { 0x20,0x67,0xde,0x3a,0x7f,0x38,0xfc,0x3d,0xab,0xd9,0x86,0x1e,0xfb,0x3c,0x71,0x3f };
    const uint8_t CIPHERTEXT[] = { 0xc6,0x81,0xe5,0x24,0x97,0x64,0x21,0x58,0xc7,0x1f,0xcf,0x64,0xe1,0xb0,0x8d,0xc7 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-69", "[CFB128][MCT][192][ENCRYPT][n69]") {
    const uint8_t KEY[] = { 0xa7,0xef,0x6e,0x22,0x62,0x7b,0xeb,0x3d,0xcd,0x25,0xa6,0xb4,0xbf,0x99,0x29,0x6b,0x58,0x43,0xe1,0x63,0x81,0xf4,0xa3,0x7d };
    const uint8_t IV[] = { 0xc6,0x81,0xe5,0x24,0x97,0x64,0x21,0x58,0xc7,0x1f,0xcf,0x64,0xe1,0xb0,0x8d,0xc7 };
    const uint8_t PLAINTEXT[] = { 0x63,0xc8,0xae,0x5f,0x25,0x42,0x86,0xd4,0x7c,0xb9,0xa8,0xc6,0xda,0x70,0xc4,0x20 };
    const uint8_t CIPHERTEXT[] = { 0xfa,0x22,0x50,0x36,0xba,0x28,0xd2,0x84,0x6a,0xf0,0xb2,0x1e,0xe0,0x93,0x29,0x74 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-70", "[CFB128][MCT][192][ENCRYPT][n70]") {
    const uint8_t KEY[] = { 0x20,0x46,0x91,0x9e,0xd6,0x37,0x04,0xb4,0x37,0x07,0xf6,0x82,0x05,0xb1,0xfb,0xef,0x32,0xb3,0x53,0x7d,0x61,0x67,0x8a,0x09 };
    const uint8_t IV[] = { 0xfa,0x22,0x50,0x36,0xba,0x28,0xd2,0x84,0x6a,0xf0,0xb2,0x1e,0xe0,0x93,0x29,0x74 };
    const uint8_t PLAINTEXT[] = { 0x4b,0x4b,0xa1,0x9f,0x67,0x1a,0xe0,0x41,0x87,0xa9,0xff,0xbc,0xb4,0x4c,0xef,0x89 };
    const uint8_t CIPHERTEXT[] = { 0xa2,0xb2,0x2d,0x09,0x9d,0x52,0xa9,0x3d,0xcc,0xe5,0x82,0x1a,0x5e,0x82,0x9d,0xd9 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-71", "[CFB128][MCT][192][ENCRYPT][n71]") {
    const uint8_t KEY[] = { 0xd6,0xeb,0x65,0x24,0xa4,0xf6,0xfe,0x36,0x95,0xb5,0xdb,0x8b,0x98,0xe3,0x52,0xd2,0xfe,0x56,0xd1,0x67,0x3f,0xe5,0x17,0xd0 };
    const uint8_t IV[] = { 0xa2,0xb2,0x2d,0x09,0x9d,0x52,0xa9,0x3d,0xcc,0xe5,0x82,0x1a,0x5e,0x82,0x9d,0xd9 };
    const uint8_t PLAINTEXT[] = { 0x9a,0x48,0x8d,0x37,0xa8,0x41,0x97,0xec,0xf6,0xad,0xf4,0xba,0x72,0xc1,0xfa,0x82 };
    const uint8_t CIPHERTEXT[] = { 0x8a,0x2e,0x33,0x96,0xd0,0xb8,0x6d,0xa4,0xbf,0x00,0xb8,0x54,0xde,0x29,0x87,0x53 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-72", "[CFB128][MCT][192][ENCRYPT][n72]") {
    const uint8_t KEY[] = { 0x18,0xbd,0x0b,0x78,0x88,0xb4,0xe4,0x18,0x1f,0x9b,0xe8,0x1d,0x48,0x5b,0x3f,0x76,0x41,0x56,0x69,0x33,0xe1,0xcc,0x90,0x83 };
    const uint8_t IV[] = { 0x8a,0x2e,0x33,0x96,0xd0,0xb8,0x6d,0xa4,0xbf,0x00,0xb8,0x54,0xde,0x29,0x87,0x53 };
    const uint8_t PLAINTEXT[] = { 0xbd,0x38,0x21,0x35,0x00,0xf0,0xd6,0xbc,0xce,0x56,0x6e,0x5c,0x2c,0x42,0x1a,0x2e };
    const uint8_t CIPHERTEXT[] = { 0x7b,0x66,0xbf,0x70,0x8c,0xed,0xe7,0x8f,0x90,0xe6,0x84,0x31,0x78,0x2e,0x5c,0x69 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-73", "[CFB128][MCT][192][ENCRYPT][n73]") {
    const uint8_t KEY[] = { 0x36,0x55,0xa8,0xb3,0xc8,0xc8,0x76,0xda,0x64,0xfd,0x57,0x6d,0xc4,0xb6,0xd8,0xf9,0xd1,0xb0,0xed,0x02,0x99,0xe2,0xcc,0xea };
    const uint8_t IV[] = { 0x7b,0x66,0xbf,0x70,0x8c,0xed,0xe7,0x8f,0x90,0xe6,0x84,0x31,0x78,0x2e,0x5c,0x69 };
    const uint8_t PLAINTEXT[] = { 0x3e,0x43,0xc1,0xdd,0xf7,0x39,0x89,0x31,0x2e,0xe8,0xa3,0xcb,0x40,0x7c,0x92,0xc2 };
    const uint8_t CIPHERTEXT[] = { 0x3c,0x03,0x9e,0x29,0x62,0x3c,0x46,0xbb,0x69,0xcb,0x95,0x18,0xbd,0xe0,0x9f,0x4f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-74", "[CFB128][MCT][192][ENCRYPT][n74]") {
    const uint8_t KEY[] = { 0x15,0xc2,0xe1,0x5d,0xed,0xd6,0xe9,0x62,0x58,0xfe,0xc9,0x44,0xa6,0x8a,0x9e,0x42,0xb8,0x7b,0x78,0x1a,0x24,0x02,0x53,0xa5 };
    const uint8_t IV[] = { 0x3c,0x03,0x9e,0x29,0x62,0x3c,0x46,0xbb,0x69,0xcb,0x95,0x18,0xbd,0xe0,0x9f,0x4f };
    const uint8_t PLAINTEXT[] = { 0xb5,0x15,0x52,0xaa,0xc4,0xeb,0x10,0x3e,0x23,0x97,0x49,0xee,0x25,0x1e,0x9f,0xb8 };
    const uint8_t CIPHERTEXT[] = { 0xd6,0xb7,0xda,0x35,0xd2,0xdb,0x8e,0xde,0x8f,0x4a,0xc2,0xe5,0x02,0xd0,0xd8,0x29 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-75", "[CFB128][MCT][192][ENCRYPT][n75]") {
    const uint8_t KEY[] = { 0x8a,0x70,0x3b,0x23,0x4e,0x14,0x17,0xe3,0x8e,0x49,0x13,0x71,0x74,0x51,0x10,0x9c,0x37,0x31,0xba,0xff,0x26,0xd2,0x8b,0x8c };
    const uint8_t IV[] = { 0xd6,0xb7,0xda,0x35,0xd2,0xdb,0x8e,0xde,0x8f,0x4a,0xc2,0xe5,0x02,0xd0,0xd8,0x29 };
    const uint8_t PLAINTEXT[] = { 0x02,0xf5,0x98,0x7e,0xc9,0xbe,0x28,0x0c,0x9f,0xb2,0xda,0x7e,0xa3,0xc2,0xfe,0x81 };
    const uint8_t CIPHERTEXT[] = { 0x15,0x03,0x77,0x95,0xbd,0xaf,0xbd,0xea,0xab,0x50,0xa1,0x2f,0xa1,0x90,0x52,0x85 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-76", "[CFB128][MCT][192][ENCRYPT][n76]") {
    const uint8_t KEY[] = { 0xb7,0xcf,0x74,0x73,0xef,0xed,0x5d,0x2d,0x9b,0x4a,0x64,0xe4,0xc9,0xfe,0xad,0x76,0x9c,0x61,0x1b,0xd0,0x87,0x42,0xd9,0x09 };
    const uint8_t IV[] = { 0x15,0x03,0x77,0x95,0xbd,0xaf,0xbd,0xea,0xab,0x50,0xa1,0x2f,0xa1,0x90,0x52,0x85 };
    const uint8_t PLAINTEXT[] = { 0x52,0x20,0x50,0xc1,0x5e,0x82,0x1f,0x3c,0x3d,0xbf,0x4f,0x50,0xa1,0xf9,0x4a,0xce };
    const uint8_t CIPHERTEXT[] = { 0x76,0x95,0x2f,0x7c,0x01,0x12,0x83,0xe3,0x32,0xf1,0x90,0x0a,0x3a,0x6c,0x54,0x94 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-77", "[CFB128][MCT][192][ENCRYPT][n77]") {
    const uint8_t KEY[] = { 0x83,0xd4,0xd4,0xeb,0x59,0x54,0x7a,0x78,0xed,0xdf,0x4b,0x98,0xc8,0xec,0x2e,0x95,0xae,0x90,0x8b,0xda,0xbd,0x2e,0x8d,0x9d };
    const uint8_t IV[] = { 0x76,0x95,0x2f,0x7c,0x01,0x12,0x83,0xe3,0x32,0xf1,0x90,0x0a,0x3a,0x6c,0x54,0x94 };
    const uint8_t PLAINTEXT[] = { 0x80,0x33,0x10,0xfe,0x52,0xde,0x7f,0xe1,0x34,0x1b,0xa0,0x98,0xb6,0xb9,0x27,0x55 };
    const uint8_t CIPHERTEXT[] = { 0x9d,0x60,0xc8,0x88,0x6f,0xd3,0x2f,0xbc,0x12,0x62,0x45,0x56,0x40,0x8a,0x4d,0x34 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-78", "[CFB128][MCT][192][ENCRYPT][n78]") {
    const uint8_t KEY[] = { 0x49,0xaa,0x0c,0xbe,0x7f,0x49,0x03,0x8d,0x70,0xbf,0x83,0x10,0xa7,0x3f,0x01,0x29,0xbc,0xf2,0xce,0x8c,0xfd,0xa4,0xc0,0xa9 };
    const uint8_t IV[] = { 0x9d,0x60,0xc8,0x88,0x6f,0xd3,0x2f,0xbc,0x12,0x62,0x45,0x56,0x40,0x8a,0x4d,0x34 };
    const uint8_t PLAINTEXT[] = { 0x84,0x70,0x23,0x61,0x53,0xde,0x6b,0x62,0xca,0x7e,0xd8,0x55,0x26,0x1d,0x79,0xf5 };
    const uint8_t CIPHERTEXT[] = { 0xd4,0x44,0x54,0xd7,0xcc,0xc8,0x7b,0x55,0x64,0x2e,0xf8,0x12,0xb7,0x9b,0x5c,0x48 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-79", "[CFB128][MCT][192][ENCRYPT][n79]") {
    const uint8_t KEY[] = { 0x4f,0xed,0xbe,0xfb,0xc5,0x8d,0x73,0x58,0xa4,0xfb,0xd7,0xc7,0x6b,0xf7,0x7a,0x7c,0xd8,0xdc,0x36,0x9e,0x4a,0x3f,0x9c,0xe1 };
    const uint8_t IV[] = { 0xd4,0x44,0x54,0xd7,0xcc,0xc8,0x7b,0x55,0x64,0x2e,0xf8,0x12,0xb7,0x9b,0x5c,0x48 };
    const uint8_t PLAINTEXT[] = { 0x65,0x49,0xb5,0x37,0xe8,0xc0,0x2f,0xc7,0x06,0x47,0xb2,0x45,0xba,0xc4,0x70,0xd5 };
    const uint8_t CIPHERTEXT[] = { 0xf3,0x84,0x8b,0x3a,0x49,0x32,0x85,0xae,0x8f,0x42,0x74,0xa6,0x34,0xb8,0x78,0x1f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-80", "[CFB128][MCT][192][ENCRYPT][n80]") {
    const uint8_t KEY[] = { 0x1e,0xbf,0xd0,0x5e,0x77,0xc1,0x25,0xfd,0x57,0x7f,0x5c,0xfd,0x22,0xc5,0xff,0xd2,0x57,0x9e,0x42,0x38,0x7e,0x87,0xe4,0xfe };
    const uint8_t IV[] = { 0xf3,0x84,0x8b,0x3a,0x49,0x32,0x85,0xae,0x8f,0x42,0x74,0xa6,0x34,0xb8,0x78,0x1f };
    const uint8_t PLAINTEXT[] = { 0x48,0x0f,0xa5,0xa3,0x03,0x60,0x5d,0xf4,0x51,0x52,0x6e,0xa5,0xb2,0x4c,0x56,0xa5 };
    const uint8_t CIPHERTEXT[] = { 0x18,0xe2,0xa4,0xce,0x49,0xdf,0x35,0x5e,0x7d,0x06,0x6f,0x86,0x76,0x39,0x48,0x10 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-81", "[CFB128][MCT][192][ENCRYPT][n81]") {
    const uint8_t KEY[] = { 0xc3,0x07,0x60,0xd9,0x5f,0x5a,0xbf,0x69,0x4f,0x9d,0xf8,0x33,0x6b,0x1a,0xca,0x8c,0x2a,0x98,0x2d,0xbe,0x08,0xbe,0xac,0xee };
    const uint8_t IV[] = { 0x18,0xe2,0xa4,0xce,0x49,0xdf,0x35,0x5e,0x7d,0x06,0x6f,0x86,0x76,0x39,0x48,0x10 };
    const uint8_t PLAINTEXT[] = { 0xdf,0x4d,0xa9,0x06,0x5a,0xe3,0xd2,0x7f,0xdd,0xb8,0xb0,0x87,0x28,0x9b,0x9a,0x94 };
    const uint8_t CIPHERTEXT[] = { 0x64,0xd7,0xdd,0x5b,0x99,0xa6,0xd9,0x2d,0x4d,0xfa,0x38,0xd4,0xf6,0x2d,0x23,0x05 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-82", "[CFB128][MCT][192][ENCRYPT][n82]") {
    const uint8_t KEY[] = { 0xd2,0x70,0x65,0x88,0x9a,0x01,0x62,0xc4,0x2b,0x4a,0x25,0x68,0xf2,0xbc,0x13,0xa1,0x67,0x62,0x15,0x6a,0xfe,0x93,0x8f,0xeb };
    const uint8_t IV[] = { 0x64,0xd7,0xdd,0x5b,0x99,0xa6,0xd9,0x2d,0x4d,0xfa,0x38,0xd4,0xf6,0x2d,0x23,0x05 };
    const uint8_t PLAINTEXT[] = { 0x6d,0xd8,0x86,0xef,0x78,0x7a,0x2b,0x87,0x11,0x77,0x05,0x51,0xc5,0x5b,0xdd,0xad };
    const uint8_t CIPHERTEXT[] = { 0x45,0x1e,0x4c,0xa2,0x6c,0x75,0xd5,0x59,0x70,0x36,0xf9,0x55,0x20,0x7e,0x6a,0xe7 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-83", "[CFB128][MCT][192][ENCRYPT][n83]") {
    const uint8_t KEY[] = { 0x54,0x96,0x44,0xd2,0x1e,0x5c,0x83,0x99,0x6e,0x54,0x69,0xca,0x9e,0xc9,0xc6,0xf8,0x17,0x54,0xec,0x3f,0xde,0xed,0xe5,0x0c };
    const uint8_t IV[] = { 0x45,0x1e,0x4c,0xa2,0x6c,0x75,0xd5,0x59,0x70,0x36,0xf9,0x55,0x20,0x7e,0x6a,0xe7 };
    const uint8_t PLAINTEXT[] = { 0x9d,0xb8,0xe1,0xb5,0xab,0xdb,0x94,0xfe,0x86,0xe6,0x21,0x5a,0x84,0x5d,0xe1,0x5d };
    const uint8_t CIPHERTEXT[] = { 0xfe,0xdc,0x45,0x40,0x4a,0xc6,0x0d,0x1c,0xe7,0xa9,0x80,0x14,0x5b,0x65,0x35,0xa1 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-84", "[CFB128][MCT][192][ENCRYPT][n84]") {
    const uint8_t KEY[] = { 0x89,0x69,0x45,0x80,0xc9,0x2e,0xb4,0x83,0x90,0x88,0x2c,0x8a,0xd4,0x0f,0xcb,0xe4,0xf0,0xfd,0x6c,0x2b,0x85,0x88,0xd0,0xad };
    const uint8_t IV[] = { 0xfe,0xdc,0x45,0x40,0x4a,0xc6,0x0d,0x1c,0xe7,0xa9,0x80,0x14,0x5b,0x65,0x35,0xa1 };
    const uint8_t PLAINTEXT[] = { 0xd6,0xfb,0xe0,0xbb,0x57,0x61,0xff,0x18,0xdd,0xff,0x01,0x52,0xd7,0x72,0x37,0x1a };
    const uint8_t CIPHERTEXT[] = { 0x23,0xd5,0xa7,0x3d,0xb0,0x45,0xf5,0xaa,0xf5,0xa7,0xa5,0x1e,0xe4,0xa5,0xe2,0xa0 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-85", "[CFB128][MCT][192][ENCRYPT][n85]") {
    const uint8_t KEY[] = { 0xe5,0x87,0x93,0xe6,0xca,0xc4,0x92,0xc3,0xb3,0x5d,0x8b,0xb7,0x64,0x4a,0x3e,0x4e,0x05,0x5a,0xc9,0x35,0x61,0x2d,0x32,0x0d };
    const uint8_t IV[] = { 0x23,0xd5,0xa7,0x3d,0xb0,0x45,0xf5,0xaa,0xf5,0xa7,0xa5,0x1e,0xe4,0xa5,0xe2,0xa0 };
    const uint8_t PLAINTEXT[] = { 0x5f,0xcd,0x90,0x71,0x33,0x34,0xcb,0xdf,0x6c,0xee,0xd6,0x66,0x03,0xea,0x26,0x40 };
    const uint8_t CIPHERTEXT[] = { 0xb0,0x6c,0x50,0x5a,0x85,0xc3,0xd8,0x29,0xa5,0x74,0x40,0x0c,0x6c,0x8b,0xe3,0x9f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-86", "[CFB128][MCT][192][ENCRYPT][n86]") {
    const uint8_t KEY[] = { 0x09,0xff,0x5d,0x52,0xc5,0x01,0x56,0x15,0x03,0x31,0xdb,0xed,0xe1,0x89,0xe6,0x67,0xa0,0x2e,0x89,0x39,0x0d,0xa6,0xd1,0x92 };
    const uint8_t IV[] = { 0xb0,0x6c,0x50,0x5a,0x85,0xc3,0xd8,0x29,0xa5,0x74,0x40,0x0c,0x6c,0x8b,0xe3,0x9f };
    const uint8_t PLAINTEXT[] = { 0xfc,0xa2,0x84,0x5a,0x66,0x10,0x6f,0x52,0xec,0x78,0xce,0xb4,0x0f,0xc5,0xc4,0xd6 };
    const uint8_t CIPHERTEXT[] = { 0x8f,0x39,0xaf,0x20,0x65,0x69,0xf4,0x90,0x0a,0x2e,0x21,0xc6,0x25,0xd1,0xbe,0x6b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-87", "[CFB128][MCT][192][ENCRYPT][n87]") {
    const uint8_t KEY[] = { 0x99,0x8b,0xf9,0x3f,0x91,0x46,0xfa,0x9d,0x8c,0x08,0x74,0xcd,0x84,0xe0,0x12,0xf7,0xaa,0x00,0xa8,0xff,0x28,0x77,0x6f,0xf9 };
    const uint8_t IV[] = { 0x8f,0x39,0xaf,0x20,0x65,0x69,0xf4,0x90,0x0a,0x2e,0x21,0xc6,0x25,0xd1,0xbe,0x6b };
    const uint8_t PLAINTEXT[] = { 0x1c,0x73,0x59,0xdf,0xc4,0x32,0x64,0x2b,0x90,0x74,0xa4,0x6d,0x54,0x47,0xac,0x88 };
    const uint8_t CIPHERTEXT[] = { 0xc8,0x93,0xab,0x7e,0x64,0x64,0x59,0x4d,0x87,0xdf,0xb4,0x8e,0x61,0x00,0x7e,0x05 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-88", "[CFB128][MCT][192][ENCRYPT][n88]") {
    const uint8_t KEY[] = { 0x2a,0x88,0xf0,0x5d,0x5a,0x95,0x41,0x48,0x44,0x9b,0xdf,0xb3,0xe0,0x84,0x4b,0xba,0x2d,0xdf,0x1c,0x71,0x49,0x77,0x11,0xfc };
    const uint8_t IV[] = { 0xc8,0x93,0xab,0x7e,0x64,0x64,0x59,0x4d,0x87,0xdf,0xb4,0x8e,0x61,0x00,0x7e,0x05 };
    const uint8_t PLAINTEXT[] = { 0xc1,0x4d,0x7f,0x3e,0x2d,0x2d,0x2a,0xc0,0xb3,0x03,0x09,0x62,0xcb,0xd3,0xbb,0xd5 };
    const uint8_t CIPHERTEXT[] = { 0x28,0xe1,0x39,0x80,0xff,0x51,0x92,0x98,0xc6,0x11,0x7f,0xad,0xd1,0x09,0x96,0xb2 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-89", "[CFB128][MCT][192][ENCRYPT][n89]") {
    const uint8_t KEY[] = { 0x93,0xb3,0x94,0x7b,0x0f,0x05,0x22,0x99,0x6c,0x7a,0xe6,0x33,0x1f,0xd5,0xd9,0x22,0xeb,0xce,0x63,0xdc,0x98,0x7e,0x87,0x4e };
    const uint8_t IV[] = { 0x28,0xe1,0x39,0x80,0xff,0x51,0x92,0x98,0xc6,0x11,0x7f,0xad,0xd1,0x09,0x96,0xb2 };
    const uint8_t PLAINTEXT[] = { 0x68,0x47,0xbc,0xfa,0xb7,0x13,0xb8,0xa8,0xb9,0x3b,0x64,0x26,0x55,0x90,0x63,0xd1 };
    const uint8_t CIPHERTEXT[] = { 0x93,0x3e,0x3d,0x6a,0x7a,0xf5,0xbc,0x64,0x74,0xae,0xbb,0xf1,0x0b,0xa7,0x0b,0xc0 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-90", "[CFB128][MCT][192][ENCRYPT][n90]") {
    const uint8_t KEY[] = { 0xc4,0x53,0x97,0x9c,0x60,0x9b,0x9c,0xfd,0xff,0x44,0xdb,0x59,0x65,0x20,0x65,0x46,0x9f,0x60,0xd8,0x2d,0x93,0xd9,0x8c,0x8e };
    const uint8_t IV[] = { 0x93,0x3e,0x3d,0x6a,0x7a,0xf5,0xbc,0x64,0x74,0xae,0xbb,0xf1,0x0b,0xa7,0x0b,0xc0 };
    const uint8_t PLAINTEXT[] = { 0x28,0x71,0x08,0x80,0xa2,0xc4,0xb2,0xb3,0x57,0xe0,0x03,0xe7,0x6f,0x9e,0xbe,0x64 };
    const uint8_t CIPHERTEXT[] = { 0xcc,0xb4,0xbf,0x65,0x10,0xa6,0x13,0x5b,0x35,0x4a,0x17,0x47,0x86,0x71,0x81,0x40 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-91", "[CFB128][MCT][192][ENCRYPT][n91]") {
    const uint8_t KEY[] = { 0x4f,0xf3,0x63,0x51,0xcc,0xbd,0x2b,0x8f,0x33,0xf0,0x64,0x3c,0x75,0x86,0x76,0x1d,0xaa,0x2a,0xcf,0x6a,0x15,0xa8,0x0d,0xce };
    const uint8_t IV[] = { 0xcc,0xb4,0xbf,0x65,0x10,0xa6,0x13,0x5b,0x35,0x4a,0x17,0x47,0x86,0x71,0x81,0x40 };
    const uint8_t PLAINTEXT[] = { 0x48,0x92,0x1f,0x2f,0x94,0xad,0xd7,0x73,0x8b,0xa0,0xf4,0xcd,0xac,0x26,0xb7,0x72 };
    const uint8_t CIPHERTEXT[] = { 0x76,0xf9,0xe3,0x77,0x97,0x52,0xf6,0xa5,0x76,0xfc,0x37,0x17,0xda,0x98,0xd2,0x5c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-92", "[CFB128][MCT][192][ENCRYPT][n92]") {
    const uint8_t KEY[] = { 0xce,0x60,0xfc,0x4f,0xdd,0xb7,0x61,0xfc,0x45,0x09,0x87,0x4b,0xe2,0xd4,0x80,0xb8,0xdc,0xd6,0xf8,0x7d,0xcf,0x30,0xdf,0x92 };
    const uint8_t IV[] = { 0x76,0xf9,0xe3,0x77,0x97,0x52,0xf6,0xa5,0x76,0xfc,0x37,0x17,0xda,0x98,0xd2,0x5c };
    const uint8_t PLAINTEXT[] = { 0x94,0x2b,0xfc,0x51,0x7e,0x22,0x16,0x94,0x81,0x93,0x9f,0x1e,0x11,0x0a,0x4a,0x73 };
    const uint8_t CIPHERTEXT[] = { 0x94,0x88,0x5a,0x11,0xf7,0x43,0xe2,0x19,0x42,0x2f,0x2a,0x8b,0xcf,0x9d,0xb7,0xb2 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-93", "[CFB128][MCT][192][ENCRYPT][n93]") {
    const uint8_t KEY[] = { 0xcd,0x51,0xec,0x2d,0x0c,0x72,0xeb,0xa7,0xd1,0x81,0xdd,0x5a,0x15,0x97,0x62,0xa1,0x9e,0xf9,0xd2,0xf6,0x00,0xad,0x68,0x20 };
    const uint8_t IV[] = { 0x94,0x88,0x5a,0x11,0xf7,0x43,0xe2,0x19,0x42,0x2f,0x2a,0x8b,0xcf,0x9d,0xb7,0xb2 };
    const uint8_t PLAINTEXT[] = { 0x79,0x8d,0x32,0x86,0xc7,0xe7,0x33,0x93,0x03,0x31,0x10,0x62,0xd1,0xc5,0x8a,0x5b };
    const uint8_t CIPHERTEXT[] = { 0x45,0xba,0x73,0xa1,0xe2,0x9e,0x2b,0x0d,0x72,0x1c,0xf5,0x3b,0xc1,0x05,0x93,0x9e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-94", "[CFB128][MCT][192][ENCRYPT][n94]") {
    const uint8_t KEY[] = { 0xcf,0xf0,0xab,0xd9,0x89,0xb6,0xfe,0xfd,0x94,0x3b,0xae,0xfb,0xf7,0x09,0x49,0xac,0xec,0xe5,0x27,0xcd,0xc1,0xa8,0xfb,0xbe };
    const uint8_t IV[] = { 0x45,0xba,0x73,0xa1,0xe2,0x9e,0x2b,0x0d,0x72,0x1c,0xf5,0x3b,0xc1,0x05,0x93,0x9e };
    const uint8_t PLAINTEXT[] = { 0xa1,0x25,0xbe,0xaa,0x2b,0xde,0x06,0xbc,0x02,0xa1,0x47,0xf4,0x85,0xc4,0x15,0x5a };
    const uint8_t CIPHERTEXT[] = { 0xee,0x57,0x15,0xcc,0x33,0x85,0xf0,0x4f,0xab,0x64,0x02,0x5b,0xc6,0x4a,0x4c,0x14 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-95", "[CFB128][MCT][192][ENCRYPT][n95]") {
    const uint8_t KEY[] = { 0x90,0xfd,0xf9,0x5a,0xfb,0xee,0x05,0x32,0x7a,0x6c,0xbb,0x37,0xc4,0x8c,0xb9,0xe3,0x47,0x81,0x25,0x96,0x07,0xe2,0xb7,0xaa };
    const uint8_t IV[] = { 0xee,0x57,0x15,0xcc,0x33,0x85,0xf0,0x4f,0xab,0x64,0x02,0x5b,0xc6,0x4a,0x4c,0x14 };
    const uint8_t PLAINTEXT[] = { 0x9b,0xf3,0x59,0xc9,0x24,0x23,0x4e,0x16,0x5f,0x0d,0x52,0x83,0x72,0x58,0xfb,0xcf };
    const uint8_t CIPHERTEXT[] = { 0xfa,0xde,0xed,0xfd,0x5a,0x13,0x9b,0x0d,0xd3,0x56,0x74,0x39,0xc0,0xe0,0x3c,0xea };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-96", "[CFB128][MCT][192][ENCRYPT][n96]") {
    const uint8_t KEY[] = { 0xf2,0x92,0x9a,0x83,0x3c,0x20,0x6e,0xe8,0x80,0xb2,0x56,0xca,0x9e,0x9f,0x22,0xee,0x94,0xd7,0x51,0xaf,0xc7,0x02,0x8b,0x40 };
    const uint8_t IV[] = { 0xfa,0xde,0xed,0xfd,0x5a,0x13,0x9b,0x0d,0xd3,0x56,0x74,0x39,0xc0,0xe0,0x3c,0xea };
    const uint8_t PLAINTEXT[] = { 0x7c,0x09,0xfb,0xad,0xf2,0x69,0x14,0x5a,0x62,0x6f,0x63,0xd9,0xc7,0xce,0x6b,0xda };
    const uint8_t CIPHERTEXT[] = { 0x90,0xf7,0x3e,0x9d,0xae,0x7b,0xf9,0xac,0xa7,0x8e,0xb4,0x0e,0x5e,0x9e,0x35,0xbd };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-97", "[CFB128][MCT][192][ENCRYPT][n97]") {
    const uint8_t KEY[] = { 0x64,0x36,0xb1,0xb5,0x5e,0x81,0xf2,0xa8,0x10,0x45,0x68,0x57,0x30,0xe4,0xdb,0x42,0x33,0x59,0xe5,0xa1,0x99,0x9c,0xbe,0xfd };
    const uint8_t IV[] = { 0x90,0xf7,0x3e,0x9d,0xae,0x7b,0xf9,0xac,0xa7,0x8e,0xb4,0x0e,0x5e,0x9e,0x35,0xbd };
    const uint8_t PLAINTEXT[] = { 0xf1,0x46,0xba,0x48,0xb6,0xf9,0x92,0xe5,0x96,0xa4,0x2b,0x36,0x62,0xa1,0x9c,0x40 };
    const uint8_t CIPHERTEXT[] = { 0xad,0xe8,0xcc,0x56,0x28,0x44,0x64,0xa2,0xbe,0x60,0xde,0x21,0x44,0xa9,0xf5,0xc3 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-98", "[CFB128][MCT][192][ENCRYPT][n98]") {
    const uint8_t KEY[] = { 0x16,0x8e,0x0c,0xea,0xaa,0xf0,0x7c,0x93,0xbd,0xad,0xa4,0x01,0x18,0xa0,0xbf,0xe0,0x8d,0x39,0x3b,0x80,0xdd,0x35,0x4b,0x3e };
    const uint8_t IV[] = { 0xad,0xe8,0xcc,0x56,0x28,0x44,0x64,0xa2,0xbe,0x60,0xde,0x21,0x44,0xa9,0xf5,0xc3 };
    const uint8_t PLAINTEXT[] = { 0x15,0x00,0xa4,0x04,0x3e,0x60,0x4a,0xba,0x72,0xb8,0xbd,0x5f,0xf4,0x71,0x8e,0x3b };
    const uint8_t CIPHERTEXT[] = { 0x66,0xc4,0x5e,0xce,0x81,0x1c,0x80,0x6d,0xb3,0x4d,0x59,0xce,0x08,0x42,0x8f,0x6a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-ENCRYPT-99", "[CFB128][MCT][192][ENCRYPT][n99]") {
    const uint8_t KEY[] = { 0xbe,0x42,0xdd,0x59,0x99,0x3c,0x6a,0x5f,0xdb,0x69,0xfa,0xcf,0x99,0xbc,0x3f,0x8d,0x3e,0x74,0x62,0x4e,0xd5,0x77,0xc4,0x54 };
    const uint8_t IV[] = { 0x66,0xc4,0x5e,0xce,0x81,0x1c,0x80,0x6d,0xb3,0x4d,0x59,0xce,0x08,0x42,0x8f,0x6a };
    const uint8_t PLAINTEXT[] = { 0x8e,0x0d,0xd0,0x14,0xa6,0xf5,0x79,0x01,0xa8,0xcc,0xd1,0xb3,0x33,0xcc,0x16,0xcc };
    const uint8_t CIPHERTEXT[] = { 0xe0,0x2b,0x65,0x56,0x78,0x87,0x54,0x6b,0x44,0xe2,0x5a,0x3a,0xba,0xa3,0x89,0x32 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-0", "[CFB128][MCT][192][DECRYPT][n0]") {
    const uint8_t KEY[] = { 0x67,0xc2,0xed,0xa5,0x08,0xad,0x05,0x13,0xd7,0x36,0xc8,0xf4,0xf9,0xbe,0xa1,0x52,0x60,0x42,0x2b,0xae,0x9c,0xde,0xa4,0xa0 };
    const uint8_t IV[] = { 0x0f,0x12,0x62,0x57,0xf5,0x17,0x71,0x14,0x45,0xd6,0x65,0xe1,0x21,0xbc,0x8a,0x2e };
    const uint8_t PLAINTEXT[] = { 0xcf,0x7b,0x24,0xa3,0x9d,0xd5,0x44,0x2e,0x25,0xb2,0x0f,0x29,0xe8,0xa2,0xef,0x8d };
    const uint8_t CIPHERTEXT[] = { 0x23,0x7b,0x9d,0x26,0x6e,0xdc,0xf5,0xee,0xe7,0x43,0x87,0x21,0xd1,0x37,0xcf,0x1d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-1", "[CFB128][MCT][192][DECRYPT][n1]") {
    const uint8_t KEY[] = { 0x1c,0x57,0x56,0x4c,0xf7,0x2e,0x7b,0xdc,0x18,0x4d,0xec,0x57,0x64,0x6b,0xe5,0x7c,0x45,0xf0,0x24,0x87,0x74,0x7c,0x4b,0x2d };
    const uint8_t IV[] = { 0xcf,0x7b,0x24,0xa3,0x9d,0xd5,0x44,0x2e,0x25,0xb2,0x0f,0x29,0xe8,0xa2,0xef,0x8d };
    const uint8_t PLAINTEXT[] = { 0xc6,0x73,0x9b,0x8b,0x1a,0x0e,0xc3,0xd3,0xb2,0x4d,0x7e,0x7c,0x14,0x07,0xc1,0xab };
    const uint8_t CIPHERTEXT[] = { 0xc1,0x32,0x89,0xb7,0x9a,0x5a,0xe3,0xe4,0x7b,0x95,0xbb,0xe9,0xff,0x83,0x7e,0xcf };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-2", "[CFB128][MCT][192][DECRYPT][n2]") {
    const uint8_t KEY[] = { 0x2a,0x86,0x2d,0xc9,0x56,0x06,0xa7,0x61,0xde,0x3e,0x77,0xdc,0x7e,0x65,0x26,0xaf,0xf7,0xbd,0x5a,0xfb,0x60,0x7b,0x8a,0x86 };
    const uint8_t IV[] = { 0xc6,0x73,0x9b,0x8b,0x1a,0x0e,0xc3,0xd3,0xb2,0x4d,0x7e,0x7c,0x14,0x07,0xc1,0xab };
    const uint8_t PLAINTEXT[] = { 0xe4,0xfc,0x03,0xa8,0x1d,0x2f,0x16,0xc9,0x32,0x01,0xc1,0xd7,0x42,0x74,0xb9,0xaa };
    const uint8_t CIPHERTEXT[] = { 0x37,0x26,0x0d,0xb9,0xb1,0xb0,0xb4,0x02,0x36,0xd1,0x7b,0x85,0xa1,0x28,0xdc,0xbd };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-3", "[CFB128][MCT][192][DECRYPT][n3]") {
    const uint8_t KEY[] = { 0x13,0x29,0x72,0x09,0x4c,0xc2,0xa4,0x58,0x3a,0xc2,0x74,0x74,0x63,0x4a,0x30,0x66,0xc5,0xbc,0x9b,0x2c,0x22,0x0f,0x33,0x2c };
    const uint8_t IV[] = { 0xe4,0xfc,0x03,0xa8,0x1d,0x2f,0x16,0xc9,0x32,0x01,0xc1,0xd7,0x42,0x74,0xb9,0xaa };
    const uint8_t PLAINTEXT[] = { 0xc4,0xdb,0x25,0x2b,0x19,0x78,0xe3,0xb9,0xe4,0xf6,0x8b,0x3c,0x53,0xe6,0xc0,0x57 };
    const uint8_t CIPHERTEXT[] = { 0x95,0x36,0x0c,0xd7,0x71,0x31,0xda,0x2e,0x39,0xaf,0x5f,0xc0,0x1a,0xc4,0x03,0x39 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-4", "[CFB128][MCT][192][DECRYPT][n4]") {
    const uint8_t KEY[] = { 0x23,0x3b,0x6b,0x3f,0x1c,0x2a,0x59,0x24,0xfe,0x19,0x51,0x5f,0x7a,0x32,0xd3,0xdf,0x21,0x4a,0x10,0x10,0x71,0xe9,0xf3,0x7b };
    const uint8_t IV[] = { 0xc4,0xdb,0x25,0x2b,0x19,0x78,0xe3,0xb9,0xe4,0xf6,0x8b,0x3c,0x53,0xe6,0xc0,0x57 };
    const uint8_t PLAINTEXT[] = { 0xcf,0x18,0xc3,0x32,0x01,0x26,0xfa,0x82,0xf4,0xe8,0xae,0x01,0xeb,0x72,0xf8,0xcc };
    const uint8_t CIPHERTEXT[] = { 0x66,0xac,0x83,0xcc,0xe4,0x40,0x74,0x21,0x30,0x12,0x19,0x36,0x50,0xe8,0xfd,0x7c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-5", "[CFB128][MCT][192][DECRYPT][n5]") {
    const uint8_t KEY[] = { 0xcd,0xa0,0xe3,0x33,0x31,0x42,0x9e,0x5d,0x31,0x01,0x92,0x6d,0x7b,0x14,0x29,0x5d,0xd5,0xa2,0xbe,0x11,0x9a,0x9b,0x0b,0xb7 };
    const uint8_t IV[] = { 0xcf,0x18,0xc3,0x32,0x01,0x26,0xfa,0x82,0xf4,0xe8,0xae,0x01,0xeb,0x72,0xf8,0xcc };
    const uint8_t PLAINTEXT[] = { 0xc0,0x8d,0x0a,0xb8,0xca,0xd9,0x9b,0x62,0x4a,0xf1,0xcd,0x45,0x78,0xf5,0x34,0x8d };
    const uint8_t CIPHERTEXT[] = { 0xce,0x39,0x1e,0xf1,0xdd,0x08,0x4a,0x3c,0xee,0x9b,0x88,0x0c,0x2d,0x68,0xc7,0x79 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-6", "[CFB128][MCT][192][DECRYPT][n6]") {
    const uint8_t KEY[] = { 0x78,0x79,0x07,0x16,0xea,0xb2,0x50,0x0f,0xf1,0x8c,0x98,0xd5,0xb1,0xcd,0xb2,0x3f,0x9f,0x53,0x73,0x54,0xe2,0x6e,0x3f,0x3a };
    const uint8_t IV[] = { 0xc0,0x8d,0x0a,0xb8,0xca,0xd9,0x9b,0x62,0x4a,0xf1,0xcd,0x45,0x78,0xf5,0x34,0x8d };
    const uint8_t PLAINTEXT[] = { 0x8b,0x11,0x87,0xbd,0xc3,0x6f,0x14,0x3c,0x50,0xe5,0xde,0x9a,0x05,0xf5,0x2a,0xf7 };
    const uint8_t CIPHERTEXT[] = { 0x02,0xc0,0x7a,0x72,0x7d,0x5d,0xf0,0x08,0xb5,0xd9,0xe4,0x25,0xdb,0xf0,0xce,0x52 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-7", "[CFB128][MCT][192][DECRYPT][n7]") {
    const uint8_t KEY[] = { 0x59,0xf9,0x53,0x9e,0xde,0x0d,0xc2,0xe4,0x7a,0x9d,0x1f,0x68,0x72,0xa2,0xa6,0x03,0xcf,0xb6,0xad,0xce,0xe7,0x9b,0x15,0xcd };
    const uint8_t IV[] = { 0x8b,0x11,0x87,0xbd,0xc3,0x6f,0x14,0x3c,0x50,0xe5,0xde,0x9a,0x05,0xf5,0x2a,0xf7 };
    const uint8_t PLAINTEXT[] = { 0x19,0x6e,0x06,0xf8,0x3c,0x5e,0x70,0x5a,0x3e,0xb3,0xc3,0xae,0xa9,0x04,0xb7,0x09 };
    const uint8_t CIPHERTEXT[] = { 0x70,0x34,0xcf,0xe6,0xa1,0x0a,0xbe,0x90,0x21,0x80,0x54,0x88,0x34,0xbf,0x92,0xeb };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-8", "[CFB128][MCT][192][DECRYPT][n8]") {
    const uint8_t KEY[] = { 0x17,0xbd,0x50,0xbe,0xb2,0x70,0x74,0x3c,0x63,0xf3,0x19,0x90,0x4e,0xfc,0xd6,0x59,0xf1,0x05,0x6e,0x60,0x4e,0x9f,0xa2,0xc4 };
    const uint8_t IV[] = { 0x19,0x6e,0x06,0xf8,0x3c,0x5e,0x70,0x5a,0x3e,0xb3,0xc3,0xae,0xa9,0x04,0xb7,0x09 };
    const uint8_t PLAINTEXT[] = { 0x75,0x2b,0x45,0xe4,0x26,0x36,0xcc,0xc5,0xaf,0x99,0xdf,0xb2,0x8b,0x61,0x56,0x78 };
    const uint8_t CIPHERTEXT[] = { 0x16,0x47,0xde,0xc4,0xa4,0x19,0x80,0x00,0x4e,0x44,0x03,0x20,0x6c,0x7d,0xb6,0xd8 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-9", "[CFB128][MCT][192][DECRYPT][n9]") {
    const uint8_t KEY[] = { 0xbe,0x89,0xfc,0x0a,0xfa,0x4e,0x10,0x53,0x16,0xd8,0x5c,0x74,0x68,0xca,0x1a,0x9c,0x5e,0x9c,0xb1,0xd2,0xc5,0xfe,0xf4,0xbc };
    const uint8_t IV[] = { 0x75,0x2b,0x45,0xe4,0x26,0x36,0xcc,0xc5,0xaf,0x99,0xdf,0xb2,0x8b,0x61,0x56,0x78 };
    const uint8_t PLAINTEXT[] = { 0x31,0x97,0xb2,0xb1,0xb0,0xea,0x2c,0x6d,0x35,0x80,0xc4,0xcb,0xa7,0x3b,0x29,0xe2 };
    const uint8_t CIPHERTEXT[] = { 0xcc,0x21,0x26,0x31,0xd7,0x01,0x5c,0x36,0xa9,0x34,0xac,0xb4,0x48,0x3e,0x64,0x6f };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-10", "[CFB128][MCT][192][DECRYPT][n10]") {
    const uint8_t KEY[] = { 0x10,0x40,0xeb,0x76,0x0e,0x8f,0xf6,0x3e,0x27,0x4f,0xee,0xc5,0xd8,0x20,0x36,0xf1,0x6b,0x1c,0x75,0x19,0x62,0xc5,0xdd,0x5e };
    const uint8_t IV[] = { 0x31,0x97,0xb2,0xb1,0xb0,0xea,0x2c,0x6d,0x35,0x80,0xc4,0xcb,0xa7,0x3b,0x29,0xe2 };
    const uint8_t PLAINTEXT[] = { 0x36,0xfa,0x32,0xe5,0xaf,0x59,0xa1,0xe8,0xb8,0x11,0x0d,0x67,0xd4,0x26,0xb8,0x55 };
    const uint8_t CIPHERTEXT[] = { 0x31,0xf8,0x57,0x5a,0x3e,0xa8,0xf2,0xe3,0xae,0xc9,0x17,0x7c,0xf4,0xc1,0xe6,0x6d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-11", "[CFB128][MCT][192][DECRYPT][n11]") {
    const uint8_t KEY[] = { 0xfa,0xc2,0x04,0x34,0x90,0x0c,0xa6,0xb1,0x11,0xb5,0xdc,0x20,0x77,0x79,0x97,0x19,0xd3,0x0d,0x78,0x7e,0xb6,0xe3,0x65,0x0b };
    const uint8_t IV[] = { 0x36,0xfa,0x32,0xe5,0xaf,0x59,0xa1,0xe8,0xb8,0x11,0x0d,0x67,0xd4,0x26,0xb8,0x55 };
    const uint8_t PLAINTEXT[] = { 0xd7,0x66,0xa8,0x55,0xc1,0xe3,0x2d,0xd9,0x7a,0xc4,0x9b,0x8b,0x92,0x9d,0x53,0x09 };
    const uint8_t CIPHERTEXT[] = { 0xbf,0x0e,0xab,0xd0,0x3f,0x83,0xb7,0x07,0xea,0x82,0xef,0x42,0x9e,0x83,0x50,0x8f };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-12", "[CFB128][MCT][192][DECRYPT][n12]") {
    const uint8_t KEY[] = { 0x91,0xe3,0xb6,0x95,0x40,0x71,0x43,0x84,0xc6,0xd3,0x74,0x75,0xb6,0x9a,0xba,0xc0,0xa9,0xc9,0xe3,0xf5,0x24,0x7e,0x36,0x02 };
    const uint8_t IV[] = { 0xd7,0x66,0xa8,0x55,0xc1,0xe3,0x2d,0xd9,0x7a,0xc4,0x9b,0x8b,0x92,0x9d,0x53,0x09 };
    const uint8_t PLAINTEXT[] = { 0x93,0x41,0x7c,0x5b,0xba,0x1d,0x56,0xb2,0x93,0x00,0x0f,0xa0,0x75,0x82,0x29,0xfd };
    const uint8_t CIPHERTEXT[] = { 0xb0,0x6e,0xae,0x5d,0x8c,0x6a,0x4b,0xf7,0x6b,0x21,0xb2,0xa1,0xd0,0x7d,0xe5,0x35 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-13", "[CFB128][MCT][192][DECRYPT][n13]") {
    const uint8_t KEY[] = { 0x52,0x38,0x84,0x6b,0x77,0xb1,0x97,0x98,0x55,0x92,0x08,0x2e,0x0c,0x87,0xec,0x72,0x3a,0xc9,0xec,0x55,0x51,0xfc,0x1f,0xff };
    const uint8_t IV[] = { 0x93,0x41,0x7c,0x5b,0xba,0x1d,0x56,0xb2,0x93,0x00,0x0f,0xa0,0x75,0x82,0x29,0xfd };
    const uint8_t PLAINTEXT[] = { 0xb5,0xf2,0x35,0x39,0xfc,0x3b,0xda,0xe6,0xeb,0x09,0x09,0xe9,0x55,0x61,0x60,0x6e };
    const uint8_t CIPHERTEXT[] = { 0xdc,0xae,0x21,0xee,0x5b,0x91,0x45,0x80,0xc3,0xdb,0x32,0xfe,0x37,0xc0,0xd4,0x1c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-14", "[CFB128][MCT][192][DECRYPT][n14]") {
    const uint8_t KEY[] = { 0x07,0xdd,0xd3,0x45,0x98,0x82,0xa6,0x45,0xe0,0x60,0x3d,0x17,0xf0,0xbc,0x36,0x94,0xd1,0xc0,0xe5,0xbc,0x04,0x9d,0x7f,0x91 };
    const uint8_t IV[] = { 0xb5,0xf2,0x35,0x39,0xfc,0x3b,0xda,0xe6,0xeb,0x09,0x09,0xe9,0x55,0x61,0x60,0x6e };
    const uint8_t PLAINTEXT[] = { 0x50,0x1b,0xb0,0x00,0x03,0x61,0x4e,0x27,0xba,0x60,0x66,0x44,0xe6,0x75,0x15,0x5a };
    const uint8_t CIPHERTEXT[] = { 0x79,0x9f,0x4d,0x7e,0x26,0xa2,0xc6,0x56,0x55,0xe5,0x57,0x2e,0xef,0x33,0x31,0xdd };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-15", "[CFB128][MCT][192][DECRYPT][n15]") {
    const uint8_t KEY[] = { 0x3b,0x36,0x0c,0xe1,0x0f,0x5f,0xb9,0xa3,0xb0,0x7b,0x8d,0x17,0xf3,0xdd,0x78,0xb3,0x6b,0xa0,0x83,0xf8,0xe2,0xe8,0x6a,0xcb };
    const uint8_t IV[] = { 0x50,0x1b,0xb0,0x00,0x03,0x61,0x4e,0x27,0xba,0x60,0x66,0x44,0xe6,0x75,0x15,0x5a };
    const uint8_t PLAINTEXT[] = { 0x54,0x07,0xd3,0x35,0xe0,0xee,0x15,0x1f,0x44,0x83,0x12,0xf3,0x7d,0x19,0xbe,0xa7 };
    const uint8_t CIPHERTEXT[] = { 0x85,0x2c,0xdf,0x94,0x91,0x3d,0x80,0x02,0x3c,0xeb,0xdf,0xa4,0x97,0xdd,0x1f,0xe6 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-16", "[CFB128][MCT][192][DECRYPT][n16]") {
    const uint8_t KEY[] = { 0x7f,0x18,0x18,0xa3,0x7b,0xea,0x41,0x4f,0xe4,0x7c,0x5e,0x22,0x13,0x33,0x6d,0xac,0x2f,0x23,0x91,0x0b,0x9f,0xf1,0xd4,0x6c };
    const uint8_t IV[] = { 0x54,0x07,0xd3,0x35,0xe0,0xee,0x15,0x1f,0x44,0x83,0x12,0xf3,0x7d,0x19,0xbe,0xa7 };
    const uint8_t PLAINTEXT[] = { 0xd5,0x3f,0xd1,0x49,0xb2,0x7a,0x52,0x41,0xd1,0xd1,0x21,0x8a,0xb4,0x12,0x1a,0x22 };
    const uint8_t CIPHERTEXT[] = { 0x85,0x71,0x67,0xe7,0x45,0xb7,0x7d,0xe6,0x44,0x2e,0x14,0x42,0x74,0xb5,0xf8,0xec };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-17", "[CFB128][MCT][192][DECRYPT][n17]") {
    const uint8_t KEY[] = { 0xf8,0x31,0x20,0x4c,0x51,0x08,0x9d,0xa6,0x31,0x43,0x8f,0x6b,0xa1,0x49,0x3f,0xed,0xfe,0xf2,0xb0,0x81,0x2b,0xe3,0xce,0x4e };
    const uint8_t IV[] = { 0xd5,0x3f,0xd1,0x49,0xb2,0x7a,0x52,0x41,0xd1,0xd1,0x21,0x8a,0xb4,0x12,0x1a,0x22 };
    const uint8_t PLAINTEXT[] = { 0xc9,0x7e,0xa5,0x67,0xa6,0xc7,0xfb,0x18,0xd3,0xb3,0xa8,0xc9,0x6d,0x48,0x38,0xbf };
    const uint8_t CIPHERTEXT[] = { 0x75,0x14,0xea,0x81,0xf4,0x35,0xdb,0x1a,0x87,0x29,0x38,0xef,0x2a,0xe2,0xdc,0xe9 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-18", "[CFB128][MCT][192][DECRYPT][n18]") {
    const uint8_t KEY[] = { 0x0a,0x06,0x2c,0x9c,0x86,0x18,0xa9,0x60,0xf8,0x3d,0x2a,0x0c,0x07,0x8e,0xc4,0xf5,0x2d,0x41,0x18,0x48,0x46,0xab,0xf6,0xf1 };
    const uint8_t IV[] = { 0xc9,0x7e,0xa5,0x67,0xa6,0xc7,0xfb,0x18,0xd3,0xb3,0xa8,0xc9,0x6d,0x48,0x38,0xbf };
    const uint8_t PLAINTEXT[] = { 0x9b,0x82,0x18,0x06,0xb1,0x79,0x81,0x4f,0x24,0x6f,0xdf,0xeb,0xc9,0x7c,0xcf,0x10 };
    const uint8_t CIPHERTEXT[] = { 0xaf,0x29,0x89,0x16,0x94,0x41,0xaa,0x84,0xf2,0x37,0x0c,0xd0,0xd7,0x10,0x34,0xc6 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-19", "[CFB128][MCT][192][DECRYPT][n19]") {
    const uint8_t KEY[] = { 0xd5,0xf4,0x9b,0xb9,0x8b,0x78,0x06,0x76,0x63,0xbf,0x32,0x0a,0xb6,0xf7,0x45,0xba,0x09,0x2e,0xc7,0xa3,0x8f,0xd7,0x39,0xe1 };
    const uint8_t IV[] = { 0x9b,0x82,0x18,0x06,0xb1,0x79,0x81,0x4f,0x24,0x6f,0xdf,0xeb,0xc9,0x7c,0xcf,0x10 };
    const uint8_t PLAINTEXT[] = { 0xf2,0x4b,0x3d,0x42,0x0e,0xb4,0x95,0x37,0x9f,0x0e,0xc4,0xd7,0x7d,0x44,0x61,0x19 };
    const uint8_t CIPHERTEXT[] = { 0xde,0xb6,0xa8,0xd9,0x12,0xcd,0xf4,0xee,0xdf,0xf2,0xb7,0x25,0x0d,0x60,0xaf,0x16 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-20", "[CFB128][MCT][192][DECRYPT][n20]") {
    const uint8_t KEY[] = { 0x5b,0xd1,0xb7,0x2a,0x0f,0xbe,0x9c,0x12,0x91,0xf4,0x0f,0x48,0xb8,0x43,0xd0,0x8d,0x96,0x20,0x03,0x74,0xf2,0x93,0x58,0xf8 };
    const uint8_t IV[] = { 0xf2,0x4b,0x3d,0x42,0x0e,0xb4,0x95,0x37,0x9f,0x0e,0xc4,0xd7,0x7d,0x44,0x61,0x19 };
    const uint8_t PLAINTEXT[] = { 0x1b,0x4c,0x5b,0xb1,0xed,0x25,0xb4,0x79,0xa0,0xf4,0xe7,0x6b,0x93,0x7b,0x09,0xc0 };
    const uint8_t CIPHERTEXT[] = { 0x0c,0x63,0x58,0xe2,0x15,0x95,0x0f,0x61,0x8e,0x25,0x2c,0x93,0x84,0xc6,0x9a,0x64 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-21", "[CFB128][MCT][192][DECRYPT][n21]") {
    const uint8_t KEY[] = { 0x52,0x6e,0x7d,0xa2,0x76,0xb9,0x3c,0x89,0x8a,0xb8,0x54,0xf9,0x55,0x66,0x64,0xf4,0x36,0xd4,0xe4,0x1f,0x61,0xe8,0x51,0x38 };
    const uint8_t IV[] = { 0x1b,0x4c,0x5b,0xb1,0xed,0x25,0xb4,0x79,0xa0,0xf4,0xe7,0x6b,0x93,0x7b,0x09,0xc0 };
    const uint8_t PLAINTEXT[] = { 0x1e,0x5f,0x3a,0x2e,0xc6,0x8e,0xba,0xaf,0x3d,0xe4,0x4d,0xf8,0x01,0x09,0x67,0x6a };
    const uint8_t CIPHERTEXT[] = { 0xe5,0x8a,0x94,0x82,0x7d,0xbb,0x76,0x82,0x09,0xbf,0xca,0x88,0x79,0x07,0xa0,0x9b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-22", "[CFB128][MCT][192][DECRYPT][n22]") {
    const uint8_t KEY[] = { 0x02,0x8c,0x73,0xc5,0x50,0x99,0x2b,0xd7,0x94,0xe7,0x6e,0xd7,0x93,0xe8,0xde,0x5b,0x0b,0x30,0xa9,0xe7,0x60,0xe1,0x36,0x52 };
    const uint8_t IV[] = { 0x1e,0x5f,0x3a,0x2e,0xc6,0x8e,0xba,0xaf,0x3d,0xe4,0x4d,0xf8,0x01,0x09,0x67,0x6a };
    const uint8_t PLAINTEXT[] = { 0x4c,0x59,0x6d,0xb7,0xb9,0x5e,0x6c,0x3c,0x82,0xeb,0x42,0x17,0xde,0xdb,0xa4,0xc9 };
    const uint8_t CIPHERTEXT[] = { 0x10,0xc7,0x04,0x1b,0xd5,0xdf,0x9c,0x25,0x50,0xe2,0x0e,0x67,0x26,0x20,0x17,0x5e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-23", "[CFB128][MCT][192][DECRYPT][n23]") {
    const uint8_t KEY[] = { 0xb0,0x10,0x7c,0xf7,0xaa,0xf3,0xfe,0xed,0xd8,0xbe,0x03,0x60,0x2a,0xb6,0xb2,0x67,0x89,0xdb,0xeb,0xf0,0xbe,0x3a,0x92,0x9b };
    const uint8_t IV[] = { 0x4c,0x59,0x6d,0xb7,0xb9,0x5e,0x6c,0x3c,0x82,0xeb,0x42,0x17,0xde,0xdb,0xa4,0xc9 };
    const uint8_t PLAINTEXT[] = { 0x92,0xdb,0xc4,0xbe,0xf1,0x31,0xbd,0xf2,0xbb,0xee,0x47,0xf9,0x44,0x41,0x19,0xcd };
    const uint8_t CIPHERTEXT[] = { 0xc8,0x56,0xe5,0xa9,0x16,0xe0,0xf0,0xbc,0xb2,0x9c,0x0f,0x32,0xfa,0x6a,0xd5,0x3a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-24", "[CFB128][MCT][192][DECRYPT][n24]") {
    const uint8_t KEY[] = { 0xbc,0xe4,0xeb,0x92,0xb6,0xeb,0x63,0x1b,0x4a,0x65,0xc7,0xde,0xdb,0x87,0x0f,0x95,0x32,0x35,0xac,0x09,0xfa,0x7b,0x8b,0x56 };
    const uint8_t IV[] = { 0x92,0xdb,0xc4,0xbe,0xf1,0x31,0xbd,0xf2,0xbb,0xee,0x47,0xf9,0x44,0x41,0x19,0xcd };
    const uint8_t PLAINTEXT[] = { 0x5b,0x56,0x3f,0x1b,0x75,0x02,0x25,0xff,0xef,0x57,0xec,0x95,0x1a,0xcc,0xbc,0xff };
    const uint8_t CIPHERTEXT[] = { 0xa3,0xc0,0xf2,0xa1,0x4a,0x5f,0x11,0x42,0x0c,0xf4,0x97,0x65,0x1c,0x18,0x9d,0xf6 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-25", "[CFB128][MCT][192][DECRYPT][n25]") {
    const uint8_t KEY[] = { 0x5c,0x87,0x8e,0x12,0x3c,0x7c,0x49,0x5f,0x11,0x33,0xf8,0xc5,0xae,0x85,0x2a,0x6a,0xdd,0x62,0x40,0x9c,0xe0,0xb7,0x37,0xa9 };
    const uint8_t IV[] = { 0x5b,0x56,0x3f,0x1b,0x75,0x02,0x25,0xff,0xef,0x57,0xec,0x95,0x1a,0xcc,0xbc,0xff };
    const uint8_t PLAINTEXT[] = { 0x32,0x0c,0x27,0x5c,0x95,0xdb,0x1e,0xbc,0x35,0xb3,0x11,0x75,0xe2,0xcb,0x4b,0x4f };
    const uint8_t CIPHERTEXT[] = { 0xfa,0x9c,0x97,0x41,0xe1,0xe0,0x85,0xd5,0xe0,0x63,0x65,0x80,0x8a,0x97,0x2a,0x44 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-26", "[CFB128][MCT][192][DECRYPT][n26]") {
    const uint8_t KEY[] = { 0x01,0x26,0xf8,0x6c,0x1b,0xb0,0x80,0x1f,0x23,0x3f,0xdf,0x99,0x3b,0x5e,0x34,0xd6,0xe8,0xd1,0x51,0xe9,0x02,0x7c,0x7c,0xe6 };
    const uint8_t IV[] = { 0x32,0x0c,0x27,0x5c,0x95,0xdb,0x1e,0xbc,0x35,0xb3,0x11,0x75,0xe2,0xcb,0x4b,0x4f };
    const uint8_t PLAINTEXT[] = { 0xb7,0x2c,0x95,0x1d,0x8b,0xa4,0x47,0xf9,0x63,0x1e,0xd8,0x0a,0xf0,0xa7,0x75,0x41 };
    const uint8_t CIPHERTEXT[] = { 0x3e,0xd0,0x63,0xb0,0xc2,0x7f,0x05,0x59,0x5d,0xa1,0x76,0x7e,0x27,0xcc,0xc9,0x40 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-27", "[CFB128][MCT][192][DECRYPT][n27]") {
    const uint8_t KEY[] = { 0x3f,0xd2,0xf7,0x15,0x9e,0x8a,0x1e,0x5d,0x94,0x13,0x4a,0x84,0xb0,0xfa,0x73,0x2f,0x8b,0xcf,0x89,0xe3,0xf2,0xdb,0x09,0xa7 };
    const uint8_t IV[] = { 0xb7,0x2c,0x95,0x1d,0x8b,0xa4,0x47,0xf9,0x63,0x1e,0xd8,0x0a,0xf0,0xa7,0x75,0x41 };
    const uint8_t PLAINTEXT[] = { 0x01,0xdc,0x16,0xf7,0x72,0xc0,0x74,0x07,0x37,0xb5,0x76,0x20,0xd6,0xa8,0x79,0xc2 };
    const uint8_t CIPHERTEXT[] = { 0x84,0xe6,0xe0,0x46,0x30,0x2f,0xea,0xcc,0x3e,0xf4,0x0f,0x79,0x85,0x3a,0x9e,0x42 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-28", "[CFB128][MCT][192][DECRYPT][n28]") {
    const uint8_t KEY[] = { 0xfb,0x81,0x75,0xec,0x75,0x20,0x8c,0xd4,0x95,0xcf,0x5c,0x73,0xc2,0x3a,0x07,0x28,0xbc,0x7a,0xff,0xc3,0x24,0x73,0x70,0x65 };
    const uint8_t IV[] = { 0x01,0xdc,0x16,0xf7,0x72,0xc0,0x74,0x07,0x37,0xb5,0x76,0x20,0xd6,0xa8,0x79,0xc2 };
    const uint8_t PLAINTEXT[] = { 0x63,0xe3,0x3a,0x57,0x7e,0xc0,0x76,0x6f,0xb1,0xcd,0x50,0xa9,0x4b,0x03,0x45,0x4c };
    const uint8_t CIPHERTEXT[] = { 0x6b,0x71,0x6a,0x4d,0x63,0x92,0x17,0xb6,0xc4,0x53,0x82,0xf9,0xeb,0xaa,0x92,0x89 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-29", "[CFB128][MCT][192][DECRYPT][n29]") {
    const uint8_t KEY[] = { 0xf1,0x9b,0xa8,0xe2,0x4d,0xf7,0xc7,0x8d,0xf6,0x2c,0x66,0x24,0xbc,0xfa,0x71,0x47,0x0d,0xb7,0xaf,0x6a,0x6f,0x70,0x35,0x29 };
    const uint8_t IV[] = { 0x63,0xe3,0x3a,0x57,0x7e,0xc0,0x76,0x6f,0xb1,0xcd,0x50,0xa9,0x4b,0x03,0x45,0x4c };
    const uint8_t PLAINTEXT[] = { 0x89,0x7f,0x85,0x00,0x8a,0x08,0x36,0xa2,0x6e,0x46,0xd0,0x5f,0xf4,0xe0,0xdd,0x61 };
    const uint8_t CIPHERTEXT[] = { 0xda,0x3e,0xb3,0xa1,0x42,0xe6,0x51,0x6c,0x0a,0x1a,0xdd,0x0e,0x38,0xd7,0x4b,0x59 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-30", "[CFB128][MCT][192][DECRYPT][n30]") {
    const uint8_t KEY[] = { 0x63,0x69,0xa8,0x01,0xbb,0x50,0x3e,0x50,0x7f,0x53,0xe3,0x24,0x36,0xf2,0x47,0xe5,0x63,0xf1,0x7f,0x35,0x9b,0x90,0xe8,0x48 };
    const uint8_t IV[] = { 0x89,0x7f,0x85,0x00,0x8a,0x08,0x36,0xa2,0x6e,0x46,0xd0,0x5f,0xf4,0xe0,0xdd,0x61 };
    const uint8_t PLAINTEXT[] = { 0x12,0xc6,0x7b,0xc6,0xe6,0x2f,0x2e,0x62,0xab,0x57,0x90,0xda,0x9e,0xf5,0x9c,0xaf };
    const uint8_t CIPHERTEXT[] = { 0x80,0x92,0xc8,0x66,0x06,0x39,0x7f,0x3e,0x92,0xf2,0x00,0xe3,0xf6,0xa7,0xf9,0xdd };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-31", "[CFB128][MCT][192][DECRYPT][n31]") {
    const uint8_t KEY[] = { 0xfa,0xd0,0x91,0x44,0xac,0xe5,0x7e,0x53,0x6d,0x95,0x98,0xe2,0xd0,0xdd,0x69,0x87,0xc8,0xa6,0xef,0xef,0x05,0x65,0x74,0xe7 };
    const uint8_t IV[] = { 0x12,0xc6,0x7b,0xc6,0xe6,0x2f,0x2e,0x62,0xab,0x57,0x90,0xda,0x9e,0xf5,0x9c,0xaf };
    const uint8_t PLAINTEXT[] = { 0x9b,0xa3,0x1e,0xd5,0x6a,0x83,0x95,0x7f,0x27,0x4a,0xd4,0x3a,0xa3,0xe7,0xda,0xb6 };
    const uint8_t CIPHERTEXT[] = { 0xf6,0xe3,0xba,0x38,0x40,0x7e,0xcc,0x01,0x99,0xb9,0x39,0x45,0x17,0xb5,0x40,0x03 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-32", "[CFB128][MCT][192][DECRYPT][n32]") {
    const uint8_t KEY[] = { 0xf7,0xbe,0x49,0x1d,0x32,0x2b,0xf1,0x29,0xf6,0x36,0x86,0x37,0xba,0x5e,0xfc,0xf8,0xef,0xec,0x3b,0xd5,0xa6,0x82,0xae,0x51 };
    const uint8_t IV[] = { 0x9b,0xa3,0x1e,0xd5,0x6a,0x83,0x95,0x7f,0x27,0x4a,0xd4,0x3a,0xa3,0xe7,0xda,0xb6 };
    const uint8_t PLAINTEXT[] = { 0x26,0x39,0x2e,0x52,0xb9,0x0f,0x37,0xf7,0xad,0xab,0x1f,0xeb,0xb0,0x75,0x66,0xe4 };
    const uint8_t CIPHERTEXT[] = { 0x7a,0x3f,0xc8,0xf6,0x18,0xd4,0xb2,0x82,0x0d,0x6e,0xd8,0x59,0x9e,0xce,0x8f,0x7a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-33", "[CFB128][MCT][192][DECRYPT][n33]") {
    const uint8_t KEY[] = { 0x7c,0x7e,0xb5,0x94,0x23,0xa9,0xb1,0x7b,0xd0,0x0f,0xa8,0x65,0x03,0x51,0xcb,0x0f,0x42,0x47,0x24,0x3e,0x16,0xf7,0xc8,0xb5 };
    const uint8_t IV[] = { 0x26,0x39,0x2e,0x52,0xb9,0x0f,0x37,0xf7,0xad,0xab,0x1f,0xeb,0xb0,0x75,0x66,0xe4 };
    const uint8_t PLAINTEXT[] = { 0xb7,0x17,0x7b,0x70,0x1e,0x7b,0x68,0xc5,0x71,0x17,0x8a,0x43,0xa4,0xd7,0xaa,0xd5 };
    const uint8_t CIPHERTEXT[] = { 0x11,0x9a,0x84,0x18,0xd6,0x65,0xc2,0x0e,0x8b,0xc0,0xfc,0x89,0x11,0x82,0x40,0x52 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-34", "[CFB128][MCT][192][DECRYPT][n34]") {
    const uint8_t KEY[] = { 0x8b,0xb1,0x22,0xff,0xfd,0x85,0x15,0xca,0x67,0x18,0xd3,0x15,0x1d,0x2a,0xa3,0xca,0x33,0x50,0xae,0x7d,0xb2,0x20,0x62,0x60 };
    const uint8_t IV[] = { 0xb7,0x17,0x7b,0x70,0x1e,0x7b,0x68,0xc5,0x71,0x17,0x8a,0x43,0xa4,0xd7,0xaa,0xd5 };
    const uint8_t PLAINTEXT[] = { 0xbe,0xb1,0xc2,0x64,0xa7,0x60,0xb4,0xa5,0x5c,0xcb,0x76,0x72,0x41,0x3e,0x8f,0xa5 };
    const uint8_t CIPHERTEXT[] = { 0x4f,0xf5,0x1e,0xe8,0x3f,0x60,0x9a,0xe8,0xf7,0xcf,0x97,0x6b,0xde,0x2c,0xa4,0xb1 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-35", "[CFB128][MCT][192][DECRYPT][n35]") {
    const uint8_t KEY[] = { 0xcd,0x17,0x22,0x90,0x6a,0x1b,0x4f,0x5e,0xd9,0xa9,0x11,0x71,0xba,0x4a,0x17,0x6f,0x6f,0x9b,0xd8,0x0f,0xf3,0x1e,0xed,0xc5 };
    const uint8_t IV[] = { 0xbe,0xb1,0xc2,0x64,0xa7,0x60,0xb4,0xa5,0x5c,0xcb,0x76,0x72,0x41,0x3e,0x8f,0xa5 };
    const uint8_t PLAINTEXT[] = { 0x58,0xe3,0xa4,0x5a,0x10,0xa8,0xc7,0x20,0x99,0xbc,0x7a,0x18,0x39,0x4f,0x15,0xa0 };
    const uint8_t CIPHERTEXT[] = { 0x2d,0xfe,0x30,0x45,0x03,0xf8,0x3c,0x33,0x46,0xa6,0x00,0x6f,0x97,0x9e,0x5a,0x94 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-36", "[CFB128][MCT][192][DECRYPT][n36]") {
    const uint8_t KEY[] = { 0x2a,0x62,0xf0,0xdd,0xe3,0x9c,0xb3,0x5b,0x81,0x4a,0xb5,0x2b,0xaa,0xe2,0xd0,0x4f,0xf6,0x27,0xa2,0x17,0xca,0x51,0xf8,0x65 };
    const uint8_t IV[] = { 0x58,0xe3,0xa4,0x5a,0x10,0xa8,0xc7,0x20,0x99,0xbc,0x7a,0x18,0x39,0x4f,0x15,0xa0 };
    const uint8_t PLAINTEXT[] = { 0x0b,0x75,0xfe,0x1d,0x3b,0xf4,0x04,0x58,0x69,0x4e,0xee,0xae,0x3e,0x18,0x96,0x10 };
    const uint8_t CIPHERTEXT[] = { 0x74,0x60,0x85,0xbe,0xc9,0x17,0x2f,0x3b,0xe7,0x75,0xd2,0x4d,0x89,0x87,0xfc,0x05 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-37", "[CFB128][MCT][192][DECRYPT][n37]") {
    const uint8_t KEY[] = { 0xf8,0xb8,0x52,0xba,0xa4,0xd6,0x0b,0x5c,0x8a,0x3f,0x4b,0x36,0x91,0x16,0xd4,0x17,0x9f,0x69,0x4c,0xb9,0xf4,0x49,0x6e,0x75 };
    const uint8_t IV[] = { 0x0b,0x75,0xfe,0x1d,0x3b,0xf4,0x04,0x58,0x69,0x4e,0xee,0xae,0x3e,0x18,0x96,0x10 };
    const uint8_t PLAINTEXT[] = { 0x5a,0xb6,0x69,0xf5,0x58,0xb8,0x0f,0xc5,0x11,0xcb,0x6e,0xb2,0xe2,0x8c,0xf2,0x0e };
    const uint8_t CIPHERTEXT[] = { 0x41,0xaa,0xe8,0x2e,0x99,0xa0,0x93,0x02,0xd2,0xda,0xa2,0x67,0x47,0x4a,0xb8,0x07 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-38", "[CFB128][MCT][192][DECRYPT][n38]") {
    const uint8_t KEY[] = { 0x6b,0x77,0xca,0x77,0x4e,0x98,0x57,0x63,0xd0,0x89,0x22,0xc3,0xc9,0xae,0xdb,0xd2,0x8e,0xa2,0x22,0x0b,0x16,0xc5,0x9c,0x7b };
    const uint8_t IV[] = { 0x5a,0xb6,0x69,0xf5,0x58,0xb8,0x0f,0xc5,0x11,0xcb,0x6e,0xb2,0xe2,0x8c,0xf2,0x0e };
    const uint8_t PLAINTEXT[] = { 0x59,0x79,0xef,0x25,0x5b,0x3a,0x01,0x75,0xa2,0xb1,0x59,0x06,0xdd,0xf1,0x59,0xf9 };
    const uint8_t CIPHERTEXT[] = { 0x1d,0x42,0x16,0x30,0xd2,0x0a,0x8b,0xdc,0x93,0xcf,0x98,0xcd,0xea,0x4e,0x5c,0x3f };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-39", "[CFB128][MCT][192][DECRYPT][n39]") {
    const uint8_t KEY[] = { 0xc7,0x3f,0x5f,0xa0,0x82,0xd6,0x09,0x4e,0x89,0xf0,0xcd,0xe6,0x92,0x94,0xda,0xa7,0x2c,0x13,0x7b,0x0d,0xcb,0x34,0xc5,0x82 };
    const uint8_t IV[] = { 0x59,0x79,0xef,0x25,0x5b,0x3a,0x01,0x75,0xa2,0xb1,0x59,0x06,0xdd,0xf1,0x59,0xf9 };
    const uint8_t PLAINTEXT[] = { 0x5b,0xaf,0x82,0x2c,0x86,0x13,0x98,0xae,0x94,0xef,0x4c,0x31,0x7d,0x7a,0x0d,0xef };
    const uint8_t CIPHERTEXT[] = { 0x71,0xf0,0x3c,0x80,0xf5,0xb8,0xa6,0xcb,0xac,0x48,0x95,0xd7,0xcc,0x4e,0x5e,0x2d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-40", "[CFB128][MCT][192][DECRYPT][n40]") {
    const uint8_t KEY[] = { 0x40,0x96,0x88,0xe5,0xf9,0x65,0xf7,0x1f,0xd2,0x5f,0x4f,0xca,0x14,0x87,0x42,0x09,0xb8,0xfc,0x37,0x3c,0xb6,0x4e,0xc8,0x6d };
    const uint8_t IV[] = { 0x5b,0xaf,0x82,0x2c,0x86,0x13,0x98,0xae,0x94,0xef,0x4c,0x31,0x7d,0x7a,0x0d,0xef };
    const uint8_t PLAINTEXT[] = { 0x4f,0x60,0xd5,0xf8,0x12,0xaf,0xb6,0x64,0xf1,0x0a,0xa9,0xba,0x18,0x82,0x7e,0x53 };
    const uint8_t CIPHERTEXT[] = { 0x36,0xdc,0x80,0xe0,0x1f,0x49,0x1f,0x2f,0x87,0xa9,0xd7,0x45,0x7b,0xb3,0xfe,0x51 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-41", "[CFB128][MCT][192][DECRYPT][n41]") {
    const uint8_t KEY[] = { 0xe1,0x7a,0x59,0xc6,0xac,0x33,0xb5,0xf1,0x9d,0x3f,0x9a,0x32,0x06,0x28,0xf4,0x6d,0x49,0xf6,0x9e,0x86,0xae,0xcc,0xb6,0x3e };
    const uint8_t IV[] = { 0x4f,0x60,0xd5,0xf8,0x12,0xaf,0xb6,0x64,0xf1,0x0a,0xa9,0xba,0x18,0x82,0x7e,0x53 };
    const uint8_t PLAINTEXT[] = { 0x51,0x82,0xb1,0xac,0x4a,0x68,0x9f,0xd3,0xc5,0xd4,0xff,0xf6,0x8f,0xde,0xb1,0xce };
    const uint8_t CIPHERTEXT[] = { 0x56,0x38,0xe5,0x59,0x21,0x0b,0x58,0x12,0xa1,0xec,0xd1,0x23,0x55,0x56,0x42,0xee };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-42", "[CFB128][MCT][192][DECRYPT][n42]") {
    const uint8_t KEY[] = { 0xf1,0x10,0xf1,0x40,0x63,0x12,0xac,0xc3,0xcc,0xbd,0x2b,0x9e,0x4c,0x40,0x6b,0xbe,0x8c,0x22,0x61,0x70,0x21,0x12,0x07,0xf0 };
    const uint8_t IV[] = { 0x51,0x82,0xb1,0xac,0x4a,0x68,0x9f,0xd3,0xc5,0xd4,0xff,0xf6,0x8f,0xde,0xb1,0xce };
    const uint8_t PLAINTEXT[] = { 0x2d,0x3d,0x20,0xcf,0x6b,0x0b,0xc2,0x1b,0xc3,0xdf,0xb9,0x7d,0x6b,0x1d,0x80,0x20 };
    const uint8_t CIPHERTEXT[] = { 0x9b,0xd1,0x73,0x99,0x0c,0x2c,0x89,0x76,0x10,0x6a,0xa8,0x86,0xcf,0x21,0x19,0x32 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-43", "[CFB128][MCT][192][DECRYPT][n43]") {
    const uint8_t KEY[] = { 0xb9,0x1b,0x65,0xe2,0xd7,0xac,0xf4,0x6c,0xe1,0x80,0x0b,0x51,0x27,0x4b,0xa9,0xa5,0x4f,0xfd,0xd8,0x0d,0x4a,0x0f,0x87,0xd0 };
    const uint8_t IV[] = { 0x2d,0x3d,0x20,0xcf,0x6b,0x0b,0xc2,0x1b,0xc3,0xdf,0xb9,0x7d,0x6b,0x1d,0x80,0x20 };
    const uint8_t PLAINTEXT[] = { 0x84,0x9f,0xf1,0x9e,0xaf,0xe6,0x0c,0xf4,0x36,0x4f,0xe1,0x42,0xe4,0xd8,0x21,0xaf };
    const uint8_t CIPHERTEXT[] = { 0x1c,0x77,0x68,0xc4,0xcc,0xc4,0x18,0x0c,0x48,0x0b,0x94,0xa2,0xb4,0xbe,0x58,0xaf };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-44", "[CFB128][MCT][192][DECRYPT][n44]") {
    const uint8_t KEY[] = { 0x1c,0x13,0x3e,0x71,0x61,0x1c,0xe0,0x4b,0x65,0x1f,0xfa,0xcf,0x88,0xad,0xa5,0x51,0x79,0xb2,0x39,0x4f,0xae,0xd7,0xa6,0x7f };
    const uint8_t IV[] = { 0x84,0x9f,0xf1,0x9e,0xaf,0xe6,0x0c,0xf4,0x36,0x4f,0xe1,0x42,0xe4,0xd8,0x21,0xaf };
    const uint8_t PLAINTEXT[] = { 0x21,0x99,0x72,0x90,0xc3,0x28,0xa9,0xc0,0x73,0x71,0xa3,0x6f,0xde,0x7c,0x3b,0xb7 };
    const uint8_t CIPHERTEXT[] = { 0x63,0xcf,0xb6,0x7b,0x94,0x2d,0x3b,0xfa,0xa5,0x08,0x5b,0x93,0xb6,0xb0,0x14,0x27 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-45", "[CFB128][MCT][192][DECRYPT][n45]") {
    const uint8_t KEY[] = { 0xed,0xd6,0xdc,0x8d,0xc9,0x91,0x4f,0xea,0x44,0x86,0x88,0x5f,0x4b,0x85,0x0c,0x91,0x0a,0xc3,0x9a,0x20,0x70,0xab,0x9d,0xc8 };
    const uint8_t IV[] = { 0x21,0x99,0x72,0x90,0xc3,0x28,0xa9,0xc0,0x73,0x71,0xa3,0x6f,0xde,0x7c,0x3b,0xb7 };
    const uint8_t PLAINTEXT[] = { 0xb4,0xa5,0x61,0x49,0x22,0x6e,0xb2,0x39,0xc5,0xbd,0x6b,0x55,0x1d,0x20,0xe6,0xf0 };
    const uint8_t CIPHERTEXT[] = { 0x1f,0x3f,0x5f,0xa2,0xa3,0x23,0xb2,0xb1,0xf1,0xc5,0xe2,0xfc,0xa8,0x8d,0xaf,0xa1 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-46", "[CFB128][MCT][192][DECRYPT][n46]") {
    const uint8_t KEY[] = { 0x13,0x34,0xe4,0x99,0x04,0x8d,0xea,0x67,0xf0,0x23,0xe9,0x16,0x69,0xeb,0xbe,0xa8,0xcf,0x7e,0xf1,0x75,0x6d,0x8b,0x7b,0x38 };
    const uint8_t IV[] = { 0xb4,0xa5,0x61,0x49,0x22,0x6e,0xb2,0x39,0xc5,0xbd,0x6b,0x55,0x1d,0x20,0xe6,0xf0 };
    const uint8_t PLAINTEXT[] = { 0xa1,0xf7,0xf3,0xc0,0x45,0x6b,0xf3,0xe3,0xcc,0x0f,0x27,0x23,0xc3,0x63,0xc1,0x70 };
    const uint8_t CIPHERTEXT[] = { 0xdb,0xda,0xf0,0xf0,0xfd,0x5d,0xbf,0x9e,0xfe,0xe2,0x38,0x14,0xcd,0x1c,0xa5,0x8d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-47", "[CFB128][MCT][192][DECRYPT][n47]") {
    const uint8_t KEY[] = { 0x46,0xce,0x33,0x75,0xe1,0x88,0x9f,0x05,0x51,0xd4,0x1a,0xd6,0x2c,0x80,0x4d,0x4b,0x03,0x71,0xd6,0x56,0xae,0xe8,0xba,0x48 };
    const uint8_t IV[] = { 0xa1,0xf7,0xf3,0xc0,0x45,0x6b,0xf3,0xe3,0xcc,0x0f,0x27,0x23,0xc3,0x63,0xc1,0x70 };
    const uint8_t PLAINTEXT[] = { 0xb9,0x11,0x3b,0x3a,0xac,0x5e,0xab,0xc7,0x71,0x28,0x7a,0x64,0x9f,0xd2,0xe8,0x4f };
    const uint8_t CIPHERTEXT[] = { 0xb7,0x0e,0xdc,0x1d,0x68,0x09,0xb3,0x51,0x55,0xfa,0xd7,0xec,0xe5,0x05,0x75,0x62 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-48", "[CFB128][MCT][192][DECRYPT][n48]") {
    const uint8_t KEY[] = { 0x0a,0x07,0x44,0x5e,0xf8,0xcf,0x72,0x62,0xe8,0xc5,0x21,0xec,0x80,0xde,0xe6,0x8c,0x72,0x59,0xac,0x32,0x31,0x3a,0x52,0x07 };
    const uint8_t IV[] = { 0xb9,0x11,0x3b,0x3a,0xac,0x5e,0xab,0xc7,0x71,0x28,0x7a,0x64,0x9f,0xd2,0xe8,0x4f };
    const uint8_t PLAINTEXT[] = { 0x6e,0x08,0xf6,0x25,0x53,0xa8,0xee,0xd5,0x3e,0xc4,0xa4,0xc5,0xb4,0x45,0xc2,0x7e };
    const uint8_t CIPHERTEXT[] = { 0x18,0x31,0x65,0xf9,0x6b,0xc6,0x37,0x71,0x4c,0xc9,0x77,0x2b,0x19,0x47,0xed,0x67 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-49", "[CFB128][MCT][192][DECRYPT][n49]") {
    const uint8_t KEY[] = { 0xd9,0x97,0x8f,0x34,0x95,0x0c,0x48,0x1d,0x86,0xcd,0xd7,0xc9,0xd3,0x76,0x08,0x59,0x4c,0x9d,0x08,0xf7,0x85,0x7f,0x90,0x79 };
    const uint8_t IV[] = { 0x6e,0x08,0xf6,0x25,0x53,0xa8,0xee,0xd5,0x3e,0xc4,0xa4,0xc5,0xb4,0x45,0xc2,0x7e };
    const uint8_t PLAINTEXT[] = { 0x9b,0x3b,0xad,0x6a,0x5b,0x81,0x9e,0xea,0x7c,0xc4,0x8d,0xb8,0x91,0x43,0x7b,0x45 };
    const uint8_t CIPHERTEXT[] = { 0x82,0xaf,0x12,0x48,0xbd,0x5f,0x07,0x80,0xd3,0x90,0xcb,0x6a,0x6d,0xc3,0x3a,0x7f };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-50", "[CFB128][MCT][192][DECRYPT][n50]") {
    const uint8_t KEY[] = { 0x43,0x5d,0x78,0xe8,0xd5,0xe7,0x93,0xc9,0x1d,0xf6,0x7a,0xa3,0x88,0xf7,0x96,0xb3,0x30,0x59,0x85,0x4f,0x14,0x3c,0xeb,0x3c };
    const uint8_t IV[] = { 0x9b,0x3b,0xad,0x6a,0x5b,0x81,0x9e,0xea,0x7c,0xc4,0x8d,0xb8,0x91,0x43,0x7b,0x45 };
    const uint8_t PLAINTEXT[] = { 0x07,0x75,0x90,0x5c,0x1a,0x81,0xb1,0x65,0x54,0x4d,0x02,0x6f,0xd5,0xca,0xbc,0x71 };
    const uint8_t CIPHERTEXT[] = { 0xe4,0xc0,0x7b,0xff,0xd7,0x8a,0x8e,0x0d,0x9a,0xca,0xf7,0xdc,0x40,0xeb,0xdb,0xd4 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-51", "[CFB128][MCT][192][DECRYPT][n51]") {
    const uint8_t KEY[] = { 0x26,0x56,0xf8,0x2c,0xfc,0x75,0x84,0x61,0x1a,0x83,0xea,0xff,0x92,0x76,0x27,0xd6,0x64,0x14,0x87,0x20,0xc1,0xf6,0x57,0x4d };
    const uint8_t IV[] = { 0x07,0x75,0x90,0x5c,0x1a,0x81,0xb1,0x65,0x54,0x4d,0x02,0x6f,0xd5,0xca,0xbc,0x71 };
    const uint8_t PLAINTEXT[] = { 0x2a,0xdc,0x20,0xa4,0x3f,0xd4,0xa2,0x8d,0xcf,0x74,0xaf,0xde,0x33,0x77,0x77,0x76 };
    const uint8_t CIPHERTEXT[] = { 0xd7,0x7c,0x02,0xfa,0x1c,0xb9,0x74,0x6f,0x65,0x0b,0x80,0xc4,0x29,0x92,0x17,0xa8 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-52", "[CFB128][MCT][192][DECRYPT][n52]") {
    const uint8_t KEY[] = { 0x49,0x10,0x92,0x41,0x30,0xee,0xc5,0x1e,0x30,0x5f,0xca,0x5b,0xad,0xa2,0x85,0x5b,0xab,0x60,0x28,0xfe,0xf2,0x81,0x20,0x3b };
    const uint8_t IV[] = { 0x2a,0xdc,0x20,0xa4,0x3f,0xd4,0xa2,0x8d,0xcf,0x74,0xaf,0xde,0x33,0x77,0x77,0x76 };
    const uint8_t PLAINTEXT[] = { 0x0d,0xc0,0x76,0x48,0x95,0x1f,0xc7,0xb9,0xdf,0xaa,0x3d,0xcd,0xf3,0x88,0x7d,0xc0 };
    const uint8_t CIPHERTEXT[] = { 0x54,0xc7,0xca,0xad,0xd4,0xa2,0x63,0x74,0x6f,0x46,0x6a,0x6d,0xcc,0x9b,0x41,0x7f };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-53", "[CFB128][MCT][192][DECRYPT][n53]") {
    const uint8_t KEY[] = { 0xee,0xe1,0x1c,0x5b,0xcf,0x8b,0x2d,0x28,0x3d,0x9f,0xbc,0x13,0x38,0xbd,0x42,0xe2,0x74,0xca,0x15,0x33,0x01,0x09,0x5d,0xfb };
    const uint8_t IV[] = { 0x0d,0xc0,0x76,0x48,0x95,0x1f,0xc7,0xb9,0xdf,0xaa,0x3d,0xcd,0xf3,0x88,0x7d,0xc0 };
    const uint8_t PLAINTEXT[] = { 0x55,0x18,0xf9,0x77,0x08,0xe3,0x59,0x28,0xb0,0x62,0xe1,0x38,0xde,0x73,0x5b,0xc4 };
    const uint8_t CIPHERTEXT[] = { 0xe4,0x5a,0x4f,0x78,0x17,0x00,0x85,0xd7,0xa7,0xf1,0x8e,0x1a,0xff,0x65,0xe8,0x36 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-54", "[CFB128][MCT][192][DECRYPT][n54]") {
    const uint8_t KEY[] = { 0x16,0x04,0x4b,0x92,0x99,0x6c,0x36,0xf9,0x68,0x87,0x45,0x64,0x30,0x5e,0x1b,0xca,0xc4,0xa8,0xf4,0x0b,0xdf,0x7a,0x06,0x3f };
    const uint8_t IV[] = { 0x55,0x18,0xf9,0x77,0x08,0xe3,0x59,0x28,0xb0,0x62,0xe1,0x38,0xde,0x73,0x5b,0xc4 };
    const uint8_t PLAINTEXT[] = { 0x1d,0x71,0xe3,0x98,0xc9,0xc9,0x22,0xaf,0x4a,0xc7,0x58,0x70,0xca,0xe9,0x3e,0xb1 };
    const uint8_t CIPHERTEXT[] = { 0x2e,0x39,0x33,0x8a,0x9d,0xc1,0xcd,0xf5,0xf8,0xe5,0x57,0xc9,0x56,0xe7,0x1b,0xd1 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-55", "[CFB128][MCT][192][DECRYPT][n55]") {
    const uint8_t KEY[] = { 0x74,0xc2,0xc1,0xbf,0x77,0x7e,0xc0,0xf6,0x75,0xf6,0xa6,0xfc,0xf9,0x97,0x39,0x65,0x8e,0x6f,0xac,0x7b,0x15,0x93,0x38,0x8e };
    const uint8_t IV[] = { 0x1d,0x71,0xe3,0x98,0xc9,0xc9,0x22,0xaf,0x4a,0xc7,0x58,0x70,0xca,0xe9,0x3e,0xb1 };
    const uint8_t PLAINTEXT[] = { 0x06,0xb8,0xab,0xe8,0x37,0x2d,0xab,0xb7,0x63,0x86,0x87,0x5b,0x21,0x0a,0xd3,0x1d };
    const uint8_t CIPHERTEXT[] = { 0x36,0x4f,0x5c,0x33,0xac,0x47,0x19,0x6e,0x62,0xc6,0x8a,0x2d,0xee,0x12,0xf6,0x0f };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-56", "[CFB128][MCT][192][DECRYPT][n56]") {
    const uint8_t KEY[] = { 0x07,0x00,0x68,0x0f,0x8e,0x59,0xcc,0xc6,0x73,0x4e,0x0d,0x14,0xce,0xba,0x92,0xd2,0xed,0xe9,0x2b,0x20,0x34,0x99,0xeb,0x93 };
    const uint8_t IV[] = { 0x06,0xb8,0xab,0xe8,0x37,0x2d,0xab,0xb7,0x63,0x86,0x87,0x5b,0x21,0x0a,0xd3,0x1d };
    const uint8_t PLAINTEXT[] = { 0x57,0xeb,0xa6,0x3e,0x21,0xb0,0x79,0xc3,0x05,0x6b,0xa7,0x80,0xe4,0xd7,0xe9,0x7a };
    const uint8_t CIPHERTEXT[] = { 0x04,0x86,0xd7,0x3e,0x99,0xd7,0x9b,0x7b,0x73,0xc2,0xa9,0xb0,0xf9,0x27,0x0c,0x30 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-57", "[CFB128][MCT][192][DECRYPT][n57]") {
    const uint8_t KEY[] = { 0x29,0x40,0x68,0x29,0xf9,0xcf,0x61,0x00,0x24,0xa5,0xab,0x2a,0xef,0x0a,0xeb,0x11,0xe8,0x82,0x8c,0xa0,0xd0,0x4e,0x02,0xe9 };
    const uint8_t IV[] = { 0x57,0xeb,0xa6,0x3e,0x21,0xb0,0x79,0xc3,0x05,0x6b,0xa7,0x80,0xe4,0xd7,0xe9,0x7a };
    const uint8_t PLAINTEXT[] = { 0xe8,0xe5,0x94,0x54,0xfc,0x1d,0xa1,0x6b,0x92,0x1f,0xe8,0x7c,0x5e,0x90,0xed,0xad };
    const uint8_t CIPHERTEXT[] = { 0x18,0x33,0x9a,0x61,0xa1,0xdf,0x18,0xb7,0x2e,0x40,0x00,0x26,0x77,0x96,0xad,0xc6 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-58", "[CFB128][MCT][192][DECRYPT][n58]") {
    const uint8_t KEY[] = { 0x68,0x89,0xe8,0x7c,0xf8,0x8b,0xdc,0xe7,0xcc,0x40,0x3f,0x7e,0x13,0x17,0x4a,0x7a,0x7a,0x9d,0x64,0xdc,0x8e,0xde,0xef,0x44 };
    const uint8_t IV[] = { 0xe8,0xe5,0x94,0x54,0xfc,0x1d,0xa1,0x6b,0x92,0x1f,0xe8,0x7c,0x5e,0x90,0xed,0xad };
    const uint8_t PLAINTEXT[] = { 0x7f,0xd9,0x40,0x46,0x57,0xd4,0xfc,0xa9,0x65,0x63,0x49,0x65,0xcc,0x2a,0xb4,0xfb };
    const uint8_t CIPHERTEXT[] = { 0x33,0xb4,0xdc,0x3d,0xa6,0xad,0xbf,0xac,0x41,0xc9,0x80,0x55,0x01,0x44,0xbd,0xe7 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-59", "[CFB128][MCT][192][DECRYPT][n59]") {
    const uint8_t KEY[] = { 0xad,0xa8,0x90,0x8b,0x79,0x13,0x53,0x4f,0xb3,0x99,0x7f,0x38,0x44,0xc3,0xb6,0xd3,0x1f,0xfe,0x2d,0xb9,0x42,0xf4,0x5b,0xbf };
    const uint8_t IV[] = { 0x7f,0xd9,0x40,0x46,0x57,0xd4,0xfc,0xa9,0x65,0x63,0x49,0x65,0xcc,0x2a,0xb4,0xfb };
    const uint8_t PLAINTEXT[] = { 0x37,0x0a,0xac,0xb4,0xd2,0x9b,0xd7,0xee,0xb6,0x5a,0x5b,0xa7,0x6e,0x07,0x7d,0x02 };
    const uint8_t CIPHERTEXT[] = { 0x84,0x33,0x08,0xc8,0x25,0x0d,0x01,0x17,0xc5,0x21,0x78,0xf7,0x81,0x98,0x8f,0xa8 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-60", "[CFB128][MCT][192][DECRYPT][n60]") {
    const uint8_t KEY[] = { 0x23,0xd3,0x86,0xe9,0x6b,0x50,0x94,0x8a,0x84,0x93,0xd3,0x8c,0x96,0x58,0x61,0x3d,0xa9,0xa4,0x76,0x1e,0x2c,0xf3,0x26,0xbd };
    const uint8_t IV[] = { 0x37,0x0a,0xac,0xb4,0xd2,0x9b,0xd7,0xee,0xb6,0x5a,0x5b,0xa7,0x6e,0x07,0x7d,0x02 };
    const uint8_t PLAINTEXT[] = { 0x09,0x64,0x63,0xa6,0x61,0x66,0xcd,0x13,0xfa,0xbc,0x2b,0xd2,0x1e,0x5e,0xa3,0x0d };
    const uint8_t CIPHERTEXT[] = { 0x9f,0x5d,0xc2,0x87,0x02,0x33,0x11,0xa5,0x8e,0x7b,0x16,0x62,0x12,0x43,0xc7,0xc5 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-61", "[CFB128][MCT][192][DECRYPT][n61]") {
    const uint8_t KEY[] = { 0x6a,0x51,0x2a,0x58,0x96,0xd1,0xb4,0xe0,0x8d,0xf7,0xb0,0x2a,0xf7,0x3e,0xac,0x2e,0x53,0x18,0x5d,0xcc,0x32,0xad,0x85,0xb0 };
    const uint8_t IV[] = { 0x09,0x64,0x63,0xa6,0x61,0x66,0xcd,0x13,0xfa,0xbc,0x2b,0xd2,0x1e,0x5e,0xa3,0x0d };
    const uint8_t PLAINTEXT[] = { 0xdb,0xdb,0x74,0x1d,0xc9,0x43,0xb4,0xc3,0x9e,0x29,0x7e,0x1e,0x42,0xca,0x4d,0x6f };
    const uint8_t CIPHERTEXT[] = { 0x56,0x3e,0x69,0xb2,0x77,0xc4,0xf1,0x41,0x49,0x82,0xac,0xb1,0xfd,0x81,0x20,0x6a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-62", "[CFB128][MCT][192][DECRYPT][n62]") {
    const uint8_t KEY[] = { 0x95,0xb8,0xcf,0x3f,0x24,0xa4,0x21,0x66,0x56,0x2c,0xc4,0x37,0x3e,0x7d,0x18,0xed,0xcd,0x31,0x23,0xd2,0x70,0x67,0xc8,0xdf };
    const uint8_t IV[] = { 0xdb,0xdb,0x74,0x1d,0xc9,0x43,0xb4,0xc3,0x9e,0x29,0x7e,0x1e,0x42,0xca,0x4d,0x6f };
    const uint8_t PLAINTEXT[] = { 0xb4,0xdf,0xc8,0x4e,0x92,0x82,0xfa,0x09,0x71,0x22,0xc1,0x7d,0xd6,0xf5,0xf3,0x95 };
    const uint8_t CIPHERTEXT[] = { 0xb0,0x5b,0x6f,0xa9,0x48,0x4d,0x5d,0xdc,0xff,0xe9,0xe5,0x67,0xb2,0x75,0x95,0x86 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-63", "[CFB128][MCT][192][DECRYPT][n63]") {
    const uint8_t KEY[] = { 0x58,0x58,0x0b,0x96,0x3d,0xc5,0xf1,0xaa,0xe2,0xf3,0x0c,0x79,0xac,0xff,0xe2,0xe4,0xbc,0x13,0xe2,0xaf,0xa6,0x92,0x3b,0x4a };
    const uint8_t IV[] = { 0xb4,0xdf,0xc8,0x4e,0x92,0x82,0xfa,0x09,0x71,0x22,0xc1,0x7d,0xd6,0xf5,0xf3,0x95 };
    const uint8_t PLAINTEXT[] = { 0x29,0x20,0x77,0xee,0x54,0xf7,0xc5,0x2a,0x0f,0x21,0x34,0x9a,0x2d,0x84,0xe2,0xc1 };
    const uint8_t CIPHERTEXT[] = { 0xbc,0x59,0x02,0xf1,0x6b,0x25,0xbe,0xce,0xcd,0xe0,0xc4,0xa9,0x19,0x61,0xd0,0xcc };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-64", "[CFB128][MCT][192][DECRYPT][n64]") {
    const uint8_t KEY[] = { 0x60,0x52,0x7a,0xb1,0x01,0xf5,0x51,0xbc,0xcb,0xd3,0x7b,0x97,0xf8,0x08,0x27,0xce,0xb3,0x32,0xd6,0x35,0x8b,0x16,0xd9,0x8b };
    const uint8_t IV[] = { 0x29,0x20,0x77,0xee,0x54,0xf7,0xc5,0x2a,0x0f,0x21,0x34,0x9a,0x2d,0x84,0xe2,0xc1 };
    const uint8_t PLAINTEXT[] = { 0xa6,0x24,0x15,0x98,0x7a,0x6b,0xf2,0x91,0xe5,0xb9,0x03,0x32,0xd5,0x51,0x52,0x61 };
    const uint8_t CIPHERTEXT[] = { 0x31,0xa1,0x77,0xc3,0xe1,0x05,0x2f,0x79,0x38,0x0a,0x71,0x27,0x3c,0x30,0xa0,0x16 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-65", "[CFB128][MCT][192][DECRYPT][n65]") {
    const uint8_t KEY[] = { 0x86,0x94,0x5d,0x2f,0xc0,0x98,0xbf,0xe6,0x6d,0xf7,0x6e,0x0f,0x82,0x63,0xd5,0x5f,0x56,0x8b,0xd5,0x07,0x5e,0x47,0x8b,0xea };
    const uint8_t IV[] = { 0xa6,0x24,0x15,0x98,0x7a,0x6b,0xf2,0x91,0xe5,0xb9,0x03,0x32,0xd5,0x51,0x52,0x61 };
    const uint8_t PLAINTEXT[] = { 0xfb,0xb6,0x68,0xdc,0xd5,0xf8,0xbb,0xf6,0x61,0xc7,0x1d,0x7f,0x6a,0x8d,0x68,0x56 };
    const uint8_t CIPHERTEXT[] = { 0x91,0xae,0x3c,0xda,0xde,0xb5,0xe0,0x83,0xe6,0xc6,0x27,0x9e,0xc1,0x6d,0xee,0x5a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-66", "[CFB128][MCT][192][DECRYPT][n66]") {
    const uint8_t KEY[] = { 0x35,0x4b,0x1b,0xfb,0x46,0x73,0xf0,0x6a,0x96,0x41,0x06,0xd3,0x57,0x9b,0x6e,0xa9,0x37,0x4c,0xc8,0x78,0x34,0xca,0xe3,0xbc };
    const uint8_t IV[] = { 0xfb,0xb6,0x68,0xdc,0xd5,0xf8,0xbb,0xf6,0x61,0xc7,0x1d,0x7f,0x6a,0x8d,0x68,0x56 };
    const uint8_t PLAINTEXT[] = { 0xd6,0xde,0x06,0x5a,0x9b,0xff,0xfd,0x6f,0x7b,0x44,0xc2,0x29,0x36,0x1d,0x95,0x9c };
    const uint8_t CIPHERTEXT[] = { 0xe4,0xe9,0x15,0x0a,0x75,0xc9,0x49,0xaa,0xb3,0xdf,0x46,0xd4,0x86,0xeb,0x4f,0x8c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-67", "[CFB128][MCT][192][DECRYPT][n67]") {
    const uint8_t KEY[] = { 0xe6,0x02,0x8a,0x19,0x38,0x1f,0xd6,0x86,0x40,0x9f,0x00,0x89,0xcc,0x64,0x93,0xc6,0x4c,0x08,0x0a,0x51,0x02,0xd7,0x76,0x20 };
    const uint8_t IV[] = { 0xd6,0xde,0x06,0x5a,0x9b,0xff,0xfd,0x6f,0x7b,0x44,0xc2,0x29,0x36,0x1d,0x95,0x9c };
    const uint8_t PLAINTEXT[] = { 0x6f,0xa4,0xeb,0xdb,0xa9,0x2f,0xba,0x79,0x22,0x70,0x8a,0xb5,0xa0,0x22,0x06,0xd2 };
    const uint8_t CIPHERTEXT[] = { 0xf0,0x9f,0xe1,0xae,0xad,0x4a,0x2f,0x1d,0xd3,0x49,0x91,0xe2,0x7e,0x6c,0x26,0xec };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-68", "[CFB128][MCT][192][DECRYPT][n68]") {
    const uint8_t KEY[] = { 0xd1,0x29,0xb6,0x36,0xb1,0x24,0x19,0x6f,0x2f,0x3b,0xeb,0x52,0x65,0x4b,0x29,0xbf,0x6e,0x78,0x80,0xe4,0xa2,0xf5,0x70,0xf2 };
    const uint8_t IV[] = { 0x6f,0xa4,0xeb,0xdb,0xa9,0x2f,0xba,0x79,0x22,0x70,0x8a,0xb5,0xa0,0x22,0x06,0xd2 };
    const uint8_t PLAINTEXT[] = { 0xcc,0xe3,0xca,0x62,0x35,0x92,0x97,0x46,0x8b,0x4b,0xc7,0xde,0xee,0xb8,0xf9,0x51 };
    const uint8_t CIPHERTEXT[] = { 0xa6,0x16,0x61,0xde,0xb2,0xee,0xff,0xc1,0x37,0x2b,0x3c,0x2f,0x89,0x3b,0xcf,0xe9 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-69", "[CFB128][MCT][192][DECRYPT][n69]") {
    const uint8_t KEY[] = { 0x34,0xab,0x52,0x4f,0xc8,0xe1,0x46,0xf3,0xe3,0xd8,0x21,0x30,0x50,0xd9,0xbe,0xf9,0xe5,0x33,0x47,0x3a,0x4c,0x4d,0x89,0xa3 };
    const uint8_t IV[] = { 0xcc,0xe3,0xca,0x62,0x35,0x92,0x97,0x46,0x8b,0x4b,0xc7,0xde,0xee,0xb8,0xf9,0x51 };
    const uint8_t PLAINTEXT[] = { 0xde,0x50,0x03,0xb0,0x3a,0xa8,0xb3,0x06,0x35,0xa2,0x14,0x7c,0x71,0x0b,0x27,0xf8 };
    const uint8_t CIPHERTEXT[] = { 0xde,0x30,0x98,0xf3,0x8b,0x6b,0xad,0x5d,0xe5,0x82,0xe4,0x79,0x79,0xc5,0x5f,0x9c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-70", "[CFB128][MCT][192][DECRYPT][n70]") {
    const uint8_t KEY[] = { 0xee,0x73,0x94,0x9c,0x20,0xde,0x58,0x3d,0x3d,0x88,0x22,0x80,0x6a,0x71,0x0d,0xff,0xd0,0x91,0x53,0x46,0x3d,0x46,0xae,0x5b };
    const uint8_t IV[] = { 0xde,0x50,0x03,0xb0,0x3a,0xa8,0xb3,0x06,0x35,0xa2,0x14,0x7c,0x71,0x0b,0x27,0xf8 };
    const uint8_t PLAINTEXT[] = { 0xf6,0x5e,0x59,0x5a,0xc7,0xb7,0xd4,0xac,0x56,0x3c,0x5d,0x73,0x79,0xe8,0x5a,0xdf };
    const uint8_t CIPHERTEXT[] = { 0x92,0x50,0x54,0x81,0xdf,0x27,0xc2,0x2c,0xda,0xd8,0xc6,0xd3,0xe8,0x3f,0x1e,0xce };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-71", "[CFB128][MCT][192][DECRYPT][n71]") {
    const uint8_t KEY[] = { 0xfd,0x3e,0xc8,0x96,0xe8,0x80,0x22,0x44,0xcb,0xd6,0x7b,0xda,0xad,0xc6,0xd9,0x53,0x86,0xad,0x0e,0x35,0x44,0xae,0xf4,0x84 };
    const uint8_t IV[] = { 0xf6,0x5e,0x59,0x5a,0xc7,0xb7,0xd4,0xac,0x56,0x3c,0x5d,0x73,0x79,0xe8,0x5a,0xdf };
    const uint8_t PLAINTEXT[] = { 0x5c,0xb1,0x03,0xdb,0xa9,0x2e,0x88,0x30,0x3c,0xb5,0xeb,0x44,0x46,0x13,0xda,0x65 };
    const uint8_t CIPHERTEXT[] = { 0x1f,0xab,0xa9,0x74,0x64,0x19,0x28,0xc8,0x13,0x4d,0x5c,0x0a,0xc8,0x5e,0x7a,0x79 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-72", "[CFB128][MCT][192][DECRYPT][n72]") {
    const uint8_t KEY[] = { 0x4a,0x23,0x02,0x84,0x80,0xa2,0x16,0x81,0x97,0x67,0x78,0x01,0x04,0xe8,0x51,0x63,0xba,0x18,0xe5,0x71,0x02,0xbd,0x2e,0xe1 };
    const uint8_t IV[] = { 0x5c,0xb1,0x03,0xdb,0xa9,0x2e,0x88,0x30,0x3c,0xb5,0xeb,0x44,0x46,0x13,0xda,0x65 };
    const uint8_t PLAINTEXT[] = { 0x03,0x98,0xdb,0xad,0x34,0xa9,0xda,0xac,0x60,0xbe,0x33,0xc7,0x0d,0x86,0xaa,0x16 };
    const uint8_t CIPHERTEXT[] = { 0xae,0x9c,0xda,0x04,0x8f,0xf8,0x28,0x50,0xb7,0x1d,0xca,0x12,0x68,0x22,0x34,0xc5 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-73", "[CFB128][MCT][192][DECRYPT][n73]") {
    const uint8_t KEY[] = { 0x40,0x2e,0x1e,0x10,0xf6,0xd2,0x29,0x43,0x94,0xff,0xa3,0xac,0x30,0x41,0x8b,0xcf,0xda,0xa6,0xd6,0xb6,0x0f,0x3b,0x84,0xf7 };
    const uint8_t IV[] = { 0x03,0x98,0xdb,0xad,0x34,0xa9,0xda,0xac,0x60,0xbe,0x33,0xc7,0x0d,0x86,0xaa,0x16 };
    const uint8_t PLAINTEXT[] = { 0x12,0x44,0x34,0x2d,0xc6,0x53,0xfa,0x1b,0x95,0xb7,0x5e,0x44,0x36,0xd2,0x3f,0x96 };
    const uint8_t CIPHERTEXT[] = { 0xa7,0xb5,0x85,0x81,0xab,0xc7,0xcd,0x18,0x0a,0x0d,0x1c,0x94,0x76,0x70,0x3f,0xc2 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-74", "[CFB128][MCT][192][DECRYPT][n74]") {
    const uint8_t KEY[] = { 0xd3,0xd0,0x08,0x35,0xe5,0x2a,0xd0,0xd4,0x86,0xbb,0x97,0x81,0xf6,0x12,0x71,0xd4,0x4f,0x11,0x88,0xf2,0x39,0xe9,0xbb,0x61 };
    const uint8_t IV[] = { 0x12,0x44,0x34,0x2d,0xc6,0x53,0xfa,0x1b,0x95,0xb7,0x5e,0x44,0x36,0xd2,0x3f,0x96 };
    const uint8_t PLAINTEXT[] = { 0x88,0xa3,0x49,0x7d,0xc9,0x74,0xd6,0x9b,0x75,0x45,0x74,0x8d,0xa7,0x60,0x5d,0x37 };
    const uint8_t CIPHERTEXT[] = { 0x7c,0xb2,0x70,0xfd,0x2e,0x89,0x3d,0x55,0x93,0xfe,0x16,0x25,0x13,0xf8,0xf9,0x97 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-75", "[CFB128][MCT][192][DECRYPT][n75]") {
    const uint8_t KEY[] = { 0x71,0x27,0xa7,0x10,0x2d,0x6b,0x20,0x52,0x0e,0x18,0xde,0xfc,0x3f,0x66,0xa7,0x4f,0x3a,0x54,0xfc,0x7f,0x9e,0x89,0xe6,0x56 };
    const uint8_t IV[] = { 0x88,0xa3,0x49,0x7d,0xc9,0x74,0xd6,0x9b,0x75,0x45,0x74,0x8d,0xa7,0x60,0x5d,0x37 };
    const uint8_t PLAINTEXT[] = { 0x57,0xea,0xbc,0x6b,0x8b,0x7f,0xa2,0x7c,0x8c,0x3d,0x38,0x09,0x8a,0x21,0x94,0x75 };
    const uint8_t CIPHERTEXT[] = { 0x4f,0x15,0x9e,0xdc,0x0d,0x93,0x82,0x6e,0xa2,0xf7,0xaf,0x25,0xc8,0x41,0xf0,0x86 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-76", "[CFB128][MCT][192][DECRYPT][n76]") {
    const uint8_t KEY[] = { 0x5e,0x7c,0x47,0xa6,0x8c,0xf1,0xbc,0x5e,0x59,0xf2,0x62,0x97,0xb4,0x19,0x05,0x33,0xb6,0x69,0xc4,0x76,0x14,0xa8,0x72,0x23 };
    const uint8_t IV[] = { 0x57,0xea,0xbc,0x6b,0x8b,0x7f,0xa2,0x7c,0x8c,0x3d,0x38,0x09,0x8a,0x21,0x94,0x75 };
    const uint8_t PLAINTEXT[] = { 0xb2,0xdc,0x55,0x8a,0xc9,0xaa,0x85,0x62,0x0a,0x95,0xf4,0x0d,0xb1,0x1b,0x8e,0x5b };
    const uint8_t CIPHERTEXT[] = { 0x33,0xac,0x8c,0x7e,0x10,0x51,0x19,0x46,0x2f,0x5b,0xe0,0xb6,0xa1,0x9a,0x9c,0x0c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-77", "[CFB128][MCT][192][DECRYPT][n77]") {
    const uint8_t KEY[] = { 0x21,0x5a,0x16,0xd4,0xf7,0xb9,0x5e,0xd2,0xeb,0x2e,0x37,0x1d,0x7d,0xb3,0x80,0x51,0xbc,0xfc,0x30,0x7b,0xa5,0xb3,0xfc,0x78 };
    const uint8_t IV[] = { 0xb2,0xdc,0x55,0x8a,0xc9,0xaa,0x85,0x62,0x0a,0x95,0xf4,0x0d,0xb1,0x1b,0x8e,0x5b };
    const uint8_t PLAINTEXT[] = { 0x46,0xe8,0x77,0xda,0x7b,0x52,0x72,0x62,0x4f,0xcc,0xa8,0x4f,0x12,0x97,0xa9,0x5f };
    const uint8_t CIPHERTEXT[] = { 0xf8,0x7b,0x9f,0x66,0x54,0x37,0xa3,0xef,0x7f,0x26,0x51,0x72,0x7b,0x48,0xe2,0x8c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-78", "[CFB128][MCT][192][DECRYPT][n78]") {
    const uint8_t KEY[] = { 0x86,0x34,0x5e,0x21,0x8a,0xfb,0x90,0xa3,0xad,0xc6,0x40,0xc7,0x06,0xe1,0xf2,0x33,0xf3,0x30,0x98,0x34,0xb7,0x24,0x55,0x27 };
    const uint8_t IV[] = { 0x46,0xe8,0x77,0xda,0x7b,0x52,0x72,0x62,0x4f,0xcc,0xa8,0x4f,0x12,0x97,0xa9,0x5f };
    const uint8_t PLAINTEXT[] = { 0x9c,0x8f,0x9e,0xb8,0x65,0x95,0x86,0xec,0xc8,0x60,0xb3,0xa3,0xd4,0xad,0xc5,0x75 };
    const uint8_t CIPHERTEXT[] = { 0xb0,0x0c,0xf4,0x45,0x06,0x6c,0x03,0xa3,0xa7,0x6e,0x48,0xf5,0x7d,0x42,0xce,0x71 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-79", "[CFB128][MCT][192][DECRYPT][n79]") {
    const uint8_t KEY[] = { 0x66,0x23,0x8b,0x3f,0x17,0xa6,0x79,0x4e,0x31,0x49,0xde,0x7f,0x63,0x74,0x74,0xdf,0x3b,0x50,0x2b,0x97,0x63,0x89,0x90,0x52 };
    const uint8_t IV[] = { 0x9c,0x8f,0x9e,0xb8,0x65,0x95,0x86,0xec,0xc8,0x60,0xb3,0xa3,0xd4,0xad,0xc5,0x75 };
    const uint8_t PLAINTEXT[] = { 0xc0,0x4f,0xff,0x9c,0x49,0x1f,0x93,0x9c,0x1f,0x44,0x72,0xbb,0x77,0xed,0x47,0xef };
    const uint8_t CIPHERTEXT[] = { 0x64,0x22,0xbb,0x3e,0x8f,0xb9,0x2c,0xda,0xe0,0x17,0xd5,0x1e,0x9d,0x5d,0xe9,0xed };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-80", "[CFB128][MCT][192][DECRYPT][n80]") {
    const uint8_t KEY[] = { 0x07,0xc1,0x23,0x44,0x98,0x84,0x78,0xc4,0xf1,0x06,0x21,0xe3,0x2a,0x6b,0xe7,0x43,0x24,0x14,0x59,0x2c,0x14,0x64,0xd7,0xbd };
    const uint8_t IV[] = { 0xc0,0x4f,0xff,0x9c,0x49,0x1f,0x93,0x9c,0x1f,0x44,0x72,0xbb,0x77,0xed,0x47,0xef };
    const uint8_t PLAINTEXT[] = { 0x3a,0x55,0xcc,0x3b,0x6f,0x35,0x2c,0x18,0x82,0x9d,0x1c,0x0b,0x4f,0x00,0x65,0xee };
    const uint8_t CIPHERTEXT[] = { 0xc3,0xdf,0xab,0xbd,0x1a,0xbe,0xf4,0x8a,0x61,0xe2,0xa8,0x7b,0x8f,0x22,0x01,0x8a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-81", "[CFB128][MCT][192][DECRYPT][n81]") {
    const uint8_t KEY[] = { 0xa3,0xde,0xa9,0x6e,0x44,0xe5,0x36,0xc2,0xcb,0x53,0xed,0xd8,0x45,0x5e,0xcb,0x5b,0xa6,0x89,0x45,0x27,0x5b,0x64,0xb2,0x53 };
    const uint8_t IV[] = { 0x3a,0x55,0xcc,0x3b,0x6f,0x35,0x2c,0x18,0x82,0x9d,0x1c,0x0b,0x4f,0x00,0x65,0xee };
    const uint8_t PLAINTEXT[] = { 0xe2,0x96,0x9e,0xb7,0x0d,0x64,0xb9,0xc7,0x14,0x67,0x3e,0xb2,0x17,0x25,0xcd,0xce };
    const uint8_t CIPHERTEXT[] = { 0xdf,0xb9,0x35,0x7a,0x2e,0x8d,0x78,0x72,0xa4,0x1f,0x8a,0x2a,0xdc,0x61,0x4e,0x06 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-82", "[CFB128][MCT][192][DECRYPT][n82]") {
    const uint8_t KEY[] = { 0xaf,0x46,0xca,0x8c,0x5d,0x58,0x48,0x3c,0x29,0xc5,0x73,0x6f,0x48,0x3a,0x72,0x9c,0xb2,0xee,0x7b,0x95,0x4c,0x41,0x7f,0x9d };
    const uint8_t IV[] = { 0xe2,0x96,0x9e,0xb7,0x0d,0x64,0xb9,0xc7,0x14,0x67,0x3e,0xb2,0x17,0x25,0xcd,0xce };
    const uint8_t PLAINTEXT[] = { 0x4f,0xd4,0x7d,0x13,0x1c,0xd7,0x7f,0x05,0xc4,0x7d,0xca,0xf2,0x33,0x1c,0xb8,0x3c };
    const uint8_t CIPHERTEXT[] = { 0x62,0x38,0xf1,0x08,0xbe,0x7d,0x22,0x56,0x0c,0x98,0x63,0xe2,0x19,0xbd,0x7e,0xfe };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-83", "[CFB128][MCT][192][DECRYPT][n83]") {
    const uint8_t KEY[] = { 0x5d,0xd0,0x24,0xd0,0xf6,0x88,0x10,0xc9,0x66,0x11,0x0e,0x7c,0x54,0xed,0x0d,0x99,0x76,0x93,0xb1,0x67,0x7f,0x5d,0xc7,0xa1 };
    const uint8_t IV[] = { 0x4f,0xd4,0x7d,0x13,0x1c,0xd7,0x7f,0x05,0xc4,0x7d,0xca,0xf2,0x33,0x1c,0xb8,0x3c };
    const uint8_t PLAINTEXT[] = { 0xb5,0x93,0xcc,0x7e,0x6d,0x2f,0xbb,0x8f,0x6e,0xfe,0x31,0x8d,0x69,0xb0,0x5d,0xb3 };
    const uint8_t CIPHERTEXT[] = { 0x2b,0x66,0x4b,0xdd,0x83,0x7b,0x10,0xdb,0xf2,0x96,0xee,0x5c,0xab,0xd0,0x58,0xf5 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-84", "[CFB128][MCT][192][DECRYPT][n84]") {
    const uint8_t KEY[] = { 0x81,0x18,0x53,0x3c,0xe7,0x57,0xca,0x0b,0xd3,0x82,0xc2,0x02,0x39,0xc2,0xb6,0x16,0x18,0x6d,0x80,0xea,0x16,0xed,0x9a,0x12 };
    const uint8_t IV[] = { 0xb5,0x93,0xcc,0x7e,0x6d,0x2f,0xbb,0x8f,0x6e,0xfe,0x31,0x8d,0x69,0xb0,0x5d,0xb3 };
    const uint8_t PLAINTEXT[] = { 0x58,0xbb,0x29,0x59,0x24,0x39,0xca,0x53,0x0c,0x89,0xac,0x77,0x2d,0xb5,0xe5,0x96 };
    const uint8_t CIPHERTEXT[] = { 0xd2,0xb1,0x49,0x51,0xd7,0x16,0xd0,0x7a,0xdc,0xc8,0x77,0xec,0x11,0xdf,0xda,0xc2 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-85", "[CFB128][MCT][192][DECRYPT][n85]") {
    const uint8_t KEY[] = { 0x79,0xa5,0x4c,0x10,0xfe,0x1d,0x83,0xeb,0x8b,0x39,0xeb,0x5b,0x1d,0xfb,0x7c,0x45,0x14,0xe4,0x2c,0x9d,0x3b,0x58,0x7f,0x84 };
    const uint8_t IV[] = { 0x58,0xbb,0x29,0x59,0x24,0x39,0xca,0x53,0x0c,0x89,0xac,0x77,0x2d,0xb5,0xe5,0x96 };
    const uint8_t PLAINTEXT[] = { 0x36,0x1d,0xbc,0x51,0xce,0x5b,0xcc,0xc2,0x7f,0x3d,0xc4,0x1f,0xf6,0xb0,0xe4,0x14 };
    const uint8_t CIPHERTEXT[] = { 0x3e,0xde,0x02,0xe5,0xeb,0xa4,0xab,0xff,0xf8,0xbd,0x1f,0x2c,0x19,0x4a,0x49,0xe0 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-86", "[CFB128][MCT][192][DECRYPT][n86]") {
    const uint8_t KEY[] = { 0x98,0x0d,0xf7,0xbd,0x8c,0x43,0x2d,0x91,0xbd,0x24,0x57,0x0a,0xd3,0xa0,0xb0,0x87,0x6b,0xd9,0xe8,0x82,0xcd,0xe8,0x9b,0x90 };
    const uint8_t IV[] = { 0x36,0x1d,0xbc,0x51,0xce,0x5b,0xcc,0xc2,0x7f,0x3d,0xc4,0x1f,0xf6,0xb0,0xe4,0x14 };
    const uint8_t PLAINTEXT[] = { 0xed,0x30,0x8c,0x47,0x18,0x1d,0xe3,0x00,0x58,0x30,0x2d,0x99,0x91,0x91,0x2a,0xff };
    const uint8_t CIPHERTEXT[] = { 0xb2,0x9b,0x5d,0x2e,0xdf,0xc0,0x80,0x2b,0xe1,0xa8,0xbb,0xad,0x72,0x5e,0xae,0x7a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-87", "[CFB128][MCT][192][DECRYPT][n87]") {
    const uint8_t KEY[] = { 0x20,0x74,0x4a,0xfc,0xc3,0xba,0xd7,0xc5,0x50,0x14,0xdb,0x4d,0xcb,0xbd,0x53,0x87,0x33,0xe9,0xc5,0x1b,0x5c,0x79,0xb1,0x6f };
    const uint8_t IV[] = { 0xed,0x30,0x8c,0x47,0x18,0x1d,0xe3,0x00,0x58,0x30,0x2d,0x99,0x91,0x91,0x2a,0xff };
    const uint8_t PLAINTEXT[] = { 0xc1,0x79,0xc4,0xc4,0xbf,0x40,0xb7,0xff,0xc9,0x1a,0x2f,0x3a,0xc3,0x05,0x8b,0xd7 };
    const uint8_t CIPHERTEXT[] = { 0xf4,0x33,0x5f,0x06,0xc9,0xb1,0x05,0x1a,0xb8,0x79,0xbd,0x41,0x4f,0xf9,0xfa,0x54 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-88", "[CFB128][MCT][192][DECRYPT][n88]") {
    const uint8_t KEY[] = { 0x86,0x2d,0xff,0x79,0x10,0x5d,0x55,0x57,0x91,0x6d,0x1f,0x89,0x74,0xfd,0xe4,0x78,0xfa,0xf3,0xea,0x21,0x9f,0x7c,0x3a,0xb8 };
    const uint8_t IV[] = { 0xc1,0x79,0xc4,0xc4,0xbf,0x40,0xb7,0xff,0xc9,0x1a,0x2f,0x3a,0xc3,0x05,0x8b,0xd7 };
    const uint8_t PLAINTEXT[] = { 0x57,0xcc,0x83,0x69,0x48,0xc0,0x86,0x36,0x90,0x5a,0xc1,0x31,0xe3,0xcf,0xce,0xa8 };
    const uint8_t CIPHERTEXT[] = { 0x19,0xf8,0xf1,0xa3,0x81,0xd8,0x1e,0xde,0xa6,0x59,0xb5,0x85,0xd3,0xe7,0x82,0x92 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-89", "[CFB128][MCT][192][DECRYPT][n89]") {
    const uint8_t KEY[] = { 0x36,0xdc,0x3b,0xc8,0x12,0xf8,0x2a,0x02,0xc6,0xa1,0x9c,0xe0,0x3c,0x3d,0x62,0x4e,0x6a,0xa9,0x2b,0x10,0x7c,0xb3,0xf4,0x10 };
    const uint8_t IV[] = { 0x57,0xcc,0x83,0x69,0x48,0xc0,0x86,0x36,0x90,0x5a,0xc1,0x31,0xe3,0xcf,0xce,0xa8 };
    const uint8_t PLAINTEXT[] = { 0x36,0xf3,0x36,0x86,0xdd,0x10,0xdd,0xfb,0x57,0x56,0xd1,0x94,0xa3,0x60,0xe5,0xbd };
    const uint8_t CIPHERTEXT[] = { 0x70,0xfb,0xc4,0xeb,0xef,0x71,0xcd,0x05,0xb0,0xf1,0xc4,0xb1,0x02,0xa5,0x7f,0x55 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-90", "[CFB128][MCT][192][DECRYPT][n90]") {
    const uint8_t KEY[] = { 0x6e,0x57,0xae,0xd8,0x4c,0x2f,0x48,0x94,0xf0,0x52,0xaa,0x66,0xe1,0x2d,0xbf,0xb5,0x3d,0xff,0xfa,0x84,0xdf,0xd3,0x11,0xad };
    const uint8_t IV[] = { 0x36,0xf3,0x36,0x86,0xdd,0x10,0xdd,0xfb,0x57,0x56,0xd1,0x94,0xa3,0x60,0xe5,0xbd };
    const uint8_t PLAINTEXT[] = { 0xfe,0x42,0x2f,0x6f,0xbe,0xd9,0xa7,0xbb,0x7e,0xa4,0xd6,0x38,0xe7,0x73,0x3f,0x97 };
    const uint8_t CIPHERTEXT[] = { 0x7e,0xf2,0x6e,0x40,0x34,0x9a,0x27,0x34,0x58,0x8b,0x95,0x10,0x5e,0xd7,0x62,0x96 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-91", "[CFB128][MCT][192][DECRYPT][n91]") {
    const uint8_t KEY[] = { 0xd6,0xd8,0xc3,0x4f,0x51,0xff,0xfb,0xec,0x0e,0x10,0x85,0x09,0x5f,0xf4,0x18,0x0e,0x43,0x5b,0x2c,0xbc,0x38,0xa0,0x2e,0x3a };
    const uint8_t IV[] = { 0xfe,0x42,0x2f,0x6f,0xbe,0xd9,0xa7,0xbb,0x7e,0xa4,0xd6,0x38,0xe7,0x73,0x3f,0x97 };
    const uint8_t PLAINTEXT[] = { 0xc3,0xb7,0x9d,0x81,0xc1,0x9c,0xdb,0x00,0x03,0xf2,0x1a,0xac,0x34,0x67,0xe0,0xcb };
    const uint8_t CIPHERTEXT[] = { 0x7f,0xd0,0xd0,0x23,0x4d,0xcc,0xeb,0x1e,0xb8,0x8f,0x6d,0x97,0x1d,0xd0,0xb3,0x78 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-92", "[CFB128][MCT][192][DECRYPT][n92]") {
    const uint8_t KEY[] = { 0x88,0x70,0xd4,0x9c,0xd6,0xb5,0x9b,0x8b,0xcd,0xa7,0x18,0x88,0x9e,0x68,0xc3,0x0e,0x40,0xa9,0x36,0x10,0x0c,0xc7,0xce,0xf1 };
    const uint8_t IV[] = { 0xc3,0xb7,0x9d,0x81,0xc1,0x9c,0xdb,0x00,0x03,0xf2,0x1a,0xac,0x34,0x67,0xe0,0xcb };
    const uint8_t PLAINTEXT[] = { 0x47,0xf9,0x30,0xeb,0x23,0x63,0x54,0x9a,0xef,0x7a,0x5c,0x58,0x8e,0xe5,0x8c,0x9e };
    const uint8_t CIPHERTEXT[] = { 0xfd,0x89,0xad,0xe4,0xf7,0x6a,0x9e,0x4e,0x5e,0xa8,0x17,0xd3,0x87,0x4a,0x60,0x67 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-93", "[CFB128][MCT][192][DECRYPT][n93]") {
    const uint8_t KEY[] = { 0x26,0x40,0xcd,0x0a,0x36,0xb0,0xbe,0x9b,0x8a,0x5e,0x28,0x63,0xbd,0x0b,0x97,0x94,0xaf,0xd3,0x6a,0x48,0x82,0x22,0x42,0x6f };
    const uint8_t IV[] = { 0x47,0xf9,0x30,0xeb,0x23,0x63,0x54,0x9a,0xef,0x7a,0x5c,0x58,0x8e,0xe5,0x8c,0x9e };
    const uint8_t PLAINTEXT[] = { 0xa7,0x26,0x1f,0x3d,0xdf,0x05,0x43,0x2c,0x12,0x71,0xe8,0xa9,0x63,0x2f,0xbb,0xe7 };
    const uint8_t CIPHERTEXT[] = { 0x71,0x43,0x43,0xb3,0xc2,0xde,0xef,0x46,0xae,0x30,0x19,0x96,0xe0,0x05,0x25,0x10 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-94", "[CFB128][MCT][192][DECRYPT][n94]") {
    const uint8_t KEY[] = { 0x8a,0x1c,0x53,0x1c,0xd2,0x36,0x63,0x4e,0x2d,0x78,0x37,0x5e,0x62,0x0e,0xd4,0xb8,0xbd,0xa2,0x82,0xe1,0xe1,0x0d,0xf9,0x88 };
    const uint8_t IV[] = { 0xa7,0x26,0x1f,0x3d,0xdf,0x05,0x43,0x2c,0x12,0x71,0xe8,0xa9,0x63,0x2f,0xbb,0xe7 };
    const uint8_t PLAINTEXT[] = { 0x56,0xc7,0x64,0x88,0xde,0x17,0xef,0x2f,0x58,0xdb,0xcb,0x50,0x58,0x29,0x9e,0x3a };
    const uint8_t CIPHERTEXT[] = { 0xe6,0x90,0x9e,0xce,0x83,0xb2,0xcf,0x3e,0xac,0x5c,0x9e,0x16,0xe4,0x86,0xdd,0xd5 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-95", "[CFB128][MCT][192][DECRYPT][n95]") {
    const uint8_t KEY[] = { 0xef,0x18,0xf2,0xec,0xed,0x30,0xdf,0x9e,0x7b,0xbf,0x53,0xd6,0xbc,0x19,0x3b,0x97,0xe5,0x79,0x49,0xb1,0xb9,0x24,0x67,0xb2 };
    const uint8_t IV[] = { 0x56,0xc7,0x64,0x88,0xde,0x17,0xef,0x2f,0x58,0xdb,0xcb,0x50,0x58,0x29,0x9e,0x3a };
    const uint8_t PLAINTEXT[] = { 0xd6,0x5d,0xb6,0x1e,0x25,0xd5,0xc5,0x79,0xb5,0xc2,0xe9,0x32,0xc3,0x1f,0xba,0x52 };
    const uint8_t CIPHERTEXT[] = { 0x4d,0xb1,0x71,0xac,0x2d,0xb9,0xcc,0xa7,0x65,0x04,0xa1,0xf0,0x3f,0x06,0xbc,0xd0 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-96", "[CFB128][MCT][192][DECRYPT][n96]") {
    const uint8_t KEY[] = { 0xe5,0xc3,0x3d,0x6a,0x6c,0x72,0xb1,0x46,0xad,0xe2,0xe5,0xc8,0x99,0xcc,0xfe,0xee,0x50,0xbb,0xa0,0x83,0x7a,0x3b,0xdd,0xe0 };
    const uint8_t IV[] = { 0xd6,0x5d,0xb6,0x1e,0x25,0xd5,0xc5,0x79,0xb5,0xc2,0xe9,0x32,0xc3,0x1f,0xba,0x52 };
    const uint8_t PLAINTEXT[] = { 0xfe,0x8f,0x1b,0x14,0x48,0x89,0x92,0x57,0x10,0x57,0x83,0x43,0x0e,0x9c,0x78,0x97 };
    const uint8_t CIPHERTEXT[] = { 0x76,0xba,0x2a,0x8a,0x33,0x46,0xc6,0x27,0x0a,0xdb,0xcf,0x86,0x81,0x42,0x6e,0xd8 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-97", "[CFB128][MCT][192][DECRYPT][n97]") {
    const uint8_t KEY[] = { 0x6e,0xb3,0xbb,0x93,0xe7,0x3e,0x14,0x29,0x53,0x6d,0xfe,0xdc,0xd1,0x45,0x6c,0xb9,0x40,0xec,0x23,0xc0,0x74,0xa7,0xa5,0x77 };
    const uint8_t IV[] = { 0xfe,0x8f,0x1b,0x14,0x48,0x89,0x92,0x57,0x10,0x57,0x83,0x43,0x0e,0x9c,0x78,0x97 };
    const uint8_t PLAINTEXT[] = { 0xd1,0xc7,0xe8,0xc8,0x65,0xf7,0xc2,0xcf,0xc9,0xde,0x3d,0xe9,0x11,0xdc,0xa8,0xe2 };
    const uint8_t CIPHERTEXT[] = { 0xa0,0xee,0xb9,0x44,0x2c,0xe6,0xc7,0xc5,0x8b,0x70,0x86,0xf9,0x8b,0x4c,0xa5,0x6f };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-98", "[CFB128][MCT][192][DECRYPT][n98]") {
    const uint8_t KEY[] = { 0x1c,0x7c,0xa8,0x14,0xc2,0x58,0xc5,0x5e,0x82,0xaa,0x16,0x14,0xb4,0xb2,0xae,0x76,0x89,0x32,0x1e,0x29,0x65,0x7b,0x0d,0x95 };
    const uint8_t IV[] = { 0xd1,0xc7,0xe8,0xc8,0x65,0xf7,0xc2,0xcf,0xc9,0xde,0x3d,0xe9,0x11,0xdc,0xa8,0xe2 };
    const uint8_t PLAINTEXT[] = { 0x2d,0x3e,0x91,0x15,0x6c,0xc1,0x6c,0x4a,0x07,0xb7,0x42,0x47,0x71,0x2f,0x0b,0x0c };
    const uint8_t CIPHERTEXT[] = { 0x72,0x11,0xb1,0x98,0x9c,0x91,0x59,0x39,0x72,0xcf,0x13,0x87,0x25,0x66,0xd1,0x77 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT192-DECRYPT-99", "[CFB128][MCT][192][DECRYPT][n99]") {
    const uint8_t KEY[] = { 0x9a,0x6a,0xe1,0xa7,0x03,0xd7,0xd1,0xc9,0xaf,0x94,0x87,0x01,0xd8,0x73,0xc2,0x3c,0x8e,0x85,0x5c,0x6e,0x14,0x54,0x06,0x99 };
    const uint8_t IV[] = { 0x2d,0x3e,0x91,0x15,0x6c,0xc1,0x6c,0x4a,0x07,0xb7,0x42,0x47,0x71,0x2f,0x0b,0x0c };
    const uint8_t PLAINTEXT[] = { 0xa7,0xde,0x9d,0xaa,0x7c,0xe2,0x38,0x59,0xa4,0x11,0x0a,0xf9,0x8f,0x34,0x53,0xb1 };
    const uint8_t CIPHERTEXT[] = { 0xe7,0xa3,0xa1,0x13,0xe4,0x03,0x6b,0x05,0x86,0x16,0x49,0xb3,0xc1,0x8f,0x14,0x97 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

