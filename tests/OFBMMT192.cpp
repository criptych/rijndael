#include "rijndael.h"
#include "catch.hpp"
#include <cstring>

static inline std::string buf2str(const uint8_t *buf, size_t len) {
    std::ostringstream ss; ss << std::hex << std::setfill('0');
    for (size_t i = 0; i < len; ++i) {
        ss << std::setw(2) << static_cast<int>(buf[i]) << ' ';
    }
    return ss.str();
}

TEST_CASE("OFBMMT192-ENCRYPT-0", "[OFB][MMT][192][ENCRYPT][n0]") {
    const uint8_t KEY[] = { 0x29,0x43,0xe3,0xed,0xfa,0x81,0x52,0x60,0xa8,0xa6,0x97,0xb3,0x86,0xca,0x3a,0xe3,0xee,0xe9,0x14,0xf2,0x2b,0x38,0x57,0xdc };
    const uint8_t IV[] = { 0xc6,0x99,0x5f,0x00,0x31,0x8c,0x24,0x12,0x17,0xcd,0xc8,0x2c,0xf2,0xfa,0x43,0xf9 };
    const uint8_t PLAINTEXT[] = { 0x67,0xe2,0xcf,0x5d,0x63,0x33,0x4a,0xe0,0x3d,0xbd,0xa9,0x11,0x00,0xab,0x78,0x1b };
    const uint8_t CIPHERTEXT[] = { 0x22,0x5e,0x8b,0xfb,0x13,0x3c,0x43,0x32,0xba,0x6e,0x95,0xdd,0xb8,0x41,0x37,0x0d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMMT192-ENCRYPT-1", "[OFB][MMT][192][ENCRYPT][n1]") {
    const uint8_t KEY[] = { 0x6a,0x32,0xb1,0x9f,0xc5,0xf0,0x48,0xa2,0x9e,0xfe,0x97,0x92,0x7e,0x8f,0x91,0xdf,0x23,0x39,0x02,0x78,0xd4,0xfc,0x81,0xeb };
    const uint8_t IV[] = { 0x39,0x77,0x6b,0xf5,0xd8,0x96,0x5c,0x7b,0x79,0x5e,0x3c,0x6f,0x23,0x11,0x5c,0xac };
    const uint8_t PLAINTEXT[] = { 0xe8,0xbc,0x84,0x53,0xa7,0xd4,0x7d,0xe7,0xa9,0xcc,0xd9,0x43,0x85,0xb0,0x08,0x69,0x3e,0x46,0x45,0xf3,0x17,0x93,0x11,0xb4,0xa9,0xa1,0xe0,0x9c,0x32,0x80,0x12,0xdc };
    const uint8_t CIPHERTEXT[] = { 0x18,0x13,0x24,0x30,0xa5,0x0b,0x89,0xc6,0x4c,0x72,0xc5,0xd9,0x09,0x2d,0x8b,0xfb,0x84,0x42,0x91,0x79,0x9d,0x70,0x15,0x16,0x90,0xca,0x85,0x83,0x7d,0x89,0xa7,0x9d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMMT192-ENCRYPT-2", "[OFB][MMT][192][ENCRYPT][n2]") {
    const uint8_t KEY[] = { 0x15,0x5f,0x12,0x74,0x4f,0x6c,0xf7,0xe1,0xf1,0x08,0xdf,0x34,0x1c,0x5e,0x9c,0x02,0xdd,0xd4,0x48,0x12,0xb2,0x85,0xe4,0x6f };
    const uint8_t IV[] = { 0x85,0x5a,0x58,0x99,0x18,0x04,0x72,0x42,0x7a,0x10,0x02,0xc0,0xba,0x5a,0x3d,0xff };
    const uint8_t PLAINTEXT[] = { 0xe7,0xef,0xcd,0x84,0xd5,0x2e,0x30,0x37,0x6d,0x96,0xac,0xe9,0x21,0x60,0xe2,0xce,0x24,0x7e,0x4b,0x82,0x74,0x8c,0x67,0x9d,0x18,0x04,0x18,0x87,0xa6,0xb1,0x48,0x8e,0x09,0x66,0xd2,0x35,0x81,0xef,0xa0,0xcf,0xeb,0x48,0x11,0x4d,0x43,0x0d,0x9d,0x55 };
    const uint8_t CIPHERTEXT[] = { 0xd6,0x07,0x9c,0x22,0xd7,0x40,0x63,0x7b,0x24,0xfd,0x80,0x1e,0xb0,0x2a,0xb2,0x4e,0x6d,0x0f,0x32,0xa9,0xae,0x7c,0x0e,0xaf,0xb1,0x3b,0x5f,0xcf,0xdf,0x05,0xe1,0x81,0x1c,0x2e,0xd7,0xf3,0x37,0xe1,0xb9,0x64,0xed,0x0d,0xa1,0x09,0x90,0xb5,0x0d,0xe6 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMMT192-ENCRYPT-3", "[OFB][MMT][192][ENCRYPT][n3]") {
    const uint8_t KEY[] = { 0x66,0xc7,0xd3,0x13,0x59,0xea,0xc0,0x90,0x56,0xd5,0x97,0x81,0x65,0x42,0xbf,0xfe,0x4b,0xb3,0x3e,0x47,0x5d,0xfb,0x2d,0x62 };
    const uint8_t IV[] = { 0x42,0x60,0x42,0xdc,0x81,0xa7,0xa0,0x69,0x25,0x19,0x72,0xb9,0x1f,0xb3,0x50,0x58 };
    const uint8_t PLAINTEXT[] = { 0x2f,0x21,0x78,0xa2,0x85,0xe6,0x19,0x32,0xc0,0xb7,0x5d,0x7b,0xe0,0xa6,0xe2,0x3a,0xfe,0x78,0x24,0x83,0x30,0xfc,0x8b,0xb3,0xad,0x9c,0xa9,0xa7,0x32,0x32,0xbc,0x2b,0xa4,0x1d,0x7b,0xb5,0xf6,0x93,0x0f,0x54,0x4d,0x38,0x5f,0xe3,0x62,0xf0,0x90,0x82,0x28,0xf2,0xcc,0x47,0xb0,0x1f,0x43,0x30,0x49,0x91,0x70,0x5c,0xeb,0x76,0x9e,0x7b };
    const uint8_t CIPHERTEXT[] = { 0x86,0x3a,0xa2,0x35,0xc8,0xec,0x3d,0x7e,0x8b,0x24,0x24,0x4f,0x9e,0xb7,0x97,0xa6,0x10,0xd0,0x81,0x4c,0xf1,0x5b,0x2b,0xdc,0x2b,0x17,0xe9,0x0e,0x02,0xe1,0x5e,0x2b,0x4b,0x73,0xaf,0xfc,0x0d,0x59,0x83,0xaa,0x9e,0x9b,0x63,0xfc,0x50,0x04,0x62,0x9b,0x1e,0x33,0x71,0x29,0xcd,0x3e,0x4f,0x3c,0xc4,0x8b,0x7f,0x17,0x45,0x44,0xe3,0x0e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMMT192-ENCRYPT-4", "[OFB][MMT][192][ENCRYPT][n4]") {
    const uint8_t KEY[] = { 0xf7,0x71,0x8e,0x48,0xdc,0x09,0x37,0x3f,0x60,0x7f,0x0e,0x52,0xa3,0x84,0xce,0xdc,0xdf,0x7f,0x17,0x93,0x48,0xde,0x6e,0x73 };
    const uint8_t IV[] = { 0xc1,0xb7,0xd1,0x3d,0xbe,0x1f,0xc1,0x37,0xb2,0xde,0xf6,0x88,0x33,0x42,0x51,0x1a };
    const uint8_t PLAINTEXT[] = { 0xb5,0x6c,0xb1,0x95,0x05,0xce,0xd0,0xa4,0xcd,0xd4,0xea,0x15,0x7e,0xf6,0x25,0xc5,0x90,0xa0,0xcd,0x1e,0xd0,0x35,0x48,0x3e,0xfc,0x53,0x4c,0x55,0x8d,0x59,0x4f,0x4f,0xd4,0x26,0x3f,0xb4,0x48,0x24,0x74,0xcc,0x1f,0x86,0xe3,0x06,0x1b,0xcd,0x94,0x9a,0xa7,0x91,0x56,0x6e,0x22,0x7e,0xb1,0x37,0x7b,0x9d,0x1c,0xe0,0xfe,0xd4,0x70,0x2f,0x6d,0xb1,0x9d,0xa6,0x53,0x63,0x9b,0xa7,0x95,0x09,0xa4,0xdc,0x4a,0x30,0xa1,0xd6 };
    const uint8_t CIPHERTEXT[] = { 0xee,0x1a,0x61,0x11,0x1d,0x07,0x89,0x28,0x83,0x14,0x46,0x0f,0xae,0x70,0x83,0x95,0x16,0x99,0x6d,0x25,0x45,0xa8,0x0e,0x0a,0x3a,0xcd,0x9e,0x2f,0x20,0x6c,0xcd,0xcd,0xbb,0xb3,0xb7,0x15,0x50,0xc4,0x6b,0x17,0xac,0x16,0x43,0xf5,0x72,0xae,0x45,0xbb,0x1d,0x80,0x8c,0x7e,0x71,0xeb,0x2a,0x77,0x6f,0x02,0xde,0xd2,0xb5,0x6f,0x62,0xb8,0x32,0x7c,0x8e,0xf6,0xd9,0x43,0xfe,0x29,0x45,0xf7,0xa5,0x43,0x6e,0x39,0xc3,0x90 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMMT192-ENCRYPT-5", "[OFB][MMT][192][ENCRYPT][n5]") {
    const uint8_t KEY[] = { 0x1a,0x00,0xe1,0xb3,0x48,0x17,0xf3,0xba,0xc3,0x40,0xee,0xa1,0xc2,0x5f,0x7b,0x7f,0xd8,0x4f,0x55,0x34,0x31,0x1b,0xab,0x42 };
    const uint8_t IV[] = { 0x3f,0xd0,0x9c,0x2f,0x43,0x8b,0x59,0x6b,0x72,0x95,0xb8,0x1c,0x39,0xf9,0xa5,0x4b };
    const uint8_t PLAINTEXT[] = { 0x03,0x3b,0x3e,0xa4,0xd5,0x05,0x5a,0x21,0x2e,0xce,0xc7,0xc1,0xd0,0x9c,0x82,0x63,0xb5,0xd3,0x6e,0x29,0xff,0x58,0xec,0xc4,0x32,0xf7,0xac,0xf2,0xa1,0x02,0xc3,0x44,0x26,0x3b,0xfd,0x25,0x16,0xf4,0x74,0x18,0x74,0x75,0x61,0x41,0x65,0x9e,0x33,0x27,0xe4,0xce,0xde,0xb8,0xb7,0x03,0x76,0x8e,0xa2,0x42,0xfc,0x70,0xda,0x39,0x78,0x1c,0xbc,0x23,0x47,0x43,0xbf,0xec,0xb7,0xd6,0xa8,0x95,0xd1,0x80,0xfd,0xdb,0x76,0x74,0xbb,0x13,0xae,0x68,0x4b,0x59,0x3c,0xe1,0xb3,0xe9,0x76,0xb2,0x0a,0xcd,0x53,0xbf };
    const uint8_t CIPHERTEXT[] = { 0x0f,0xa7,0xc5,0x1b,0x38,0x84,0xb5,0xd7,0x34,0xd5,0x69,0x55,0x07,0x80,0x19,0xb1,0x82,0x2c,0x66,0xcb,0x57,0x79,0xd3,0x51,0xad,0xa3,0x19,0xf6,0x79,0x96,0x20,0xd4,0xfc,0x0d,0x95,0x18,0xef,0xb5,0x21,0x52,0x9d,0x91,0xd1,0x07,0x3f,0xb4,0xb9,0xae,0xf6,0x20,0x44,0x21,0x9c,0x62,0xe7,0x82,0x38,0x4f,0x4c,0x35,0x7c,0xb3,0xc2,0x06,0x23,0x66,0xd2,0x6c,0x7b,0x12,0xd9,0x03,0x58,0xca,0xbc,0xd0,0x1b,0x53,0xcd,0xf3,0xaf,0xf9,0x1b,0x40,0xf5,0xdd,0xb0,0x4d,0x5e,0xcc,0x50,0x1c,0x59,0xff,0xe4,0x8c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMMT192-ENCRYPT-6", "[OFB][MMT][192][ENCRYPT][n6]") {
    const uint8_t KEY[] = { 0xda,0x9e,0x05,0x66,0x73,0xef,0x01,0xed,0xb7,0xdd,0x4f,0x00,0xc6,0x14,0xb8,0xd4,0x54,0x8e,0x23,0x4c,0x07,0x64,0x11,0x6d };
    const uint8_t IV[] = { 0x81,0xd8,0x72,0xf7,0xdd,0x7c,0x9d,0x6e,0xcd,0xea,0xdd,0x55,0x69,0x65,0xb4,0x33 };
    const uint8_t PLAINTEXT[] = { 0x62,0x11,0xb0,0xff,0xff,0xe4,0x78,0x20,0x6e,0x65,0xc8,0xfa,0xc9,0xd8,0x24,0x09,0x6d,0xb5,0x71,0xb2,0xfe,0xa0,0x16,0xd4,0xac,0x9b,0x5b,0xa1,0xb4,0x7b,0x14,0xac,0x29,0x98,0x84,0x42,0xf4,0xc9,0x7c,0xfe,0x1a,0x90,0xc3,0x98,0x3d,0x91,0xba,0xfe,0x66,0x49,0x40,0xa6,0x01,0xfc,0xd4,0x22,0x29,0xef,0xf9,0xf5,0x26,0xd8,0xdf,0xa5,0x34,0x93,0x3f,0x11,0x86,0x16,0x87,0x05,0x8b,0xa7,0x37,0x0c,0x70,0x4d,0x8b,0x85,0xe6,0x84,0x5a,0xf9,0x25,0x34,0x3e,0xac,0x31,0xe4,0xf5,0x72,0x5c,0x2b,0x07,0xc4,0x0c,0x68,0xa9,0x13,0xbe,0xb3,0xe2,0x5c,0x4b,0x14,0xec,0xfd,0x6a,0xf2,0xdd,0xc7 };
    const uint8_t CIPHERTEXT[] = { 0x55,0x54,0x4a,0x5b,0xa8,0x1f,0xe6,0xb9,0x1d,0x9d,0x76,0xb4,0x7c,0x9b,0xc8,0x05,0x24,0xf4,0x9d,0x98,0x67,0x8d,0x89,0x18,0xe6,0x55,0x4e,0x51,0x6a,0xf5,0x66,0x06,0xe1,0x1c,0x87,0xc1,0x26,0x9d,0xe6,0x4f,0xdd,0x8b,0x66,0xe0,0x71,0xf3,0xbe,0xe7,0x01,0x70,0x92,0x9c,0xa2,0xf9,0xd5,0xe4,0xa4,0xf4,0x65,0x2b,0x17,0xbb,0x02,0x03,0xea,0x8d,0x14,0xdf,0x80,0x34,0x4f,0x72,0x5a,0xe4,0xf5,0xf7,0xc0,0x5e,0xaa,0x00,0x00,0xba,0x08,0x81,0x94,0x2c,0xd9,0x2a,0x5f,0xcc,0x42,0x7e,0x6e,0xa6,0x59,0xe8,0xac,0x70,0x88,0x3e,0x3e,0xa7,0x49,0x15,0x4c,0xd5,0x67,0x55,0xb5,0xb6,0xe3,0x3f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMMT192-ENCRYPT-7", "[OFB][MMT][192][ENCRYPT][n7]") {
    const uint8_t KEY[] = { 0x4d,0x59,0x48,0x35,0x6e,0x36,0x39,0x0b,0x35,0x47,0x12,0x98,0x83,0xba,0xdd,0x12,0xc8,0x16,0x8f,0xe5,0xce,0xc3,0x83,0x56 };
    const uint8_t IV[] = { 0x92,0xde,0x5d,0x29,0x99,0xc1,0x14,0x2a,0x6a,0x13,0x0a,0xc5,0x5f,0x1b,0x78,0x22 };
    const uint8_t PLAINTEXT[] = { 0x92,0xd1,0xe2,0xf1,0xea,0xbd,0x7f,0x3f,0xdc,0x99,0x10,0x50,0x93,0xf5,0xc0,0x3f,0x13,0xd0,0x57,0x3a,0x1f,0xf6,0x49,0x7b,0x5a,0x8d,0xf2,0x79,0xac,0xea,0x20,0x60,0xe7,0xa9,0xd2,0xbf,0xab,0xfc,0x3f,0x81,0x87,0x43,0x1a,0x1f,0x60,0xdd,0x15,0x14,0x17,0x3e,0xa4,0x90,0x66,0x42,0x03,0x70,0x0b,0xc1,0x7a,0x6e,0x29,0x64,0xe0,0x95,0xeb,0xb7,0x5e,0xf9,0x6a,0x7f,0x75,0xa4,0xd1,0x4d,0x42,0xd3,0xbf,0x53,0x01,0x63,0xec,0x77,0xd1,0x86,0x10,0xa6,0xb6,0xba,0x00,0x6b,0xe4,0xfc,0x1a,0xc0,0x3b,0x38,0xe4,0x24,0x0e,0x05,0xf0,0xed,0x28,0x8f,0x03,0xe0,0x11,0xd4,0x75,0xff,0x8d,0x14,0xdb,0xa2,0x66,0x82,0xe4,0xc9,0x6b,0x40,0x81,0xb1,0xb9,0x8a,0x49,0xa5,0x39,0x32 };
    const uint8_t CIPHERTEXT[] = { 0x56,0xcd,0x22,0x5b,0x88,0x75,0x7a,0x1b,0x52,0x0d,0x6a,0xc2,0x36,0x23,0x1b,0x5d,0x86,0xd2,0x7d,0x15,0xa9,0xb7,0x76,0x9b,0x71,0x51,0x2a,0xe9,0x22,0x66,0x9a,0xbf,0xe8,0x73,0xde,0x30,0xea,0x7e,0xcf,0xc5,0x9c,0x3a,0x86,0x70,0x3d,0xaa,0x10,0x70,0xdc,0x6e,0x54,0x8e,0xfb,0xdb,0x97,0x2c,0xe7,0x81,0x91,0xb4,0xb1,0x73,0xd4,0x6c,0xdf,0x67,0x03,0x2b,0xf5,0x15,0xed,0x28,0xbb,0xfb,0xc4,0x4a,0x6d,0x39,0xdf,0x28,0x82,0xca,0xff,0xe6,0xde,0x76,0xbc,0xca,0xb4,0x9f,0x76,0x5f,0xa2,0xda,0xc8,0xc5,0x48,0xeb,0x0e,0xd5,0x7f,0x03,0xc4,0x9b,0x89,0x63,0xb4,0xa9,0x68,0xe1,0x41,0x64,0xff,0xcf,0x01,0x5e,0x21,0xa9,0x2c,0x98,0x49,0x76,0x91,0xa3,0x5d,0x91,0x14,0x6e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMMT192-ENCRYPT-8", "[OFB][MMT][192][ENCRYPT][n8]") {
    const uint8_t KEY[] = { 0x25,0x8b,0xc6,0xc0,0x03,0x18,0xec,0x28,0x80,0xc2,0xd1,0x11,0x38,0x80,0x1e,0xd5,0x2b,0x2a,0xdb,0xaa,0xc8,0x3c,0x27,0x82 };
    const uint8_t IV[] = { 0xb2,0x3e,0x9f,0x5e,0xb2,0x70,0xb3,0x64,0x0f,0x44,0xb6,0x23,0xc2,0xa2,0x80,0x5c };
    const uint8_t PLAINTEXT[] = { 0xeb,0x49,0x3d,0xab,0x33,0x17,0x27,0x2f,0x1f,0x26,0xbb,0x6e,0xb1,0xc7,0x16,0xe3,0x05,0xf2,0x63,0xd8,0xcc,0xe4,0xf3,0x2d,0xfc,0x0c,0x91,0x55,0xc6,0x28,0x0f,0xa1,0xc9,0xac,0x25,0xc1,0x85,0x63,0x7c,0x88,0x12,0x58,0x05,0xef,0x11,0xf7,0x8f,0x5d,0xe4,0x70,0x99,0x25,0x1a,0x5c,0x64,0x50,0x2d,0xa3,0x4d,0x9e,0x70,0x9d,0x5a,0xc7,0x43,0x77,0x13,0x06,0x89,0xd9,0x93,0xd8,0x5c,0xc5,0xde,0x02,0xff,0xc3,0x75,0xd1,0x13,0x3b,0x28,0xa5,0x0e,0x22,0x2c,0xb1,0xea,0xd8,0x6d,0xfc,0x1a,0x51,0x25,0xab,0xc2,0x74,0xae,0x83,0x27,0xc0,0x95,0xaa,0x65,0x35,0xef,0xad,0x60,0x72,0xf0,0xc7,0xfc,0x1b,0xb9,0x61,0x91,0x7d,0x72,0xd5,0x99,0x75,0x99,0x77,0xac,0x8d,0x99,0xd6,0xaf,0x69,0x9f,0x3f,0x48,0x62,0xa9,0x83,0x94,0x70,0xe0,0xfa,0x1d,0x4d,0x27,0xc8 };
    const uint8_t CIPHERTEXT[] = { 0x8a,0xa9,0x08,0xff,0x06,0xef,0x0d,0xe7,0x32,0xee,0xe5,0xee,0xaf,0xc4,0xbe,0x32,0xab,0x9c,0x23,0xcd,0x4e,0xe6,0x20,0x5b,0x7f,0x29,0xe4,0x9c,0x50,0xd8,0xb6,0x67,0x72,0x41,0xc0,0xfb,0xbb,0x62,0x32,0x45,0x49,0x86,0xdd,0xe2,0x72,0x8c,0x62,0xab,0xcb,0xb4,0x7d,0x2b,0xe9,0x12,0x14,0x9f,0x73,0x73,0x3c,0xb7,0xe6,0x5b,0x68,0xe5,0x7b,0xb2,0x14,0x5a,0xa4,0x5c,0xe9,0x57,0xc9,0x03,0x7d,0x09,0x95,0x02,0xd3,0xb2,0xd4,0x6a,0xc3,0xf8,0x48,0x49,0x92,0x67,0xad,0x85,0x00,0x58,0xae,0xf6,0x55,0x66,0x84,0x3e,0xe1,0x19,0xc4,0x83,0xcc,0xf8,0xcc,0x2a,0x72,0xc9,0x34,0x67,0xb0,0xaf,0xda,0xfd,0x87,0xb9,0x84,0x31,0x19,0xc4,0x85,0x9d,0x5d,0x42,0x8e,0x2d,0x37,0x1a,0x54,0x17,0x7f,0xea,0x6e,0x4f,0xdd,0xe8,0x90,0x11,0x91,0xb7,0x13,0xb6,0x09,0x70 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMMT192-ENCRYPT-9", "[OFB][MMT][192][ENCRYPT][n9]") {
    const uint8_t KEY[] = { 0x17,0xb0,0xf9,0x91,0x5f,0x6b,0x54,0x1e,0x1d,0x3f,0xec,0x5b,0x9c,0x5d,0xfe,0x1c,0xb0,0x5a,0x9d,0xbc,0x99,0x83,0xb2,0x0f };
    const uint8_t IV[] = { 0xea,0xf1,0x7c,0xec,0x97,0x14,0xd2,0xe6,0xf2,0x66,0xf2,0x83,0x61,0x84,0x94,0xeb };
    const uint8_t PLAINTEXT[] = { 0x0d,0x4e,0x7f,0x3f,0x73,0x2b,0xf9,0xd8,0xd2,0xd3,0xf6,0x48,0x96,0x8f,0xe8,0x41,0x75,0xd1,0xc7,0xf5,0xac,0x6d,0x6b,0xe4,0x8c,0x05,0x39,0xf3,0x36,0xc5,0x01,0xbf,0xa3,0x51,0x27,0x30,0xe7,0xfc,0x01,0x51,0xb6,0x3b,0x81,0x5f,0x27,0x59,0x14,0x20,0xb8,0x6c,0xc9,0x75,0x92,0x87,0xb6,0x33,0x0f,0x31,0x98,0x2f,0x7a,0x16,0xb9,0x98,0x16,0xfd,0x17,0x8a,0x61,0xfa,0xc2,0xdf,0x99,0xe5,0x86,0x49,0x80,0x0a,0xca,0x9e,0x5d,0x22,0xb8,0x72,0x43,0x83,0x9e,0xeb,0x95,0x93,0x94,0xd1,0xca,0x82,0x60,0xe5,0x6e,0x39,0x96,0x74,0x69,0x8d,0x04,0x2b,0x84,0xb9,0x4c,0x2d,0x29,0x0b,0xd3,0x63,0x6a,0xdd,0xda,0x13,0x46,0xc7,0xeb,0xb5,0x27,0x13,0x77,0x02,0xae,0x71,0xbd,0x4d,0xb3,0xec,0xed,0x16,0x88,0x1d,0x8e,0xdd,0x7e,0x9f,0x1d,0x34,0xab,0xc3,0xf7,0x18,0xea,0x84,0x79,0x81,0x22,0xbd,0x65,0x38,0xcc,0x99,0x87,0xe9,0xaf,0x4b,0x99,0x79 };
    const uint8_t CIPHERTEXT[] = { 0x05,0xf6,0xec,0x0f,0x2e,0x22,0x15,0xcc,0x45,0x18,0x75,0x0c,0x4c,0x6a,0xdb,0x0b,0x4e,0x0b,0x28,0xb0,0x88,0x9b,0x33,0x52,0x8c,0xc3,0x86,0x5a,0x44,0xd8,0xf3,0x68,0x0d,0x83,0x8f,0xf3,0xda,0x8d,0x57,0xd1,0x8d,0xf2,0x21,0x87,0xa7,0x16,0xad,0x24,0x63,0x06,0x45,0x73,0x2b,0x75,0x10,0xaa,0x77,0xf5,0xe3,0x18,0x1f,0x40,0x2b,0x72,0xdf,0x25,0x43,0xf8,0x25,0xff,0x06,0xad,0x59,0x93,0x32,0x45,0x24,0xa9,0x17,0x09,0x38,0x67,0xae,0x5b,0x59,0xae,0x43,0x96,0x97,0xfd,0x53,0xfb,0x96,0x05,0xee,0xd3,0xcc,0x6b,0x5c,0x89,0xfe,0xe0,0xb6,0xbd,0xfe,0x62,0xe1,0x44,0x42,0x90,0xf3,0xdd,0x71,0xff,0x6a,0xa1,0xb6,0x0a,0x8a,0xbd,0xbc,0x70,0xb2,0xae,0x3a,0xee,0x99,0x97,0x39,0xd7,0xe6,0x95,0x2a,0x18,0xfc,0xf4,0x31,0x51,0xb6,0x5a,0x5c,0x95,0x04,0xfe,0x3b,0xf1,0x66,0x91,0x7a,0x26,0x4a,0xb0,0xc0,0x48,0xcd,0xfc,0x40,0xd4,0xe0,0xbf };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMMT192-DECRYPT-0", "[OFB][MMT][192][DECRYPT][n0]") {
    const uint8_t KEY[] = { 0xb5,0x7c,0x1f,0x00,0xef,0x9a,0xa2,0x1e,0xde,0x38,0xd0,0xc1,0xad,0xdd,0xde,0xda,0xdd,0x21,0xdc,0xc7,0xa0,0x77,0x3a,0xca };
    const uint8_t IV[] = { 0x65,0x8b,0x01,0xd8,0xdd,0xa5,0x73,0x85,0x0c,0xb2,0xc2,0x7d,0xba,0x2a,0x13,0x9e };
    const uint8_t PLAINTEXT[] = { 0x1b,0xbd,0xad,0x85,0x49,0xba,0xbb,0x85,0xef,0xa4,0x75,0xbf,0xf0,0x30,0x7d,0x5e };
    const uint8_t CIPHERTEXT[] = { 0x09,0xf4,0x0f,0x19,0x16,0x43,0x02,0xe1,0x20,0x43,0xe7,0xc3,0x06,0x27,0xb4,0x2d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMMT192-DECRYPT-1", "[OFB][MMT][192][DECRYPT][n1]") {
    const uint8_t KEY[] = { 0xb8,0xcf,0xfa,0x57,0x14,0x0e,0x7e,0x49,0x06,0x23,0xc0,0x3e,0x37,0xa0,0x5d,0x6e,0xd1,0x96,0x6c,0xa4,0x40,0x51,0x62,0x95 };
    const uint8_t IV[] = { 0x3a,0x23,0x51,0xb8,0x9b,0xdd,0xc8,0xa8,0x12,0xe4,0xaf,0x39,0xc6,0xd1,0x0e,0xea };
    const uint8_t PLAINTEXT[] = { 0x2e,0x57,0xb7,0x8e,0x8a,0x7a,0x97,0x97,0xa3,0x60,0xd1,0x7b,0x70,0xbf,0x4a,0x34,0x09,0xe7,0x40,0x72,0x47,0xe4,0x5b,0x51,0xbd,0xfa,0xcd,0xfc,0x12,0x6a,0xc0,0x3a };
    const uint8_t CIPHERTEXT[] = { 0xfe,0xaa,0xdd,0xd0,0xc6,0x26,0x30,0xc2,0x6d,0xf9,0x9e,0x00,0x59,0x82,0x5c,0xfb,0x07,0xd9,0x71,0xb0,0x50,0x05,0x17,0x7d,0xeb,0x70,0x64,0x33,0x34,0x98,0x29,0x6c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMMT192-DECRYPT-2", "[OFB][MMT][192][DECRYPT][n2]") {
    const uint8_t KEY[] = { 0x67,0x06,0x98,0x82,0x10,0xf6,0x4a,0x2a,0x22,0xe3,0x59,0xbc,0x73,0x1a,0x6c,0x90,0x0b,0x5a,0xdf,0xe8,0x32,0x90,0x71,0xd3 };
    const uint8_t IV[] = { 0x74,0x01,0x4d,0x44,0xbd,0x6a,0x85,0x7b,0xb5,0xe1,0x3e,0x35,0x19,0x45,0xab,0x68 };
    const uint8_t PLAINTEXT[] = { 0x1d,0x5c,0xff,0xc8,0x09,0x87,0xda,0xe1,0xc5,0x4a,0xc1,0x24,0x8b,0x0b,0xd6,0x2c,0x3e,0x11,0x61,0x63,0x68,0xd5,0xb3,0x65,0xfc,0xc8,0xba,0x3c,0x22,0x28,0xce,0x4c,0xbc,0x6f,0x0b,0x22,0xd7,0xd9,0x0b,0x7c,0x9f,0xd2,0x04,0xca,0x69,0xa5,0xa8,0x3f };
    const uint8_t CIPHERTEXT[] = { 0x2d,0xde,0x0b,0xb7,0x4a,0x3e,0x0f,0x81,0xa8,0x2f,0x54,0xaa,0x86,0xcb,0x1c,0xbb,0x58,0x84,0xa4,0x4e,0x60,0x66,0x55,0x74,0x7e,0x9c,0x3e,0x55,0x49,0x36,0xc2,0x16,0x5e,0x29,0x8e,0x00,0xf9,0x97,0xcf,0xde,0xc2,0x51,0xa1,0xa6,0xe9,0x9b,0xca,0x5c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMMT192-DECRYPT-3", "[OFB][MMT][192][DECRYPT][n3]") {
    const uint8_t KEY[] = { 0x6c,0x98,0xed,0x90,0x35,0x4a,0xf2,0x77,0xdf,0x6c,0x64,0xd3,0xf4,0xf7,0xaf,0x72,0xd9,0x43,0x17,0x95,0x9b,0xbf,0x9f,0x46 };
    const uint8_t IV[] = { 0xe8,0x0b,0xbd,0x08,0xf6,0xed,0x38,0x75,0x51,0x32,0xa0,0xd0,0xc5,0x8c,0xb7,0x65 };
    const uint8_t PLAINTEXT[] = { 0x40,0xaa,0x6e,0xf1,0xf7,0x83,0xd1,0x18,0x7c,0x1f,0xe9,0x98,0xc0,0x83,0x73,0xca,0x9b,0x30,0x21,0xb1,0x12,0xf0,0x3b,0xff,0x57,0x17,0x9f,0x10,0xbb,0xb9,0x87,0x75,0x0c,0x22,0xb1,0xed,0x65,0xa1,0x83,0x40,0x03,0x3d,0x35,0xa7,0x52,0x72,0x00,0xdc,0x24,0x4a,0xde,0x24,0x19,0x89,0xea,0xc9,0x50,0x89,0x28,0x97,0xc7,0x7c,0x7f,0x5d };
    const uint8_t CIPHERTEXT[] = { 0x56,0x4a,0xf9,0xb8,0xc9,0x9e,0x33,0xa6,0x68,0xc1,0x0f,0x86,0xa8,0x9f,0xd5,0x53,0x27,0xb4,0x23,0x00,0x9a,0x2c,0x85,0xbb,0x06,0x49,0x45,0x73,0x34,0x06,0x85,0x98,0x5f,0xfa,0x8a,0x22,0x2f,0x7e,0x5b,0xd4,0xeb,0x12,0x8b,0xc2,0xea,0xfd,0x53,0x11,0x4a,0x34,0xe4,0xfe,0xe5,0x7d,0xfa,0x21,0x81,0xd4,0xb5,0xf3,0x47,0x0e,0xa5,0x8f };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMMT192-DECRYPT-4", "[OFB][MMT][192][DECRYPT][n4]") {
    const uint8_t KEY[] = { 0x32,0xfe,0x5d,0xea,0x74,0xb6,0xfc,0xf5,0xda,0x2c,0xe8,0x89,0x54,0x5c,0xbb,0x2b,0x61,0x9e,0xfb,0x97,0xdd,0x2b,0x91,0x61 };
    const uint8_t IV[] = { 0xd0,0x98,0x45,0xe2,0x0c,0xbb,0x97,0xf9,0xe6,0x10,0x2e,0xb4,0x75,0x65,0x6e,0x78 };
    const uint8_t PLAINTEXT[] = { 0x7c,0x73,0x6a,0xc5,0xae,0xf9,0x79,0x64,0xa8,0x30,0x08,0x60,0x0f,0xbc,0x97,0x6f,0xe7,0x70,0x22,0xae,0xea,0xdc,0xb0,0xd3,0xfe,0xcc,0x43,0x3e,0x6f,0x7f,0x04,0x9c,0x63,0x68,0x5b,0xf0,0xeb,0xa9,0x5b,0xc0,0xb6,0x7b,0x0f,0xe2,0xc7,0xda,0x06,0x7c,0x95,0xab,0xc6,0x5c,0x89,0xd8,0x07,0x2b,0x5d,0xeb,0x72,0x29,0x5c,0x21,0x93,0x68,0x91,0x2e,0xc9,0xb3,0xbe,0xe6,0x06,0x01,0xc4,0x8f,0xaf,0x25,0xdb,0x48,0x09,0xf2 };
    const uint8_t CIPHERTEXT[] = { 0x5d,0x3e,0x9d,0x6e,0x5f,0xce,0x6a,0xd1,0x1d,0x24,0xf9,0xab,0x30,0x44,0xcf,0xc5,0x51,0xd3,0x8f,0x80,0x6e,0xd6,0xb6,0xb9,0xfd,0xbd,0x88,0xef,0x90,0xa0,0x4b,0xa8,0xa9,0xc8,0xb2,0x10,0xd0,0x71,0x9c,0xe4,0xe4,0xce,0xff,0x8e,0xaf,0x4e,0x1e,0x92,0xbc,0x1e,0x03,0x28,0x6d,0xef,0x29,0x2a,0x48,0xf9,0x79,0x31,0x92,0x40,0x77,0xfc,0x1f,0x16,0xbe,0x11,0x68,0xe1,0xaa,0xa6,0xde,0x1e,0x54,0xc1,0x7e,0xa6,0xc3,0x9f };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMMT192-DECRYPT-5", "[OFB][MMT][192][DECRYPT][n5]") {
    const uint8_t KEY[] = { 0x3f,0xc5,0x14,0x32,0xaa,0xfc,0x42,0x6f,0xe0,0xd1,0xa1,0xfd,0x75,0x95,0x0a,0xe1,0xa7,0x9f,0x49,0x49,0x41,0x9f,0x21,0x7a };
    const uint8_t IV[] = { 0xfe,0xe3,0xc1,0xb2,0xb4,0xe4,0x9f,0xb8,0xff,0x28,0xa5,0x74,0xa3,0xf5,0x4f,0x80 };
    const uint8_t PLAINTEXT[] = { 0x1d,0x85,0x79,0x5d,0x12,0x69,0x73,0xf6,0xfb,0x81,0x42,0xd9,0x31,0xd6,0x07,0x6d,0x68,0x7c,0xac,0xbf,0xb0,0xa4,0xef,0x2f,0x1a,0x3f,0x43,0x07,0x16,0x92,0x2b,0xa1,0xe5,0x90,0xca,0x41,0x7e,0x86,0x43,0xbc,0x88,0xe9,0xb4,0x25,0x5f,0x38,0x70,0xa2,0x39,0xe7,0xc8,0x8d,0xba,0xba,0xa9,0xab,0x3f,0x47,0x99,0xf4,0x0d,0x95,0xe4,0x8b,0xb7,0x44,0xc3,0x60,0x95,0xc1,0xd8,0xa0,0x31,0x1e,0x9c,0x26,0x2f,0x76,0x58,0xce,0x12,0xd0,0x65,0xc2,0x09,0x3b,0xf4,0x71,0xa0,0x1c,0x96,0x8f,0x92,0x1d,0x9b,0x44 };
    const uint8_t CIPHERTEXT[] = { 0x80,0xa9,0x21,0xd4,0x97,0x2a,0x86,0x28,0x56,0xff,0x16,0x8b,0x33,0x91,0x24,0x55,0x3a,0x8d,0x39,0x39,0x60,0xe7,0x0a,0x6c,0x15,0x1e,0xa8,0x09,0x18,0xc1,0xf7,0xb5,0x8f,0x32,0x61,0x7f,0x57,0xaa,0xcb,0x09,0x99,0x7d,0xc8,0xed,0x9e,0xa0,0x0d,0x5a,0xe4,0x68,0x26,0xfe,0x71,0x94,0x67,0x29,0x67,0x8e,0x24,0x2f,0xd9,0xee,0x25,0x0e,0xdd,0x40,0x54,0x50,0xe2,0x07,0xb9,0x33,0x44,0x02,0xa8,0x08,0x1e,0xad,0x39,0xd9,0x60,0x0b,0xf9,0x4e,0x21,0xa3,0xdf,0xd1,0x36,0xc8,0x82,0xf1,0x03,0x1e,0x88,0x04 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMMT192-DECRYPT-6", "[OFB][MMT][192][DECRYPT][n6]") {
    const uint8_t KEY[] = { 0x4b,0x0a,0x5a,0x32,0xfc,0x9b,0xfa,0x96,0x4a,0x86,0xfc,0x8c,0xb5,0x9b,0xfc,0x11,0xda,0x50,0xa6,0xee,0xeb,0x67,0xcc,0x82 };
    const uint8_t IV[] = { 0xb2,0x62,0x68,0x83,0x5f,0x33,0xb3,0xaf,0xf4,0x6a,0x65,0xce,0x35,0x12,0x74,0xd1 };
    const uint8_t PLAINTEXT[] = { 0x0c,0x88,0x3c,0x18,0x25,0x15,0x69,0x48,0x07,0xe7,0xc9,0x29,0xb4,0xba,0xdd,0x62,0xcd,0x3a,0xf3,0x2b,0x01,0x6c,0xe2,0xa0,0xf1,0x24,0x1d,0xb1,0xc3,0x4a,0x4a,0x5e,0x2b,0x87,0x3a,0x56,0xc8,0x41,0x21,0x4f,0x10,0xa8,0x52,0x49,0x45,0x95,0xd8,0xbf,0x0c,0x9f,0x99,0x19,0xc7,0x1e,0x2a,0x3a,0xcd,0x37,0xc9,0xbf,0xa0,0x1e,0xa5,0x21,0xd1,0xa8,0x2c,0xb0,0x20,0xc8,0x5e,0x24,0xa8,0x9d,0x9d,0x5f,0x04,0xa4,0x1f,0x63,0xbc,0xa3,0xb2,0x26,0x1d,0x86,0xc2,0x17,0xf3,0x35,0xd4,0xa6,0x13,0x92,0x2b,0x17,0xab,0x5f,0xcb,0x50,0x2e,0xee,0x48,0xb2,0x79,0x72,0x7f,0xc0,0x8e,0xb2,0x1f,0x56 };
    const uint8_t CIPHERTEXT[] = { 0x64,0x37,0x2d,0x6d,0xf5,0x7b,0xbb,0xf2,0x1c,0x1c,0xd2,0x03,0x25,0x89,0x2f,0x3a,0xd5,0xc5,0xdd,0x49,0x9d,0xc8,0x04,0x86,0x12,0x23,0x02,0xa7,0xa2,0xe2,0xbc,0xc9,0x7f,0xb6,0x36,0xb8,0xe0,0x54,0x62,0x6a,0x69,0x18,0x36,0xcc,0xe7,0xee,0x01,0xc2,0x41,0x72,0xff,0x68,0xac,0x56,0x2b,0x9f,0x1d,0x04,0x54,0xc5,0x04,0x85,0x73,0xc3,0x37,0xa2,0x3c,0x4d,0x2c,0x49,0xf3,0x65,0x6c,0x32,0x81,0x21,0x44,0xc1,0xc7,0xaf,0xbe,0x2f,0x32,0x96,0xd0,0xe5,0x90,0x3e,0xd2,0x28,0x22,0xb3,0x35,0xfb,0xf2,0xa6,0x73,0x41,0x66,0xb5,0x42,0x23,0x16,0xec,0x0d,0xb1,0xdb,0x8b,0xa4,0xcc,0x28,0x09 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMMT192-DECRYPT-7", "[OFB][MMT][192][DECRYPT][n7]") {
    const uint8_t KEY[] = { 0x79,0x1a,0xfe,0xe6,0xa0,0x91,0x15,0x71,0xd4,0xba,0x8a,0x82,0x8f,0xf5,0xcd,0x1a,0xe6,0xda,0xa9,0x28,0x16,0x7a,0x76,0xf3 };
    const uint8_t IV[] = { 0x5b,0x86,0x3b,0x6e,0x13,0xd5,0x28,0x59,0x7d,0x5a,0x97,0x4c,0x1a,0x5b,0x49,0x5b };
    const uint8_t PLAINTEXT[] = { 0x0b,0x82,0x52,0x87,0x9c,0xa2,0x47,0xde,0x3c,0xf1,0x20,0xca,0x58,0xb6,0x52,0x04,0x0c,0xba,0x3b,0x69,0x7c,0x24,0xa7,0x39,0x52,0x99,0xc1,0x19,0x7d,0x32,0xd7,0xfc,0x3c,0xa4,0x4f,0x18,0x44,0x59,0x8f,0x96,0xf5,0x3c,0x5b,0x44,0xd2,0x1c,0x52,0xee,0x4d,0xb3,0x6c,0xdf,0x8a,0xef,0x34,0xd7,0x81,0xc4,0xc2,0x88,0x17,0x03,0x47,0x28,0x6b,0x24,0x76,0xbc,0x22,0xc2,0x6b,0x21,0xe6,0xc3,0xca,0x04,0x65,0xb1,0x02,0x15,0x15,0x41,0xaa,0x75,0x9a,0xa2,0x8d,0xb0,0xd3,0x86,0x21,0xb0,0xfd,0xee,0x9e,0x12,0xf2,0x87,0x09,0x74,0x31,0x74,0x2c,0xcb,0x35,0x59,0x7d,0x4c,0x06,0xa0,0xdf,0x26,0x1a,0x47,0x7c,0xcf,0xb1,0xd6,0x18,0xe4,0xa8,0x54,0x82,0x4b,0x1b,0x9b,0x84,0xd2 };
    const uint8_t CIPHERTEXT[] = { 0x6c,0x94,0x06,0x22,0xe4,0x0d,0x37,0xfa,0x61,0xcd,0x95,0x46,0x87,0x73,0x91,0xc6,0xed,0xd2,0x04,0xfc,0xda,0xa2,0x16,0x83,0x4c,0x74,0x60,0xa2,0x3f,0xec,0x4d,0x21,0x2b,0x2a,0xc6,0x5b,0xcf,0x89,0x0e,0x95,0x2d,0x8c,0xea,0x8e,0xd6,0x15,0x06,0x57,0x67,0xd8,0x94,0x65,0x54,0x10,0x36,0xe5,0xe4,0x70,0x1e,0x4f,0x7d,0x5d,0x73,0x3e,0x22,0x5a,0xf7,0x7f,0x3a,0xc4,0xe8,0x68,0x93,0xbf,0x24,0x6b,0xa6,0x70,0x90,0xeb,0x1d,0x6d,0xb9,0x4d,0x92,0x71,0xbc,0x53,0x9a,0x55,0x64,0xa5,0x02,0x3b,0x93,0xb1,0x58,0x0d,0xe3,0xb5,0xad,0x26,0x8c,0x1a,0x9a,0x4e,0x89,0x04,0x81,0xec,0xf6,0x27,0x15,0x77,0xbd,0xdc,0x1d,0x2e,0x71,0x74,0x75,0x09,0x7a,0xcc,0x55,0xef,0x73,0x21 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMMT192-DECRYPT-8", "[OFB][MMT][192][DECRYPT][n8]") {
    const uint8_t KEY[] = { 0x09,0xd5,0x27,0x81,0x32,0xce,0x1d,0x3a,0x75,0xfc,0xf2,0xe0,0x57,0x1d,0x7a,0xc5,0x70,0xb9,0x2e,0x4f,0x1f,0x06,0x7f,0xfb };
    const uint8_t IV[] = { 0x20,0xd8,0x96,0xe0,0xe4,0xda,0xe1,0x47,0x1b,0x3c,0xef,0xc0,0xff,0xd7,0x84,0x12 };
    const uint8_t PLAINTEXT[] = { 0xe5,0xf4,0x1c,0xdf,0x29,0x5f,0x23,0xb0,0xda,0xf1,0xd3,0xf3,0xfe,0x1d,0x47,0xce,0xe3,0x0e,0xd1,0x53,0x02,0x6e,0xb7,0xb3,0x29,0x23,0x07,0xa2,0xa1,0x33,0xf6,0xd4,0x0c,0x58,0x1d,0xfe,0x8e,0x71,0x0e,0xde,0x5d,0x6c,0x20,0xbb,0xdb,0xdc,0x49,0xa6,0x5e,0x96,0xf8,0x6a,0x0b,0x6c,0xc5,0x51,0xa6,0x6d,0xc1,0xdb,0x3d,0xfb,0xa9,0x5c,0x88,0xe3,0x09,0x36,0x33,0xb8,0x1d,0xb6,0x37,0x99,0x5f,0x9f,0x05,0xd2,0x98,0xee,0xc2,0x14,0x9d,0xaf,0x67,0x36,0x95,0x94,0x90,0x74,0xa8,0x3c,0x71,0x29,0xde,0x61,0x70,0x9b,0x19,0x1e,0x34,0x76,0xec,0x1f,0x35,0xf5,0x6d,0xf4,0xf0,0x96,0x64,0xfe,0x2f,0xc5,0xa4,0xb8,0xde,0x41,0xea,0x7f,0xa8,0x9f,0x46,0xef,0xca,0x14,0x98,0xfd,0xe5,0xbd,0x12,0x7a,0xa7,0x51,0x47,0x28,0xdc,0x75,0x79,0xde,0x66,0x42,0x33,0xbb };
    const uint8_t CIPHERTEXT[] = { 0xb1,0x07,0xb3,0x90,0x88,0x68,0x21,0xd7,0x45,0xc0,0xb0,0xac,0x83,0x0d,0xf2,0xa8,0x89,0x4b,0x88,0x39,0x1f,0xf2,0x95,0x44,0xa0,0xc1,0x73,0x0f,0x51,0xba,0xa5,0x5f,0xf1,0x6e,0x0d,0xdd,0x91,0x7a,0x5f,0xbe,0xa6,0x52,0xd6,0xa3,0x5d,0x3d,0x26,0xbe,0x2e,0xa1,0xb1,0x37,0xb4,0x81,0xfd,0xce,0xbc,0x44,0x66,0xc1,0x9c,0xb8,0x10,0xf0,0xc6,0x56,0x20,0x3f,0x9c,0xc8,0x2c,0x3c,0x86,0xa8,0xef,0x02,0x42,0x8b,0x42,0x5d,0x7c,0x3e,0x48,0x2e,0x9f,0x4f,0xe8,0x11,0xea,0xcf,0x80,0x3e,0xc6,0x57,0xd7,0xad,0x57,0x49,0x54,0x7e,0x51,0x58,0x6e,0x97,0x0d,0x4b,0x64,0x8f,0xdc,0xfd,0x2e,0xcb,0x9b,0xa9,0xb3,0xe6,0x87,0x64,0x3c,0x56,0x53,0xeb,0x29,0x4d,0x78,0x9f,0xe3,0xde,0xcd,0xce,0x11,0x61,0x57,0x34,0x0f,0x18,0x62,0xc2,0x9b,0x13,0xd0,0x9e,0xd2,0x50 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMMT192-DECRYPT-9", "[OFB][MMT][192][DECRYPT][n9]") {
    const uint8_t KEY[] = { 0x75,0x3c,0x1f,0x7f,0x39,0xaf,0xd2,0x86,0xff,0x05,0x13,0x39,0xc4,0x5d,0x57,0xc8,0x48,0x85,0x03,0x93,0xb4,0x11,0x2f,0xe5 };
    const uint8_t IV[] = { 0xd3,0xee,0x0d,0x8d,0xe5,0x08,0x0e,0xda,0x4c,0x26,0xf5,0xa3,0xb9,0xca,0x8a,0x9f };
    const uint8_t PLAINTEXT[] = { 0xad,0x3c,0xcd,0xa2,0x64,0x34,0x31,0x30,0xbf,0x1d,0xb3,0x70,0x3e,0x27,0x12,0x71,0x76,0xfb,0xaa,0x7b,0x6a,0x5d,0xa2,0x71,0x87,0x83,0xba,0xf9,0xf2,0x8f,0xcd,0xd3,0xed,0x9c,0xd3,0x1a,0xdc,0xc7,0x94,0x27,0xfe,0x4d,0xf0,0x3f,0x16,0x72,0xa5,0xe5,0x5c,0xab,0x0d,0xb0,0xf4,0xd4,0x34,0xd8,0x60,0x34,0x0d,0x2f,0xa0,0x5b,0xfe,0xb0,0x7e,0x92,0x41,0x57,0x06,0x4a,0x24,0xd0,0xf1,0x0e,0x32,0x93,0xf7,0x8a,0x26,0x76,0xe3,0xc5,0x37,0x34,0xf2,0x2d,0x4e,0xa3,0x3e,0x89,0x38,0x4b,0xd1,0x7f,0x4a,0x0f,0x59,0x35,0x41,0x79,0xce,0x48,0xa7,0xd1,0xc1,0xba,0x35,0xe7,0xf7,0x77,0x35,0xf5,0x86,0x80,0xf0,0xe8,0x9b,0xf9,0x24,0x2a,0x4f,0x08,0x73,0x22,0xd9,0x9e,0x50,0x73,0x36,0xa8,0xe9,0x03,0x7b,0x6f,0x1b,0xfb,0xe4,0x56,0x14,0xab,0xeb,0x2f,0x71,0x51,0x6b,0x94,0xca,0xf6,0x18,0x85,0x1d,0xdc,0xfa,0xc7,0x42,0x9a,0x21,0x77,0xbe,0x40 };
    const uint8_t CIPHERTEXT[] = { 0xa9,0x14,0x09,0xfa,0x69,0x4a,0x4a,0xd3,0x4a,0x9c,0xb1,0xc1,0x53,0x4a,0x94,0x97,0x9a,0x5b,0xeb,0x39,0x00,0x83,0xa6,0xa6,0x1b,0x4a,0x44,0x36,0x74,0x6b,0xa1,0x20,0xf3,0x7a,0x0f,0x3e,0x97,0xca,0xa9,0x15,0x6a,0x8e,0xe4,0x10,0xb5,0x3e,0x67,0x0c,0x70,0x3d,0x1d,0x19,0xfc,0xb8,0x88,0x7f,0x15,0xd1,0x58,0x00,0x02,0xfd,0x3c,0x5d,0x0e,0xaa,0xf8,0x1c,0x3c,0x26,0xb8,0x87,0x37,0xbc,0xa3,0xf8,0x88,0x20,0xb4,0x54,0x0b,0x0d,0xc5,0xd6,0xa4,0x2c,0xed,0x0e,0x2e,0x38,0x0c,0x29,0xb4,0x60,0xa4,0x72,0xe4,0xec,0xeb,0x19,0xc0,0x24,0x1e,0x33,0x97,0x6d,0x17,0x03,0x34,0xb6,0x22,0x78,0x55,0x12,0x0d,0xf6,0x5f,0xa6,0x7e,0x5a,0x4f,0xc6,0x89,0x38,0xf4,0x5b,0x82,0x66,0x5c,0x88,0x10,0xbf,0x8c,0x8d,0x83,0x21,0x73,0xeb,0x68,0xb8,0x21,0xc9,0x5a,0x7f,0x35,0x96,0x1b,0x03,0x94,0xf0,0xe3,0x6b,0x61,0xc4,0xf7,0xb5,0x29,0xb7,0x7e,0x42 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

