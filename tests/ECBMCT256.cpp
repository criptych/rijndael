#include "rijndael.h"
#include "catch.hpp"
#include <cstring>

static inline std::string buf2str(const uint8_t *buf, size_t len) {
    std::ostringstream ss; ss << std::hex << std::setfill('0');
    for (size_t i = 0; i < len; ++i) {
        ss << std::setw(2) << static_cast<int>(buf[i]) << ' ';
    }
    return ss.str();
}

TEST_CASE("ECBMCT256-ENCRYPT-0", "[ECB][MCT][256][ENCRYPT][n0]") {
    const uint8_t KEY[] = { 0xf9,0xe8,0x38,0x9f,0x5b,0x80,0x71,0x2e,0x38,0x86,0xcc,0x1f,0xa2,0xd2,0x8a,0x3b,0x8c,0x9c,0xd8,0x8a,0x2d,0x4a,0x54,0xc6,0xaa,0x86,0xce,0x0f,0xef,0x94,0x4b,0xe0 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xb3,0x79,0x77,0x7f,0x90,0x50,0xe2,0xa8,0x18,0xf2,0x94,0x0c,0xbb,0xd9,0xab,0xa4 };
    const uint8_t CIPHERTEXT[] = { 0x68,0x93,0xeb,0xaf,0x0a,0x1f,0xcc,0xc7,0x04,0x32,0x65,0x29,0xfd,0xfb,0x60,0xdb };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-1", "[ECB][MCT][256][ENCRYPT][n1]") {
    const uint8_t KEY[] = { 0xdb,0x9e,0xa5,0xa2,0x28,0x4f,0xa1,0x7f,0xb6,0x3e,0x13,0xbf,0x89,0x1c,0x8e,0x42,0xe4,0x0f,0x33,0x25,0x27,0x55,0x98,0x01,0xae,0xb4,0xab,0x26,0x12,0x6f,0x2b,0x3b };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x68,0x93,0xeb,0xaf,0x0a,0x1f,0xcc,0xc7,0x04,0x32,0x65,0x29,0xfd,0xfb,0x60,0xdb };
    const uint8_t CIPHERTEXT[] = { 0xf3,0xc7,0x8a,0x5e,0x85,0xe5,0x43,0x9b,0xf2,0x6d,0x58,0x18,0x71,0x81,0x57,0xd6 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-2", "[ECB][MCT][256][ENCRYPT][n2]") {
    const uint8_t KEY[] = { 0x70,0x99,0xed,0x88,0xe8,0x27,0x44,0x22,0x8a,0x53,0x03,0xae,0x2e,0xf6,0xc0,0xd0,0x17,0xc8,0xb9,0x7b,0xa2,0xb0,0xdb,0x9a,0x5c,0xd9,0xf3,0x3e,0x63,0xee,0x7c,0xed };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xf3,0xc7,0x8a,0x5e,0x85,0xe5,0x43,0x9b,0xf2,0x6d,0x58,0x18,0x71,0x81,0x57,0xd6 };
    const uint8_t CIPHERTEXT[] = { 0x23,0x26,0xb9,0x58,0xb0,0x0b,0x30,0x50,0x69,0x7e,0xed,0xb0,0x8c,0xc2,0x05,0x04 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-3", "[ECB][MCT][256][ENCRYPT][n3]") {
    const uint8_t KEY[] = { 0x5e,0x9e,0x65,0xea,0x96,0xe7,0x8d,0xd4,0xfb,0x78,0xea,0x11,0x84,0xf6,0xeb,0xde,0x34,0xee,0x00,0x23,0x12,0xbb,0xeb,0xca,0x35,0xa7,0x1e,0x8e,0xef,0x2c,0x79,0xe9 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x23,0x26,0xb9,0x58,0xb0,0x0b,0x30,0x50,0x69,0x7e,0xed,0xb0,0x8c,0xc2,0x05,0x04 };
    const uint8_t CIPHERTEXT[] = { 0xec,0x43,0x32,0xd5,0xe3,0xce,0xbd,0x3e,0x0f,0x5f,0xc5,0x14,0x52,0xf4,0x56,0x0d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-4", "[ECB][MCT][256][ENCRYPT][n4]") {
    const uint8_t KEY[] = { 0x33,0xac,0xf1,0xca,0xfc,0x82,0x26,0x46,0xdc,0x86,0x9e,0x90,0x5b,0xd2,0x6f,0x9a,0xd8,0xad,0x32,0xf6,0xf1,0x75,0x56,0xf4,0x3a,0xf8,0xdb,0x9a,0xbd,0xd8,0x2f,0xe4 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xec,0x43,0x32,0xd5,0xe3,0xce,0xbd,0x3e,0x0f,0x5f,0xc5,0x14,0x52,0xf4,0x56,0x0d };
    const uint8_t CIPHERTEXT[] = { 0x5d,0xa5,0x8b,0x5e,0xf2,0x07,0x63,0x40,0xd5,0x55,0xf8,0x61,0xc3,0x44,0x9a,0x77 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-5", "[ECB][MCT][256][ENCRYPT][n5]") {
    const uint8_t KEY[] = { 0xeb,0x0a,0xe8,0x5c,0x1b,0x44,0xd5,0xdb,0x47,0x29,0xd2,0x68,0xf4,0x9b,0xe2,0xa0,0x85,0x08,0xb9,0xa8,0x03,0x72,0x35,0xb4,0xef,0xad,0x23,0xfb,0x7e,0x9c,0xb5,0x93 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x5d,0xa5,0x8b,0x5e,0xf2,0x07,0x63,0x40,0xd5,0x55,0xf8,0x61,0xc3,0x44,0x9a,0x77 };
    const uint8_t CIPHERTEXT[] = { 0x30,0x7d,0x50,0xc1,0x8a,0x0b,0x6a,0x08,0x40,0x2f,0xf1,0x31,0xd7,0x2c,0xb7,0xec };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-6", "[ECB][MCT][256][ENCRYPT][n6]") {
    const uint8_t KEY[] = { 0xfa,0xc9,0x3b,0x56,0x1a,0x9b,0x6a,0x0e,0x80,0x9d,0x71,0xec,0xdb,0x98,0x0a,0xfa,0xb5,0x75,0xe9,0x69,0x89,0x79,0x5f,0xbc,0xaf,0x82,0xd2,0xca,0xa9,0xb0,0x02,0x7f };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x30,0x7d,0x50,0xc1,0x8a,0x0b,0x6a,0x08,0x40,0x2f,0xf1,0x31,0xd7,0x2c,0xb7,0xec };
    const uint8_t CIPHERTEXT[] = { 0x92,0xc3,0x41,0x65,0xa2,0x96,0x3e,0x77,0xe0,0x5e,0x2d,0x6f,0xc2,0xd9,0x31,0xd5 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-7", "[ECB][MCT][256][ENCRYPT][n7]") {
    const uint8_t KEY[] = { 0xa0,0x55,0x9e,0x41,0xd5,0x8a,0xf3,0x61,0x74,0xa6,0x72,0x46,0xdf,0x87,0x54,0x1b,0x27,0xb6,0xa8,0x0c,0x2b,0xef,0x61,0xcb,0x4f,0xdc,0xff,0xa5,0x6b,0x69,0x33,0xaa };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x92,0xc3,0x41,0x65,0xa2,0x96,0x3e,0x77,0xe0,0x5e,0x2d,0x6f,0xc2,0xd9,0x31,0xd5 };
    const uint8_t CIPHERTEXT[] = { 0xcb,0x33,0xd5,0x19,0xa1,0xfd,0xb1,0xd5,0xfb,0xb1,0x85,0xc4,0x78,0x70,0xc1,0xed };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-8", "[ECB][MCT][256][ENCRYPT][n8]") {
    const uint8_t KEY[] = { 0xe4,0x88,0x24,0xd6,0xc2,0x25,0x1d,0x3a,0x27,0xf3,0x8f,0xb5,0x43,0xc3,0x1f,0xc1,0xec,0x85,0x7d,0x15,0x8a,0x12,0xd0,0x1e,0xb4,0x6d,0x7a,0x61,0x13,0x19,0xf2,0x47 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xcb,0x33,0xd5,0x19,0xa1,0xfd,0xb1,0xd5,0xfb,0xb1,0x85,0xc4,0x78,0x70,0xc1,0xed };
    const uint8_t CIPHERTEXT[] = { 0x78,0xfb,0x45,0x2f,0x38,0x4c,0x8f,0x87,0x0e,0x57,0x28,0x90,0x58,0x8f,0x37,0x28 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-9", "[ECB][MCT][256][ENCRYPT][n9]") {
    const uint8_t KEY[] = { 0x7a,0x33,0x44,0x0a,0xd7,0xc6,0x9d,0x58,0x33,0x55,0xc7,0x45,0xe5,0xc8,0x8c,0x47,0x94,0x7e,0x38,0x3a,0xb2,0x5e,0x5f,0x99,0xba,0x3a,0x52,0xf1,0x4b,0x96,0xc5,0x6f };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x78,0xfb,0x45,0x2f,0x38,0x4c,0x8f,0x87,0x0e,0x57,0x28,0x90,0x58,0x8f,0x37,0x28 };
    const uint8_t CIPHERTEXT[] = { 0x12,0x37,0x5e,0x02,0xa8,0xbb,0xc8,0x4b,0x00,0xfe,0xaa,0xb5,0x4a,0x66,0xdb,0x43 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-10", "[ECB][MCT][256][ENCRYPT][n10]") {
    const uint8_t KEY[] = { 0x0e,0x68,0x77,0xc7,0xfd,0xc2,0x34,0xef,0xb9,0xaf,0xcd,0x96,0xb4,0xeb,0xdb,0x83,0x86,0x49,0x66,0x38,0x1a,0xe5,0x97,0xd2,0xba,0xc4,0xf8,0x44,0x01,0xf0,0x1e,0x2c };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x12,0x37,0x5e,0x02,0xa8,0xbb,0xc8,0x4b,0x00,0xfe,0xaa,0xb5,0x4a,0x66,0xdb,0x43 };
    const uint8_t CIPHERTEXT[] = { 0xea,0xb1,0x60,0x66,0x10,0xb5,0x5c,0x85,0x7f,0x2b,0x4b,0xf1,0xcf,0x3f,0xeb,0xa0 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-11", "[ECB][MCT][256][ENCRYPT][n11]") {
    const uint8_t KEY[] = { 0xec,0x91,0xd3,0x55,0x0c,0x79,0xab,0x49,0x14,0xa2,0x69,0x87,0x72,0x5a,0xb1,0x39,0x6c,0xf8,0x06,0x5e,0x0a,0x50,0xcb,0x57,0xc5,0xef,0xb3,0xb5,0xce,0xcf,0xf5,0x8c };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xea,0xb1,0x60,0x66,0x10,0xb5,0x5c,0x85,0x7f,0x2b,0x4b,0xf1,0xcf,0x3f,0xeb,0xa0 };
    const uint8_t CIPHERTEXT[] = { 0x6c,0x73,0x38,0x11,0x47,0xde,0x97,0x96,0x1c,0xc2,0x6a,0xd2,0x66,0x02,0xa4,0x5a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-12", "[ECB][MCT][256][ENCRYPT][n12]") {
    const uint8_t KEY[] = { 0x83,0xca,0xed,0x5a,0x49,0x57,0x9b,0x3a,0x55,0xa7,0x1e,0x5e,0xce,0x59,0x66,0xe5,0x00,0x8b,0x3e,0x4f,0x4d,0x8e,0x5c,0xc1,0xd9,0x2d,0xd9,0x67,0xa8,0xcd,0x51,0xd6 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x6c,0x73,0x38,0x11,0x47,0xde,0x97,0x96,0x1c,0xc2,0x6a,0xd2,0x66,0x02,0xa4,0x5a };
    const uint8_t CIPHERTEXT[] = { 0xe7,0x6c,0x08,0xfd,0x29,0xbf,0x01,0x53,0x52,0x00,0x3c,0x63,0x6f,0xee,0x5f,0xf9 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-13", "[ECB][MCT][256][ENCRYPT][n13]") {
    const uint8_t KEY[] = { 0x91,0xb9,0xb5,0x09,0x08,0x96,0x83,0x61,0xdc,0xd8,0xf4,0xba,0x23,0x6f,0xa1,0x99,0xe7,0xe7,0x36,0xb2,0x64,0x31,0x5d,0x92,0x8b,0x2d,0xe5,0x04,0xc7,0x23,0x0e,0x2f };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xe7,0x6c,0x08,0xfd,0x29,0xbf,0x01,0x53,0x52,0x00,0x3c,0x63,0x6f,0xee,0x5f,0xf9 };
    const uint8_t CIPHERTEXT[] = { 0x6f,0x26,0xb8,0x19,0x1a,0x2b,0x05,0x9d,0xcd,0xeb,0x3d,0xba,0xbc,0x43,0x7c,0x29 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-14", "[ECB][MCT][256][ENCRYPT][n14]") {
    const uint8_t KEY[] = { 0x94,0xfc,0x46,0x21,0x3c,0x87,0x0f,0x79,0x65,0xb8,0x87,0x73,0xaf,0xe9,0x3b,0x13,0x88,0xc1,0x8e,0xab,0x7e,0x1a,0x58,0x0f,0x46,0xc6,0xd8,0xbe,0x7b,0x60,0x72,0x06 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x6f,0x26,0xb8,0x19,0x1a,0x2b,0x05,0x9d,0xcd,0xeb,0x3d,0xba,0xbc,0x43,0x7c,0x29 };
    const uint8_t CIPHERTEXT[] = { 0xe9,0x1e,0x2f,0xce,0xf1,0x4d,0xd4,0x25,0x1c,0xae,0xc9,0x7c,0x45,0x22,0x3f,0xef };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-15", "[ECB][MCT][256][ENCRYPT][n15]") {
    const uint8_t KEY[] = { 0xb0,0xde,0xff,0x00,0x9a,0xff,0x61,0xf6,0x57,0x63,0xb0,0xb9,0xfd,0xd3,0x9a,0x90,0x61,0xdf,0xa1,0x65,0x8f,0x57,0x8c,0x2a,0x5a,0x68,0x11,0xc2,0x3e,0x42,0x4d,0xe9 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xe9,0x1e,0x2f,0xce,0xf1,0x4d,0xd4,0x25,0x1c,0xae,0xc9,0x7c,0x45,0x22,0x3f,0xef };
    const uint8_t CIPHERTEXT[] = { 0x98,0xfb,0x21,0x22,0x91,0x23,0x60,0xf0,0x79,0x16,0xe4,0x80,0x2c,0x0e,0xa1,0xe5 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-16", "[ECB][MCT][256][ENCRYPT][n16]") {
    const uint8_t KEY[] = { 0x96,0x8f,0x3c,0x88,0xd2,0x7f,0x1b,0xe8,0xde,0xcb,0x00,0xc4,0xd4,0x64,0xd3,0x69,0xf9,0x24,0x80,0x47,0x1e,0x74,0xec,0xda,0x23,0x7e,0xf5,0x42,0x12,0x4c,0xec,0x0c };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x98,0xfb,0x21,0x22,0x91,0x23,0x60,0xf0,0x79,0x16,0xe4,0x80,0x2c,0x0e,0xa1,0xe5 };
    const uint8_t CIPHERTEXT[] = { 0xb4,0xa1,0x5c,0x59,0x97,0x6b,0x39,0xda,0x50,0xda,0x8e,0xd3,0x93,0xf2,0x7a,0x62 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-17", "[ECB][MCT][256][ENCRYPT][n17]") {
    const uint8_t KEY[] = { 0x35,0xfe,0x06,0xa6,0x03,0x09,0x58,0x15,0x65,0xa9,0x72,0x32,0x14,0x06,0x68,0x46,0x4d,0x85,0xdc,0x1e,0x89,0x1f,0xd5,0x00,0x73,0xa4,0x7b,0x91,0x81,0xbe,0x96,0x6e };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xb4,0xa1,0x5c,0x59,0x97,0x6b,0x39,0xda,0x50,0xda,0x8e,0xd3,0x93,0xf2,0x7a,0x62 };
    const uint8_t CIPHERTEXT[] = { 0xd8,0xb5,0x7d,0x7a,0x72,0xef,0x92,0x40,0x9c,0x51,0xd4,0x0b,0xb8,0xc4,0xcb,0xc5 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-18", "[ECB][MCT][256][ENCRYPT][n18]") {
    const uint8_t KEY[] = { 0x47,0x39,0x04,0x3d,0x77,0x50,0xbc,0xf4,0xa6,0xf2,0x69,0xa3,0xd5,0x40,0x83,0xca,0x95,0x30,0xa1,0x64,0xfb,0xf0,0x47,0x40,0xef,0xf5,0xaf,0x9a,0x39,0x7a,0x5d,0xab };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xd8,0xb5,0x7d,0x7a,0x72,0xef,0x92,0x40,0x9c,0x51,0xd4,0x0b,0xb8,0xc4,0xcb,0xc5 };
    const uint8_t CIPHERTEXT[] = { 0x54,0x8c,0xc8,0x93,0xe8,0x0c,0xaf,0x5a,0x60,0x1c,0x23,0x81,0x51,0x7f,0x8c,0x5b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-19", "[ECB][MCT][256][ENCRYPT][n19]") {
    const uint8_t KEY[] = { 0x4b,0x06,0x5b,0x51,0x95,0xf2,0xdd,0xf6,0xf5,0xd0,0xae,0xd7,0x2f,0xf7,0xa1,0xe3,0xc1,0xbc,0x69,0xf7,0x13,0xfc,0xe8,0x1a,0x8f,0xe9,0x8c,0x1b,0x68,0x05,0xd1,0xf0 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x54,0x8c,0xc8,0x93,0xe8,0x0c,0xaf,0x5a,0x60,0x1c,0x23,0x81,0x51,0x7f,0x8c,0x5b };
    const uint8_t CIPHERTEXT[] = { 0x1c,0x22,0x38,0xc5,0x60,0xd6,0x78,0xd4,0x0b,0x48,0xcc,0x80,0x34,0xad,0xd0,0xc4 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-20", "[ECB][MCT][256][ENCRYPT][n20]") {
    const uint8_t KEY[] = { 0x1a,0x94,0x91,0x29,0xe1,0x4c,0x59,0x63,0xd9,0x97,0xc8,0x6a,0x63,0x52,0xea,0x53,0xdd,0x9e,0x51,0x32,0x73,0x2a,0x90,0xce,0x84,0xa1,0x40,0x9b,0x5c,0xa8,0x01,0x34 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x1c,0x22,0x38,0xc5,0x60,0xd6,0x78,0xd4,0x0b,0x48,0xcc,0x80,0x34,0xad,0xd0,0xc4 };
    const uint8_t CIPHERTEXT[] = { 0x27,0x71,0xff,0x80,0x6e,0x06,0x1d,0xf8,0xad,0x4a,0xa8,0x77,0x71,0x7b,0xf3,0x09 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-21", "[ECB][MCT][256][ENCRYPT][n21]") {
    const uint8_t KEY[] = { 0x91,0xcd,0x3e,0x48,0xf4,0xb4,0x2c,0x43,0x2b,0xed,0x98,0x48,0x58,0x3e,0x6d,0xc7,0xfa,0xef,0xae,0xb2,0x1d,0x2c,0x8d,0x36,0x29,0xeb,0xe8,0xec,0x2d,0xd3,0xf2,0x3d };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x27,0x71,0xff,0x80,0x6e,0x06,0x1d,0xf8,0xad,0x4a,0xa8,0x77,0x71,0x7b,0xf3,0x09 };
    const uint8_t CIPHERTEXT[] = { 0x06,0x55,0x93,0xfa,0x1f,0xcd,0xb4,0x81,0xbb,0x27,0xf3,0x34,0x50,0x55,0x43,0xf5 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-22", "[ECB][MCT][256][ENCRYPT][n22]") {
    const uint8_t KEY[] = { 0x42,0xd6,0xf7,0xb5,0x85,0xa0,0xa0,0xd3,0x56,0xc5,0x9b,0xe3,0xd0,0x7d,0x4d,0x41,0xfc,0xba,0x3d,0x48,0x02,0xe1,0x39,0xb7,0x92,0xcc,0x1b,0xd8,0x7d,0x86,0xb1,0xc8 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x06,0x55,0x93,0xfa,0x1f,0xcd,0xb4,0x81,0xbb,0x27,0xf3,0x34,0x50,0x55,0x43,0xf5 };
    const uint8_t CIPHERTEXT[] = { 0xd3,0xf3,0x09,0xc0,0x03,0x9b,0x15,0xd1,0x4e,0xb8,0xb7,0x39,0xa9,0x4b,0x94,0xfa };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-23", "[ECB][MCT][256][ENCRYPT][n23]") {
    const uint8_t KEY[] = { 0x72,0x90,0x0f,0x0e,0xcb,0xf9,0x0f,0xa0,0x58,0x80,0x5d,0xeb,0x43,0x08,0x15,0x07,0x2f,0x49,0x34,0x88,0x01,0x7a,0x2c,0x66,0xdc,0x74,0xac,0xe1,0xd4,0xcd,0x25,0x32 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xd3,0xf3,0x09,0xc0,0x03,0x9b,0x15,0xd1,0x4e,0xb8,0xb7,0x39,0xa9,0x4b,0x94,0xfa };
    const uint8_t CIPHERTEXT[] = { 0x4e,0x44,0x1a,0x3f,0xb2,0x77,0xd6,0xfb,0xe0,0xed,0x7c,0x6e,0x08,0x0d,0x9a,0x9f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-24", "[ECB][MCT][256][ENCRYPT][n24]") {
    const uint8_t KEY[] = { 0x12,0xef,0x87,0x89,0xb9,0x1a,0x8e,0x35,0xfd,0x0a,0xc7,0x94,0x57,0xa9,0x06,0xf0,0x61,0x0d,0x2e,0xb7,0xb3,0x0d,0xfa,0x9d,0x3c,0x99,0xd0,0x8f,0xdc,0xc0,0xbf,0xad };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x4e,0x44,0x1a,0x3f,0xb2,0x77,0xd6,0xfb,0xe0,0xed,0x7c,0x6e,0x08,0x0d,0x9a,0x9f };
    const uint8_t CIPHERTEXT[] = { 0xcb,0x92,0x41,0xbc,0x96,0x4c,0xbc,0x98,0x23,0x53,0x1f,0x68,0xe3,0xa0,0x3b,0x7c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-25", "[ECB][MCT][256][ENCRYPT][n25]") {
    const uint8_t KEY[] = { 0x2c,0xbe,0x59,0x80,0xad,0x54,0xc5,0xdb,0xf2,0xee,0x3d,0xb1,0xe9,0x87,0x57,0x33,0xaa,0x9f,0x6f,0x0b,0x25,0x41,0x46,0x05,0x1f,0xca,0xcf,0xe7,0x3f,0x60,0x84,0xd1 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xcb,0x92,0x41,0xbc,0x96,0x4c,0xbc,0x98,0x23,0x53,0x1f,0x68,0xe3,0xa0,0x3b,0x7c };
    const uint8_t CIPHERTEXT[] = { 0x70,0xb1,0x7c,0x3e,0x86,0x9a,0xca,0x60,0x76,0x61,0x7a,0x2c,0xf7,0x5e,0x9f,0x4a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-26", "[ECB][MCT][256][ENCRYPT][n26]") {
    const uint8_t KEY[] = { 0xdc,0x4d,0xa3,0x81,0x27,0x36,0xa2,0xa6,0x03,0xbc,0xc6,0x39,0x07,0x63,0xc5,0xc5,0xda,0x2e,0x13,0x35,0xa3,0xdb,0x8c,0x65,0x69,0xab,0xb5,0xcb,0xc8,0x3e,0x1b,0x9b };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x70,0xb1,0x7c,0x3e,0x86,0x9a,0xca,0x60,0x76,0x61,0x7a,0x2c,0xf7,0x5e,0x9f,0x4a };
    const uint8_t CIPHERTEXT[] = { 0xf4,0xb8,0xa6,0xed,0x6d,0x6d,0x72,0xaf,0xf5,0x94,0x84,0x31,0x4f,0x21,0x0b,0xb9 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-27", "[ECB][MCT][256][ENCRYPT][n27]") {
    const uint8_t KEY[] = { 0x2e,0x4e,0x21,0xa6,0xeb,0x77,0xbb,0x39,0xa1,0xcb,0x5c,0xd2,0x0c,0xc5,0xfd,0x3b,0x2e,0x96,0xb5,0xd8,0xce,0xb6,0xfe,0xca,0x9c,0x3f,0x31,0xfa,0x87,0x1f,0x10,0x22 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xf4,0xb8,0xa6,0xed,0x6d,0x6d,0x72,0xaf,0xf5,0x94,0x84,0x31,0x4f,0x21,0x0b,0xb9 };
    const uint8_t CIPHERTEXT[] = { 0xf5,0x6a,0x45,0x97,0xbe,0xae,0xaf,0xc0,0xc1,0x4e,0xe7,0x39,0x88,0xbc,0xbe,0xe8 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-28", "[ECB][MCT][256][ENCRYPT][n28]") {
    const uint8_t KEY[] = { 0x54,0xd5,0xc0,0x37,0xe6,0x1f,0xd0,0x9e,0x5c,0xf5,0x7f,0xd3,0x4c,0x5e,0x01,0x92,0xdb,0xfc,0xf0,0x4f,0x70,0x18,0x51,0x0a,0x5d,0x71,0xd6,0xc3,0x0f,0xa3,0xae,0xca };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xf5,0x6a,0x45,0x97,0xbe,0xae,0xaf,0xc0,0xc1,0x4e,0xe7,0x39,0x88,0xbc,0xbe,0xe8 };
    const uint8_t CIPHERTEXT[] = { 0x04,0x33,0x30,0x79,0xd5,0x35,0x22,0x36,0xe1,0xc7,0x92,0x13,0xf3,0xf3,0x8d,0xbe };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-29", "[ECB][MCT][256][ENCRYPT][n29]") {
    const uint8_t KEY[] = { 0x3a,0x5d,0xa2,0x03,0xe0,0x3f,0xa3,0x99,0xca,0xeb,0x1f,0xac,0x63,0x67,0x9b,0x56,0xdf,0xcf,0xc0,0x36,0xa5,0x2d,0x73,0x3c,0xbc,0xb6,0x44,0xd0,0xfc,0x50,0x23,0x74 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x04,0x33,0x30,0x79,0xd5,0x35,0x22,0x36,0xe1,0xc7,0x92,0x13,0xf3,0xf3,0x8d,0xbe };
    const uint8_t CIPHERTEXT[] = { 0x22,0xc9,0x7e,0xcd,0xf4,0xaf,0x83,0x0f,0x94,0xb1,0x19,0x51,0xf4,0x1e,0x4d,0x29 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-30", "[ECB][MCT][256][ENCRYPT][n30]") {
    const uint8_t KEY[] = { 0x5c,0x84,0x14,0x7d,0x6a,0xb2,0x05,0x1b,0x56,0xb0,0x99,0x3a,0x7c,0xbf,0xa3,0x06,0xfd,0x06,0xbe,0xfb,0x51,0x82,0xf0,0x33,0x28,0x07,0x5d,0x81,0x08,0x4e,0x6e,0x5d };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x22,0xc9,0x7e,0xcd,0xf4,0xaf,0x83,0x0f,0x94,0xb1,0x19,0x51,0xf4,0x1e,0x4d,0x29 };
    const uint8_t CIPHERTEXT[] = { 0xde,0xf4,0x6a,0x3b,0x39,0xc8,0x04,0x84,0x31,0xd2,0x49,0x1d,0x97,0xda,0xa6,0xea };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-31", "[ECB][MCT][256][ENCRYPT][n31]") {
    const uint8_t KEY[] = { 0x7a,0xf7,0x7a,0xa1,0x55,0xa3,0x3f,0x65,0x82,0x83,0xeb,0xc3,0xe9,0xeb,0x70,0x89,0x23,0xf2,0xd4,0xc0,0x68,0x4a,0xf4,0xb7,0x19,0xd5,0x14,0x9c,0x9f,0x94,0xc8,0xb7 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xde,0xf4,0x6a,0x3b,0x39,0xc8,0x04,0x84,0x31,0xd2,0x49,0x1d,0x97,0xda,0xa6,0xea };
    const uint8_t CIPHERTEXT[] = { 0x4c,0x63,0x67,0xad,0x8a,0x21,0x90,0x36,0x6c,0x3d,0x73,0x0f,0xe5,0xee,0xb6,0xee };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-32", "[ECB][MCT][256][ENCRYPT][n32]") {
    const uint8_t KEY[] = { 0xed,0xab,0xba,0x9d,0xc9,0xd8,0x73,0x57,0xbb,0x91,0xda,0x69,0x31,0xc7,0x43,0xe1,0x6f,0x91,0xb3,0x6d,0xe2,0x6b,0x64,0x81,0x75,0xe8,0x67,0x93,0x7a,0x7a,0x7e,0x59 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x4c,0x63,0x67,0xad,0x8a,0x21,0x90,0x36,0x6c,0x3d,0x73,0x0f,0xe5,0xee,0xb6,0xee };
    const uint8_t CIPHERTEXT[] = { 0x90,0xbd,0x09,0xb4,0xeb,0x0f,0x7d,0x83,0x97,0xc0,0x02,0x6c,0xef,0xea,0x8f,0xb3 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-33", "[ECB][MCT][256][ENCRYPT][n33]") {
    const uint8_t KEY[] = { 0xab,0x7e,0xf1,0xb4,0xa1,0xe4,0x37,0x71,0xde,0x88,0xe1,0x58,0xad,0x26,0xa4,0x19,0xff,0x2c,0xba,0xd9,0x09,0x64,0x19,0x02,0xe2,0x28,0x65,0xff,0x95,0x90,0xf1,0xea };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x90,0xbd,0x09,0xb4,0xeb,0x0f,0x7d,0x83,0x97,0xc0,0x02,0x6c,0xef,0xea,0x8f,0xb3 };
    const uint8_t CIPHERTEXT[] = { 0x25,0xae,0xfc,0xfa,0x6e,0xc9,0x8f,0xae,0x81,0xb9,0x3a,0xfa,0xd7,0x76,0x17,0x11 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-34", "[ECB][MCT][256][ENCRYPT][n34]") {
    const uint8_t KEY[] = { 0x6b,0x01,0x45,0xc6,0xcb,0xea,0xae,0x32,0x0b,0xe8,0x6c,0x29,0x09,0xc8,0xd6,0x43,0xda,0x82,0x46,0x23,0x67,0xad,0x96,0xac,0x63,0x91,0x5f,0x05,0x42,0xe6,0xe6,0xfb };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x25,0xae,0xfc,0xfa,0x6e,0xc9,0x8f,0xae,0x81,0xb9,0x3a,0xfa,0xd7,0x76,0x17,0x11 };
    const uint8_t CIPHERTEXT[] = { 0x60,0x7b,0x26,0xf4,0xeb,0x35,0x85,0xe3,0xe8,0x86,0xe7,0x5c,0x0f,0x3a,0x01,0xcf };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-35", "[ECB][MCT][256][ENCRYPT][n35]") {
    const uint8_t KEY[] = { 0xb4,0x6d,0x28,0xc2,0x0a,0x61,0x4b,0x6d,0x98,0x6e,0x92,0x79,0x52,0x58,0x63,0x1c,0xba,0xf9,0x60,0xd7,0x8c,0x98,0x13,0x4f,0x8b,0x17,0xb8,0x59,0x4d,0xdc,0xe7,0x34 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x60,0x7b,0x26,0xf4,0xeb,0x35,0x85,0xe3,0xe8,0x86,0xe7,0x5c,0x0f,0x3a,0x01,0xcf };
    const uint8_t CIPHERTEXT[] = { 0xfe,0x35,0xfe,0x16,0xa3,0x29,0x00,0x42,0xc2,0x8c,0x02,0x1e,0xe9,0xed,0xe7,0x3f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-36", "[ECB][MCT][256][ENCRYPT][n36]") {
    const uint8_t KEY[] = { 0x93,0xc5,0xc8,0x40,0x34,0x10,0x76,0x47,0x17,0xe5,0x47,0xe3,0xd0,0x7b,0x0e,0xc3,0x44,0xcc,0x9e,0xc1,0x2f,0xb1,0x13,0x0d,0x49,0x9b,0xba,0x47,0xa4,0x31,0x00,0x0b };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xfe,0x35,0xfe,0x16,0xa3,0x29,0x00,0x42,0xc2,0x8c,0x02,0x1e,0xe9,0xed,0xe7,0x3f };
    const uint8_t CIPHERTEXT[] = { 0x01,0x41,0x87,0x1c,0x35,0x7a,0x00,0xad,0x37,0xae,0x65,0x59,0x78,0x30,0xca,0xc8 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-37", "[ECB][MCT][256][ENCRYPT][n37]") {
    const uint8_t KEY[] = { 0xcf,0x85,0xea,0x60,0xe0,0xc9,0x4e,0x61,0x1f,0xed,0xba,0x48,0xe1,0x9e,0x96,0x93,0x45,0x8d,0x19,0xdd,0x1a,0xcb,0x13,0xa0,0x7e,0x35,0xdf,0x1e,0xdc,0x01,0xca,0xc3 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x01,0x41,0x87,0x1c,0x35,0x7a,0x00,0xad,0x37,0xae,0x65,0x59,0x78,0x30,0xca,0xc8 };
    const uint8_t CIPHERTEXT[] = { 0xdf,0x8b,0xc7,0x78,0x2a,0xe1,0x0e,0xb2,0xc1,0xbd,0xfd,0xc8,0x88,0x7e,0x49,0x07 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-38", "[ECB][MCT][256][ENCRYPT][n38]") {
    const uint8_t KEY[] = { 0xd4,0x07,0x35,0x93,0x2e,0xa2,0x69,0xae,0xb5,0x1f,0xa3,0xca,0xf0,0xc1,0x76,0xd8,0x9a,0x06,0xde,0xa5,0x30,0x2a,0x1d,0x12,0xbf,0x88,0x22,0xd6,0x54,0x7f,0x83,0xc4 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xdf,0x8b,0xc7,0x78,0x2a,0xe1,0x0e,0xb2,0xc1,0xbd,0xfd,0xc8,0x88,0x7e,0x49,0x07 };
    const uint8_t CIPHERTEXT[] = { 0x1a,0xc6,0x5c,0x65,0xb6,0xcd,0x8a,0xb7,0x51,0xf1,0xd9,0x08,0xeb,0xd9,0x62,0xab };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-39", "[ECB][MCT][256][ENCRYPT][n39]") {
    const uint8_t KEY[] = { 0x9a,0x71,0x20,0x34,0x18,0x19,0xfe,0x54,0xfc,0x8a,0x75,0x0d,0x17,0xec,0xf2,0x0f,0x80,0xc0,0x82,0xc0,0x86,0xe7,0x97,0xa5,0xee,0x79,0xfb,0xde,0xbf,0xa6,0xe1,0x6f };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x1a,0xc6,0x5c,0x65,0xb6,0xcd,0x8a,0xb7,0x51,0xf1,0xd9,0x08,0xeb,0xd9,0x62,0xab };
    const uint8_t CIPHERTEXT[] = { 0x9f,0x10,0xb5,0x3f,0xb6,0xad,0xf7,0x18,0x9e,0x27,0x7d,0x04,0xe3,0x51,0xaa,0x9d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-40", "[ECB][MCT][256][ENCRYPT][n40]") {
    const uint8_t KEY[] = { 0x8c,0x19,0x64,0x2c,0x17,0x2c,0xdb,0x80,0x40,0x59,0xf7,0x51,0xb3,0xf2,0x5c,0xff,0x1f,0xd0,0x37,0xff,0x30,0x4a,0x60,0xbd,0x70,0x5e,0x86,0xda,0x5c,0xf7,0x4b,0xf2 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x9f,0x10,0xb5,0x3f,0xb6,0xad,0xf7,0x18,0x9e,0x27,0x7d,0x04,0xe3,0x51,0xaa,0x9d };
    const uint8_t CIPHERTEXT[] = { 0xc9,0x4e,0xcc,0x94,0x3d,0xdc,0x8d,0x1e,0xea,0xfa,0xdd,0x17,0x3c,0xf7,0x3f,0xdc };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-41", "[ECB][MCT][256][ENCRYPT][n41]") {
    const uint8_t KEY[] = { 0xe1,0xcc,0x95,0x75,0xe5,0x1d,0x6a,0x82,0x40,0xe6,0xf3,0xcd,0x89,0x58,0xe1,0xa6,0xd6,0x9e,0xfb,0x6b,0x0d,0x96,0xed,0xa3,0x9a,0xa4,0x5b,0xcd,0x60,0x00,0x74,0x2e };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xc9,0x4e,0xcc,0x94,0x3d,0xdc,0x8d,0x1e,0xea,0xfa,0xdd,0x17,0x3c,0xf7,0x3f,0xdc };
    const uint8_t CIPHERTEXT[] = { 0x5d,0xd5,0x13,0xd7,0x4b,0x72,0xf9,0xd4,0x6b,0x06,0xb4,0xb9,0x6a,0x94,0xc3,0xbd };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-42", "[ECB][MCT][256][ENCRYPT][n42]") {
    const uint8_t KEY[] = { 0xce,0x41,0xff,0x2d,0x70,0xb2,0x16,0x9f,0xad,0x6a,0x5f,0x9e,0xad,0x44,0x71,0xe8,0x8b,0x4b,0xe8,0xbc,0x46,0xe4,0x14,0x77,0xf1,0xa2,0xef,0x74,0x0a,0x94,0xb7,0x93 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x5d,0xd5,0x13,0xd7,0x4b,0x72,0xf9,0xd4,0x6b,0x06,0xb4,0xb9,0x6a,0x94,0xc3,0xbd };
    const uint8_t CIPHERTEXT[] = { 0x15,0x94,0xa3,0x1c,0xc2,0x2c,0xdb,0xaf,0x20,0x11,0xa9,0xa3,0x17,0x53,0x86,0x08 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-43", "[ECB][MCT][256][ENCRYPT][n43]") {
    const uint8_t KEY[] = { 0x7b,0x46,0x7b,0x87,0x18,0x07,0x72,0x67,0x79,0x03,0xa0,0x43,0xbc,0x63,0xc3,0xef,0x9e,0xdf,0x4b,0xa0,0x84,0xc8,0xcf,0xd8,0xd1,0xb3,0x46,0xd7,0x1d,0xc7,0x31,0x9b };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x15,0x94,0xa3,0x1c,0xc2,0x2c,0xdb,0xaf,0x20,0x11,0xa9,0xa3,0x17,0x53,0x86,0x08 };
    const uint8_t CIPHERTEXT[] = { 0x4d,0x5e,0x8d,0x6f,0xa3,0xe2,0xea,0x34,0x3b,0x5a,0xfb,0x77,0x12,0x45,0x29,0xaa };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-44", "[ECB][MCT][256][ENCRYPT][n44]") {
    const uint8_t KEY[] = { 0xca,0x06,0x8b,0x3a,0xfc,0x71,0x7d,0x1f,0x6e,0x8d,0xc7,0xe4,0xec,0xa0,0xf5,0x6f,0xd3,0x81,0xc6,0xcf,0x27,0x2a,0x25,0xec,0xea,0xe9,0xbd,0xa0,0x0f,0x82,0x18,0x31 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x4d,0x5e,0x8d,0x6f,0xa3,0xe2,0xea,0x34,0x3b,0x5a,0xfb,0x77,0x12,0x45,0x29,0xaa };
    const uint8_t CIPHERTEXT[] = { 0x1b,0xbf,0x65,0x1c,0xf6,0x1c,0x29,0x5c,0x96,0xe7,0x3a,0x21,0x04,0x83,0xd7,0xa1 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-45", "[ECB][MCT][256][ENCRYPT][n45]") {
    const uint8_t KEY[] = { 0xd0,0x4d,0x80,0x99,0x8a,0x97,0x1e,0xc5,0x2d,0x53,0x90,0xfa,0x7e,0xaf,0x78,0xea,0xc8,0x3e,0xa3,0xd3,0xd1,0x36,0x0c,0xb0,0x7c,0x0e,0x87,0x81,0x0b,0x01,0xcf,0x90 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x1b,0xbf,0x65,0x1c,0xf6,0x1c,0x29,0x5c,0x96,0xe7,0x3a,0x21,0x04,0x83,0xd7,0xa1 };
    const uint8_t CIPHERTEXT[] = { 0x84,0xb4,0x2f,0x75,0xc3,0xb6,0x2b,0xbf,0x21,0x70,0x7b,0xa6,0x6c,0xca,0x39,0x9f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-46", "[ECB][MCT][256][ENCRYPT][n46]") {
    const uint8_t KEY[] = { 0x2c,0xfb,0x1c,0x71,0xe8,0xca,0xc8,0x72,0xe6,0xa6,0xdc,0x90,0xb0,0x19,0x5a,0xcf,0x4c,0x8a,0x8c,0xa6,0x12,0x80,0x27,0x0f,0x5d,0x7e,0xfc,0x27,0x67,0xcb,0xf6,0x0f };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x84,0xb4,0x2f,0x75,0xc3,0xb6,0x2b,0xbf,0x21,0x70,0x7b,0xa6,0x6c,0xca,0x39,0x9f };
    const uint8_t CIPHERTEXT[] = { 0xa0,0xc5,0x14,0xe1,0xe6,0xa9,0xc6,0x59,0xf6,0x05,0xef,0xf4,0xcf,0x49,0x51,0xa0 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-47", "[ECB][MCT][256][ENCRYPT][n47]") {
    const uint8_t KEY[] = { 0x40,0x5b,0xc4,0x50,0xa1,0x9e,0x6d,0xae,0x76,0x84,0x7b,0x8e,0xac,0x85,0x8c,0x8b,0xec,0x4f,0x98,0x47,0xf4,0x29,0xe1,0x56,0xab,0x7b,0x13,0xd3,0xa8,0x82,0xa7,0xaf };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xa0,0xc5,0x14,0xe1,0xe6,0xa9,0xc6,0x59,0xf6,0x05,0xef,0xf4,0xcf,0x49,0x51,0xa0 };
    const uint8_t CIPHERTEXT[] = { 0x1d,0xcc,0x38,0x30,0x7c,0x6b,0x3c,0x31,0xe2,0x5f,0x86,0x8b,0x27,0x9b,0x37,0x11 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-48", "[ECB][MCT][256][ENCRYPT][n48]") {
    const uint8_t KEY[] = { 0x35,0x75,0x5f,0xe9,0x7d,0x9a,0xeb,0x1e,0x67,0xc1,0xf4,0xca,0x5a,0x40,0xce,0x1f,0xf1,0x83,0xa0,0x77,0x88,0x42,0xdd,0x67,0x49,0x24,0x95,0x58,0x8f,0x19,0x90,0xbe };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x1d,0xcc,0x38,0x30,0x7c,0x6b,0x3c,0x31,0xe2,0x5f,0x86,0x8b,0x27,0x9b,0x37,0x11 };
    const uint8_t CIPHERTEXT[] = { 0xcd,0xd7,0x44,0x57,0x46,0x64,0xbe,0x7b,0x22,0x1d,0x7a,0x29,0x21,0xb4,0xf0,0xb2 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-49", "[ECB][MCT][256][ENCRYPT][n49]") {
    const uint8_t KEY[] = { 0x7e,0x9d,0x8b,0x4b,0xbd,0x2a,0xad,0x70,0xd2,0x29,0x24,0x7d,0x58,0x80,0xa0,0xcb,0x3c,0x54,0xe4,0x20,0xce,0x26,0x63,0x1c,0x6b,0x39,0xef,0x71,0xae,0xad,0x60,0x0c };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xcd,0xd7,0x44,0x57,0x46,0x64,0xbe,0x7b,0x22,0x1d,0x7a,0x29,0x21,0xb4,0xf0,0xb2 };
    const uint8_t CIPHERTEXT[] = { 0xe6,0x02,0xef,0x85,0x18,0x4a,0xd4,0xa8,0x6e,0xd3,0x39,0xe9,0x40,0x3f,0x54,0x1c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-50", "[ECB][MCT][256][ENCRYPT][n50]") {
    const uint8_t KEY[] = { 0x73,0xbe,0x0b,0xb5,0xb7,0x4a,0x8f,0x63,0x24,0xf8,0xa5,0xf0,0xac,0xbf,0x5f,0xaa,0xda,0x56,0x0b,0xa5,0xd6,0x6c,0xb7,0xb4,0x05,0xea,0xd6,0x98,0xee,0x92,0x34,0x10 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xe6,0x02,0xef,0x85,0x18,0x4a,0xd4,0xa8,0x6e,0xd3,0x39,0xe9,0x40,0x3f,0x54,0x1c };
    const uint8_t CIPHERTEXT[] = { 0x7c,0x22,0x7f,0x03,0xe6,0x05,0xff,0x14,0xc4,0x2f,0xb9,0xf8,0xe8,0x78,0x6e,0x84 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-51", "[ECB][MCT][256][ENCRYPT][n51]") {
    const uint8_t KEY[] = { 0xc8,0x2e,0x22,0xfa,0xec,0xa5,0x1a,0x38,0x04,0x5f,0x2a,0x3a,0x04,0xa0,0xe6,0xe2,0xa6,0x74,0x74,0xa6,0x30,0x69,0x48,0xa0,0xc1,0xc5,0x6f,0x60,0x06,0xea,0x5a,0x94 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x7c,0x22,0x7f,0x03,0xe6,0x05,0xff,0x14,0xc4,0x2f,0xb9,0xf8,0xe8,0x78,0x6e,0x84 };
    const uint8_t CIPHERTEXT[] = { 0x94,0xc0,0x46,0x6b,0x27,0xaa,0x4d,0x36,0x1b,0x19,0xc2,0x50,0x32,0x9c,0x14,0xa0 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-52", "[ECB][MCT][256][ENCRYPT][n52]") {
    const uint8_t KEY[] = { 0x7c,0x1d,0xd4,0x2b,0xdf,0xf4,0x14,0xe3,0x73,0x3b,0x84,0x6c,0xbb,0x00,0xc4,0x34,0x32,0xb4,0x32,0xcd,0x17,0xc3,0x05,0x96,0xda,0xdc,0xad,0x30,0x34,0x76,0x4e,0x34 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x94,0xc0,0x46,0x6b,0x27,0xaa,0x4d,0x36,0x1b,0x19,0xc2,0x50,0x32,0x9c,0x14,0xa0 };
    const uint8_t CIPHERTEXT[] = { 0xfd,0x6b,0x28,0x1c,0x93,0xc1,0xfd,0x8e,0x9b,0x83,0xb6,0x9e,0xcf,0x72,0x2f,0x3b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-53", "[ECB][MCT][256][ENCRYPT][n53]") {
    const uint8_t KEY[] = { 0xaa,0x7e,0xc0,0x03,0xef,0xbc,0xa8,0x6f,0xe5,0xad,0x02,0x8d,0x05,0x71,0xcf,0x3a,0xcf,0xdf,0x1a,0xd1,0x84,0x02,0xf8,0x18,0x41,0x5f,0x1b,0xae,0xfb,0x04,0x61,0x0f };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xfd,0x6b,0x28,0x1c,0x93,0xc1,0xfd,0x8e,0x9b,0x83,0xb6,0x9e,0xcf,0x72,0x2f,0x3b };
    const uint8_t CIPHERTEXT[] = { 0xa7,0x5b,0x28,0xbe,0x92,0xdc,0x53,0xde,0x9d,0x44,0x71,0x49,0x18,0xe3,0xc5,0x41 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-54", "[ECB][MCT][256][ENCRYPT][n54]") {
    const uint8_t KEY[] = { 0x14,0xba,0x26,0xba,0xfb,0x6c,0x84,0x10,0x10,0x4d,0x70,0xec,0x23,0x87,0x6d,0xb5,0x68,0x84,0x32,0x6f,0x16,0xde,0xab,0xc6,0xdc,0x1b,0x6a,0xe7,0xe3,0xe7,0xa4,0x4e };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xa7,0x5b,0x28,0xbe,0x92,0xdc,0x53,0xde,0x9d,0x44,0x71,0x49,0x18,0xe3,0xc5,0x41 };
    const uint8_t CIPHERTEXT[] = { 0x48,0x69,0x30,0x25,0xba,0x68,0xf3,0xfa,0x35,0x15,0xe7,0x11,0x2b,0x6e,0x32,0xaa };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-55", "[ECB][MCT][256][ENCRYPT][n55]") {
    const uint8_t KEY[] = { 0x33,0xb4,0x07,0x38,0xb3,0x9e,0xbe,0x39,0x11,0x89,0x38,0xc6,0x46,0x1e,0xbd,0x78,0x20,0xed,0x02,0x4a,0xac,0xb6,0x58,0x3c,0xe9,0x0e,0x8d,0xf6,0xc8,0x89,0x96,0xe4 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x48,0x69,0x30,0x25,0xba,0x68,0xf3,0xfa,0x35,0x15,0xe7,0x11,0x2b,0x6e,0x32,0xaa };
    const uint8_t CIPHERTEXT[] = { 0x6b,0xfa,0x37,0xcc,0x5e,0xd6,0xe5,0xd4,0xdd,0xf4,0x0b,0x13,0x01,0x95,0x7f,0x73 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-56", "[ECB][MCT][256][ENCRYPT][n56]") {
    const uint8_t KEY[] = { 0x0d,0x16,0xea,0xb1,0xb5,0x6e,0x2a,0x46,0x8b,0xf1,0xba,0x10,0x35,0x12,0x9d,0x57,0x4b,0x17,0x35,0x86,0xf2,0x60,0xbd,0xe8,0x34,0xfa,0x86,0xe5,0xc9,0x1c,0xe9,0x97 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x6b,0xfa,0x37,0xcc,0x5e,0xd6,0xe5,0xd4,0xdd,0xf4,0x0b,0x13,0x01,0x95,0x7f,0x73 };
    const uint8_t CIPHERTEXT[] = { 0xca,0x18,0xb8,0x9c,0x32,0x25,0x87,0x7e,0x02,0xe2,0x10,0x42,0xaf,0x98,0x36,0xa8 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-57", "[ECB][MCT][256][ENCRYPT][n57]") {
    const uint8_t KEY[] = { 0x44,0xb5,0x55,0x14,0xa5,0xb4,0xa5,0xa4,0x29,0x4f,0x3c,0xf8,0xe7,0x5f,0xf7,0x3c,0x81,0x0f,0x8d,0x1a,0xc0,0x45,0x3a,0x96,0x36,0x18,0x96,0xa7,0x66,0x84,0xdf,0x3f };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xca,0x18,0xb8,0x9c,0x32,0x25,0x87,0x7e,0x02,0xe2,0x10,0x42,0xaf,0x98,0x36,0xa8 };
    const uint8_t CIPHERTEXT[] = { 0xc3,0xeb,0xc0,0x83,0x68,0xbe,0x58,0xf8,0xf5,0x14,0xcf,0xbd,0x5f,0x98,0xed,0x52 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-58", "[ECB][MCT][256][ENCRYPT][n58]") {
    const uint8_t KEY[] = { 0x26,0x5f,0x1a,0x7a,0x53,0x15,0x1b,0xc5,0x15,0x26,0xfe,0x47,0x6e,0x8c,0x63,0xad,0x42,0xe4,0x4d,0x99,0xa8,0xfb,0x62,0x6e,0xc3,0x0c,0x59,0x1a,0x39,0x1c,0x32,0x6d };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xc3,0xeb,0xc0,0x83,0x68,0xbe,0x58,0xf8,0xf5,0x14,0xcf,0xbd,0x5f,0x98,0xed,0x52 };
    const uint8_t CIPHERTEXT[] = { 0x78,0x85,0x52,0x39,0x7d,0xdf,0x2d,0x58,0x41,0xdb,0xc0,0xe7,0x3d,0xd1,0x11,0x50 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-59", "[ECB][MCT][256][ENCRYPT][n59]") {
    const uint8_t KEY[] = { 0x23,0xfa,0x46,0x30,0x93,0x70,0x15,0x58,0x5a,0xc0,0x65,0xe6,0xa7,0xbd,0x93,0x02,0x3a,0x61,0x1f,0xa0,0xd5,0x24,0x4f,0x36,0x82,0xd7,0x99,0xfd,0x04,0xcd,0x23,0x3d };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x78,0x85,0x52,0x39,0x7d,0xdf,0x2d,0x58,0x41,0xdb,0xc0,0xe7,0x3d,0xd1,0x11,0x50 };
    const uint8_t CIPHERTEXT[] = { 0xe9,0xd7,0x28,0xbc,0x19,0xb5,0x08,0x09,0xbc,0x12,0x45,0x55,0x20,0x91,0xd0,0xb2 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-60", "[ECB][MCT][256][ENCRYPT][n60]") {
    const uint8_t KEY[] = { 0x9d,0xd3,0xa2,0x40,0x8e,0x56,0x94,0xfc,0xed,0x28,0x96,0x4c,0x7f,0x44,0x2e,0x6e,0xd3,0xb6,0x37,0x1c,0xcc,0x91,0x47,0x3f,0x3e,0xc5,0xdc,0xa8,0x24,0x5c,0xf3,0x8f };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xe9,0xd7,0x28,0xbc,0x19,0xb5,0x08,0x09,0xbc,0x12,0x45,0x55,0x20,0x91,0xd0,0xb2 };
    const uint8_t CIPHERTEXT[] = { 0xce,0x08,0xd7,0x8b,0x58,0x17,0x9b,0x79,0x57,0xee,0xab,0x6f,0x74,0xdd,0xb1,0x0f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-61", "[ECB][MCT][256][ENCRYPT][n61]") {
    const uint8_t KEY[] = { 0x05,0x5d,0x53,0xef,0x57,0x4a,0x63,0xf7,0x7c,0x0b,0x3a,0x88,0xe7,0xe7,0xcd,0xb0,0x1d,0xbe,0xe0,0x97,0x94,0x86,0xdc,0x46,0x69,0x2b,0x77,0xc7,0x50,0x81,0x42,0x80 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xce,0x08,0xd7,0x8b,0x58,0x17,0x9b,0x79,0x57,0xee,0xab,0x6f,0x74,0xdd,0xb1,0x0f };
    const uint8_t CIPHERTEXT[] = { 0x33,0xce,0x33,0xe8,0x0f,0xcc,0x26,0x2e,0x9e,0x86,0x2f,0x5a,0xc5,0x0c,0x14,0xdf };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-62", "[ECB][MCT][256][ENCRYPT][n62]") {
    const uint8_t KEY[] = { 0xc1,0xa9,0x0c,0xde,0xf5,0xd5,0xda,0xaf,0x7b,0x18,0x2d,0x6b,0x40,0x99,0x40,0xe6,0x2e,0x70,0xd3,0x7f,0x9b,0x4a,0xfa,0x68,0xf7,0xad,0x58,0x9d,0x95,0x8d,0x56,0x5f };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x33,0xce,0x33,0xe8,0x0f,0xcc,0x26,0x2e,0x9e,0x86,0x2f,0x5a,0xc5,0x0c,0x14,0xdf };
    const uint8_t CIPHERTEXT[] = { 0x5c,0x4d,0x21,0xe6,0x04,0x5f,0x11,0xf9,0xf9,0x1a,0x8c,0xef,0x13,0x03,0x04,0xe0 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-63", "[ECB][MCT][256][ENCRYPT][n63]") {
    const uint8_t KEY[] = { 0x6a,0x25,0x7a,0x4f,0x65,0xbd,0xd7,0xd8,0x82,0xff,0x45,0xff,0xbb,0x95,0x41,0xe5,0x72,0x3d,0xf2,0x99,0x9f,0x15,0xeb,0x91,0x0e,0xb7,0xd4,0x72,0x86,0x8e,0x52,0xbf };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x5c,0x4d,0x21,0xe6,0x04,0x5f,0x11,0xf9,0xf9,0x1a,0x8c,0xef,0x13,0x03,0x04,0xe0 };
    const uint8_t CIPHERTEXT[] = { 0x4f,0x50,0x67,0x9c,0x2d,0xbf,0xa6,0x3b,0x5e,0x55,0xd0,0x31,0xaf,0xac,0xd4,0x4b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-64", "[ECB][MCT][256][ENCRYPT][n64]") {
    const uint8_t KEY[] = { 0x58,0x43,0xbf,0x4d,0x6a,0xfc,0x64,0x27,0x3d,0x32,0x8e,0x1b,0xaf,0x78,0x21,0xb0,0x3d,0x6d,0x95,0x05,0xb2,0xaa,0x4d,0xaa,0x50,0xe2,0x04,0x43,0x29,0x22,0x86,0xf4 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x4f,0x50,0x67,0x9c,0x2d,0xbf,0xa6,0x3b,0x5e,0x55,0xd0,0x31,0xaf,0xac,0xd4,0x4b };
    const uint8_t CIPHERTEXT[] = { 0x29,0xf6,0x4e,0x79,0xde,0x48,0xf3,0xd3,0xd5,0xdf,0xf9,0x2a,0xa0,0xb1,0x78,0x3b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-65", "[ECB][MCT][256][ENCRYPT][n65]") {
    const uint8_t KEY[] = { 0x89,0x15,0x06,0x0a,0x33,0x75,0x8a,0x30,0x0c,0x05,0x3d,0x36,0x5c,0x30,0x4d,0x4e,0x14,0x9b,0xdb,0x7c,0x6c,0xe2,0xbe,0x79,0x85,0x3d,0xfd,0x69,0x89,0x93,0xfe,0xcf };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x29,0xf6,0x4e,0x79,0xde,0x48,0xf3,0xd3,0xd5,0xdf,0xf9,0x2a,0xa0,0xb1,0x78,0x3b };
    const uint8_t CIPHERTEXT[] = { 0x8c,0x5b,0xf9,0x25,0x15,0xa9,0x24,0x49,0x84,0x65,0x93,0xa3,0xbd,0xbe,0x52,0x1b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-66", "[ECB][MCT][256][ENCRYPT][n66]") {
    const uint8_t KEY[] = { 0xbe,0x2b,0x2a,0x41,0xb3,0x49,0x15,0x11,0xc1,0x81,0x50,0x8b,0x66,0xec,0x96,0xf7,0x98,0xc0,0x22,0x59,0x79,0x4b,0x9a,0x30,0x01,0x58,0x6e,0xca,0x34,0x2d,0xac,0xd4 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x8c,0x5b,0xf9,0x25,0x15,0xa9,0x24,0x49,0x84,0x65,0x93,0xa3,0xbd,0xbe,0x52,0x1b };
    const uint8_t CIPHERTEXT[] = { 0x55,0x11,0xfe,0xf7,0xa2,0x23,0x82,0x77,0xaa,0xa9,0xe2,0x5f,0x1d,0x09,0x7c,0x19 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-67", "[ECB][MCT][256][ENCRYPT][n67]") {
    const uint8_t KEY[] = { 0x4d,0x6f,0x38,0x93,0x53,0x17,0xff,0xa0,0xcb,0x29,0xbd,0xfa,0x8a,0x43,0xcd,0x19,0xcd,0xd1,0xdc,0xae,0xdb,0x68,0x18,0x47,0xab,0xf1,0x8c,0x95,0x29,0x24,0xd0,0xcd };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x55,0x11,0xfe,0xf7,0xa2,0x23,0x82,0x77,0xaa,0xa9,0xe2,0x5f,0x1d,0x09,0x7c,0x19 };
    const uint8_t CIPHERTEXT[] = { 0x2e,0xcd,0x75,0xc6,0xa5,0xea,0xce,0x1c,0x54,0x1e,0x12,0xdb,0x15,0x0a,0x21,0x43 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-68", "[ECB][MCT][256][ENCRYPT][n68]") {
    const uint8_t KEY[] = { 0x15,0x49,0xea,0x3d,0x16,0x71,0x52,0xc8,0x52,0x23,0xb0,0xa6,0x03,0xd1,0xfa,0x61,0xe3,0x1c,0xa9,0x68,0x7e,0x82,0xd6,0x5b,0xff,0xef,0x9e,0x4e,0x3c,0x2e,0xf1,0x8e };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x2e,0xcd,0x75,0xc6,0xa5,0xea,0xce,0x1c,0x54,0x1e,0x12,0xdb,0x15,0x0a,0x21,0x43 };
    const uint8_t CIPHERTEXT[] = { 0x6a,0x4c,0xfc,0xb9,0xe8,0xda,0xe9,0x61,0x0d,0xf9,0x95,0x09,0xda,0xac,0x7b,0xe0 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-69", "[ECB][MCT][256][ENCRYPT][n69]") {
    const uint8_t KEY[] = { 0xba,0x59,0x3f,0x67,0x31,0xf7,0x0e,0xda,0xb8,0x3f,0x5c,0xdf,0x02,0x52,0x74,0x36,0x89,0x50,0x55,0xd1,0x96,0x58,0x3f,0x3a,0xf2,0x16,0x0b,0x47,0xe6,0x82,0x8a,0x6e };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x6a,0x4c,0xfc,0xb9,0xe8,0xda,0xe9,0x61,0x0d,0xf9,0x95,0x09,0xda,0xac,0x7b,0xe0 };
    const uint8_t CIPHERTEXT[] = { 0x18,0x57,0x72,0xde,0xff,0x51,0x80,0x71,0x47,0xac,0x53,0x50,0x24,0x9b,0x3e,0x1a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-70", "[ECB][MCT][256][ENCRYPT][n70]") {
    const uint8_t KEY[] = { 0x71,0x26,0xa0,0x57,0x12,0xf9,0x87,0xf1,0xc9,0x24,0x9b,0xf9,0xa7,0xc1,0x7b,0x4f,0x91,0x07,0x27,0x0f,0x69,0x09,0xbf,0x4b,0xb5,0xba,0x58,0x17,0xc2,0x19,0xb4,0x74 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x18,0x57,0x72,0xde,0xff,0x51,0x80,0x71,0x47,0xac,0x53,0x50,0x24,0x9b,0x3e,0x1a };
    const uint8_t CIPHERTEXT[] = { 0xbf,0xb1,0xce,0x7d,0xf7,0x06,0xbc,0x97,0x2e,0x1b,0x83,0x06,0xd4,0x4a,0xa1,0x35 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-71", "[ECB][MCT][256][ENCRYPT][n71]") {
    const uint8_t KEY[] = { 0x3d,0x0f,0xa3,0x98,0x3e,0xbc,0x8a,0x3f,0x64,0xc4,0x13,0x5d,0x7c,0xd3,0x19,0x5e,0x2e,0xb6,0xe9,0x72,0x9e,0x0f,0x03,0xdc,0x9b,0xa1,0xdb,0x11,0x16,0x53,0x15,0x41 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xbf,0xb1,0xce,0x7d,0xf7,0x06,0xbc,0x97,0x2e,0x1b,0x83,0x06,0xd4,0x4a,0xa1,0x35 };
    const uint8_t CIPHERTEXT[] = { 0xf2,0x1d,0xf1,0xe9,0x9a,0x78,0x1d,0xba,0x4a,0x68,0xff,0x34,0x91,0x84,0x8f,0x99 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-72", "[ECB][MCT][256][ENCRYPT][n72]") {
    const uint8_t KEY[] = { 0x88,0xc8,0x8e,0xc4,0xd6,0x3e,0xb4,0x81,0xcd,0x8d,0x6e,0x8e,0x8d,0x2e,0x27,0x15,0xdc,0xab,0x18,0x9b,0x04,0x77,0x1e,0x66,0xd1,0xc9,0x24,0x25,0x87,0xd7,0x9a,0xd8 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xf2,0x1d,0xf1,0xe9,0x9a,0x78,0x1d,0xba,0x4a,0x68,0xff,0x34,0x91,0x84,0x8f,0x99 };
    const uint8_t CIPHERTEXT[] = { 0xe4,0xe8,0xc9,0xe4,0x96,0x3a,0x44,0xf5,0xcf,0x27,0x76,0x7e,0x4e,0x42,0xfa,0x61 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-73", "[ECB][MCT][256][ENCRYPT][n73]") {
    const uint8_t KEY[] = { 0x98,0x9b,0x95,0x45,0x62,0x5a,0x40,0x25,0xf7,0x72,0x5d,0x63,0x84,0x72,0x13,0x88,0x38,0x43,0xd1,0x7f,0x92,0x4d,0x5a,0x93,0x1e,0xee,0x52,0x5b,0xc9,0x95,0x60,0xb9 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xe4,0xe8,0xc9,0xe4,0x96,0x3a,0x44,0xf5,0xcf,0x27,0x76,0x7e,0x4e,0x42,0xfa,0x61 };
    const uint8_t CIPHERTEXT[] = { 0x27,0x47,0x51,0x21,0xd0,0xe3,0x36,0x7d,0x0e,0x0c,0x2d,0x9f,0xb3,0x9c,0xfe,0x95 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-74", "[ECB][MCT][256][ENCRYPT][n74]") {
    const uint8_t KEY[] = { 0xf4,0x9b,0x61,0xf1,0x90,0xf9,0x82,0xaa,0x86,0x6d,0x5c,0x8f,0x2e,0x57,0x49,0x78,0x1f,0x04,0x80,0x5e,0x42,0xae,0x6c,0xee,0x10,0xe2,0x7f,0xc4,0x7a,0x09,0x9e,0x2c };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x27,0x47,0x51,0x21,0xd0,0xe3,0x36,0x7d,0x0e,0x0c,0x2d,0x9f,0xb3,0x9c,0xfe,0x95 };
    const uint8_t CIPHERTEXT[] = { 0xc2,0x99,0x06,0x26,0xcb,0x34,0xc5,0xd7,0xfa,0xfe,0x04,0x30,0x65,0x0e,0xd9,0x07 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-75", "[ECB][MCT][256][ENCRYPT][n75]") {
    const uint8_t KEY[] = { 0x10,0x15,0x37,0xd5,0xf6,0x33,0xad,0x8d,0xc7,0xe8,0xcc,0x05,0x8c,0xe7,0xfe,0x20,0xdd,0x9d,0x86,0x78,0x89,0x9a,0xa9,0x39,0xea,0x1c,0x7b,0xf4,0x1f,0x07,0x47,0x2b };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xc2,0x99,0x06,0x26,0xcb,0x34,0xc5,0xd7,0xfa,0xfe,0x04,0x30,0x65,0x0e,0xd9,0x07 };
    const uint8_t CIPHERTEXT[] = { 0x1c,0x5d,0x0c,0xca,0x28,0x45,0xb6,0x6c,0x37,0x1c,0x17,0x60,0xf8,0x1e,0x02,0x4a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-76", "[ECB][MCT][256][ENCRYPT][n76]") {
    const uint8_t KEY[] = { 0x1f,0x6a,0xca,0xa6,0x66,0x74,0x73,0x3d,0x28,0xdf,0xec,0x92,0xc4,0x3c,0x7e,0x76,0xc1,0xc0,0x8a,0xb2,0xa1,0xdf,0x1f,0x55,0xdd,0x00,0x6c,0x94,0xe7,0x19,0x45,0x61 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x1c,0x5d,0x0c,0xca,0x28,0x45,0xb6,0x6c,0x37,0x1c,0x17,0x60,0xf8,0x1e,0x02,0x4a };
    const uint8_t CIPHERTEXT[] = { 0x6f,0x5a,0x53,0xad,0xdd,0x93,0xc9,0xa1,0x36,0x40,0x1a,0x80,0x4a,0x71,0x04,0x19 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-77", "[ECB][MCT][256][ENCRYPT][n77]") {
    const uint8_t KEY[] = { 0xb5,0x5b,0xde,0xfe,0x37,0x06,0x46,0x69,0x90,0x12,0x06,0x2d,0xf7,0x48,0xb6,0xaa,0xae,0x9a,0xd9,0x1f,0x7c,0x4c,0xd6,0xf4,0xeb,0x40,0x76,0x14,0xad,0x68,0x41,0x78 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x6f,0x5a,0x53,0xad,0xdd,0x93,0xc9,0xa1,0x36,0x40,0x1a,0x80,0x4a,0x71,0x04,0x19 };
    const uint8_t CIPHERTEXT[] = { 0x8e,0x0c,0x07,0x0b,0xe7,0x10,0x9e,0xad,0x0e,0x8c,0xc0,0xaa,0x0b,0xf9,0x5e,0x61 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-78", "[ECB][MCT][256][ENCRYPT][n78]") {
    const uint8_t KEY[] = { 0xde,0x09,0xc3,0x4a,0x85,0xd5,0x6a,0x27,0x48,0x55,0x9c,0x30,0x9f,0x04,0xeb,0x72,0x20,0x96,0xde,0x14,0x9b,0x5c,0x48,0x59,0xe5,0xcc,0xb6,0xbe,0xa6,0x91,0x1f,0x19 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x8e,0x0c,0x07,0x0b,0xe7,0x10,0x9e,0xad,0x0e,0x8c,0xc0,0xaa,0x0b,0xf9,0x5e,0x61 };
    const uint8_t CIPHERTEXT[] = { 0xdb,0x53,0xb5,0x30,0x65,0x61,0xdb,0x89,0x9a,0x63,0x5a,0x56,0xc5,0x6e,0x72,0x39 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-79", "[ECB][MCT][256][ENCRYPT][n79]") {
    const uint8_t KEY[] = { 0x26,0x50,0xec,0xd1,0x33,0xa5,0xdf,0x38,0x25,0x07,0x2a,0x4d,0xf2,0xd9,0x5d,0x15,0xfb,0xc5,0x6b,0x24,0xfe,0x3d,0x93,0xd0,0x7f,0xaf,0xec,0xe8,0x63,0xff,0x6d,0x20 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xdb,0x53,0xb5,0x30,0x65,0x61,0xdb,0x89,0x9a,0x63,0x5a,0x56,0xc5,0x6e,0x72,0x39 };
    const uint8_t CIPHERTEXT[] = { 0x72,0xe5,0xac,0x05,0x99,0x0d,0x3f,0x55,0x08,0x29,0x5f,0x95,0xf8,0x97,0x33,0x13 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-80", "[ECB][MCT][256][ENCRYPT][n80]") {
    const uint8_t KEY[] = { 0xa8,0x59,0x9f,0x0e,0xdd,0x64,0x46,0xb4,0xbb,0x93,0x71,0xe3,0x80,0xbf,0x33,0x48,0x89,0x20,0xc7,0x21,0x67,0x30,0xac,0x85,0x77,0x86,0xb3,0x7d,0x9b,0x68,0x5e,0x33 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x72,0xe5,0xac,0x05,0x99,0x0d,0x3f,0x55,0x08,0x29,0x5f,0x95,0xf8,0x97,0x33,0x13 };
    const uint8_t CIPHERTEXT[] = { 0x86,0xa8,0x33,0x2f,0x16,0xf9,0x97,0xbc,0x02,0xaf,0x52,0x71,0xc6,0x4e,0x7e,0x0f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-81", "[ECB][MCT][256][ENCRYPT][n81]") {
    const uint8_t KEY[] = { 0x67,0x2e,0x7b,0x0d,0x49,0x74,0x58,0xe2,0x60,0x08,0x46,0x62,0xc5,0x66,0x39,0x4e,0x0f,0x88,0xf4,0x0e,0x71,0xc9,0x3b,0x39,0x75,0x29,0xe1,0x0c,0x5d,0x26,0x20,0x3c };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x86,0xa8,0x33,0x2f,0x16,0xf9,0x97,0xbc,0x02,0xaf,0x52,0x71,0xc6,0x4e,0x7e,0x0f };
    const uint8_t CIPHERTEXT[] = { 0x8e,0x53,0x85,0x8c,0xe7,0xad,0x0d,0x25,0x41,0x0f,0x88,0x6e,0xee,0xca,0x1e,0x0e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-82", "[ECB][MCT][256][ENCRYPT][n82]") {
    const uint8_t KEY[] = { 0x73,0xea,0x41,0xa5,0x0c,0xdd,0x5a,0x98,0x64,0x4e,0x6f,0x8d,0x97,0x4a,0xf2,0x13,0x81,0xdb,0x71,0x82,0x96,0x64,0x36,0x1c,0x34,0x26,0x69,0x62,0xb3,0xec,0x3e,0x32 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x8e,0x53,0x85,0x8c,0xe7,0xad,0x0d,0x25,0x41,0x0f,0x88,0x6e,0xee,0xca,0x1e,0x0e };
    const uint8_t CIPHERTEXT[] = { 0xc6,0xa1,0xd4,0x93,0xd6,0x07,0xd2,0xce,0xf6,0xae,0xf2,0x9e,0xe8,0x78,0xc4,0x34 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-83", "[ECB][MCT][256][ENCRYPT][n83]") {
    const uint8_t KEY[] = { 0x14,0x96,0x9b,0x3f,0xf7,0x8c,0xcd,0xd6,0x6c,0x53,0xb8,0x02,0x7a,0x79,0x56,0x3e,0x47,0x7a,0xa5,0x11,0x40,0x63,0xe4,0xd2,0xc2,0x88,0x9b,0xfc,0x5b,0x94,0xfa,0x06 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xc6,0xa1,0xd4,0x93,0xd6,0x07,0xd2,0xce,0xf6,0xae,0xf2,0x9e,0xe8,0x78,0xc4,0x34 };
    const uint8_t CIPHERTEXT[] = { 0xa4,0x97,0x3e,0x0c,0xfa,0xf8,0xd6,0xac,0x67,0x58,0x61,0x5f,0xc8,0x1e,0x06,0xdf };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-84", "[ECB][MCT][256][ENCRYPT][n84]") {
    const uint8_t KEY[] = { 0xd0,0x9e,0x27,0x41,0xb9,0x48,0x0c,0x21,0x66,0xc9,0xc1,0x83,0x26,0x54,0x76,0x3d,0xe3,0xed,0x9b,0x1d,0xba,0x9b,0x32,0x7e,0xa5,0xd0,0xfa,0xa3,0x93,0x8a,0xfc,0xd9 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xa4,0x97,0x3e,0x0c,0xfa,0xf8,0xd6,0xac,0x67,0x58,0x61,0x5f,0xc8,0x1e,0x06,0xdf };
    const uint8_t CIPHERTEXT[] = { 0x67,0xe3,0x24,0x3d,0x8b,0xc8,0x18,0x87,0x51,0x77,0x08,0xa2,0x9a,0x5d,0x9a,0xe5 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-85", "[ECB][MCT][256][ENCRYPT][n85]") {
    const uint8_t KEY[] = { 0x22,0xc6,0x5e,0xad,0x30,0x3a,0x03,0x95,0xcc,0x9c,0x06,0x5a,0xda,0x93,0x0d,0xdd,0x84,0x0e,0xbf,0x20,0x31,0x53,0x2a,0xf9,0xf4,0xa7,0xf2,0x01,0x09,0xd7,0x66,0x3c };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x67,0xe3,0x24,0x3d,0x8b,0xc8,0x18,0x87,0x51,0x77,0x08,0xa2,0x9a,0x5d,0x9a,0xe5 };
    const uint8_t CIPHERTEXT[] = { 0xde,0x2f,0x35,0xdf,0x51,0x64,0x4c,0xf5,0xd7,0x99,0x84,0xbe,0x6c,0x17,0xc1,0x4c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-86", "[ECB][MCT][256][ENCRYPT][n86]") {
    const uint8_t KEY[] = { 0x86,0x79,0xef,0x03,0x57,0x51,0x62,0x45,0xec,0x48,0x93,0x86,0x41,0x96,0x46,0xbc,0x5a,0x21,0x8a,0xff,0x60,0x37,0x66,0x0c,0x23,0x3e,0x76,0xbf,0x65,0xc0,0xa7,0x70 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xde,0x2f,0x35,0xdf,0x51,0x64,0x4c,0xf5,0xd7,0x99,0x84,0xbe,0x6c,0x17,0xc1,0x4c };
    const uint8_t CIPHERTEXT[] = { 0x9e,0xae,0xda,0xbb,0x3b,0xd0,0x46,0xec,0x27,0xa2,0xbd,0xaf,0xab,0xdb,0xc8,0x61 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-87", "[ECB][MCT][256][ENCRYPT][n87]") {
    const uint8_t KEY[] = { 0x60,0x43,0x90,0x2c,0x11,0x5f,0x10,0x76,0x39,0xe7,0xc9,0x2b,0xa4,0x95,0x23,0x01,0xc4,0x8f,0x50,0x44,0x5b,0xe7,0x20,0xe0,0x04,0x9c,0xcb,0x10,0xce,0x1b,0x6f,0x11 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x9e,0xae,0xda,0xbb,0x3b,0xd0,0x46,0xec,0x27,0xa2,0xbd,0xaf,0xab,0xdb,0xc8,0x61 };
    const uint8_t CIPHERTEXT[] = { 0x0c,0xde,0x7e,0x6c,0x1a,0xec,0xbb,0xe9,0x96,0x86,0x5b,0xf3,0x0b,0x17,0x8d,0xe7 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-88", "[ECB][MCT][256][ENCRYPT][n88]") {
    const uint8_t KEY[] = { 0xac,0xa4,0x43,0xa9,0xe3,0x10,0x33,0xea,0x73,0xb1,0xee,0xda,0x6e,0x7d,0x6c,0xa1,0xc8,0x51,0x2e,0x28,0x41,0x0b,0x9b,0x09,0x92,0x1a,0x90,0xe3,0xc5,0x0c,0xe2,0xf6 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x0c,0xde,0x7e,0x6c,0x1a,0xec,0xbb,0xe9,0x96,0x86,0x5b,0xf3,0x0b,0x17,0x8d,0xe7 };
    const uint8_t CIPHERTEXT[] = { 0xba,0x25,0xbf,0x5b,0xe1,0xe4,0xc0,0x99,0xb9,0xe4,0x5e,0xed,0xd7,0x36,0x9c,0xb5 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-89", "[ECB][MCT][256][ENCRYPT][n89]") {
    const uint8_t KEY[] = { 0x60,0x36,0x2e,0x2b,0x0b,0xf9,0x98,0xc8,0x75,0xc0,0x87,0xc3,0x70,0xc4,0xca,0x47,0x72,0x74,0x91,0x73,0xa0,0xef,0x5b,0x90,0x2b,0xfe,0xce,0x0e,0x12,0x3a,0x7e,0x43 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xba,0x25,0xbf,0x5b,0xe1,0xe4,0xc0,0x99,0xb9,0xe4,0x5e,0xed,0xd7,0x36,0x9c,0xb5 };
    const uint8_t CIPHERTEXT[] = { 0x80,0x5b,0xe6,0x27,0x89,0x54,0x9c,0xe6,0xaf,0x74,0x96,0x64,0x67,0xf4,0x11,0x35 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-90", "[ECB][MCT][256][ENCRYPT][n90]") {
    const uint8_t KEY[] = { 0x6d,0x7f,0x0f,0x75,0x84,0x16,0x2a,0x1f,0xa4,0xdd,0x67,0x64,0x54,0x8f,0x35,0x5a,0xf2,0x2f,0x77,0x54,0x29,0xbb,0xc7,0x76,0x84,0x8a,0x58,0x6a,0x75,0xce,0x6f,0x76 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x80,0x5b,0xe6,0x27,0x89,0x54,0x9c,0xe6,0xaf,0x74,0x96,0x64,0x67,0xf4,0x11,0x35 };
    const uint8_t CIPHERTEXT[] = { 0xab,0x60,0x01,0xc6,0xc4,0xc5,0x6e,0x8c,0xa3,0x93,0xc5,0xfd,0x17,0x35,0x05,0xba };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-91", "[ECB][MCT][256][ENCRYPT][n91]") {
    const uint8_t KEY[] = { 0xd8,0xec,0xc3,0x9a,0xc1,0xd0,0x0c,0x53,0x21,0x6f,0x6e,0x64,0xe8,0x26,0xa7,0xa9,0x59,0x4f,0x76,0x92,0xed,0x7e,0xa9,0xfa,0x27,0x19,0x9d,0x97,0x62,0xfb,0x6a,0xcc };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xab,0x60,0x01,0xc6,0xc4,0xc5,0x6e,0x8c,0xa3,0x93,0xc5,0xfd,0x17,0x35,0x05,0xba };
    const uint8_t CIPHERTEXT[] = { 0x3b,0xa3,0x67,0x3f,0x4f,0x49,0x5d,0xd1,0x54,0x1d,0x47,0xc2,0x2b,0x79,0x21,0xc5 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-92", "[ECB][MCT][256][ENCRYPT][n92]") {
    const uint8_t KEY[] = { 0x49,0x31,0x08,0xf9,0x1c,0xae,0xdf,0x71,0x46,0x52,0x14,0x9a,0x2b,0x20,0x30,0xfe,0x62,0xec,0x11,0xad,0xa2,0x37,0xf4,0x2b,0x73,0x04,0xda,0x55,0x49,0x82,0x4b,0x09 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x3b,0xa3,0x67,0x3f,0x4f,0x49,0x5d,0xd1,0x54,0x1d,0x47,0xc2,0x2b,0x79,0x21,0xc5 };
    const uint8_t CIPHERTEXT[] = { 0xb2,0x4f,0xe1,0x7c,0xdc,0x5c,0x8c,0xfa,0x42,0x60,0xc3,0x86,0x91,0xb5,0x7b,0xfa };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-93", "[ECB][MCT][256][ENCRYPT][n93]") {
    const uint8_t KEY[] = { 0x44,0x6a,0xf6,0xdd,0x5f,0x58,0x75,0x5a,0xea,0xa0,0xa1,0x22,0x6d,0x8c,0x58,0x4f,0xd0,0xa3,0xf0,0xd1,0x7e,0x6b,0x78,0xd1,0x31,0x64,0x19,0xd3,0xd8,0x37,0x30,0xf3 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xb2,0x4f,0xe1,0x7c,0xdc,0x5c,0x8c,0xfa,0x42,0x60,0xc3,0x86,0x91,0xb5,0x7b,0xfa };
    const uint8_t CIPHERTEXT[] = { 0x86,0xd9,0x99,0xa6,0x3b,0x96,0xf6,0xc9,0xd9,0xaa,0xf3,0xbe,0x62,0x02,0x97,0x7b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-94", "[ECB][MCT][256][ENCRYPT][n94]") {
    const uint8_t KEY[] = { 0x65,0xf9,0x2d,0x4e,0x17,0x23,0xd5,0xe5,0x8a,0xeb,0x35,0x0c,0x79,0xdf,0x28,0xde,0x56,0x7a,0x69,0x77,0x45,0xfd,0x8e,0x18,0xe8,0xce,0xea,0x6d,0xba,0x35,0xa7,0x88 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x86,0xd9,0x99,0xa6,0x3b,0x96,0xf6,0xc9,0xd9,0xaa,0xf3,0xbe,0x62,0x02,0x97,0x7b };
    const uint8_t CIPHERTEXT[] = { 0xc4,0x71,0x2a,0xa7,0x33,0xf9,0x73,0x7f,0x91,0xe4,0xed,0x61,0x60,0x9e,0x02,0xf1 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-95", "[ECB][MCT][256][ENCRYPT][n95]") {
    const uint8_t KEY[] = { 0x91,0x5c,0xee,0x6a,0xf4,0xea,0x95,0x62,0x3f,0x71,0x22,0xac,0xda,0x5e,0x90,0x40,0x92,0x0b,0x43,0xd0,0x76,0x04,0xfd,0x67,0x79,0x2a,0x07,0x0c,0xda,0xab,0xa5,0x79 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xc4,0x71,0x2a,0xa7,0x33,0xf9,0x73,0x7f,0x91,0xe4,0xed,0x61,0x60,0x9e,0x02,0xf1 };
    const uint8_t CIPHERTEXT[] = { 0x0e,0x8c,0x1a,0x77,0xb2,0x80,0xf4,0xc7,0x53,0x68,0x27,0x68,0xfd,0x6f,0x3b,0x23 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-96", "[ECB][MCT][256][ENCRYPT][n96]") {
    const uint8_t KEY[] = { 0x8e,0x9b,0xb2,0x88,0x7f,0xe6,0x0d,0x42,0xdb,0x4d,0x82,0x7f,0x00,0xba,0x68,0xff,0x9c,0x87,0x59,0xa7,0xc4,0x84,0x09,0xa0,0x2a,0x42,0x20,0x64,0x27,0xc4,0x9e,0x5a };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x0e,0x8c,0x1a,0x77,0xb2,0x80,0xf4,0xc7,0x53,0x68,0x27,0x68,0xfd,0x6f,0x3b,0x23 };
    const uint8_t CIPHERTEXT[] = { 0xdc,0xcb,0x68,0x4d,0x47,0xc4,0x80,0xcc,0x13,0x17,0xdc,0xaa,0x45,0x12,0x34,0xc0 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-97", "[ECB][MCT][256][ENCRYPT][n97]") {
    const uint8_t KEY[] = { 0xcb,0xf8,0x5a,0x66,0x45,0x46,0x9e,0x5d,0xf8,0x82,0xfe,0x84,0x07,0x76,0xb6,0xaa,0x40,0x4c,0x31,0xea,0x83,0x40,0x89,0x6c,0x39,0x55,0xfc,0xce,0x62,0xd6,0xaa,0x9a };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xdc,0xcb,0x68,0x4d,0x47,0xc4,0x80,0xcc,0x13,0x17,0xdc,0xaa,0x45,0x12,0x34,0xc0 };
    const uint8_t CIPHERTEXT[] = { 0x9a,0x2c,0x4f,0x07,0x48,0x9c,0x14,0x26,0x5e,0x33,0xac,0x03,0x1d,0x02,0xb3,0xd8 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-98", "[ECB][MCT][256][ENCRYPT][n98]") {
    const uint8_t KEY[] = { 0x3e,0xa3,0xc3,0x3d,0x74,0x39,0xab,0x3c,0x47,0x8c,0x01,0x90,0x7f,0x13,0xcd,0xa7,0xda,0x60,0x7e,0xed,0xcb,0xdc,0x9d,0x4a,0x67,0x66,0x50,0xcd,0x7f,0xd4,0x19,0x42 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x9a,0x2c,0x4f,0x07,0x48,0x9c,0x14,0x26,0x5e,0x33,0xac,0x03,0x1d,0x02,0xb3,0xd8 };
    const uint8_t CIPHERTEXT[] = { 0x5c,0x8e,0x62,0x2d,0xdb,0xd3,0x2e,0xe7,0x9c,0x17,0x57,0x2e,0x8b,0x3e,0xe6,0x1c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-ENCRYPT-99", "[ECB][MCT][256][ENCRYPT][n99]") {
    const uint8_t KEY[] = { 0x31,0x2c,0x5b,0x43,0x26,0x3c,0x1a,0xf8,0xd1,0xe3,0x5c,0x0f,0x24,0xd1,0x00,0x43,0x86,0xee,0x1c,0xc0,0x10,0x0f,0xb3,0xad,0xfb,0x71,0x07,0xe3,0xf4,0xea,0xff,0x5e };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x5c,0x8e,0x62,0x2d,0xdb,0xd3,0x2e,0xe7,0x9c,0x17,0x57,0x2e,0x8b,0x3e,0xe6,0x1c };
    const uint8_t CIPHERTEXT[] = { 0xc5,0xd2,0xcb,0x3d,0x5b,0x7f,0xf0,0xe2,0x3e,0x30,0x89,0x67,0xee,0x07,0x48,0x25 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-0", "[ECB][MCT][256][DECRYPT][n0]") {
    const uint8_t KEY[] = { 0x2b,0x09,0xba,0x39,0xb8,0x34,0x06,0x2b,0x9e,0x93,0xf4,0x83,0x73,0xb8,0xdd,0x01,0x8d,0xed,0xf1,0xe5,0xba,0x1b,0x8a,0xf8,0x31,0xeb,0xba,0xcb,0xc9,0x2a,0x26,0x43 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x1f,0x9b,0x9b,0x21,0x3f,0x18,0x84,0xfa,0x98,0xb6,0x2d,0xd6,0x63,0x9f,0xd3,0x3b };
    const uint8_t CIPHERTEXT[] = { 0x89,0x64,0x9b,0xd0,0x11,0x5f,0x30,0xbd,0x87,0x85,0x67,0x61,0x02,0x23,0xa5,0x9d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-1", "[ECB][MCT][256][DECRYPT][n1]") {
    const uint8_t KEY[] = { 0x58,0xac,0x71,0x61,0x9f,0xdc,0x3a,0xc7,0x3a,0x17,0xf2,0x85,0x31,0x9e,0x1c,0xd4,0x92,0x76,0x6a,0xc4,0x85,0x03,0x0e,0x02,0xa9,0x5d,0x97,0x1d,0xaa,0xb5,0xf5,0x78 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xae,0xcd,0x33,0x4e,0xf8,0xfb,0x0c,0x51,0xb6,0x89,0x6a,0xe0,0x65,0xd8,0xbe,0x28 };
    const uint8_t CIPHERTEXT[] = { 0x1f,0x9b,0x9b,0x21,0x3f,0x18,0x84,0xfa,0x98,0xb6,0x2d,0xd6,0x63,0x9f,0xd3,0x3b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-2", "[ECB][MCT][256][DECRYPT][n2]") {
    const uint8_t KEY[] = { 0xf6,0xe3,0xcc,0xa2,0xcd,0x62,0x8c,0x10,0x62,0x5c,0x62,0xcf,0x08,0xb3,0x85,0x74,0x3c,0xbb,0x59,0x8a,0x7d,0xf8,0x02,0x53,0x1f,0xd4,0xfd,0xfd,0xcf,0x6d,0x4b,0x50 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xf1,0x93,0x8d,0xd2,0x45,0xc0,0x55,0xe9,0xc3,0x80,0x33,0x6f,0xf8,0x45,0x0d,0x9d };
    const uint8_t CIPHERTEXT[] = { 0xae,0xcd,0x33,0x4e,0xf8,0xfb,0x0c,0x51,0xb6,0x89,0x6a,0xe0,0x65,0xd8,0xbe,0x28 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-3", "[ECB][MCT][256][DECRYPT][n3]") {
    const uint8_t KEY[] = { 0xa9,0xae,0x3b,0xd7,0xd4,0x54,0xf1,0x9d,0x69,0x28,0x98,0x75,0xff,0x00,0x9d,0x16,0xcd,0x28,0xd4,0x58,0x38,0x38,0x57,0xba,0xdc,0x54,0xce,0x92,0x37,0x28,0x46,0xcd };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x42,0xd5,0xc4,0xa1,0x3b,0x74,0x88,0x00,0xeb,0xfe,0x0f,0x67,0x78,0x1d,0xcf,0xf1 };
    const uint8_t CIPHERTEXT[] = { 0xf1,0x93,0x8d,0xd2,0x45,0xc0,0x55,0xe9,0xc3,0x80,0x33,0x6f,0xf8,0x45,0x0d,0x9d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-4", "[ECB][MCT][256][DECRYPT][n4]") {
    const uint8_t KEY[] = { 0xe3,0xbc,0x62,0x32,0x86,0x5f,0x04,0x76,0x14,0x9b,0xe7,0x16,0x2e,0xf8,0xfc,0x4b,0x8f,0xfd,0x10,0xf9,0x03,0x4c,0xdf,0xba,0x37,0xaa,0xc1,0xf5,0x4f,0x35,0x89,0x3c };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x46,0x99,0x68,0xa0,0x02,0x26,0xf0,0xaa,0xe7,0xac,0xfd,0xa0,0x2b,0x2c,0xe0,0xae };
    const uint8_t CIPHERTEXT[] = { 0x42,0xd5,0xc4,0xa1,0x3b,0x74,0x88,0x00,0xeb,0xfe,0x0f,0x67,0x78,0x1d,0xcf,0xf1 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-5", "[ECB][MCT][256][DECRYPT][n5]") {
    const uint8_t KEY[] = { 0x45,0x1f,0xbf,0xba,0x7f,0x09,0xb6,0x25,0x54,0x08,0x22,0xfa,0xc8,0xc8,0xe3,0x0b,0xc9,0x64,0x78,0x59,0x01,0x6a,0x2f,0x10,0xd0,0x06,0x3c,0x55,0x64,0x19,0x69,0x92 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xea,0xb1,0x44,0xd6,0xf8,0x0c,0xcf,0xd2,0xfa,0xe9,0x5d,0x16,0x78,0x47,0x18,0xac };
    const uint8_t CIPHERTEXT[] = { 0x46,0x99,0x68,0xa0,0x02,0x26,0xf0,0xaa,0xe7,0xac,0xfd,0xa0,0x2b,0x2c,0xe0,0xae };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-6", "[ECB][MCT][256][DECRYPT][n6]") {
    const uint8_t KEY[] = { 0xf5,0x3e,0x21,0xe4,0x6a,0x0e,0xc9,0x7c,0x98,0x0d,0x49,0xd6,0xf4,0xb8,0x1e,0xc4,0x23,0xd5,0x3c,0x8f,0xf9,0x66,0xe0,0xc2,0x2a,0xef,0x61,0x43,0x1c,0x5e,0x71,0x3e };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xe0,0x4b,0x91,0xc3,0xf0,0x84,0xd7,0x33,0xd3,0xd0,0xc1,0xc7,0xc1,0x52,0x69,0x5a };
    const uint8_t CIPHERTEXT[] = { 0xea,0xb1,0x44,0xd6,0xf8,0x0c,0xcf,0xd2,0xfa,0xe9,0x5d,0x16,0x78,0x47,0x18,0xac };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-7", "[ECB][MCT][256][DECRYPT][n7]") {
    const uint8_t KEY[] = { 0x5f,0xb3,0xa2,0xcb,0xdb,0xe6,0x97,0x1f,0xcd,0x34,0x59,0x61,0xbd,0xcb,0xa5,0xf6,0xc3,0x9e,0xad,0x4c,0x09,0xe2,0x37,0xf1,0xf9,0x3f,0xa0,0x84,0xdd,0x0c,0x18,0x64 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xe4,0x7d,0xb9,0xb8,0xc7,0xfc,0xc9,0x45,0x9f,0xa0,0xa7,0xfc,0x84,0x04,0x7b,0x5b };
    const uint8_t CIPHERTEXT[] = { 0xe0,0x4b,0x91,0xc3,0xf0,0x84,0xd7,0x33,0xd3,0xd0,0xc1,0xc7,0xc1,0x52,0x69,0x5a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-8", "[ECB][MCT][256][DECRYPT][n8]") {
    const uint8_t KEY[] = { 0x6b,0x14,0x54,0x36,0xc5,0xae,0x0d,0xcb,0x24,0x77,0xf9,0x4f,0x5b,0xdb,0x03,0x79,0x27,0xe3,0x14,0xf4,0xce,0x1e,0xfe,0xb4,0x66,0x9f,0x07,0x78,0x59,0x08,0x63,0x3f };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xf6,0x17,0xd2,0x6b,0x55,0xda,0x99,0x9d,0x65,0xb2,0xd2,0x36,0x35,0x8b,0x2e,0x60 };
    const uint8_t CIPHERTEXT[] = { 0xe4,0x7d,0xb9,0xb8,0xc7,0xfc,0xc9,0x45,0x9f,0xa0,0xa7,0xfc,0x84,0x04,0x7b,0x5b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-9", "[ECB][MCT][256][DECRYPT][n9]") {
    const uint8_t KEY[] = { 0x12,0x67,0x52,0xda,0x3d,0x7f,0x9a,0x0f,0xfc,0x1a,0x46,0xcc,0xaa,0x8a,0x39,0x25,0xd1,0xf4,0xc6,0x9f,0x9b,0xc4,0x67,0x29,0x03,0x2d,0xd5,0x4e,0x6c,0x83,0x4d,0x5f };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x06,0x6f,0xfe,0xa7,0x99,0xad,0x5f,0x09,0xd0,0x3c,0xb8,0x68,0xde,0xb1,0x59,0x1e };
    const uint8_t CIPHERTEXT[] = { 0xf6,0x17,0xd2,0x6b,0x55,0xda,0x99,0x9d,0x65,0xb2,0xd2,0x36,0x35,0x8b,0x2e,0x60 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-10", "[ECB][MCT][256][DECRYPT][n10]") {
    const uint8_t KEY[] = { 0xaa,0x3d,0xaa,0xfb,0xcd,0x64,0x7f,0x0a,0x9e,0xaa,0x02,0x71,0x46,0xab,0x7a,0xde,0xd7,0x9b,0x38,0x38,0x02,0x69,0x38,0x20,0xd3,0x11,0x6d,0x26,0xb2,0x32,0x14,0x41 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x6d,0x28,0xdb,0xb5,0x5f,0xb1,0x0c,0x1c,0x32,0x26,0x60,0x99,0x97,0xa4,0xfb,0x38 };
    const uint8_t CIPHERTEXT[] = { 0x06,0x6f,0xfe,0xa7,0x99,0xad,0x5f,0x09,0xd0,0x3c,0xb8,0x68,0xde,0xb1,0x59,0x1e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-11", "[ECB][MCT][256][DECRYPT][n11]") {
    const uint8_t KEY[] = { 0xfe,0xd7,0xb5,0xc1,0xf8,0x4d,0x3d,0xc1,0x85,0x22,0x2d,0xa3,0xff,0xfa,0xc7,0xa1,0xba,0xb3,0xe3,0x8d,0x5d,0xd8,0x34,0x3c,0xe1,0x37,0x0d,0xbf,0x25,0x96,0xef,0x79 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x9d,0xd7,0x89,0x87,0x56,0x2c,0x9c,0x09,0x9d,0x67,0xcc,0xc9,0x27,0xfc,0xec,0x13 };
    const uint8_t CIPHERTEXT[] = { 0x6d,0x28,0xdb,0xb5,0x5f,0xb1,0x0c,0x1c,0x32,0x26,0x60,0x99,0x97,0xa4,0xfb,0x38 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-12", "[ECB][MCT][256][DECRYPT][n12]") {
    const uint8_t KEY[] = { 0xc3,0x6d,0xb4,0xaf,0x0b,0xee,0x11,0xda,0xd6,0xea,0x59,0x67,0x9c,0xfb,0x98,0x8c,0x27,0x64,0x6a,0x0a,0x0b,0xf4,0xa8,0x35,0x7c,0x50,0xc1,0x76,0x02,0x6a,0x03,0x6a };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xb5,0xcc,0x78,0x0e,0xc7,0x5b,0x8d,0x8c,0x51,0x28,0xc4,0xd2,0x6f,0xa5,0x20,0xea };
    const uint8_t CIPHERTEXT[] = { 0x9d,0xd7,0x89,0x87,0x56,0x2c,0x9c,0x09,0x9d,0x67,0xcc,0xc9,0x27,0xfc,0xec,0x13 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-13", "[ECB][MCT][256][DECRYPT][n13]") {
    const uint8_t KEY[] = { 0x7b,0x5a,0xeb,0xe6,0x6f,0x96,0x86,0x75,0x04,0xee,0x9e,0xfd,0x2b,0xd5,0x6b,0xda,0x92,0xa8,0x12,0x04,0xcc,0xaf,0x25,0xb9,0x2d,0x78,0x05,0xa4,0x6d,0xcf,0x23,0x80 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xc7,0x15,0xbd,0x2f,0x23,0xb9,0x8c,0x66,0xbf,0x56,0xe5,0x68,0x0c,0x60,0x37,0xf7 };
    const uint8_t CIPHERTEXT[] = { 0xb5,0xcc,0x78,0x0e,0xc7,0x5b,0x8d,0x8c,0x51,0x28,0xc4,0xd2,0x6f,0xa5,0x20,0xea };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-14", "[ECB][MCT][256][DECRYPT][n14]") {
    const uint8_t KEY[] = { 0x81,0xa7,0x3b,0xfc,0xac,0xc9,0x94,0xf4,0x7a,0xee,0xc0,0xd6,0x55,0xe0,0x48,0x50,0x55,0xbd,0xaf,0x2b,0xef,0x16,0xa9,0xdf,0x92,0x2e,0xe0,0xcc,0x61,0xaf,0x14,0x77 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xe0,0x09,0x84,0xf9,0xd9,0x35,0x51,0xe9,0x5a,0xe8,0x5c,0xfe,0x4a,0x82,0x9b,0x82 };
    const uint8_t CIPHERTEXT[] = { 0xc7,0x15,0xbd,0x2f,0x23,0xb9,0x8c,0x66,0xbf,0x56,0xe5,0x68,0x0c,0x60,0x37,0xf7 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-15", "[ECB][MCT][256][DECRYPT][n15]") {
    const uint8_t KEY[] = { 0x26,0x78,0xe4,0xcc,0xda,0x2e,0xb6,0xad,0x7f,0x0e,0x28,0x43,0x02,0x0d,0xa2,0xd8,0xb5,0xb4,0x2b,0xd2,0x36,0x23,0xf8,0x36,0xc8,0xc6,0xbc,0x32,0x2b,0x2d,0x8f,0xf5 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xbf,0xa4,0x87,0xfc,0xb2,0x33,0x1a,0xfe,0x3a,0xd8,0x2e,0x59,0x06,0x4b,0x4a,0xae };
    const uint8_t CIPHERTEXT[] = { 0xe0,0x09,0x84,0xf9,0xd9,0x35,0x51,0xe9,0x5a,0xe8,0x5c,0xfe,0x4a,0x82,0x9b,0x82 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-16", "[ECB][MCT][256][DECRYPT][n16]") {
    const uint8_t KEY[] = { 0x03,0x56,0x5a,0xf5,0xc2,0x67,0xa6,0x2e,0x0d,0x25,0x00,0xea,0xd0,0x6b,0xc7,0xd9,0x0a,0x10,0xac,0x2e,0x84,0x10,0xe2,0xc8,0xf2,0x1e,0x92,0x6b,0x2d,0x66,0xc5,0x5b };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x4c,0x27,0x8c,0xa4,0x18,0xfd,0x1c,0x57,0x18,0x88,0x3d,0xa0,0xba,0x4a,0x06,0x6f };
    const uint8_t CIPHERTEXT[] = { 0xbf,0xa4,0x87,0xfc,0xb2,0x33,0x1a,0xfe,0x3a,0xd8,0x2e,0x59,0x06,0x4b,0x4a,0xae };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-17", "[ECB][MCT][256][DECRYPT][n17]") {
    const uint8_t KEY[] = { 0xec,0x71,0x9a,0x4e,0xd8,0x51,0xc3,0x6f,0x80,0x6f,0xbc,0x78,0x18,0x30,0x26,0xcc,0x46,0x37,0x20,0x8a,0x9c,0xed,0xfe,0x9f,0xea,0x96,0xaf,0xcb,0x97,0x2c,0xc3,0x34 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xce,0xed,0x1c,0x8b,0x96,0xd8,0x49,0x51,0xca,0xdf,0x80,0x9d,0x3e,0xa1,0xb3,0x97 };
    const uint8_t CIPHERTEXT[] = { 0x4c,0x27,0x8c,0xa4,0x18,0xfd,0x1c,0x57,0x18,0x88,0x3d,0xa0,0xba,0x4a,0x06,0x6f };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-18", "[ECB][MCT][256][DECRYPT][n18]") {
    const uint8_t KEY[] = { 0xf1,0x38,0xad,0x91,0x22,0x01,0xbe,0xec,0xd1,0x5e,0xbe,0x20,0x49,0xf9,0x80,0xe5,0x88,0xda,0x3c,0x01,0x0a,0x35,0xb7,0xce,0x20,0x49,0x2f,0x56,0xa9,0x8d,0x70,0xa3 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xf8,0x8a,0xed,0x84,0xbc,0xa4,0x2a,0x06,0x64,0x7d,0x65,0x04,0xa5,0xc4,0x83,0x79 };
    const uint8_t CIPHERTEXT[] = { 0xce,0xed,0x1c,0x8b,0x96,0xd8,0x49,0x51,0xca,0xdf,0x80,0x9d,0x3e,0xa1,0xb3,0x97 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-19", "[ECB][MCT][256][DECRYPT][n19]") {
    const uint8_t KEY[] = { 0x8d,0xa2,0x26,0x44,0xe1,0x26,0x72,0x12,0x74,0x22,0x00,0xdb,0xf6,0xb0,0xba,0x94,0x70,0x50,0xd1,0x85,0xb6,0x91,0x9d,0xc8,0x44,0x34,0x4a,0x52,0x0c,0x49,0xf3,0xda };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xc4,0x51,0xb7,0x53,0x75,0xd0,0xfe,0xc1,0xcc,0x18,0x25,0xee,0xfb,0xcc,0x13,0x72 };
    const uint8_t CIPHERTEXT[] = { 0xf8,0x8a,0xed,0x84,0xbc,0xa4,0x2a,0x06,0x64,0x7d,0x65,0x04,0xa5,0xc4,0x83,0x79 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-20", "[ECB][MCT][256][DECRYPT][n20]") {
    const uint8_t KEY[] = { 0x51,0x04,0x21,0x3a,0xab,0xac,0xca,0xfe,0x44,0x12,0x96,0x32,0xf6,0x7c,0xf2,0xda,0xb4,0x01,0x66,0xd6,0xc3,0x41,0x63,0x09,0x88,0x2c,0x6f,0xbc,0xf7,0x85,0xe0,0xa8 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x9a,0x54,0xdf,0xd5,0x6b,0xff,0x41,0xea,0x17,0xbc,0xf0,0x8d,0x37,0x61,0xe9,0x5b };
    const uint8_t CIPHERTEXT[] = { 0xc4,0x51,0xb7,0x53,0x75,0xd0,0xfe,0xc1,0xcc,0x18,0x25,0xee,0xfb,0xcc,0x13,0x72 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-21", "[ECB][MCT][256][DECRYPT][n21]") {
    const uint8_t KEY[] = { 0x4c,0x7c,0x62,0xbe,0x3f,0x5a,0x9d,0x09,0x93,0x49,0x40,0x28,0x45,0x65,0xe9,0xc9,0x2e,0x55,0xb9,0x03,0xa8,0xbe,0x22,0xe3,0x9f,0x90,0x9f,0x31,0xc0,0xe4,0x09,0xf3 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x76,0xe0,0x74,0xc5,0x87,0xf1,0x12,0xf3,0xff,0xd1,0x7b,0x39,0x0f,0xa8,0xcf,0xfc };
    const uint8_t CIPHERTEXT[] = { 0x9a,0x54,0xdf,0xd5,0x6b,0xff,0x41,0xea,0x17,0xbc,0xf0,0x8d,0x37,0x61,0xe9,0x5b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-22", "[ECB][MCT][256][DECRYPT][n22]") {
    const uint8_t KEY[] = { 0x98,0x71,0x76,0x58,0x71,0xb1,0xda,0xe3,0x63,0xfc,0xa3,0x96,0x12,0x24,0x41,0x4a,0x58,0xb5,0xcd,0xc6,0x2f,0x4f,0x30,0x10,0x60,0x41,0xe4,0x08,0xcf,0x4c,0xc6,0x0f };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x5b,0x14,0xfd,0x4c,0x40,0xa1,0x27,0x73,0x3c,0x20,0xcd,0x84,0x64,0x8e,0xc2,0x87 };
    const uint8_t CIPHERTEXT[] = { 0x76,0xe0,0x74,0xc5,0x87,0xf1,0x12,0xf3,0xff,0xd1,0x7b,0x39,0x0f,0xa8,0xcf,0xfc };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-23", "[ECB][MCT][256][DECRYPT][n23]") {
    const uint8_t KEY[] = { 0x58,0xe0,0x44,0x75,0x8e,0x5e,0x4f,0x30,0x0e,0xb0,0x8f,0x8b,0x6c,0xcd,0x96,0x72,0x03,0xa1,0x30,0x8a,0x6f,0xee,0x17,0x63,0x5c,0x61,0x29,0x8c,0xab,0xc2,0x04,0x88 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x01,0xc2,0x34,0xe2,0x39,0x2f,0x42,0x83,0x1b,0x11,0x72,0x35,0x2f,0x32,0x22,0x86 };
    const uint8_t CIPHERTEXT[] = { 0x5b,0x14,0xfd,0x4c,0x40,0xa1,0x27,0x73,0x3c,0x20,0xcd,0x84,0x64,0x8e,0xc2,0x87 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-24", "[ECB][MCT][256][DECRYPT][n24]") {
    const uint8_t KEY[] = { 0xff,0xbb,0x71,0x04,0xe1,0x10,0xfd,0xfe,0x68,0x9f,0x68,0xff,0xa4,0x8b,0x79,0x59,0x02,0x63,0x04,0x68,0x56,0xc1,0x55,0xe0,0x47,0x70,0x5b,0xb9,0x84,0xf0,0x26,0x0e };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xab,0x14,0x21,0x65,0xcb,0x09,0x36,0x48,0x93,0x86,0x60,0xfd,0x80,0x0d,0x88,0x96 };
    const uint8_t CIPHERTEXT[] = { 0x01,0xc2,0x34,0xe2,0x39,0x2f,0x42,0x83,0x1b,0x11,0x72,0x35,0x2f,0x32,0x22,0x86 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-25", "[ECB][MCT][256][DECRYPT][n25]") {
    const uint8_t KEY[] = { 0x91,0xae,0xfe,0xc3,0x0a,0x79,0xb2,0x52,0x4b,0x19,0xa6,0x11,0xc0,0xc4,0x95,0x2d,0xa9,0x77,0x25,0x0d,0x9d,0xc8,0x63,0xa8,0xd4,0xf6,0x3b,0x44,0x04,0xfd,0xae,0x98 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x5c,0x28,0xad,0x9b,0x57,0x21,0xed,0xad,0xc3,0x0e,0x09,0xb4,0x54,0x1f,0xd7,0x24 };
    const uint8_t CIPHERTEXT[] = { 0xab,0x14,0x21,0x65,0xcb,0x09,0x36,0x48,0x93,0x86,0x60,0xfd,0x80,0x0d,0x88,0x96 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-26", "[ECB][MCT][256][DECRYPT][n26]") {
    const uint8_t KEY[] = { 0x00,0xd0,0xf6,0x9c,0x36,0x67,0x1a,0x9e,0xfe,0xb7,0xb8,0x63,0x7e,0x22,0xaf,0x38,0xf5,0x5f,0x88,0x96,0xca,0xe9,0x8e,0x05,0x17,0xf8,0x32,0xf0,0x50,0xe2,0x79,0xbc };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x5a,0x9a,0xd2,0x4f,0xe4,0x56,0xf4,0xf7,0x66,0xe8,0x39,0xa8,0x10,0x13,0x73,0xc3 };
    const uint8_t CIPHERTEXT[] = { 0x5c,0x28,0xad,0x9b,0x57,0x21,0xed,0xad,0xc3,0x0e,0x09,0xb4,0x54,0x1f,0xd7,0x24 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-27", "[ECB][MCT][256][DECRYPT][n27]") {
    const uint8_t KEY[] = { 0xb2,0x25,0x71,0xc6,0x2e,0xe4,0xe0,0xb4,0xeb,0xd7,0xd7,0x76,0x70,0x3c,0x13,0x45,0xaf,0xc5,0x5a,0xd9,0x2e,0xbf,0x7a,0xf2,0x71,0x10,0x0b,0x58,0x40,0xf1,0x0a,0x7f };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xa3,0x0e,0x9a,0x77,0x30,0x62,0x8b,0x56,0x0c,0x71,0x96,0x7b,0xdb,0x35,0xef,0xce };
    const uint8_t CIPHERTEXT[] = { 0x5a,0x9a,0xd2,0x4f,0xe4,0x56,0xf4,0xf7,0x66,0xe8,0x39,0xa8,0x10,0x13,0x73,0xc3 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-28", "[ECB][MCT][256][DECRYPT][n28]") {
    const uint8_t KEY[] = { 0x14,0x31,0xd0,0x10,0x06,0x51,0x01,0x79,0xdd,0x13,0xe2,0xa8,0x3e,0x1b,0x8b,0x7b,0x0c,0xcb,0xc0,0xae,0x1e,0xdd,0xf1,0xa4,0x7d,0x61,0x9d,0x23,0x9b,0xc4,0xe5,0xb1 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x71,0x18,0xcc,0x8a,0x05,0x7d,0xf7,0xea,0x9b,0x7f,0xb0,0x96,0xde,0xcf,0x05,0xd9 };
    const uint8_t CIPHERTEXT[] = { 0xa3,0x0e,0x9a,0x77,0x30,0x62,0x8b,0x56,0x0c,0x71,0x96,0x7b,0xdb,0x35,0xef,0xce };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-29", "[ECB][MCT][256][DECRYPT][n29]") {
    const uint8_t KEY[] = { 0x06,0x10,0x45,0x31,0xe2,0xd0,0x00,0xff,0xf0,0xcc,0x83,0x36,0xb6,0x2e,0x9b,0xb8,0x7d,0xd3,0x0c,0x24,0x1b,0xa0,0x06,0x4e,0xe6,0x1e,0x2d,0xb5,0x45,0x0b,0xe0,0x68 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xc5,0x50,0xff,0x93,0xa3,0x6f,0xbb,0x8e,0x9a,0x50,0x56,0x82,0xe0,0x7f,0xb9,0x81 };
    const uint8_t CIPHERTEXT[] = { 0x71,0x18,0xcc,0x8a,0x05,0x7d,0xf7,0xea,0x9b,0x7f,0xb0,0x96,0xde,0xcf,0x05,0xd9 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-30", "[ECB][MCT][256][DECRYPT][n30]") {
    const uint8_t KEY[] = { 0x8e,0x5e,0xbd,0x5c,0x9b,0xf8,0x58,0xf3,0x37,0x9b,0xfb,0x88,0xc7,0xc7,0x53,0x19,0xb8,0x83,0xf3,0xb7,0xb8,0xcf,0xbd,0xc0,0x7c,0x4e,0x7b,0x37,0xa5,0x74,0x59,0xe9 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x13,0x75,0xe7,0xb4,0x16,0x4a,0xdc,0x86,0x1b,0xbb,0x77,0xc5,0x0a,0xba,0x44,0x5c };
    const uint8_t CIPHERTEXT[] = { 0xc5,0x50,0xff,0x93,0xa3,0x6f,0xbb,0x8e,0x9a,0x50,0x56,0x82,0xe0,0x7f,0xb9,0x81 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-31", "[ECB][MCT][256][DECRYPT][n31]") {
    const uint8_t KEY[] = { 0xcc,0xc9,0x44,0x5c,0x3a,0xab,0x1c,0x03,0xec,0x80,0x27,0x59,0x3d,0x37,0x06,0x64,0xab,0xf6,0x14,0x03,0xae,0x85,0x61,0x46,0x67,0xf5,0x0c,0xf2,0xaf,0xce,0x1d,0xb5 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x5b,0xc8,0xb4,0x11,0xc0,0xfa,0xe9,0x2b,0xad,0x54,0xb4,0xe5,0xc3,0xa8,0x82,0x6e };
    const uint8_t CIPHERTEXT[] = { 0x13,0x75,0xe7,0xb4,0x16,0x4a,0xdc,0x86,0x1b,0xbb,0x77,0xc5,0x0a,0xba,0x44,0x5c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-32", "[ECB][MCT][256][DECRYPT][n32]") {
    const uint8_t KEY[] = { 0xb8,0x04,0x99,0x42,0x28,0xd6,0x18,0xa9,0xb7,0xa3,0xe0,0xc3,0xd8,0xd2,0xd3,0x73,0xf0,0x3e,0xa0,0x12,0x6e,0x7f,0x88,0x6d,0xca,0xa1,0xb8,0x17,0x6c,0x66,0x9f,0xdb };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x36,0xc9,0xde,0x7c,0x01,0x29,0x8f,0xf0,0x6c,0x5e,0x3e,0xcf,0x12,0x50,0x7c,0xd6 };
    const uint8_t CIPHERTEXT[] = { 0x5b,0xc8,0xb4,0x11,0xc0,0xfa,0xe9,0x2b,0xad,0x54,0xb4,0xe5,0xc3,0xa8,0x82,0x6e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-33", "[ECB][MCT][256][DECRYPT][n33]") {
    const uint8_t KEY[] = { 0x8a,0x78,0x4f,0x32,0xcd,0xd7,0xe2,0xed,0x19,0xe8,0x5f,0xaf,0x04,0xde,0x20,0x15,0xc6,0xf7,0x7e,0x6e,0x6f,0x56,0x07,0x9d,0xa6,0xff,0x86,0xd8,0x7e,0x36,0xe3,0x0d };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x35,0xd8,0x14,0xc0,0xf6,0xc0,0x7a,0xe7,0x2b,0xbe,0x7c,0xd1,0x75,0x1d,0x75,0x27 };
    const uint8_t CIPHERTEXT[] = { 0x36,0xc9,0xde,0x7c,0x01,0x29,0x8f,0xf0,0x6c,0x5e,0x3e,0xcf,0x12,0x50,0x7c,0xd6 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-34", "[ECB][MCT][256][DECRYPT][n34]") {
    const uint8_t KEY[] = { 0x71,0xe3,0xcc,0x0f,0x60,0xa2,0xea,0xfd,0x83,0xc3,0xa4,0x55,0xee,0xfc,0x4c,0x9c,0xf3,0x2f,0x6a,0xae,0x99,0x96,0x7d,0x7a,0x8d,0x41,0xfa,0x09,0x0b,0x2b,0x96,0x2a };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x73,0xc3,0x9c,0xe5,0xea,0x1b,0x5e,0xab,0x18,0xc9,0xc1,0x52,0x21,0xe2,0x58,0xd1 };
    const uint8_t CIPHERTEXT[] = { 0x35,0xd8,0x14,0xc0,0xf6,0xc0,0x7a,0xe7,0x2b,0xbe,0x7c,0xd1,0x75,0x1d,0x75,0x27 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-35", "[ECB][MCT][256][DECRYPT][n35]") {
    const uint8_t KEY[] = { 0x71,0xbe,0xf3,0xd2,0xbe,0xff,0xa1,0x7d,0x37,0xc6,0xc3,0xb2,0x8e,0xf2,0x92,0x82,0x80,0xec,0xf6,0x4b,0x73,0x8d,0x23,0xd1,0x95,0x88,0x3b,0x5b,0x2a,0xc9,0xce,0xfb };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xac,0x67,0x50,0x8a,0x8b,0xca,0xb6,0x9f,0x96,0xea,0xd2,0x91,0x21,0x71,0x8c,0xd7 };
    const uint8_t CIPHERTEXT[] = { 0x73,0xc3,0x9c,0xe5,0xea,0x1b,0x5e,0xab,0x18,0xc9,0xc1,0x52,0x21,0xe2,0x58,0xd1 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-36", "[ECB][MCT][256][DECRYPT][n36]") {
    const uint8_t KEY[] = { 0x9a,0xa1,0xff,0xa9,0xe1,0x75,0xf0,0x3a,0x6b,0xcc,0x71,0xfc,0x2a,0xea,0x3a,0x52,0x2c,0x8b,0xa6,0xc1,0xf8,0x47,0x95,0x4e,0x03,0x62,0xe9,0xca,0x0b,0xb8,0x42,0x2c };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x49,0xd2,0xca,0xc2,0xca,0x39,0xa3,0xb6,0x63,0x02,0xe5,0xf3,0x65,0x0e,0x71,0xd7 };
    const uint8_t CIPHERTEXT[] = { 0xac,0x67,0x50,0x8a,0x8b,0xca,0xb6,0x9f,0x96,0xea,0xd2,0x91,0x21,0x71,0x8c,0xd7 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-37", "[ECB][MCT][256][DECRYPT][n37]") {
    const uint8_t KEY[] = { 0x4e,0x48,0x0b,0x73,0xab,0x5c,0x65,0x95,0x38,0x35,0x4b,0x24,0x74,0xc9,0x36,0x7b,0x65,0x59,0x6c,0x03,0x32,0x7e,0x36,0xf8,0x60,0x60,0x0c,0x39,0x6e,0xb6,0x33,0xfb };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xe5,0x46,0x38,0x67,0x4e,0xa0,0xb3,0xe8,0x37,0x77,0x2a,0x28,0x66,0x72,0x37,0x53 };
    const uint8_t CIPHERTEXT[] = { 0x49,0xd2,0xca,0xc2,0xca,0x39,0xa3,0xb6,0x63,0x02,0xe5,0xf3,0x65,0x0e,0x71,0xd7 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-38", "[ECB][MCT][256][DECRYPT][n38]") {
    const uint8_t KEY[] = { 0xae,0xec,0xd5,0x5c,0x38,0xbe,0xf7,0x63,0x67,0xa2,0x14,0x69,0xd0,0x87,0x21,0xd2,0x80,0x1f,0x54,0x64,0x7c,0xde,0x85,0x10,0x57,0x17,0x26,0x11,0x08,0xc4,0x04,0xa8 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x07,0x4d,0x93,0x30,0x18,0xe9,0xe0,0x55,0x8b,0x41,0x6e,0x39,0x54,0x89,0x94,0xff };
    const uint8_t CIPHERTEXT[] = { 0xe5,0x46,0x38,0x67,0x4e,0xa0,0xb3,0xe8,0x37,0x77,0x2a,0x28,0x66,0x72,0x37,0x53 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-39", "[ECB][MCT][256][DECRYPT][n39]") {
    const uint8_t KEY[] = { 0xe3,0x6c,0x6a,0x30,0xf7,0x34,0xa6,0x79,0xab,0x7a,0xf2,0xf9,0xff,0x76,0x7c,0xfe,0x87,0x52,0xc7,0x54,0x64,0x37,0x65,0x45,0xdc,0x56,0x48,0x28,0x5c,0x4d,0x90,0x57 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x04,0x82,0x5a,0x9b,0xa2,0x06,0x46,0xac,0xad,0xb2,0xcb,0xdb,0xd2,0x35,0x30,0xc0 };
    const uint8_t CIPHERTEXT[] = { 0x07,0x4d,0x93,0x30,0x18,0xe9,0xe0,0x55,0x8b,0x41,0x6e,0x39,0x54,0x89,0x94,0xff };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-40", "[ECB][MCT][256][DECRYPT][n40]") {
    const uint8_t KEY[] = { 0x12,0x48,0x06,0x70,0x8f,0xc5,0xfc,0x73,0xa1,0xe5,0x0c,0x61,0xe5,0xa7,0x6b,0x87,0x83,0xd0,0x9d,0xcf,0xc6,0x31,0x23,0xe9,0x71,0xe4,0x83,0xf3,0x8e,0x78,0xa0,0x97 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x25,0xb9,0x8d,0x28,0x37,0x58,0x0f,0x9f,0x3d,0xa8,0xf2,0x59,0x3f,0x7b,0x1d,0x72 };
    const uint8_t CIPHERTEXT[] = { 0x04,0x82,0x5a,0x9b,0xa2,0x06,0x46,0xac,0xad,0xb2,0xcb,0xdb,0xd2,0x35,0x30,0xc0 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-41", "[ECB][MCT][256][DECRYPT][n41]") {
    const uint8_t KEY[] = { 0x56,0x0a,0xfb,0x55,0x29,0xa8,0xb4,0x33,0x73,0x83,0x48,0xa2,0x96,0x40,0x8c,0xad,0xa6,0x69,0x10,0xe7,0xf1,0x69,0x2c,0x76,0x4c,0x4c,0x71,0xaa,0xb1,0x03,0xbd,0xe5 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x04,0x8b,0x22,0x0c,0x70,0xd8,0x75,0xca,0xd6,0x90,0x1e,0x40,0xf4,0x5c,0x5b,0x03 };
    const uint8_t CIPHERTEXT[] = { 0x25,0xb9,0x8d,0x28,0x37,0x58,0x0f,0x9f,0x3d,0xa8,0xf2,0x59,0x3f,0x7b,0x1d,0x72 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-42", "[ECB][MCT][256][DECRYPT][n42]") {
    const uint8_t KEY[] = { 0x8b,0x7c,0x61,0xdd,0x00,0x7d,0x9d,0x0d,0x19,0x37,0xcf,0xc6,0x9b,0x63,0xc1,0x14,0xa2,0xe2,0x32,0xeb,0x81,0xb1,0x59,0xbc,0x9a,0xdc,0x6f,0xea,0x45,0x5f,0xe6,0xe6 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x34,0xe2,0xa3,0x34,0x12,0xc0,0xe6,0x82,0xb2,0x9b,0x26,0xd5,0x40,0x9d,0x01,0x5f };
    const uint8_t CIPHERTEXT[] = { 0x04,0x8b,0x22,0x0c,0x70,0xd8,0x75,0xca,0xd6,0x90,0x1e,0x40,0xf4,0x5c,0x5b,0x03 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-43", "[ECB][MCT][256][DECRYPT][n43]") {
    const uint8_t KEY[] = { 0x30,0x56,0x0c,0xa0,0xa3,0x1d,0x81,0x45,0x22,0x8d,0x34,0xfb,0xf8,0x41,0x56,0x83,0x96,0x00,0x91,0xdf,0x93,0x71,0xbf,0x3e,0x28,0x47,0x49,0x3f,0x05,0xc2,0xe7,0xb9 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x94,0x2c,0x05,0x79,0x14,0xf3,0xb8,0x8f,0xa0,0xa4,0x0b,0xb4,0x1d,0x02,0xb0,0x51 };
    const uint8_t CIPHERTEXT[] = { 0x34,0xe2,0xa3,0x34,0x12,0xc0,0xe6,0x82,0xb2,0x9b,0x26,0xd5,0x40,0x9d,0x01,0x5f };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-44", "[ECB][MCT][256][DECRYPT][n44]") {
    const uint8_t KEY[] = { 0x20,0xc7,0xe6,0xe4,0x5c,0x08,0xba,0x07,0x56,0xc3,0x79,0xb6,0xcd,0x4d,0x68,0x86,0x02,0x2c,0x94,0xa6,0x87,0x82,0x07,0xb1,0x88,0xe3,0x42,0x8b,0x18,0xc0,0x57,0xe8 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x6f,0x4e,0x5c,0x40,0xe4,0x13,0x5a,0xbf,0xdf,0x29,0x4b,0x4d,0x8c,0x93,0x04,0xb3 };
    const uint8_t CIPHERTEXT[] = { 0x94,0x2c,0x05,0x79,0x14,0xf3,0xb8,0x8f,0xa0,0xa4,0x0b,0xb4,0x1d,0x02,0xb0,0x51 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-45", "[ECB][MCT][256][DECRYPT][n45]") {
    const uint8_t KEY[] = { 0x2a,0x6c,0x92,0x8b,0xf8,0xc2,0xb3,0x2c,0xe8,0x2e,0xd0,0xbe,0x1b,0xc9,0x54,0xb9,0x6d,0x62,0xc8,0xe6,0x63,0x91,0x5d,0x0e,0x57,0xca,0x09,0xc6,0x94,0x53,0x53,0x5b };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xca,0xc0,0x32,0xdd,0xc2,0xb2,0x74,0x43,0xd7,0x0d,0x0f,0x2d,0xfb,0x1a,0x1d,0x87 };
    const uint8_t CIPHERTEXT[] = { 0x6f,0x4e,0x5c,0x40,0xe4,0x13,0x5a,0xbf,0xdf,0x29,0x4b,0x4d,0x8c,0x93,0x04,0xb3 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-46", "[ECB][MCT][256][DECRYPT][n46]") {
    const uint8_t KEY[] = { 0x74,0x99,0x4d,0x46,0x52,0x6b,0x2e,0x9d,0x54,0x70,0xa0,0xa6,0x87,0xf7,0x26,0xf2,0xa7,0xa2,0xfa,0x3b,0xa1,0x23,0x29,0x4d,0x80,0xc7,0x06,0xeb,0x6f,0x49,0x4e,0xdc };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x6a,0xec,0x33,0xb2,0xc1,0xae,0x39,0x23,0x7b,0x13,0xe8,0x65,0x55,0x72,0x2d,0x1a };
    const uint8_t CIPHERTEXT[] = { 0xca,0xc0,0x32,0xdd,0xc2,0xb2,0x74,0x43,0xd7,0x0d,0x0f,0x2d,0xfb,0x1a,0x1d,0x87 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-47", "[ECB][MCT][256][DECRYPT][n47]") {
    const uint8_t KEY[] = { 0x5a,0xae,0xc2,0x8d,0x07,0x9e,0xef,0x5f,0x1c,0x42,0xdf,0x37,0x7c,0x7e,0x80,0xac,0xcd,0x4e,0xc9,0x89,0x60,0x8d,0x10,0x6e,0xfb,0xd4,0xee,0x8e,0x3a,0x3b,0x63,0xc6 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x2d,0xf3,0x41,0x73,0xbb,0xff,0x33,0x14,0x88,0xb2,0x36,0x87,0xc7,0x55,0xf6,0x17 };
    const uint8_t CIPHERTEXT[] = { 0x6a,0xec,0x33,0xb2,0xc1,0xae,0x39,0x23,0x7b,0x13,0xe8,0x65,0x55,0x72,0x2d,0x1a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-48", "[ECB][MCT][256][DECRYPT][n48]") {
    const uint8_t KEY[] = { 0x9b,0xfa,0x3c,0x08,0xb8,0xf8,0xb8,0x75,0x8f,0x0a,0x1f,0x4b,0x0e,0xf8,0x6b,0xe4,0xe0,0xbd,0x88,0xfa,0xdb,0x72,0x23,0x7a,0x73,0x66,0xd8,0x09,0xfd,0x6e,0x95,0xd1 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x07,0x64,0x9d,0xd5,0xc1,0xc7,0xb3,0x88,0x10,0xcb,0xec,0xba,0xd9,0xc0,0x37,0xed };
    const uint8_t CIPHERTEXT[] = { 0x2d,0xf3,0x41,0x73,0xbb,0xff,0x33,0x14,0x88,0xb2,0x36,0x87,0xc7,0x55,0xf6,0x17 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-49", "[ECB][MCT][256][DECRYPT][n49]") {
    const uint8_t KEY[] = { 0x18,0x8e,0x3a,0x02,0x7b,0x75,0xfe,0xde,0x97,0x8c,0x76,0xe7,0x0a,0x85,0x3f,0x95,0xe7,0xd9,0x15,0x2f,0x1a,0xb5,0x90,0xf2,0x63,0xad,0x34,0xb3,0x24,0xae,0xa2,0x3c };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xef,0x3d,0x90,0x92,0x32,0x16,0x49,0xd9,0xbb,0xb8,0x8f,0x64,0x48,0xe3,0x84,0x7b };
    const uint8_t CIPHERTEXT[] = { 0x07,0x64,0x9d,0xd5,0xc1,0xc7,0xb3,0x88,0x10,0xcb,0xec,0xba,0xd9,0xc0,0x37,0xed };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-50", "[ECB][MCT][256][DECRYPT][n50]") {
    const uint8_t KEY[] = { 0xaa,0xe2,0xc6,0x36,0x3b,0xe3,0xdb,0xb7,0x1c,0x21,0xf3,0xa2,0xd9,0xf1,0x23,0xf1,0x08,0xe4,0x85,0xbd,0x28,0xa3,0xd9,0x2b,0xd8,0x15,0xbb,0xd7,0x6c,0x4d,0x26,0x47 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x1e,0x50,0x58,0xb3,0xe9,0x86,0xd4,0xaa,0xd8,0x0a,0x11,0xf9,0x09,0xaf,0x1c,0xca };
    const uint8_t CIPHERTEXT[] = { 0xef,0x3d,0x90,0x92,0x32,0x16,0x49,0xd9,0xbb,0xb8,0x8f,0x64,0x48,0xe3,0x84,0x7b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-51", "[ECB][MCT][256][DECRYPT][n51]") {
    const uint8_t KEY[] = { 0x85,0xa5,0x1c,0x6d,0x62,0xba,0x97,0x56,0x4a,0xc9,0x55,0xa5,0x40,0x9c,0x36,0x29,0x16,0xb4,0xdd,0x0e,0xc1,0x25,0x0d,0x81,0x00,0x1f,0xaa,0x2e,0x65,0xe2,0x3a,0x8d };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x9b,0xf8,0x10,0x52,0x59,0x6b,0x78,0x6b,0x50,0xb3,0xf3,0x50,0x6c,0x00,0x91,0x69 };
    const uint8_t CIPHERTEXT[] = { 0x1e,0x50,0x58,0xb3,0xe9,0x86,0xd4,0xaa,0xd8,0x0a,0x11,0xf9,0x09,0xaf,0x1c,0xca };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-52", "[ECB][MCT][256][DECRYPT][n52]") {
    const uint8_t KEY[] = { 0x0d,0x09,0x60,0x0f,0x10,0x8a,0x86,0xcf,0xd5,0x8f,0x3c,0x21,0x1a,0x40,0xc3,0x8d,0x8d,0x4c,0xcd,0x5c,0x98,0x4e,0x75,0xea,0x50,0xac,0x59,0x7e,0x09,0xe2,0xab,0xe4 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x81,0xbd,0xaf,0x86,0xcf,0x42,0x55,0xe5,0x82,0x62,0x94,0xa5,0x1d,0x2f,0x99,0x92 };
    const uint8_t CIPHERTEXT[] = { 0x9b,0xf8,0x10,0x52,0x59,0x6b,0x78,0x6b,0x50,0xb3,0xf3,0x50,0x6c,0x00,0x91,0x69 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-53", "[ECB][MCT][256][DECRYPT][n53]") {
    const uint8_t KEY[] = { 0x14,0xab,0x47,0x88,0x66,0xe1,0xd1,0x60,0x31,0x1a,0xa8,0x82,0x0d,0xf3,0x54,0xfb,0x0c,0xf1,0x62,0xda,0x57,0x0c,0x20,0x0f,0xd2,0xce,0xcd,0xdb,0x14,0xcd,0x32,0x76 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x1f,0xdc,0x5f,0xee,0x9e,0xb6,0x40,0xff,0x54,0x7a,0x98,0xd9,0xe1,0x60,0x1b,0x52 };
    const uint8_t CIPHERTEXT[] = { 0x81,0xbd,0xaf,0x86,0xcf,0x42,0x55,0xe5,0x82,0x62,0x94,0xa5,0x1d,0x2f,0x99,0x92 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-54", "[ECB][MCT][256][DECRYPT][n54]") {
    const uint8_t KEY[] = { 0x39,0xf1,0x84,0x05,0xf0,0xb1,0xda,0x64,0x7f,0x99,0x47,0x9e,0x87,0xd4,0xd1,0x53,0x13,0x2d,0x3d,0x34,0xc9,0xba,0x60,0xf0,0x86,0xb4,0x55,0x02,0xf5,0xad,0x29,0x24 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x93,0x66,0x09,0x87,0x6c,0xd6,0xee,0xbf,0x31,0xdb,0x5a,0x6a,0xf7,0x83,0x98,0x44 };
    const uint8_t CIPHERTEXT[] = { 0x1f,0xdc,0x5f,0xee,0x9e,0xb6,0x40,0xff,0x54,0x7a,0x98,0xd9,0xe1,0x60,0x1b,0x52 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-55", "[ECB][MCT][256][DECRYPT][n55]") {
    const uint8_t KEY[] = { 0x85,0xa9,0x00,0xbc,0x15,0x63,0xb1,0x6e,0x01,0x48,0x1e,0x45,0xd1,0x12,0x57,0x34,0x80,0x4b,0x34,0xb3,0xa5,0x6c,0x8e,0x4f,0xb7,0x6f,0x0f,0x68,0x02,0x2e,0xb1,0x60 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x9e,0xa8,0xb6,0x94,0x22,0x87,0xf4,0x70,0xe9,0x86,0x6a,0x48,0xf4,0xdc,0x66,0x1a };
    const uint8_t CIPHERTEXT[] = { 0x93,0x66,0x09,0x87,0x6c,0xd6,0xee,0xbf,0x31,0xdb,0x5a,0x6a,0xf7,0x83,0x98,0x44 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-56", "[ECB][MCT][256][DECRYPT][n56]") {
    const uint8_t KEY[] = { 0xc4,0x3d,0x67,0x7f,0xc0,0xa1,0xbe,0xcb,0xb0,0x21,0x42,0x21,0xb8,0x66,0xf0,0xbe,0x1e,0xe3,0x82,0x27,0x87,0xeb,0x7a,0x3f,0x5e,0xe9,0x65,0x20,0xf6,0xf2,0xd7,0x7a };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x1d,0xfc,0x2c,0xf8,0x2b,0xfa,0xa2,0x73,0x2e,0xb5,0x25,0x91,0x6e,0xf9,0xef,0x13 };
    const uint8_t CIPHERTEXT[] = { 0x9e,0xa8,0xb6,0x94,0x22,0x87,0xf4,0x70,0xe9,0x86,0x6a,0x48,0xf4,0xdc,0x66,0x1a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-57", "[ECB][MCT][256][DECRYPT][n57]") {
    const uint8_t KEY[] = { 0x58,0x4f,0x10,0x65,0x9c,0x2d,0x3c,0x41,0xf6,0xa1,0x92,0x6d,0xe4,0x59,0x5e,0xb2,0x03,0x1f,0xae,0xdf,0xac,0x11,0xd8,0x4c,0x70,0x5c,0x40,0xb1,0x98,0x0b,0x38,0x69 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xa5,0xd8,0xd1,0xd6,0x02,0x81,0xa1,0x52,0xb9,0xb7,0x61,0x42,0xe3,0xe5,0xa5,0x12 };
    const uint8_t CIPHERTEXT[] = { 0x1d,0xfc,0x2c,0xf8,0x2b,0xfa,0xa2,0x73,0x2e,0xb5,0x25,0x91,0x6e,0xf9,0xef,0x13 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-58", "[ECB][MCT][256][DECRYPT][n58]") {
    const uint8_t KEY[] = { 0x8e,0xba,0x33,0x69,0x27,0xe1,0x8b,0x13,0xeb,0x38,0x58,0xa8,0x97,0x09,0x76,0x8b,0xa6,0xc7,0x7f,0x09,0xae,0x90,0x79,0x1e,0xc9,0xeb,0x21,0xf3,0x7b,0xee,0x9d,0x7b };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x8a,0xc0,0x27,0x8f,0x2a,0xb1,0x00,0xa5,0x96,0x41,0x73,0xd7,0x69,0x34,0xd7,0x32 };
    const uint8_t CIPHERTEXT[] = { 0xa5,0xd8,0xd1,0xd6,0x02,0x81,0xa1,0x52,0xb9,0xb7,0x61,0x42,0xe3,0xe5,0xa5,0x12 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-59", "[ECB][MCT][256][DECRYPT][n59]") {
    const uint8_t KEY[] = { 0x13,0xf1,0x55,0x8d,0xca,0xe0,0x90,0x62,0xbf,0xdc,0xcd,0xd0,0x03,0x7e,0x5c,0x43,0x2c,0x07,0x58,0x86,0x84,0x21,0x79,0xbb,0x5f,0xaa,0x52,0x24,0x12,0xda,0x4a,0x49 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x30,0x23,0x3b,0x70,0xc4,0xd6,0xfd,0x31,0xb2,0x3c,0xc7,0x7b,0xc7,0x35,0x59,0xea };
    const uint8_t CIPHERTEXT[] = { 0x8a,0xc0,0x27,0x8f,0x2a,0xb1,0x00,0xa5,0x96,0x41,0x73,0xd7,0x69,0x34,0xd7,0x32 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-60", "[ECB][MCT][256][DECRYPT][n60]") {
    const uint8_t KEY[] = { 0xd7,0x36,0x66,0x98,0x42,0xaa,0x88,0xf4,0x3f,0x1d,0xe4,0x21,0xd3,0x8f,0x39,0x1f,0x1c,0x24,0x63,0xf6,0x40,0xf7,0x84,0x8a,0xed,0x96,0x95,0x5f,0xd5,0xef,0x13,0xa3 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x76,0x66,0x30,0xdf,0xd4,0x1e,0x41,0x46,0xa8,0x27,0xf5,0x5c,0xba,0x74,0x5b,0x6a };
    const uint8_t CIPHERTEXT[] = { 0x30,0x23,0x3b,0x70,0xc4,0xd6,0xfd,0x31,0xb2,0x3c,0xc7,0x7b,0xc7,0x35,0x59,0xea };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-61", "[ECB][MCT][256][DECRYPT][n61]") {
    const uint8_t KEY[] = { 0x0c,0xa8,0x35,0x3d,0xf9,0x0e,0x73,0x60,0x65,0x88,0xa1,0x16,0x75,0xbd,0x37,0xa7,0x6a,0x42,0x53,0x29,0x94,0xe9,0xc5,0xcc,0x45,0xb1,0x60,0x03,0x6f,0x9b,0x48,0xc9 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x17,0x7f,0x22,0xd9,0x8f,0x00,0x9c,0x21,0x4a,0x44,0xb0,0x8c,0xf4,0x0b,0x79,0x0d };
    const uint8_t CIPHERTEXT[] = { 0x76,0x66,0x30,0xdf,0xd4,0x1e,0x41,0x46,0xa8,0x27,0xf5,0x5c,0xba,0x74,0x5b,0x6a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-62", "[ECB][MCT][256][DECRYPT][n62]") {
    const uint8_t KEY[] = { 0x13,0x6e,0xc3,0xa1,0xa6,0x5e,0xe7,0xbb,0x0f,0xd0,0x9a,0xf7,0x36,0x4b,0x66,0x60,0x7d,0x3d,0x71,0xf0,0x1b,0xe9,0x59,0xed,0x0f,0xf5,0xd0,0x8f,0x9b,0x90,0x31,0xc4 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xe9,0xc9,0x16,0xa2,0x1d,0xec,0x96,0x62,0xbd,0xd9,0x1a,0x0f,0x86,0x5f,0x8b,0x47 };
    const uint8_t CIPHERTEXT[] = { 0x17,0x7f,0x22,0xd9,0x8f,0x00,0x9c,0x21,0x4a,0x44,0xb0,0x8c,0xf4,0x0b,0x79,0x0d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-63", "[ECB][MCT][256][DECRYPT][n63]") {
    const uint8_t KEY[] = { 0xba,0x5c,0x2b,0xd4,0x13,0xda,0xca,0x78,0x66,0xde,0x11,0xc1,0x1d,0xb2,0x92,0x66,0x94,0xf4,0x67,0x52,0x06,0x05,0xcf,0x8f,0xb2,0x2c,0xca,0x80,0x1d,0xcf,0xba,0x83 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x92,0xb3,0xab,0x3e,0x28,0xf6,0xc6,0x06,0x50,0x87,0x06,0xe0,0xc3,0xd7,0x6d,0x28 };
    const uint8_t CIPHERTEXT[] = { 0xe9,0xc9,0x16,0xa2,0x1d,0xec,0x96,0x62,0xbd,0xd9,0x1a,0x0f,0x86,0x5f,0x8b,0x47 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-64", "[ECB][MCT][256][DECRYPT][n64]") {
    const uint8_t KEY[] = { 0x0f,0xab,0x47,0x68,0xfa,0x7f,0x10,0x4a,0x35,0x79,0xf5,0x34,0x50,0x81,0x82,0x92,0x06,0x47,0xcc,0x6c,0x2e,0xf3,0x09,0x89,0xe2,0xab,0xcc,0x60,0xde,0x18,0xd7,0xab };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x36,0x52,0x05,0x3d,0xcb,0xa5,0x91,0xf1,0x01,0x94,0x4f,0xb1,0xa5,0xeb,0x2b,0x99 };
    const uint8_t CIPHERTEXT[] = { 0x92,0xb3,0xab,0x3e,0x28,0xf6,0xc6,0x06,0x50,0x87,0x06,0xe0,0xc3,0xd7,0x6d,0x28 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-65", "[ECB][MCT][256][DECRYPT][n65]") {
    const uint8_t KEY[] = { 0xe7,0x66,0xaa,0x23,0xc0,0x75,0xde,0xaa,0x6f,0xae,0x68,0x38,0x4f,0x5b,0x20,0x5e,0x30,0x15,0xc9,0x51,0xe5,0x56,0x98,0x78,0xe3,0x3f,0x83,0xd1,0x7b,0xf3,0xfc,0x32 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x24,0x22,0x60,0xd2,0x38,0x7c,0x6f,0x1a,0x41,0x58,0x34,0xb3,0x4e,0x30,0x0a,0x7e };
    const uint8_t CIPHERTEXT[] = { 0x36,0x52,0x05,0x3d,0xcb,0xa5,0x91,0xf1,0x01,0x94,0x4f,0xb1,0xa5,0xeb,0x2b,0x99 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-66", "[ECB][MCT][256][DECRYPT][n66]") {
    const uint8_t KEY[] = { 0x9f,0x19,0x41,0x44,0x23,0x36,0xbf,0xff,0xa1,0xd6,0xb2,0x7d,0xce,0x78,0x45,0x97,0x14,0x37,0xa9,0x83,0xdd,0x2a,0xf7,0x62,0xa2,0x67,0xb7,0x62,0x35,0xc3,0xf6,0x4c };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xa2,0xa5,0x8e,0xd0,0x50,0x23,0x1b,0x0d,0x15,0xf8,0xcd,0x99,0xf5,0xe1,0x71,0xfb };
    const uint8_t CIPHERTEXT[] = { 0x24,0x22,0x60,0xd2,0x38,0x7c,0x6f,0x1a,0x41,0x58,0x34,0xb3,0x4e,0x30,0x0a,0x7e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-67", "[ECB][MCT][256][DECRYPT][n67]") {
    const uint8_t KEY[] = { 0x42,0x9a,0x3c,0xdc,0x98,0x12,0x4f,0xaf,0xe3,0x31,0x56,0xa6,0x6b,0x4e,0x8c,0x2a,0xb6,0x92,0x27,0x53,0x8d,0x09,0xec,0x6f,0xb7,0x9f,0x7a,0xfb,0xc0,0x22,0x87,0xb7 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xec,0x66,0x31,0xb1,0x7e,0x5c,0x97,0x19,0x3f,0xd9,0x65,0x1b,0x64,0xfe,0xff,0xe7 };
    const uint8_t CIPHERTEXT[] = { 0xa2,0xa5,0x8e,0xd0,0x50,0x23,0x1b,0x0d,0x15,0xf8,0xcd,0x99,0xf5,0xe1,0x71,0xfb };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-68", "[ECB][MCT][256][DECRYPT][n68]") {
    const uint8_t KEY[] = { 0x92,0x76,0x4a,0x89,0xe0,0xde,0x63,0x82,0x3b,0x9d,0x9a,0x5a,0x00,0x18,0x68,0x03,0x5a,0xf4,0x16,0xe2,0xf3,0x55,0x7b,0x76,0x88,0x46,0x1f,0xe0,0xa4,0xdc,0x78,0x50 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x1e,0xef,0x8a,0xfa,0x41,0x9a,0x93,0x41,0x08,0x5a,0x2d,0x61,0x11,0x85,0xe4,0x2c };
    const uint8_t CIPHERTEXT[] = { 0xec,0x66,0x31,0xb1,0x7e,0x5c,0x97,0x19,0x3f,0xd9,0x65,0x1b,0x64,0xfe,0xff,0xe7 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-69", "[ECB][MCT][256][DECRYPT][n69]") {
    const uint8_t KEY[] = { 0x0c,0x0b,0xf1,0x3d,0x79,0xd1,0x29,0x7e,0x13,0x7e,0x6f,0x59,0x95,0xcb,0x0a,0x2c,0x44,0x1b,0x9c,0x18,0xb2,0xcf,0xe8,0x37,0x80,0x1c,0x32,0x81,0xb5,0x59,0x9c,0x7c };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xd4,0xeb,0x4e,0x59,0x1c,0xf8,0x56,0xb8,0x16,0xe2,0x20,0x72,0x64,0xe4,0x26,0xe4 };
    const uint8_t CIPHERTEXT[] = { 0x1e,0xef,0x8a,0xfa,0x41,0x9a,0x93,0x41,0x08,0x5a,0x2d,0x61,0x11,0x85,0xe4,0x2c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-70", "[ECB][MCT][256][DECRYPT][n70]") {
    const uint8_t KEY[] = { 0xde,0x31,0xf9,0x95,0x86,0x7b,0xb4,0x58,0x13,0xd3,0x69,0x34,0x9c,0xb7,0x43,0x42,0x90,0xf0,0xd2,0x41,0xae,0x37,0xbe,0x8f,0x96,0xfe,0x12,0xf3,0xd1,0xbd,0xba,0x98 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x40,0x1e,0x14,0xb1,0x26,0x34,0x8e,0x1a,0xed,0xd1,0x36,0x62,0xa1,0x9c,0x23,0xfb };
    const uint8_t CIPHERTEXT[] = { 0xd4,0xeb,0x4e,0x59,0x1c,0xf8,0x56,0xb8,0x16,0xe2,0x20,0x72,0x64,0xe4,0x26,0xe4 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-71", "[ECB][MCT][256][DECRYPT][n71]") {
    const uint8_t KEY[] = { 0x3b,0x1a,0x02,0xb5,0x60,0x04,0x44,0xdb,0x09,0x11,0x8e,0x99,0x76,0x5f,0xa6,0x1d,0xd0,0xee,0xc6,0xf0,0x88,0x03,0x30,0x95,0x7b,0x2f,0x24,0x91,0x70,0x21,0x99,0x63 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x38,0xbf,0xea,0x7e,0x1e,0xec,0xe7,0x41,0xeb,0x6a,0x96,0x01,0x60,0x51,0x29,0xdd };
    const uint8_t CIPHERTEXT[] = { 0x40,0x1e,0x14,0xb1,0x26,0x34,0x8e,0x1a,0xed,0xd1,0x36,0x62,0xa1,0x9c,0x23,0xfb };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-72", "[ECB][MCT][256][DECRYPT][n72]") {
    const uint8_t KEY[] = { 0x1f,0xbc,0xf4,0xff,0xb3,0x6f,0x76,0xb8,0x83,0x23,0xf7,0x45,0xb3,0x15,0x29,0x47,0xe8,0x51,0x2c,0x8e,0x96,0xef,0xd7,0xd4,0x90,0x45,0xb2,0x90,0x10,0x70,0xb0,0xbe };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x71,0xcd,0x66,0xb3,0xb3,0x55,0x3b,0x6a,0xa6,0x32,0xc3,0x38,0xa3,0x07,0xe1,0x1a };
    const uint8_t CIPHERTEXT[] = { 0x38,0xbf,0xea,0x7e,0x1e,0xec,0xe7,0x41,0xeb,0x6a,0x96,0x01,0x60,0x51,0x29,0xdd };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-73", "[ECB][MCT][256][DECRYPT][n73]") {
    const uint8_t KEY[] = { 0xb9,0x63,0xbf,0xe1,0xc5,0x13,0xf0,0xdb,0xa7,0xe2,0x4b,0x5c,0xfa,0x15,0x35,0xa3,0x99,0x9c,0x4a,0x3d,0x25,0xba,0xec,0xbe,0x36,0x77,0x71,0xa8,0xb3,0x77,0x51,0xa4 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x34,0xc2,0x97,0x2d,0x43,0xe5,0x9e,0xb0,0xc4,0x4b,0x7b,0x69,0xa5,0x40,0xe7,0xde };
    const uint8_t CIPHERTEXT[] = { 0x71,0xcd,0x66,0xb3,0xb3,0x55,0x3b,0x6a,0xa6,0x32,0xc3,0x38,0xa3,0x07,0xe1,0x1a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-74", "[ECB][MCT][256][DECRYPT][n74]") {
    const uint8_t KEY[] = { 0x23,0x45,0x8e,0x2a,0x43,0x32,0xce,0x00,0xe7,0x96,0x7a,0x43,0x8c,0xd8,0x64,0x48,0xad,0x5e,0xdd,0x10,0x66,0x5f,0x72,0x0e,0xf2,0x3c,0x0a,0xc1,0x16,0x37,0xb6,0x7a };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x89,0x88,0xb8,0x78,0xd0,0xc6,0xa8,0x4b,0x62,0x62,0x35,0x1e,0x03,0x3f,0xb1,0xb7 };
    const uint8_t CIPHERTEXT[] = { 0x34,0xc2,0x97,0x2d,0x43,0xe5,0x9e,0xb0,0xc4,0x4b,0x7b,0x69,0xa5,0x40,0xe7,0xde };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-75", "[ECB][MCT][256][DECRYPT][n75]") {
    const uint8_t KEY[] = { 0xe5,0x52,0xb8,0xa0,0xf4,0x74,0xa8,0xda,0x50,0x2e,0x74,0x9e,0x3f,0x06,0x39,0xb1,0x24,0xd6,0x65,0x68,0xb6,0x99,0xda,0x45,0x90,0x5e,0x3f,0xdf,0x15,0x08,0x07,0xcd };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x01,0x0e,0x24,0xd0,0x1c,0x37,0xed,0xca,0x12,0x74,0x84,0xc8,0xd8,0x13,0x77,0x72 };
    const uint8_t CIPHERTEXT[] = { 0x89,0x88,0xb8,0x78,0xd0,0xc6,0xa8,0x4b,0x62,0x62,0x35,0x1e,0x03,0x3f,0xb1,0xb7 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-76", "[ECB][MCT][256][DECRYPT][n76]") {
    const uint8_t KEY[] = { 0x65,0xa0,0x64,0x5d,0xd9,0x71,0xbd,0xb3,0xb0,0xd3,0xa0,0x79,0xef,0x96,0xf3,0xa9,0x25,0xd8,0x41,0xb8,0xaa,0xae,0x37,0x8f,0x82,0x2a,0xbb,0x17,0xcd,0x1b,0x70,0xbf };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x6c,0x7b,0x2e,0x83,0x63,0x0a,0x8c,0x8b,0x62,0x19,0x83,0x92,0x97,0xd7,0xc6,0x47 };
    const uint8_t CIPHERTEXT[] = { 0x01,0x0e,0x24,0xd0,0x1c,0x37,0xed,0xca,0x12,0x74,0x84,0xc8,0xd8,0x13,0x77,0x72 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-77", "[ECB][MCT][256][DECRYPT][n77]") {
    const uint8_t KEY[] = { 0x98,0x67,0xd5,0x5a,0xe9,0xf5,0x6a,0x03,0xc4,0x35,0xf4,0xb2,0x5f,0x2e,0xee,0x2c,0x49,0xa3,0x6f,0x3b,0xc9,0xa4,0xbb,0x04,0xe0,0x33,0x38,0x85,0x5a,0xcc,0xb6,0xf8 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xcc,0xba,0x81,0x43,0x5e,0xcf,0x16,0x2f,0x70,0xd3,0x0b,0x31,0x63,0xcb,0x38,0x58 };
    const uint8_t CIPHERTEXT[] = { 0x6c,0x7b,0x2e,0x83,0x63,0x0a,0x8c,0x8b,0x62,0x19,0x83,0x92,0x97,0xd7,0xc6,0x47 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-78", "[ECB][MCT][256][DECRYPT][n78]") {
    const uint8_t KEY[] = { 0xe4,0xa3,0xad,0xdb,0x68,0x3b,0xbe,0x85,0xed,0x84,0xb3,0xce,0x04,0x4b,0xcc,0x53,0x85,0x19,0xee,0x78,0x97,0x6b,0xad,0x2b,0x90,0xe0,0x33,0xb4,0x39,0x07,0x8e,0xa0 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xa0,0x57,0x5b,0xc9,0xb8,0x93,0x1f,0x34,0xcd,0x60,0x72,0xe2,0x01,0x5e,0x73,0x31 };
    const uint8_t CIPHERTEXT[] = { 0xcc,0xba,0x81,0x43,0x5e,0xcf,0x16,0x2f,0x70,0xd3,0x0b,0x31,0x63,0xcb,0x38,0x58 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-79", "[ECB][MCT][256][DECRYPT][n79]") {
    const uint8_t KEY[] = { 0x6f,0x54,0x30,0x88,0xbf,0x24,0x57,0x7d,0x55,0xa6,0x85,0xe3,0x63,0x7d,0x85,0xe8,0x25,0x4e,0xb5,0xb1,0x2f,0xf8,0xb2,0x1f,0x5d,0x80,0x41,0x56,0x38,0x59,0xfd,0x91 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xa4,0x40,0x46,0xa8,0x75,0x74,0xe6,0xd3,0xe6,0xc6,0x44,0x6f,0xb3,0xc3,0x24,0xbc };
    const uint8_t CIPHERTEXT[] = { 0xa0,0x57,0x5b,0xc9,0xb8,0x93,0x1f,0x34,0xcd,0x60,0x72,0xe2,0x01,0x5e,0x73,0x31 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-80", "[ECB][MCT][256][DECRYPT][n80]") {
    const uint8_t KEY[] = { 0x5f,0xff,0x67,0x1c,0xa2,0x4c,0x3b,0x24,0x1d,0xdb,0x92,0x76,0x1f,0x02,0xdf,0xe3,0x81,0x0e,0xf3,0x19,0x5a,0x8c,0x54,0xcc,0xbb,0x46,0x05,0x39,0x8b,0x9a,0xd9,0x2d };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xef,0x6a,0xbb,0x8a,0xe0,0x07,0xb7,0x30,0xbe,0x45,0xaa,0x85,0xe3,0x9f,0x36,0x2d };
    const uint8_t CIPHERTEXT[] = { 0xa4,0x40,0x46,0xa8,0x75,0x74,0xe6,0xd3,0xe6,0xc6,0x44,0x6f,0xb3,0xc3,0x24,0xbc };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-81", "[ECB][MCT][256][DECRYPT][n81]") {
    const uint8_t KEY[] = { 0xdb,0x89,0x7d,0x48,0xa3,0x17,0xf6,0x64,0x12,0xa8,0xc5,0x21,0x11,0xc3,0xf3,0xb0,0x6e,0x64,0x48,0x93,0xba,0x8b,0xe3,0xfc,0x05,0x03,0xaf,0xbc,0x68,0x05,0xef,0x00 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xe5,0xbd,0x2e,0xdf,0xb7,0xe5,0x63,0xf6,0xcd,0x86,0xda,0x75,0x7c,0x4c,0x37,0x0f };
    const uint8_t CIPHERTEXT[] = { 0xef,0x6a,0xbb,0x8a,0xe0,0x07,0xb7,0x30,0xbe,0x45,0xaa,0x85,0xe3,0x9f,0x36,0x2d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-82", "[ECB][MCT][256][DECRYPT][n82]") {
    const uint8_t KEY[] = { 0x78,0xae,0xc1,0xda,0x8e,0x8e,0x79,0x00,0x7a,0xf1,0x2c,0x05,0xd8,0x00,0xa1,0x8d,0x8b,0xd9,0x66,0x4c,0x0d,0x6e,0x80,0x0a,0xc8,0x85,0x75,0xc9,0x14,0x49,0xd8,0x0f };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x33,0xca,0xa2,0x67,0xa6,0x4f,0xb3,0xca,0xc2,0x10,0x27,0x1b,0xb8,0xf2,0x53,0x69 };
    const uint8_t CIPHERTEXT[] = { 0xe5,0xbd,0x2e,0xdf,0xb7,0xe5,0x63,0xf6,0xcd,0x86,0xda,0x75,0x7c,0x4c,0x37,0x0f };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-83", "[ECB][MCT][256][DECRYPT][n83]") {
    const uint8_t KEY[] = { 0x2c,0x3e,0x53,0x87,0xa5,0x1a,0xdd,0xb0,0xb7,0x78,0x9e,0xf0,0x28,0x91,0x09,0xb3,0xb8,0x13,0xc4,0x2b,0xab,0x21,0x33,0xc0,0x0a,0x95,0x52,0xd2,0xac,0xbb,0x8b,0x66 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x27,0xbb,0x26,0x99,0x0c,0xa5,0xe1,0x2d,0x38,0x7b,0xd6,0x59,0xcb,0x7e,0x78,0x60 };
    const uint8_t CIPHERTEXT[] = { 0x33,0xca,0xa2,0x67,0xa6,0x4f,0xb3,0xca,0xc2,0x10,0x27,0x1b,0xb8,0xf2,0x53,0x69 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-84", "[ECB][MCT][256][DECRYPT][n84]") {
    const uint8_t KEY[] = { 0x85,0x68,0x5f,0xe6,0x99,0x6d,0x51,0x4e,0x59,0x28,0xd7,0x19,0x6f,0x41,0xb5,0xd2,0x9f,0xa8,0xe2,0xb2,0xa7,0x84,0xd2,0xed,0x32,0xee,0x84,0x8b,0x67,0xc5,0xf3,0x06 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xd8,0x66,0xac,0xe7,0x19,0x16,0xe0,0x0c,0x15,0x59,0xbb,0xa4,0x14,0x93,0x80,0xa0 };
    const uint8_t CIPHERTEXT[] = { 0x27,0xbb,0x26,0x99,0x0c,0xa5,0xe1,0x2d,0x38,0x7b,0xd6,0x59,0xcb,0x7e,0x78,0x60 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-85", "[ECB][MCT][256][DECRYPT][n85]") {
    const uint8_t KEY[] = { 0x82,0xab,0xcc,0x9a,0x00,0xba,0xe5,0x50,0x87,0xcf,0x5d,0x87,0x41,0x3f,0x09,0x55,0x47,0xce,0x4e,0x55,0xbe,0x92,0x32,0xe1,0x27,0xb7,0x3f,0x2f,0x73,0x56,0x73,0xa6 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x8a,0x4d,0x6a,0x0a,0xf8,0x48,0x8a,0x82,0xa0,0xc3,0x13,0x32,0xdb,0x3e,0x36,0xde };
    const uint8_t CIPHERTEXT[] = { 0xd8,0x66,0xac,0xe7,0x19,0x16,0xe0,0x0c,0x15,0x59,0xbb,0xa4,0x14,0x93,0x80,0xa0 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-86", "[ECB][MCT][256][DECRYPT][n86]") {
    const uint8_t KEY[] = { 0x81,0xd9,0x83,0xce,0x59,0x41,0x3e,0x84,0xd7,0xaf,0x45,0x58,0xd2,0xe3,0x94,0x1c,0xcd,0x83,0x24,0x5f,0x46,0xda,0xb8,0x63,0x87,0x74,0x2c,0x1d,0xa8,0x68,0x45,0x78 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x05,0xf6,0xff,0x37,0x8b,0x83,0x7c,0xd3,0x75,0xcd,0xdf,0xae,0x79,0xec,0x2a,0x9d };
    const uint8_t CIPHERTEXT[] = { 0x8a,0x4d,0x6a,0x0a,0xf8,0x48,0x8a,0x82,0xa0,0xc3,0x13,0x32,0xdb,0x3e,0x36,0xde };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-87", "[ECB][MCT][256][DECRYPT][n87]") {
    const uint8_t KEY[] = { 0xbb,0xe6,0xd0,0xd1,0x3a,0x6b,0x14,0x6b,0xb2,0x3d,0xb6,0x88,0x5b,0xa6,0x64,0x87,0xc8,0x75,0xdb,0x68,0xcd,0x59,0xc4,0xb0,0xf2,0xb9,0xf3,0xb3,0xd1,0x84,0x6f,0xe5 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xb7,0x06,0xbd,0xb4,0x01,0x9d,0x60,0x4c,0xc3,0x5f,0xaa,0x07,0x19,0x7c,0x31,0x8d };
    const uint8_t CIPHERTEXT[] = { 0x05,0xf6,0xff,0x37,0x8b,0x83,0x7c,0xd3,0x75,0xcd,0xdf,0xae,0x79,0xec,0x2a,0x9d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-88", "[ECB][MCT][256][DECRYPT][n88]") {
    const uint8_t KEY[] = { 0x80,0x92,0xdf,0x66,0x73,0xb2,0xb7,0x77,0x83,0xf2,0xba,0x73,0xc2,0x2e,0x8d,0x3c,0x7f,0x73,0x66,0xdc,0xcc,0xc4,0xa4,0xfc,0x31,0xe6,0x59,0xb4,0xc8,0xf8,0x5e,0x68 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xb2,0x63,0x54,0xbc,0x77,0xd3,0xce,0x16,0x90,0x9c,0xa5,0x05,0xd2,0x38,0x1e,0x4c };
    const uint8_t CIPHERTEXT[] = { 0xb7,0x06,0xbd,0xb4,0x01,0x9d,0x60,0x4c,0xc3,0x5f,0xaa,0x07,0x19,0x7c,0x31,0x8d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-89", "[ECB][MCT][256][DECRYPT][n89]") {
    const uint8_t KEY[] = { 0x31,0x18,0xfc,0x57,0xb9,0x36,0x77,0xaf,0x8e,0x14,0xc1,0xb5,0x96,0x1b,0x76,0xf3,0xcd,0x10,0x32,0x60,0xbb,0x17,0x6a,0xea,0xa1,0x7a,0xfc,0xb1,0x1a,0xc0,0x40,0x24 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x15,0x15,0xef,0x6a,0x25,0xcf,0x39,0x43,0xea,0xda,0xdc,0x36,0xa0,0x29,0x19,0x4a };
    const uint8_t CIPHERTEXT[] = { 0xb2,0x63,0x54,0xbc,0x77,0xd3,0xce,0x16,0x90,0x9c,0xa5,0x05,0xd2,0x38,0x1e,0x4c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-90", "[ECB][MCT][256][DECRYPT][n90]") {
    const uint8_t KEY[] = { 0xc4,0xbd,0xe4,0xa0,0xc5,0xf8,0x03,0x29,0xbe,0x6d,0xd5,0x15,0xf5,0xbf,0x6d,0xab,0xd8,0x05,0xdd,0x0a,0x9e,0xd8,0x53,0xa9,0x4b,0xa0,0x20,0x87,0xba,0xe9,0x59,0x6e };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x7b,0x4a,0xd9,0x46,0xdf,0xb5,0x9c,0x80,0xb1,0xdc,0x5c,0xed,0xb2,0xfa,0x87,0xa0 };
    const uint8_t CIPHERTEXT[] = { 0x15,0x15,0xef,0x6a,0x25,0xcf,0x39,0x43,0xea,0xda,0xdc,0x36,0xa0,0x29,0x19,0x4a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-91", "[ECB][MCT][256][DECRYPT][n91]") {
    const uint8_t KEY[] = { 0x80,0xb4,0x7f,0x91,0x26,0xb0,0xb1,0xf5,0xab,0x40,0x8b,0xb9,0xea,0x5f,0x34,0x9a,0xa3,0x4f,0x04,0x4c,0x41,0x6d,0xcf,0x29,0xfa,0x7c,0x7c,0x6a,0x08,0x13,0xde,0xce };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xfa,0x10,0xa5,0x3e,0x14,0xcd,0xe5,0xef,0x1e,0x9a,0x8a,0x56,0x92,0x84,0x7a,0xa5 };
    const uint8_t CIPHERTEXT[] = { 0x7b,0x4a,0xd9,0x46,0xdf,0xb5,0x9c,0x80,0xb1,0xdc,0x5c,0xed,0xb2,0xfa,0x87,0xa0 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-92", "[ECB][MCT][256][DECRYPT][n92]") {
    const uint8_t KEY[] = { 0x86,0xa4,0x39,0x39,0xc8,0xcd,0x24,0x3f,0x7f,0xf2,0xa9,0x65,0x85,0x24,0x37,0x3b,0x59,0x5f,0xa1,0x72,0x55,0xa0,0x2a,0xc6,0xe4,0xe6,0xf6,0x3c,0x9a,0x97,0xa4,0x6b };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x4c,0x9b,0xed,0x07,0x30,0x8a,0xbc,0xd0,0xb0,0x92,0x65,0xb5,0xef,0xbe,0x30,0x1c };
    const uint8_t CIPHERTEXT[] = { 0xfa,0x10,0xa5,0x3e,0x14,0xcd,0xe5,0xef,0x1e,0x9a,0x8a,0x56,0x92,0x84,0x7a,0xa5 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-93", "[ECB][MCT][256][DECRYPT][n93]") {
    const uint8_t KEY[] = { 0x74,0xa8,0xf0,0x2a,0x15,0x28,0x51,0x53,0xe0,0xae,0x16,0x0f,0xbd,0xdc,0xf6,0xbf,0x15,0xc4,0x4c,0x75,0x65,0x2a,0x96,0x16,0x54,0x74,0x93,0x89,0x75,0x29,0x94,0x77 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x75,0xb7,0x49,0x6c,0x42,0x80,0x9a,0x3a,0x59,0x2a,0xcb,0xd8,0xe0,0x69,0x26,0x9e };
    const uint8_t CIPHERTEXT[] = { 0x4c,0x9b,0xed,0x07,0x30,0x8a,0xbc,0xd0,0xb0,0x92,0x65,0xb5,0xef,0xbe,0x30,0x1c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-94", "[ECB][MCT][256][DECRYPT][n94]") {
    const uint8_t KEY[] = { 0x29,0x3b,0x40,0xa2,0xf7,0x0c,0xc2,0xc4,0x26,0x25,0x54,0x66,0x3f,0xb6,0xf0,0x98,0x60,0x73,0x05,0x19,0x27,0xaa,0x0c,0x2c,0x0d,0x5e,0x58,0x51,0x95,0x40,0xb2,0xe9 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x2d,0xbc,0x01,0x18,0x5a,0xf7,0xe0,0x84,0xd9,0x05,0x78,0x46,0x8b,0x6b,0x10,0xef };
    const uint8_t CIPHERTEXT[] = { 0x75,0xb7,0x49,0x6c,0x42,0x80,0x9a,0x3a,0x59,0x2a,0xcb,0xd8,0xe0,0x69,0x26,0x9e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-95", "[ECB][MCT][256][DECRYPT][n95]") {
    const uint8_t KEY[] = { 0xb0,0x4d,0x4f,0x4e,0xb7,0x08,0xee,0xf8,0x6c,0x5b,0x6b,0x8e,0x08,0xa6,0x65,0x08,0x4d,0xcf,0x04,0x01,0x7d,0x5d,0xec,0xa8,0xd4,0x5b,0x20,0x17,0x1e,0x2b,0xa2,0x06 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xc9,0x5b,0x3a,0x9f,0x68,0x9c,0x9d,0xce,0x49,0x95,0xc2,0x4f,0x72,0xdd,0x51,0x62 };
    const uint8_t CIPHERTEXT[] = { 0x2d,0xbc,0x01,0x18,0x5a,0xf7,0xe0,0x84,0xd9,0x05,0x78,0x46,0x8b,0x6b,0x10,0xef };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-96", "[ECB][MCT][256][DECRYPT][n96]") {
    const uint8_t KEY[] = { 0x7c,0xb9,0xf7,0x21,0x18,0x15,0xe0,0xcb,0x48,0xb7,0x12,0x86,0xf8,0x4f,0x80,0xa1,0x84,0x94,0x3e,0x9e,0x15,0xc1,0x71,0x66,0x9d,0xce,0xe2,0x58,0x6c,0xf6,0xf3,0x64 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x61,0x6e,0x55,0xc3,0xbf,0x11,0x3e,0x2c,0x18,0xca,0xe3,0xc6,0x1b,0x7e,0xb7,0xd1 };
    const uint8_t CIPHERTEXT[] = { 0xc9,0x5b,0x3a,0x9f,0x68,0x9c,0x9d,0xce,0x49,0x95,0xc2,0x4f,0x72,0xdd,0x51,0x62 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-97", "[ECB][MCT][256][DECRYPT][n97]") {
    const uint8_t KEY[] = { 0xb3,0xcd,0xb4,0x6c,0xf9,0x2a,0xa0,0xb9,0x6e,0x87,0x21,0x2b,0xc6,0x50,0xd5,0xe5,0xe5,0xfa,0x6b,0x5d,0xaa,0xd0,0x4f,0x4a,0x85,0x04,0x01,0x9e,0x77,0x88,0x44,0xb5 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x87,0xe8,0xb8,0x07,0x67,0xeb,0xbd,0xba,0xd7,0x5c,0xb9,0x4f,0x4c,0xb5,0x4f,0x3b };
    const uint8_t CIPHERTEXT[] = { 0x61,0x6e,0x55,0xc3,0xbf,0x11,0x3e,0x2c,0x18,0xca,0xe3,0xc6,0x1b,0x7e,0xb7,0xd1 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-98", "[ECB][MCT][256][DECRYPT][n98]") {
    const uint8_t KEY[] = { 0x51,0x2c,0x2a,0x38,0x21,0xeb,0x53,0xaf,0x61,0x31,0x41,0xc7,0x1e,0x10,0x76,0x65,0x62,0x12,0xd3,0x5a,0xcd,0x3b,0xf2,0xf0,0x52,0x58,0xb8,0xd1,0x3b,0x3d,0x0b,0x8e };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xc8,0x3e,0x20,0xe1,0x8f,0x2b,0x14,0x57,0x78,0x89,0x54,0xb4,0x9f,0xd8,0x43,0x07 };
    const uint8_t CIPHERTEXT[] = { 0x87,0xe8,0xb8,0x07,0x67,0xeb,0xbd,0xba,0xd7,0x5c,0xb9,0x4f,0x4c,0xb5,0x4f,0x3b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT256-DECRYPT-99", "[ECB][MCT][256][DECRYPT][n99]") {
    const uint8_t KEY[] = { 0x99,0x77,0xc9,0x85,0x74,0x5b,0xc3,0x39,0x54,0xa2,0xce,0x89,0x8b,0xc8,0xfe,0xbd,0xaa,0x2c,0xf3,0xbb,0x42,0x10,0xe6,0xa7,0x2a,0xd1,0xec,0x65,0xa4,0xe5,0x48,0x89 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xe3,0xd3,0x86,0x8f,0x57,0x8c,0xaf,0x34,0xe3,0x64,0x45,0xbf,0x14,0xce,0xfc,0x68 };
    const uint8_t CIPHERTEXT[] = { 0xc8,0x3e,0x20,0xe1,0x8f,0x2b,0x14,0x57,0x78,0x89,0x54,0xb4,0x9f,0xd8,0x43,0x07 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

