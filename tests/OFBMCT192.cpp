#include "rijndael.h"
#include "catch.hpp"
#include <cstring>

static inline std::string buf2str(const uint8_t *buf, size_t len) {
    std::ostringstream ss; ss << std::hex << std::setfill('0');
    for (size_t i = 0; i < len; ++i) {
        ss << std::setw(2) << static_cast<int>(buf[i]) << ' ';
    }
    return ss.str();
}

TEST_CASE("OFBMCT192-ENCRYPT-0", "[OFB][MCT][192][ENCRYPT][n0]") {
    const uint8_t KEY[] = { 0x32,0x64,0xe4,0x8d,0xc0,0x8e,0x22,0xe3,0xd8,0x3f,0x66,0x4c,0x3a,0x81,0xa7,0xb9,0xa4,0x6d,0xa5,0xb7,0x00,0x93,0xc2,0xf2 };
    const uint8_t IV[] = { 0xcd,0x5d,0xb2,0x93,0x83,0x6a,0x44,0xf5,0x56,0x47,0xeb,0x88,0x44,0xcc,0xad,0x8d };
    const uint8_t PLAINTEXT[] = { 0xbe,0x25,0x38,0x5d,0x44,0x3c,0x3e,0xab,0x7c,0x6f,0x4f,0xb4,0xea,0xc7,0xa5,0xdb };
    const uint8_t CIPHERTEXT[] = { 0x39,0x46,0x55,0xa8,0x78,0xac,0x85,0xfe,0xe1,0x08,0xf3,0xcb,0x5c,0xbb,0x43,0x50 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-1", "[OFB][MCT][192][ENCRYPT][n1]") {
    const uint8_t KEY[] = { 0x9c,0x69,0xde,0xc2,0xe4,0xf2,0x95,0xf6,0xe1,0x79,0x33,0xe4,0x42,0x2d,0x22,0x47,0x45,0x65,0x56,0x7c,0x5c,0x28,0x81,0xa2 };
    const uint8_t IV[] = { 0x39,0x46,0x55,0xa8,0x78,0xac,0x85,0xfe,0xe1,0x08,0xf3,0xcb,0x5c,0xbb,0x43,0x50 };
    const uint8_t PLAINTEXT[] = { 0x83,0x94,0x06,0x6d,0x8c,0x2f,0xe4,0xe9,0xae,0x0d,0x3a,0x4f,0x24,0x7c,0xb7,0x15 };
    const uint8_t CIPHERTEXT[] = { 0x4d,0x47,0xde,0x0b,0xa3,0x7a,0x15,0xfd,0x68,0xa4,0xb0,0x01,0xbf,0xda,0x46,0x64 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-2", "[OFB][MCT][192][ENCRYPT][n2]") {
    const uint8_t KEY[] = { 0xf5,0x70,0x47,0x96,0x87,0xc5,0xd9,0xd1,0xac,0x3e,0xed,0xef,0xe1,0x57,0x37,0xba,0x2d,0xc1,0xe6,0x7d,0xe3,0xf2,0xc7,0xc6 };
    const uint8_t IV[] = { 0x4d,0x47,0xde,0x0b,0xa3,0x7a,0x15,0xfd,0x68,0xa4,0xb0,0x01,0xbf,0xda,0x46,0x64 };
    const uint8_t PLAINTEXT[] = { 0x66,0x89,0x95,0x95,0x9b,0x23,0xe9,0x5e,0x69,0x19,0x99,0x54,0x63,0x37,0x4c,0x27 };
    const uint8_t CIPHERTEXT[] = { 0x64,0x58,0xbe,0xa0,0x8e,0x49,0xdd,0x6c,0x03,0x5a,0x96,0xce,0xbd,0xc0,0x0b,0xff };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-3", "[OFB][MCT][192][ENCRYPT][n3]") {
    const uint8_t KEY[] = { 0x80,0x39,0x60,0x03,0xad,0x17,0x35,0x89,0xc8,0x66,0x53,0x4f,0x6f,0x1e,0xea,0xd6,0x2e,0x9b,0x70,0xb3,0x5e,0x32,0xcc,0x39 };
    const uint8_t IV[] = { 0x64,0x58,0xbe,0xa0,0x8e,0x49,0xdd,0x6c,0x03,0x5a,0x96,0xce,0xbd,0xc0,0x0b,0xff };
    const uint8_t PLAINTEXT[] = { 0x27,0xb7,0x39,0x73,0xe9,0xf8,0xa8,0x8e,0x75,0x49,0x27,0x95,0x2a,0xd2,0xec,0x58 };
    const uint8_t CIPHERTEXT[] = { 0xda,0x50,0xb0,0x27,0x06,0x7a,0x83,0xc1,0xfc,0x14,0xaf,0xbd,0x90,0xaa,0x4d,0x1e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-4", "[OFB][MCT][192][ENCRYPT][n4]") {
    const uint8_t KEY[] = { 0xd4,0x88,0x5d,0xae,0x38,0xcc,0xe2,0xd4,0x12,0x36,0xe3,0x68,0x69,0x64,0x69,0x17,0xd2,0x8f,0xdf,0x0e,0xce,0x98,0x81,0x27 };
    const uint8_t IV[] = { 0xda,0x50,0xb0,0x27,0x06,0x7a,0x83,0xc1,0xfc,0x14,0xaf,0xbd,0x90,0xaa,0x4d,0x1e };
    const uint8_t PLAINTEXT[] = { 0xce,0x1a,0x4c,0x3c,0x1e,0xc8,0x3d,0x2c,0x54,0xb1,0x3d,0xad,0x95,0xdb,0xd7,0x5d };
    const uint8_t CIPHERTEXT[] = { 0x24,0x8d,0xdb,0x2b,0x85,0xe5,0x22,0xb2,0x0b,0xe3,0x7b,0x4e,0xfc,0xea,0x0b,0x52 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-5", "[OFB][MCT][192][ENCRYPT][n5]") {
    const uint8_t KEY[] = { 0xa7,0x88,0xc7,0x7e,0x0c,0x3a,0xde,0xb5,0x36,0xbb,0x38,0x43,0xec,0x81,0x4b,0xa5,0xd9,0x6c,0xa4,0x40,0x32,0x72,0x8a,0x75 };
    const uint8_t IV[] = { 0x24,0x8d,0xdb,0x2b,0x85,0xe5,0x22,0xb2,0x0b,0xe3,0x7b,0x4e,0xfc,0xea,0x0b,0x52 };
    const uint8_t PLAINTEXT[] = { 0xd8,0x1b,0xe4,0xbb,0xe7,0x1f,0xcb,0x52,0x73,0x00,0x9a,0xd0,0x34,0xf6,0x3c,0x61 };
    const uint8_t CIPHERTEXT[] = { 0x44,0x18,0x4d,0x40,0xac,0x15,0x3c,0x77,0x60,0xf2,0x9a,0xe3,0x6b,0x2a,0x34,0xbe };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-6", "[OFB][MCT][192][ENCRYPT][n6]") {
    const uint8_t KEY[] = { 0xa7,0x71,0xa8,0x4f,0x13,0xd0,0xbe,0xca,0x72,0xa3,0x75,0x03,0x40,0x94,0x77,0xd2,0xb9,0x9e,0x3e,0xa3,0x59,0x58,0xbe,0xcb };
    const uint8_t IV[] = { 0x44,0x18,0x4d,0x40,0xac,0x15,0x3c,0x77,0x60,0xf2,0x9a,0xe3,0x6b,0x2a,0x34,0xbe };
    const uint8_t PLAINTEXT[] = { 0xb6,0x27,0x8b,0x72,0x53,0x51,0xd7,0x39,0x00,0xf9,0x6f,0x31,0x1f,0xea,0x60,0x7f };
    const uint8_t CIPHERTEXT[] = { 0x83,0xb2,0x15,0x97,0xf9,0x0c,0x62,0x8c,0xd6,0x26,0xe6,0x3f,0xd7,0xaa,0xab,0x5b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-7", "[OFB][MCT][192][ENCRYPT][n7]") {
    const uint8_t KEY[] = { 0x46,0x28,0x15,0xc7,0x1f,0xeb,0xfe,0x77,0xf1,0x11,0x60,0x94,0xb9,0x98,0x15,0x5e,0x6f,0xb8,0xd8,0x9c,0x8e,0xf2,0x15,0x90 };
    const uint8_t IV[] = { 0x83,0xb2,0x15,0x97,0xf9,0x0c,0x62,0x8c,0xd6,0x26,0xe6,0x3f,0xd7,0xaa,0xab,0x5b };
    const uint8_t PLAINTEXT[] = { 0xcc,0x18,0xb6,0xd0,0xbc,0x58,0xd8,0x88,0xe1,0x59,0xbd,0x88,0x0c,0x3b,0x40,0xbd };
    const uint8_t CIPHERTEXT[] = { 0x7f,0x3f,0x7a,0x07,0xd4,0x4b,0x28,0x01,0x9f,0x90,0x48,0x49,0x50,0xb4,0xf7,0x1d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-8", "[OFB][MCT][192][ENCRYPT][n8]") {
    const uint8_t KEY[] = { 0x28,0xe4,0xfd,0x50,0x79,0xb8,0x1a,0x6f,0x8e,0x2e,0x1a,0x93,0x6d,0xd3,0x3d,0x5f,0xf0,0x28,0x90,0xd5,0xde,0x46,0xe2,0x8d };
    const uint8_t IV[] = { 0x7f,0x3f,0x7a,0x07,0xd4,0x4b,0x28,0x01,0x9f,0x90,0x48,0x49,0x50,0xb4,0xf7,0x1d };
    const uint8_t PLAINTEXT[] = { 0xcd,0x62,0x25,0x88,0x63,0xc2,0xf4,0xb6,0x6e,0xcc,0xe8,0x97,0x66,0x53,0xe4,0x18 };
    const uint8_t CIPHERTEXT[] = { 0x89,0x6f,0x0e,0x10,0xa8,0xa8,0x15,0x7e,0x2e,0x23,0x59,0x41,0x13,0x1f,0x4e,0x7d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-9", "[OFB][MCT][192][ENCRYPT][n9]") {
    const uint8_t KEY[] = { 0x0a,0x21,0xc2,0x31,0xb8,0xe6,0x10,0x1b,0x07,0x41,0x14,0x83,0xc5,0x7b,0x28,0x21,0xde,0x0b,0xc9,0x94,0xcd,0x59,0xac,0xf0 };
    const uint8_t IV[] = { 0x89,0x6f,0x0e,0x10,0xa8,0xa8,0x15,0x7e,0x2e,0x23,0x59,0x41,0x13,0x1f,0x4e,0x7d };
    const uint8_t PLAINTEXT[] = { 0xba,0x9f,0xa4,0x27,0xd3,0x43,0x5f,0x1e,0x22,0xc5,0x3f,0x61,0xc1,0x5e,0x0a,0x74 };
    const uint8_t CIPHERTEXT[] = { 0xd7,0xfb,0xb3,0xe3,0xb1,0x0d,0xe4,0xd2,0xb4,0x49,0xe9,0x75,0x5b,0x46,0x9a,0x66 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-10", "[OFB][MCT][192][ENCRYPT][n10]") {
    const uint8_t KEY[] = { 0xa0,0xd1,0xad,0xc7,0xff,0x09,0xa4,0xf7,0xd0,0xba,0xa7,0x60,0x74,0x76,0xcc,0xf3,0x6a,0x42,0x20,0xe1,0x96,0x1f,0x36,0x96 };
    const uint8_t IV[] = { 0xd7,0xfb,0xb3,0xe3,0xb1,0x0d,0xe4,0xd2,0xb4,0x49,0xe9,0x75,0x5b,0x46,0x9a,0x66 };
    const uint8_t PLAINTEXT[] = { 0x44,0xec,0x7e,0x0e,0x26,0xcc,0xb2,0x99,0xaa,0xf0,0x6f,0xf6,0x47,0xef,0xb4,0xec };
    const uint8_t CIPHERTEXT[] = { 0xbf,0x13,0xff,0x4c,0xc3,0xd1,0x6d,0x20,0xdf,0x6c,0xe5,0x45,0x8c,0xe8,0x7b,0xdd };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-11", "[OFB][MCT][192][ENCRYPT][n11]") {
    const uint8_t KEY[] = { 0x26,0xe5,0xbf,0xb5,0x0e,0x80,0xe3,0x2f,0x6f,0xa9,0x58,0x2c,0xb7,0xa7,0xa1,0xd3,0xb5,0x2e,0xc5,0xa4,0x1a,0xf7,0x4d,0x4b };
    const uint8_t IV[] = { 0xbf,0x13,0xff,0x4c,0xc3,0xd1,0x6d,0x20,0xdf,0x6c,0xe5,0x45,0x8c,0xe8,0x7b,0xdd };
    const uint8_t PLAINTEXT[] = { 0xb2,0xfe,0x01,0xb4,0x70,0xca,0xfa,0xc0,0x86,0x34,0x12,0x72,0xf1,0x89,0x47,0xd8 };
    const uint8_t CIPHERTEXT[] = { 0x04,0x09,0x97,0x43,0x6c,0x37,0x7d,0x16,0x98,0xae,0x3f,0x6c,0xe2,0x11,0x6f,0xa9 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-12", "[OFB][MCT][192][ENCRYPT][n12]") {
    const uint8_t KEY[] = { 0xe5,0xe2,0xc6,0x38,0x7d,0x07,0x48,0x01,0x6b,0xa0,0xcf,0x6f,0xdb,0x90,0xdc,0xc5,0x2d,0x80,0xfa,0xc8,0xf8,0xe6,0x22,0xe2 };
    const uint8_t IV[] = { 0x04,0x09,0x97,0x43,0x6c,0x37,0x7d,0x16,0x98,0xae,0x3f,0x6c,0xe2,0x11,0x6f,0xa9 };
    const uint8_t PLAINTEXT[] = { 0xe0,0x81,0xb6,0x09,0xec,0x59,0xc3,0x26,0xc3,0x07,0x79,0x8d,0x73,0x87,0xab,0x2e };
    const uint8_t CIPHERTEXT[] = { 0xed,0x36,0x44,0x18,0x63,0x45,0xf4,0xab,0x12,0x7d,0x8f,0xf4,0x3f,0x05,0x7d,0x9e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-13", "[OFB][MCT][192][ENCRYPT][n13]") {
    const uint8_t KEY[] = { 0x02,0x3e,0x65,0xf7,0xec,0x56,0x43,0xa9,0x86,0x96,0x8b,0x77,0xb8,0xd5,0x28,0x6e,0x3f,0xfd,0x75,0x3c,0xc7,0xe3,0x5f,0x7c };
    const uint8_t IV[] = { 0xed,0x36,0x44,0x18,0x63,0x45,0xf4,0xab,0x12,0x7d,0x8f,0xf4,0x3f,0x05,0x7d,0x9e };
    const uint8_t PLAINTEXT[] = { 0xed,0x09,0xff,0xfd,0xcb,0x51,0x33,0x31,0xe7,0xdc,0xa3,0xcf,0x91,0x51,0x0b,0xa8 };
    const uint8_t CIPHERTEXT[] = { 0x88,0xf4,0x3a,0x88,0x83,0xfd,0x74,0x09,0xab,0xbb,0xa2,0xf5,0x00,0xd1,0xe9,0xdd };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-14", "[OFB][MCT][192][ENCRYPT][n14]") {
    const uint8_t KEY[] = { 0xeb,0x72,0x3d,0x1d,0xd5,0x3c,0x04,0x99,0x0e,0x62,0xb1,0xff,0x3b,0x28,0x5c,0x67,0x94,0x46,0xd7,0xc9,0xc7,0x32,0xb6,0xa1 };
    const uint8_t IV[] = { 0x88,0xf4,0x3a,0x88,0x83,0xfd,0x74,0x09,0xab,0xbb,0xa2,0xf5,0x00,0xd1,0xe9,0xdd };
    const uint8_t PLAINTEXT[] = { 0xec,0x69,0x16,0xb0,0x89,0x9f,0x3c,0xfe,0xe9,0x4c,0x58,0xea,0x39,0x6a,0x47,0x30 };
    const uint8_t CIPHERTEXT[] = { 0xe2,0x33,0x93,0xad,0xea,0xdc,0x02,0x0d,0x2e,0x06,0x36,0xfa,0xd9,0x08,0xed,0xec };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-15", "[OFB][MCT][192][ENCRYPT][n15]") {
    const uint8_t KEY[] = { 0xd5,0x1f,0xb5,0x5e,0x44,0x53,0x2b,0xbc,0xec,0x51,0x22,0x52,0xd1,0xf4,0x5e,0x6a,0xba,0x40,0xe1,0x33,0x1e,0x3a,0x5b,0x4d };
    const uint8_t IV[] = { 0xe2,0x33,0x93,0xad,0xea,0xdc,0x02,0x0d,0x2e,0x06,0x36,0xfa,0xd9,0x08,0xed,0xec };
    const uint8_t PLAINTEXT[] = { 0xa7,0x2b,0xb3,0xb9,0x51,0x9e,0x62,0x02,0x3e,0x6d,0x88,0x43,0x91,0x6f,0x2f,0x25 };
    const uint8_t CIPHERTEXT[] = { 0x61,0xa3,0x76,0xb2,0xdd,0xa4,0xea,0xce,0x36,0x7d,0xe1,0x04,0x56,0x2e,0x9c,0x47 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-16", "[OFB][MCT][192][ENCRYPT][n16]") {
    const uint8_t KEY[] = { 0xc9,0xa3,0x5d,0xa6,0x62,0x5b,0x4b,0x4b,0x8d,0xf2,0x54,0xe0,0x0c,0x50,0xb4,0xa4,0x8c,0x3d,0x00,0x37,0x48,0x14,0xc7,0x0a };
    const uint8_t IV[] = { 0x61,0xa3,0x76,0xb2,0xdd,0xa4,0xea,0xce,0x36,0x7d,0xe1,0x04,0x56,0x2e,0x9c,0x47 };
    const uint8_t PLAINTEXT[] = { 0x9d,0x7a,0xbd,0x06,0x7e,0xea,0xd5,0xcc,0x1c,0xbc,0xe8,0xf8,0x26,0x08,0x60,0xf7 };
    const uint8_t CIPHERTEXT[] = { 0xdf,0xe2,0x7a,0x85,0xc7,0x6f,0xe8,0xb4,0x17,0x50,0x7d,0xfa,0xda,0x17,0x29,0xf1 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-17", "[OFB][MCT][192][ENCRYPT][n17]") {
    const uint8_t KEY[] = { 0xe1,0x7d,0x40,0x06,0x41,0x2c,0x96,0x24,0x52,0x10,0x2e,0x65,0xcb,0x3f,0x5c,0x10,0x9b,0x6d,0x7d,0xcd,0x92,0x03,0xee,0xfb };
    const uint8_t IV[] = { 0xdf,0xe2,0x7a,0x85,0xc7,0x6f,0xe8,0xb4,0x17,0x50,0x7d,0xfa,0xda,0x17,0x29,0xf1 };
    const uint8_t PLAINTEXT[] = { 0x44,0xaa,0xbb,0x49,0xf2,0xb0,0xf8,0x56,0x28,0xde,0x1d,0xa0,0x23,0x77,0xdd,0x6f };
    const uint8_t CIPHERTEXT[] = { 0xc0,0xf3,0xdc,0x88,0x75,0x8b,0xd9,0x6d,0xfb,0x51,0xdc,0x9c,0x72,0x16,0x97,0x4f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-18", "[OFB][MCT][192][ENCRYPT][n18]") {
    const uint8_t KEY[] = { 0x75,0x91,0x6a,0x0a,0x92,0x25,0x37,0x75,0x92,0xe3,0xf2,0xed,0xbe,0xb4,0x85,0x7d,0x60,0x3c,0xa1,0x51,0xe0,0x15,0x79,0xb4 };
    const uint8_t IV[] = { 0xc0,0xf3,0xdc,0x88,0x75,0x8b,0xd9,0x6d,0xfb,0x51,0xdc,0x9c,0x72,0x16,0x97,0x4f };
    const uint8_t PLAINTEXT[] = { 0xa3,0x40,0x64,0x69,0x96,0xa9,0x14,0x98,0x94,0xec,0x2a,0x0c,0xd3,0x09,0xa1,0x51 };
    const uint8_t CIPHERTEXT[] = { 0x4c,0x80,0xbb,0x34,0x04,0x3d,0x4d,0xe2,0x47,0x49,0x2e,0xa9,0x26,0x23,0x9d,0xd8 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-19", "[OFB][MCT][192][ENCRYPT][n19]") {
    const uint8_t KEY[] = { 0x0d,0xe4,0x72,0x90,0xee,0x0f,0x0a,0x0e,0xde,0x63,0x49,0xd9,0xba,0x89,0xc8,0x9f,0x27,0x75,0x8f,0xf8,0xc6,0x36,0xe4,0x6c };
    const uint8_t IV[] = { 0x4c,0x80,0xbb,0x34,0x04,0x3d,0x4d,0xe2,0x47,0x49,0x2e,0xa9,0x26,0x23,0x9d,0xd8 };
    const uint8_t PLAINTEXT[] = { 0xba,0x94,0xb6,0xf3,0xf7,0xb5,0xa6,0x25,0x78,0x75,0x18,0x9a,0x7c,0x2a,0x3d,0x7b };
    const uint8_t CIPHERTEXT[] = { 0x35,0xeb,0xe5,0xc2,0x0b,0xa6,0xca,0xfd,0x69,0xe8,0x6e,0xaa,0xf6,0xce,0xc1,0xe2 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-20", "[OFB][MCT][192][ENCRYPT][n20]") {
    const uint8_t KEY[] = { 0x8c,0xa4,0x04,0x3b,0xb2,0x92,0xbe,0xa3,0xeb,0x88,0xac,0x1b,0xb1,0x2f,0x02,0x62,0x4e,0x9d,0xe1,0x52,0x30,0xf8,0x25,0x8e };
    const uint8_t IV[] = { 0x35,0xeb,0xe5,0xc2,0x0b,0xa6,0xca,0xfd,0x69,0xe8,0x6e,0xaa,0xf6,0xce,0xc1,0xe2 };
    const uint8_t PLAINTEXT[] = { 0xc4,0x78,0x34,0x02,0x87,0xa5,0x62,0x32,0x81,0x40,0x76,0xab,0x5c,0x9d,0xb4,0xad };
    const uint8_t CIPHERTEXT[] = { 0xf1,0x89,0xce,0x08,0x98,0x85,0x9c,0x39,0xc3,0x09,0x5f,0x0c,0xd8,0xa5,0x37,0xa6 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-21", "[OFB][MCT][192][ENCRYPT][n21]") {
    const uint8_t KEY[] = { 0x8f,0x73,0xd4,0x4f,0x17,0xd8,0x3a,0x46,0x1a,0x01,0x62,0x13,0x29,0xaa,0x9e,0x5b,0x8d,0x94,0xbe,0x5e,0xe8,0x5d,0x12,0x28 };
    const uint8_t IV[] = { 0xf1,0x89,0xce,0x08,0x98,0x85,0x9c,0x39,0xc3,0x09,0x5f,0x0c,0xd8,0xa5,0x37,0xa6 };
    const uint8_t PLAINTEXT[] = { 0x29,0x2e,0xbb,0x2a,0x08,0xfb,0x62,0x6d,0x03,0xd7,0xd0,0x74,0xa5,0x4a,0x84,0xe5 };
    const uint8_t CIPHERTEXT[] = { 0x80,0xe6,0x6b,0xbd,0xe5,0xb3,0x6c,0xb4,0x2d,0x72,0x37,0xb3,0x4a,0x50,0xc9,0xb8 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-22", "[OFB][MCT][192][ENCRYPT][n22]") {
    const uint8_t KEY[] = { 0x00,0xde,0xf8,0x5b,0x20,0x61,0x6f,0xc1,0x9a,0xe7,0x09,0xae,0xcc,0x19,0xf2,0xef,0xa0,0xe6,0x89,0xed,0xa2,0x0d,0xdb,0x90 };
    const uint8_t IV[] = { 0x80,0xe6,0x6b,0xbd,0xe5,0xb3,0x6c,0xb4,0x2d,0x72,0x37,0xb3,0x4a,0x50,0xc9,0xb8 };
    const uint8_t PLAINTEXT[] = { 0x3c,0x74,0xa7,0x7a,0x2c,0x5c,0xf5,0x78,0x8f,0xad,0x2c,0x14,0x37,0xb9,0x55,0x87 };
    const uint8_t CIPHERTEXT[] = { 0xf8,0xb4,0xcb,0x78,0x7a,0xa4,0x03,0x48,0x01,0x6e,0x2a,0x17,0xd8,0xf8,0x1d,0x0c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-23", "[OFB][MCT][192][ENCRYPT][n23]") {
    const uint8_t KEY[] = { 0x5f,0x22,0xdd,0x56,0xc4,0x39,0x81,0x35,0x62,0x53,0xc2,0xd6,0xb6,0xbd,0xf1,0xa7,0xa1,0x88,0xa3,0xfa,0x7a,0xf5,0xc6,0x9c };
    const uint8_t IV[] = { 0xf8,0xb4,0xcb,0x78,0x7a,0xa4,0x03,0x48,0x01,0x6e,0x2a,0x17,0xd8,0xf8,0x1d,0x0c };
    const uint8_t PLAINTEXT[] = { 0x3d,0x3f,0xd8,0xeb,0x23,0x25,0xe5,0xd8,0x5f,0xfc,0x25,0x0d,0xe4,0x58,0xee,0xf4 };
    const uint8_t CIPHERTEXT[] = { 0xbc,0xc2,0x7c,0x7c,0xe2,0x60,0xf9,0x8e,0xef,0x87,0xb1,0x96,0xc5,0x52,0x39,0x3f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-24", "[OFB][MCT][192][ENCRYPT][n24]") {
    const uint8_t KEY[] = { 0x99,0x82,0x42,0x9e,0x45,0xa9,0x8c,0xf6,0xde,0x91,0xbe,0xaa,0x54,0xdd,0x08,0x29,0x4e,0x0f,0x12,0x6c,0xbf,0xa7,0xff,0xa3 };
    const uint8_t IV[] = { 0xbc,0xc2,0x7c,0x7c,0xe2,0x60,0xf9,0x8e,0xef,0x87,0xb1,0x96,0xc5,0x52,0x39,0x3f };
    const uint8_t PLAINTEXT[] = { 0xb5,0x1d,0x4c,0xd3,0x5b,0x8c,0x50,0xa7,0xc6,0xa0,0x9f,0xc8,0x81,0x90,0x0d,0xc3 };
    const uint8_t CIPHERTEXT[] = { 0xed,0x79,0x16,0x5b,0x28,0x18,0x54,0xc6,0x9f,0x41,0x24,0x96,0x73,0x1a,0x6c,0x21 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-25", "[OFB][MCT][192][ENCRYPT][n25]") {
    const uint8_t KEY[] = { 0x63,0x5b,0x84,0xb5,0x1e,0x09,0xe8,0x79,0x33,0xe8,0xa8,0xf1,0x7c,0xc5,0x5c,0xef,0xd1,0x4e,0x36,0xfa,0xcc,0xbd,0x93,0x82 };
    const uint8_t IV[] = { 0xed,0x79,0x16,0x5b,0x28,0x18,0x54,0xc6,0x9f,0x41,0x24,0x96,0x73,0x1a,0x6c,0x21 };
    const uint8_t PLAINTEXT[] = { 0xb3,0x62,0x6c,0x5d,0xd2,0x74,0x00,0x1e,0xfa,0xd9,0xc6,0x2b,0x5b,0xa0,0x64,0x8f };
    const uint8_t CIPHERTEXT[] = { 0x3c,0x57,0xd5,0xe0,0x6c,0x3a,0xd8,0x4d,0xc8,0x8b,0x74,0x24,0xc0,0xaf,0xa8,0x5c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-26", "[OFB][MCT][192][ENCRYPT][n26]") {
    const uint8_t KEY[] = { 0xf0,0x6b,0x43,0xe5,0x98,0xd8,0xd7,0x3a,0x0f,0xbf,0x7d,0x11,0x10,0xff,0x84,0xa2,0x19,0xc5,0x42,0xde,0x0c,0x12,0x3b,0xde };
    const uint8_t IV[] = { 0x3c,0x57,0xd5,0xe0,0x6c,0x3a,0xd8,0x4d,0xc8,0x8b,0x74,0x24,0xc0,0xaf,0xa8,0x5c };
    const uint8_t PLAINTEXT[] = { 0x40,0x7a,0x06,0x72,0x0f,0xe3,0xc7,0x54,0x93,0x30,0xc7,0x50,0x86,0xd1,0x3f,0x43 };
    const uint8_t CIPHERTEXT[] = { 0x8c,0x79,0x0d,0x33,0x11,0xa4,0xc1,0x13,0xb0,0x17,0x4f,0x18,0xb0,0xed,0x6a,0x57 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-27", "[OFB][MCT][192][ENCRYPT][n27]") {
    const uint8_t KEY[] = { 0xd7,0x8b,0x15,0xdb,0xfc,0x0b,0xa5,0x8c,0x83,0xc6,0x70,0x22,0x01,0x5b,0x45,0xb1,0xa9,0xd2,0x0d,0xc6,0xbc,0xff,0x51,0x89 };
    const uint8_t IV[] = { 0x8c,0x79,0x0d,0x33,0x11,0xa4,0xc1,0x13,0xb0,0x17,0x4f,0x18,0xb0,0xed,0x6a,0x57 };
    const uint8_t PLAINTEXT[] = { 0x65,0xa7,0xdc,0xde,0x0e,0xe0,0xf1,0xce,0x27,0xe0,0x56,0x3e,0x64,0xd3,0x72,0xb6 };
    const uint8_t CIPHERTEXT[] = { 0x49,0x71,0xf3,0x02,0x48,0xfc,0xea,0x5d,0x1f,0xbf,0x9a,0x75,0xc9,0x59,0xdc,0xb8 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-28", "[OFB][MCT][192][ENCRYPT][n28]") {
    const uint8_t KEY[] = { 0xe3,0xf8,0x0e,0x81,0x55,0x91,0xca,0x2f,0xca,0xb7,0x83,0x20,0x49,0xa7,0xaf,0xec,0xb6,0x6d,0x97,0xb3,0x75,0xa6,0x8d,0x31 };
    const uint8_t IV[] = { 0x49,0x71,0xf3,0x02,0x48,0xfc,0xea,0x5d,0x1f,0xbf,0x9a,0x75,0xc9,0x59,0xdc,0xb8 };
    const uint8_t PLAINTEXT[] = { 0xde,0x36,0x0f,0x4e,0xf7,0x71,0x31,0xd0,0x34,0x73,0x1b,0x5a,0xa9,0x9a,0x6f,0xa3 };
    const uint8_t CIPHERTEXT[] = { 0x59,0x52,0xe6,0x70,0xd3,0x33,0xfe,0x2c,0xab,0x8c,0xd0,0xd6,0xa7,0xe9,0x36,0xf6 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-29", "[OFB][MCT][192][ENCRYPT][n29]") {
    const uint8_t KEY[] = { 0xe4,0x34,0x22,0x91,0x02,0x80,0xe9,0xfa,0x93,0xe5,0x65,0x50,0x9a,0x94,0x51,0xc0,0x1d,0xe1,0x47,0x65,0xd2,0x4f,0xbb,0xc7 };
    const uint8_t IV[] = { 0x59,0x52,0xe6,0x70,0xd3,0x33,0xfe,0x2c,0xab,0x8c,0xd0,0xd6,0xa7,0xe9,0x36,0xf6 };
    const uint8_t PLAINTEXT[] = { 0x5c,0x23,0x92,0x7e,0x37,0xc7,0xf0,0xf4,0x07,0xcc,0x2c,0x10,0x57,0x11,0x23,0xd5 };
    const uint8_t CIPHERTEXT[] = { 0x42,0xa2,0x23,0xfb,0xb4,0xc9,0x26,0x10,0x78,0x45,0xcc,0xc9,0x1b,0xc2,0x10,0x58 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-30", "[OFB][MCT][192][ENCRYPT][n30]") {
    const uint8_t KEY[] = { 0x01,0xf2,0x7c,0x64,0x3b,0xab,0x05,0x3f,0xd1,0x47,0x46,0xab,0x2e,0x5d,0x77,0xd0,0x65,0xa4,0x8b,0xac,0xc9,0x8d,0xab,0x9f };
    const uint8_t IV[] = { 0x42,0xa2,0x23,0xfb,0xb4,0xc9,0x26,0x10,0x78,0x45,0xcc,0xc9,0x1b,0xc2,0x10,0x58 };
    const uint8_t PLAINTEXT[] = { 0xe6,0xd5,0x26,0x35,0xbd,0x93,0x50,0x41,0xe5,0xc6,0x5e,0xf5,0x39,0x2b,0xec,0xc5 };
    const uint8_t CIPHERTEXT[] = { 0x47,0x9f,0xbe,0xef,0x42,0x46,0x73,0x39,0xc0,0x91,0xc2,0xf8,0x4d,0x9a,0xf2,0xb0 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-31", "[OFB][MCT][192][ENCRYPT][n31]") {
    const uint8_t KEY[] = { 0x83,0x42,0xf7,0x5e,0xa7,0xfd,0xa8,0xa8,0x96,0xd8,0xf8,0x44,0x6c,0x1b,0x04,0xe9,0xa5,0x35,0x49,0x54,0x84,0x17,0x59,0x2f };
    const uint8_t IV[] = { 0x47,0x9f,0xbe,0xef,0x42,0x46,0x73,0x39,0xc0,0x91,0xc2,0xf8,0x4d,0x9a,0xf2,0xb0 };
    const uint8_t PLAINTEXT[] = { 0x1b,0x9b,0xe7,0x7d,0x9d,0xe0,0x7f,0x01,0x82,0xb0,0x8b,0x3a,0x9c,0x56,0xad,0x97 };
    const uint8_t CIPHERTEXT[] = { 0x59,0x66,0x9c,0xee,0x6a,0xe7,0x26,0x6a,0xe2,0x00,0xd7,0xb3,0xd4,0xf8,0x36,0x89 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-32", "[OFB][MCT][192][ENCRYPT][n32]") {
    const uint8_t KEY[] = { 0xf2,0xba,0x5d,0x05,0xc5,0x0b,0xeb,0xbd,0xcf,0xbe,0x64,0xaa,0x06,0xfc,0x22,0x83,0x47,0x35,0x9e,0xe7,0x50,0xef,0x6f,0xa6 };
    const uint8_t IV[] = { 0x59,0x66,0x9c,0xee,0x6a,0xe7,0x26,0x6a,0xe2,0x00,0xd7,0xb3,0xd4,0xf8,0x36,0x89 };
    const uint8_t PLAINTEXT[] = { 0xdc,0xa3,0xd2,0xf9,0x71,0x77,0xb1,0x8e,0x71,0xf8,0xaa,0x5b,0x62,0xf6,0x43,0x15 };
    const uint8_t CIPHERTEXT[] = { 0xe1,0xe8,0xcc,0xfb,0xe3,0xba,0x83,0x3a,0x93,0x4d,0x95,0xa8,0x51,0xbb,0xe0,0xd4 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-33", "[OFB][MCT][192][ENCRYPT][n33]") {
    const uint8_t KEY[] = { 0x43,0x9d,0x07,0xad,0x6d,0x78,0x9a,0xfd,0x2e,0x56,0xa8,0x51,0xe5,0x46,0xa1,0xb9,0xd4,0x78,0x0b,0x4f,0x01,0x54,0x8f,0x72 };
    const uint8_t IV[] = { 0xe1,0xe8,0xcc,0xfb,0xe3,0xba,0x83,0x3a,0x93,0x4d,0x95,0xa8,0x51,0xbb,0xe0,0xd4 };
    const uint8_t PLAINTEXT[] = { 0xaf,0x05,0x0e,0x2c,0xd6,0xb7,0xd4,0x51,0xb1,0x27,0x5a,0xa8,0xa8,0x73,0x71,0x40 };
    const uint8_t CIPHERTEXT[] = { 0xb6,0x4b,0x4a,0x1d,0xd3,0xeb,0xc4,0xfb,0xd2,0x14,0x7b,0x11,0xfc,0xfd,0x61,0x91 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-34", "[OFB][MCT][192][ENCRYPT][n34]") {
    const uint8_t KEY[] = { 0x27,0xb7,0xf0,0xfe,0xc4,0x98,0x41,0x1e,0x98,0x1d,0xe2,0x4c,0x36,0xad,0x65,0x42,0x06,0x6c,0x70,0x5e,0xfd,0xa9,0xee,0xe3 };
    const uint8_t IV[] = { 0xb6,0x4b,0x4a,0x1d,0xd3,0xeb,0xc4,0xfb,0xd2,0x14,0x7b,0x11,0xfc,0xfd,0x61,0x91 };
    const uint8_t PLAINTEXT[] = { 0xcf,0xff,0x1c,0xce,0x79,0x5e,0x5a,0xe0,0x64,0x2a,0xf7,0x53,0xa9,0xe0,0xdb,0xe3 };
    const uint8_t CIPHERTEXT[] = { 0x47,0x64,0xc7,0xc9,0x7b,0x06,0xa5,0xde,0x4b,0xc9,0x2d,0xcf,0x56,0x01,0x30,0x79 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-35", "[OFB][MCT][192][ENCRYPT][n35]") {
    const uint8_t KEY[] = { 0x26,0xab,0xd8,0x95,0x11,0x29,0x8d,0xef,0xdf,0x79,0x25,0x85,0x4d,0xab,0xc0,0x9c,0x4d,0xa5,0x5d,0x91,0xab,0xa8,0xde,0x9a };
    const uint8_t IV[] = { 0x47,0x64,0xc7,0xc9,0x7b,0x06,0xa5,0xde,0x4b,0xc9,0x2d,0xcf,0x56,0x01,0x30,0x79 };
    const uint8_t PLAINTEXT[] = { 0x40,0x97,0xfa,0x9f,0xb0,0x27,0xc8,0x24,0x01,0x1c,0x28,0x6b,0xd5,0xb1,0xcc,0xf1 };
    const uint8_t CIPHERTEXT[] = { 0x0d,0x6c,0x5f,0xb0,0x1f,0x43,0xaf,0x49,0x93,0x79,0xd5,0x74,0x6b,0x66,0xb1,0x2d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-36", "[OFB][MCT][192][ENCRYPT][n36]") {
    const uint8_t KEY[] = { 0x7f,0xba,0xab,0x43,0xb2,0xf3,0x8a,0xe0,0xd2,0x15,0x7a,0x35,0x52,0xe8,0x6f,0xd5,0xde,0xdc,0x88,0xe5,0xc0,0xce,0x6f,0xb7 };
    const uint8_t IV[] = { 0x0d,0x6c,0x5f,0xb0,0x1f,0x43,0xaf,0x49,0x93,0x79,0xd5,0x74,0x6b,0x66,0xb1,0x2d };
    const uint8_t PLAINTEXT[] = { 0xab,0xf1,0xd2,0x73,0x2e,0x3c,0x03,0x30,0x59,0x11,0x73,0xd6,0xa3,0xda,0x07,0x0f };
    const uint8_t CIPHERTEXT[] = { 0x67,0x72,0x0a,0xb8,0xde,0xd2,0x2f,0xf8,0x44,0x44,0x24,0x12,0x64,0xc1,0xc8,0x27 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-37", "[OFB][MCT][192][ENCRYPT][n37]") {
    const uint8_t KEY[] = { 0xef,0x13,0xbe,0x6d,0xa3,0x9a,0x50,0x03,0xb5,0x67,0x70,0x8d,0x8c,0x3a,0x40,0x2d,0x9a,0x98,0xac,0xf7,0xa4,0x0f,0xa7,0x90 };
    const uint8_t IV[] = { 0x67,0x72,0x0a,0xb8,0xde,0xd2,0x2f,0xf8,0x44,0x44,0x24,0x12,0x64,0xc1,0xc8,0x27 };
    const uint8_t PLAINTEXT[] = { 0x3e,0xaa,0x78,0x84,0x61,0x4a,0xed,0xa9,0x90,0xa9,0x15,0x2e,0x11,0x69,0xda,0xe3 };
    const uint8_t CIPHERTEXT[] = { 0x18,0x27,0x6f,0xce,0xee,0xa7,0x7b,0xeb,0xed,0xac,0xed,0xed,0xf4,0xd1,0x63,0x6f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-38", "[OFB][MCT][192][ENCRYPT][n38]") {
    const uint8_t KEY[] = { 0x30,0xc9,0x2c,0x79,0xb0,0xf3,0xd9,0x5a,0xad,0x40,0x1f,0x43,0x62,0x9d,0x3b,0xc6,0x77,0x34,0x41,0x1a,0x50,0xde,0xc4,0xff };
    const uint8_t IV[] = { 0x18,0x27,0x6f,0xce,0xee,0xa7,0x7b,0xeb,0xed,0xac,0xed,0xed,0xf4,0xd1,0x63,0x6f };
    const uint8_t PLAINTEXT[] = { 0x2c,0xe4,0xb0,0xa4,0x89,0xad,0x64,0x95,0xdf,0xda,0x92,0x14,0x13,0x69,0x89,0x59 };
    const uint8_t CIPHERTEXT[] = { 0x7c,0x7d,0xbd,0x58,0x84,0xc6,0x5a,0xca,0x95,0x01,0x2b,0x9c,0x87,0x8b,0x71,0xdf };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-39", "[OFB][MCT][192][ENCRYPT][n39]") {
    const uint8_t KEY[] = { 0xd2,0xb3,0xef,0xea,0x54,0x13,0x83,0xf6,0xd1,0x3d,0xa2,0x1b,0xe6,0x5b,0x61,0x0c,0xe2,0x35,0x6a,0x86,0xd7,0x55,0xb5,0x20 };
    const uint8_t IV[] = { 0x7c,0x7d,0xbd,0x58,0x84,0xc6,0x5a,0xca,0x95,0x01,0x2b,0x9c,0x87,0x8b,0x71,0xdf };
    const uint8_t PLAINTEXT[] = { 0x98,0x42,0x69,0x87,0xc3,0x9d,0x7a,0x2b,0xe2,0x7a,0xc3,0x93,0xe4,0xe0,0x5a,0xac };
    const uint8_t CIPHERTEXT[] = { 0x69,0xb3,0x43,0xe5,0x25,0xd4,0xe5,0x44,0x52,0xa6,0x93,0xfa,0x7e,0x0b,0x9d,0x79 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-40", "[OFB][MCT][192][ENCRYPT][n40]") {
    const uint8_t KEY[] = { 0x84,0xc5,0xf0,0xab,0x4c,0x8e,0x13,0x23,0xb8,0x8e,0xe1,0xfe,0xc3,0x8f,0x84,0x48,0xb0,0x93,0xf9,0x7c,0xa9,0x5e,0x28,0x59 };
    const uint8_t IV[] = { 0x69,0xb3,0x43,0xe5,0x25,0xd4,0xe5,0x44,0x52,0xa6,0x93,0xfa,0x7e,0x0b,0x9d,0x79 };
    const uint8_t PLAINTEXT[] = { 0x7b,0x1e,0x6b,0xc1,0xe2,0xe1,0xd7,0x57,0x56,0x76,0x1f,0x41,0x18,0x9d,0x90,0xd5 };
    const uint8_t CIPHERTEXT[] = { 0x45,0xb8,0x75,0xc7,0x38,0xb4,0x3f,0xd2,0xac,0x0e,0xa7,0xe4,0x2b,0xb0,0x74,0x91 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-41", "[OFB][MCT][192][ENCRYPT][n41]") {
    const uint8_t KEY[] = { 0xe5,0x1a,0x33,0x01,0x68,0x45,0x85,0x80,0xfd,0x36,0x94,0x39,0xfb,0x3b,0xbb,0x9a,0x1c,0x9d,0x5e,0x98,0x82,0xee,0x5c,0xc8 };
    const uint8_t IV[] = { 0x45,0xb8,0x75,0xc7,0x38,0xb4,0x3f,0xd2,0xac,0x0e,0xa7,0xe4,0x2b,0xb0,0x74,0x91 };
    const uint8_t PLAINTEXT[] = { 0x3e,0xe1,0xec,0x43,0x9e,0xc7,0x5f,0x92,0x61,0xdf,0xc3,0xaa,0x24,0xcb,0x96,0xa3 };
    const uint8_t CIPHERTEXT[] = { 0xbe,0xc0,0xf4,0x65,0x0c,0x2f,0xf5,0x8a,0xc4,0x54,0x3c,0xa8,0xcf,0xbb,0xe2,0x15 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-42", "[OFB][MCT][192][ENCRYPT][n42]") {
    const uint8_t KEY[] = { 0xe5,0x4c,0x70,0xbb,0x29,0xf6,0xc3,0x29,0x43,0xf6,0x60,0x5c,0xf7,0x14,0x4e,0x10,0xd8,0xc9,0x62,0x30,0x4d,0x55,0xbe,0xdd };
    const uint8_t IV[] = { 0xbe,0xc0,0xf4,0x65,0x0c,0x2f,0xf5,0x8a,0xc4,0x54,0x3c,0xa8,0xcf,0xbb,0xe2,0x15 };
    const uint8_t PLAINTEXT[] = { 0x6f,0xc7,0xa4,0xb9,0x7d,0x53,0x08,0x3d,0x00,0x56,0x43,0xba,0x41,0xb3,0x46,0xa9 };
    const uint8_t CIPHERTEXT[] = { 0xe9,0x0a,0xee,0x12,0xfe,0x07,0x0a,0x68,0x89,0x13,0xb4,0xac,0xe7,0x95,0x20,0x9b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-43", "[OFB][MCT][192][ENCRYPT][n43]") {
    const uint8_t KEY[] = { 0xf3,0xf3,0x72,0xb1,0x4b,0xd1,0x3b,0x0e,0xaa,0xfc,0x8e,0x4e,0x09,0x13,0x44,0x78,0x51,0xda,0xd6,0x9c,0xaa,0xc0,0x9e,0x46 };
    const uint8_t IV[] = { 0xe9,0x0a,0xee,0x12,0xfe,0x07,0x0a,0x68,0x89,0x13,0xb4,0xac,0xe7,0x95,0x20,0x9b };
    const uint8_t PLAINTEXT[] = { 0xeb,0xee,0x4a,0xa4,0x4a,0x47,0x75,0x55,0x16,0xbf,0x02,0x0a,0x62,0x27,0xf8,0x27 };
    const uint8_t CIPHERTEXT[] = { 0x3f,0xd5,0x35,0x3b,0x88,0xba,0x5f,0xa0,0x77,0x1a,0xde,0x18,0xa6,0xef,0x49,0x63 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-44", "[OFB][MCT][192][ENCRYPT][n44]") {
    const uint8_t KEY[] = { 0xb8,0x24,0x11,0x31,0x97,0x8f,0xe4,0x49,0x95,0x29,0xbb,0x75,0x81,0xa9,0x1b,0xd8,0x26,0xc0,0x08,0x84,0x0c,0x2f,0xd7,0x25 };
    const uint8_t IV[] = { 0x3f,0xd5,0x35,0x3b,0x88,0xba,0x5f,0xa0,0x77,0x1a,0xde,0x18,0xa6,0xef,0x49,0x63 };
    const uint8_t PLAINTEXT[] = { 0xb0,0x3f,0xe3,0xa1,0xa0,0x4a,0xe6,0x13,0x4b,0xd7,0x63,0x80,0xdc,0x5e,0xdf,0x47 };
    const uint8_t CIPHERTEXT[] = { 0x48,0x66,0x5c,0xe6,0x9f,0xf5,0x54,0xc9,0x49,0xbd,0xd3,0x02,0xd4,0x4e,0x53,0x2b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-45", "[OFB][MCT][192][ENCRYPT][n45]") {
    const uint8_t KEY[] = { 0x17,0x74,0x9d,0xae,0xfa,0x7f,0xce,0xcb,0xdd,0x4f,0xe7,0x93,0x1e,0x5c,0x4f,0x11,0x6f,0x7d,0xdb,0x86,0xd8,0x61,0x84,0x0e };
    const uint8_t IV[] = { 0x48,0x66,0x5c,0xe6,0x9f,0xf5,0x54,0xc9,0x49,0xbd,0xd3,0x02,0xd4,0x4e,0x53,0x2b };
    const uint8_t PLAINTEXT[] = { 0x9e,0x26,0x83,0xfd,0xaa,0x11,0x4d,0x73,0xaf,0x50,0x8c,0x9f,0x6d,0xf0,0x2a,0x82 };
    const uint8_t CIPHERTEXT[] = { 0x25,0x3b,0x84,0x69,0x36,0x4d,0x22,0x1e,0xd4,0x7f,0xbb,0x2e,0x63,0x2b,0xc6,0x84 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-46", "[OFB][MCT][192][ENCRYPT][n46]") {
    const uint8_t KEY[] = { 0x49,0xb8,0x25,0x19,0xd5,0xd6,0xbd,0x12,0xf8,0x74,0x63,0xfa,0x28,0x11,0x6d,0x0f,0xbb,0x02,0x60,0xa8,0xbb,0x4a,0x42,0x8a };
    const uint8_t IV[] = { 0x25,0x3b,0x84,0x69,0x36,0x4d,0x22,0x1e,0xd4,0x7f,0xbb,0x2e,0x63,0x2b,0xc6,0x84 };
    const uint8_t PLAINTEXT[] = { 0xf9,0x10,0x82,0x34,0xb6,0xc2,0x17,0xca,0x5e,0xcc,0xb8,0xb7,0x2f,0xa9,0x73,0xd9 };
    const uint8_t CIPHERTEXT[] = { 0xe3,0x53,0xbf,0xd9,0x2f,0x5c,0xe1,0x56,0xaf,0xde,0xb9,0x32,0x7d,0x04,0xac,0xe6 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-47", "[OFB][MCT][192][ENCRYPT][n47]") {
    const uint8_t KEY[] = { 0x79,0x70,0xf4,0xe2,0x1f,0x09,0x04,0xf2,0x1b,0x27,0xdc,0x23,0x07,0x4d,0x8c,0x59,0x14,0xdc,0xd9,0x9a,0xc6,0x4e,0xee,0x6c };
    const uint8_t IV[] = { 0xe3,0x53,0xbf,0xd9,0x2f,0x5c,0xe1,0x56,0xaf,0xde,0xb9,0x32,0x7d,0x04,0xac,0xe6 };
    const uint8_t PLAINTEXT[] = { 0x77,0xc8,0x60,0x8c,0xce,0x6d,0x6f,0x49,0x30,0xc8,0xd1,0xfb,0xca,0xdf,0xb9,0xe0 };
    const uint8_t CIPHERTEXT[] = { 0xda,0xe2,0xaa,0xb2,0xac,0x07,0xb4,0x87,0xc8,0x99,0xb4,0x70,0x4d,0x20,0x24,0x80 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-48", "[OFB][MCT][192][ENCRYPT][n48]") {
    const uint8_t KEY[] = { 0xb3,0xdb,0x14,0xf6,0x91,0xd0,0xb4,0xf4,0xc1,0xc5,0x76,0x91,0xab,0x4a,0x38,0xde,0xdc,0x45,0x6d,0xea,0x8b,0x6e,0xca,0xec };
    const uint8_t IV[] = { 0xda,0xe2,0xaa,0xb2,0xac,0x07,0xb4,0x87,0xc8,0x99,0xb4,0x70,0x4d,0x20,0x24,0x80 };
    const uint8_t PLAINTEXT[] = { 0x15,0x10,0x86,0x21,0xc2,0x1f,0xc9,0xf9,0xca,0xab,0xe0,0x14,0x8e,0xd9,0xb0,0x06 };
    const uint8_t CIPHERTEXT[] = { 0x06,0xf4,0x83,0xac,0x11,0xd8,0x9e,0x31,0xde,0xf0,0x18,0x6d,0x14,0xfd,0x6d,0xf7 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-49", "[OFB][MCT][192][ENCRYPT][n49]") {
    const uint8_t KEY[] = { 0x35,0x9d,0x63,0x10,0xe9,0x59,0x2b,0x40,0xc7,0x31,0xf5,0x3d,0xba,0x92,0xa6,0xef,0x02,0xb5,0x75,0x87,0x9f,0x93,0xa7,0x1b };
    const uint8_t IV[] = { 0x06,0xf4,0x83,0xac,0x11,0xd8,0x9e,0x31,0xde,0xf0,0x18,0x6d,0x14,0xfd,0x6d,0xf7 };
    const uint8_t PLAINTEXT[] = { 0xfd,0x8f,0xda,0xb7,0x4e,0x37,0x42,0x5f,0x86,0x46,0x77,0xe6,0x78,0x89,0x9f,0xb4 };
    const uint8_t CIPHERTEXT[] = { 0x11,0x65,0xc0,0x84,0xa1,0xab,0x5f,0x33,0x2e,0xca,0x1b,0x8c,0x60,0x2e,0x8c,0x85 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-50", "[OFB][MCT][192][ENCRYPT][n50]") {
    const uint8_t KEY[] = { 0x35,0xc0,0x11,0x0d,0x96,0xa9,0x23,0x95,0xd6,0x54,0x35,0xb9,0x1b,0x39,0xf9,0xdc,0x2c,0x7f,0x6e,0x0b,0xff,0xbd,0x2b,0x9e };
    const uint8_t IV[] = { 0x11,0x65,0xc0,0x84,0xa1,0xab,0x5f,0x33,0x2e,0xca,0x1b,0x8c,0x60,0x2e,0x8c,0x85 };
    const uint8_t PLAINTEXT[] = { 0xda,0x76,0x53,0x60,0x2c,0xec,0x89,0xee,0x00,0x5d,0x72,0x1d,0x7f,0xf0,0x08,0xd5 };
    const uint8_t CIPHERTEXT[] = { 0x4a,0x4e,0x91,0x4e,0x42,0x64,0xf5,0x6e,0x98,0xfc,0xe2,0xf7,0x02,0x3e,0xc9,0xfc };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-51", "[OFB][MCT][192][ENCRYPT][n51]") {
    const uint8_t KEY[] = { 0x07,0x8b,0x9b,0x0f,0x54,0xf3,0x7a,0xb3,0x9c,0x1a,0xa4,0xf7,0x59,0x5d,0x0c,0xb2,0xb4,0x83,0x8c,0xfc,0xfd,0x83,0xe2,0x62 };
    const uint8_t IV[] = { 0x4a,0x4e,0x91,0x4e,0x42,0x64,0xf5,0x6e,0x98,0xfc,0xe2,0xf7,0x02,0x3e,0xc9,0xfc };
    const uint8_t PLAINTEXT[] = { 0x1a,0x7a,0xfb,0x7e,0x4d,0x7b,0x1c,0xbb,0x32,0x4b,0x8a,0x02,0xc2,0x5a,0x59,0x26 };
    const uint8_t CIPHERTEXT[] = { 0x75,0xc5,0xaf,0xda,0x32,0x3a,0xfb,0xfd,0xc4,0x25,0xdb,0x18,0xf9,0xf3,0x9e,0x2e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-52", "[OFB][MCT][192][ENCRYPT][n52]") {
    const uint8_t KEY[] = { 0xea,0x9b,0xec,0xbb,0xe1,0xe7,0xbc,0xc2,0xe9,0xdf,0x0b,0x2d,0x6b,0x67,0xf7,0x4f,0x70,0xa6,0x57,0xe4,0x04,0x70,0x7c,0x4c };
    const uint8_t IV[] = { 0x75,0xc5,0xaf,0xda,0x32,0x3a,0xfb,0xfd,0xc4,0x25,0xdb,0x18,0xf9,0xf3,0x9e,0x2e };
    const uint8_t PLAINTEXT[] = { 0x53,0xba,0x30,0x11,0xab,0xdd,0x84,0xc7,0xed,0x10,0x77,0xb4,0xb5,0x14,0xc6,0x71 };
    const uint8_t CIPHERTEXT[] = { 0x2e,0xbb,0x30,0x15,0x8d,0x8d,0x30,0x9c,0x05,0x05,0x4b,0x20,0x1b,0xee,0xea,0x74 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-53", "[OFB][MCT][192][ENCRYPT][n53]") {
    const uint8_t KEY[] = { 0xd6,0x40,0x34,0x2e,0x13,0xd7,0xb3,0xc8,0xc7,0x64,0x3b,0x38,0xe6,0xea,0xc7,0xd3,0x75,0xa3,0x1c,0xc4,0x1f,0x9e,0x96,0x38 };
    const uint8_t IV[] = { 0x2e,0xbb,0x30,0x15,0x8d,0x8d,0x30,0x9c,0x05,0x05,0x4b,0x20,0x1b,0xee,0xea,0x74 };
    const uint8_t PLAINTEXT[] = { 0xdd,0xba,0x2b,0x15,0x5b,0x0c,0x02,0x64,0x3c,0xdb,0xd8,0x95,0xf2,0x30,0x0f,0x0a };
    const uint8_t CIPHERTEXT[] = { 0x8f,0xd5,0xd6,0x4a,0x97,0x7b,0x98,0xc0,0xb7,0x72,0x3f,0x9e,0x49,0xda,0x4e,0x20 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-54", "[OFB][MCT][192][ENCRYPT][n54]") {
    const uint8_t KEY[] = { 0x56,0xb8,0xc1,0x02,0xb5,0x3f,0xe7,0x08,0x48,0xb1,0xed,0x72,0x71,0x91,0x5f,0x13,0xc2,0xd1,0x23,0x5a,0x56,0x44,0xd8,0x18 };
    const uint8_t IV[] = { 0x8f,0xd5,0xd6,0x4a,0x97,0x7b,0x98,0xc0,0xb7,0x72,0x3f,0x9e,0x49,0xda,0x4e,0x20 };
    const uint8_t PLAINTEXT[] = { 0x63,0x2c,0x37,0xd0,0xfc,0xf2,0x0e,0x3e,0x80,0xf8,0xf5,0x2c,0xa6,0xe8,0x54,0xc0 };
    const uint8_t CIPHERTEXT[] = { 0x0c,0x6b,0x3c,0x3c,0x29,0xc2,0x5a,0x2b,0xff,0x39,0xbe,0xd5,0x39,0xb2,0x25,0xd6 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-55", "[OFB][MCT][192][ENCRYPT][n55]") {
    const uint8_t KEY[] = { 0x02,0x25,0x8d,0x2e,0x4c,0x10,0x8f,0x2f,0x44,0xda,0xd1,0x4e,0x58,0x53,0x05,0x38,0x3d,0xe8,0x9d,0x8f,0x6f,0xf6,0xfd,0xce };
    const uint8_t IV[] = { 0x0c,0x6b,0x3c,0x3c,0x29,0xc2,0x5a,0x2b,0xff,0x39,0xbe,0xd5,0x39,0xb2,0x25,0xd6 };
    const uint8_t PLAINTEXT[] = { 0xc2,0xe4,0x44,0x66,0xab,0x13,0xaf,0xd5,0x54,0x9d,0x4c,0x2c,0xf9,0x2f,0x68,0x27 };
    const uint8_t CIPHERTEXT[] = { 0x16,0x68,0x0d,0x12,0xaa,0x41,0xe3,0x10,0xa2,0xd5,0x26,0x4d,0x0b,0xce,0x6e,0xf4 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-56", "[OFB][MCT][192][ENCRYPT][n56]") {
    const uint8_t KEY[] = { 0x3c,0x5f,0x23,0xd6,0x24,0xb7,0xd2,0xa4,0x52,0xb2,0xdc,0x5c,0xf2,0x12,0xe6,0x28,0x9f,0x3d,0xbb,0xc2,0x64,0x38,0x93,0x3a };
    const uint8_t IV[] = { 0x16,0x68,0x0d,0x12,0xaa,0x41,0xe3,0x10,0xa2,0xd5,0x26,0x4d,0x0b,0xce,0x6e,0xf4 };
    const uint8_t PLAINTEXT[] = { 0x1c,0x7e,0xba,0xbe,0x63,0x45,0xe8,0xbc,0x3e,0x7a,0xae,0xf8,0x68,0xa7,0x5d,0x8b };
    const uint8_t CIPHERTEXT[] = { 0x39,0xc5,0x7e,0x63,0x5c,0x8a,0x21,0xbf,0x48,0xe6,0x03,0xa9,0x92,0x74,0x34,0x9d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-57", "[OFB][MCT][192][ENCRYPT][n57]") {
    const uint8_t KEY[] = { 0x02,0x20,0x1b,0xf2,0x64,0x87,0x59,0x60,0x6b,0x77,0xa2,0x3f,0xae,0x98,0xc7,0x97,0xd7,0xdb,0xb8,0x6b,0xf6,0x4c,0xa7,0xa7 };
    const uint8_t IV[] = { 0x39,0xc5,0x7e,0x63,0x5c,0x8a,0x21,0xbf,0x48,0xe6,0x03,0xa9,0x92,0x74,0x34,0x9d };
    const uint8_t PLAINTEXT[] = { 0x07,0x47,0xb5,0xc5,0x60,0xcf,0xba,0xc1,0x3e,0x7f,0x38,0x24,0x40,0x30,0x8b,0xc4 };
    const uint8_t CIPHERTEXT[] = { 0xe2,0xd9,0x46,0x54,0x42,0xeb,0xfa,0x1b,0x1f,0x3a,0xac,0xe4,0x2d,0x47,0x3f,0x8a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-58", "[OFB][MCT][192][ENCRYPT][n58]") {
    const uint8_t KEY[] = { 0x44,0xc8,0xc3,0x80,0x02,0xe1,0x61,0x41,0x89,0xae,0xe4,0x6b,0xec,0x73,0x3d,0x8c,0xc8,0xe1,0x14,0x8f,0xdb,0x0b,0x98,0x2d };
    const uint8_t IV[] = { 0xe2,0xd9,0x46,0x54,0x42,0xeb,0xfa,0x1b,0x1f,0x3a,0xac,0xe4,0x2d,0x47,0x3f,0x8a };
    const uint8_t PLAINTEXT[] = { 0x0f,0x86,0x19,0x31,0x23,0x2f,0x98,0xee,0x46,0xe8,0xd8,0x72,0x66,0x66,0x38,0x21 };
    const uint8_t CIPHERTEXT[] = { 0x0c,0x1d,0xcf,0x9c,0x1a,0xe4,0x7e,0x4a,0x67,0x8d,0xb2,0xc5,0x4c,0x03,0x78,0xbe };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-59", "[OFB][MCT][192][ENCRYPT][n59]") {
    const uint8_t KEY[] = { 0xe9,0x20,0x1a,0x88,0xd6,0xd8,0x70,0x76,0x85,0xb3,0x2b,0xf7,0xf6,0x97,0x43,0xc6,0xaf,0x6c,0xa6,0x4a,0x97,0x08,0xe0,0x93 };
    const uint8_t IV[] = { 0x0c,0x1d,0xcf,0x9c,0x1a,0xe4,0x7e,0x4a,0x67,0x8d,0xb2,0xc5,0x4c,0x03,0x78,0xbe };
    const uint8_t PLAINTEXT[] = { 0x42,0xf6,0x0a,0xce,0xaa,0x9e,0xdc,0xae,0xad,0xe8,0xd9,0x08,0xd4,0x39,0x11,0x37 };
    const uint8_t CIPHERTEXT[] = { 0x92,0xcb,0x11,0x88,0xe0,0x98,0x64,0x98,0x93,0x3f,0x76,0xe4,0x5a,0xc7,0xce,0xf0 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-60", "[OFB][MCT][192][ENCRYPT][n60]") {
    const uint8_t KEY[] = { 0xe8,0x70,0xe6,0xdf,0x18,0xf2,0x50,0xa4,0x17,0x78,0x3a,0x7f,0x16,0x0f,0x27,0x5e,0x3c,0x53,0xd0,0xae,0xcd,0xcf,0x2e,0x63 };
    const uint8_t IV[] = { 0x92,0xcb,0x11,0x88,0xe0,0x98,0x64,0x98,0x93,0x3f,0x76,0xe4,0x5a,0xc7,0xce,0xf0 };
    const uint8_t PLAINTEXT[] = { 0x74,0x43,0x59,0x00,0xcd,0xe3,0xa0,0x19,0x01,0x50,0xfc,0x57,0xce,0x2a,0x20,0xd2 };
    const uint8_t CIPHERTEXT[] = { 0x31,0xa4,0x28,0xcd,0xfe,0x5f,0x04,0x90,0x86,0xd3,0x8b,0x87,0xad,0x41,0xc8,0x2c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-61", "[OFB][MCT][192][ENCRYPT][n61]") {
    const uint8_t KEY[] = { 0xe7,0x59,0x47,0x67,0xdb,0x2e,0xc5,0x0b,0x26,0xdc,0x12,0xb2,0xe8,0x50,0x23,0xce,0xba,0x80,0x5b,0x29,0x60,0x8e,0xe6,0x4f };
    const uint8_t IV[] = { 0x31,0xa4,0x28,0xcd,0xfe,0x5f,0x04,0x90,0x86,0xd3,0x8b,0x87,0xad,0x41,0xc8,0x2c };
    const uint8_t PLAINTEXT[] = { 0x1a,0x15,0x59,0x20,0x17,0x92,0x53,0x37,0x0f,0x29,0xa1,0xb8,0xc3,0xdc,0x95,0xaf };
    const uint8_t CIPHERTEXT[] = { 0xe1,0x17,0xc8,0x6b,0xe9,0x35,0x8b,0xd2,0xfd,0xd6,0x08,0x2a,0x39,0x14,0x75,0xd0 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-62", "[OFB][MCT][192][ENCRYPT][n62]") {
    const uint8_t KEY[] = { 0x47,0xe0,0xb9,0xf7,0x32,0x1e,0xad,0xad,0xc7,0xcb,0xda,0xd9,0x01,0x65,0xa8,0x1c,0x47,0x56,0x53,0x03,0x59,0x9a,0x93,0x9f };
    const uint8_t IV[] = { 0xe1,0x17,0xc8,0x6b,0xe9,0x35,0x8b,0xd2,0xfd,0xd6,0x08,0x2a,0x39,0x14,0x75,0xd0 };
    const uint8_t PLAINTEXT[] = { 0xd5,0xaa,0x7d,0xe9,0x4b,0x59,0x0e,0xbd,0xa0,0xb9,0xfe,0x90,0xe9,0x30,0x68,0xa6 };
    const uint8_t CIPHERTEXT[] = { 0x43,0xd8,0x44,0xd0,0x17,0x31,0x21,0x57,0xfc,0xf8,0x27,0xb8,0x6a,0xe2,0x0e,0x11 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-63", "[OFB][MCT][192][ENCRYPT][n63]") {
    const uint8_t KEY[] = { 0x30,0x19,0x33,0x09,0xb1,0x35,0x8c,0x6d,0x84,0x13,0x9e,0x09,0x16,0x54,0x89,0x4b,0xbb,0xae,0x74,0xbb,0x33,0x78,0x9d,0x8e };
    const uint8_t IV[] = { 0x43,0xd8,0x44,0xd0,0x17,0x31,0x21,0x57,0xfc,0xf8,0x27,0xb8,0x6a,0xe2,0x0e,0x11 };
    const uint8_t PLAINTEXT[] = { 0xcf,0xb4,0x06,0x12,0xb7,0x57,0xc4,0xd7,0x77,0xf9,0x8a,0xfe,0x83,0x2b,0x21,0xc0 };
    const uint8_t CIPHERTEXT[] = { 0xa5,0xa8,0x52,0x81,0xfc,0x91,0x37,0xd8,0xf9,0x48,0xfd,0x72,0x43,0x6e,0xec,0xdd };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-64", "[OFB][MCT][192][ENCRYPT][n64]") {
    const uint8_t KEY[] = { 0x45,0x05,0x90,0xe4,0xdf,0x9d,0x09,0xb4,0x21,0xbb,0xcc,0x88,0xea,0xc5,0xbe,0x93,0x42,0xe6,0x89,0xc9,0x70,0x16,0x71,0x53 };
    const uint8_t IV[] = { 0xa5,0xa8,0x52,0x81,0xfc,0x91,0x37,0xd8,0xf9,0x48,0xfd,0x72,0x43,0x6e,0xec,0xdd };
    const uint8_t PLAINTEXT[] = { 0x84,0x8b,0xc5,0x4e,0x85,0x10,0x51,0x1a,0x75,0x1c,0xa3,0xed,0x6e,0xa8,0x85,0xd9 };
    const uint8_t CIPHERTEXT[] = { 0x23,0xa6,0x60,0xa7,0xfa,0xdb,0x3e,0x68,0x4c,0x22,0xfd,0x78,0x37,0x1e,0xad,0x1d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-65", "[OFB][MCT][192][ENCRYPT][n65]") {
    const uint8_t KEY[] = { 0x1f,0xb6,0xfb,0x71,0x38,0x8d,0x7a,0xf8,0x02,0x1d,0xac,0x2f,0x10,0x1e,0x80,0xfb,0x0e,0xc4,0x74,0xb1,0x47,0x08,0xdc,0x4e };
    const uint8_t IV[] = { 0x23,0xa6,0x60,0xa7,0xfa,0xdb,0x3e,0x68,0x4c,0x22,0xfd,0x78,0x37,0x1e,0xad,0x1d };
    const uint8_t PLAINTEXT[] = { 0x00,0x61,0xb9,0x8e,0x41,0xd8,0x18,0xfc,0x5a,0xb3,0x6b,0x95,0xe7,0x10,0x73,0x4c };
    const uint8_t CIPHERTEXT[] = { 0x59,0x5a,0x8b,0xa1,0x5d,0x0b,0xe5,0x09,0xba,0x09,0xa1,0xfc,0x0f,0xd5,0x7e,0xc1 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-66", "[OFB][MCT][192][ENCRYPT][n66]") {
    const uint8_t KEY[] = { 0x61,0x26,0xae,0xc3,0x77,0xfc,0xfc,0x3a,0x5b,0x47,0x27,0x8e,0x4d,0x15,0x65,0xf2,0xb4,0xcd,0xd5,0x4d,0x48,0xdd,0xa2,0x8f };
    const uint8_t IV[] = { 0x59,0x5a,0x8b,0xa1,0x5d,0x0b,0xe5,0x09,0xba,0x09,0xa1,0xfc,0x0f,0xd5,0x7e,0xc1 };
    const uint8_t PLAINTEXT[] = { 0xdd,0x7b,0x73,0x46,0xc0,0xb2,0xe7,0x02,0x7e,0x90,0x55,0xb2,0x4f,0x71,0x86,0xc2 };
    const uint8_t CIPHERTEXT[] = { 0xfa,0x86,0x12,0xc6,0xd3,0xdf,0x3d,0xbc,0x64,0xe7,0xca,0x2d,0x4b,0x8c,0x14,0x46 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-67", "[OFB][MCT][192][ENCRYPT][n67]") {
    const uint8_t KEY[] = { 0x47,0x08,0xcf,0xf1,0x60,0xfd,0x18,0x59,0xa1,0xc1,0x35,0x48,0x9e,0xca,0x58,0x4e,0xd0,0x2a,0x1f,0x60,0x03,0x51,0xb6,0xc9 };
    const uint8_t IV[] = { 0xfa,0x86,0x12,0xc6,0xd3,0xdf,0x3d,0xbc,0x64,0xe7,0xca,0x2d,0x4b,0x8c,0x14,0x46 };
    const uint8_t PLAINTEXT[] = { 0xb9,0x41,0x98,0xec,0x60,0x9e,0x81,0xbf,0x26,0x2e,0x61,0x32,0x17,0x01,0xe4,0x63 };
    const uint8_t CIPHERTEXT[] = { 0xbb,0xf8,0xdb,0xc4,0x75,0x97,0xa9,0x7f,0xea,0x60,0xa3,0x85,0x06,0xfd,0x03,0x0d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-68", "[OFB][MCT][192][ENCRYPT][n68]") {
    const uint8_t KEY[] = { 0x86,0x0f,0x1b,0x21,0x20,0x15,0x82,0xca,0x1a,0x39,0xee,0x8c,0xeb,0x5d,0xf1,0x31,0x3a,0x4a,0xbc,0xe5,0x05,0xac,0xb5,0xc4 };
    const uint8_t IV[] = { 0xbb,0xf8,0xdb,0xc4,0x75,0x97,0xa9,0x7f,0xea,0x60,0xa3,0x85,0x06,0xfd,0x03,0x0d };
    const uint8_t PLAINTEXT[] = { 0xca,0x11,0x09,0xcf,0xa0,0xda,0xef,0x28,0xc1,0x07,0xd4,0xd0,0x40,0xe8,0x9a,0x93 };
    const uint8_t CIPHERTEXT[] = { 0xe5,0xae,0x63,0xf4,0x8a,0xf9,0xdf,0x63,0x23,0xee,0x4d,0x22,0x4c,0x9f,0x3f,0xb9 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-69", "[OFB][MCT][192][ENCRYPT][n69]") {
    const uint8_t KEY[] = { 0x8f,0x47,0x33,0xdd,0xaf,0x15,0x68,0x5b,0xff,0x97,0x8d,0x78,0x61,0xa4,0x2e,0x52,0x19,0xa4,0xf1,0xc7,0x49,0x33,0x8a,0x7d };
    const uint8_t IV[] = { 0xe5,0xae,0x63,0xf4,0x8a,0xf9,0xdf,0x63,0x23,0xee,0x4d,0x22,0x4c,0x9f,0x3f,0xb9 };
    const uint8_t PLAINTEXT[] = { 0xf3,0xc5,0xc0,0xdc,0x92,0x1a,0x72,0xca,0x09,0x48,0x28,0xfc,0x8f,0x00,0xea,0x91 };
    const uint8_t CIPHERTEXT[] = { 0x35,0xe2,0x3f,0x1a,0x2d,0x4b,0xd0,0x85,0x53,0xb9,0xbe,0xd5,0x23,0xc9,0x63,0x08 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-70", "[OFB][MCT][192][ENCRYPT][n70]") {
    const uint8_t KEY[] = { 0x4d,0x69,0x42,0x70,0x55,0x84,0x90,0xaa,0xca,0x75,0xb2,0x62,0x4c,0xef,0xfe,0xd7,0x4a,0x1d,0x4f,0x12,0x6a,0xfa,0xe9,0x75 };
    const uint8_t IV[] = { 0x35,0xe2,0x3f,0x1a,0x2d,0x4b,0xd0,0x85,0x53,0xb9,0xbe,0xd5,0x23,0xc9,0x63,0x08 };
    const uint8_t PLAINTEXT[] = { 0x62,0x9a,0x25,0x89,0xcd,0x61,0xef,0xf8,0xc2,0x2e,0x71,0xad,0xfa,0x91,0xf8,0xf1 };
    const uint8_t CIPHERTEXT[] = { 0x9f,0x98,0xba,0xca,0x8a,0x88,0xf0,0x4e,0xbe,0x1d,0xae,0xcd,0xa5,0xef,0x7f,0xdc };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-71", "[OFB][MCT][192][ENCRYPT][n71]") {
    const uint8_t KEY[] = { 0xd1,0xb5,0x73,0xa7,0x20,0xf0,0xa7,0x48,0x55,0xed,0x08,0xa8,0xc6,0x67,0x0e,0x99,0xf4,0x00,0xe1,0xdf,0xcf,0x15,0x96,0xa9 };
    const uint8_t IV[] = { 0x9f,0x98,0xba,0xca,0x8a,0x88,0xf0,0x4e,0xbe,0x1d,0xae,0xcd,0xa5,0xef,0x7f,0xdc };
    const uint8_t PLAINTEXT[] = { 0x04,0xaf,0x69,0x81,0x5c,0xb1,0x4b,0xe7,0x9c,0xdc,0x31,0xd7,0x75,0x74,0x37,0xe2 };
    const uint8_t CIPHERTEXT[] = { 0x9a,0x54,0x9e,0x85,0x09,0x96,0x44,0x56,0x81,0xfb,0x64,0xc9,0x87,0x6a,0xf3,0xc8 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-72", "[OFB][MCT][192][ENCRYPT][n72]") {
    const uint8_t KEY[] = { 0xbc,0x7b,0x58,0x16,0x8c,0x63,0x70,0x71,0xcf,0xb9,0x96,0x2d,0xcf,0xf1,0x4a,0xcf,0x75,0xfb,0x85,0x16,0x48,0x7f,0x65,0x61 };
    const uint8_t IV[] = { 0x9a,0x54,0x9e,0x85,0x09,0x96,0x44,0x56,0x81,0xfb,0x64,0xc9,0x87,0x6a,0xf3,0xc8 };
    const uint8_t PLAINTEXT[] = { 0x29,0xc5,0xd1,0x55,0xb9,0x2a,0xbb,0xc8,0x6d,0xce,0x2b,0xb1,0xac,0x93,0xd7,0x39 };
    const uint8_t CIPHERTEXT[] = { 0x4b,0x65,0xc3,0x44,0x03,0x25,0x93,0x48,0x58,0x7f,0x68,0x64,0xa1,0xde,0x16,0x6a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-73", "[OFB][MCT][192][ENCRYPT][n73]") {
    const uint8_t KEY[] = { 0xb7,0xfa,0x64,0x9d,0xb1,0xc7,0x2b,0x9a,0x84,0xdc,0x55,0x69,0xcc,0xd4,0xd9,0x87,0x2d,0x84,0xed,0x72,0xe9,0xa1,0x73,0x0b };
    const uint8_t IV[] = { 0x4b,0x65,0xc3,0x44,0x03,0x25,0x93,0x48,0x58,0x7f,0x68,0x64,0xa1,0xde,0x16,0x6a };
    const uint8_t PLAINTEXT[] = { 0xa9,0xc2,0x2c,0xf5,0x7f,0xd9,0xb4,0xd9,0x0b,0x81,0x3c,0x8b,0x3d,0xa4,0x5b,0xeb };
    const uint8_t CIPHERTEXT[] = { 0x17,0xfe,0x0b,0x03,0x89,0x06,0xd6,0xce,0x49,0xfe,0x35,0x2e,0xfa,0x7f,0xbc,0x76 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-74", "[OFB][MCT][192][ENCRYPT][n74]") {
    const uint8_t KEY[] = { 0x18,0xab,0xce,0x71,0x10,0x08,0x36,0xee,0x93,0x22,0x5e,0x6a,0x45,0xd2,0x0f,0x49,0x64,0x7a,0xd8,0x5c,0x13,0xde,0xcf,0x7d };
    const uint8_t IV[] = { 0x17,0xfe,0x0b,0x03,0x89,0x06,0xd6,0xce,0x49,0xfe,0x35,0x2e,0xfa,0x7f,0xbc,0x76 };
    const uint8_t PLAINTEXT[] = { 0x8b,0x1f,0xf2,0x7c,0x21,0x56,0xee,0x3f,0xaf,0x51,0xaa,0xec,0xa1,0xcf,0x1d,0x74 };
    const uint8_t CIPHERTEXT[] = { 0xf2,0x2a,0x8a,0x37,0x0a,0xf0,0x21,0xdc,0x17,0xd4,0x09,0x08,0xdf,0x4c,0x68,0x2d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-75", "[OFB][MCT][192][ENCRYPT][n75]") {
    const uint8_t KEY[] = { 0x00,0x29,0xdf,0xb4,0x86,0x65,0x73,0x99,0x61,0x08,0xd4,0x5d,0x4f,0x22,0x2e,0x95,0x73,0xae,0xd1,0x54,0xcc,0x92,0xa7,0x50 };
    const uint8_t IV[] = { 0xf2,0x2a,0x8a,0x37,0x0a,0xf0,0x21,0xdc,0x17,0xd4,0x09,0x08,0xdf,0x4c,0x68,0x2d };
    const uint8_t PLAINTEXT[] = { 0xca,0xf7,0x19,0x88,0x61,0x42,0xca,0x7f,0x18,0x82,0x11,0xc5,0x96,0x6d,0x45,0x77 };
    const uint8_t CIPHERTEXT[] = { 0x06,0x56,0x98,0x4d,0x71,0x46,0x16,0x2b,0xa6,0xb5,0xd5,0x2c,0xe7,0xb6,0x0d,0x08 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-76", "[OFB][MCT][192][ENCRYPT][n76]") {
    const uint8_t KEY[] = { 0x6f,0x87,0x58,0x2a,0xfc,0x99,0xd6,0xf1,0x67,0x5e,0x4c,0x10,0x3e,0x64,0x38,0xbe,0xd5,0x1b,0x04,0x78,0x2b,0x24,0xaa,0x58 };
    const uint8_t IV[] = { 0x06,0x56,0x98,0x4d,0x71,0x46,0x16,0x2b,0xa6,0xb5,0xd5,0x2c,0xe7,0xb6,0x0d,0x08 };
    const uint8_t PLAINTEXT[] = { 0xd8,0x54,0x3d,0xa4,0xc0,0xc8,0x35,0x27,0x6f,0xae,0x87,0x9e,0x7a,0xfc,0xa5,0x68 };
    const uint8_t CIPHERTEXT[] = { 0xfb,0x2e,0xf9,0x4a,0xd2,0x5a,0x84,0x32,0x01,0xcb,0xc8,0xc5,0x3a,0xc8,0x30,0xb2 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-77", "[OFB][MCT][192][ENCRYPT][n77]") {
    const uint8_t KEY[] = { 0xf0,0x66,0x34,0xac,0x7b,0x9e,0xbb,0x42,0x9c,0x70,0xb5,0x5a,0xec,0x3e,0xbc,0x8c,0xd4,0xd0,0xcc,0xbd,0x11,0xec,0x9a,0xea };
    const uint8_t IV[] = { 0xfb,0x2e,0xf9,0x4a,0xd2,0x5a,0x84,0x32,0x01,0xcb,0xc8,0xc5,0x3a,0xc8,0x30,0xb2 };
    const uint8_t PLAINTEXT[] = { 0xf9,0x36,0xad,0x52,0xed,0x84,0x09,0xf0,0x9f,0xe1,0x6c,0x86,0x87,0x07,0x6d,0xb3 };
    const uint8_t CIPHERTEXT[] = { 0xd4,0xa2,0x67,0x8d,0xb5,0x88,0x52,0x17,0x6f,0xaf,0xd8,0x14,0x0e,0xc1,0x44,0x63 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-78", "[OFB][MCT][192][ENCRYPT][n78]") {
    const uint8_t KEY[] = { 0x32,0x73,0x05,0xff,0xf2,0x63,0x68,0xa0,0x48,0xd2,0xd2,0xd7,0x59,0xb6,0xee,0x9b,0xbb,0x7f,0x14,0xa9,0x1f,0x2d,0xde,0x89 };
    const uint8_t IV[] = { 0xd4,0xa2,0x67,0x8d,0xb5,0x88,0x52,0x17,0x6f,0xaf,0xd8,0x14,0x0e,0xc1,0x44,0x63 };
    const uint8_t PLAINTEXT[] = { 0xdc,0xf3,0x75,0x30,0x48,0x1e,0x7a,0xa9,0xc2,0x15,0x31,0x53,0x89,0xfd,0xd3,0xe2 };
    const uint8_t CIPHERTEXT[] = { 0xbb,0x35,0x45,0x68,0x2d,0xeb,0xaa,0x1e,0xa0,0x9c,0xd6,0x2d,0x00,0x88,0x1b,0x84 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-79", "[OFB][MCT][192][ENCRYPT][n79]") {
    const uint8_t KEY[] = { 0xa2,0xe1,0x1b,0x43,0x68,0xc9,0xae,0xc2,0xf3,0xe7,0x97,0xbf,0x74,0x5d,0x44,0x85,0x1b,0xe3,0xc2,0x84,0x1f,0xa5,0xc5,0x0d };
    const uint8_t IV[] = { 0xbb,0x35,0x45,0x68,0x2d,0xeb,0xaa,0x1e,0xa0,0x9c,0xd6,0x2d,0x00,0x88,0x1b,0x84 };
    const uint8_t PLAINTEXT[] = { 0x28,0xbc,0x91,0xed,0x48,0x3e,0xb5,0x35,0x90,0x92,0x1e,0xbc,0x9a,0xaa,0xc6,0x62 };
    const uint8_t CIPHERTEXT[] = { 0x74,0x1a,0x0f,0x52,0xfe,0x49,0x44,0xfb,0xb7,0xed,0xd3,0xd2,0xe8,0x7c,0xe9,0xaf };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-80", "[OFB][MCT][192][ENCRYPT][n80]") {
    const uint8_t KEY[] = { 0xe7,0x36,0xbd,0xd0,0x1a,0x61,0x50,0xb7,0x87,0xfd,0x98,0xed,0x8a,0x14,0x00,0x7e,0xac,0x0e,0x11,0x56,0xf7,0xd9,0x2c,0xa2 };
    const uint8_t IV[] = { 0x74,0x1a,0x0f,0x52,0xfe,0x49,0x44,0xfb,0xb7,0xed,0xd3,0xd2,0xe8,0x7c,0xe9,0xaf };
    const uint8_t PLAINTEXT[] = { 0xb3,0x65,0xf7,0x8c,0x28,0x12,0x87,0x7e,0x45,0xd7,0xa6,0x93,0x72,0xa8,0xfe,0x75 };
    const uint8_t CIPHERTEXT[] = { 0x79,0x94,0x49,0x32,0x86,0x02,0x91,0x69,0x3c,0xdd,0x09,0x7f,0xb1,0xbe,0xf6,0xa9 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-81", "[OFB][MCT][192][ENCRYPT][n81]") {
    const uint8_t KEY[] = { 0xc9,0x44,0xdf,0x5c,0x91,0xe1,0x57,0x3c,0xfe,0x69,0xd1,0xdf,0x0c,0x16,0x91,0x17,0x90,0xd3,0x18,0x29,0x46,0x67,0xda,0x0b };
    const uint8_t IV[] = { 0x79,0x94,0x49,0x32,0x86,0x02,0x91,0x69,0x3c,0xdd,0x09,0x7f,0xb1,0xbe,0xf6,0xa9 };
    const uint8_t PLAINTEXT[] = { 0xcb,0x4a,0x5b,0x91,0x2e,0xad,0x0b,0xd4,0x2e,0x72,0x62,0x8c,0x8b,0x80,0x07,0x8b };
    const uint8_t CIPHERTEXT[] = { 0xf8,0xee,0x4b,0x82,0xf5,0x95,0x02,0x9d,0x29,0x88,0xe7,0x89,0x63,0xe0,0x5d,0x41 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-82", "[OFB][MCT][192][ENCRYPT][n82]") {
    const uint8_t KEY[] = { 0x26,0xea,0x17,0x83,0x19,0x4d,0xfd,0xb3,0x06,0x87,0x9a,0x5d,0xf9,0x83,0x93,0x8a,0xb9,0x5b,0xff,0xa0,0x25,0x87,0x87,0x4a };
    const uint8_t IV[] = { 0xf8,0xee,0x4b,0x82,0xf5,0x95,0x02,0x9d,0x29,0x88,0xe7,0x89,0x63,0xe0,0x5d,0x41 };
    const uint8_t PLAINTEXT[] = { 0x02,0x6e,0x1a,0x1b,0x3a,0x55,0x3b,0x9e,0xef,0xae,0xc8,0xdf,0x88,0xac,0xaa,0x8f };
    const uint8_t CIPHERTEXT[] = { 0x3c,0x91,0x1f,0xf2,0xb6,0x37,0x0a,0x11,0x1d,0x96,0xe3,0xab,0x14,0xfb,0x39,0xfc };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-83", "[OFB][MCT][192][ENCRYPT][n83]") {
    const uint8_t KEY[] = { 0x72,0xec,0xd4,0x05,0x9d,0xf0,0x4b,0x9d,0x3a,0x16,0x85,0xaf,0x4f,0xb4,0x99,0x9b,0xa4,0xcd,0x1c,0x0b,0x31,0x7c,0xbe,0xb6 };
    const uint8_t IV[] = { 0x3c,0x91,0x1f,0xf2,0xb6,0x37,0x0a,0x11,0x1d,0x96,0xe3,0xab,0x14,0xfb,0x39,0xfc };
    const uint8_t PLAINTEXT[] = { 0x81,0x79,0xf6,0xa3,0x47,0x61,0x91,0x57,0x54,0x06,0xc3,0x86,0x84,0xbd,0xb6,0x2e };
    const uint8_t CIPHERTEXT[] = { 0xd5,0x23,0xf1,0x54,0xbd,0x3a,0xe6,0x78,0xfe,0x07,0x56,0xd6,0x0e,0xf1,0x91,0x92 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-84", "[OFB][MCT][192][ENCRYPT][n84]") {
    const uint8_t KEY[] = { 0x9b,0xd2,0xe7,0xaa,0xaa,0x1a,0x44,0x58,0xef,0x35,0x74,0xfb,0xf2,0x8e,0x7f,0xe3,0x5a,0xca,0x4a,0xdd,0x3f,0x8d,0x2f,0x24 };
    const uint8_t IV[] = { 0xd5,0x23,0xf1,0x54,0xbd,0x3a,0xe6,0x78,0xfe,0x07,0x56,0xd6,0x0e,0xf1,0x91,0x92 };
    const uint8_t PLAINTEXT[] = { 0x3c,0xbc,0xf1,0xdc,0xae,0x26,0x61,0xba,0xe9,0x3e,0x33,0xaf,0x37,0xea,0x0f,0xc5 };
    const uint8_t CIPHERTEXT[] = { 0x99,0x00,0x64,0x58,0x4f,0xa4,0xfc,0x03,0x92,0x8d,0x2d,0x6f,0x84,0xcd,0x87,0xf3 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-85", "[OFB][MCT][192][ENCRYPT][n85]") {
    const uint8_t KEY[] = { 0x78,0x77,0x1f,0x04,0x2b,0x5d,0xd5,0xca,0x76,0x35,0x10,0xa3,0xbd,0x2a,0x83,0xe0,0xc8,0x47,0x67,0xb2,0xbb,0x40,0xa8,0xd7 };
    const uint8_t IV[] = { 0x99,0x00,0x64,0x58,0x4f,0xa4,0xfc,0x03,0x92,0x8d,0x2d,0x6f,0x84,0xcd,0x87,0xf3 };
    const uint8_t PLAINTEXT[] = { 0x3d,0x24,0xd7,0xa8,0xbe,0xb9,0x7a,0x1d,0xe3,0xa5,0xf8,0xae,0x81,0x47,0x91,0x92 };
    const uint8_t CIPHERTEXT[] = { 0x21,0x79,0x60,0x74,0xee,0xb9,0x4c,0x1e,0x81,0x95,0x11,0x3e,0xbb,0x3a,0x3b,0x07 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-86", "[OFB][MCT][192][ENCRYPT][n86]") {
    const uint8_t KEY[] = { 0x02,0x7e,0x35,0x13,0x68,0xea,0x68,0xeb,0x57,0x4c,0x70,0xd7,0x53,0x93,0xcf,0xfe,0x49,0xd2,0x76,0x8c,0x00,0x7a,0x93,0xd0 };
    const uint8_t IV[] = { 0x21,0x79,0x60,0x74,0xee,0xb9,0x4c,0x1e,0x81,0x95,0x11,0x3e,0xbb,0x3a,0x3b,0x07 };
    const uint8_t PLAINTEXT[] = { 0x4c,0x07,0xb3,0xa3,0x2d,0xc3,0x3c,0x21,0x7a,0x09,0x2a,0x17,0x43,0xb7,0xbd,0x21 };
    const uint8_t CIPHERTEXT[] = { 0xe4,0xcf,0xd8,0x33,0x93,0xe6,0xdf,0x40,0xa1,0x17,0x60,0x4b,0x0b,0x5b,0xc3,0x79 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-87", "[OFB][MCT][192][ENCRYPT][n87]") {
    const uint8_t KEY[] = { 0x52,0xfb,0x30,0x99,0xbe,0xac,0x7d,0xe1,0xb3,0x83,0xa8,0xe4,0xc0,0x75,0x10,0xbe,0xe8,0xc5,0x16,0xc7,0x0b,0x21,0x50,0xa9 };
    const uint8_t IV[] = { 0xe4,0xcf,0xd8,0x33,0x93,0xe6,0xdf,0x40,0xa1,0x17,0x60,0x4b,0x0b,0x5b,0xc3,0x79 };
    const uint8_t PLAINTEXT[] = { 0x97,0x80,0x96,0x32,0x09,0x0c,0x0a,0x0a,0x50,0x85,0x05,0x8a,0xd6,0x46,0x15,0x0a };
    const uint8_t CIPHERTEXT[] = { 0xdb,0x79,0x1f,0x51,0xf2,0x2e,0x7b,0xa8,0xeb,0x64,0xb4,0x1d,0x88,0x12,0xbc,0x01 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-88", "[OFB][MCT][192][ENCRYPT][n88]") {
    const uint8_t KEY[] = { 0xc0,0xfa,0xd7,0x3a,0xf1,0xbd,0x94,0xaf,0x68,0xfa,0xb7,0xb5,0x32,0x5b,0x6b,0x16,0x03,0xa1,0xa2,0xda,0x83,0x33,0xec,0xa8 };
    const uint8_t IV[] = { 0xdb,0x79,0x1f,0x51,0xf2,0x2e,0x7b,0xa8,0xeb,0x64,0xb4,0x1d,0x88,0x12,0xbc,0x01 };
    const uint8_t PLAINTEXT[] = { 0x2e,0xf6,0xe1,0x9f,0xf6,0x7d,0x8a,0x39,0x92,0x01,0xe7,0xa3,0x4f,0x11,0xe9,0x4e };
    const uint8_t CIPHERTEXT[] = { 0xbb,0x8c,0xf4,0xc5,0x16,0xb3,0x43,0xa3,0x31,0xd3,0xff,0x9f,0xca,0xe2,0x96,0x3f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-89", "[OFB][MCT][192][ENCRYPT][n89]") {
    const uint8_t KEY[] = { 0x47,0xf3,0xa6,0xbe,0x45,0x80,0x5e,0xff,0xd3,0x76,0x43,0x70,0x24,0xe8,0x28,0xb5,0x32,0x72,0x5d,0x45,0x49,0xd1,0x7a,0x97 };
    const uint8_t IV[] = { 0xbb,0x8c,0xf4,0xc5,0x16,0xb3,0x43,0xa3,0x31,0xd3,0xff,0x9f,0xca,0xe2,0x96,0x3f };
    const uint8_t PLAINTEXT[] = { 0xd3,0x29,0xeb,0x02,0x5c,0x7c,0x7c,0x8c,0x87,0x09,0x71,0x84,0xb4,0x3d,0xca,0x50 };
    const uint8_t CIPHERTEXT[] = { 0x49,0x77,0x4e,0x14,0x8f,0xbc,0xe2,0x67,0x48,0x9f,0x14,0x71,0x07,0x6e,0x76,0x94 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-90", "[OFB][MCT][192][ENCRYPT][n90]") {
    const uint8_t KEY[] = { 0xf0,0x7c,0x43,0xdf,0xeb,0xac,0x02,0xcc,0x9a,0x01,0x0d,0x64,0xab,0x54,0xca,0xd2,0x7a,0xed,0x49,0x34,0x4e,0xbf,0x0c,0x03 };
    const uint8_t IV[] = { 0x49,0x77,0x4e,0x14,0x8f,0xbc,0xe2,0x67,0x48,0x9f,0x14,0x71,0x07,0x6e,0x76,0x94 };
    const uint8_t PLAINTEXT[] = { 0xde,0x49,0xa5,0xf1,0xdc,0x14,0xc9,0x67,0xb7,0x8f,0xe5,0x61,0xae,0x2c,0x5c,0x33 };
    const uint8_t CIPHERTEXT[] = { 0x9f,0xbc,0xf0,0x9a,0x4b,0xca,0x49,0x5b,0xe3,0xde,0xd1,0x9b,0x0a,0x53,0x7c,0x4c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-91", "[OFB][MCT][192][ENCRYPT][n91]") {
    const uint8_t KEY[] = { 0xff,0x34,0x4a,0x26,0x85,0x45,0x6d,0x9d,0x05,0xbd,0xfd,0xfe,0xe0,0x9e,0x83,0x89,0x99,0x33,0x98,0xaf,0x44,0xec,0x70,0x4f };
    const uint8_t IV[] = { 0x9f,0xbc,0xf0,0x9a,0x4b,0xca,0x49,0x5b,0xe3,0xde,0xd1,0x9b,0x0a,0x53,0x7c,0x4c };
    const uint8_t PLAINTEXT[] = { 0x54,0x75,0x32,0x5c,0xb3,0xf5,0x91,0xae,0x0f,0x48,0x09,0xf9,0x6e,0xe9,0x6f,0x51 };
    const uint8_t CIPHERTEXT[] = { 0x93,0xef,0x27,0xa2,0xfa,0x9a,0xba,0xea,0x80,0x9f,0x9b,0x2a,0x50,0x85,0x78,0xa9 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-92", "[OFB][MCT][192][ENCRYPT][n92]") {
    const uint8_t KEY[] = { 0x2d,0x50,0x16,0x0b,0x70,0x0c,0x20,0xff,0x96,0x52,0xda,0x5c,0x1a,0x04,0x39,0x63,0x19,0xac,0x03,0x85,0x14,0x69,0x08,0xe6 };
    const uint8_t IV[] = { 0x93,0xef,0x27,0xa2,0xfa,0x9a,0xba,0xea,0x80,0x9f,0x9b,0x2a,0x50,0x85,0x78,0xa9 };
    const uint8_t PLAINTEXT[] = { 0x86,0x7c,0x92,0xf9,0x2a,0xe3,0x64,0x84,0xd2,0x64,0x5c,0x2d,0xf5,0x49,0x4d,0x62 };
    const uint8_t CIPHERTEXT[] = { 0xb5,0x6a,0x83,0xd9,0x63,0x3f,0xd5,0x48,0x9f,0xff,0x4b,0x4e,0xce,0x19,0x05,0x70 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-93", "[OFB][MCT][192][ENCRYPT][n93]") {
    const uint8_t KEY[] = { 0x30,0xbd,0x90,0x44,0xfc,0x3b,0xfc,0xa3,0x23,0x38,0x59,0x85,0x79,0x3b,0xec,0x2b,0x86,0x53,0x48,0xcb,0xda,0x70,0x0d,0x96 };
    const uint8_t IV[] = { 0xb5,0x6a,0x83,0xd9,0x63,0x3f,0xd5,0x48,0x9f,0xff,0x4b,0x4e,0xce,0x19,0x05,0x70 };
    const uint8_t PLAINTEXT[] = { 0x5a,0x85,0x2d,0xa2,0x0e,0x7c,0x1e,0xec,0x1d,0xed,0x86,0x4f,0x8c,0x37,0xdc,0x5c };
    const uint8_t CIPHERTEXT[] = { 0x1e,0xd1,0xfd,0x7f,0x78,0xf8,0x3f,0x70,0x16,0x48,0xb7,0x84,0xe8,0x1d,0xc2,0x27 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-94", "[OFB][MCT][192][ENCRYPT][n94]") {
    const uint8_t KEY[] = { 0x74,0x82,0x65,0x4b,0xb7,0x4a,0x1f,0x58,0x3d,0xe9,0xa4,0xfa,0x01,0xc3,0xd3,0x5b,0x90,0x1b,0xff,0x4f,0x32,0x6d,0xcf,0xb1 };
    const uint8_t IV[] = { 0x1e,0xd1,0xfd,0x7f,0x78,0xf8,0x3f,0x70,0x16,0x48,0xb7,0x84,0xe8,0x1d,0xc2,0x27 };
    const uint8_t PLAINTEXT[] = { 0x48,0x6e,0xd3,0x4b,0xec,0x18,0xad,0xbe,0x44,0x3f,0xf5,0x0f,0x4b,0x71,0xe3,0xfb };
    const uint8_t CIPHERTEXT[] = { 0xd7,0x55,0xec,0x98,0xb5,0x62,0x96,0x1d,0x76,0xbf,0x08,0xcf,0x4e,0x3b,0x18,0x10 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-95", "[OFB][MCT][192][ENCRYPT][n95]") {
    const uint8_t KEY[] = { 0x85,0x99,0x36,0xa7,0x00,0xdc,0xa6,0x6a,0xea,0xbc,0x48,0x62,0xb4,0xa1,0x45,0x46,0xe6,0xa4,0xf7,0x80,0x7c,0x56,0xd7,0xa1 };
    const uint8_t IV[] = { 0xd7,0x55,0xec,0x98,0xb5,0x62,0x96,0x1d,0x76,0xbf,0x08,0xcf,0x4e,0x3b,0x18,0x10 };
    const uint8_t PLAINTEXT[] = { 0x18,0x9e,0xad,0x60,0xa9,0xe5,0x57,0x19,0xf1,0x1b,0x53,0xec,0xb7,0x96,0xb9,0x32 };
    const uint8_t CIPHERTEXT[] = { 0xa4,0x6d,0x47,0xc8,0x68,0xb4,0xcd,0x57,0x01,0x3d,0xc4,0x90,0xd4,0xb7,0xcd,0x1e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-96", "[OFB][MCT][192][ENCRYPT][n96]") {
    const uint8_t KEY[] = { 0x5f,0x2a,0x9d,0xd1,0x9b,0x5c,0xe5,0x23,0x4e,0xd1,0x0f,0xaa,0xdc,0x15,0x88,0x11,0xe7,0x99,0x33,0x10,0xa8,0xe1,0x1a,0xbf };
    const uint8_t IV[] = { 0xa4,0x6d,0x47,0xc8,0x68,0xb4,0xcd,0x57,0x01,0x3d,0xc4,0x90,0xd4,0xb7,0xcd,0x1e };
    const uint8_t PLAINTEXT[] = { 0x50,0xf3,0x76,0x49,0x7d,0x72,0xb7,0x12,0xda,0xb3,0xab,0x76,0x9b,0x80,0x43,0x49 };
    const uint8_t CIPHERTEXT[] = { 0xb0,0x06,0x77,0x9c,0x8e,0x4a,0x83,0x5d,0x98,0x14,0x9d,0x8f,0x06,0x04,0xa6,0xfc };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-97", "[OFB][MCT][192][ENCRYPT][n97]") {
    const uint8_t KEY[] = { 0x77,0x79,0x34,0x23,0x1b,0xe3,0x12,0xdb,0xfe,0xd7,0x78,0x36,0x52,0x5f,0x0b,0x4c,0x7f,0x8d,0xae,0x9f,0xae,0xe5,0xbc,0x43 };
    const uint8_t IV[] = { 0xb0,0x06,0x77,0x9c,0x8e,0x4a,0x83,0x5d,0x98,0x14,0x9d,0x8f,0x06,0x04,0xa6,0xfc };
    const uint8_t PLAINTEXT[] = { 0x15,0x27,0xda,0xa9,0xff,0x0f,0x05,0xe8,0x28,0x53,0xa9,0xf2,0x80,0xbf,0xf7,0xf8 };
    const uint8_t CIPHERTEXT[] = { 0x66,0xa2,0xba,0x4c,0xc7,0xda,0xde,0x55,0x65,0xb1,0xb8,0x64,0x45,0x98,0x5b,0xc2 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-98", "[OFB][MCT][192][ENCRYPT][n98]") {
    const uint8_t KEY[] = { 0xb2,0x5d,0x13,0xc6,0x0f,0xc6,0xa7,0xf3,0x98,0x75,0xc2,0x7a,0x95,0x85,0xd5,0x19,0x1a,0x3c,0x16,0xfb,0xeb,0x7d,0xe7,0x81 };
    const uint8_t IV[] = { 0x66,0xa2,0xba,0x4c,0xc7,0xda,0xde,0x55,0x65,0xb1,0xb8,0x64,0x45,0x98,0x5b,0xc2 };
    const uint8_t PLAINTEXT[] = { 0xee,0xf6,0x48,0x64,0x88,0xa4,0xf6,0x4c,0xc5,0x24,0x27,0xe5,0x14,0x25,0xb5,0x28 };
    const uint8_t CIPHERTEXT[] = { 0x2c,0xe4,0x86,0x9f,0xd7,0xc0,0x87,0x80,0xf5,0x5d,0x43,0xfd,0xd8,0x87,0xf5,0x71 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-ENCRYPT-99", "[OFB][MCT][192][ENCRYPT][n99]") {
    const uint8_t KEY[] = { 0x79,0x0b,0xc3,0xa6,0x65,0x99,0x5a,0xbf,0xb4,0x91,0x44,0xe5,0x42,0x45,0x52,0x99,0xef,0x61,0x55,0x06,0x33,0xfa,0x12,0xf0 };
    const uint8_t IV[] = { 0x2c,0xe4,0x86,0x9f,0xd7,0xc0,0x87,0x80,0xf5,0x5d,0x43,0xfd,0xd8,0x87,0xf5,0x71 };
    const uint8_t PLAINTEXT[] = { 0xc5,0x32,0xd3,0xfd,0xf2,0x2a,0x5f,0xfc,0xcb,0x56,0xd0,0x60,0x6a,0x5f,0xfd,0x4c };
    const uint8_t CIPHERTEXT[] = { 0xfd,0x6d,0xd0,0x01,0x5e,0x13,0x5d,0x74,0xfd,0xeb,0x67,0xe9,0x27,0x23,0x5d,0xd1 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-0", "[OFB][MCT][192][DECRYPT][n0]") {
    const uint8_t KEY[] = { 0xc7,0x97,0x65,0xec,0x6e,0xd6,0x47,0xaa,0x50,0x23,0xc7,0x30,0xe7,0x1c,0xde,0x29,0x89,0xd2,0x25,0x53,0x48,0x20,0xe0,0x78 };
    const uint8_t IV[] = { 0x4f,0x03,0x2f,0xfe,0x0b,0x2a,0xe6,0x98,0x47,0x98,0x7b,0x82,0xcd,0x7c,0xaa,0x99 };
    const uint8_t PLAINTEXT[] = { 0x28,0x0d,0xab,0x0a,0x26,0x41,0x79,0xdd,0xc7,0xa5,0x56,0x45,0x18,0xdd,0xf6,0x41 };
    const uint8_t CIPHERTEXT[] = { 0x99,0x83,0xce,0x04,0x8f,0x19,0xef,0x40,0x43,0x05,0x4c,0x03,0xaa,0x01,0x0b,0xee };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-1", "[OFB][MCT][192][DECRYPT][n1]") {
    const uint8_t KEY[] = { 0x7d,0x09,0x26,0x00,0xb1,0x00,0x61,0x74,0x78,0x2e,0x6c,0x3a,0xc1,0x5d,0xa7,0xf4,0x4e,0x77,0x73,0x16,0x50,0xfd,0x16,0x39 };
    const uint8_t IV[] = { 0x28,0x0d,0xab,0x0a,0x26,0x41,0x79,0xdd,0xc7,0xa5,0x56,0x45,0x18,0xdd,0xf6,0x41 };
    const uint8_t PLAINTEXT[] = { 0x5c,0x17,0xa2,0x37,0xa2,0x23,0x80,0xef,0x2f,0xdb,0xab,0xcd,0x7f,0x2b,0xc5,0x13 };
    const uint8_t CIPHERTEXT[] = { 0x14,0xa9,0xa7,0xba,0x28,0x91,0x94,0x5e,0xba,0x9e,0x43,0xec,0xdf,0xd6,0x26,0xde };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-2", "[OFB][MCT][192][DECRYPT][n2]") {
    const uint8_t KEY[] = { 0xca,0x9b,0x73,0x1e,0xbd,0xa2,0x2e,0xf9,0x24,0x39,0xce,0x0d,0x63,0x7e,0x27,0x1b,0x61,0xac,0xd8,0xdb,0x2f,0xd6,0xd3,0x2a };
    const uint8_t IV[] = { 0x5c,0x17,0xa2,0x37,0xa2,0x23,0x80,0xef,0x2f,0xdb,0xab,0xcd,0x7f,0x2b,0xc5,0x13 };
    const uint8_t PLAINTEXT[] = { 0x23,0x6a,0x21,0xb9,0xe8,0xea,0x74,0xb4,0x03,0x5a,0x37,0xcb,0x40,0xde,0x51,0xb1 };
    const uint8_t CIPHERTEXT[] = { 0x8f,0x9f,0xf3,0xd9,0x6d,0x23,0x2d,0x0c,0xb7,0x92,0x55,0x1e,0x0c,0xa2,0x4f,0x8d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-3", "[OFB][MCT][192][DECRYPT][n3]") {
    const uint8_t KEY[] = { 0x1e,0x05,0x57,0x3a,0xe9,0x3e,0x80,0xb0,0x07,0x53,0xef,0xb4,0x8b,0x94,0x53,0xaf,0x62,0xf6,0xef,0x10,0x6f,0x08,0x82,0x9b };
    const uint8_t IV[] = { 0x23,0x6a,0x21,0xb9,0xe8,0xea,0x74,0xb4,0x03,0x5a,0x37,0xcb,0x40,0xde,0x51,0xb1 };
    const uint8_t PLAINTEXT[] = { 0x3a,0x76,0x33,0x46,0x44,0xf3,0xde,0x1e,0x2d,0x26,0xd7,0xb6,0x5b,0x49,0xb7,0xf9 };
    const uint8_t CIPHERTEXT[] = { 0x80,0x92,0x66,0x16,0x66,0xa5,0x79,0xee,0xd4,0x9e,0x24,0x24,0x54,0x9c,0xae,0x49 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-4", "[OFB][MCT][192][DECRYPT][n4]") {
    const uint8_t KEY[] = { 0x3f,0x9d,0x48,0xc8,0x38,0x1a,0x21,0x82,0x3d,0x25,0xdc,0xf2,0xcf,0x67,0x8d,0xb1,0x4f,0xd0,0x38,0xa6,0x34,0x41,0x35,0x62 };
    const uint8_t IV[] = { 0x3a,0x76,0x33,0x46,0x44,0xf3,0xde,0x1e,0x2d,0x26,0xd7,0xb6,0x5b,0x49,0xb7,0xf9 };
    const uint8_t PLAINTEXT[] = { 0x43,0x6e,0xb9,0x8c,0x21,0x13,0x3d,0x94,0x93,0xc5,0x0e,0x96,0x1d,0xb6,0x4b,0x26 };
    const uint8_t CIPHERTEXT[] = { 0xf8,0x87,0xda,0x1f,0x4f,0xc1,0xa2,0x8d,0x21,0x98,0x1f,0xf2,0xd1,0x24,0xa1,0x32 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-5", "[OFB][MCT][192][DECRYPT][n5]") {
    const uint8_t KEY[] = { 0xba,0x48,0x81,0x9b,0x00,0x11,0x40,0x47,0x7e,0x4b,0x65,0x7e,0xee,0x74,0xb0,0x25,0xdc,0x15,0x36,0x30,0x29,0xf7,0x7e,0x44 };
    const uint8_t IV[] = { 0x43,0x6e,0xb9,0x8c,0x21,0x13,0x3d,0x94,0x93,0xc5,0x0e,0x96,0x1d,0xb6,0x4b,0x26 };
    const uint8_t PLAINTEXT[] = { 0xec,0xc5,0x7b,0x29,0xff,0xba,0x29,0x5e,0xda,0xa4,0xc6,0xac,0x36,0x66,0x7d,0xa4 };
    const uint8_t CIPHERTEXT[] = { 0x0e,0xe0,0x79,0x79,0x3a,0x64,0x6d,0x91,0x85,0xd5,0xc9,0x53,0x38,0x0b,0x61,0xc5 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-6", "[OFB][MCT][192][DECRYPT][n6]") {
    const uint8_t KEY[] = { 0x47,0x80,0x68,0x6f,0x39,0x0f,0x62,0x1a,0x92,0x8e,0x1e,0x57,0x11,0xce,0x99,0x7b,0x06,0xb1,0xf0,0x9c,0x1f,0x91,0x03,0xe0 };
    const uint8_t IV[] = { 0xec,0xc5,0x7b,0x29,0xff,0xba,0x29,0x5e,0xda,0xa4,0xc6,0xac,0x36,0x66,0x7d,0xa4 };
    const uint8_t PLAINTEXT[] = { 0x17,0xab,0xa0,0xb8,0x95,0x0a,0xfb,0x97,0x8a,0x14,0x9e,0x68,0x11,0xba,0x3f,0x3a };
    const uint8_t CIPHERTEXT[] = { 0x37,0xe6,0xc9,0x9f,0x64,0x2a,0x9a,0xa0,0xfd,0xc8,0xe9,0xf4,0x39,0x1e,0x22,0x5d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-7", "[OFB][MCT][192][DECRYPT][n7]") {
    const uint8_t KEY[] = { 0x22,0x92,0x86,0xa8,0xfa,0x04,0xdf,0xd2,0x85,0x25,0xbe,0xef,0x84,0xc4,0x62,0xec,0x8c,0xa5,0x6e,0xf4,0x0e,0x2b,0x3c,0xda };
    const uint8_t IV[] = { 0x17,0xab,0xa0,0xb8,0x95,0x0a,0xfb,0x97,0x8a,0x14,0x9e,0x68,0x11,0xba,0x3f,0x3a };
    const uint8_t PLAINTEXT[] = { 0x65,0xc9,0x15,0x34,0xda,0xad,0x4c,0x16,0xb4,0xea,0x40,0x8f,0xa4,0x79,0xd2,0x00 };
    const uint8_t CIPHERTEXT[] = { 0xfd,0x99,0x64,0xa1,0x74,0x39,0x19,0x7d,0x65,0x12,0xee,0xc7,0xc3,0x0b,0xbd,0xc8 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-8", "[OFB][MCT][192][DECRYPT][n8]") {
    const uint8_t KEY[] = { 0x11,0x7a,0x03,0x7c,0x4c,0x16,0xcf,0x8d,0xe0,0xec,0xab,0xdb,0x5e,0x69,0x2e,0xfa,0x38,0x4f,0x2e,0x7b,0xaa,0x52,0xee,0xda };
    const uint8_t IV[] = { 0x65,0xc9,0x15,0x34,0xda,0xad,0x4c,0x16,0xb4,0xea,0x40,0x8f,0xa4,0x79,0xd2,0x00 };
    const uint8_t PLAINTEXT[] = { 0x37,0x59,0x29,0x3f,0xe0,0x58,0xbf,0x31,0xe2,0x7e,0x0d,0x3c,0x9a,0xe8,0x77,0x9a };
    const uint8_t CIPHERTEXT[] = { 0x14,0x1a,0xf6,0x9d,0x3f,0x04,0x80,0x90,0x33,0xe8,0x85,0xd4,0xb6,0x12,0x10,0x5f };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-9", "[OFB][MCT][192][DECRYPT][n9]") {
    const uint8_t KEY[] = { 0xd0,0xe1,0xbc,0xfb,0xe8,0x95,0xc4,0x7c,0xd7,0xb5,0x82,0xe4,0xbe,0x31,0x91,0xcb,0xda,0x31,0x23,0x47,0x30,0xba,0x99,0x40 };
    const uint8_t IV[] = { 0x37,0x59,0x29,0x3f,0xe0,0x58,0xbf,0x31,0xe2,0x7e,0x0d,0x3c,0x9a,0xe8,0x77,0x9a };
    const uint8_t PLAINTEXT[] = { 0x60,0x35,0x75,0x71,0xa3,0x6a,0x16,0xb9,0x99,0x1d,0x09,0x88,0xeb,0x88,0x2e,0x1d };
    const uint8_t CIPHERTEXT[] = { 0x1f,0xff,0x3d,0xcc,0x73,0x57,0xcb,0x92,0xc1,0x9b,0xbf,0x87,0xa4,0x83,0x0b,0xf1 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-10", "[OFB][MCT][192][DECRYPT][n10]") {
    const uint8_t KEY[] = { 0x79,0x8b,0xf9,0x28,0xb5,0x2a,0xa2,0x6d,0xb7,0x80,0xf7,0x95,0x1d,0x5b,0x87,0x72,0x43,0x2c,0x2a,0xcf,0xdb,0x32,0xb7,0x5d };
    const uint8_t IV[] = { 0x60,0x35,0x75,0x71,0xa3,0x6a,0x16,0xb9,0x99,0x1d,0x09,0x88,0xeb,0x88,0x2e,0x1d };
    const uint8_t PLAINTEXT[] = { 0xb7,0x44,0x7e,0x33,0xc1,0xba,0xa9,0x4c,0xa6,0xce,0xfe,0x95,0x08,0x7e,0x4c,0x56 };
    const uint8_t CIPHERTEXT[] = { 0x63,0xc1,0x65,0x2c,0xfe,0xbc,0x60,0x01,0xa9,0x6a,0x45,0xd3,0x5d,0xbf,0x66,0x11 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-11", "[OFB][MCT][192][DECRYPT][n11]") {
    const uint8_t KEY[] = { 0x1b,0x89,0xda,0x87,0xe4,0xf0,0x56,0xea,0x00,0xc4,0x89,0xa6,0xdc,0xe1,0x2e,0x3e,0xe5,0xe2,0xd4,0x5a,0xd3,0x4c,0xfb,0x0b };
    const uint8_t IV[] = { 0xb7,0x44,0x7e,0x33,0xc1,0xba,0xa9,0x4c,0xa6,0xce,0xfe,0x95,0x08,0x7e,0x4c,0x56 };
    const uint8_t PLAINTEXT[] = { 0x40,0xba,0x4a,0x58,0x4e,0x94,0xd9,0x9b,0xf5,0xfd,0x51,0x2d,0x33,0xeb,0x42,0xfb };
    const uint8_t CIPHERTEXT[] = { 0x2b,0x10,0x33,0x55,0x93,0x45,0x61,0x12,0x62,0x02,0x23,0xaf,0x51,0xda,0xf4,0x87 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-12", "[OFB][MCT][192][DECRYPT][n12]") {
    const uint8_t KEY[] = { 0x36,0x98,0xf2,0xb3,0xb8,0x26,0x76,0x81,0x40,0x7e,0xc3,0xfe,0x92,0x75,0xf7,0xa5,0x10,0x1f,0x85,0x77,0xe0,0xa7,0xb9,0xf0 };
    const uint8_t IV[] = { 0x40,0xba,0x4a,0x58,0x4e,0x94,0xd9,0x9b,0xf5,0xfd,0x51,0x2d,0x33,0xeb,0x42,0xfb };
    const uint8_t PLAINTEXT[] = { 0x4d,0x96,0x67,0xa8,0x6d,0x55,0xe7,0xab,0x86,0x49,0xaa,0x99,0xad,0x9a,0xc4,0xfc };
    const uint8_t CIPHERTEXT[] = { 0xef,0x74,0xa4,0xfd,0x65,0x84,0x75,0x02,0x2d,0x11,0x28,0x34,0x5c,0xd6,0x20,0x6b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-13", "[OFB][MCT][192][DECRYPT][n13]") {
    const uint8_t KEY[] = { 0xe9,0xa4,0x7b,0x72,0x9f,0x93,0x49,0x75,0x0d,0xe8,0xa4,0x56,0xff,0x20,0x10,0x0e,0x96,0x56,0x2f,0xee,0x4d,0x3d,0x7d,0x0c };
    const uint8_t IV[] = { 0x4d,0x96,0x67,0xa8,0x6d,0x55,0xe7,0xab,0x86,0x49,0xaa,0x99,0xad,0x9a,0xc4,0xfc };
    const uint8_t PLAINTEXT[] = { 0xf0,0x9b,0xff,0x8e,0xe6,0x0d,0x8f,0x8d,0xef,0x17,0x61,0x28,0x91,0x69,0x12,0xe4 };
    const uint8_t CIPHERTEXT[] = { 0x40,0xd3,0x45,0x7b,0x2e,0x4a,0x9e,0x6f,0xdf,0x3c,0x89,0xc1,0x27,0xb5,0x3f,0xf4 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-14", "[OFB][MCT][192][DECRYPT][n14]") {
    const uint8_t KEY[] = { 0xb1,0x78,0xcb,0x9e,0xfe,0xd2,0x9f,0x03,0xfd,0x73,0x5b,0xd8,0x19,0x2d,0x9f,0x83,0x79,0x41,0x4e,0xc6,0xdc,0x54,0x6f,0xe8 };
    const uint8_t IV[] = { 0xf0,0x9b,0xff,0x8e,0xe6,0x0d,0x8f,0x8d,0xef,0x17,0x61,0x28,0x91,0x69,0x12,0xe4 };
    const uint8_t PLAINTEXT[] = { 0x5f,0xf9,0xdd,0xc5,0x30,0x9e,0x9d,0xeb,0xa6,0x23,0x6f,0x31,0x05,0x40,0x5c,0x2e };
    const uint8_t CIPHERTEXT[] = { 0xa1,0x95,0xd4,0x78,0xa9,0x40,0x10,0xde,0x58,0xdc,0xb0,0xec,0x61,0x41,0xd6,0x76 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-15", "[OFB][MCT][192][DECRYPT][n15]") {
    const uint8_t KEY[] = { 0x90,0x89,0x76,0x6b,0xfc,0xa7,0x5e,0x5a,0xa2,0x8a,0x86,0x1d,0x29,0xb3,0x02,0x68,0xdf,0x62,0x21,0xf7,0xd9,0x14,0x33,0xc6 };
    const uint8_t IV[] = { 0x5f,0xf9,0xdd,0xc5,0x30,0x9e,0x9d,0xeb,0xa6,0x23,0x6f,0x31,0x05,0x40,0x5c,0x2e };
    const uint8_t PLAINTEXT[] = { 0xe1,0xc3,0xbc,0x34,0xfb,0x4c,0x0b,0x13,0x92,0xe7,0x68,0xad,0x25,0x49,0x9d,0xd0 };
    const uint8_t CIPHERTEXT[] = { 0xd4,0xd2,0x07,0x3e,0x6c,0x3b,0xac,0x71,0x21,0xf1,0xbd,0xf5,0x02,0x75,0xc1,0x59 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-16", "[OFB][MCT][192][DECRYPT][n16]") {
    const uint8_t KEY[] = { 0xb5,0x13,0x3a,0x53,0x4f,0x84,0x8c,0x26,0x43,0x49,0x3a,0x29,0xd2,0xff,0x09,0x7b,0x4d,0x85,0x49,0x5a,0xfc,0x5d,0xae,0x16 };
    const uint8_t IV[] = { 0xe1,0xc3,0xbc,0x34,0xfb,0x4c,0x0b,0x13,0x92,0xe7,0x68,0xad,0x25,0x49,0x9d,0xd0 };
    const uint8_t PLAINTEXT[] = { 0x6f,0xf6,0xc3,0xc2,0xd1,0xf0,0x8d,0xc1,0xd7,0xd2,0xe7,0xe5,0xa3,0x50,0xcb,0xb4 };
    const uint8_t CIPHERTEXT[] = { 0x4c,0x98,0xb6,0x7a,0xcf,0xb5,0xe2,0xd0,0x25,0x9a,0x4c,0x38,0xb3,0x23,0xd2,0x7c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-17", "[OFB][MCT][192][DECRYPT][n17]") {
    const uint8_t KEY[] = { 0x2b,0xad,0x3d,0xfa,0xe2,0x2f,0x8d,0x39,0x2c,0xbf,0xf9,0xeb,0x03,0x0f,0x84,0xba,0x9a,0x57,0xae,0xbf,0x5f,0x0d,0x65,0xa2 };
    const uint8_t IV[] = { 0x6f,0xf6,0xc3,0xc2,0xd1,0xf0,0x8d,0xc1,0xd7,0xd2,0xe7,0xe5,0xa3,0x50,0xcb,0xb4 };
    const uint8_t PLAINTEXT[] = { 0x60,0xfc,0xb4,0x78,0x50,0x6e,0x1d,0x90,0x65,0xda,0xfb,0xb3,0x2e,0x99,0x00,0x00 };
    const uint8_t CIPHERTEXT[] = { 0x90,0x77,0xa3,0xb8,0xf7,0xa4,0x16,0x08,0x9e,0xbe,0x07,0xa9,0xad,0xab,0x01,0x1f };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-18", "[OFB][MCT][192][DECRYPT][n18]") {
    const uint8_t KEY[] = { 0xaa,0xd9,0xe0,0xf1,0x33,0xd1,0xcd,0x02,0x4c,0x43,0x4d,0x93,0x53,0x61,0x99,0x2a,0xff,0x8d,0x55,0x0c,0x71,0x94,0x65,0xa2 };
    const uint8_t IV[] = { 0x60,0xfc,0xb4,0x78,0x50,0x6e,0x1d,0x90,0x65,0xda,0xfb,0xb3,0x2e,0x99,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x7e,0x2c,0x4c,0x40,0x5f,0xa1,0x46,0x68,0xf8,0xcd,0xea,0x3f,0x07,0xb5,0x81,0x86 };
    const uint8_t CIPHERTEXT[] = { 0xde,0x63,0x57,0x6e,0x12,0xdb,0xad,0xe5,0x81,0x74,0xdd,0x0b,0xd1,0xfe,0x40,0x3b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-19", "[OFB][MCT][192][DECRYPT][n19]") {
    const uint8_t KEY[] = { 0xd5,0x7e,0x52,0x41,0x42,0x9e,0x62,0x46,0x32,0x6f,0x01,0xd3,0x0c,0xc0,0xdf,0x42,0x07,0x40,0xbf,0x33,0x76,0x21,0xe4,0x24 };
    const uint8_t IV[] = { 0x7e,0x2c,0x4c,0x40,0x5f,0xa1,0x46,0x68,0xf8,0xcd,0xea,0x3f,0x07,0xb5,0x81,0x86 };
    const uint8_t PLAINTEXT[] = { 0x8c,0x02,0x6d,0xf0,0x88,0xff,0xc6,0x48,0xe0,0x81,0x51,0x95,0x21,0x88,0x01,0x25 };
    const uint8_t CIPHERTEXT[] = { 0x9c,0xd8,0xc6,0x03,0xd9,0xfd,0x9b,0xde,0x7f,0xa7,0xb2,0xb0,0x71,0x4f,0xaf,0x44 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-20", "[OFB][MCT][192][DECRYPT][n20]") {
    const uint8_t KEY[] = { 0xeb,0x99,0x0c,0x6c,0x7f,0x81,0x4b,0x4d,0xbe,0x6d,0x6c,0x23,0x84,0x3f,0x19,0x0a,0xe7,0xc1,0xee,0xa6,0x57,0xa9,0xe5,0x01 };
    const uint8_t IV[] = { 0x8c,0x02,0x6d,0xf0,0x88,0xff,0xc6,0x48,0xe0,0x81,0x51,0x95,0x21,0x88,0x01,0x25 };
    const uint8_t PLAINTEXT[] = { 0x67,0xaf,0xe7,0xef,0xd1,0x04,0x94,0xfd,0xfa,0x1f,0x88,0xcf,0x9c,0xa1,0x6e,0xd4 };
    const uint8_t CIPHERTEXT[] = { 0x98,0xfd,0xff,0x6e,0x76,0x4e,0xb5,0x52,0x3e,0xe7,0x5e,0x2d,0x3d,0x1f,0x29,0x0b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-21", "[OFB][MCT][192][DECRYPT][n21]") {
    const uint8_t KEY[] = { 0x97,0xd1,0xf9,0x5f,0x6d,0x8e,0x84,0x43,0xd9,0xc2,0x8b,0xcc,0x55,0x3b,0x8d,0xf7,0x1d,0xde,0x66,0x69,0xcb,0x08,0x8b,0xd5 };
    const uint8_t IV[] = { 0x67,0xaf,0xe7,0xef,0xd1,0x04,0x94,0xfd,0xfa,0x1f,0x88,0xcf,0x9c,0xa1,0x6e,0xd4 };
    const uint8_t PLAINTEXT[] = { 0xcf,0x83,0x70,0x60,0x13,0x3e,0x55,0x0a,0xe2,0xbb,0xd7,0x7c,0x13,0x1b,0x51,0x24 };
    const uint8_t CIPHERTEXT[] = { 0x7d,0x12,0x32,0xd1,0x3a,0xee,0x0d,0x95,0x7c,0x48,0xf5,0x33,0x12,0x0f,0xcf,0x0e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-22", "[OFB][MCT][192][DECRYPT][n22]") {
    const uint8_t KEY[] = { 0x99,0x8f,0x43,0xfe,0xb4,0x36,0xf3,0xb2,0x16,0x41,0xfb,0xac,0x46,0x05,0xd8,0xfd,0xff,0x65,0xb1,0x15,0xd8,0x13,0xda,0xf1 };
    const uint8_t IV[] = { 0xcf,0x83,0x70,0x60,0x13,0x3e,0x55,0x0a,0xe2,0xbb,0xd7,0x7c,0x13,0x1b,0x51,0x24 };
    const uint8_t PLAINTEXT[] = { 0xf6,0xe8,0x11,0x60,0x76,0xa2,0x94,0xf4,0x22,0x3a,0xc7,0x99,0x5e,0xab,0xa6,0xa3 };
    const uint8_t CIPHERTEXT[] = { 0x5c,0x6e,0x8a,0x22,0x20,0x3e,0xca,0xe9,0x0e,0x5e,0xba,0xa1,0xd9,0xb8,0x77,0xf1 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-23", "[OFB][MCT][192][DECRYPT][n23]") {
    const uint8_t KEY[] = { 0xef,0xca,0x5b,0xae,0x27,0xd3,0x68,0xc4,0xe0,0xa9,0xea,0xcc,0x30,0xa7,0x4c,0x09,0xdd,0x5f,0x76,0x8c,0x86,0xb8,0x7c,0x52 };
    const uint8_t IV[] = { 0xf6,0xe8,0x11,0x60,0x76,0xa2,0x94,0xf4,0x22,0x3a,0xc7,0x99,0x5e,0xab,0xa6,0xa3 };
    const uint8_t PLAINTEXT[] = { 0x93,0xf7,0xd2,0xfd,0x08,0xb7,0x1f,0x3b,0xa1,0x4f,0x8d,0xe7,0x26,0x90,0x24,0x4d };
    const uint8_t CIPHERTEXT[] = { 0x28,0x98,0xa5,0x4b,0x91,0xfa,0xfb,0xc8,0x76,0x45,0x18,0x50,0x93,0xe5,0x9b,0x76 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-24", "[OFB][MCT][192][DECRYPT][n24]") {
    const uint8_t KEY[] = { 0xb6,0x5c,0x8f,0x26,0x6d,0x02,0xa0,0x15,0x73,0x5e,0x38,0x31,0x38,0x10,0x53,0x32,0x7c,0x10,0xfb,0x6b,0xa0,0x28,0x58,0x1f };
    const uint8_t IV[] = { 0x93,0xf7,0xd2,0xfd,0x08,0xb7,0x1f,0x3b,0xa1,0x4f,0x8d,0xe7,0x26,0x90,0x24,0x4d };
    const uint8_t PLAINTEXT[] = { 0x25,0xb0,0xdf,0x0b,0x75,0xbc,0x7b,0xd8,0x04,0x8c,0x83,0x21,0xd4,0x99,0xc9,0xee };
    const uint8_t CIPHERTEXT[] = { 0xcf,0x0a,0x77,0xeb,0xf5,0x14,0x08,0x93,0x59,0x96,0xd4,0x88,0x4a,0xd1,0xc8,0xd1 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-25", "[OFB][MCT][192][DECRYPT][n25]") {
    const uint8_t KEY[] = { 0xdb,0xbf,0x5c,0x44,0x88,0x39,0x45,0xa0,0x56,0xee,0xe7,0x3a,0x4d,0xac,0x28,0xea,0x78,0x9c,0x78,0x4a,0x74,0xb1,0x91,0xf1 };
    const uint8_t IV[] = { 0x25,0xb0,0xdf,0x0b,0x75,0xbc,0x7b,0xd8,0x04,0x8c,0x83,0x21,0xd4,0x99,0xc9,0xee };
    const uint8_t PLAINTEXT[] = { 0x5b,0xcf,0x6b,0xdb,0xad,0xc7,0xb3,0xb8,0x34,0x29,0xe4,0xc7,0x34,0x28,0xf1,0x14 };
    const uint8_t CIPHERTEXT[] = { 0xfa,0x24,0x22,0xdc,0xf0,0xba,0x4f,0x57,0x6d,0xe3,0xd3,0x62,0xe5,0x3b,0xe5,0xb5 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-26", "[OFB][MCT][192][DECRYPT][n26]") {
    const uint8_t KEY[] = { 0xd6,0xcb,0xd2,0xed,0x32,0xc8,0x67,0x0d,0x0d,0x21,0x8c,0xe1,0xe0,0x6b,0x9b,0x52,0x4c,0xb5,0x9c,0x8d,0x40,0x99,0x60,0xe5 };
    const uint8_t IV[] = { 0x5b,0xcf,0x6b,0xdb,0xad,0xc7,0xb3,0xb8,0x34,0x29,0xe4,0xc7,0x34,0x28,0xf1,0x14 };
    const uint8_t PLAINTEXT[] = { 0xa5,0x41,0x79,0x29,0x11,0x2e,0x4e,0xc5,0x8c,0x90,0xa5,0xab,0x44,0x03,0x46,0x27 };
    const uint8_t CIPHERTEXT[] = { 0x45,0xe5,0x0b,0x0f,0x0b,0x87,0x13,0xaf,0x0d,0x74,0x8e,0xa9,0xba,0xf1,0x22,0xad };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-27", "[OFB][MCT][192][DECRYPT][n27]") {
    const uint8_t KEY[] = { 0x78,0x89,0x69,0x8b,0x0e,0x28,0xae,0x69,0xa8,0x60,0xf5,0xc8,0xf1,0x45,0xd5,0x97,0xc0,0x25,0x39,0x26,0x04,0x9a,0x26,0xc2 };
    const uint8_t IV[] = { 0xa5,0x41,0x79,0x29,0x11,0x2e,0x4e,0xc5,0x8c,0x90,0xa5,0xab,0x44,0x03,0x46,0x27 };
    const uint8_t PLAINTEXT[] = { 0x38,0xc9,0x45,0xe9,0x45,0x44,0xe4,0x12,0x60,0x9d,0xaf,0x8c,0x5d,0xee,0x91,0x42 };
    const uint8_t CIPHERTEXT[] = { 0xf8,0xa1,0x03,0x3d,0x79,0x6e,0x22,0x8e,0xae,0x42,0xbb,0x66,0x3c,0xe0,0xc9,0x64 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-28", "[OFB][MCT][192][DECRYPT][n28]") {
    const uint8_t KEY[] = { 0x66,0x0a,0x15,0x89,0x16,0xe5,0x26,0xee,0x90,0xa9,0xb0,0x21,0xb4,0x01,0x31,0x85,0xa0,0xb8,0x96,0xaa,0x59,0x74,0xb7,0x80 };
    const uint8_t IV[] = { 0x38,0xc9,0x45,0xe9,0x45,0x44,0xe4,0x12,0x60,0x9d,0xaf,0x8c,0x5d,0xee,0x91,0x42 };
    const uint8_t PLAINTEXT[] = { 0x15,0xbb,0x34,0x0e,0xdd,0xd8,0xf7,0xae,0xd5,0x2f,0x6d,0x19,0xd5,0x32,0xed,0xe2 };
    const uint8_t CIPHERTEXT[] = { 0x58,0x33,0xaa,0x1b,0xbd,0x9a,0x34,0x06,0x1e,0x83,0x7c,0x02,0x18,0xcd,0x88,0x87 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-29", "[OFB][MCT][192][DECRYPT][n29]") {
    const uint8_t KEY[] = { 0x12,0xad,0xb4,0xf7,0x26,0x67,0x75,0xba,0x85,0x12,0x84,0x2f,0x69,0xd9,0xc6,0x2b,0x75,0x97,0xfb,0xb3,0x8c,0x46,0x5a,0x62 };
    const uint8_t IV[] = { 0x15,0xbb,0x34,0x0e,0xdd,0xd8,0xf7,0xae,0xd5,0x2f,0x6d,0x19,0xd5,0x32,0xed,0xe2 };
    const uint8_t PLAINTEXT[] = { 0x64,0xf6,0xa5,0x37,0x2d,0x2a,0xe5,0x7c,0xcf,0x2d,0xc3,0xac,0xd9,0x02,0x80,0xdf };
    const uint8_t CIPHERTEXT[] = { 0xb2,0x77,0x5d,0xd5,0xee,0xba,0x65,0xc9,0x74,0xa7,0xa1,0x7e,0x30,0x82,0x53,0x54 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-30", "[OFB][MCT][192][DECRYPT][n30]") {
    const uint8_t KEY[] = { 0xb9,0x2e,0xaf,0xb4,0x6b,0x2b,0x4c,0xbf,0xe1,0xe4,0x21,0x18,0x44,0xf3,0x23,0x57,0xba,0xba,0x38,0x1f,0x55,0x44,0xda,0xbd };
    const uint8_t IV[] = { 0x64,0xf6,0xa5,0x37,0x2d,0x2a,0xe5,0x7c,0xcf,0x2d,0xc3,0xac,0xd9,0x02,0x80,0xdf };
    const uint8_t PLAINTEXT[] = { 0x9d,0x6c,0x6c,0x1b,0x40,0x17,0x91,0xcf,0x91,0x44,0x41,0xaa,0x13,0x08,0x97,0xa9 };
    const uint8_t CIPHERTEXT[] = { 0x18,0x11,0x59,0x79,0x94,0xb2,0x33,0x85,0xab,0x83,0x1b,0x43,0x4d,0x4c,0x39,0x05 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-31", "[OFB][MCT][192][DECRYPT][n31]") {
    const uint8_t KEY[] = { 0x3c,0x88,0x84,0x49,0x3e,0x6e,0x81,0x06,0x7c,0x88,0x4d,0x03,0x04,0xe4,0xb2,0x98,0x2b,0xfe,0x79,0xb5,0x46,0x4c,0x4d,0x14 };
    const uint8_t IV[] = { 0x9d,0x6c,0x6c,0x1b,0x40,0x17,0x91,0xcf,0x91,0x44,0x41,0xaa,0x13,0x08,0x97,0xa9 };
    const uint8_t PLAINTEXT[] = { 0xae,0xa0,0x7a,0xbb,0x1f,0xa7,0xa1,0xe7,0x99,0xba,0xb1,0xbf,0x55,0xed,0x89,0xd6 };
    const uint8_t CIPHERTEXT[] = { 0xbe,0xa5,0x83,0xf3,0xc0,0x99,0xa3,0x34,0x85,0xa6,0x2b,0xfd,0x55,0x45,0xcd,0xb9 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-32", "[OFB][MCT][192][DECRYPT][n32]") {
    const uint8_t KEY[] = { 0xd2,0xed,0x64,0x11,0x07,0x8f,0x56,0x99,0xd2,0x28,0x37,0xb8,0x1b,0x43,0x13,0x7f,0xb2,0x44,0xc8,0x0a,0x13,0xa1,0xc4,0xc2 };
    const uint8_t IV[] = { 0xae,0xa0,0x7a,0xbb,0x1f,0xa7,0xa1,0xe7,0x99,0xba,0xb1,0xbf,0x55,0xed,0x89,0xd6 };
    const uint8_t PLAINTEXT[] = { 0x21,0x03,0xd5,0x99,0xe1,0x25,0x9d,0x1a,0x15,0x50,0x51,0x4e,0xef,0x66,0xec,0x94 };
    const uint8_t CIPHERTEXT[] = { 0xa8,0x56,0x12,0x99,0x3e,0xa8,0xde,0x28,0xee,0x65,0xe0,0x58,0x39,0xe1,0xd7,0x9f };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-33", "[OFB][MCT][192][DECRYPT][n33]") {
    const uint8_t KEY[] = { 0x11,0x2a,0xe9,0xcb,0x4f,0x41,0x2e,0x1e,0xf3,0x2b,0xe2,0x21,0xfa,0x66,0x8e,0x65,0xa7,0x14,0x99,0x44,0xfc,0xc7,0x28,0x56 };
    const uint8_t IV[] = { 0x21,0x03,0xd5,0x99,0xe1,0x25,0x9d,0x1a,0x15,0x50,0x51,0x4e,0xef,0x66,0xec,0x94 };
    const uint8_t PLAINTEXT[] = { 0x75,0x89,0x32,0x8d,0xb2,0x01,0x22,0x61,0x1e,0x02,0xe2,0xd4,0xbd,0x1f,0x94,0x53 };
    const uint8_t CIPHERTEXT[] = { 0x2e,0x08,0xfc,0xbc,0xf4,0x93,0xa1,0x1f,0xc3,0xc7,0x8d,0xda,0x48,0xce,0x78,0x87 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-34", "[OFB][MCT][192][DECRYPT][n34]") {
    const uint8_t KEY[] = { 0x02,0xfd,0x31,0x47,0x1e,0x8c,0x67,0x53,0x86,0xa2,0xd0,0xac,0x48,0x67,0xac,0x04,0xb9,0x16,0x7b,0x90,0x41,0xd8,0xbc,0x05 };
    const uint8_t IV[] = { 0x75,0x89,0x32,0x8d,0xb2,0x01,0x22,0x61,0x1e,0x02,0xe2,0xd4,0xbd,0x1f,0x94,0x53 };
    const uint8_t PLAINTEXT[] = { 0xf6,0x9a,0x8d,0xc9,0x1a,0x9e,0xe3,0xa4,0x96,0xee,0x98,0x07,0x10,0xf0,0x22,0x85 };
    const uint8_t CIPHERTEXT[] = { 0x9c,0xad,0xb2,0x63,0xef,0xae,0x8f,0xf6,0x13,0xd7,0xd8,0x8c,0x51,0xcd,0x49,0x4d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-35", "[OFB][MCT][192][DECRYPT][n35]") {
    const uint8_t KEY[] = { 0x28,0xab,0xe8,0x0e,0xe9,0x2b,0xfa,0x1f,0x70,0x38,0x5d,0x65,0x52,0xf9,0x4f,0xa0,0x2f,0xf8,0xe3,0x97,0x51,0x28,0x9e,0x80 };
    const uint8_t IV[] = { 0xf6,0x9a,0x8d,0xc9,0x1a,0x9e,0xe3,0xa4,0x96,0xee,0x98,0x07,0x10,0xf0,0x22,0x85 };
    const uint8_t PLAINTEXT[] = { 0xeb,0x5d,0xab,0x38,0x5d,0x0c,0xaa,0xa0,0xb0,0xbe,0x2a,0xf4,0x92,0xd7,0x47,0x37 };
    const uint8_t CIPHERTEXT[] = { 0x8b,0xa6,0xbe,0x9c,0x72,0x1b,0x38,0xda,0x2a,0x56,0xd9,0x49,0xf7,0xa7,0x9d,0x4c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-36", "[OFB][MCT][192][DECRYPT][n36]") {
    const uint8_t KEY[] = { 0x2c,0x7f,0x08,0x1b,0x11,0x0e,0x2f,0xa0,0x9b,0x65,0xf6,0x5d,0x0f,0xf5,0xe5,0x00,0x9f,0x46,0xc9,0x63,0xc3,0xff,0xd9,0xb7 };
    const uint8_t IV[] = { 0xeb,0x5d,0xab,0x38,0x5d,0x0c,0xaa,0xa0,0xb0,0xbe,0x2a,0xf4,0x92,0xd7,0x47,0x37 };
    const uint8_t PLAINTEXT[] = { 0xd0,0x25,0x44,0x26,0x13,0x03,0xbf,0x24,0x50,0xb5,0x51,0x8f,0xfc,0xe3,0xbf,0x5d };
    const uint8_t CIPHERTEXT[] = { 0xa5,0x70,0x24,0xe8,0x30,0x7c,0x1f,0xc9,0x04,0xd4,0xe0,0x15,0xf8,0x25,0xd5,0xbf };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-37", "[OFB][MCT][192][DECRYPT][n37]") {
    const uint8_t KEY[] = { 0xfd,0xbd,0x7d,0xa6,0x94,0x7c,0x21,0x43,0x4b,0x40,0xb2,0x7b,0x1c,0xf6,0x5a,0x24,0xcf,0xf3,0x98,0xec,0x3f,0x1c,0x66,0xea };
    const uint8_t IV[] = { 0xd0,0x25,0x44,0x26,0x13,0x03,0xbf,0x24,0x50,0xb5,0x51,0x8f,0xfc,0xe3,0xbf,0x5d };
    const uint8_t PLAINTEXT[] = { 0x43,0x79,0x13,0x12,0x22,0x24,0x6d,0x56,0xa4,0xa8,0x58,0xb6,0x14,0xb8,0xeb,0xd6 };
    const uint8_t CIPHERTEXT[] = { 0x5d,0x9b,0x83,0xf9,0xd1,0x09,0xbb,0x78,0xd1,0xc2,0x75,0xbd,0x85,0x72,0x0e,0xe3 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-38", "[OFB][MCT][192][DECRYPT][n38]") {
    const uint8_t KEY[] = { 0x2f,0x21,0x46,0xf7,0x54,0x35,0x36,0xcc,0x08,0x39,0xa1,0x69,0x3e,0xd2,0x37,0x72,0x6b,0x5b,0xc0,0x5a,0x2b,0xa4,0x8d,0x3c };
    const uint8_t IV[] = { 0x43,0x79,0x13,0x12,0x22,0x24,0x6d,0x56,0xa4,0xa8,0x58,0xb6,0x14,0xb8,0xeb,0xd6 };
    const uint8_t PLAINTEXT[] = { 0x30,0x12,0xcb,0xd1,0xc6,0x0f,0x54,0xc6,0x21,0xb8,0x2b,0xa1,0x4d,0x5f,0x3b,0x39 };
    const uint8_t CIPHERTEXT[] = { 0x57,0x5f,0xce,0x98,0x7a,0x1e,0x7b,0x0a,0xd2,0x9c,0x3b,0x51,0xc0,0x49,0x17,0x8f };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-39", "[OFB][MCT][192][DECRYPT][n39]") {
    const uint8_t KEY[] = { 0x8a,0x95,0x0a,0x3d,0x59,0xd8,0x97,0xbb,0x38,0x2b,0x6a,0xb8,0xf8,0xdd,0x63,0xb4,0x4a,0xe3,0xeb,0xfb,0x66,0xfb,0xb6,0x05 };
    const uint8_t IV[] = { 0x30,0x12,0xcb,0xd1,0xc6,0x0f,0x54,0xc6,0x21,0xb8,0x2b,0xa1,0x4d,0x5f,0x3b,0x39 };
    const uint8_t PLAINTEXT[] = { 0xbd,0x84,0x67,0x56,0x0a,0xd4,0x78,0xde,0x91,0x98,0x1e,0x30,0x06,0x17,0xbc,0xf4 };
    const uint8_t CIPHERTEXT[] = { 0x48,0x6f,0xb1,0x7b,0xde,0x18,0x76,0xfa,0xa5,0xb4,0x4c,0xca,0x0d,0xed,0xa1,0x77 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-40", "[OFB][MCT][192][DECRYPT][n40]") {
    const uint8_t KEY[] = { 0xce,0x17,0x62,0x1f,0xa6,0x63,0xb1,0x31,0x85,0xaf,0x0d,0xee,0xf2,0x09,0x1b,0x6a,0xdb,0x7b,0xf5,0xcb,0x60,0xec,0x0a,0xf1 };
    const uint8_t IV[] = { 0xbd,0x84,0x67,0x56,0x0a,0xd4,0x78,0xde,0x91,0x98,0x1e,0x30,0x06,0x17,0xbc,0xf4 };
    const uint8_t PLAINTEXT[] = { 0x5a,0x1f,0xdc,0x1d,0x6f,0x2d,0x69,0x07,0x80,0xbe,0x9b,0xe6,0x7e,0xd1,0x1d,0x4b };
    const uint8_t CIPHERTEXT[] = { 0x09,0xf3,0xfd,0xd2,0xe8,0xc8,0x66,0x06,0x44,0x82,0x68,0x22,0xff,0xbb,0x26,0x8a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-41", "[OFB][MCT][192][DECRYPT][n41]") {
    const uint8_t KEY[] = { 0x24,0x35,0x27,0xe1,0x39,0x7a,0xfe,0x17,0xdf,0xb0,0xd1,0xf3,0x9d,0x24,0x72,0x6d,0x5b,0xc5,0x6e,0x2d,0x1e,0x3d,0x17,0xba };
    const uint8_t IV[] = { 0x5a,0x1f,0xdc,0x1d,0x6f,0x2d,0x69,0x07,0x80,0xbe,0x9b,0xe6,0x7e,0xd1,0x1d,0x4b };
    const uint8_t PLAINTEXT[] = { 0x63,0xc5,0x6b,0x27,0xac,0x11,0xf4,0xb0,0xcb,0xf8,0x1a,0x6f,0xe5,0xbd,0x86,0xf5 };
    const uint8_t CIPHERTEXT[] = { 0xa0,0x27,0x2f,0x90,0x7e,0x96,0x0d,0x94,0xea,0x22,0x45,0xfe,0x9f,0x19,0x4f,0x26 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-42", "[OFB][MCT][192][DECRYPT][n42]") {
    const uint8_t KEY[] = { 0xff,0x05,0x33,0xf9,0x56,0x2b,0x49,0xfb,0xbc,0x75,0xba,0xd4,0x31,0x35,0x86,0xdd,0x90,0x3d,0x74,0x42,0xfb,0x80,0x91,0x4f };
    const uint8_t IV[] = { 0x63,0xc5,0x6b,0x27,0xac,0x11,0xf4,0xb0,0xcb,0xf8,0x1a,0x6f,0xe5,0xbd,0x86,0xf5 };
    const uint8_t PLAINTEXT[] = { 0xa9,0xa4,0xd2,0x78,0xf0,0x8e,0x95,0x90,0x9b,0xb6,0x69,0xfe,0x71,0xf8,0x6f,0x06 };
    const uint8_t CIPHERTEXT[] = { 0xf1,0x9d,0x01,0x73,0x6a,0xa4,0x45,0x3d,0xdb,0x30,0x14,0x18,0x6f,0x51,0xb7,0xec };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-43", "[OFB][MCT][192][DECRYPT][n43]") {
    const uint8_t KEY[] = { 0x42,0x0c,0xdc,0x0a,0x2a,0x22,0x5c,0x8b,0x15,0xd1,0x68,0xac,0xc1,0xbb,0x13,0x4d,0x0b,0x8b,0x1d,0xbc,0x8a,0x78,0xfe,0x49 };
    const uint8_t IV[] = { 0xa9,0xa4,0xd2,0x78,0xf0,0x8e,0x95,0x90,0x9b,0xb6,0x69,0xfe,0x71,0xf8,0x6f,0x06 };
    const uint8_t PLAINTEXT[] = { 0x3a,0x3d,0xd9,0xed,0xc8,0x5c,0xda,0x66,0xca,0xf3,0x34,0x32,0x33,0x05,0xd8,0xa9 };
    const uint8_t CIPHERTEXT[] = { 0x76,0x1b,0x55,0x89,0x1a,0x42,0xe9,0x41,0xbd,0x09,0xef,0xf3,0x7c,0x09,0x15,0x70 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-44", "[OFB][MCT][192][DECRYPT][n44]") {
    const uint8_t KEY[] = { 0x5b,0xea,0x60,0x9a,0x5d,0x02,0xda,0x7b,0x2f,0xec,0xb1,0x41,0x09,0xe7,0xc9,0x2b,0xc1,0x78,0x29,0x8e,0xb9,0x7d,0x26,0xe0 };
    const uint8_t IV[] = { 0x3a,0x3d,0xd9,0xed,0xc8,0x5c,0xda,0x66,0xca,0xf3,0x34,0x32,0x33,0x05,0xd8,0xa9 };
    const uint8_t PLAINTEXT[] = { 0xea,0xf8,0x24,0x23,0x86,0x84,0x03,0xf6,0x3b,0x92,0x98,0x07,0x75,0x59,0x5f,0x4b };
    const uint8_t CIPHERTEXT[] = { 0xaa,0x4a,0x45,0xfc,0xbf,0xa3,0x86,0x8b,0x19,0xe6,0xbc,0x90,0x77,0x20,0x86,0xf0 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-45", "[OFB][MCT][192][DECRYPT][n45]") {
    const uint8_t KEY[] = { 0xa5,0xfe,0xe2,0x3c,0x1f,0x83,0x6d,0xff,0xc5,0x14,0x95,0x62,0x8f,0x63,0xca,0xdd,0xfa,0xea,0xb1,0x89,0xcc,0x24,0x79,0xab };
    const uint8_t IV[] = { 0xea,0xf8,0x24,0x23,0x86,0x84,0x03,0xf6,0x3b,0x92,0x98,0x07,0x75,0x59,0x5f,0x4b };
    const uint8_t PLAINTEXT[] = { 0x30,0xaa,0x44,0xb4,0xc7,0xa5,0xa4,0xde,0xd7,0x3b,0x93,0x46,0xe4,0xc8,0x99,0xf1 };
    const uint8_t CIPHERTEXT[] = { 0x9a,0x83,0xc7,0xc3,0x28,0xf4,0x64,0xf9,0xfe,0x14,0x82,0xa6,0x42,0x81,0xb7,0x84 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-46", "[OFB][MCT][192][DECRYPT][n46]") {
    const uint8_t KEY[] = { 0xaf,0x7a,0x1c,0x0c,0x90,0x80,0xb8,0xdd,0xf5,0xbe,0xd1,0xd6,0x48,0xc6,0x6e,0x03,0x2d,0xd1,0x22,0xcf,0x28,0xec,0xe0,0x5a };
    const uint8_t IV[] = { 0x30,0xaa,0x44,0xb4,0xc7,0xa5,0xa4,0xde,0xd7,0x3b,0x93,0x46,0xe4,0xc8,0x99,0xf1 };
    const uint8_t PLAINTEXT[] = { 0x3d,0xa9,0x55,0xf9,0xd2,0x19,0xa1,0xe6,0x88,0x4b,0xdd,0x29,0xc2,0x7a,0x88,0x23 };
    const uint8_t CIPHERTEXT[] = { 0xe1,0xe1,0x35,0xf0,0xa4,0x45,0xf8,0xb9,0x0a,0x84,0xfe,0x30,0x8f,0x03,0xd5,0x22 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-47", "[OFB][MCT][192][DECRYPT][n47]") {
    const uint8_t KEY[] = { 0xdd,0x71,0x1e,0x48,0xd6,0xe1,0xe8,0x25,0xc8,0x17,0x84,0x2f,0x9a,0xdf,0xcf,0xe5,0xa5,0x9a,0xff,0xe6,0xea,0x96,0x68,0x79 };
    const uint8_t IV[] = { 0x3d,0xa9,0x55,0xf9,0xd2,0x19,0xa1,0xe6,0x88,0x4b,0xdd,0x29,0xc2,0x7a,0x88,0x23 };
    const uint8_t PLAINTEXT[] = { 0x99,0x7f,0xde,0x84,0x8b,0x4f,0x84,0xc4,0xc8,0xce,0x08,0x0c,0x47,0x8e,0x40,0xac };
    const uint8_t CIPHERTEXT[] = { 0x9e,0xbe,0xeb,0xf2,0x14,0xdf,0x2a,0xd6,0x72,0x0b,0x02,0x44,0x46,0x61,0x50,0xf8 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-48", "[OFB][MCT][192][DECRYPT][n48]") {
    const uint8_t KEY[] = { 0x03,0x08,0x8e,0x78,0xa1,0x83,0x7f,0x2b,0x51,0x68,0x5a,0xab,0x11,0x90,0x4b,0x21,0x6d,0x54,0xf7,0xea,0xad,0x18,0x28,0xd5 };
    const uint8_t IV[] = { 0x99,0x7f,0xde,0x84,0x8b,0x4f,0x84,0xc4,0xc8,0xce,0x08,0x0c,0x47,0x8e,0x40,0xac };
    const uint8_t PLAINTEXT[] = { 0x51,0xc1,0x20,0x74,0xc3,0xbc,0x39,0x2e,0xf1,0x2f,0xc2,0x82,0x6f,0xbc,0x1e,0x9d };
    const uint8_t CIPHERTEXT[] = { 0x00,0xe9,0x23,0x40,0x46,0x99,0x42,0x5e,0xde,0x79,0x90,0x30,0x77,0x62,0x97,0x0e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-49", "[OFB][MCT][192][DECRYPT][n49]") {
    const uint8_t KEY[] = { 0x3c,0x72,0x22,0x20,0x34,0x20,0x84,0x9c,0x00,0xa9,0x7a,0xdf,0xd2,0x2c,0x72,0x0f,0x9c,0x7b,0x35,0x68,0xc2,0xa4,0x36,0x48 };
    const uint8_t IV[] = { 0x51,0xc1,0x20,0x74,0xc3,0xbc,0x39,0x2e,0xf1,0x2f,0xc2,0x82,0x6f,0xbc,0x1e,0x9d };
    const uint8_t PLAINTEXT[] = { 0xb6,0xff,0xe1,0x1b,0x17,0xeb,0xcf,0xe8,0xa8,0x6a,0x54,0xe6,0xe8,0x2c,0x8b,0x00 };
    const uint8_t CIPHERTEXT[] = { 0x0b,0xeb,0x65,0xfe,0x1a,0xa5,0x4c,0x6c,0x3f,0x7a,0xac,0x58,0x95,0xa3,0xfb,0xb7 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-50", "[OFB][MCT][192][DECRYPT][n50]") {
    const uint8_t KEY[] = { 0x5e,0x77,0x8e,0xbc,0x38,0xf2,0xbc,0xb1,0xb6,0x56,0x9b,0xc4,0xc5,0xc7,0xbd,0xe7,0x34,0x11,0x61,0x8e,0x2a,0x88,0xbd,0x48 };
    const uint8_t IV[] = { 0xb6,0xff,0xe1,0x1b,0x17,0xeb,0xcf,0xe8,0xa8,0x6a,0x54,0xe6,0xe8,0x2c,0x8b,0x00 };
    const uint8_t PLAINTEXT[] = { 0x37,0x7a,0xc3,0xc1,0xb3,0xce,0xf4,0x80,0xf0,0x6b,0x3c,0x3d,0x46,0x5f,0x87,0x51 };
    const uint8_t CIPHERTEXT[] = { 0x8c,0xfa,0xc8,0xd4,0xf4,0xdb,0xb6,0xb0,0x62,0x05,0xac,0x9c,0x0c,0xd2,0x38,0x2d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-51", "[OFB][MCT][192][DECRYPT][n51]") {
    const uint8_t KEY[] = { 0x7a,0x13,0x0b,0x35,0xb2,0x26,0xc1,0x83,0x81,0x2c,0x58,0x05,0x76,0x09,0x49,0x67,0xc4,0x7a,0x5d,0xb3,0x6c,0xd7,0x3a,0x19 };
    const uint8_t IV[] = { 0x37,0x7a,0xc3,0xc1,0xb3,0xce,0xf4,0x80,0xf0,0x6b,0x3c,0x3d,0x46,0x5f,0x87,0x51 };
    const uint8_t PLAINTEXT[] = { 0xe5,0x49,0x94,0x7d,0xb2,0xff,0xdb,0x0b,0xd9,0x6a,0xb0,0x3c,0x07,0x69,0xb5,0x0f };
    const uint8_t CIPHERTEXT[] = { 0x3d,0xfd,0xe4,0x85,0xde,0x6d,0x62,0x8e,0x24,0x64,0x85,0x89,0x8a,0xd4,0x7d,0x32 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-52", "[OFB][MCT][192][DECRYPT][n52]") {
    const uint8_t KEY[] = { 0xd4,0x6a,0xd5,0xae,0x03,0xa2,0x96,0xcd,0x64,0x65,0xcc,0x78,0xc4,0xf6,0x92,0x6c,0x1d,0x10,0xed,0x8f,0x6b,0xbe,0x8f,0x16 };
    const uint8_t IV[] = { 0xe5,0x49,0x94,0x7d,0xb2,0xff,0xdb,0x0b,0xd9,0x6a,0xb0,0x3c,0x07,0x69,0xb5,0x0f };
    const uint8_t PLAINTEXT[] = { 0x28,0xa3,0xa1,0xb9,0x21,0x24,0x16,0x57,0xc3,0x2b,0x0c,0xda,0xca,0xff,0xa5,0x61 };
    const uint8_t CIPHERTEXT[] = { 0x73,0x84,0xd3,0x2e,0xbe,0xf5,0x31,0x23,0xae,0x79,0xde,0x9b,0xb1,0x84,0x57,0x4e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-53", "[OFB][MCT][192][DECRYPT][n53]") {
    const uint8_t KEY[] = { 0xc8,0xcb,0xc0,0x62,0xf4,0x6c,0x99,0xd7,0x4c,0xc6,0x6d,0xc1,0xe5,0xd2,0x84,0x3b,0xde,0x3b,0xe1,0x55,0xa1,0x41,0x2a,0x77 };
    const uint8_t IV[] = { 0x28,0xa3,0xa1,0xb9,0x21,0x24,0x16,0x57,0xc3,0x2b,0x0c,0xda,0xca,0xff,0xa5,0x61 };
    const uint8_t PLAINTEXT[] = { 0xa1,0xdf,0xb0,0x07,0x0b,0x42,0xe2,0x67,0xe5,0xbf,0x27,0x6d,0xb3,0x2c,0xfd,0x7a };
    const uint8_t CIPHERTEXT[] = { 0xb2,0x45,0x79,0xfa,0x22,0xcb,0x81,0xd6,0x1c,0xa1,0x15,0xcc,0xf7,0xce,0x0f,0x1a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-54", "[OFB][MCT][192][DECRYPT][n54]") {
    const uint8_t KEY[] = { 0xf9,0xf8,0x95,0x28,0x42,0x40,0x86,0x5c,0xed,0x19,0xdd,0xc6,0xee,0x90,0x66,0x5c,0x3b,0x84,0xc6,0x38,0x12,0x6d,0xd7,0x0d };
    const uint8_t IV[] = { 0xa1,0xdf,0xb0,0x07,0x0b,0x42,0xe2,0x67,0xe5,0xbf,0x27,0x6d,0xb3,0x2c,0xfd,0x7a };
    const uint8_t PLAINTEXT[] = { 0xb3,0x69,0xa6,0x36,0x5c,0xcc,0xfc,0x37,0xee,0xcd,0x45,0x87,0xdd,0xb3,0xfd,0x4b };
    const uint8_t CIPHERTEXT[] = { 0x52,0xa9,0x1c,0x4d,0xc2,0x7e,0xac,0xab,0x31,0x33,0x55,0x4a,0xb6,0x2c,0x1f,0x8b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-55", "[OFB][MCT][192][DECRYPT][n55]") {
    const uint8_t KEY[] = { 0xf7,0xc7,0xbd,0x0c,0xea,0xd6,0x39,0x44,0x5e,0x70,0x7b,0xf0,0xb2,0x5c,0x9a,0x6b,0xd5,0x49,0x83,0xbf,0xcf,0xde,0x2a,0x46 };
    const uint8_t IV[] = { 0xb3,0x69,0xa6,0x36,0x5c,0xcc,0xfc,0x37,0xee,0xcd,0x45,0x87,0xdd,0xb3,0xfd,0x4b };
    const uint8_t PLAINTEXT[] = { 0xc6,0xfd,0x01,0xe7,0x8f,0xa7,0xe5,0x25,0x2e,0x98,0x2e,0x39,0x11,0x88,0x8b,0xb2 };
    const uint8_t CIPHERTEXT[] = { 0xda,0x8c,0x6e,0xc7,0x17,0x42,0x91,0x59,0x0e,0x3f,0x28,0x24,0xa8,0x96,0xbf,0x18 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-56", "[OFB][MCT][192][DECRYPT][n56]") {
    const uint8_t KEY[] = { 0x54,0xb0,0x61,0x6e,0xb8,0x8e,0x4f,0x13,0x98,0x8d,0x7a,0x17,0x3d,0xfb,0x7f,0x4e,0xfb,0xd1,0xad,0x86,0xde,0x56,0xa1,0xf4 };
    const uint8_t IV[] = { 0xc6,0xfd,0x01,0xe7,0x8f,0xa7,0xe5,0x25,0x2e,0x98,0x2e,0x39,0x11,0x88,0x8b,0xb2 };
    const uint8_t PLAINTEXT[] = { 0x02,0xa2,0x36,0xb7,0x0d,0xc6,0xc5,0x78,0xd8,0xdd,0x0e,0xa1,0xc9,0x96,0x1b,0x77 };
    const uint8_t CIPHERTEXT[] = { 0x4b,0x5b,0xdd,0x69,0xfd,0x30,0xd6,0x5d,0xa3,0x77,0xdc,0x62,0x52,0x58,0x76,0x57 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-57", "[OFB][MCT][192][DECRYPT][n57]") {
    const uint8_t KEY[] = { 0x19,0x4c,0xc8,0x54,0xbc,0x23,0xcd,0xc9,0x9a,0x2f,0x4c,0xa0,0x30,0x3d,0xba,0x36,0x23,0x0c,0xa3,0x27,0x17,0xc0,0xba,0x83 };
    const uint8_t IV[] = { 0x02,0xa2,0x36,0xb7,0x0d,0xc6,0xc5,0x78,0xd8,0xdd,0x0e,0xa1,0xc9,0x96,0x1b,0x77 };
    const uint8_t PLAINTEXT[] = { 0x6c,0xe4,0x48,0xef,0x49,0x8f,0x96,0xa3,0xcd,0xe7,0x95,0x56,0x54,0x5d,0x03,0x29 };
    const uint8_t CIPHERTEXT[] = { 0x98,0x10,0x11,0xb1,0x42,0x64,0x33,0x1c,0x4d,0xfc,0xa9,0x3a,0x04,0xad,0x82,0xda };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-58", "[OFB][MCT][192][DECRYPT][n58]") {
    const uint8_t KEY[] = { 0xa7,0x3f,0x3f,0x6a,0x5d,0x7d,0x42,0xec,0xf6,0xcb,0x04,0x4f,0x79,0xb2,0x2c,0x95,0xee,0xeb,0x36,0x71,0x43,0x9d,0xb9,0xaa };
    const uint8_t IV[] = { 0x6c,0xe4,0x48,0xef,0x49,0x8f,0x96,0xa3,0xcd,0xe7,0x95,0x56,0x54,0x5d,0x03,0x29 };
    const uint8_t PLAINTEXT[] = { 0x99,0x38,0xd3,0x95,0xc4,0x8f,0x39,0xd4,0xbe,0x22,0x31,0x95,0xb3,0x62,0x79,0xdf };
    const uint8_t CIPHERTEXT[] = { 0xfa,0xd4,0x3c,0x6f,0xfd,0x2b,0x92,0xc2,0xbe,0x73,0xf7,0x3e,0xe1,0x5e,0x8f,0x25 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-59", "[OFB][MCT][192][DECRYPT][n59]") {
    const uint8_t KEY[] = { 0xb3,0x66,0x47,0xb8,0xf5,0xbb,0x0a,0x19,0x6f,0xf3,0xd7,0xda,0xbd,0x3d,0x15,0x41,0x50,0xc9,0x07,0xe4,0xf0,0xff,0xc0,0x75 };
    const uint8_t IV[] = { 0x99,0x38,0xd3,0x95,0xc4,0x8f,0x39,0xd4,0xbe,0x22,0x31,0x95,0xb3,0x62,0x79,0xdf };
    const uint8_t PLAINTEXT[] = { 0x8a,0x22,0x0d,0xdf,0x8a,0x1e,0xe5,0xac,0xad,0x14,0x8e,0x57,0x52,0xd1,0x60,0x2c };
    const uint8_t CIPHERTEXT[] = { 0x71,0xc8,0xe3,0x2a,0xd7,0xf2,0x33,0x83,0x14,0x59,0x78,0xd2,0xa8,0xc6,0x48,0xf5 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-60", "[OFB][MCT][192][DECRYPT][n60]") {
    const uint8_t KEY[] = { 0x25,0x8d,0xbb,0xf4,0x0b,0xb2,0xaa,0x89,0xe5,0xd1,0xda,0x05,0x37,0x23,0xf0,0xed,0xfd,0xdd,0x89,0xb3,0xa2,0x2e,0xa0,0x59 };
    const uint8_t IV[] = { 0x8a,0x22,0x0d,0xdf,0x8a,0x1e,0xe5,0xac,0xad,0x14,0x8e,0x57,0x52,0xd1,0x60,0x2c };
    const uint8_t PLAINTEXT[] = { 0xed,0x57,0xd1,0xb8,0xb1,0xb7,0x7a,0xc2,0x6d,0x3d,0xed,0x99,0x41,0xcb,0x6e,0x50 };
    const uint8_t CIPHERTEXT[] = { 0x89,0x22,0xf1,0x48,0x70,0xff,0x1f,0xee,0x96,0xeb,0xfc,0x4c,0xfe,0x09,0xa0,0x90 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-61", "[OFB][MCT][192][DECRYPT][n61]") {
    const uint8_t KEY[] = { 0x15,0x7d,0xd4,0x04,0x0d,0xb8,0x60,0x95,0x08,0x86,0x0b,0xbd,0x86,0x94,0x8a,0x2f,0x90,0xe0,0x64,0x2a,0xe3,0xe5,0xce,0x09 };
    const uint8_t IV[] = { 0xed,0x57,0xd1,0xb8,0xb1,0xb7,0x7a,0xc2,0x6d,0x3d,0xed,0x99,0x41,0xcb,0x6e,0x50 };
    const uint8_t PLAINTEXT[] = { 0x7c,0xf0,0x6c,0xc6,0xda,0x93,0x96,0xe7,0x3c,0xfc,0x16,0xee,0x70,0xd1,0xa4,0x28 };
    const uint8_t CIPHERTEXT[] = { 0x59,0xa0,0xc5,0x35,0xca,0x6d,0xb7,0xee,0x30,0xf0,0x6f,0xf0,0x06,0x0a,0xca,0x1c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-62", "[OFB][MCT][192][DECRYPT][n62]") {
    const uint8_t KEY[] = { 0x79,0x90,0xf9,0x41,0xc4,0x36,0x86,0x2e,0x74,0x76,0x67,0x7b,0x5c,0x07,0x1c,0xc8,0xac,0x1c,0x72,0xc4,0x93,0x34,0x6a,0x21 };
    const uint8_t IV[] = { 0x7c,0xf0,0x6c,0xc6,0xda,0x93,0x96,0xe7,0x3c,0xfc,0x16,0xee,0x70,0xd1,0xa4,0x28 };
    const uint8_t PLAINTEXT[] = { 0x28,0xb0,0x38,0x1b,0xe0,0xe9,0x94,0x99,0x0e,0xff,0x93,0x9c,0x1e,0x1f,0x5c,0xfe };
    const uint8_t CIPHERTEXT[] = { 0x45,0x8f,0x23,0x5e,0x93,0xf4,0x22,0xdd,0x6c,0xed,0x2d,0x45,0xc9,0x8e,0xe6,0xbb };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-63", "[OFB][MCT][192][DECRYPT][n63]") {
    const uint8_t KEY[] = { 0x7a,0xd6,0x6f,0x98,0xbc,0x22,0xd6,0xfa,0x5c,0xc6,0x5f,0x60,0xbc,0xee,0x88,0x51,0xa2,0xe3,0xe1,0x58,0x8d,0x2b,0x36,0xdf };
    const uint8_t IV[] = { 0x28,0xb0,0x38,0x1b,0xe0,0xe9,0x94,0x99,0x0e,0xff,0x93,0x9c,0x1e,0x1f,0x5c,0xfe };
    const uint8_t PLAINTEXT[] = { 0xdc,0xf9,0x65,0x9d,0xd0,0x6e,0xd8,0xdb,0xf8,0x08,0x35,0x40,0x0d,0x83,0x38,0x30 };
    const uint8_t CIPHERTEXT[] = { 0x7b,0x48,0x1c,0xcd,0x99,0x55,0xb2,0xc5,0x03,0x46,0x96,0xd9,0x78,0x14,0x50,0xd4 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-64", "[OFB][MCT][192][DECRYPT][n64]") {
    const uint8_t KEY[] = { 0xe8,0x97,0xb7,0x31,0xaa,0xf9,0xa4,0x80,0x80,0x3f,0x3a,0xfd,0x6c,0x80,0x50,0x8a,0x5a,0xeb,0xd4,0x18,0x80,0xa8,0x0e,0xef };
    const uint8_t IV[] = { 0xdc,0xf9,0x65,0x9d,0xd0,0x6e,0xd8,0xdb,0xf8,0x08,0x35,0x40,0x0d,0x83,0x38,0x30 };
    const uint8_t PLAINTEXT[] = { 0xa0,0xfb,0xed,0x8b,0x08,0xd3,0xe0,0x9b,0x29,0x2c,0xaa,0xc1,0xec,0x4e,0x30,0x09 };
    const uint8_t CIPHERTEXT[] = { 0x92,0xec,0x7e,0x93,0x1c,0xe9,0xa5,0x90,0x92,0x41,0xd8,0xa9,0x16,0xdb,0x72,0x7a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-65", "[OFB][MCT][192][DECRYPT][n65]") {
    const uint8_t KEY[] = { 0x79,0x16,0x06,0xd0,0x51,0xcc,0xfa,0xf8,0x20,0xc4,0xd7,0x76,0x64,0x53,0xb0,0x11,0x73,0xc7,0x7e,0xd9,0x6c,0xe6,0x3e,0xe6 };
    const uint8_t IV[] = { 0xa0,0xfb,0xed,0x8b,0x08,0xd3,0xe0,0x9b,0x29,0x2c,0xaa,0xc1,0xec,0x4e,0x30,0x09 };
    const uint8_t PLAINTEXT[] = { 0x6a,0x80,0x8c,0xda,0xb6,0xe8,0x40,0xc2,0x42,0xd7,0xaa,0xea,0x77,0x23,0x8b,0xa5 };
    const uint8_t CIPHERTEXT[] = { 0x66,0x91,0x7e,0x63,0xdf,0x19,0x45,0xb5,0x91,0x81,0xb1,0xe1,0xfb,0x35,0x5e,0x78 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-66", "[OFB][MCT][192][DECRYPT][n66]") {
    const uint8_t KEY[] = { 0x95,0x27,0x8b,0x5a,0x64,0x7e,0x14,0xb7,0x4a,0x44,0x5b,0xac,0xd2,0xbb,0xf0,0xd3,0x31,0x10,0xd4,0x33,0x1b,0xc5,0xb5,0x43 };
    const uint8_t IV[] = { 0x6a,0x80,0x8c,0xda,0xb6,0xe8,0x40,0xc2,0x42,0xd7,0xaa,0xea,0x77,0x23,0x8b,0xa5 };
    const uint8_t PLAINTEXT[] = { 0x7f,0x12,0x0a,0x9b,0x8d,0x57,0x50,0x59,0xab,0xa3,0x11,0x25,0xc8,0x19,0xda,0xcc };
    const uint8_t CIPHERTEXT[] = { 0x41,0x4a,0xd5,0xec,0x7f,0x87,0x6a,0xc6,0xec,0x31,0x8d,0x8a,0x35,0xb2,0xee,0x4f };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-67", "[OFB][MCT][192][DECRYPT][n67]") {
    const uint8_t KEY[] = { 0x2e,0xfb,0xeb,0xd8,0xa7,0xa8,0x2d,0xa4,0x35,0x56,0x51,0x37,0x5f,0xec,0xa0,0x8a,0x9a,0xb3,0xc5,0x16,0xd3,0xdc,0x6f,0x8f };
    const uint8_t IV[] = { 0x7f,0x12,0x0a,0x9b,0x8d,0x57,0x50,0x59,0xab,0xa3,0x11,0x25,0xc8,0x19,0xda,0xcc };
    const uint8_t PLAINTEXT[] = { 0x49,0x5a,0x79,0x73,0x6b,0xd1,0x41,0xef,0x8d,0xe3,0xcf,0x5e,0x75,0x0d,0xb3,0x6b };
    const uint8_t CIPHERTEXT[] = { 0x09,0xbf,0xe0,0xd9,0x69,0x77,0x0e,0x23,0xbb,0xdc,0x60,0x82,0xc3,0xd6,0x39,0x13 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-68", "[OFB][MCT][192][DECRYPT][n68]") {
    const uint8_t KEY[] = { 0x9e,0xe6,0xfb,0xbd,0x88,0x64,0x1c,0x33,0x7c,0x0c,0x28,0x44,0x34,0x3d,0xe1,0x65,0x17,0x50,0x0a,0x48,0xa6,0xd1,0xdc,0xe4 };
    const uint8_t IV[] = { 0x49,0x5a,0x79,0x73,0x6b,0xd1,0x41,0xef,0x8d,0xe3,0xcf,0x5e,0x75,0x0d,0xb3,0x6b };
    const uint8_t PLAINTEXT[] = { 0x39,0xd7,0xa2,0x62,0x0a,0xf1,0x2f,0x2e,0xda,0x52,0x4d,0x9c,0xe8,0x73,0x0d,0xc0 };
    const uint8_t CIPHERTEXT[] = { 0x8a,0x28,0x63,0xfa,0xde,0x54,0xca,0xec,0xb0,0x1d,0x10,0x65,0x2f,0xcc,0x31,0x97 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-69", "[OFB][MCT][192][DECRYPT][n69]") {
    const uint8_t KEY[] = { 0x57,0x55,0x68,0x35,0x73,0x91,0x63,0x93,0x45,0xdb,0x8a,0x26,0x3e,0xcc,0xce,0x4b,0xcd,0x02,0x47,0xd4,0x4e,0xa2,0xd1,0x24 };
    const uint8_t IV[] = { 0x39,0xd7,0xa2,0x62,0x0a,0xf1,0x2f,0x2e,0xda,0x52,0x4d,0x9c,0xe8,0x73,0x0d,0xc0 };
    const uint8_t PLAINTEXT[] = { 0xe7,0x55,0xf0,0xb5,0x5f,0xa4,0xbc,0x82,0x64,0x95,0xcd,0x14,0xdc,0x57,0x8f,0x95 };
    const uint8_t CIPHERTEXT[] = { 0x68,0xc7,0x85,0x54,0x0a,0x19,0xe5,0x26,0xc9,0xb3,0x93,0x88,0xfb,0xf5,0x7f,0xa0 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-70", "[OFB][MCT][192][DECRYPT][n70]") {
    const uint8_t KEY[] = { 0x30,0xce,0x2b,0x41,0x77,0xa6,0x3e,0x03,0xa2,0x8e,0x7a,0x93,0x61,0x68,0x72,0xc9,0xa9,0x97,0x8a,0xc0,0x92,0xf5,0x5e,0xb1 };
    const uint8_t IV[] = { 0xe7,0x55,0xf0,0xb5,0x5f,0xa4,0xbc,0x82,0x64,0x95,0xcd,0x14,0xdc,0x57,0x8f,0x95 };
    const uint8_t PLAINTEXT[] = { 0xcf,0x56,0xd8,0xc0,0xe8,0x23,0xf4,0x6c,0x20,0x4e,0xfb,0xf2,0xc7,0xc8,0x4b,0x14 };
    const uint8_t CIPHERTEXT[] = { 0x0c,0x43,0x1b,0xaa,0xf9,0xe9,0x2b,0xf5,0x67,0x9b,0x43,0x74,0x04,0x37,0x5d,0x90 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-71", "[OFB][MCT][192][DECRYPT][n71]") {
    const uint8_t KEY[] = { 0x16,0x0f,0xec,0x85,0x19,0x86,0x36,0xd2,0x6d,0xd8,0xa2,0x53,0x89,0x4b,0x86,0xa5,0x89,0xd9,0x71,0x32,0x55,0x3d,0x15,0xa5 };
    const uint8_t IV[] = { 0xcf,0x56,0xd8,0xc0,0xe8,0x23,0xf4,0x6c,0x20,0x4e,0xfb,0xf2,0xc7,0xc8,0x4b,0x14 };
    const uint8_t PLAINTEXT[] = { 0xf6,0x0b,0x49,0x24,0x66,0x46,0x07,0xac,0xa6,0xab,0x5f,0xc0,0xc3,0xe9,0xf7,0xd4 };
    const uint8_t CIPHERTEXT[] = { 0x6a,0x90,0x3d,0xdb,0x4d,0x19,0x59,0x17,0x26,0xc1,0xc7,0xc4,0x6e,0x20,0x08,0xd1 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-72", "[OFB][MCT][192][DECRYPT][n72]") {
    const uint8_t KEY[] = { 0xcb,0x1d,0xef,0x16,0xcb,0x03,0x91,0x44,0x9b,0xd3,0xeb,0x77,0xef,0x0d,0x81,0x09,0x2f,0x72,0x2e,0xf2,0x96,0xd4,0xe2,0x71 };
    const uint8_t IV[] = { 0xf6,0x0b,0x49,0x24,0x66,0x46,0x07,0xac,0xa6,0xab,0x5f,0xc0,0xc3,0xe9,0xf7,0xd4 };
    const uint8_t PLAINTEXT[] = { 0x9f,0x32,0x50,0xaa,0x2f,0x0e,0x88,0x83,0xdd,0xbe,0xbf,0x59,0x23,0x0e,0xc9,0xaa };
    const uint8_t CIPHERTEXT[] = { 0x99,0xe4,0xe1,0x89,0x66,0x42,0xaf,0xe4,0xdd,0x12,0x03,0x93,0xd2,0x85,0xa7,0x96 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-73", "[OFB][MCT][192][DECRYPT][n73]") {
    const uint8_t KEY[] = { 0x68,0xe7,0xf1,0xc9,0xc8,0xac,0x76,0x85,0x04,0xe1,0xbb,0xdd,0xc0,0x03,0x09,0x8a,0xf2,0xcc,0x91,0xab,0xb5,0xda,0x2b,0xdb };
    const uint8_t IV[] = { 0x9f,0x32,0x50,0xaa,0x2f,0x0e,0x88,0x83,0xdd,0xbe,0xbf,0x59,0x23,0x0e,0xc9,0xaa };
    const uint8_t PLAINTEXT[] = { 0x23,0x1b,0x78,0x89,0xdb,0xc1,0xc6,0x4a,0x7b,0x3a,0x83,0xaa,0x60,0x42,0x10,0x68 };
    const uint8_t CIPHERTEXT[] = { 0xd1,0x5b,0x56,0x0b,0x12,0xa5,0x8d,0xfa,0xa3,0xfa,0x1e,0xdf,0x03,0xaf,0xe7,0xc1 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-74", "[OFB][MCT][192][DECRYPT][n74]") {
    const uint8_t KEY[] = { 0xe2,0xc3,0x30,0x82,0x22,0xcd,0x4c,0xa9,0x27,0xfa,0xc3,0x54,0x1b,0xc2,0xcf,0xc0,0x89,0xf6,0x12,0x01,0xd5,0x98,0x3b,0xb3 };
    const uint8_t IV[] = { 0x23,0x1b,0x78,0x89,0xdb,0xc1,0xc6,0x4a,0x7b,0x3a,0x83,0xaa,0x60,0x42,0x10,0x68 };
    const uint8_t PLAINTEXT[] = { 0x6c,0x6d,0x68,0xa7,0x11,0x2e,0xf3,0xe1,0x0f,0x03,0xdc,0xa5,0x42,0x5f,0xeb,0xee };
    const uint8_t CIPHERTEXT[] = { 0x8e,0x46,0xb3,0xf3,0xad,0x80,0x11,0x71,0x8a,0x24,0xc1,0x4b,0xea,0x61,0x3a,0x2c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-75", "[OFB][MCT][192][DECRYPT][n75]") {
    const uint8_t KEY[] = { 0x82,0x4b,0xf1,0x62,0x76,0x8c,0x22,0x75,0x4b,0x97,0xab,0xf3,0x0a,0xec,0x3c,0x21,0x86,0xf5,0xce,0xa4,0x97,0xc7,0xd0,0x5d };
    const uint8_t IV[] = { 0x6c,0x6d,0x68,0xa7,0x11,0x2e,0xf3,0xe1,0x0f,0x03,0xdc,0xa5,0x42,0x5f,0xeb,0xee };
    const uint8_t PLAINTEXT[] = { 0xa0,0x70,0x10,0x96,0xed,0x34,0x02,0x75,0x7b,0x12,0xe0,0x07,0x63,0xdf,0x15,0xab };
    const uint8_t CIPHERTEXT[] = { 0x60,0x2c,0x57,0x62,0xb1,0x88,0x19,0x2e,0x60,0x88,0xc1,0xe0,0x54,0x41,0x6e,0xdc };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-76", "[OFB][MCT][192][DECRYPT][n76]") {
    const uint8_t KEY[] = { 0xd3,0x77,0xe4,0x91,0xb5,0x75,0xf0,0x34,0xeb,0xe7,0xbb,0x65,0xe7,0xd8,0x3e,0x54,0xfd,0xe7,0x2e,0xa3,0xf4,0x18,0xc5,0xf6 };
    const uint8_t IV[] = { 0xa0,0x70,0x10,0x96,0xed,0x34,0x02,0x75,0x7b,0x12,0xe0,0x07,0x63,0xdf,0x15,0xab };
    const uint8_t PLAINTEXT[] = { 0x92,0x0f,0xb4,0x47,0x15,0x95,0x9d,0x97,0x62,0x83,0xa2,0x76,0x8b,0x2f,0xe5,0x08 };
    const uint8_t CIPHERTEXT[] = { 0x7b,0xe4,0x2b,0x3c,0xb6,0xe1,0xef,0xa3,0x51,0x3c,0x15,0xf3,0xc3,0xf9,0xd2,0x41 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-77", "[OFB][MCT][192][DECRYPT][n77]") {
    const uint8_t KEY[] = { 0xa8,0xb3,0xaf,0x0c,0x32,0xf2,0x4f,0x44,0x79,0xe8,0x0f,0x22,0xf2,0x4d,0xa3,0xc3,0x9f,0x64,0x8c,0xd5,0x7f,0x37,0x20,0xfe };
    const uint8_t IV[] = { 0x92,0x0f,0xb4,0x47,0x15,0x95,0x9d,0x97,0x62,0x83,0xa2,0x76,0x8b,0x2f,0xe5,0x08 };
    const uint8_t PLAINTEXT[] = { 0x72,0xce,0x69,0x15,0x72,0x58,0x43,0x9e,0x07,0xb9,0x84,0x4d,0x09,0xd3,0x41,0x61 };
    const uint8_t CIPHERTEXT[] = { 0xfd,0x66,0xc7,0xf6,0x8e,0xdb,0x4c,0xc8,0x7b,0xc4,0x4b,0x9d,0x87,0x87,0xbf,0x70 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-78", "[OFB][MCT][192][DECRYPT][n78]") {
    const uint8_t KEY[] = { 0x75,0x22,0x3a,0xae,0x7b,0x17,0x3d,0x58,0x0b,0x26,0x66,0x37,0x80,0x15,0xe0,0x5d,0x98,0xdd,0x08,0x98,0x76,0xe4,0x61,0x9f };
    const uint8_t IV[] = { 0x72,0xce,0x69,0x15,0x72,0x58,0x43,0x9e,0x07,0xb9,0x84,0x4d,0x09,0xd3,0x41,0x61 };
    const uint8_t PLAINTEXT[] = { 0x64,0xfc,0x05,0x8d,0xe0,0xa0,0x14,0xd2,0xc5,0x30,0x13,0xf6,0x12,0xcc,0x81,0x9c };
    const uint8_t CIPHERTEXT[] = { 0xa2,0x7b,0xa7,0xf2,0x74,0x00,0xd7,0x30,0xdd,0x91,0x95,0xa2,0x49,0xe5,0x72,0x1c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-79", "[OFB][MCT][192][DECRYPT][n79]") {
    const uint8_t KEY[] = { 0x4b,0xcf,0x7e,0x6f,0x0a,0x28,0x6e,0x56,0x6f,0xda,0x63,0xba,0x60,0xb5,0xf4,0x8f,0x5d,0xed,0x1b,0x6e,0x64,0x28,0xe0,0x03 };
    const uint8_t IV[] = { 0x64,0xfc,0x05,0x8d,0xe0,0xa0,0x14,0xd2,0xc5,0x30,0x13,0xf6,0x12,0xcc,0x81,0x9c };
    const uint8_t PLAINTEXT[] = { 0x00,0xb2,0xa3,0xca,0x3d,0xea,0x40,0xea,0x96,0x80,0xb7,0x32,0xfb,0x91,0x5e,0x8e };
    const uint8_t CIPHERTEXT[] = { 0xc6,0xce,0x10,0x64,0x04,0x03,0xed,0xbd,0x3e,0xed,0x44,0xc1,0x71,0x3f,0x53,0x0e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-80", "[OFB][MCT][192][DECRYPT][n80]") {
    const uint8_t KEY[] = { 0xb9,0x7d,0x87,0xbf,0xc4,0x5f,0x40,0x13,0x6f,0x68,0xc0,0x70,0x5d,0x5f,0xb4,0x65,0xcb,0x6d,0xac,0x5c,0x9f,0xb9,0xbe,0x8d };
    const uint8_t IV[] = { 0x00,0xb2,0xa3,0xca,0x3d,0xea,0x40,0xea,0x96,0x80,0xb7,0x32,0xfb,0x91,0x5e,0x8e };
    const uint8_t PLAINTEXT[] = { 0xce,0xdb,0xe0,0x0f,0x60,0xe2,0x24,0x20,0x0b,0x31,0x9d,0xa4,0x38,0xc8,0x90,0x0d };
    const uint8_t CIPHERTEXT[] = { 0xaa,0xfd,0x7f,0x3c,0xa6,0x4c,0x4c,0xd3,0xf2,0xb2,0xf9,0xd0,0xce,0x77,0x2e,0x45 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-81", "[OFB][MCT][192][DECRYPT][n81]") {
    const uint8_t KEY[] = { 0x1a,0xa5,0x28,0x57,0x56,0xe6,0x6c,0x8a,0xa1,0xb3,0x20,0x7f,0x3d,0xbd,0x90,0x45,0xc0,0x5c,0x31,0xf8,0xa7,0x71,0x2e,0x80 };
    const uint8_t IV[] = { 0xce,0xdb,0xe0,0x0f,0x60,0xe2,0x24,0x20,0x0b,0x31,0x9d,0xa4,0x38,0xc8,0x90,0x0d };
    const uint8_t PLAINTEXT[] = { 0xff,0xc2,0x6e,0x2b,0xd4,0xce,0xe4,0xcd,0x58,0x18,0xe2,0x65,0xbd,0x6e,0xf4,0x4d };
    const uint8_t CIPHERTEXT[] = { 0x5a,0x4b,0x16,0x96,0x79,0xb4,0xfe,0x64,0xa3,0xd8,0xaf,0xe8,0x92,0xb9,0x2c,0x99 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-82", "[OFB][MCT][192][DECRYPT][n82]") {
    const uint8_t KEY[] = { 0x95,0xd3,0x1f,0x97,0xef,0x11,0x2f,0x40,0x5e,0x71,0x4e,0x54,0xe9,0x73,0x74,0x88,0x98,0x44,0xd3,0x9d,0x1a,0x1f,0xda,0xcd };
    const uint8_t IV[] = { 0xff,0xc2,0x6e,0x2b,0xd4,0xce,0xe4,0xcd,0x58,0x18,0xe2,0x65,0xbd,0x6e,0xf4,0x4d };
    const uint8_t PLAINTEXT[] = { 0x35,0xfd,0x82,0x33,0xbe,0x1e,0x44,0xde,0x9c,0x4d,0xc1,0xbb,0x35,0x68,0xec,0x41 };
    const uint8_t CIPHERTEXT[] = { 0xca,0x4d,0x14,0xf3,0xd6,0x71,0x8b,0x04,0x8f,0x76,0x37,0xc0,0xb9,0xf7,0x43,0xca };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-83", "[OFB][MCT][192][DECRYPT][n83]") {
    const uint8_t KEY[] = { 0x46,0xd7,0x79,0x2d,0xbd,0xfb,0x25,0x63,0x6b,0x8c,0xcc,0x67,0x57,0x6d,0x30,0x56,0x04,0x09,0x12,0x26,0x2f,0x77,0x36,0x8c };
    const uint8_t IV[] = { 0x35,0xfd,0x82,0x33,0xbe,0x1e,0x44,0xde,0x9c,0x4d,0xc1,0xbb,0x35,0x68,0xec,0x41 };
    const uint8_t PLAINTEXT[] = { 0x43,0xa7,0xd5,0x99,0x09,0x18,0x8c,0xac,0x4a,0xb3,0x84,0x90,0xb3,0x3b,0x7a,0xc3 };
    const uint8_t CIPHERTEXT[] = { 0x03,0x3d,0x74,0x8c,0x1f,0x24,0x68,0xe3,0xd3,0x04,0x66,0xba,0x52,0xea,0x0a,0x23 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-84", "[OFB][MCT][192][DECRYPT][n84]") {
    const uint8_t KEY[] = { 0x06,0x91,0x3e,0x07,0x04,0xe1,0x60,0xa3,0x28,0x2b,0x19,0xfe,0x5e,0x75,0xbc,0xfa,0x4e,0xba,0x96,0xb6,0x9c,0x4c,0x4c,0x4f };
    const uint8_t IV[] = { 0x43,0xa7,0xd5,0x99,0x09,0x18,0x8c,0xac,0x4a,0xb3,0x84,0x90,0xb3,0x3b,0x7a,0xc3 };
    const uint8_t PLAINTEXT[] = { 0xc7,0x64,0xaa,0xc8,0xe4,0x74,0x43,0x07,0xc2,0x62,0xb5,0x8f,0xa2,0xf3,0xea,0x6c };
    const uint8_t CIPHERTEXT[] = { 0xc7,0x4d,0x0d,0x46,0x2c,0x3b,0xba,0x01,0x40,0x46,0x47,0x2a,0xb9,0x1a,0x45,0xc0 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-85", "[OFB][MCT][192][DECRYPT][n85]") {
    const uint8_t KEY[] = { 0xf3,0x39,0xc2,0xc3,0x31,0x7d,0x88,0xb7,0xef,0x4f,0xb3,0x36,0xba,0x01,0xff,0xfd,0x8c,0xd8,0x23,0x39,0x3e,0xbf,0xa6,0x23 };
    const uint8_t IV[] = { 0xc7,0x64,0xaa,0xc8,0xe4,0x74,0x43,0x07,0xc2,0x62,0xb5,0x8f,0xa2,0xf3,0xea,0x6c };
    const uint8_t PLAINTEXT[] = { 0x8f,0x5b,0x6a,0x10,0x9d,0xad,0xeb,0xe5,0xa5,0xe0,0x23,0xc3,0xa1,0x9b,0x95,0xbe };
    const uint8_t CIPHERTEXT[] = { 0x5c,0x3b,0x0d,0x29,0xec,0x01,0x90,0xb9,0xf5,0xa8,0xfc,0xc4,0x35,0x9c,0xe8,0x14 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-86", "[OFB][MCT][192][DECRYPT][n86]") {
    const uint8_t KEY[] = { 0x96,0xce,0x75,0x16,0x20,0xb0,0xfd,0x37,0x60,0x14,0xd9,0x26,0x27,0xac,0x14,0x18,0x29,0x38,0x00,0xfa,0x9f,0x24,0x33,0x9d };
    const uint8_t IV[] = { 0x8f,0x5b,0x6a,0x10,0x9d,0xad,0xeb,0xe5,0xa5,0xe0,0x23,0xc3,0xa1,0x9b,0x95,0xbe };
    const uint8_t PLAINTEXT[] = { 0xfc,0x5b,0x3a,0xfa,0x8d,0x70,0xc4,0xd2,0xb8,0xb2,0xef,0xe2,0xfd,0x37,0x41,0xd1 };
    const uint8_t CIPHERTEXT[] = { 0xf8,0xd3,0x2e,0xc5,0xf0,0x03,0xa5,0x3b,0x65,0xf7,0xb7,0xd5,0x11,0xcd,0x75,0x80 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-87", "[OFB][MCT][192][DECRYPT][n87]") {
    const uint8_t KEY[] = { 0x91,0xf1,0x4a,0xe0,0x4e,0x7a,0x63,0x01,0x9c,0x4f,0xe3,0xdc,0xaa,0xdc,0xd0,0xca,0x91,0x8a,0xef,0x18,0x62,0x13,0x72,0x4c };
    const uint8_t IV[] = { 0xfc,0x5b,0x3a,0xfa,0x8d,0x70,0xc4,0xd2,0xb8,0xb2,0xef,0xe2,0xfd,0x37,0x41,0xd1 };
    const uint8_t PLAINTEXT[] = { 0xa6,0xc1,0xa4,0x6e,0x81,0x08,0xe6,0x18,0x6e,0xe9,0x78,0x5c,0x73,0x28,0xd4,0x2e };
    const uint8_t CIPHERTEXT[] = { 0x2d,0xfc,0x18,0xe9,0xe0,0x60,0xa5,0x74,0x07,0x3f,0x3f,0xf6,0x6e,0xca,0x9e,0x36 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-88", "[OFB][MCT][192][DECRYPT][n88]") {
    const uint8_t KEY[] = { 0xc4,0x4d,0xbc,0xad,0xb1,0xc1,0xf2,0xb5,0x3a,0x8e,0x47,0xb2,0x2b,0xd4,0x36,0xd2,0xff,0x63,0x97,0x44,0x11,0x3b,0xa6,0x62 };
    const uint8_t IV[] = { 0xa6,0xc1,0xa4,0x6e,0x81,0x08,0xe6,0x18,0x6e,0xe9,0x78,0x5c,0x73,0x28,0xd4,0x2e };
    const uint8_t PLAINTEXT[] = { 0x79,0x6e,0xb2,0x73,0xaf,0x7e,0x57,0x37,0x4c,0xa7,0xc8,0x3e,0xfc,0x33,0x34,0x4a };
    const uint8_t CIPHERTEXT[] = { 0x70,0xad,0x0f,0x43,0xd1,0xb6,0xa2,0x33,0x55,0xbc,0xf6,0x4d,0xff,0xbb,0x91,0xb4 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-89", "[OFB][MCT][192][DECRYPT][n89]") {
    const uint8_t KEY[] = { 0x52,0xe6,0x81,0x76,0x5d,0x35,0x7f,0xdb,0x43,0xe0,0xf5,0xc1,0x84,0xaa,0x61,0xe5,0xb3,0xc4,0x5f,0x7a,0xed,0x08,0x92,0x28 };
    const uint8_t IV[] = { 0x79,0x6e,0xb2,0x73,0xaf,0x7e,0x57,0x37,0x4c,0xa7,0xc8,0x3e,0xfc,0x33,0x34,0x4a };
    const uint8_t PLAINTEXT[] = { 0x76,0x74,0xf1,0x3f,0x38,0x21,0xc2,0xbc,0xe4,0xea,0x2f,0xd6,0xad,0x79,0x40,0x84 };
    const uint8_t CIPHERTEXT[] = { 0xbe,0x4c,0x5c,0xf9,0xfe,0x1f,0x39,0xa1,0x96,0xab,0x3d,0xdb,0xec,0xf4,0x8d,0x6e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-90", "[OFB][MCT][192][DECRYPT][n90]") {
    const uint8_t KEY[] = { 0x53,0x14,0x41,0x8b,0xf2,0x4c,0x75,0x02,0x35,0x94,0x04,0xfe,0xbc,0x8b,0xa3,0x59,0x57,0x2e,0x70,0xac,0x40,0x71,0xd2,0xac };
    const uint8_t IV[] = { 0x76,0x74,0xf1,0x3f,0x38,0x21,0xc2,0xbc,0xe4,0xea,0x2f,0xd6,0xad,0x79,0x40,0x84 };
    const uint8_t PLAINTEXT[] = { 0xc8,0x0c,0xbd,0xe8,0x8d,0x30,0x67,0x02,0x15,0x86,0xef,0x10,0x1c,0xf0,0x4f,0xb0 };
    const uint8_t CIPHERTEXT[] = { 0xdd,0x9e,0x7e,0x72,0x5e,0x54,0xfe,0x69,0x01,0xf2,0xc0,0xfd,0xaf,0x79,0x0a,0xd9 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-91", "[OFB][MCT][192][DECRYPT][n91]") {
    const uint8_t KEY[] = { 0x8b,0x7d,0x34,0xd7,0x62,0x6d,0x51,0xed,0xfd,0x98,0xb9,0x16,0x31,0xbb,0xc4,0x5b,0x42,0xa8,0x9f,0xbc,0x5c,0x81,0x9d,0x1c };
    const uint8_t IV[] = { 0xc8,0x0c,0xbd,0xe8,0x8d,0x30,0x67,0x02,0x15,0x86,0xef,0x10,0x1c,0xf0,0x4f,0xb0 };
    const uint8_t PLAINTEXT[] = { 0xe0,0xa5,0x48,0xa0,0xb6,0xce,0x9c,0x67,0x13,0x81,0x28,0x0e,0x0f,0x1f,0xdf,0x08 };
    const uint8_t CIPHERTEXT[] = { 0xb1,0x0b,0xf5,0xeb,0xe8,0x69,0x23,0x07,0xd8,0x69,0x75,0x5c,0x90,0x21,0x24,0xef };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-92", "[OFB][MCT][192][DECRYPT][n92]") {
    const uint8_t KEY[] = { 0x8c,0x46,0xe4,0x36,0xdf,0x71,0x06,0x85,0x1d,0x3d,0xf1,0xb6,0x87,0x75,0x58,0x3c,0x51,0x29,0xb7,0xb2,0x53,0x9e,0x42,0x14 };
    const uint8_t IV[] = { 0xe0,0xa5,0x48,0xa0,0xb6,0xce,0x9c,0x67,0x13,0x81,0x28,0x0e,0x0f,0x1f,0xdf,0x08 };
    const uint8_t PLAINTEXT[] = { 0x16,0x74,0x9e,0xc8,0x26,0x49,0xb8,0x55,0x06,0x4f,0xbe,0x2b,0xef,0x78,0x4e,0xea };
    const uint8_t CIPHERTEXT[] = { 0xc8,0xb6,0xcd,0xc3,0x5a,0x3e,0xfa,0x0a,0x07,0x3b,0xd0,0xe1,0xbd,0x1c,0x57,0x68 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-93", "[OFB][MCT][192][DECRYPT][n93]") {
    const uint8_t KEY[] = { 0x63,0xc8,0xb6,0x08,0xac,0xb5,0x6f,0x28,0x0b,0x49,0x6f,0x7e,0xa1,0x3c,0xe0,0x69,0x57,0x66,0x09,0x99,0xbc,0xe6,0x0c,0xfe };
    const uint8_t IV[] = { 0x16,0x74,0x9e,0xc8,0x26,0x49,0xb8,0x55,0x06,0x4f,0xbe,0x2b,0xef,0x78,0x4e,0xea };
    const uint8_t PLAINTEXT[] = { 0xe8,0x1c,0x0c,0xaf,0x05,0x20,0x60,0xf0,0xfa,0x8d,0x9f,0x76,0x1b,0x2b,0x60,0x63 };
    const uint8_t CIPHERTEXT[] = { 0xc4,0xe0,0xb9,0x3d,0xe9,0x51,0x4d,0x9e,0xef,0x8e,0x52,0x3e,0x73,0xc4,0x69,0xad };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-94", "[OFB][MCT][192][DECRYPT][n94]") {
    const uint8_t KEY[] = { 0x99,0x78,0x4b,0xbf,0x5d,0x8a,0xe3,0x35,0xe3,0x55,0x63,0xd1,0xa4,0x1c,0x80,0x99,0xad,0xeb,0x96,0xef,0xa7,0xcd,0x6c,0x9d };
    const uint8_t IV[] = { 0xe8,0x1c,0x0c,0xaf,0x05,0x20,0x60,0xf0,0xfa,0x8d,0x9f,0x76,0x1b,0x2b,0x60,0x63 };
    const uint8_t PLAINTEXT[] = { 0x0e,0xd6,0x4f,0xf3,0xf9,0x59,0x3d,0x30,0x4b,0x85,0xab,0x23,0x00,0x2a,0x57,0x03 };
    const uint8_t CIPHERTEXT[] = { 0x80,0xe0,0x69,0xb4,0x3c,0x5e,0xa6,0x2f,0xfa,0xb0,0xfd,0xb7,0xf1,0x3f,0x8c,0x1d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-95", "[OFB][MCT][192][DECRYPT][n95]") {
    const uint8_t KEY[] = { 0xd6,0x84,0x95,0x60,0x1d,0x03,0xd9,0x18,0xed,0x83,0x2c,0x22,0x5d,0x45,0xbd,0xa9,0xe6,0x6e,0x3d,0xcc,0xa7,0xe7,0x3b,0x9e };
    const uint8_t IV[] = { 0x0e,0xd6,0x4f,0xf3,0xf9,0x59,0x3d,0x30,0x4b,0x85,0xab,0x23,0x00,0x2a,0x57,0x03 };
    const uint8_t PLAINTEXT[] = { 0x3c,0x13,0x4c,0xdf,0xcb,0xf3,0xf8,0x9e,0x2a,0xc0,0x5b,0x18,0x64,0x54,0x0b,0x3e };
    const uint8_t CIPHERTEXT[] = { 0x70,0x42,0x90,0x29,0x4c,0x3e,0x6f,0x95,0x4f,0xfc,0xde,0xdf,0x40,0x89,0x3a,0x2d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-96", "[OFB][MCT][192][DECRYPT][n96]") {
    const uint8_t KEY[] = { 0xa9,0x11,0xe5,0x76,0xcd,0x0b,0x13,0xe6,0xd1,0x90,0x60,0xfd,0x96,0xb6,0x45,0x37,0xcc,0xae,0x66,0xd4,0xc3,0xb3,0x30,0xa0 };
    const uint8_t IV[] = { 0x3c,0x13,0x4c,0xdf,0xcb,0xf3,0xf8,0x9e,0x2a,0xc0,0x5b,0x18,0x64,0x54,0x0b,0x3e };
    const uint8_t PLAINTEXT[] = { 0xf4,0x66,0x00,0x6f,0x1a,0xd9,0xcb,0x22,0x2e,0xa1,0x5e,0xb0,0x95,0xd7,0x41,0xfb };
    const uint8_t CIPHERTEXT[] = { 0x7f,0xf9,0x60,0x44,0xf6,0x53,0xbd,0xc7,0x7f,0x95,0x70,0x16,0xd0,0x08,0xca,0xfe };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-97", "[OFB][MCT][192][DECRYPT][n97]") {
    const uint8_t KEY[] = { 0x7b,0x27,0x09,0x7d,0x5e,0x8b,0x6a,0x9a,0x25,0xf6,0x60,0x92,0x8c,0x6f,0x8e,0x15,0xe2,0x0f,0x38,0x64,0x56,0x64,0x71,0x5b };
    const uint8_t IV[] = { 0xf4,0x66,0x00,0x6f,0x1a,0xd9,0xcb,0x22,0x2e,0xa1,0x5e,0xb0,0x95,0xd7,0x41,0xfb };
    const uint8_t PLAINTEXT[] = { 0xd2,0x3d,0x95,0xa0,0xb3,0xf7,0x6a,0xd1,0x07,0x10,0x3d,0xf6,0x9d,0x2f,0xf7,0x1b };
    const uint8_t CIPHERTEXT[] = { 0x54,0xa7,0x11,0xa6,0x68,0xea,0x41,0x66,0xd2,0x36,0xec,0x0b,0x93,0x80,0x79,0x7c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-98", "[OFB][MCT][192][DECRYPT][n98]") {
    const uint8_t KEY[] = { 0x03,0xab,0x48,0x18,0x06,0xdc,0x30,0x53,0xf7,0xcb,0xf5,0x32,0x3f,0x98,0xe4,0xc4,0xe5,0x1f,0x05,0x92,0xcb,0x4b,0x86,0x40 };
    const uint8_t IV[] = { 0xd2,0x3d,0x95,0xa0,0xb3,0xf7,0x6a,0xd1,0x07,0x10,0x3d,0xf6,0x9d,0x2f,0xf7,0x1b };
    const uint8_t PLAINTEXT[] = { 0xdd,0xa9,0xbf,0x3c,0xea,0x16,0x84,0x29,0x07,0x04,0xdf,0x82,0x3d,0xba,0xb4,0x20 };
    const uint8_t CIPHERTEXT[] = { 0xeb,0xc6,0x54,0x77,0x23,0xa0,0x35,0xce,0x78,0x8c,0x41,0x65,0x58,0x57,0x5a,0xc9 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT192-DECRYPT-99", "[OFB][MCT][192][DECRYPT][n99]") {
    const uint8_t KEY[] = { 0x34,0xb0,0xef,0xe2,0x47,0xc2,0x3d,0x8c,0x2a,0x62,0x4a,0x0e,0xd5,0x8e,0x60,0xed,0xe2,0x1b,0xda,0x10,0xf6,0xf1,0x32,0x60 };
    const uint8_t IV[] = { 0xdd,0xa9,0xbf,0x3c,0xea,0x16,0x84,0x29,0x07,0x04,0xdf,0x82,0x3d,0xba,0xb4,0x20 };
    const uint8_t PLAINTEXT[] = { 0x65,0x6d,0xdf,0x0a,0x30,0x67,0xb9,0x9d,0x9d,0x23,0x4b,0x0e,0x22,0x23,0xf0,0x4f };
    const uint8_t CIPHERTEXT[] = { 0x8a,0x6b,0x52,0x07,0xe5,0xa5,0xe5,0x5b,0x37,0x1b,0xa7,0xfa,0x41,0x1e,0x0d,0xdf };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

