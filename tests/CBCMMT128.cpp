#include "rijndael.h"
#include "catch.hpp"
#include <cstring>

static inline std::string buf2str(const uint8_t *buf, size_t len) {
    std::ostringstream ss; ss << std::hex << std::setfill('0');
    for (size_t i = 0; i < len; ++i) {
        ss << std::setw(2) << static_cast<int>(buf[i]) << ' ';
    }
    return ss.str();
}

TEST_CASE("CBCMMT128-ENCRYPT-0", "[CBC][MMT][128][ENCRYPT][n0]") {
    const uint8_t KEY[] = { 0x1f,0x8e,0x49,0x73,0x95,0x3f,0x3f,0xb0,0xbd,0x6b,0x16,0x66,0x2e,0x9a,0x3c,0x17 };
    const uint8_t IV[] = { 0x2f,0xe2,0xb3,0x33,0xce,0xda,0x8f,0x98,0xf4,0xa9,0x9b,0x40,0xd2,0xcd,0x34,0xa8 };
    const uint8_t PLAINTEXT[] = { 0x45,0xcf,0x12,0x96,0x4f,0xc8,0x24,0xab,0x76,0x61,0x6a,0xe2,0xf4,0xbf,0x08,0x22 };
    const uint8_t CIPHERTEXT[] = { 0x0f,0x61,0xc4,0xd4,0x4c,0x51,0x47,0xc0,0x3c,0x19,0x5a,0xd7,0xe2,0xcc,0x12,0xb2 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMMT128-ENCRYPT-1", "[CBC][MMT][128][ENCRYPT][n1]") {
    const uint8_t KEY[] = { 0x07,0x00,0xd6,0x03,0xa1,0xc5,0x14,0xe4,0x6b,0x61,0x91,0xba,0x43,0x0a,0x3a,0x0c };
    const uint8_t IV[] = { 0xaa,0xd1,0x58,0x3c,0xd9,0x13,0x65,0xe3,0xbb,0x2f,0x0c,0x34,0x30,0xd0,0x65,0xbb };
    const uint8_t PLAINTEXT[] = { 0x06,0x8b,0x25,0xc7,0xbf,0xb1,0xf8,0xbd,0xd4,0xcf,0xc9,0x08,0xf6,0x9d,0xff,0xc5,0xdd,0xc7,0x26,0xa1,0x97,0xf0,0xe5,0xf7,0x20,0xf7,0x30,0x39,0x32,0x79,0xbe,0x91 };
    const uint8_t CIPHERTEXT[] = { 0xc4,0xdc,0x61,0xd9,0x72,0x59,0x67,0xa3,0x02,0x01,0x04,0xa9,0x73,0x8f,0x23,0x86,0x85,0x27,0xce,0x83,0x9a,0xab,0x17,0x52,0xfd,0x8b,0xdb,0x95,0xa8,0x2c,0x4d,0x00 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMMT128-ENCRYPT-2", "[CBC][MMT][128][ENCRYPT][n2]") {
    const uint8_t KEY[] = { 0x33,0x48,0xaa,0x51,0xe9,0xa4,0x5c,0x2d,0xbe,0x33,0xcc,0xc4,0x7f,0x96,0xe8,0xde };
    const uint8_t IV[] = { 0x19,0x15,0x3c,0x67,0x31,0x60,0xdf,0x2b,0x1d,0x38,0xc2,0x80,0x60,0xe5,0x9b,0x96 };
    const uint8_t PLAINTEXT[] = { 0x9b,0x7c,0xee,0x82,0x7a,0x26,0x57,0x5a,0xfd,0xbb,0x7c,0x7a,0x32,0x9f,0x88,0x72,0x38,0x05,0x2e,0x36,0x01,0xa7,0x91,0x74,0x56,0xba,0x61,0x25,0x1c,0x21,0x47,0x63,0xd5,0xe1,0x84,0x7a,0x6a,0xd5,0xd5,0x41,0x27,0xa3,0x99,0xab,0x07,0xee,0x35,0x99 };
    const uint8_t CIPHERTEXT[] = { 0xd5,0xae,0xd6,0xc9,0x62,0x2e,0xc4,0x51,0xa1,0x5d,0xb1,0x28,0x19,0x95,0x2b,0x67,0x52,0x50,0x1c,0xf0,0x5c,0xdb,0xf8,0xcd,0xa3,0x4a,0x45,0x77,0x26,0xde,0xd9,0x78,0x18,0xe1,0xf1,0x27,0xa2,0x8d,0x72,0xdb,0x56,0x52,0x74,0x9f,0x0c,0x6a,0xfe,0xe5 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMMT128-ENCRYPT-3", "[CBC][MMT][128][ENCRYPT][n3]") {
    const uint8_t KEY[] = { 0xb7,0xf3,0xc9,0x57,0x6e,0x12,0xdd,0x0d,0xb6,0x3e,0x8f,0x8f,0xac,0x2b,0x9a,0x39 };
    const uint8_t IV[] = { 0xc8,0x0f,0x09,0x5d,0x8b,0xb1,0xa0,0x60,0x69,0x9f,0x7c,0x19,0x97,0x4a,0x1a,0xa0 };
    const uint8_t PLAINTEXT[] = { 0x9a,0xc1,0x99,0x54,0xce,0x13,0x19,0xb3,0x54,0xd3,0x22,0x04,0x60,0xf7,0x1c,0x1e,0x37,0x3f,0x1c,0xd3,0x36,0x24,0x08,0x81,0x16,0x0c,0xfd,0xe4,0x6e,0xbf,0xed,0x2e,0x79,0x1e,0x8d,0x5a,0x1a,0x13,0x6e,0xbd,0x1d,0xc4,0x69,0xde,0xc0,0x0c,0x41,0x87,0x72,0x2b,0x84,0x1c,0xda,0xbc,0xb2,0x2c,0x1b,0xe8,0xa1,0x46,0x57,0xda,0x20,0x0e };
    const uint8_t CIPHERTEXT[] = { 0x19,0xb9,0x60,0x97,0x72,0xc6,0x3f,0x33,0x86,0x08,0xbf,0x6e,0xb5,0x2c,0xa1,0x0b,0xe6,0x50,0x97,0xf8,0x9c,0x1e,0x09,0x05,0xc4,0x24,0x01,0xfd,0x47,0x79,0x1a,0xe2,0xc5,0x44,0x0b,0x2d,0x47,0x31,0x16,0xca,0x78,0xbd,0x9f,0xf2,0xfb,0x60,0x15,0xcf,0xd3,0x16,0x52,0x4e,0xae,0x7d,0xcb,0x95,0xae,0x73,0x8e,0xbe,0xae,0x84,0xa4,0x67 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMMT128-ENCRYPT-4", "[CBC][MMT][128][ENCRYPT][n4]") {
    const uint8_t KEY[] = { 0xb6,0xf9,0xaf,0xbf,0xe5,0xa1,0x56,0x2b,0xba,0x13,0x68,0xfc,0x72,0xac,0x9d,0x9c };
    const uint8_t IV[] = { 0x3f,0x9d,0x5e,0xbe,0x25,0x0e,0xe7,0xce,0x38,0x4b,0x0d,0x00,0xee,0x84,0x93,0x22 };
    const uint8_t PLAINTEXT[] = { 0xdb,0x39,0x7e,0xc2,0x27,0x18,0xdb,0xff,0xb9,0xc9,0xd1,0x3d,0xe0,0xef,0xcd,0x46,0x11,0xbf,0x79,0x2b,0xe4,0xfc,0xe0,0xdc,0x5f,0x25,0xd4,0xf5,0x77,0xed,0x8c,0xdb,0xd4,0xeb,0x92,0x08,0xd5,0x93,0xdd,0xa3,0xd4,0x65,0x39,0x54,0xab,0x64,0xf0,0x56,0x76,0xca,0xa3,0xce,0x9b,0xfa,0x79,0x5b,0x08,0xb6,0x7c,0xee,0xbc,0x92,0x3f,0xdc,0x89,0xa8,0xc4,0x31,0x18,0x8e,0x9e,0x48,0x2d,0x85,0x53,0x98,0x2c,0xf3,0x04,0xd1 };
    const uint8_t CIPHERTEXT[] = { 0x10,0xea,0x27,0xb1,0x9e,0x16,0xb9,0x3a,0xf1,0x69,0xc4,0xa8,0x8e,0x06,0xe3,0x5c,0x99,0xd8,0xb4,0x20,0x98,0x0b,0x05,0x8e,0x34,0xb4,0xb8,0xf1,0x32,0xb1,0x37,0x66,0xf7,0x27,0x28,0x20,0x2b,0x08,0x9f,0x42,0x8f,0xec,0xdb,0x41,0xc7,0x9f,0x8a,0xa0,0xd0,0xef,0x68,0xf5,0x78,0x64,0x81,0xcc,0xa2,0x9e,0x21,0x26,0xf6,0x9b,0xc1,0x41,0x60,0xf1,0xae,0x21,0x87,0x87,0x8b,0xa5,0xc4,0x9c,0xf3,0x96,0x1e,0x1b,0x7e,0xe9 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMMT128-ENCRYPT-5", "[CBC][MMT][128][ENCRYPT][n5]") {
    const uint8_t KEY[] = { 0xbb,0xe7,0xb7,0xba,0x07,0x12,0x4f,0xf1,0xae,0x7c,0x34,0x16,0xfe,0x8b,0x46,0x5e };
    const uint8_t IV[] = { 0x7f,0x65,0xb5,0xee,0x36,0x30,0xbe,0xd6,0xb8,0x42,0x02,0xd9,0x7f,0xb9,0x7a,0x1e };
    const uint8_t PLAINTEXT[] = { 0x2a,0xad,0x0c,0x2c,0x43,0x06,0x56,0x8b,0xad,0x74,0x47,0x46,0x0f,0xd3,0xda,0xc0,0x54,0x34,0x6d,0x26,0xfe,0xdd,0xbc,0x9a,0xbd,0x91,0x10,0x91,0x40,0x11,0xb4,0x79,0x4b,0xe2,0xa9,0xa0,0x0a,0x51,0x9a,0x51,0xa5,0xb5,0x12,0x40,0x14,0xf4,0xed,0x27,0x35,0x48,0x0d,0xb2,0x1b,0x43,0x4e,0x99,0xa9,0x11,0xbb,0x0b,0x60,0xfe,0x02,0x53,0x76,0x37,0x25,0xb6,0x28,0xd5,0x73,0x9a,0x51,0x17,0xb7,0xee,0x3a,0xef,0xaf,0xc5,0xb4,0xc1,0xbf,0x44,0x64,0x67,0xe7,0xbf,0x5f,0x78,0xf3,0x1f,0xf7,0xca,0xf1,0x87 };
    const uint8_t CIPHERTEXT[] = { 0x3b,0x86,0x11,0xbf,0xc4,0x97,0x3c,0x5c,0xd8,0xe9,0x82,0xb0,0x73,0xb3,0x31,0x84,0xcd,0x26,0x11,0x01,0x59,0x17,0x2e,0x44,0x98,0x8e,0xb5,0xff,0x56,0x61,0xa1,0xe1,0x6f,0xad,0x67,0x25,0x8f,0xcb,0xfe,0xe5,0x54,0x69,0x26,0x7a,0x12,0xdc,0x37,0x48,0x93,0xb4,0xe3,0x53,0x3d,0x36,0xf5,0x63,0x4c,0x30,0x95,0x58,0x35,0x96,0xf1,0x35,0xaa,0x8c,0xd1,0x13,0x8d,0xc8,0x98,0xbc,0x56,0x51,0xee,0x35,0xa9,0x2e,0xbf,0x89,0xab,0x6a,0xeb,0x53,0x66,0x65,0x3b,0xc6,0x0a,0x70,0xe0,0x07,0x4f,0xc1,0x1e,0xfe };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMMT128-ENCRYPT-6", "[CBC][MMT][128][ENCRYPT][n6]") {
    const uint8_t KEY[] = { 0x89,0xa5,0x53,0x73,0x04,0x33,0xf7,0xe6,0xd6,0x7d,0x16,0xd3,0x73,0xbd,0x53,0x60 };
    const uint8_t IV[] = { 0xf7,0x24,0x55,0x8d,0xb3,0x43,0x3a,0x52,0x3f,0x4e,0x51,0xa5,0xbe,0xa7,0x04,0x97 };
    const uint8_t PLAINTEXT[] = { 0x80,0x7b,0xc4,0xea,0x68,0x4e,0xed,0xcf,0xdc,0xca,0x30,0x18,0x06,0x80,0xb0,0xf1,0xae,0x28,0x14,0xf3,0x5f,0x36,0xd0,0x53,0xc5,0xae,0xa6,0x59,0x5a,0x38,0x6c,0x14,0x42,0x77,0x0f,0x4d,0x72,0x97,0xd8,0xb9,0x18,0x25,0xee,0x72,0x37,0x24,0x1d,0xa8,0x92,0x5d,0xd5,0x94,0xcc,0xf6,0x76,0xae,0xcd,0x46,0xca,0x20,0x68,0xe8,0xd3,0x7a,0x3a,0x0e,0xc8,0xa7,0xd5,0x18,0x5a,0x20,0x1e,0x66,0x3b,0x5f,0xf3,0x6a,0xe1,0x97,0x11,0x01,0x88,0xa2,0x35,0x03,0x76,0x3b,0x82,0x18,0x82,0x6d,0x23,0xce,0xd7,0x4b,0x31,0xe9,0xf6,0xe2,0xd7,0xfb,0xfa,0x6c,0xb4,0x34,0x20,0xc7,0x80,0x7a,0x86,0x25 };
    const uint8_t CIPHERTEXT[] = { 0x40,0x6a,0xf1,0x42,0x9a,0x47,0x8c,0x3d,0x07,0xe5,0x55,0xc5,0x28,0x7a,0x60,0x50,0x0d,0x37,0xfc,0x39,0xb6,0x8e,0x5b,0xbb,0x9b,0xaf,0xd6,0xdd,0xb2,0x23,0x82,0x85,0x61,0xd6,0x17,0x1a,0x30,0x8d,0x5b,0x1a,0x45,0x51,0xe8,0xa5,0xe7,0xd5,0x72,0x91,0x8d,0x25,0xc9,0x68,0xd3,0x87,0x18,0x48,0xd2,0xf1,0x66,0x35,0xca,0xa9,0x84,0x7f,0x38,0x59,0x0b,0x1d,0xf5,0x8a,0xb5,0xef,0xb9,0x85,0xf2,0xc6,0x6c,0xfa,0xf8,0x6f,0x61,0xb3,0xf9,0xc0,0xaf,0xad,0x6c,0x96,0x3c,0x49,0xce,0xe9,0xb8,0xbc,0x81,0xa2,0xdd,0xb0,0x6c,0x96,0x7f,0x32,0x55,0x15,0xa4,0x84,0x9e,0xec,0x37,0xce,0x72,0x1a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMMT128-ENCRYPT-7", "[CBC][MMT][128][ENCRYPT][n7]") {
    const uint8_t KEY[] = { 0xc4,0x91,0xca,0x31,0xf9,0x17,0x08,0x45,0x8e,0x29,0xa9,0x25,0xec,0x55,0x8d,0x78 };
    const uint8_t IV[] = { 0x9e,0xf9,0x34,0x94,0x6e,0x5c,0xd0,0xae,0x97,0xbd,0x58,0x53,0x2c,0xb4,0x93,0x81 };
    const uint8_t PLAINTEXT[] = { 0xcb,0x6a,0x78,0x7e,0x0d,0xec,0x56,0xf9,0xa1,0x65,0x95,0x7f,0x81,0xaf,0x33,0x6c,0xa6,0xb4,0x07,0x85,0xd9,0xe9,0x40,0x93,0xc6,0x19,0x0e,0x51,0x52,0x64,0x9f,0x88,0x2e,0x87,0x4d,0x79,0xac,0x5e,0x16,0x7b,0xd2,0xa7,0x4c,0xe5,0xae,0x08,0x8d,0x2e,0xe8,0x54,0xf6,0x53,0x9e,0x0a,0x94,0x79,0x6b,0x1e,0x1b,0xd4,0xc9,0xfc,0xdb,0xc7,0x9a,0xcb,0xef,0x4d,0x01,0xee,0xb8,0x97,0x76,0xd1,0x8a,0xf7,0x1a,0xe2,0xa4,0xfc,0x47,0xdd,0x66,0xdf,0x6c,0x4d,0xbe,0x1d,0x18,0x50,0xe4,0x66,0x54,0x9a,0x47,0xb6,0x36,0xbc,0xc7,0xc2,0xb3,0xa6,0x24,0x95,0xb5,0x6b,0xb6,0x7b,0x6d,0x45,0x5f,0x1e,0xeb,0xd9,0xbf,0xef,0xec,0xbc,0xa6,0xc7,0xf3,0x35,0xcf,0xce,0x9b,0x45,0xcb,0x9d };
    const uint8_t CIPHERTEXT[] = { 0x7b,0x29,0x31,0xf5,0x85,0x5f,0x71,0x71,0x45,0xe0,0x0f,0x15,0x2a,0x9f,0x47,0x94,0x35,0x9b,0x1f,0xfc,0xb3,0xe5,0x5f,0x59,0x4e,0x33,0x09,0x8b,0x51,0xc2,0x3a,0x6c,0x74,0xa0,0x6c,0x1d,0x94,0xfd,0xed,0x7f,0xd2,0xae,0x42,0xc7,0xdb,0x7a,0xca,0xef,0x58,0x44,0xcb,0x33,0xae,0xdd,0xc6,0x85,0x25,0x85,0xed,0x00,0x20,0xa6,0x69,0x9d,0x2c,0xb5,0x38,0x09,0xce,0xfd,0x16,0x91,0x48,0xce,0x42,0x29,0x2a,0xfa,0xb0,0x63,0x44,0x39,0x78,0x30,0x6c,0x58,0x2c,0x18,0xb9,0xce,0x0d,0xa3,0xd0,0x84,0xce,0x4d,0x3c,0x48,0x2c,0xfd,0x8f,0xcf,0x1a,0x85,0x08,0x4e,0x89,0xfb,0x88,0xb4,0x0a,0x08,0x4d,0x5e,0x97,0x24,0x66,0xd0,0x76,0x66,0x12,0x6f,0xb7,0x61,0xf8,0x40,0x78,0xf2 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMMT128-ENCRYPT-8", "[CBC][MMT][128][ENCRYPT][n8]") {
    const uint8_t KEY[] = { 0xf6,0xe8,0x7d,0x71,0xb0,0x10,0x4d,0x6e,0xb0,0x6a,0x68,0xdc,0x6a,0x71,0xf4,0x98 };
    const uint8_t IV[] = { 0x1c,0x24,0x5f,0x26,0x19,0x5b,0x76,0xeb,0xeb,0xc2,0xed,0xca,0xc4,0x12,0xa2,0xf8 };
    const uint8_t PLAINTEXT[] = { 0xf8,0x2b,0xef,0x3c,0x73,0xa6,0xf7,0xf8,0x0d,0xb2,0x85,0x72,0x6d,0x69,0x1d,0xb6,0xbf,0x55,0xee,0xc2,0x5a,0x85,0x9d,0x3b,0xa0,0xe0,0x44,0x5f,0x26,0xb9,0xbb,0x3b,0x16,0xa3,0x16,0x1e,0xd1,0x86,0x6e,0x4d,0xd8,0xf2,0xe5,0xf8,0xec,0xb4,0xe4,0x6d,0x74,0xa7,0xa7,0x8c,0x20,0xcd,0xfc,0x7b,0xcc,0x9e,0x47,0x9b,0xa7,0xa0,0xca,0xba,0x94,0x38,0x23,0x8a,0xd0,0xc0,0x16,0x51,0xd5,0xd9,0x8d,0xe3,0x7f,0x03,0xdd,0xce,0x6e,0x6b,0x4b,0xd4,0xab,0x03,0xcf,0x9e,0x8e,0xd8,0x18,0xae,0xdf,0xa1,0xcf,0x96,0x3b,0x93,0x20,0x67,0xb9,0x7d,0x77,0x6d,0xce,0x10,0x87,0x19,0x6e,0x7e,0x91,0x3f,0x74,0x48,0xe3,0x82,0x44,0x50,0x9f,0x0c,0xaf,0x36,0xbd,0x82,0x17,0xe1,0x53,0x36,0xd3,0x5c,0x14,0x9f,0xd4,0xe4,0x17,0x07,0x89,0x3f,0xdb,0x84,0x01,0x4f,0x87,0x29 };
    const uint8_t CIPHERTEXT[] = { 0xb0,0x95,0x12,0xf3,0xef,0xf9,0xed,0x0d,0x85,0x89,0x09,0x83,0xa7,0x3d,0xad,0xbb,0x7c,0x36,0x78,0xd5,0x25,0x81,0xbe,0x64,0xa8,0xa8,0xfc,0x58,0x6f,0x49,0x0f,0x25,0x21,0x29,0x7a,0x47,0x8a,0x05,0x98,0x04,0x0e,0xbd,0x0f,0x55,0x09,0xfa,0xfb,0x09,0x69,0xf9,0xd9,0xe6,0x00,0xea,0xef,0x33,0xb1,0xb9,0x3e,0xed,0x99,0x68,0x7b,0x16,0x7f,0x89,0xa5,0x06,0x5a,0xac,0x43,0x9c,0xe4,0x6f,0x3b,0x8d,0x22,0xd3,0x08,0x65,0xe6,0x4e,0x45,0xef,0x8c,0xd3,0x0b,0x69,0x84,0x35,0x3a,0x84,0x4a,0x11,0xc8,0xcd,0x60,0xdb,0xa0,0xe8,0x86,0x6b,0x3e,0xe3,0x0d,0x24,0xb3,0xfa,0x8a,0x64,0x3b,0x32,0x83,0x53,0xe0,0x60,0x10,0xfa,0x82,0x73,0xc8,0xfd,0x54,0xef,0x0a,0x2b,0x69,0x30,0xe5,0x52,0x0a,0xae,0x5c,0xd5,0x90,0x2f,0x9b,0x86,0xa3,0x35,0x92,0xca,0x43,0x65 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMMT128-ENCRYPT-9", "[CBC][MMT][128][ENCRYPT][n9]") {
    const uint8_t KEY[] = { 0x2c,0x14,0x41,0x37,0x51,0xc3,0x1e,0x27,0x30,0x57,0x0b,0xa3,0x36,0x1c,0x78,0x6b };
    const uint8_t IV[] = { 0x1d,0xbb,0xeb,0x2f,0x19,0xab,0xb4,0x48,0xaf,0x84,0x97,0x96,0x24,0x4a,0x19,0xd7 };
    const uint8_t PLAINTEXT[] = { 0x40,0xd9,0x30,0xf9,0xa0,0x53,0x34,0xd9,0x81,0x6f,0xe2,0x04,0x99,0x9c,0x3f,0x82,0xa0,0x3f,0x6a,0x04,0x57,0xa8,0xc4,0x75,0xc9,0x45,0x53,0xd1,0xd1,0x16,0x69,0x3a,0xdc,0x61,0x80,0x49,0xf0,0xa7,0x69,0xa2,0xee,0xd6,0xa6,0xcb,0x14,0xc0,0x14,0x3e,0xc5,0xcc,0xcd,0xbc,0x8d,0xec,0x4c,0xe5,0x60,0xcf,0xd2,0x06,0x22,0x57,0x09,0x32,0x6d,0x4d,0xe7,0x94,0x8e,0x54,0xd6,0x03,0xd0,0x1b,0x12,0xd7,0xfe,0xd7,0x52,0xfb,0x23,0xf1,0xaa,0x44,0x94,0xfb,0xb0,0x01,0x30,0xe9,0xde,0xd4,0xe7,0x7e,0x37,0xc0,0x79,0x04,0x2d,0x82,0x80,0x40,0xc3,0x25,0xb1,0xa5,0xef,0xd1,0x5f,0xc8,0x42,0xe4,0x40,0x14,0xca,0x43,0x74,0xbf,0x38,0xf3,0xc3,0xfc,0x3e,0xe3,0x27,0x73,0x3b,0x0c,0x8a,0xee,0x1a,0xbc,0xd0,0x55,0x77,0x2f,0x18,0xdc,0x04,0x60,0x3f,0x7b,0x2c,0x1e,0xa6,0x9f,0xf6,0x62,0x36,0x1f,0x2b,0xe0,0xa1,0x71,0xbb,0xdc,0xea,0x1e,0x5d,0x3f };
    const uint8_t CIPHERTEXT[] = { 0x6b,0xe8,0xa1,0x28,0x00,0x45,0x5a,0x32,0x05,0x38,0x85,0x3e,0x0c,0xba,0x31,0xbd,0x2d,0x80,0xea,0x0c,0x85,0x16,0x4a,0x4c,0x5c,0x26,0x1a,0xe4,0x85,0x41,0x7d,0x93,0xef,0xfe,0x2e,0xbc,0x0d,0x0a,0x0b,0x51,0xd6,0xea,0x18,0x63,0x3d,0x21,0x0c,0xf6,0x3c,0x0c,0x4d,0xdb,0xc2,0x76,0x07,0xf2,0xe8,0x1e,0xd9,0x11,0x31,0x91,0xef,0x86,0xd5,0x6f,0x3b,0x99,0xbe,0x6c,0x41,0x5a,0x41,0x50,0x29,0x9f,0xb8,0x46,0xce,0x71,0x60,0xb4,0x0b,0x63,0xba,0xf1,0x17,0x9d,0x19,0x27,0x5a,0x2e,0x83,0x69,0x83,0x76,0xd2,0x8b,0x92,0x54,0x8c,0x68,0xe0,0x6e,0x6d,0x99,0x4e,0x2c,0x15,0x01,0xed,0x29,0x70,0x14,0xe7,0x02,0xcd,0xef,0xee,0x2f,0x65,0x64,0x47,0x70,0x60,0x09,0x61,0x4d,0x80,0x1d,0xe1,0xca,0xaf,0x73,0xf8,0xb7,0xfa,0x56,0xcf,0x1b,0xa9,0x4b,0x63,0x19,0x33,0xbb,0xe5,0x77,0x62,0x43,0x80,0x85,0x0f,0x11,0x74,0x35,0xa0,0x35,0x5b,0x2b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMMT128-DECRYPT-0", "[CBC][MMT][128][DECRYPT][n0]") {
    const uint8_t KEY[] = { 0x6a,0x70,0x82,0xcf,0x8c,0xda,0x13,0xef,0xf4,0x8c,0x81,0x58,0xdd,0xa2,0x06,0xae };
    const uint8_t IV[] = { 0xbd,0x41,0x72,0x93,0x40,0x78,0xc2,0x01,0x1c,0xb1,0xf3,0x1c,0xff,0xaf,0x48,0x6e };
    const uint8_t PLAINTEXT[] = { 0x94,0x0b,0xc7,0x6d,0x61,0xe2,0xc4,0x9d,0xdd,0xd5,0xdf,0x7f,0x37,0xfc,0xf1,0x05 };
    const uint8_t CIPHERTEXT[] = { 0xf8,0xeb,0x31,0xb3,0x1e,0x37,0x4e,0x96,0x00,0x30,0xcd,0x1c,0xad,0xb0,0xef,0x0c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMMT128-DECRYPT-1", "[CBC][MMT][128][DECRYPT][n1]") {
    const uint8_t KEY[] = { 0x62,0x5e,0xef,0xa1,0x8a,0x47,0x56,0x45,0x4e,0x21,0x8d,0x8b,0xfe,0xd5,0x6e,0x36 };
    const uint8_t IV[] = { 0x73,0xd9,0xd0,0xe2,0x7c,0x2e,0xc5,0x68,0xfb,0xc1,0x1f,0x6a,0x09,0x98,0xd7,0xc8 };
    const uint8_t PLAINTEXT[] = { 0x36,0x0d,0xc1,0x89,0x6c,0xe6,0x01,0xdf,0xb2,0xa9,0x49,0x25,0x00,0x67,0xaa,0xd9,0x67,0x37,0x84,0x7a,0x45,0x80,0xed,0xe2,0x65,0x4a,0x32,0x9b,0x84,0x2f,0xe8,0x1e };
    const uint8_t CIPHERTEXT[] = { 0x5d,0x6f,0xed,0x86,0xf0,0xc4,0xfe,0x59,0xa0,0x78,0xd6,0x36,0x1a,0x14,0x28,0x12,0x51,0x4b,0x29,0x5d,0xc6,0x2f,0xf5,0xd6,0x08,0xa4,0x2e,0xa3,0x76,0x14,0xe6,0xa1 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMMT128-DECRYPT-2", "[CBC][MMT][128][DECRYPT][n2]") {
    const uint8_t KEY[] = { 0xfd,0x6e,0x0b,0x95,0x4a,0xe2,0xe3,0xb7,0x23,0xd6,0xc9,0xfc,0xae,0x6a,0xb0,0x9b };
    const uint8_t IV[] = { 0xf0,0x8b,0x65,0xc9,0xf4,0xdd,0x95,0x00,0x39,0x94,0x1d,0xa2,0xe8,0x05,0x8c,0x4e };
    const uint8_t PLAINTEXT[] = { 0xa2,0x06,0x38,0x59,0x45,0xb2,0x1f,0x81,0x2a,0x94,0x75,0xf4,0x7f,0xdd,0xbb,0x7f,0xbd,0xda,0x95,0x8a,0x8d,0x14,0xc0,0xdb,0xcd,0xae,0xc3,0x6e,0x8b,0x28,0xf1,0xf6,0xec,0xec,0xa1,0xce,0xae,0x4c,0xe1,0x77,0x21,0xd1,0x62,0xc1,0xd4,0x2a,0x66,0xc1 };
    const uint8_t CIPHERTEXT[] = { 0xe2,0x9e,0x31,0x14,0xc8,0x00,0x0e,0xb4,0x84,0x39,0x5b,0x25,0x6b,0x1b,0x32,0x67,0x89,0x4f,0x29,0x0d,0x39,0x99,0x81,0x9f,0xf3,0x5d,0xa0,0x3e,0x64,0x63,0xc1,0x86,0xc4,0xd7,0xeb,0xb9,0x64,0x94,0x1f,0x19,0x86,0xa2,0xd6,0x95,0x72,0xfc,0xab,0xa8 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMMT128-DECRYPT-3", "[CBC][MMT][128][DECRYPT][n3]") {
    const uint8_t KEY[] = { 0x7b,0x1a,0xb9,0x14,0x4b,0x02,0x39,0x31,0x5c,0xd5,0xee,0xc6,0xc7,0x56,0x63,0xbd };
    const uint8_t IV[] = { 0x0b,0x1e,0x74,0xf4,0x5c,0x17,0xff,0x30,0x4d,0x99,0xc0,0x59,0xce,0x5c,0xde,0x09 };
    const uint8_t PLAINTEXT[] = { 0xb9,0x68,0xae,0xb1,0x99,0xad,0x6b,0x3c,0x8e,0x01,0xf2,0x6c,0x2e,0xda,0xd4,0x44,0x53,0x8c,0x78,0xbf,0xa3,0x6e,0xd6,0x8c,0xa7,0x61,0x23,0xb8,0xcd,0xce,0x61,0x5a,0x01,0xf6,0x11,0x2b,0xb8,0x0b,0xfc,0x3f,0x17,0x49,0x05,0x78,0xfb,0x1f,0x90,0x9a,0x52,0xe1,0x62,0x63,0x7b,0x06,0x2d,0xb0,0x4e,0xfe,0xe2,0x91,0xa1,0xf1,0xaf,0x60 };
    const uint8_t CIPHERTEXT[] = { 0xd3,0xf8,0x9b,0x71,0xe0,0x33,0x07,0x0f,0x9d,0x75,0x16,0xa6,0xcb,0x4e,0xa5,0xef,0x51,0xd6,0xfb,0x63,0xd4,0xf0,0xfe,0xa0,0x89,0xd0,0xa6,0x0e,0x47,0xbb,0xb3,0xc2,0xe1,0x0e,0x9b,0xa3,0xb2,0x82,0xc7,0xcb,0x79,0xae,0xfe,0x30,0x68,0xce,0x22,0x83,0x77,0xc2,0x1a,0x58,0xfe,0x5a,0x0f,0x88,0x83,0xd0,0xdb,0xd3,0xd0,0x96,0xbe,0xca };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMMT128-DECRYPT-4", "[CBC][MMT][128][DECRYPT][n4]") {
    const uint8_t KEY[] = { 0x36,0x46,0x6b,0x6b,0xd2,0x5e,0xa3,0x85,0x7e,0xa4,0x2f,0x0c,0xac,0x19,0x19,0xb1 };
    const uint8_t IV[] = { 0x71,0x86,0xfb,0x6b,0xdf,0xa9,0x8a,0x16,0x18,0x95,0x44,0xb2,0x28,0xf3,0xbc,0xd3 };
    const uint8_t PLAINTEXT[] = { 0x99,0x99,0x83,0x46,0x7c,0x47,0xbb,0x1d,0x66,0xd7,0x32,0x7a,0xb5,0xc5,0x8f,0x61,0xdd,0xb0,0x9b,0x93,0xbd,0x24,0x60,0xcb,0x78,0xcb,0xc1,0x2b,0x5f,0xa1,0xea,0x0c,0x5f,0x75,0x9c,0xcc,0x5e,0x47,0x86,0x97,0x68,0x70,0x12,0xff,0x46,0x73,0xf6,0xe6,0x1e,0xec,0xae,0xda,0x0c,0xca,0xd2,0xd6,0x74,0xd3,0x09,0x8c,0x7d,0x17,0xf8,0x87,0xb6,0x2b,0x56,0xf5,0x6b,0x03,0xb4,0xd0,0x55,0xbf,0x3a,0x44,0x60,0xe8,0x3e,0xfa };
    const uint8_t CIPHERTEXT[] = { 0x9e,0xd9,0x57,0xbd,0x9b,0xc5,0x2b,0xba,0x76,0xf6,0x8c,0xfb,0xcd,0xe5,0x21,0x57,0xa8,0xca,0x4f,0x71,0xac,0x05,0x0a,0x3d,0x92,0xbd,0xeb,0xbf,0xd7,0xc7,0x83,0x16,0xb4,0xc9,0xf0,0xba,0x50,0x9f,0xad,0x02,0x35,0xfd,0xaf,0xe9,0x00,0x56,0xad,0x11,0x5d,0xfd,0xbf,0x08,0x33,0x8b,0x2a,0xcb,0x1c,0x80,0x7a,0x88,0x18,0x2d,0xd2,0xa8,0x82,0xd1,0x81,0x0d,0x43,0x02,0xd5,0x98,0x45,0x4e,0x34,0xef,0x2b,0x23,0x68,0x7d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMMT128-DECRYPT-5", "[CBC][MMT][128][DECRYPT][n5]") {
    const uint8_t KEY[] = { 0x89,0x37,0x3e,0xe6,0xe2,0x83,0x97,0x64,0x0d,0x50,0x82,0xee,0xd4,0x12,0x32,0x39 };
    const uint8_t IV[] = { 0x1a,0x74,0xd7,0xc8,0x59,0x67,0x2c,0x80,0x4b,0x82,0x47,0x2f,0x7e,0x6d,0x3c,0x6b };
    const uint8_t PLAINTEXT[] = { 0x45,0xef,0xd0,0x0d,0xaa,0x4c,0xdc,0x82,0x73,0xef,0x78,0x5c,0xae,0x9e,0x94,0x4a,0x76,0x64,0xa2,0x39,0x1e,0x1e,0x2c,0x44,0x9f,0x47,0x5a,0xce,0xc0,0x12,0x4b,0xbc,0x22,0x94,0x43,0x31,0x67,0x86,0x17,0x40,0x8a,0x17,0x02,0x91,0x79,0x71,0xf4,0x65,0x43,0x10,0xff,0xb9,0x22,0x9b,0xec,0x61,0x73,0x71,0x5a,0xe5,0x12,0xd3,0x7f,0x93,0xaa,0xa6,0xab,0xf0,0x09,0xf7,0xe3,0x0d,0x65,0x66,0x9d,0x1d,0xb0,0x36,0x6b,0x5b,0xce,0x4c,0x7b,0x00,0xf8,0x71,0x01,0x4f,0x57,0x53,0x74,0x4a,0x18,0x78,0xdc,0x57 };
    const uint8_t CIPHERTEXT[] = { 0x1b,0xcb,0xa4,0x4d,0xdf,0xf5,0x03,0xdb,0x7c,0x8c,0x2e,0xc4,0xc4,0xee,0xa0,0xe8,0x27,0x95,0x77,0x40,0xcc,0xe1,0x25,0xc1,0xe1,0x17,0x69,0x84,0x2f,0xa9,0x7e,0x25,0xf1,0xb8,0x92,0x69,0xe6,0xd7,0x79,0x23,0xa5,0x12,0xa3,0x58,0x31,0x2f,0x4b,0xa1,0xcd,0x33,0xf2,0xd1,0x11,0x28,0x0c,0xd8,0x3e,0x1e,0xf9,0xe7,0xcf,0x70,0x36,0xd5,0x50,0x48,0xd5,0xc2,0x73,0x65,0x2a,0xfa,0x61,0x1c,0xc8,0x1b,0x4e,0x9d,0xac,0x7b,0x50,0x78,0xb7,0xc4,0x71,0x60,0x62,0xe1,0x03,0x2e,0xad,0x1e,0x33,0x29,0x58,0x8a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMMT128-DECRYPT-6", "[CBC][MMT][128][DECRYPT][n6]") {
    const uint8_t KEY[] = { 0xba,0xb0,0xcc,0xed,0xdc,0x0a,0xbd,0x63,0xe3,0xf8,0x2e,0x9f,0xbf,0xf7,0xb8,0xaa };
    const uint8_t IV[] = { 0x68,0xb9,0x14,0x0f,0x30,0x04,0x90,0xc5,0xc9,0x42,0xf6,0x6e,0x77,0x7e,0xb8,0x06 };
    const uint8_t PLAINTEXT[] = { 0xc5,0x58,0x5f,0xf2,0x15,0xbb,0xb7,0x3b,0xa5,0x39,0x34,0x40,0x85,0x2f,0xb1,0x99,0x43,0x6d,0xe0,0xd1,0x5e,0x55,0xc6,0x31,0xf8,0x77,0x67,0x0a,0xa3,0xed,0xa9,0xf6,0x72,0xeb,0x1f,0x87,0x6f,0x09,0x54,0x4e,0x63,0x55,0x84,0x36,0xb8,0x92,0x80,0x00,0xdb,0x2f,0x02,0xa5,0xad,0x90,0xf9,0x5b,0x05,0xac,0x4c,0xf4,0x9e,0x19,0x8e,0x61,0x7e,0x76,0x78,0x48,0x0f,0xdf,0x0e,0xfa,0xcc,0x6a,0xae,0x69,0x12,0x71,0xe6,0xcd,0xd3,0x54,0x1e,0xbf,0x71,0x9a,0x1c,0xca,0xed,0xb2,0x4e,0x2f,0x80,0xf9,0x24,0x55,0xdd,0x59,0x10,0xcb,0x50,0x86,0xb0,0x96,0x0a,0x39,0x42,0xec,0x18,0x2d,0xcb,0xd7 };
    const uint8_t CIPHERTEXT[] = { 0xc6,0x5b,0x94,0xb1,0xf2,0x91,0xfa,0x9f,0x06,0x00,0xf2,0x2c,0x3c,0x04,0x32,0xc8,0x95,0xad,0x5d,0x17,0x7b,0xcc,0xcc,0x9e,0xa4,0x4e,0x8e,0xc3,0x39,0xc9,0xad,0xf4,0x38,0x55,0xb3,0x26,0x17,0x9d,0x6d,0x81,0xaa,0x36,0xef,0x59,0x46,0x2f,0xd8,0x61,0x27,0xe9,0xd8,0x1b,0x0f,0x28,0x6f,0x93,0x30,0x6b,0xf7,0x4d,0x4c,0x79,0xe4,0x7c,0x1b,0x3d,0x4b,0x74,0xed,0xd3,0xa1,0x62,0x90,0xe3,0xc6,0x3b,0x74,0x2e,0x41,0xf2,0x0d,0x66,0xce,0xee,0x79,0x43,0x16,0xbb,0x63,0xd3,0xbd,0x00,0x27,0x12,0xa1,0xb1,0x36,0xba,0x61,0x85,0xbd,0x5c,0x1d,0xab,0x81,0xb0,0x7d,0xb9,0x0d,0x2a,0xf5,0xe5 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMMT128-DECRYPT-7", "[CBC][MMT][128][DECRYPT][n7]") {
    const uint8_t KEY[] = { 0x9c,0x70,0x28,0x98,0xef,0xa4,0x45,0x57,0xb2,0x9e,0xd2,0x83,0xf5,0xbc,0x02,0x93 };
    const uint8_t IV[] = { 0xce,0xc6,0xe1,0xb8,0x2e,0x8b,0x2a,0x59,0x1a,0x9f,0xa5,0xff,0x1c,0xf5,0xcc,0x51 };
    const uint8_t PLAINTEXT[] = { 0x1d,0x1f,0x8d,0x81,0xbd,0xc3,0xe2,0xc7,0xcb,0x05,0x7f,0x40,0x8e,0x64,0x50,0x00,0x0c,0x5a,0xae,0xd3,0x26,0x0f,0xf1,0xe8,0x7f,0xbb,0x6f,0x32,0x4d,0xf6,0x88,0x7f,0xfd,0x8f,0x78,0xd7,0xe2,0xa0,0x4c,0x9e,0xd9,0xde,0xda,0x9d,0x64,0x48,0x2d,0x2b,0x00,0x2f,0x4a,0x2b,0x78,0xd8,0xb4,0xf6,0x91,0x87,0x5c,0x82,0x95,0xd4,0xa6,0x4b,0x22,0x25,0x7c,0xea,0xf7,0x13,0xed,0x2f,0x4b,0x92,0x53,0x0d,0x7a,0xd7,0x15,0x1d,0x62,0x9a,0xcd,0xa8,0x82,0xb4,0x82,0x95,0x77,0xa4,0x39,0x90,0xb0,0x94,0x8c,0x11,0x49,0xc2,0x2f,0xe4,0x27,0x36,0x56,0xd1,0xb0,0x88,0x33,0x93,0x0e,0x8b,0x06,0x70,0x9a,0x94,0x57,0x9a,0x78,0xfc,0x22,0x0f,0x70,0x57,0xbb,0xc1,0xfa,0x9f,0x65,0x63 };
    const uint8_t CIPHERTEXT[] = { 0xba,0x9f,0x64,0x67,0x55,0xda,0xcc,0x22,0x91,0x1f,0x51,0xd7,0xde,0x2f,0x7e,0x7c,0xb0,0xbc,0x0b,0x75,0x25,0x7e,0xa4,0x4f,0xe8,0x83,0xed,0xb0,0x55,0xc7,0xc2,0x8e,0xde,0x04,0xc3,0xa0,0xad,0xcb,0x10,0x12,0x8a,0xd4,0x51,0x7d,0x00,0x93,0xfa,0x16,0xbb,0x0b,0xcd,0x26,0x35,0xe7,0xa0,0xba,0x92,0xc7,0x60,0x9b,0xc8,0xd8,0x56,0x80,0x02,0xa7,0xa9,0x83,0x47,0x37,0x24,0xd2,0x56,0x51,0x3a,0xa7,0xd5,0x1b,0x47,0x7a,0xab,0xec,0x19,0x75,0xab,0x5f,0xaf,0x28,0x72,0xa6,0x40,0x7e,0x92,0x21,0x80,0xef,0xf0,0x2f,0x1e,0xf8,0x6a,0x45,0x91,0xc8,0xbd,0x3d,0x14,0x3d,0xa6,0xf0,0xef,0x0e,0x48,0x06,0xf9,0x4a,0xce,0x0d,0x5b,0x01,0x51,0xc9,0x96,0x40,0xfc,0xcb,0xc8,0x43 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMMT128-DECRYPT-8", "[CBC][MMT][128][DECRYPT][n8]") {
    const uint8_t KEY[] = { 0x56,0x74,0x63,0x6d,0xbd,0xb3,0x8f,0x70,0x5f,0x0b,0x08,0xc3,0x72,0xef,0x47,0x85 };
    const uint8_t IV[] = { 0x3f,0x20,0xce,0x05,0x09,0xb5,0x74,0x20,0xd5,0x3b,0x6b,0xe4,0xd0,0xb7,0xf0,0xa9 };
    const uint8_t PLAINTEXT[] = { 0x6d,0x40,0xfd,0x2f,0x90,0x8f,0x48,0xce,0x19,0x24,0x1b,0x6b,0x27,0x8b,0x1b,0x16,0x76,0xdf,0xfd,0x4a,0x97,0xce,0x9f,0x8a,0x15,0x74,0xc3,0x3b,0xc5,0x92,0x37,0xde,0xb5,0x36,0xbe,0xe3,0x76,0xfd,0x6c,0x38,0x1e,0x69,0x87,0x70,0x0e,0x39,0x28,0x3a,0xa1,0x11,0xcf,0x1a,0x59,0xf2,0x6f,0xae,0x6f,0xb6,0x70,0x0b,0xf0,0x12,0x64,0x6a,0x2a,0xb8,0x02,0x39,0xbf,0x5e,0x16,0x32,0x32,0x90,0x43,0xaa,0x87,0xd7,0x91,0x19,0x78,0xb3,0x65,0x23,0xa2,0xbc,0x0b,0xed,0x9a,0x97,0x37,0xcc,0xf7,0xa0,0x0b,0xaa,0x2f,0x38,0x22,0xb4,0xe9,0xe7,0x42,0xe1,0x68,0xe7,0x06,0x92,0x90,0x70,0x5f,0xed,0x2e,0xb6,0x3a,0xa0,0x44,0xb7,0x8f,0x97,0xdd,0x33,0xa8,0xd6,0xb2,0x47,0x41,0xec,0x1f,0xd8,0xc8,0xdb,0x79,0xd9,0x3b,0x88,0x4e,0x76,0x2d,0xba,0x0f,0x40,0x69,0x61 };
    const uint8_t CIPHERTEXT[] = { 0x19,0x83,0x51,0xf4,0x53,0x10,0x3f,0xac,0xe6,0x65,0x56,0x66,0xfe,0x90,0xbd,0xbd,0x96,0x30,0xe3,0x73,0x3b,0x2d,0x66,0xc0,0x13,0xa6,0x34,0xe9,0x1f,0x2b,0xf0,0x15,0xbd,0x2d,0x97,0x5d,0x71,0xb2,0x63,0x22,0xe4,0x4d,0xef,0xa3,0x2d,0x4e,0x9d,0xce,0x50,0x36,0x35,0x57,0x04,0x6e,0xce,0x08,0xba,0x38,0xf2,0x58,0xda,0xe5,0xfd,0x3e,0x50,0x49,0xc6,0x47,0x47,0x6c,0x81,0xe7,0x34,0x82,0xe4,0x0c,0x17,0x1d,0x89,0xf9,0xfe,0xa2,0x94,0x52,0xca,0xf9,0x95,0x73,0x35,0x89,0xb0,0x06,0x14,0x64,0xfb,0xd5,0xda,0xbe,0x27,0xdc,0x5e,0xa4,0x63,0xa3,0xde,0xeb,0x7d,0xcb,0x43,0x66,0x4a,0xe6,0xa6,0x5c,0x49,0x8c,0x14,0x38,0x83,0xab,0x8e,0x83,0xb5,0x1e,0x54,0x10,0xb1,0x81,0x64,0x76,0x02,0x44,0x3d,0xc3,0xcf,0xff,0xe8,0x6f,0x02,0x05,0x39,0x8f,0xa8,0x3c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMMT128-DECRYPT-9", "[CBC][MMT][128][DECRYPT][n9]") {
    const uint8_t KEY[] = { 0x97,0xa1,0x02,0x55,0x29,0xb9,0x92,0x5e,0x25,0xbb,0xe7,0x87,0x70,0xca,0x2f,0x99 };
    const uint8_t IV[] = { 0xd4,0xb4,0xea,0xb9,0x2a,0xa9,0x63,0x7e,0x87,0xd3,0x66,0x38,0x4e,0xd6,0x91,0x5c };
    const uint8_t PLAINTEXT[] = { 0xe8,0xb8,0x91,0x50,0xd8,0x43,0x8b,0xf5,0xb1,0x74,0x49,0xd6,0xed,0x26,0xbd,0x72,0x12,0x7e,0x10,0xe4,0xaa,0x57,0xca,0xd8,0x52,0x83,0xe8,0x35,0x9e,0x08,0x92,0x08,0xe8,0x49,0x21,0x64,0x9f,0x5b,0x60,0xea,0x21,0xf7,0x86,0x7c,0xbc,0x96,0x20,0x56,0x0c,0x4c,0x62,0x38,0xdb,0x02,0x12,0x16,0xdb,0x45,0x3c,0x99,0x43,0xf1,0xf1,0xa6,0x05,0x46,0x17,0x3d,0xae,0xf2,0x55,0x7c,0x3c,0xdd,0x85,0x50,0x31,0xb3,0x53,0xd4,0xbf,0x17,0x6f,0x28,0x43,0x9e,0x48,0x78,0x5c,0x37,0xd3,0x8f,0x27,0x0a,0xa4,0xa6,0xfa,0xad,0x2b,0xaa,0xbc,0xb0,0xc0,0xb2,0xd1,0xdd,0x53,0x22,0x93,0x74,0x98,0xce,0x80,0x3b,0xa1,0x14,0x84,0x40,0xa5,0x2e,0x22,0x7d,0xdb,0xa4,0x87,0x2f,0xe4,0xd8,0x1d,0x2d,0x76,0xa9,0x39,0xd2,0x47,0x55,0xad,0xb8,0xa7,0xb8,0x45,0x2c,0xee,0xd2,0xd1,0x79,0xe1,0xa5,0x84,0x8f,0x31,0x6f,0x5c,0x01,0x63,0x00,0xa3,0x90,0xbf,0xa7 };
    const uint8_t CIPHERTEXT[] = { 0x22,0xcd,0xc3,0x30,0x6f,0xcd,0x4d,0x31,0xcc,0xd3,0x27,0x20,0xcb,0xb6,0x1b,0xad,0x28,0xd8,0x55,0x67,0x06,0x57,0xc4,0x8c,0x7b,0x88,0xc3,0x1f,0x4f,0xa1,0xf9,0x3c,0x01,0xb5,0x7d,0xa9,0x0b,0xe6,0x3e,0xad,0x67,0xd6,0xa3,0x25,0x52,0x5e,0x6e,0xd4,0x50,0x83,0xe6,0xfb,0x70,0xa5,0x35,0x29,0xd1,0xfa,0x0f,0x55,0x65,0x3b,0x94,0x2a,0xf5,0x9d,0x78,0xa2,0x66,0x03,0x61,0xd6,0x3a,0x72,0x90,0x15,0x5a,0xc5,0xc4,0x33,0x12,0xa2,0x5b,0x23,0x5d,0xac,0xbb,0xc8,0x63,0xfa,0xf0,0x09,0x40,0xc9,0x96,0x24,0x07,0x6d,0xfa,0x44,0x06,0x8e,0x7c,0x55,0x4c,0x90,0x38,0x17,0x69,0x53,0xe5,0x71,0x75,0x1d,0xfc,0x09,0x54,0xd4,0x1d,0x11,0x37,0x71,0xb0,0x64,0x66,0xb1,0xc8,0xd1,0x3e,0x0d,0x4c,0xb6,0x75,0xed,0x58,0xd1,0xa6,0x19,0xe1,0x54,0x09,0x70,0x98,0x37,0x81,0xdc,0x11,0xd2,0xdd,0x85,0x25,0xab,0x57,0x45,0x95,0x8d,0x61,0x5d,0xef,0xda };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

