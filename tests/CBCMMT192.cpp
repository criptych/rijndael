#include "rijndael.h"
#include "catch.hpp"
#include <cstring>

static inline std::string buf2str(const uint8_t *buf, size_t len) {
    std::ostringstream ss; ss << std::hex << std::setfill('0');
    for (size_t i = 0; i < len; ++i) {
        ss << std::setw(2) << static_cast<int>(buf[i]) << ' ';
    }
    return ss.str();
}

TEST_CASE("CBCMMT192-ENCRYPT-0", "[CBC][MMT][192][ENCRYPT][n0]") {
    const uint8_t KEY[] = { 0xba,0x75,0xf4,0xd1,0xd9,0xd7,0xcf,0x7f,0x55,0x14,0x45,0xd5,0x6c,0xc1,0xa8,0xab,0x2a,0x07,0x8e,0x15,0xe0,0x49,0xdc,0x2c };
    const uint8_t IV[] = { 0x53,0x1c,0xe7,0x81,0x76,0x40,0x16,0x66,0xaa,0x30,0xdb,0x94,0xec,0x4a,0x30,0xeb };
    const uint8_t PLAINTEXT[] = { 0xc5,0x1f,0xc2,0x76,0x77,0x4d,0xad,0x94,0xbc,0xdc,0x1d,0x28,0x91,0xec,0x86,0x68 };
    const uint8_t CIPHERTEXT[] = { 0x70,0xdd,0x95,0xa1,0x4e,0xe9,0x75,0xe2,0x39,0xdf,0x36,0xff,0x4a,0xee,0x1d,0x5d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMMT192-ENCRYPT-1", "[CBC][MMT][192][ENCRYPT][n1]") {
    const uint8_t KEY[] = { 0xea,0xb3,0xb1,0x9c,0x58,0x1a,0xa8,0x73,0xe1,0x98,0x1c,0x83,0xab,0x8d,0x83,0xbb,0xf8,0x02,0x51,0x11,0xfb,0x2e,0x6b,0x21 };
    const uint8_t IV[] = { 0xf3,0xd6,0x66,0x7e,0x8d,0x4d,0x79,0x1e,0x60,0xf7,0x50,0x5b,0xa3,0x83,0xeb,0x05 };
    const uint8_t PLAINTEXT[] = { 0x9d,0x4e,0x4c,0xcc,0xd1,0x68,0x23,0x21,0x85,0x6d,0xf0,0x69,0xe3,0xf1,0xc6,0xfa,0x39,0x1a,0x08,0x3a,0x9f,0xb0,0x2d,0x59,0xdb,0x74,0xc1,0x40,0x81,0xb3,0xac,0xc4 };
    const uint8_t CIPHERTEXT[] = { 0x51,0xd4,0x47,0x79,0xf9,0x0d,0x40,0xa8,0x00,0x48,0x27,0x6c,0x03,0x5c,0xb4,0x9c,0xa2,0xa4,0x7b,0xcb,0x9b,0x9c,0xf7,0x27,0x0b,0x91,0x44,0x79,0x37,0x87,0xd5,0x3f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMMT192-ENCRYPT-2", "[CBC][MMT][192][ENCRYPT][n2]") {
    const uint8_t KEY[] = { 0x16,0xc9,0x3b,0xb3,0x98,0xf1,0xfc,0x0c,0xf6,0xd6,0x8f,0xc7,0xa5,0x67,0x3c,0xdf,0x43,0x1f,0xa1,0x47,0x85,0x2b,0x4a,0x2d };
    const uint8_t IV[] = { 0xea,0xae,0xca,0x2e,0x07,0xdd,0xed,0xf5,0x62,0xf9,0x4d,0xf6,0x3f,0x0a,0x65,0x0f };
    const uint8_t PLAINTEXT[] = { 0xc5,0xce,0x95,0x86,0x13,0xbf,0x74,0x17,0x18,0xc1,0x74,0x44,0x48,0x4e,0xba,0xf1,0x05,0x0d,0xdc,0xac,0xb5,0x9b,0x95,0x90,0x17,0x8c,0xbe,0x69,0xd7,0xad,0x79,0x19,0x60,0x8c,0xb0,0x3a,0xf1,0x3b,0xbe,0x04,0xf3,0x50,0x6b,0x71,0x8a,0x30,0x1e,0xa0 };
    const uint8_t CIPHERTEXT[] = { 0xed,0x6a,0x50,0xe0,0xc6,0x92,0x1d,0x52,0xd6,0x64,0x7f,0x75,0xd6,0x7b,0x4f,0xd5,0x6a,0xce,0x1f,0xed,0xb8,0xb5,0xa6,0xa9,0x97,0xb4,0xd1,0x31,0x64,0x05,0x47,0xd2,0x2c,0x5d,0x88,0x4a,0x75,0xe6,0x75,0x2b,0x58,0x46,0xb5,0xb3,0x3a,0x51,0x81,0xf4 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMMT192-ENCRYPT-3", "[CBC][MMT][192][ENCRYPT][n3]") {
    const uint8_t KEY[] = { 0x06,0x7b,0xb1,0x7b,0x4d,0xf7,0x85,0x69,0x7e,0xac,0xcf,0x96,0x1f,0x98,0xe2,0x12,0xcb,0x75,0xe6,0x79,0x7c,0xe9,0x35,0xcb };
    const uint8_t IV[] = { 0x8b,0x59,0xc9,0x20,0x9c,0x52,0x9c,0xa8,0x39,0x1c,0x9f,0xc0,0xce,0x03,0x3c,0x38 };
    const uint8_t PLAINTEXT[] = { 0xdb,0x37,0x85,0xa8,0x89,0xb4,0xbd,0x38,0x77,0x54,0xda,0x22,0x2f,0x0e,0x4c,0x2d,0x2b,0xfe,0x0d,0x79,0xe0,0x5b,0xc9,0x10,0xfb,0xa9,0x41,0xbe,0xea,0x30,0xf1,0x23,0x9e,0xac,0xf0,0x06,0x8f,0x46,0x19,0xec,0x01,0xc3,0x68,0xe9,0x86,0xfc,0xa6,0xb7,0xc5,0x8e,0x49,0x05,0x79,0xd2,0x96,0x11,0xbd,0x10,0x08,0x79,0x86,0xef,0xf5,0x4f };
    const uint8_t CIPHERTEXT[] = { 0xd5,0xf5,0x58,0x97,0x60,0xbf,0x9c,0x76,0x22,0x28,0xfd,0xe2,0x36,0xde,0x1f,0xa2,0xdd,0x2d,0xad,0x44,0x8d,0xb3,0xfa,0x9b,0xe0,0xc4,0x19,0x6e,0xfd,0x46,0xa3,0x5c,0x84,0xdd,0x1a,0xc7,0x7d,0x9d,0xb5,0x8c,0x95,0x91,0x8c,0xb3,0x17,0xa6,0x43,0x0a,0x08,0xd2,0xfb,0x6a,0x8e,0x8b,0x0f,0x1c,0x9b,0x72,0xc7,0xa3,0x44,0xdc,0x34,0x9f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMMT192-ENCRYPT-4", "[CBC][MMT][192][ENCRYPT][n4]") {
    const uint8_t KEY[] = { 0x0f,0xd3,0x9d,0xe8,0x3e,0x0b,0xe7,0x7a,0x79,0xc8,0xa4,0xa6,0x12,0xe3,0xdd,0x9c,0x8a,0xae,0x2c,0xe3,0x5e,0x7a,0x2b,0xf8 };
    const uint8_t IV[] = { 0x7e,0x1d,0x62,0x9b,0x84,0xf9,0x3b,0x07,0x9b,0xe5,0x1f,0x9a,0x5f,0x5c,0xb2,0x3c };
    const uint8_t PLAINTEXT[] = { 0x38,0xfb,0xda,0x37,0xe2,0x8f,0xa8,0x6d,0x9d,0x83,0xa4,0x34,0x5e,0x41,0x9d,0xea,0x95,0xd2,0x8c,0x78,0x18,0xff,0x25,0x92,0x5d,0xb6,0xac,0x3a,0xed,0xaf,0x0a,0x86,0x15,0x4e,0x20,0xa4,0xdf,0xcc,0x5b,0x1b,0x41,0x92,0x89,0x53,0x93,0xe5,0xeb,0x58,0x46,0xc8,0x8b,0xdb,0xd4,0x1e,0xcf,0x7a,0xf3,0x10,0x4f,0x41,0x0e,0xae,0xe4,0x70,0xf5,0xd9,0x01,0x7e,0xd4,0x60,0x47,0x5f,0x62,0x69,0x53,0x03,0x5a,0x13,0xdb,0x1f };
    const uint8_t CIPHERTEXT[] = { 0xed,0xad,0xae,0x2f,0x9a,0x45,0xff,0x34,0x73,0xe0,0x2d,0x90,0x4c,0x94,0xd9,0x4a,0x30,0xa4,0xd9,0x2d,0xa4,0xde,0xb6,0xbc,0xb4,0xb0,0x77,0x44,0x72,0x69,0x45,0x71,0x84,0x20,0x39,0xf2,0x1c,0x49,0x6e,0xf9,0x3f,0xd6,0x58,0x84,0x2c,0x73,0x5f,0x8a,0x81,0xfc,0xd0,0xaa,0x57,0x84,0x42,0xab,0x89,0x3b,0x18,0xf6,0x06,0xae,0xd1,0xba,0xb1,0x1f,0x81,0x45,0x2d,0xd4,0x5e,0x9b,0x56,0xad,0xf2,0xec,0xcf,0x4e,0xa0,0x95 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMMT192-ENCRYPT-5", "[CBC][MMT][192][ENCRYPT][n5]") {
    const uint8_t KEY[] = { 0xe3,0xfe,0xcc,0x75,0xf0,0x07,0x5a,0x09,0xb3,0x83,0xdf,0xd3,0x89,0xa3,0xd3,0x3c,0xc9,0xb8,0x54,0xb3,0xb2,0x54,0xc0,0xf4 };
    const uint8_t IV[] = { 0x36,0xea,0xb8,0x83,0xaf,0xef,0x93,0x6c,0xc3,0x8f,0x63,0x28,0x46,0x19,0xcd,0x19 };
    const uint8_t PLAINTEXT[] = { 0x93,0x1b,0x2f,0x5f,0x3a,0x58,0x20,0xd5,0x3a,0x6b,0xea,0xaa,0x64,0x31,0x08,0x3a,0x34,0x88,0xf4,0xeb,0x03,0xb0,0xf5,0xb5,0x7e,0xf8,0x38,0xe1,0x57,0x96,0x23,0x10,0x3b,0xd6,0xe6,0x80,0x03,0x77,0x53,0x8b,0x2e,0x51,0xef,0x70,0x8f,0x3c,0x49,0x56,0x43,0x2e,0x8a,0x8e,0xe6,0xa3,0x4e,0x19,0x06,0x42,0xb2,0x6a,0xd8,0xbd,0xae,0x6c,0x2a,0xf9,0xa6,0xc7,0x99,0x6f,0x3b,0x60,0x04,0xd2,0x67,0x1e,0x41,0xf1,0xc9,0xf4,0x0e,0xe0,0x3d,0x1c,0x4a,0x52,0xb0,0xa0,0x65,0x4a,0x33,0x1f,0x15,0xf3,0x4d,0xce };
    const uint8_t CIPHERTEXT[] = { 0x75,0x39,0x59,0x74,0xbd,0x32,0xb3,0x66,0x56,0x54,0xa6,0xc8,0xe3,0x96,0xb8,0x8a,0xe3,0x4b,0x12,0x35,0x75,0x87,0x2a,0x7a,0xb6,0x87,0xd8,0xe7,0x6b,0x46,0xdf,0x91,0x1a,0x8a,0x59,0x0c,0xd0,0x1d,0x2f,0x5c,0x33,0x0b,0xe3,0xa6,0x62,0x6e,0x9d,0xd3,0xaa,0x5e,0x10,0xed,0x14,0xe8,0xff,0x82,0x98,0x11,0xb6,0xfe,0xd5,0x0f,0x3f,0x53,0x3c,0xa4,0x38,0x5a,0x1c,0xbc,0xa7,0x8f,0x5c,0x47,0x44,0xe5,0x0f,0x2f,0x83,0x59,0x16,0x5c,0x24,0x85,0xd1,0x32,0x4e,0x76,0xc3,0xea,0xe7,0x6a,0x0c,0xca,0xc6,0x29 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMMT192-ENCRYPT-6", "[CBC][MMT][192][ENCRYPT][n6]") {
    const uint8_t KEY[] = { 0xf9,0xc2,0x75,0x65,0xeb,0x07,0x94,0x7c,0x8c,0xb5,0x1b,0x79,0x24,0x84,0x30,0xf7,0xb1,0x06,0x6c,0x3d,0x2f,0xdc,0x3d,0x13 };
    const uint8_t IV[] = { 0x2b,0xd6,0x7c,0xc8,0x9a,0xb7,0x94,0x8d,0x64,0x4a,0x49,0x67,0x28,0x43,0xcb,0xd9 };
    const uint8_t PLAINTEXT[] = { 0x6a,0xbc,0xc2,0x70,0x17,0x3c,0xf1,0x14,0xd4,0x48,0x47,0xe9,0x11,0xa0,0x50,0xdb,0x57,0xba,0x7a,0x2e,0x2c,0x16,0x1c,0x6f,0x37,0xcc,0xb6,0xaa,0xa4,0x67,0x7b,0xdd,0xca,0xf5,0x0c,0xad,0x0b,0x5f,0x87,0x58,0xfc,0xf7,0xc0,0xeb,0xc6,0x50,0xce,0xb5,0xcd,0x52,0xca,0xfb,0x8f,0x8d,0xd3,0xed,0xce,0xce,0x55,0xd9,0xf1,0xf0,0x8b,0x9f,0xa8,0xf5,0x43,0x65,0xcf,0x56,0xe2,0x8b,0x95,0x96,0xa7,0xe1,0xdd,0x1d,0x34,0x18,0xe4,0x44,0x4a,0x77,0x24,0xad,0xd4,0xcf,0x79,0xd5,0x27,0xb1,0x83,0xec,0x88,0xde,0x4b,0xe4,0xee,0xff,0x29,0xc8,0x0a,0x97,0xe5,0x4f,0x85,0x35,0x1c,0xb1,0x89,0xee };
    const uint8_t CIPHERTEXT[] = { 0xca,0x28,0x29,0x24,0xa6,0x11,0x87,0xfe,0xb4,0x05,0x20,0x97,0x91,0x06,0xe5,0xcc,0x86,0x19,0x57,0xf2,0x38,0x28,0xdc,0xb7,0x28,0x5e,0x0e,0xaa,0xc8,0xa0,0xca,0x2a,0x6b,0x60,0x50,0x3d,0x63,0xd6,0x03,0x9f,0x46,0x93,0xdb,0xa3,0x2f,0xa1,0xf7,0x3a,0xe2,0xe7,0x09,0xca,0x94,0x91,0x1f,0x28,0xa5,0xed,0xd1,0xf3,0x0e,0xad,0xdd,0x54,0x68,0x0c,0x43,0xac,0xc9,0xc7,0x4c,0xd9,0x0d,0x8b,0xb6,0x48,0xb4,0xe5,0x44,0x27,0x5f,0x47,0xe5,0x14,0xda,0xa2,0x06,0x97,0xf6,0x6c,0x73,0x8e,0xb3,0x03,0x37,0xf0,0x17,0xfc,0xa1,0xa2,0x6d,0xa4,0xd1,0xa0,0xcc,0x0a,0x0e,0x98,0xe2,0x46,0x30,0x70 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMMT192-ENCRYPT-7", "[CBC][MMT][192][ENCRYPT][n7]") {
    const uint8_t KEY[] = { 0xfb,0x09,0xcf,0x9e,0x00,0xdb,0xf8,0x83,0x68,0x9d,0x07,0x9c,0x92,0x00,0x77,0xc0,0x07,0x3c,0x31,0x89,0x0b,0x55,0xba,0xb5 };
    const uint8_t IV[] = { 0xe3,0xc8,0x9b,0xd0,0x97,0xc3,0xab,0xdd,0xf6,0x4f,0x48,0x81,0xdb,0x6d,0xbf,0xe2 };
    const uint8_t PLAINTEXT[] = { 0xc1,0xa3,0x76,0x83,0xfb,0x28,0x94,0x67,0xdd,0x1b,0x2c,0x89,0xef,0xba,0x16,0xbb,0xd2,0xee,0x24,0xcf,0x18,0xd1,0x9d,0x44,0x59,0x6d,0xed,0x26,0x82,0xc7,0x9a,0x2f,0x71,0x1c,0x7a,0x32,0xbf,0x6a,0x24,0xba,0xdd,0x32,0xa4,0xee,0x63,0x7c,0x73,0xb7,0xa4,0x1d,0xa6,0x25,0x86,0x35,0x65,0x0f,0x91,0xfb,0x9f,0xfa,0x45,0xbd,0xfc,0x3c,0xb1,0x22,0x13,0x62,0x41,0xb3,0xde,0xce,0xd8,0x99,0x6a,0xa5,0x1e,0xa8,0xd3,0xe8,0x1c,0x9d,0x70,0xe0,0x06,0xa4,0x4b,0xc0,0x57,0x1e,0xd4,0x86,0x23,0xa0,0xd6,0x22,0xa9,0x3f,0xa9,0xda,0x29,0x0b,0xaa,0xed,0xf5,0xd9,0xe8,0x76,0xc9,0x46,0x20,0x94,0x5f,0xf8,0xec,0xc8,0x3f,0x27,0x37,0x9e,0xd5,0x5c,0xf4,0x90,0xc5,0x79,0x0f,0x27 };
    const uint8_t CIPHERTEXT[] = { 0x81,0x58,0xe2,0x14,0x20,0xf2,0x5b,0x59,0xd6,0xae,0x94,0x3f,0xa1,0xcb,0xf2,0x1f,0x02,0xe9,0x79,0xf4,0x19,0xda,0xb0,0x12,0x6a,0x72,0x1b,0x7e,0xef,0x55,0xbe,0xe9,0xad,0x97,0xf5,0xcc,0xff,0x7d,0x23,0x90,0x57,0xbb,0xc1,0x9a,0x8c,0x37,0x81,0x42,0xf7,0x67,0x2f,0x1d,0x5e,0x7e,0x17,0xd7,0xbe,0xbc,0xb0,0x07,0x0e,0x83,0x55,0xca,0xce,0x66,0x60,0x17,0x1a,0x53,0xb6,0x18,0x16,0xae,0x82,0x4a,0x6e,0xf6,0x9c,0xe4,0x70,0xb6,0xff,0xd3,0xb5,0xbb,0x4b,0x43,0x88,0x74,0xd9,0x1d,0x27,0x85,0x4d,0x3b,0x6f,0x25,0x86,0x0d,0x38,0x68,0x95,0x8d,0xe3,0x30,0x7d,0x62,0xb1,0x33,0x9b,0xdd,0xdb,0x8a,0x31,0x8c,0x0c,0xe0,0xf3,0x3c,0x17,0xca,0xf0,0xe9,0xf6,0x04,0x08,0x20 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMMT192-ENCRYPT-8", "[CBC][MMT][192][ENCRYPT][n8]") {
    const uint8_t KEY[] = { 0xbc,0xa6,0xfa,0x3c,0x67,0xfd,0x29,0x4e,0x95,0x8f,0x66,0xfe,0x8b,0xd6,0x4f,0x45,0xf4,0x28,0xf5,0xbc,0x8e,0x97,0x33,0xa7 };
    const uint8_t IV[] = { 0x92,0xa4,0x7f,0x28,0x33,0xf1,0x45,0x0d,0x1d,0xa4,0x17,0x17,0xbd,0xc6,0xe8,0x3c };
    const uint8_t PLAINTEXT[] = { 0x5b,0xec,0xbc,0x31,0xd8,0xbe,0xad,0x6d,0x36,0xae,0x01,0x4a,0x58,0x63,0xd1,0x4a,0x43,0x1e,0x6b,0x55,0xd2,0x9e,0xa6,0xba,0xaa,0x41,0x72,0x71,0x71,0x6d,0xb3,0xa3,0x3b,0x2e,0x50,0x6b,0x45,0x20,0x86,0xdf,0xe6,0x90,0x83,0x4a,0xc2,0xde,0x30,0xbc,0x41,0x25,0x4e,0xc5,0x40,0x1e,0xc4,0x7d,0x06,0x42,0x37,0xc7,0x79,0x2f,0xdc,0xd7,0x91,0x4d,0x8a,0xf2,0x0e,0xb1,0x14,0x75,0x66,0x42,0xd5,0x19,0x02,0x1a,0x8c,0x75,0xa9,0x2f,0x6b,0xc5,0x3d,0x32,0x6a,0xe9,0xa5,0xb7,0xe1,0xb1,0x0a,0x97,0x56,0x57,0x46,0x92,0x93,0x4d,0x99,0x39,0xfc,0x39,0x9e,0x0c,0x20,0x3f,0x7e,0xdf,0x8e,0x7e,0x64,0x82,0xea,0xdd,0x31,0xa0,0x40,0x07,0x70,0xe8,0x97,0xb4,0x8c,0x6b,0xca,0x2b,0x40,0x45,0x93,0x04,0x50,0x80,0xe9,0x33,0x77,0x35,0x8c,0x42,0xa0,0xf4,0xde,0xde };
    const uint8_t CIPHERTEXT[] = { 0x92,0x6d,0xb2,0x48,0xcc,0x1b,0xa2,0x0f,0x0c,0x57,0x63,0x1a,0x7c,0x8a,0xef,0x09,0x4f,0x79,0x19,0x37,0xb9,0x05,0x94,0x9e,0x34,0x60,0x24,0x0e,0x8b,0xfa,0x6f,0xa4,0x83,0x11,0x5a,0x1b,0x31,0x0b,0x6e,0x43,0x69,0xca,0xeb,0xc5,0x26,0x28,0x88,0x37,0x7b,0x1d,0xda,0xa5,0x80,0x0e,0xa4,0x96,0xa2,0xbd,0xff,0x0f,0x9a,0x10,0x31,0xe7,0x12,0x9c,0x9a,0x20,0xe3,0x56,0x21,0xe7,0xf0,0xb8,0xba,0xca,0x0d,0x87,0x03,0x0f,0x2a,0xe7,0xca,0x85,0x93,0xc8,0x59,0x96,0x77,0xa0,0x6f,0xd4,0xb2,0x60,0x09,0xea,0xd0,0x8f,0xec,0xac,0x24,0xca,0xa9,0xcf,0x2c,0xad,0x3b,0x47,0x0c,0x82,0x27,0x41,0x5a,0x7b,0x1e,0x0f,0x2e,0xab,0x3f,0xad,0x96,0xd7,0x0a,0x20,0x9c,0x8b,0xb2,0x6c,0x62,0x76,0x77,0xe2,0x53,0x1b,0x94,0x35,0xca,0x6e,0x3c,0x44,0x4d,0x19,0x5b,0x5f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMMT192-ENCRYPT-9", "[CBC][MMT][192][ENCRYPT][n9]") {
    const uint8_t KEY[] = { 0x16,0x2a,0xd5,0x0e,0xe6,0x4a,0x07,0x02,0xaa,0x55,0x1f,0x57,0x1d,0xed,0xc1,0x6b,0x2c,0x1b,0x6a,0x1e,0x4d,0x4b,0x5e,0xee };
    const uint8_t IV[] = { 0x24,0x40,0x80,0x38,0x16,0x1a,0x2c,0xca,0xe0,0x7b,0x02,0x9b,0xb6,0x63,0x55,0xc1 };
    const uint8_t PLAINTEXT[] = { 0xbe,0x8a,0xbf,0x00,0x90,0x13,0x63,0x98,0x7a,0x82,0xcc,0x77,0xd0,0xec,0x91,0x69,0x7b,0xa3,0x85,0x7f,0x9e,0x4f,0x84,0xbd,0x79,0x40,0x6c,0x13,0x8d,0x02,0x69,0x8f,0x00,0x32,0x76,0xd0,0x44,0x91,0x20,0xbe,0xf4,0x57,0x8d,0x78,0xfe,0xca,0xbe,0x8e,0x07,0x0e,0x11,0x71,0x0b,0x3f,0x0a,0x27,0x44,0xbd,0x52,0x43,0x4e,0xc7,0x00,0x15,0x88,0x4c,0x18,0x1e,0xbd,0xfd,0x51,0xc6,0x04,0xa7,0x1c,0x52,0xe4,0xc0,0xe1,0x10,0xbc,0x40,0x8c,0xd4,0x62,0xb2,0x48,0xa8,0x0b,0x8a,0x8a,0xc0,0x6b,0xb9,0x52,0xac,0x1d,0x7f,0xae,0xd1,0x44,0x80,0x7f,0x1a,0x73,0x1b,0x7f,0xeb,0xca,0xf7,0x83,0x57,0x62,0xde,0xfe,0x92,0xec,0xcf,0xc7,0xa9,0x94,0x4e,0x1c,0x70,0x2c,0xff,0xe6,0xbc,0x86,0x73,0x3e,0xd3,0x21,0x42,0x31,0x21,0x08,0x5a,0xc0,0x2d,0xf8,0x96,0x2b,0xcb,0xc1,0x93,0x70,0x92,0xee,0xbf,0x0e,0x90,0xa8,0xb2,0x0e,0x3d,0xd8,0xc2,0x44,0xae };
    const uint8_t CIPHERTEXT[] = { 0xc8,0x2c,0xf2,0xc4,0x76,0xde,0xa8,0xcb,0x6a,0x6e,0x60,0x7a,0x40,0xd2,0xf0,0x39,0x1b,0xe8,0x2e,0xa9,0xec,0x84,0xa5,0x37,0xa6,0x82,0x0f,0x9a,0xfb,0x99,0x7b,0x76,0x39,0x7d,0x00,0x54,0x24,0xfa,0xa6,0xa7,0x4d,0xc4,0xe8,0xc7,0xaa,0x4a,0x89,0x00,0x69,0x0f,0x89,0x4b,0x6d,0x1d,0xca,0x80,0x67,0x53,0x93,0xd2,0x24,0x3a,0xda,0xc7,0x62,0xf1,0x59,0x30,0x1e,0x35,0x7e,0x98,0xb7,0x24,0x76,0x23,0x10,0xcd,0x5a,0x7b,0xaf,0xe1,0xc2,0xa0,0x30,0xdb,0xa4,0x6f,0xd9,0x3a,0x9f,0xdb,0x89,0xcc,0x13,0x2c,0xa9,0xc1,0x7d,0xc7,0x20,0x31,0xec,0x68,0x22,0xee,0x5a,0x9d,0x99,0xdb,0xca,0x66,0xc7,0x84,0xc0,0x1b,0x08,0x85,0xcb,0xb6,0x2e,0x29,0xd9,0x78,0x01,0x92,0x7e,0xc4,0x15,0xa5,0xd2,0x15,0x15,0x8d,0x32,0x5f,0x9e,0xe6,0x89,0x43,0x7a,0xd1,0xb7,0x68,0x4a,0xd3,0x3c,0x0d,0x92,0x73,0x94,0x51,0xac,0x87,0xf3,0x9f,0xf8,0xc3,0x1b,0x84 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMMT192-DECRYPT-0", "[CBC][MMT][192][DECRYPT][n0]") {
    const uint8_t KEY[] = { 0x8e,0x27,0x40,0xfb,0xa1,0x57,0xae,0xf2,0x42,0x2e,0x44,0x23,0x12,0xd1,0x5c,0x14,0xd3,0x12,0x55,0x36,0x84,0xfc,0xdc,0x15 };
    const uint8_t IV[] = { 0x32,0x40,0x15,0x87,0x8c,0xdc,0x82,0xbf,0xae,0x59,0xa2,0xdc,0x1f,0xf3,0x4e,0xa6 };
    const uint8_t PLAINTEXT[] = { 0xaa,0x41,0x17,0x9d,0x88,0x0e,0x6f,0xe3,0xb1,0x48,0x18,0xd6,0xe4,0xa6,0x2e,0xb5 };
    const uint8_t CIPHERTEXT[] = { 0x39,0xa9,0xb4,0x2d,0xe1,0x9e,0x51,0x2a,0xb7,0xf3,0x04,0x35,0x64,0xc3,0x51,0x5a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMMT192-DECRYPT-1", "[CBC][MMT][192][DECRYPT][n1]") {
    const uint8_t KEY[] = { 0x0a,0xc0,0xd2,0xad,0xd2,0x73,0xd1,0xa2,0x60,0xc4,0x32,0xc6,0x62,0xb4,0xbe,0x4d,0x8d,0x36,0x6e,0xdc,0x3f,0x40,0x2e,0x40 };
    const uint8_t IV[] = { 0x0c,0xc3,0x74,0x4f,0xa9,0xce,0xf1,0x3f,0xe0,0x4a,0x5a,0xb6,0xac,0x9b,0x8d,0xe4 };
    const uint8_t PLAINTEXT[] = { 0x85,0x4e,0x97,0xe1,0x9b,0x5c,0x4f,0xbd,0x7a,0x2a,0xc7,0xf8,0xdd,0xcc,0xdc,0x8e,0xac,0x1a,0x16,0x68,0x32,0xb5,0x8f,0x05,0xae,0x50,0x88,0xd7,0xca,0xba,0x8f,0xee };
    const uint8_t CIPHERTEXT[] = { 0x2c,0xd5,0x7d,0xce,0x74,0x65,0xd5,0xec,0xde,0x15,0x3e,0x87,0xce,0x45,0xe6,0x22,0x86,0xc6,0xb0,0x23,0xa4,0x46,0xda,0xe3,0xec,0x0f,0xdc,0x06,0x48,0xf2,0x93,0x08 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMMT192-DECRYPT-2", "[CBC][MMT][192][DECRYPT][n2]") {
    const uint8_t KEY[] = { 0x39,0x15,0xd7,0x86,0xc7,0x86,0x73,0x1c,0xfe,0x35,0xab,0xe3,0x9f,0xac,0x71,0x4f,0x5f,0xa3,0x2c,0x7e,0xf3,0xc6,0x68,0x1b };
    const uint8_t IV[] = { 0xa2,0xd3,0x26,0xa8,0x22,0x65,0x76,0xe3,0x2e,0x48,0xf6,0x2b,0x3d,0xa9,0x6c,0x40 };
    const uint8_t PLAINTEXT[] = { 0x4a,0x7a,0x4d,0xca,0x5c,0x55,0x5d,0x3f,0x03,0x58,0xbe,0x7d,0xb4,0xaf,0x14,0xf1,0x32,0x2a,0x88,0x61,0xa3,0xcb,0x97,0x7f,0x02,0x9f,0xdc,0xbd,0x8e,0xe4,0xa8,0xd4,0x51,0xf3,0x2d,0x78,0x65,0xe6,0xa2,0x37,0x6e,0xdf,0x67,0xe4,0xd1,0x09,0x2e,0x15 };
    const uint8_t CIPHERTEXT[] = { 0xa9,0x96,0x80,0x21,0xd6,0xdf,0x78,0xff,0x2c,0x4c,0x23,0x6b,0xdd,0x9a,0x55,0xbc,0x72,0x7b,0x0d,0xc5,0x06,0xf4,0x49,0x58,0xb2,0x04,0x1f,0x09,0x48,0x86,0x0a,0x34,0x44,0x58,0x82,0x42,0xff,0xbd,0xcf,0x27,0x26,0x00,0x1e,0x2f,0x6b,0x5b,0xd5,0xfb };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMMT192-DECRYPT-3", "[CBC][MMT][192][DECRYPT][n3]") {
    const uint8_t KEY[] = { 0x92,0x31,0x7d,0x4d,0x38,0x16,0x8a,0x35,0x91,0x18,0xa0,0xdf,0x0b,0x7b,0x45,0xcb,0xfd,0xcc,0x20,0x11,0xe7,0x17,0x5d,0x3c };
    const uint8_t IV[] = { 0x75,0xbe,0x95,0xa6,0xa5,0x44,0x00,0xb2,0xe1,0xb4,0x85,0xe2,0x4e,0xad,0x18,0xed };
    const uint8_t PLAINTEXT[] = { 0x7b,0x88,0xfb,0x01,0x95,0xa5,0x7a,0xc6,0x1c,0xcb,0x31,0x98,0xa0,0x55,0x17,0x71,0x75,0x23,0x44,0x4d,0xa9,0x2d,0x2e,0x8c,0x37,0x84,0x0a,0x7f,0x76,0x14,0xc9,0xef,0xfa,0x6d,0xd6,0xf1,0xd1,0xa7,0x30,0xec,0x35,0x0c,0xd6,0x4b,0x99,0x73,0x8c,0xfb,0x3b,0x96,0x2c,0x79,0x1b,0x26,0x74,0x92,0x9f,0x93,0x6e,0x89,0x4c,0xbc,0xb9,0x94 };
    const uint8_t CIPHERTEXT[] = { 0xf6,0x75,0x81,0x76,0x3d,0x23,0x32,0x6f,0x69,0x9e,0x05,0x69,0x60,0x43,0xb4,0xc5,0x53,0x92,0x8c,0x2a,0x9f,0x85,0x73,0x77,0xf1,0x20,0x29,0xfc,0xae,0x4a,0xce,0xe9,0x92,0xdb,0xa5,0x06,0x97,0xf6,0x17,0xa5,0x18,0x99,0xfb,0xd6,0x36,0x72,0x14,0xd9,0x7b,0xf5,0xdb,0xd9,0xbd,0xab,0x7f,0xd7,0x45,0xcd,0x2b,0xe4,0x31,0x11,0x87,0x93 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMMT192-DECRYPT-4", "[CBC][MMT][192][DECRYPT][n4]") {
    const uint8_t KEY[] = { 0xcd,0x00,0x04,0x8c,0xe8,0xea,0xd5,0xb5,0xdf,0xf2,0x34,0x6a,0x86,0xea,0xc5,0x94,0xb2,0xa4,0x19,0x4c,0xa9,0x9f,0xc8,0x9f };
    const uint8_t IV[] = { 0x15,0x4c,0xb1,0xd4,0x2a,0xd9,0xe8,0xd8,0x5e,0xbb,0x0b,0x51,0x89,0xb6,0xe1,0xbc };
    const uint8_t PLAINTEXT[] = { 0x07,0xd4,0x71,0xfa,0x87,0xfb,0x5f,0x26,0x73,0x46,0xaa,0x49,0x56,0xc8,0xbd,0xb6,0xc9,0x54,0x93,0xb1,0xc1,0x9b,0xe8,0xca,0x09,0xde,0xff,0xd6,0x90,0xd5,0x74,0x63,0x22,0x93,0x52,0xfa,0xf2,0x87,0x8b,0xc6,0x6a,0x20,0xf1,0x99,0xd9,0xf6,0xb2,0x37,0x8e,0x60,0x73,0xc2,0xce,0xf0,0x02,0xc6,0x28,0xce,0x94,0xd1,0xad,0xb5,0x53,0x9b,0xd1,0x5c,0x4a,0x51,0x15,0x6f,0x98,0xf5,0x2b,0xbe,0x90,0xa1,0x90,0x5d,0x35,0xde };
    const uint8_t CIPHERTEXT[] = { 0xa1,0x2b,0x32,0x19,0x9a,0xe6,0x48,0x44,0x18,0xac,0x70,0x97,0xfd,0xa9,0xbb,0x33,0xf2,0xae,0x42,0x1d,0xfd,0x79,0x5c,0x9b,0x55,0x36,0x15,0xe1,0x75,0x46,0xdc,0xec,0x6f,0x3e,0x7c,0xaf,0x83,0x33,0x4e,0x6d,0xf0,0x35,0xac,0x66,0x0a,0x19,0xa8,0xb5,0x8d,0x7c,0xfe,0x79,0x31,0x04,0x48,0x33,0x7e,0xe9,0x71,0x6f,0xe2,0xb4,0x6c,0xa7,0x01,0x47,0x26,0x64,0x4c,0x1e,0xb9,0xa6,0xd5,0xd4,0xe2,0x86,0x61,0xe9,0xb5,0x1a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMMT192-DECRYPT-5", "[CBC][MMT][192][DECRYPT][n5]") {
    const uint8_t KEY[] = { 0xc4,0xb3,0x9f,0x1d,0x90,0x65,0x8a,0xa1,0x76,0x9a,0x77,0x79,0x56,0x02,0x65,0x73,0x56,0x7b,0xd0,0xf3,0xd6,0x33,0x3b,0x3b };
    const uint8_t IV[] = { 0xf6,0x08,0x5f,0x23,0x31,0xe8,0x51,0xdb,0x9c,0x26,0x54,0xda,0xcb,0x5b,0xaf,0x19 };
    const uint8_t PLAINTEXT[] = { 0x8a,0xb7,0xb8,0xb3,0xc3,0xc7,0xd7,0x9b,0x6d,0x5c,0xc6,0x05,0xd3,0x09,0x4a,0x33,0x75,0x6a,0x87,0x55,0x14,0x07,0x82,0x96,0x7f,0xb8,0x62,0x97,0xcf,0x59,0x9e,0xae,0xa0,0x3e,0x38,0x40,0x18,0x63,0x1b,0x18,0x42,0x53,0x63,0xe9,0xad,0xa9,0x71,0x41,0x2d,0x3e,0xab,0x03,0xc6,0x37,0x48,0x74,0x90,0x01,0xe5,0xb1,0xa4,0xa2,0xe8,0x0e,0xd7,0xb9,0x15,0xe6,0xb9,0xfa,0x38,0xe4,0x90,0x30,0x1d,0x6b,0x45,0xe2,0x7c,0x0c,0x72,0xfd,0x8c,0xf6,0x89,0x5d,0xe9,0x50,0xd8,0xd0,0x27,0x74,0xa8,0xc3,0x3a,0x6a };
    const uint8_t CIPHERTEXT[] = { 0x69,0xe7,0x71,0xf8,0x60,0xe0,0x29,0x1e,0x44,0x77,0xdc,0xe2,0xa4,0x8f,0x2c,0x6a,0xe2,0x92,0x2b,0x93,0x37,0x66,0x7b,0x86,0xf7,0x9c,0xb3,0x8c,0x16,0xea,0x05,0x23,0xec,0xdb,0x1e,0x51,0x35,0xc5,0x4e,0x38,0x5c,0xfc,0xe9,0xeb,0xf9,0x45,0xed,0x80,0x98,0x8d,0xe4,0x66,0xbc,0xdb,0x0c,0xf9,0x23,0x84,0xb6,0x54,0x4c,0x9e,0xec,0x66,0x37,0xb6,0x56,0x49,0x6c,0xc6,0x5f,0xce,0x3e,0x61,0x93,0x5d,0x51,0x31,0x4b,0xfc,0x5a,0xa3,0x8d,0xad,0x26,0xe1,0x2e,0xfd,0xde,0x01,0x39,0xda,0x89,0x7b,0x95,0xa5 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMMT192-DECRYPT-6", "[CBC][MMT][192][DECRYPT][n6]") {
    const uint8_t KEY[] = { 0x62,0xcf,0xf8,0x62,0xe7,0xbe,0xf3,0x56,0x9a,0x38,0x0e,0xa7,0xff,0x40,0x91,0x8e,0x3a,0xfb,0x5c,0x7a,0xd2,0x65,0xcd,0x5f };
    const uint8_t IV[] = { 0x04,0xd1,0xca,0xb2,0xb0,0x02,0xd9,0xdd,0x6c,0x5b,0x66,0xad,0xd5,0xd6,0x14,0x8b };
    const uint8_t PLAINTEXT[] = { 0x83,0x92,0x38,0xa9,0x96,0xe5,0x1b,0x54,0x2a,0xb7,0xaa,0x55,0xea,0xe3,0x15,0x00,0x97,0x29,0x1c,0xa1,0x9e,0x75,0x63,0x25,0xc3,0x26,0x80,0x39,0x26,0xea,0x45,0xad,0x6e,0xf6,0xb7,0x79,0x0c,0xe8,0x9d,0x08,0x4b,0xbb,0x2a,0xd2,0xd9,0x5b,0xc8,0x89,0xf5,0xd1,0x9f,0xfd,0x30,0x92,0xaf,0xf6,0x09,0xd5,0xe6,0x3b,0x73,0x24,0xea,0x20,0x7c,0xe2,0x2f,0x85,0x98,0xf1,0x89,0x56,0x3c,0xc6,0xe6,0x11,0xf5,0xef,0x25,0xbe,0x06,0xb6,0xa7,0x8f,0xc6,0xa6,0x82,0x70,0x68,0x35,0x42,0xde,0x69,0xb0,0xa4,0x4a,0xee,0x45,0x6d,0x11,0x38,0xd0,0xfd,0x9a,0xd4,0xdf,0x68,0x08,0x36,0x33,0xde,0xfc };
    const uint8_t CIPHERTEXT[] = { 0x65,0xcf,0xb3,0x8f,0x92,0x2f,0x17,0x16,0x22,0x54,0x72,0xeb,0x36,0xa1,0x27,0x32,0x70,0x07,0xf8,0xf5,0xc0,0x84,0x79,0xca,0x7b,0xea,0xc4,0xb0,0xae,0xe2,0x6f,0x3b,0xb1,0x30,0xbb,0xf1,0xff,0x39,0x0e,0xf3,0x44,0xc2,0xa4,0xe0,0xb8,0xfa,0x81,0xf6,0xac,0xbb,0xaa,0x7a,0x62,0x0d,0x94,0x5a,0x22,0xec,0xdd,0x12,0x8a,0x4b,0x3a,0xcc,0x26,0x58,0xb1,0xcb,0x41,0x02,0x08,0x09,0xfa,0xb8,0x7d,0x1f,0x9a,0x74,0xb7,0x66,0x24,0xf9,0xfd,0x5c,0x2e,0x59,0xa6,0x49,0xf0,0xb9,0xd0,0x22,0x9b,0x58,0x55,0xad,0xec,0xce,0xfb,0xe6,0x00,0x92,0xeb,0xa2,0x6a,0xbf,0x65,0x72,0x83,0x18,0xb1,0xca };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMMT192-DECRYPT-7", "[CBC][MMT][192][DECRYPT][n7]") {
    const uint8_t KEY[] = { 0x2c,0x25,0xaf,0x9d,0x60,0xe1,0xaf,0x42,0xc7,0xf0,0xfc,0x2f,0xbf,0x01,0x16,0x37,0xe6,0x11,0x9b,0xd0,0xe8,0xe9,0xba,0xb9 };
    const uint8_t IV[] = { 0xc2,0x64,0xb2,0x1a,0x1e,0xca,0x4b,0x2c,0x8b,0xd8,0x60,0x6d,0x87,0xe3,0x84,0x71 };
    const uint8_t PLAINTEXT[] = { 0xd5,0x0a,0x55,0xea,0x83,0xcc,0xd5,0x56,0xe1,0xd6,0x63,0x42,0x4d,0x3e,0x19,0xc1,0xad,0x9b,0x8d,0x16,0xff,0x01,0xf5,0x42,0x2a,0xcc,0xad,0xf3,0xda,0xe0,0x7d,0x59,0x7f,0x13,0x75,0xaa,0xa3,0x19,0x99,0x4e,0xf7,0x1e,0x17,0x53,0x48,0x56,0x60,0xe4,0x18,0xdc,0x1d,0x67,0x67,0xa3,0x7a,0xe9,0x3d,0x8e,0x70,0x0f,0xc6,0x39,0xe5,0xd7,0x28,0x3a,0x9e,0xcc,0x29,0x45,0xb4,0x42,0x9e,0x82,0x03,0xf3,0x31,0x78,0xf2,0x5e,0xd6,0x7d,0x23,0x16,0x67,0xaf,0x7b,0x8f,0x29,0x94,0xe3,0xd9,0x04,0x43,0x7f,0xed,0x12,0x16,0x12,0xa0,0x4e,0xb3,0xe4,0xc2,0x30,0x78,0x9d,0x46,0xe4,0x40,0x9e,0x24,0xc7,0xbd,0x1f,0x86,0xae,0x50,0x2e,0xee,0x5a,0x11,0xaf,0x1c,0xad,0x5c,0x98,0xb5 };
    const uint8_t CIPHERTEXT[] = { 0xf5,0xf0,0x5c,0xed,0xea,0x55,0xa4,0xf4,0x7c,0xe9,0x43,0x46,0x3b,0xd1,0x5c,0xcc,0x7a,0xe4,0xf6,0xbd,0xa2,0xb3,0xf5,0xc3,0xcc,0xc6,0x49,0x5a,0x8e,0x29,0x65,0x79,0x14,0x28,0xf2,0x75,0x73,0x56,0xc5,0x22,0x3b,0xd4,0x0f,0x3b,0x4b,0xcf,0xd4,0x04,0xea,0x4b,0x9f,0x2d,0x13,0x1f,0x73,0xfa,0x0f,0x41,0x04,0xa1,0x4a,0x44,0x27,0xf4,0x5f,0x1f,0x88,0x3f,0x75,0x30,0x9b,0x74,0xce,0x81,0xd5,0x85,0x9d,0x49,0x1b,0x12,0x18,0xb6,0x7b,0x44,0xcf,0xe9,0x1a,0xf9,0x3c,0x43,0x6d,0x21,0x9b,0xdf,0xac,0x67,0xfc,0x5f,0x84,0x15,0x96,0xec,0x0d,0x31,0x5e,0x78,0xfb,0xec,0xd8,0x46,0x18,0x3e,0x2d,0xad,0xf2,0xca,0x7f,0x19,0xd0,0x07,0x79,0x52,0xeb,0xa1,0x2a,0x01,0xdb,0x1d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMMT192-DECRYPT-8", "[CBC][MMT][192][DECRYPT][n8]") {
    const uint8_t KEY[] = { 0xc6,0x68,0x0f,0xe9,0xa1,0x96,0x8f,0x89,0x94,0x79,0xec,0xa1,0x09,0x2b,0xea,0xac,0x18,0xad,0x94,0x5a,0x42,0xce,0x8f,0x93 };
    const uint8_t IV[] = { 0x54,0x13,0x0e,0xea,0x9e,0x96,0xa1,0x19,0x9d,0x3c,0x09,0x0f,0x69,0x0a,0x47,0x9f };
    const uint8_t PLAINTEXT[] = { 0xc9,0x70,0xa8,0x19,0xcf,0xb7,0x15,0xf7,0x77,0xe8,0xb6,0x31,0x67,0x99,0x9e,0xbe,0x17,0xc7,0x1f,0xf5,0x05,0xc3,0xff,0x24,0xcc,0x69,0x95,0x43,0x0f,0xad,0x40,0x13,0xe1,0xfc,0x69,0xba,0x51,0x23,0x07,0x2a,0x71,0x23,0xe3,0x76,0xd1,0xf7,0xde,0x8c,0xc6,0x10,0xad,0xa3,0xfd,0xd9,0x05,0xa1,0x47,0x6b,0xc2,0x37,0x24,0x86,0x1e,0x85,0xdc,0xf9,0x50,0xdb,0x2b,0x49,0x82,0xb6,0x02,0x71,0x75,0x2b,0x49,0xe4,0x38,0xa2,0x0e,0xf4,0xe8,0xe0,0x9c,0xac,0x0d,0xc4,0x9e,0xd1,0x5b,0x84,0xe3,0x26,0x27,0xe2,0x43,0x81,0x4f,0xee,0x04,0x30,0x74,0x4a,0xc6,0x75,0xc7,0xe5,0x67,0x3d,0x3f,0x57,0xa5,0x23,0x60,0xec,0x6f,0xf8,0xd1,0x8e,0xd4,0xb5,0xbd,0x8f,0x14,0x56,0xc1,0xf6,0x88,0x82,0x5c,0xb9,0x99,0x78,0x9c,0xad,0x5e,0x1b,0x37,0xa4,0xb9,0x2a,0xce,0x3b };
    const uint8_t CIPHERTEXT[] = { 0x8a,0x21,0xea,0x13,0x81,0x28,0x4b,0xcd,0xf8,0x18,0xc2,0xd4,0xdf,0xa9,0x76,0xc1,0x3e,0x5a,0x3c,0x25,0x31,0x64,0xba,0x1d,0x30,0xec,0xcc,0x27,0x94,0x7c,0x26,0x34,0x57,0xb4,0x3b,0xff,0x1c,0x3d,0x5e,0x9c,0x6f,0xff,0x27,0x54,0x4d,0x94,0x19,0xb0,0xe7,0xfc,0x81,0xd4,0xa3,0x92,0xa1,0x0e,0x64,0x3e,0x0e,0xaf,0x0b,0xed,0x57,0x1a,0x3e,0x3e,0xe7,0x1a,0x68,0x7e,0x2d,0x79,0x00,0xd7,0xfa,0xce,0x0f,0xc4,0x2a,0x96,0xec,0xc8,0x86,0x86,0x4a,0x60,0xe9,0x20,0x75,0x36,0xa2,0x85,0xd9,0x97,0x1a,0x8a,0xc4,0x27,0xb7,0x0d,0x6d,0xd4,0xff,0x8a,0x34,0x08,0x01,0xe9,0x2b,0x23,0xf0,0x9a,0xd6,0x28,0x12,0xe4,0x2f,0xb6,0xd8,0x7a,0xed,0x3b,0x4f,0x50,0x06,0x64,0xb7,0xac,0x73,0xd8,0x70,0x80,0x33,0x25,0x1e,0xf7,0x92,0xfa,0x05,0x4e,0xab,0x98,0xb5,0xe5 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMMT192-DECRYPT-9", "[CBC][MMT][192][DECRYPT][n9]") {
    const uint8_t KEY[] = { 0x50,0x9b,0xaf,0x46,0xfb,0x9d,0xe3,0x42,0x81,0xda,0xfc,0xc3,0xdb,0x79,0x59,0x3b,0xff,0xa8,0x42,0x69,0x04,0x30,0x26,0x88 };
    const uint8_t IV[] = { 0xd6,0xd8,0x6e,0x0c,0x82,0xdd,0x87,0x88,0xf4,0x14,0x7a,0x26,0xf9,0xa7,0x1c,0x74 };
    const uint8_t PLAINTEXT[] = { 0x67,0xd2,0xdd,0xa6,0xda,0x26,0xe2,0x13,0x07,0x97,0x34,0x00,0x60,0x07,0x25,0x72,0x7a,0xe8,0x14,0x15,0x51,0x17,0x72,0xf4,0xa0,0x9a,0xd9,0x90,0x3b,0xcf,0x90,0xcc,0x2c,0x0d,0xac,0x58,0xba,0x55,0x9a,0x01,0x09,0xc5,0x4a,0x9d,0x61,0x17,0xb1,0x5b,0xb5,0x74,0xca,0x47,0x3e,0x84,0x80,0x47,0xe9,0xa5,0x4e,0xe4,0xab,0xde,0x76,0xaf,0xf9,0x84,0x9c,0x44,0x10,0x9d,0x16,0x1f,0x46,0x44,0x2e,0x16,0x10,0xd8,0xb0,0x15,0xcf,0x36,0xa0,0x10,0xed,0x8e,0xfa,0x32,0x07,0xfd,0xfc,0x8f,0xcc,0x54,0x8f,0x14,0x5c,0x02,0x7e,0x44,0xc5,0xb0,0xec,0x35,0xc9,0x88,0x6f,0x4b,0x9d,0x65,0x13,0xa5,0xbc,0x10,0xd0,0xea,0x6b,0xbb,0xc2,0x6f,0x54,0xb1,0x83,0xbc,0xae,0x27,0xfb,0x79,0x9d,0x88,0x72,0xff,0x74,0x8f,0xc4,0x59,0xd5,0x5c,0xfa,0x25,0x5a,0xae,0x29,0xd7,0x1b,0x07,0x6d,0x9b,0x44,0xc1,0x4d,0x5c,0xeb,0xa9,0x33,0x2a,0x76,0x3d,0x9c,0x94 };
    const uint8_t CIPHERTEXT[] = { 0x69,0x28,0x29,0x9c,0x52,0xb4,0xf0,0x47,0x92,0x6f,0x8a,0x54,0x15,0x29,0xda,0x2d,0x6b,0xba,0xa3,0x99,0x14,0x3c,0xed,0x8e,0xfb,0x77,0xab,0x47,0x40,0x9d,0x9a,0x95,0x3a,0x38,0x6c,0x7a,0xbd,0x60,0x26,0xf4,0x98,0x31,0xc7,0x17,0x62,0x7c,0x2a,0x5e,0x77,0xbd,0x2d,0x43,0x3d,0x4d,0x13,0x0d,0xac,0xd9,0x27,0xea,0x0d,0x13,0xa2,0x3d,0x01,0xa7,0xcf,0x39,0xc6,0x71,0x6d,0xaf,0xb6,0xed,0x55,0x24,0x10,0xef,0x5d,0x27,0xfb,0x94,0x7b,0xe2,0xc8,0x78,0x2e,0xee,0x78,0x29,0x19,0x6c,0x7e,0xdc,0xf1,0x51,0xc6,0x5f,0x9a,0x01,0xf5,0x4f,0x8d,0x20,0xf3,0x8b,0x7d,0xa4,0xa7,0xe8,0x3a,0x2f,0x01,0x27,0xd5,0x9d,0x3e,0x24,0x05,0xd8,0x67,0x4f,0xc9,0xf4,0x1b,0x60,0x4f,0x78,0x8f,0x47,0x15,0xf9,0xd3,0x62,0x4e,0xee,0x57,0xf3,0x87,0xbf,0xad,0xd1,0x8a,0x1f,0x90,0x5e,0x83,0x9c,0x26,0xb8,0x61,0x74,0x82,0x34,0x7f,0xab,0x6d,0x08,0x84,0x5a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

