#include "rijndael.h"
#include "catch.hpp"
#include <cstring>

static inline std::string buf2str(const uint8_t *buf, size_t len) {
    std::ostringstream ss; ss << std::hex << std::setfill('0');
    for (size_t i = 0; i < len; ++i) {
        ss << std::setw(2) << static_cast<int>(buf[i]) << ' ';
    }
    return ss.str();
}

TEST_CASE("CFB128MCT256-ENCRYPT-0", "[CFB128][MCT][256][ENCRYPT][n0]") {
    const uint8_t KEY[] = { 0x3b,0xfe,0x82,0xb8,0x41,0xd9,0x69,0xe4,0x62,0xc9,0xe0,0xe9,0x51,0x46,0xd1,0x20,0xd2,0x8e,0xcf,0xda,0xc4,0x9b,0x42,0xf4,0x5e,0x53,0xc5,0xab,0xb9,0x00,0xcc,0xb2 };
    const uint8_t IV[] = { 0xbe,0xa7,0xae,0x84,0xb0,0xd1,0x6b,0xd6,0x5e,0x1f,0xc0,0x5d,0x74,0x18,0x66,0x01 };
    const uint8_t PLAINTEXT[] = { 0x08,0xcb,0x9f,0x7e,0xbf,0x92,0xc4,0xdf,0x69,0x6d,0xe5,0xa2,0xed,0xb7,0xc3,0x13 };
    const uint8_t CIPHERTEXT[] = { 0x61,0xa7,0x21,0xd1,0x92,0xb0,0xad,0x2a,0xd2,0xc3,0x3a,0xfe,0x74,0x2f,0xec,0x48 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-1", "[CFB128][MCT][256][ENCRYPT][n1]") {
    const uint8_t KEY[] = { 0x5e,0x5c,0xbd,0x79,0x80,0x28,0x7d,0x80,0x17,0xad,0x0c,0xaf,0xc2,0xb7,0xac,0xbc,0xb3,0x29,0xee,0x0b,0x56,0x2b,0xef,0xde,0x8c,0x90,0xff,0x55,0xcd,0x2f,0x20,0xfa };
    const uint8_t IV[] = { 0x61,0xa7,0x21,0xd1,0x92,0xb0,0xad,0x2a,0xd2,0xc3,0x3a,0xfe,0x74,0x2f,0xec,0x48 };
    const uint8_t PLAINTEXT[] = { 0x65,0xa2,0x3f,0xc1,0xc1,0xf1,0x14,0x64,0x75,0x64,0xec,0x46,0x93,0xf1,0x7d,0x9c };
    const uint8_t CIPHERTEXT[] = { 0xf7,0x41,0x24,0x00,0x1f,0x05,0xab,0xbb,0xee,0x8e,0xf6,0x14,0x2e,0x5e,0x57,0xca };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-2", "[CFB128][MCT][256][ENCRYPT][n2]") {
    const uint8_t KEY[] = { 0x7e,0x5d,0x07,0x2f,0xdc,0x1f,0x57,0xe1,0x0c,0xe7,0x62,0x13,0x27,0x07,0x3e,0xda,0x44,0x68,0xca,0x0b,0x49,0x2e,0x44,0x65,0x62,0x1e,0x09,0x41,0xe3,0x71,0x77,0x30 };
    const uint8_t IV[] = { 0xf7,0x41,0x24,0x00,0x1f,0x05,0xab,0xbb,0xee,0x8e,0xf6,0x14,0x2e,0x5e,0x57,0xca };
    const uint8_t PLAINTEXT[] = { 0x20,0x01,0xba,0x56,0x5c,0x37,0x2a,0x61,0x1b,0x4a,0x6e,0xbc,0xe5,0xb0,0x92,0x66 };
    const uint8_t CIPHERTEXT[] = { 0x2b,0x88,0xa5,0x77,0xd0,0x46,0xc7,0x21,0x99,0xe0,0x89,0xbc,0x3f,0x77,0xba,0x22 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-3", "[CFB128][MCT][256][ENCRYPT][n3]") {
    const uint8_t KEY[] = { 0xd5,0x2d,0x70,0x25,0x30,0xcc,0x89,0xe4,0x7f,0xa2,0x0d,0xc2,0x07,0x9e,0x1e,0xdb,0x6f,0xe0,0x6f,0x7c,0x99,0x68,0x83,0x44,0xfb,0xfe,0x80,0xfd,0xdc,0x06,0xcd,0x12 };
    const uint8_t IV[] = { 0x2b,0x88,0xa5,0x77,0xd0,0x46,0xc7,0x21,0x99,0xe0,0x89,0xbc,0x3f,0x77,0xba,0x22 };
    const uint8_t PLAINTEXT[] = { 0xab,0x70,0x77,0x0a,0xec,0xd3,0xde,0x05,0x73,0x45,0x6f,0xd1,0x20,0x99,0x20,0x01 };
    const uint8_t CIPHERTEXT[] = { 0x55,0x24,0x0b,0x18,0x44,0x87,0x19,0x02,0x3e,0x15,0xd7,0xd5,0x16,0xe4,0x9e,0xf4 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-4", "[CFB128][MCT][256][ENCRYPT][n4]") {
    const uint8_t KEY[] = { 0xd4,0x1f,0x27,0xe4,0xf4,0x12,0x7c,0xcd,0x8f,0x5e,0x24,0x71,0xc6,0xc5,0x0c,0x9b,0x3a,0xc4,0x64,0x64,0xdd,0xef,0x9a,0x46,0xc5,0xeb,0x57,0x28,0xca,0xe2,0x53,0xe6 };
    const uint8_t IV[] = { 0x55,0x24,0x0b,0x18,0x44,0x87,0x19,0x02,0x3e,0x15,0xd7,0xd5,0x16,0xe4,0x9e,0xf4 };
    const uint8_t PLAINTEXT[] = { 0x01,0x32,0x57,0xc1,0xc4,0xde,0xf5,0x29,0xf0,0xfc,0x29,0xb3,0xc1,0x5b,0x12,0x40 };
    const uint8_t CIPHERTEXT[] = { 0x4c,0x86,0x1c,0xe6,0x31,0xe9,0xef,0x1f,0xe8,0xf2,0xf0,0xea,0x68,0x7f,0xc5,0x64 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-5", "[CFB128][MCT][256][ENCRYPT][n5]") {
    const uint8_t KEY[] = { 0x6e,0xd1,0x2c,0xe5,0xf4,0x10,0xb7,0xc3,0xcd,0x3f,0x32,0x3e,0x04,0x34,0xe6,0x77,0x76,0x42,0x78,0x82,0xec,0x06,0x75,0x59,0x2d,0x19,0xa7,0xc2,0xa2,0x9d,0x96,0x82 };
    const uint8_t IV[] = { 0x4c,0x86,0x1c,0xe6,0x31,0xe9,0xef,0x1f,0xe8,0xf2,0xf0,0xea,0x68,0x7f,0xc5,0x64 };
    const uint8_t PLAINTEXT[] = { 0xba,0xce,0x0b,0x01,0x00,0x02,0xcb,0x0e,0x42,0x61,0x16,0x4f,0xc2,0xf1,0xea,0xec };
    const uint8_t CIPHERTEXT[] = { 0x02,0xe0,0xe3,0xbc,0xc8,0x31,0xf4,0x1a,0xd3,0xa5,0x57,0xd7,0x68,0x2c,0x95,0x2f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-6", "[CFB128][MCT][256][ENCRYPT][n6]") {
    const uint8_t KEY[] = { 0x39,0xc3,0xb8,0xc6,0x0d,0x4c,0x4b,0x92,0xf7,0x27,0x4a,0xda,0x41,0x72,0x77,0xad,0x74,0xa2,0x9b,0x3e,0x24,0x37,0x81,0x43,0xfe,0xbc,0xf0,0x15,0xca,0xb1,0x03,0xad };
    const uint8_t IV[] = { 0x02,0xe0,0xe3,0xbc,0xc8,0x31,0xf4,0x1a,0xd3,0xa5,0x57,0xd7,0x68,0x2c,0x95,0x2f };
    const uint8_t PLAINTEXT[] = { 0x57,0x12,0x94,0x23,0xf9,0x5c,0xfc,0x51,0x3a,0x18,0x78,0xe4,0x45,0x46,0x91,0xda };
    const uint8_t CIPHERTEXT[] = { 0x2a,0x49,0x22,0xd4,0x7a,0x45,0xb0,0x7b,0x5a,0xbb,0x67,0xac,0x93,0x85,0x2c,0xab };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-7", "[CFB128][MCT][256][ENCRYPT][n7]") {
    const uint8_t KEY[] = { 0x86,0xdc,0x6d,0xac,0xfa,0xe3,0xb1,0xb9,0xf4,0x4e,0x42,0x64,0x6c,0x57,0x9b,0x36,0x5e,0xeb,0xb9,0xea,0x5e,0x72,0x31,0x38,0xa4,0x07,0x97,0xb9,0x59,0x34,0x2f,0x06 };
    const uint8_t IV[] = { 0x2a,0x49,0x22,0xd4,0x7a,0x45,0xb0,0x7b,0x5a,0xbb,0x67,0xac,0x93,0x85,0x2c,0xab };
    const uint8_t PLAINTEXT[] = { 0xbf,0x1f,0xd5,0x6a,0xf7,0xaf,0xfa,0x2b,0x03,0x69,0x08,0xbe,0x2d,0x25,0xec,0x9b };
    const uint8_t CIPHERTEXT[] = { 0x23,0x4b,0x9d,0x1f,0xed,0x27,0xd0,0x09,0x42,0xcf,0x68,0x41,0x5f,0x0b,0x0a,0x8a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-8", "[CFB128][MCT][256][ENCRYPT][n8]") {
    const uint8_t KEY[] = { 0x47,0x6e,0xcf,0x1a,0x07,0xfe,0xb0,0x96,0x14,0x09,0xf6,0xf8,0x6e,0xc5,0xbd,0xd5,0x7d,0xa0,0x24,0xf5,0xb3,0x55,0xe1,0x31,0xe6,0xc8,0xff,0xf8,0x06,0x3f,0x25,0x8c };
    const uint8_t IV[] = { 0x23,0x4b,0x9d,0x1f,0xed,0x27,0xd0,0x09,0x42,0xcf,0x68,0x41,0x5f,0x0b,0x0a,0x8a };
    const uint8_t PLAINTEXT[] = { 0xc1,0xb2,0xa2,0xb6,0xfd,0x1d,0x01,0x2f,0xe0,0x47,0xb4,0x9c,0x02,0x92,0x26,0xe3 };
    const uint8_t CIPHERTEXT[] = { 0x57,0x46,0x22,0x54,0x83,0x78,0xcd,0x5d,0x4d,0x36,0x82,0xe0,0x2c,0x29,0xa3,0x22 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-9", "[CFB128][MCT][256][ENCRYPT][n9]") {
    const uint8_t KEY[] = { 0x2c,0x98,0xac,0x48,0xc3,0x1a,0x42,0x67,0xab,0x6a,0x4f,0x61,0x85,0x22,0x6a,0x78,0x2a,0xe6,0x06,0xa1,0x30,0x2d,0x2c,0x6c,0xab,0xfe,0x7d,0x18,0x2a,0x16,0x86,0xae };
    const uint8_t IV[] = { 0x57,0x46,0x22,0x54,0x83,0x78,0xcd,0x5d,0x4d,0x36,0x82,0xe0,0x2c,0x29,0xa3,0x22 };
    const uint8_t PLAINTEXT[] = { 0x6b,0xf6,0x63,0x52,0xc4,0xe4,0xf2,0xf1,0xbf,0x63,0xb9,0x99,0xeb,0xe7,0xd7,0xad };
    const uint8_t CIPHERTEXT[] = { 0x0a,0x35,0xbc,0x07,0xe6,0x0f,0xf0,0x61,0x35,0x02,0x6d,0xf7,0x46,0x74,0x6b,0x9b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-10", "[CFB128][MCT][256][ENCRYPT][n10]") {
    const uint8_t KEY[] = { 0x6c,0xf2,0x5f,0xb4,0x46,0xc0,0x33,0x42,0x71,0xb4,0xe0,0x05,0x3b,0x58,0x79,0x71,0x20,0xd3,0xba,0xa6,0xd6,0x22,0xdc,0x0d,0x9e,0xfc,0x10,0xef,0x6c,0x62,0xed,0x35 };
    const uint8_t IV[] = { 0x0a,0x35,0xbc,0x07,0xe6,0x0f,0xf0,0x61,0x35,0x02,0x6d,0xf7,0x46,0x74,0x6b,0x9b };
    const uint8_t PLAINTEXT[] = { 0x40,0x6a,0xf3,0xfc,0x85,0xda,0x71,0x25,0xda,0xde,0xaf,0x64,0xbe,0x7a,0x13,0x09 };
    const uint8_t CIPHERTEXT[] = { 0x05,0x7a,0x72,0xca,0x69,0x99,0x0a,0xae,0x3f,0x6f,0x16,0x6f,0x1e,0xa9,0x02,0x36 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-11", "[CFB128][MCT][256][ENCRYPT][n11]") {
    const uint8_t KEY[] = { 0x11,0xb6,0xd9,0xca,0xb2,0xd2,0x42,0xc0,0x30,0x8a,0x2c,0xd5,0xee,0x01,0x55,0xb1,0x25,0xa9,0xc8,0x6c,0xbf,0xbb,0xd6,0xa3,0xa1,0x93,0x06,0x80,0x72,0xcb,0xef,0x03 };
    const uint8_t IV[] = { 0x05,0x7a,0x72,0xca,0x69,0x99,0x0a,0xae,0x3f,0x6f,0x16,0x6f,0x1e,0xa9,0x02,0x36 };
    const uint8_t PLAINTEXT[] = { 0x7d,0x44,0x86,0x7e,0xf4,0x12,0x71,0x82,0x41,0x3e,0xcc,0xd0,0xd5,0x59,0x2c,0xc0 };
    const uint8_t CIPHERTEXT[] = { 0x90,0x3f,0xf0,0x14,0x20,0xec,0x0c,0x1c,0xfd,0x84,0xc7,0x06,0x80,0xb8,0x2c,0x18 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-12", "[CFB128][MCT][256][ENCRYPT][n12]") {
    const uint8_t KEY[] = { 0xfd,0x64,0xf9,0x5b,0xa1,0xc9,0x50,0x8b,0x67,0xb1,0x30,0x72,0xd3,0x59,0x97,0xec,0xb5,0x96,0x38,0x78,0x9f,0x57,0xda,0xbf,0x5c,0x17,0xc1,0x86,0xf2,0x73,0xc3,0x1b };
    const uint8_t IV[] = { 0x90,0x3f,0xf0,0x14,0x20,0xec,0x0c,0x1c,0xfd,0x84,0xc7,0x06,0x80,0xb8,0x2c,0x18 };
    const uint8_t PLAINTEXT[] = { 0xec,0xd2,0x20,0x91,0x13,0x1b,0x12,0x4b,0x57,0x3b,0x1c,0xa7,0x3d,0x58,0xc2,0x5d };
    const uint8_t CIPHERTEXT[] = { 0xea,0x47,0xff,0x1a,0x1d,0xdc,0x3a,0x9b,0x98,0x38,0x90,0xc4,0xe9,0x19,0x46,0xaf };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-13", "[CFB128][MCT][256][ENCRYPT][n13]") {
    const uint8_t KEY[] = { 0x27,0xa1,0x32,0x9b,0x5e,0xec,0xdb,0x84,0xa9,0x2d,0xf9,0xa6,0xee,0xbb,0xd6,0xaa,0x5f,0xd1,0xc7,0x62,0x82,0x8b,0xe0,0x24,0xc4,0x2f,0x51,0x42,0x1b,0x6a,0x85,0xb4 };
    const uint8_t IV[] = { 0xea,0x47,0xff,0x1a,0x1d,0xdc,0x3a,0x9b,0x98,0x38,0x90,0xc4,0xe9,0x19,0x46,0xaf };
    const uint8_t PLAINTEXT[] = { 0xda,0xc5,0xcb,0xc0,0xff,0x25,0x8b,0x0f,0xce,0x9c,0xc9,0xd4,0x3d,0xe2,0x41,0x46 };
    const uint8_t CIPHERTEXT[] = { 0x00,0x97,0x02,0x46,0x94,0x39,0xa9,0x79,0x28,0xec,0x89,0x5c,0x68,0xed,0xfc,0x50 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-14", "[CFB128][MCT][256][ENCRYPT][n14]") {
    const uint8_t KEY[] = { 0xe6,0xdc,0x6a,0x51,0xaf,0xc3,0xbd,0x48,0x50,0x39,0xe0,0x6f,0xd9,0x61,0x6e,0x57,0x5f,0x46,0xc5,0x24,0x16,0xb2,0x49,0x5d,0xec,0xc3,0xd8,0x1e,0x73,0x87,0x79,0xe4 };
    const uint8_t IV[] = { 0x00,0x97,0x02,0x46,0x94,0x39,0xa9,0x79,0x28,0xec,0x89,0x5c,0x68,0xed,0xfc,0x50 };
    const uint8_t PLAINTEXT[] = { 0xc1,0x7d,0x58,0xca,0xf1,0x2f,0x66,0xcc,0xf9,0x14,0x19,0xc9,0x37,0xda,0xb8,0xfd };
    const uint8_t CIPHERTEXT[] = { 0x1f,0x4d,0x4c,0x7f,0x0e,0x3e,0xca,0x7d,0x2a,0xc9,0x53,0x32,0x7c,0x07,0x1f,0xd9 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-15", "[CFB128][MCT][256][ENCRYPT][n15]") {
    const uint8_t KEY[] = { 0x2e,0xc4,0x6b,0x1a,0xfd,0xbe,0xc4,0x92,0x75,0x52,0xe5,0x69,0xad,0xe5,0x20,0x03,0x40,0x0b,0x89,0x5b,0x18,0x8c,0x83,0x20,0xc6,0x0a,0x8b,0x2c,0x0f,0x80,0x66,0x3d };
    const uint8_t IV[] = { 0x1f,0x4d,0x4c,0x7f,0x0e,0x3e,0xca,0x7d,0x2a,0xc9,0x53,0x32,0x7c,0x07,0x1f,0xd9 };
    const uint8_t PLAINTEXT[] = { 0xc8,0x18,0x01,0x4b,0x52,0x7d,0x79,0xda,0x25,0x6b,0x05,0x06,0x74,0x84,0x4e,0x54 };
    const uint8_t CIPHERTEXT[] = { 0xd4,0xb0,0xf8,0x9e,0x57,0xa9,0x67,0x2f,0xe9,0x34,0xbc,0x06,0x97,0xa9,0xc5,0x36 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-16", "[CFB128][MCT][256][ENCRYPT][n16]") {
    const uint8_t KEY[] = { 0x4f,0xa2,0x99,0xfd,0x9a,0x5c,0x86,0xab,0x72,0xf3,0xbe,0x94,0x6f,0x17,0xf2,0xe5,0x94,0xbb,0x71,0xc5,0x4f,0x25,0xe4,0x0f,0x2f,0x3e,0x37,0x2a,0x98,0x29,0xa3,0x0b };
    const uint8_t IV[] = { 0xd4,0xb0,0xf8,0x9e,0x57,0xa9,0x67,0x2f,0xe9,0x34,0xbc,0x06,0x97,0xa9,0xc5,0x36 };
    const uint8_t PLAINTEXT[] = { 0x61,0x66,0xf2,0xe7,0x67,0xe2,0x42,0x39,0x07,0xa1,0x5b,0xfd,0xc2,0xf2,0xd2,0xe6 };
    const uint8_t CIPHERTEXT[] = { 0xae,0xfc,0x44,0x9b,0x9f,0x9c,0x8d,0x8f,0xee,0x98,0xd2,0xc2,0x66,0x9e,0xdf,0xa3 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-17", "[CFB128][MCT][256][ENCRYPT][n17]") {
    const uint8_t KEY[] = { 0x6a,0x28,0x82,0x51,0x87,0x17,0x34,0x96,0xe6,0x89,0xf2,0xfe,0xf3,0x28,0xde,0xed,0x3a,0x47,0x35,0x5e,0xd0,0xb9,0x69,0x80,0xc1,0xa6,0xe5,0xe8,0xfe,0xb7,0x7c,0xa8 };
    const uint8_t IV[] = { 0xae,0xfc,0x44,0x9b,0x9f,0x9c,0x8d,0x8f,0xee,0x98,0xd2,0xc2,0x66,0x9e,0xdf,0xa3 };
    const uint8_t PLAINTEXT[] = { 0x25,0x8a,0x1b,0xac,0x1d,0x4b,0xb2,0x3d,0x94,0x7a,0x4c,0x6a,0x9c,0x3f,0x2c,0x08 };
    const uint8_t CIPHERTEXT[] = { 0x91,0xd0,0x67,0x49,0xc8,0xc2,0xf0,0xcf,0xfa,0x9d,0x5f,0x4a,0x8a,0x76,0xd5,0x68 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-18", "[CFB128][MCT][256][ENCRYPT][n18]") {
    const uint8_t KEY[] = { 0x74,0x26,0x3c,0x83,0x67,0x0a,0x47,0x48,0x20,0x82,0xee,0xb8,0x2d,0x0f,0xcf,0xbf,0xab,0x97,0x52,0x17,0x18,0x7b,0x99,0x4f,0x3b,0x3b,0xba,0xa2,0x74,0xc1,0xa9,0xc0 };
    const uint8_t IV[] = { 0x91,0xd0,0x67,0x49,0xc8,0xc2,0xf0,0xcf,0xfa,0x9d,0x5f,0x4a,0x8a,0x76,0xd5,0x68 };
    const uint8_t PLAINTEXT[] = { 0x1e,0x0e,0xbe,0xd2,0xe0,0x1d,0x73,0xde,0xc6,0x0b,0x1c,0x46,0xde,0x27,0x11,0x52 };
    const uint8_t CIPHERTEXT[] = { 0x2e,0x78,0xf6,0x13,0x14,0x56,0x09,0x8e,0x85,0x5d,0xdb,0x09,0xba,0xcf,0xd0,0xed };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-19", "[CFB128][MCT][256][ENCRYPT][n19]") {
    const uint8_t KEY[] = { 0x97,0x71,0xa6,0x4d,0x50,0x31,0xb6,0x40,0x9e,0xf9,0x7d,0x65,0xe2,0x83,0x38,0xa7,0x85,0xef,0xa4,0x04,0x0c,0x2d,0x90,0xc1,0xbe,0x66,0x61,0xab,0xce,0x0e,0x79,0x2d };
    const uint8_t IV[] = { 0x2e,0x78,0xf6,0x13,0x14,0x56,0x09,0x8e,0x85,0x5d,0xdb,0x09,0xba,0xcf,0xd0,0xed };
    const uint8_t PLAINTEXT[] = { 0xe3,0x57,0x9a,0xce,0x37,0x3b,0xf1,0x08,0xbe,0x7b,0x93,0xdd,0xcf,0x8c,0xf7,0x18 };
    const uint8_t CIPHERTEXT[] = { 0x12,0x43,0x37,0x86,0x3b,0xaf,0x5b,0x94,0x66,0x24,0xae,0x5b,0xf0,0x9d,0xc5,0x58 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-20", "[CFB128][MCT][256][ENCRYPT][n20]") {
    const uint8_t KEY[] = { 0x7c,0x02,0x6f,0xd8,0xaf,0xd5,0x89,0xf9,0x63,0x91,0x65,0x33,0xa0,0x2f,0xdc,0x15,0x97,0xac,0x93,0x82,0x37,0x82,0xcb,0x55,0xd8,0x42,0xcf,0xf0,0x3e,0x93,0xbc,0x75 };
    const uint8_t IV[] = { 0x12,0x43,0x37,0x86,0x3b,0xaf,0x5b,0x94,0x66,0x24,0xae,0x5b,0xf0,0x9d,0xc5,0x58 };
    const uint8_t PLAINTEXT[] = { 0xeb,0x73,0xc9,0x95,0xff,0xe4,0x3f,0xb9,0xfd,0x68,0x18,0x56,0x42,0xac,0xe4,0xb2 };
    const uint8_t CIPHERTEXT[] = { 0xe6,0x20,0xb5,0x5d,0x47,0xf7,0x70,0xbc,0x23,0xc2,0x57,0x26,0x01,0x48,0x35,0xd2 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-21", "[CFB128][MCT][256][ENCRYPT][n21]") {
    const uint8_t KEY[] = { 0x4c,0x44,0x23,0xf4,0x26,0x0d,0x26,0x22,0x8b,0x48,0xc0,0xcc,0x93,0x14,0x98,0xd0,0x71,0x8c,0x26,0xdf,0x70,0x75,0xbb,0xe9,0xfb,0x80,0x98,0xd6,0x3f,0xdb,0x89,0xa7 };
    const uint8_t IV[] = { 0xe6,0x20,0xb5,0x5d,0x47,0xf7,0x70,0xbc,0x23,0xc2,0x57,0x26,0x01,0x48,0x35,0xd2 };
    const uint8_t PLAINTEXT[] = { 0x30,0x46,0x4c,0x2c,0x89,0xd8,0xaf,0xdb,0xe8,0xd9,0xa5,0xff,0x33,0x3b,0x44,0xc5 };
    const uint8_t CIPHERTEXT[] = { 0x26,0x3a,0x29,0x82,0x3b,0xda,0x6e,0x7b,0xf1,0x1b,0x10,0xe9,0x62,0x03,0x78,0xc7 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-22", "[CFB128][MCT][256][ENCRYPT][n22]") {
    const uint8_t KEY[] = { 0xaf,0x4b,0x70,0x1b,0xf4,0x60,0xae,0x72,0x79,0x70,0x3a,0xb7,0xce,0x53,0xcb,0x5c,0x57,0xb6,0x0f,0x5d,0x4b,0xaf,0xd5,0x92,0x0a,0x9b,0x88,0x3f,0x5d,0xd8,0xf1,0x60 };
    const uint8_t IV[] = { 0x26,0x3a,0x29,0x82,0x3b,0xda,0x6e,0x7b,0xf1,0x1b,0x10,0xe9,0x62,0x03,0x78,0xc7 };
    const uint8_t PLAINTEXT[] = { 0xe3,0x0f,0x53,0xef,0xd2,0x6d,0x88,0x50,0xf2,0x38,0xfa,0x7b,0x5d,0x47,0x53,0x8c };
    const uint8_t CIPHERTEXT[] = { 0xaa,0xcf,0x62,0xa6,0x29,0x5a,0x35,0xc4,0xf8,0xc6,0x86,0x7f,0xfc,0x5e,0x0a,0x3e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-23", "[CFB128][MCT][256][ENCRYPT][n23]") {
    const uint8_t KEY[] = { 0xeb,0x2c,0x4b,0x6a,0xa8,0x1f,0x52,0xa3,0xfd,0xf7,0x27,0x91,0xda,0xad,0x66,0x9f,0xfd,0x79,0x6d,0xfb,0x62,0xf5,0xe0,0x56,0xf2,0x5d,0x0e,0x40,0xa1,0x86,0xfb,0x5e };
    const uint8_t IV[] = { 0xaa,0xcf,0x62,0xa6,0x29,0x5a,0x35,0xc4,0xf8,0xc6,0x86,0x7f,0xfc,0x5e,0x0a,0x3e };
    const uint8_t PLAINTEXT[] = { 0x44,0x67,0x3b,0x71,0x5c,0x7f,0xfc,0xd1,0x84,0x87,0x1d,0x26,0x14,0xfe,0xad,0xc3 };
    const uint8_t CIPHERTEXT[] = { 0x25,0x4c,0xcb,0x70,0x60,0x83,0x94,0xba,0xaa,0x98,0x5b,0x74,0x3b,0x32,0x6f,0x2c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-24", "[CFB128][MCT][256][ENCRYPT][n24]") {
    const uint8_t KEY[] = { 0x7c,0xef,0x42,0xe7,0x05,0xa2,0x62,0x46,0x96,0x1a,0x7a,0x53,0x4b,0x9b,0x27,0x75,0xd8,0x35,0xa6,0x8b,0x02,0x76,0x74,0xec,0x58,0xc5,0x55,0x34,0x9a,0xb4,0x94,0x72 };
    const uint8_t IV[] = { 0x25,0x4c,0xcb,0x70,0x60,0x83,0x94,0xba,0xaa,0x98,0x5b,0x74,0x3b,0x32,0x6f,0x2c };
    const uint8_t PLAINTEXT[] = { 0x97,0xc3,0x09,0x8d,0xad,0xbd,0x30,0xe5,0x6b,0xed,0x5d,0xc2,0x91,0x36,0x41,0xea };
    const uint8_t CIPHERTEXT[] = { 0xca,0xdf,0xf3,0x80,0x29,0x7a,0x9f,0x49,0x1b,0xb4,0xa0,0x21,0x50,0x30,0x29,0xe2 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-25", "[CFB128][MCT][256][ENCRYPT][n25]") {
    const uint8_t KEY[] = { 0x9e,0x00,0xf8,0x0a,0x0c,0x2f,0x7d,0x3b,0xe8,0xdf,0x7e,0x9c,0x86,0xf4,0xec,0x28,0x12,0xea,0x55,0x0b,0x2b,0x0c,0xeb,0xa5,0x43,0x71,0xf5,0x15,0xca,0x84,0xbd,0x90 };
    const uint8_t IV[] = { 0xca,0xdf,0xf3,0x80,0x29,0x7a,0x9f,0x49,0x1b,0xb4,0xa0,0x21,0x50,0x30,0x29,0xe2 };
    const uint8_t PLAINTEXT[] = { 0xe2,0xef,0xba,0xed,0x09,0x8d,0x1f,0x7d,0x7e,0xc5,0x04,0xcf,0xcd,0x6f,0xcb,0x5d };
    const uint8_t CIPHERTEXT[] = { 0x0b,0x5e,0x22,0x44,0x56,0x53,0x16,0xa2,0x58,0x2a,0xb5,0xe1,0x09,0xaf,0x80,0xd3 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-26", "[CFB128][MCT][256][ENCRYPT][n26]") {
    const uint8_t KEY[] = { 0xe7,0x1d,0x70,0xb7,0x37,0xd4,0xb7,0xf3,0xb5,0x18,0x6a,0xea,0xf6,0xbb,0xd4,0xd5,0x19,0xb4,0x77,0x4f,0x7d,0x5f,0xfd,0x07,0x1b,0x5b,0x40,0xf4,0xc3,0x2b,0x3d,0x43 };
    const uint8_t IV[] = { 0x0b,0x5e,0x22,0x44,0x56,0x53,0x16,0xa2,0x58,0x2a,0xb5,0xe1,0x09,0xaf,0x80,0xd3 };
    const uint8_t PLAINTEXT[] = { 0x79,0x1d,0x88,0xbd,0x3b,0xfb,0xca,0xc8,0x5d,0xc7,0x14,0x76,0x70,0x4f,0x38,0xfd };
    const uint8_t CIPHERTEXT[] = { 0x4a,0x7c,0x5c,0xcb,0x16,0x3c,0x46,0x70,0x2b,0x68,0x33,0x5c,0xb3,0x92,0xdd,0xb6 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-27", "[CFB128][MCT][256][ENCRYPT][n27]") {
    const uint8_t KEY[] = { 0x43,0x0a,0x21,0xda,0x3e,0x60,0x42,0x43,0xef,0xc1,0xe7,0x8c,0x85,0x0a,0xd0,0x07,0x53,0xc8,0x2b,0x84,0x6b,0x63,0xbb,0x77,0x30,0x33,0x73,0xa8,0x70,0xb9,0xe0,0xf5 };
    const uint8_t IV[] = { 0x4a,0x7c,0x5c,0xcb,0x16,0x3c,0x46,0x70,0x2b,0x68,0x33,0x5c,0xb3,0x92,0xdd,0xb6 };
    const uint8_t PLAINTEXT[] = { 0xa4,0x17,0x51,0x6d,0x09,0xb4,0xf5,0xb0,0x5a,0xd9,0x8d,0x66,0x73,0xb1,0x04,0xd2 };
    const uint8_t CIPHERTEXT[] = { 0x04,0xb6,0xd9,0x42,0x08,0x22,0xee,0x43,0xc0,0x50,0xfc,0x53,0x6c,0xf7,0x4a,0x6c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-28", "[CFB128][MCT][256][ENCRYPT][n28]") {
    const uint8_t KEY[] = { 0x00,0xdd,0xc7,0xa3,0x03,0x85,0xa8,0x20,0x9f,0xfe,0xd6,0xb3,0x3b,0x56,0xef,0x79,0x57,0x7e,0xf2,0xc6,0x63,0x41,0x55,0x34,0xf0,0x63,0x8f,0xfb,0x1c,0x4e,0xaa,0x99 };
    const uint8_t IV[] = { 0x04,0xb6,0xd9,0x42,0x08,0x22,0xee,0x43,0xc0,0x50,0xfc,0x53,0x6c,0xf7,0x4a,0x6c };
    const uint8_t PLAINTEXT[] = { 0x43,0xd7,0xe6,0x79,0x3d,0xe5,0xea,0x63,0x70,0x3f,0x31,0x3f,0xbe,0x5c,0x3f,0x7e };
    const uint8_t CIPHERTEXT[] = { 0xec,0x0d,0x3a,0x70,0x29,0x06,0xf8,0x63,0x57,0x82,0x44,0xfd,0xbd,0x5b,0x17,0x57 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-29", "[CFB128][MCT][256][ENCRYPT][n29]") {
    const uint8_t KEY[] = { 0x8a,0x33,0x05,0x98,0xea,0xe7,0x99,0x8c,0x76,0x57,0xd5,0x9e,0x33,0x68,0x5d,0xcd,0xbb,0x73,0xc8,0xb6,0x4a,0x47,0xad,0x57,0xa7,0xe1,0xcb,0x06,0xa1,0x15,0xbd,0xce };
    const uint8_t IV[] = { 0xec,0x0d,0x3a,0x70,0x29,0x06,0xf8,0x63,0x57,0x82,0x44,0xfd,0xbd,0x5b,0x17,0x57 };
    const uint8_t PLAINTEXT[] = { 0x8a,0xee,0xc2,0x3b,0xe9,0x62,0x31,0xac,0xe9,0xa9,0x03,0x2d,0x08,0x3e,0xb2,0xb4 };
    const uint8_t CIPHERTEXT[] = { 0xdb,0x6d,0x66,0xd3,0xc8,0x3b,0x08,0xa1,0x98,0x2c,0x97,0x87,0x7f,0x10,0x94,0xfa };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-30", "[CFB128][MCT][256][ENCRYPT][n30]") {
    const uint8_t KEY[] = { 0x92,0xf9,0x56,0xda,0x1a,0x51,0xea,0xac,0x0d,0x78,0x23,0xd1,0xf5,0x50,0x6f,0x30,0x60,0x1e,0xae,0x65,0x82,0x7c,0xa5,0xf6,0x3f,0xcd,0x5c,0x81,0xde,0x05,0x29,0x34 };
    const uint8_t IV[] = { 0xdb,0x6d,0x66,0xd3,0xc8,0x3b,0x08,0xa1,0x98,0x2c,0x97,0x87,0x7f,0x10,0x94,0xfa };
    const uint8_t PLAINTEXT[] = { 0x18,0xca,0x53,0x42,0xf0,0xb6,0x73,0x20,0x7b,0x2f,0xf6,0x4f,0xc6,0x38,0x32,0xfd };
    const uint8_t CIPHERTEXT[] = { 0x90,0x61,0x5c,0xb0,0x0c,0x4b,0xd8,0xce,0xcd,0x52,0x70,0x98,0x4b,0x41,0xd1,0xfd };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-31", "[CFB128][MCT][256][ENCRYPT][n31]") {
    const uint8_t KEY[] = { 0xa3,0xc4,0x8c,0xdc,0x91,0x6f,0xd6,0x64,0x22,0xeb,0x4e,0x06,0x82,0x4a,0x44,0x7e,0xf0,0x7f,0xf2,0xd5,0x8e,0x37,0x7d,0x38,0xf2,0x9f,0x2c,0x19,0x95,0x44,0xf8,0xc9 };
    const uint8_t IV[] = { 0x90,0x61,0x5c,0xb0,0x0c,0x4b,0xd8,0xce,0xcd,0x52,0x70,0x98,0x4b,0x41,0xd1,0xfd };
    const uint8_t PLAINTEXT[] = { 0x31,0x3d,0xda,0x06,0x8b,0x3e,0x3c,0xc8,0x2f,0x93,0x6d,0xd7,0x77,0x1a,0x2b,0x4e };
    const uint8_t CIPHERTEXT[] = { 0x34,0x8c,0x05,0xf7,0x85,0x0c,0xc4,0x2b,0xbd,0x81,0xb7,0x79,0x23,0xf6,0x68,0x69 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-32", "[CFB128][MCT][256][ENCRYPT][n32]") {
    const uint8_t KEY[] = { 0xb0,0xb6,0xd1,0x51,0x5b,0xfc,0x25,0x0c,0xcd,0x4c,0x1b,0xf5,0x38,0x5f,0x2b,0x3f,0xc4,0xf3,0xf7,0x22,0x0b,0x3b,0xb9,0x13,0x4f,0x1e,0x9b,0x60,0xb6,0xb2,0x90,0xa0 };
    const uint8_t IV[] = { 0x34,0x8c,0x05,0xf7,0x85,0x0c,0xc4,0x2b,0xbd,0x81,0xb7,0x79,0x23,0xf6,0x68,0x69 };
    const uint8_t PLAINTEXT[] = { 0x13,0x72,0x5d,0x8d,0xca,0x93,0xf3,0x68,0xef,0xa7,0x55,0xf3,0xba,0x15,0x6f,0x41 };
    const uint8_t CIPHERTEXT[] = { 0x6d,0xd8,0xec,0xed,0xeb,0x24,0xac,0x04,0xd7,0xc9,0xdd,0xdc,0x41,0x34,0x27,0x9f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-33", "[CFB128][MCT][256][ENCRYPT][n33]") {
    const uint8_t KEY[] = { 0xc6,0xf5,0x43,0x05,0x32,0x02,0xb2,0xae,0x06,0x5f,0x41,0xb4,0xdc,0x6b,0xea,0xfe,0xa9,0x2b,0x1b,0xcf,0xe0,0x1f,0x15,0x17,0x98,0xd7,0x46,0xbc,0xf7,0x86,0xb7,0x3f };
    const uint8_t IV[] = { 0x6d,0xd8,0xec,0xed,0xeb,0x24,0xac,0x04,0xd7,0xc9,0xdd,0xdc,0x41,0x34,0x27,0x9f };
    const uint8_t PLAINTEXT[] = { 0x76,0x43,0x92,0x54,0x69,0xfe,0x97,0xa2,0xcb,0x13,0x5a,0x41,0xe4,0x34,0xc1,0xc1 };
    const uint8_t CIPHERTEXT[] = { 0x35,0x00,0x7c,0x6d,0xab,0x7c,0x52,0xa9,0x04,0x54,0x91,0x57,0xae,0x6c,0x2e,0xa4 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-34", "[CFB128][MCT][256][ENCRYPT][n34]") {
    const uint8_t KEY[] = { 0x8b,0xf6,0xc6,0xa4,0x93,0xd2,0xdf,0x4d,0x16,0x94,0xe3,0xe4,0x43,0xe1,0x52,0x6a,0x9c,0x2b,0x67,0xa2,0x4b,0x63,0x47,0xbe,0x9c,0x83,0xd7,0xeb,0x59,0xea,0x99,0x9b };
    const uint8_t IV[] = { 0x35,0x00,0x7c,0x6d,0xab,0x7c,0x52,0xa9,0x04,0x54,0x91,0x57,0xae,0x6c,0x2e,0xa4 };
    const uint8_t PLAINTEXT[] = { 0x4d,0x03,0x85,0xa1,0xa1,0xd0,0x6d,0xe3,0x10,0xcb,0xa2,0x50,0x9f,0x8a,0xb8,0x94 };
    const uint8_t CIPHERTEXT[] = { 0xc9,0xb4,0xc5,0x5e,0x7f,0x70,0xad,0xbd,0x83,0xbc,0x80,0x89,0x47,0xee,0x30,0x61 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-35", "[CFB128][MCT][256][ENCRYPT][n35]") {
    const uint8_t KEY[] = { 0x77,0x8d,0xcb,0x69,0x51,0x56,0x0d,0x15,0x87,0x1e,0x4b,0x18,0x4b,0xa0,0x71,0x84,0x55,0x9f,0xa2,0xfc,0x34,0x13,0xea,0x03,0x1f,0x3f,0x57,0x62,0x1e,0x04,0xa9,0xfa };
    const uint8_t IV[] = { 0xc9,0xb4,0xc5,0x5e,0x7f,0x70,0xad,0xbd,0x83,0xbc,0x80,0x89,0x47,0xee,0x30,0x61 };
    const uint8_t PLAINTEXT[] = { 0xfc,0x7b,0x0d,0xcd,0xc2,0x84,0xd2,0x58,0x91,0x8a,0xa8,0xfc,0x08,0x41,0x23,0xee };
    const uint8_t CIPHERTEXT[] = { 0xf7,0xa0,0xd2,0x00,0x3e,0x95,0x30,0xb0,0xa6,0x09,0x51,0x44,0x0f,0x9a,0xe5,0x8e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-36", "[CFB128][MCT][256][ENCRYPT][n36]") {
    const uint8_t KEY[] = { 0x41,0xf2,0x29,0x27,0x54,0x6f,0x0a,0x17,0x2c,0x9b,0x2d,0xc3,0xea,0x53,0x82,0x92,0xa2,0x3f,0x70,0xfc,0x0a,0x86,0xda,0xb3,0xb9,0x36,0x06,0x26,0x11,0x9e,0x4c,0x74 };
    const uint8_t IV[] = { 0xf7,0xa0,0xd2,0x00,0x3e,0x95,0x30,0xb0,0xa6,0x09,0x51,0x44,0x0f,0x9a,0xe5,0x8e };
    const uint8_t PLAINTEXT[] = { 0x36,0x7f,0xe2,0x4e,0x05,0x39,0x07,0x02,0xab,0x85,0x66,0xdb,0xa1,0xf3,0xf3,0x16 };
    const uint8_t CIPHERTEXT[] = { 0x15,0x1c,0x01,0xc3,0x06,0xbb,0x28,0x40,0x3a,0xbf,0x89,0xc4,0x84,0xd2,0x71,0x26 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-37", "[CFB128][MCT][256][ENCRYPT][n37]") {
    const uint8_t KEY[] = { 0xf0,0xc6,0xec,0xb8,0x2e,0x74,0x18,0x50,0xd8,0xf1,0x2e,0xa0,0xfd,0xf4,0x55,0xbf,0xb7,0x23,0x71,0x3f,0x0c,0x3d,0xf2,0xf3,0x83,0x89,0x8f,0xe2,0x95,0x4c,0x3d,0x52 };
    const uint8_t IV[] = { 0x15,0x1c,0x01,0xc3,0x06,0xbb,0x28,0x40,0x3a,0xbf,0x89,0xc4,0x84,0xd2,0x71,0x26 };
    const uint8_t PLAINTEXT[] = { 0xb1,0x34,0xc5,0x9f,0x7a,0x1b,0x12,0x47,0xf4,0x6a,0x03,0x63,0x17,0xa7,0xd7,0x2d };
    const uint8_t CIPHERTEXT[] = { 0x8c,0x8e,0xa2,0xa6,0xa5,0xe4,0x76,0x5e,0x83,0xf9,0x92,0x39,0xc2,0xca,0xdd,0x20 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-38", "[CFB128][MCT][256][ENCRYPT][n38]") {
    const uint8_t KEY[] = { 0x64,0xf1,0x91,0x55,0x50,0x40,0xdc,0x02,0x44,0x78,0x66,0xc1,0xf7,0xb5,0x47,0xe2,0x3b,0xad,0xd3,0x99,0xa9,0xd9,0x84,0xad,0x00,0x70,0x1d,0xdb,0x57,0x86,0xe0,0x72 };
    const uint8_t IV[] = { 0x8c,0x8e,0xa2,0xa6,0xa5,0xe4,0x76,0x5e,0x83,0xf9,0x92,0x39,0xc2,0xca,0xdd,0x20 };
    const uint8_t PLAINTEXT[] = { 0x94,0x37,0x7d,0xed,0x7e,0x34,0xc4,0x52,0x9c,0x89,0x48,0x61,0x0a,0x41,0x12,0x5d };
    const uint8_t CIPHERTEXT[] = { 0x7e,0x17,0x3d,0x10,0xbd,0x8b,0x13,0x51,0x3b,0x13,0xe9,0xcc,0xac,0x95,0xa5,0x76 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-39", "[CFB128][MCT][256][ENCRYPT][n39]") {
    const uint8_t KEY[] = { 0x3c,0x12,0x2d,0xc0,0xf5,0xb2,0x5d,0x2d,0x03,0xb6,0x8a,0x62,0x0f,0x5d,0x72,0xb4,0x45,0xba,0xee,0x89,0x14,0x52,0x97,0xfc,0x3b,0x63,0xf4,0x17,0xfb,0x13,0x45,0x04 };
    const uint8_t IV[] = { 0x7e,0x17,0x3d,0x10,0xbd,0x8b,0x13,0x51,0x3b,0x13,0xe9,0xcc,0xac,0x95,0xa5,0x76 };
    const uint8_t PLAINTEXT[] = { 0x58,0xe3,0xbc,0x95,0xa5,0xf2,0x81,0x2f,0x47,0xce,0xec,0xa3,0xf8,0xe8,0x35,0x56 };
    const uint8_t CIPHERTEXT[] = { 0x16,0x61,0x77,0x62,0x22,0xea,0x1b,0x35,0x63,0xb3,0x22,0x4e,0x32,0xf4,0x7c,0x18 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-40", "[CFB128][MCT][256][ENCRYPT][n40]") {
    const uint8_t KEY[] = { 0x9f,0x37,0xab,0xb7,0x69,0x70,0xcd,0x04,0x16,0x9c,0xfe,0xe0,0x25,0xc3,0x09,0x88,0x53,0xdb,0x99,0xeb,0x36,0xb8,0x8c,0xc9,0x58,0xd0,0xd6,0x59,0xc9,0xe7,0x39,0x1c };
    const uint8_t IV[] = { 0x16,0x61,0x77,0x62,0x22,0xea,0x1b,0x35,0x63,0xb3,0x22,0x4e,0x32,0xf4,0x7c,0x18 };
    const uint8_t PLAINTEXT[] = { 0xa3,0x25,0x86,0x77,0x9c,0xc2,0x90,0x29,0x15,0x2a,0x74,0x82,0x2a,0x9e,0x7b,0x3c };
    const uint8_t CIPHERTEXT[] = { 0x99,0x4d,0x68,0x76,0x9f,0x9e,0xdd,0x9f,0x25,0x29,0x4f,0x70,0xa8,0x22,0x73,0xa1 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-41", "[CFB128][MCT][256][ENCRYPT][n41]") {
    const uint8_t KEY[] = { 0x4b,0x91,0xd1,0xb4,0x0c,0x3b,0xf7,0xb0,0x56,0x29,0xad,0x36,0xf2,0x30,0x89,0xd2,0xca,0x96,0xf1,0x9d,0xa9,0x26,0x51,0x56,0x7d,0xf9,0x99,0x29,0x61,0xc5,0x4a,0xbd };
    const uint8_t IV[] = { 0x99,0x4d,0x68,0x76,0x9f,0x9e,0xdd,0x9f,0x25,0x29,0x4f,0x70,0xa8,0x22,0x73,0xa1 };
    const uint8_t PLAINTEXT[] = { 0xd4,0xa6,0x7a,0x03,0x65,0x4b,0x3a,0xb4,0x40,0xb5,0x53,0xd6,0xd7,0xf3,0x80,0x5a };
    const uint8_t CIPHERTEXT[] = { 0x1a,0xa0,0xdb,0x6d,0x9a,0x5f,0xb7,0x9b,0x3d,0xa9,0x6a,0x2a,0x1a,0x1e,0xa9,0x40 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-42", "[CFB128][MCT][256][ENCRYPT][n42]") {
    const uint8_t KEY[] = { 0xce,0x83,0x01,0x5d,0xcc,0xe6,0x71,0xf1,0xdb,0x42,0x4c,0x9d,0x55,0xe7,0x2d,0x4a,0xd0,0x36,0x2a,0xf0,0x33,0x79,0xe6,0xcd,0x40,0x50,0xf3,0x03,0x7b,0xdb,0xe3,0xfd };
    const uint8_t IV[] = { 0x1a,0xa0,0xdb,0x6d,0x9a,0x5f,0xb7,0x9b,0x3d,0xa9,0x6a,0x2a,0x1a,0x1e,0xa9,0x40 };
    const uint8_t PLAINTEXT[] = { 0x85,0x12,0xd0,0xe9,0xc0,0xdd,0x86,0x41,0x8d,0x6b,0xe1,0xab,0xa7,0xd7,0xa4,0x98 };
    const uint8_t CIPHERTEXT[] = { 0xa4,0xb8,0x14,0x0d,0x11,0x46,0x86,0x21,0xc4,0xe2,0x26,0x79,0x8d,0x70,0x93,0xf2 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-43", "[CFB128][MCT][256][ENCRYPT][n43]") {
    const uint8_t KEY[] = { 0x9c,0x8f,0xc6,0x84,0xde,0x24,0xdc,0x23,0x94,0x47,0x72,0x01,0x79,0x98,0x26,0x46,0x74,0x8e,0x3e,0xfd,0x22,0x3f,0x60,0xec,0x84,0xb2,0xd5,0x7a,0xf6,0xab,0x70,0x0f };
    const uint8_t IV[] = { 0xa4,0xb8,0x14,0x0d,0x11,0x46,0x86,0x21,0xc4,0xe2,0x26,0x79,0x8d,0x70,0x93,0xf2 };
    const uint8_t PLAINTEXT[] = { 0x52,0x0c,0xc7,0xd9,0x12,0xc2,0xad,0xd2,0x4f,0x05,0x3e,0x9c,0x2c,0x7f,0x0b,0x0c };
    const uint8_t CIPHERTEXT[] = { 0x23,0x12,0xa6,0xcb,0xe3,0x0c,0x73,0xf1,0x26,0xc2,0xfc,0x0f,0xc0,0x7e,0x9f,0x7a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-44", "[CFB128][MCT][256][ENCRYPT][n44]") {
    const uint8_t KEY[] = { 0x06,0xbf,0x83,0x00,0xe4,0x16,0xd3,0xe0,0x6b,0xe7,0xa7,0xda,0x6c,0x66,0x52,0x7d,0x57,0x9c,0x98,0x36,0xc1,0x33,0x13,0x1d,0xa2,0x70,0x29,0x75,0x36,0xd5,0xef,0x75 };
    const uint8_t IV[] = { 0x23,0x12,0xa6,0xcb,0xe3,0x0c,0x73,0xf1,0x26,0xc2,0xfc,0x0f,0xc0,0x7e,0x9f,0x7a };
    const uint8_t PLAINTEXT[] = { 0x9a,0x30,0x45,0x84,0x3a,0x32,0x0f,0xc3,0xff,0xa0,0xd5,0xdb,0x15,0xfe,0x74,0x3b };
    const uint8_t CIPHERTEXT[] = { 0xb1,0xdd,0xd1,0xb8,0x04,0xe9,0x60,0xfc,0x9e,0xf1,0x50,0x7e,0x63,0xd7,0x93,0x27 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-45", "[CFB128][MCT][256][ENCRYPT][n45]") {
    const uint8_t KEY[] = { 0x5e,0x77,0x0f,0xde,0xd6,0x88,0xf2,0x4b,0x6a,0xc4,0xdf,0xa3,0xe3,0x37,0xa0,0xbd,0xe6,0x41,0x49,0x8e,0xc5,0xda,0x73,0xe1,0x3c,0x81,0x79,0x0b,0x55,0x02,0x7c,0x52 };
    const uint8_t IV[] = { 0xb1,0xdd,0xd1,0xb8,0x04,0xe9,0x60,0xfc,0x9e,0xf1,0x50,0x7e,0x63,0xd7,0x93,0x27 };
    const uint8_t PLAINTEXT[] = { 0x58,0xc8,0x8c,0xde,0x32,0x9e,0x21,0xab,0x01,0x23,0x78,0x79,0x8f,0x51,0xf2,0xc0 };
    const uint8_t CIPHERTEXT[] = { 0x48,0xf8,0xac,0x9a,0x71,0x15,0xda,0x95,0x60,0xff,0xcc,0x07,0x55,0xb2,0xbb,0x18 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-46", "[CFB128][MCT][256][ENCRYPT][n46]") {
    const uint8_t KEY[] = { 0x4d,0x5b,0xf0,0x71,0x1c,0xb0,0xd9,0x30,0x40,0x0f,0x30,0x61,0x70,0x99,0xb2,0x25,0xae,0xb9,0xe5,0x14,0xb4,0xcf,0xa9,0x74,0x5c,0x7e,0xb5,0x0c,0x00,0xb0,0xc7,0x4a };
    const uint8_t IV[] = { 0x48,0xf8,0xac,0x9a,0x71,0x15,0xda,0x95,0x60,0xff,0xcc,0x07,0x55,0xb2,0xbb,0x18 };
    const uint8_t PLAINTEXT[] = { 0x13,0x2c,0xff,0xaf,0xca,0x38,0x2b,0x7b,0x2a,0xcb,0xef,0xc2,0x93,0xae,0x12,0x98 };
    const uint8_t CIPHERTEXT[] = { 0x73,0xbc,0x73,0xd1,0x8e,0xe4,0x78,0x95,0xac,0x9f,0x71,0xd1,0xfe,0xaa,0x96,0x46 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-47", "[CFB128][MCT][256][ENCRYPT][n47]") {
    const uint8_t KEY[] = { 0xd2,0xc4,0x24,0x62,0x13,0x49,0x95,0xf1,0x17,0x04,0x3f,0x0f,0x5e,0xa0,0xc4,0x6d,0xdd,0x05,0x96,0xc5,0x3a,0x2b,0xd1,0xe1,0xf0,0xe1,0xc4,0xdd,0xfe,0x1a,0x51,0x0c };
    const uint8_t IV[] = { 0x73,0xbc,0x73,0xd1,0x8e,0xe4,0x78,0x95,0xac,0x9f,0x71,0xd1,0xfe,0xaa,0x96,0x46 };
    const uint8_t PLAINTEXT[] = { 0x9f,0x9f,0xd4,0x13,0x0f,0xf9,0x4c,0xc1,0x57,0x0b,0x0f,0x6e,0x2e,0x39,0x76,0x48 };
    const uint8_t CIPHERTEXT[] = { 0xd5,0x8a,0x4c,0x51,0xb7,0xc5,0xf1,0x1c,0x6e,0x9d,0xfe,0xa8,0x80,0xb8,0x91,0x75 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-48", "[CFB128][MCT][256][ENCRYPT][n48]") {
    const uint8_t KEY[] = { 0x02,0x1c,0xb0,0xbd,0x9d,0x76,0x01,0xf9,0xad,0x97,0x34,0x00,0x5a,0x19,0x82,0xbb,0x08,0x8f,0xda,0x94,0x8d,0xee,0x20,0xfd,0x9e,0x7c,0x3a,0x75,0x7e,0xa2,0xc0,0x79 };
    const uint8_t IV[] = { 0xd5,0x8a,0x4c,0x51,0xb7,0xc5,0xf1,0x1c,0x6e,0x9d,0xfe,0xa8,0x80,0xb8,0x91,0x75 };
    const uint8_t PLAINTEXT[] = { 0xd0,0xd8,0x94,0xdf,0x8e,0x3f,0x94,0x08,0xba,0x93,0x0b,0x0f,0x04,0xb9,0x46,0xd6 };
    const uint8_t CIPHERTEXT[] = { 0xc9,0x4a,0xcd,0x46,0xb9,0x04,0x80,0xdc,0xae,0x34,0x00,0xad,0xdb,0xff,0x2f,0x4f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-49", "[CFB128][MCT][256][ENCRYPT][n49]") {
    const uint8_t KEY[] = { 0x76,0x44,0x18,0x1f,0x01,0x11,0x4f,0x6a,0x5d,0xd7,0x86,0xa4,0x8d,0xee,0x96,0x5b,0xc1,0xc5,0x17,0xd2,0x34,0xea,0xa0,0x21,0x30,0x48,0x3a,0xd8,0xa5,0x5d,0xef,0x36 };
    const uint8_t IV[] = { 0xc9,0x4a,0xcd,0x46,0xb9,0x04,0x80,0xdc,0xae,0x34,0x00,0xad,0xdb,0xff,0x2f,0x4f };
    const uint8_t PLAINTEXT[] = { 0x74,0x58,0xa8,0xa2,0x9c,0x67,0x4e,0x93,0xf0,0x40,0xb2,0xa4,0xd7,0xf7,0x14,0xe0 };
    const uint8_t CIPHERTEXT[] = { 0x3c,0x96,0x7a,0xdb,0x0a,0xc5,0x01,0x51,0xad,0x66,0xcd,0x23,0x09,0x3f,0x70,0x97 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-50", "[CFB128][MCT][256][ENCRYPT][n50]") {
    const uint8_t KEY[] = { 0x1a,0x92,0x18,0x1f,0xd7,0x2f,0xa4,0x3a,0x2d,0xda,0xc1,0xb6,0xb1,0x0f,0x85,0x79,0xfd,0x53,0x6d,0x09,0x3e,0x2f,0xa1,0x70,0x9d,0x2e,0xf7,0xfb,0xac,0x62,0x9f,0xa1 };
    const uint8_t IV[] = { 0x3c,0x96,0x7a,0xdb,0x0a,0xc5,0x01,0x51,0xad,0x66,0xcd,0x23,0x09,0x3f,0x70,0x97 };
    const uint8_t PLAINTEXT[] = { 0x6c,0xd6,0x00,0x00,0xd6,0x3e,0xeb,0x50,0x70,0x0d,0x47,0x12,0x3c,0xe1,0x13,0x22 };
    const uint8_t CIPHERTEXT[] = { 0x25,0xc8,0xb1,0xf6,0x29,0x2b,0xde,0xa1,0x5b,0xbd,0xb8,0x00,0x6b,0x52,0xbf,0xe8 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-51", "[CFB128][MCT][256][ENCRYPT][n51]") {
    const uint8_t KEY[] = { 0x68,0xc4,0xfc,0x69,0x45,0xe4,0x41,0xfa,0x96,0x6d,0x98,0x77,0xd2,0x0f,0x9c,0x42,0xd8,0x9b,0xdc,0xff,0x17,0x04,0x7f,0xd1,0xc6,0x93,0x4f,0xfb,0xc7,0x30,0x20,0x49 };
    const uint8_t IV[] = { 0x25,0xc8,0xb1,0xf6,0x29,0x2b,0xde,0xa1,0x5b,0xbd,0xb8,0x00,0x6b,0x52,0xbf,0xe8 };
    const uint8_t PLAINTEXT[] = { 0x72,0x56,0xe4,0x76,0x92,0xcb,0xe5,0xc0,0xbb,0xb7,0x59,0xc1,0x63,0x00,0x19,0x3b };
    const uint8_t CIPHERTEXT[] = { 0x27,0xa7,0x28,0x31,0xf6,0x00,0x49,0x6e,0xb2,0x05,0x78,0x5d,0xf3,0x40,0xc0,0x95 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-52", "[CFB128][MCT][256][ENCRYPT][n52]") {
    const uint8_t KEY[] = { 0x54,0x63,0x35,0x05,0x63,0x96,0x85,0x7e,0x30,0xf9,0xac,0x9d,0x48,0x44,0xd2,0x18,0xff,0x3c,0xf4,0xce,0xe1,0x04,0x36,0xbf,0x74,0x96,0x37,0xa6,0x34,0x70,0xe0,0xdc };
    const uint8_t IV[] = { 0x27,0xa7,0x28,0x31,0xf6,0x00,0x49,0x6e,0xb2,0x05,0x78,0x5d,0xf3,0x40,0xc0,0x95 };
    const uint8_t PLAINTEXT[] = { 0x3c,0xa7,0xc9,0x6c,0x26,0x72,0xc4,0x84,0xa6,0x94,0x34,0xea,0x9a,0x4b,0x4e,0x5a };
    const uint8_t CIPHERTEXT[] = { 0x87,0x89,0xe3,0x17,0x66,0xa4,0xad,0x60,0x66,0x51,0xac,0x1a,0x53,0xb7,0x42,0x55 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-53", "[CFB128][MCT][256][ENCRYPT][n53]") {
    const uint8_t KEY[] = { 0xe3,0xc1,0x95,0x8d,0x0d,0x4d,0x39,0x56,0xd1,0xfb,0x62,0xf6,0xb0,0x55,0x09,0xaf,0x78,0xb5,0x17,0xd9,0x87,0xa0,0x9b,0xdf,0x12,0xc7,0x9b,0xbc,0x67,0xc7,0xa2,0x89 };
    const uint8_t IV[] = { 0x87,0x89,0xe3,0x17,0x66,0xa4,0xad,0x60,0x66,0x51,0xac,0x1a,0x53,0xb7,0x42,0x55 };
    const uint8_t PLAINTEXT[] = { 0xb7,0xa2,0xa0,0x88,0x6e,0xdb,0xbc,0x28,0xe1,0x02,0xce,0x6b,0xf8,0x11,0xdb,0xb7 };
    const uint8_t CIPHERTEXT[] = { 0xce,0xee,0xc4,0x50,0x1b,0x6f,0x84,0x3c,0x0b,0x0b,0xde,0xbe,0x61,0x39,0x9a,0x25 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-54", "[CFB128][MCT][256][ENCRYPT][n54]") {
    const uint8_t KEY[] = { 0x08,0x54,0xc0,0x2c,0x19,0x54,0x07,0xe5,0xfd,0x75,0xa5,0x0e,0x5a,0xb6,0x3f,0x25,0xb6,0x5b,0xd3,0x89,0x9c,0xcf,0x1f,0xe3,0x19,0xcc,0x45,0x02,0x06,0xfe,0x38,0xac };
    const uint8_t IV[] = { 0xce,0xee,0xc4,0x50,0x1b,0x6f,0x84,0x3c,0x0b,0x0b,0xde,0xbe,0x61,0x39,0x9a,0x25 };
    const uint8_t PLAINTEXT[] = { 0xeb,0x95,0x55,0xa1,0x14,0x19,0x3e,0xb3,0x2c,0x8e,0xc7,0xf8,0xea,0xe3,0x36,0x8a };
    const uint8_t CIPHERTEXT[] = { 0xe2,0x1e,0x42,0x51,0x4c,0x15,0xf5,0xdc,0x96,0xea,0xb9,0x26,0x20,0xff,0x42,0x34 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-55", "[CFB128][MCT][256][ENCRYPT][n55]") {
    const uint8_t KEY[] = { 0x21,0xb6,0x39,0x03,0x96,0x8c,0x31,0x95,0xf4,0xdf,0x67,0xfd,0xaa,0xdf,0xf2,0x3f,0x54,0x45,0x91,0xd8,0xd0,0xda,0xea,0x3f,0x8f,0x26,0xfc,0x24,0x26,0x01,0x7a,0x98 };
    const uint8_t IV[] = { 0xe2,0x1e,0x42,0x51,0x4c,0x15,0xf5,0xdc,0x96,0xea,0xb9,0x26,0x20,0xff,0x42,0x34 };
    const uint8_t PLAINTEXT[] = { 0x29,0xe2,0xf9,0x2f,0x8f,0xd8,0x36,0x70,0x09,0xaa,0xc2,0xf3,0xf0,0x69,0xcd,0x1a };
    const uint8_t CIPHERTEXT[] = { 0xc2,0xe2,0xda,0x9e,0x8c,0xa5,0xcb,0x2c,0xb1,0xdd,0x2b,0xe6,0xd5,0xe1,0xb9,0x25 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-56", "[CFB128][MCT][256][ENCRYPT][n56]") {
    const uint8_t KEY[] = { 0x82,0x1b,0xa5,0x7a,0xc0,0x16,0x14,0x93,0xfa,0x49,0xa8,0xf6,0xea,0xff,0x52,0xc1,0x96,0xa7,0x4b,0x46,0x5c,0x7f,0x21,0x13,0x3e,0xfb,0xd7,0xc2,0xf3,0xe0,0xc3,0xbd };
    const uint8_t IV[] = { 0xc2,0xe2,0xda,0x9e,0x8c,0xa5,0xcb,0x2c,0xb1,0xdd,0x2b,0xe6,0xd5,0xe1,0xb9,0x25 };
    const uint8_t PLAINTEXT[] = { 0xa3,0xad,0x9c,0x79,0x56,0x9a,0x25,0x06,0x0e,0x96,0xcf,0x0b,0x40,0x20,0xa0,0xfe };
    const uint8_t CIPHERTEXT[] = { 0x36,0x4b,0x99,0x31,0xb0,0xa3,0xa7,0xe7,0x04,0x42,0x5a,0xe5,0x6c,0x91,0xca,0x7c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-57", "[CFB128][MCT][256][ENCRYPT][n57]") {
    const uint8_t KEY[] = { 0xf8,0x1d,0x69,0xc2,0x1b,0xa8,0xee,0xba,0xc4,0xbb,0x01,0x18,0xbd,0x3c,0xeb,0xbd,0xa0,0xec,0xd2,0x77,0xec,0xdc,0x86,0xf4,0x3a,0xb9,0x8d,0x27,0x9f,0x71,0x09,0xc1 };
    const uint8_t IV[] = { 0x36,0x4b,0x99,0x31,0xb0,0xa3,0xa7,0xe7,0x04,0x42,0x5a,0xe5,0x6c,0x91,0xca,0x7c };
    const uint8_t PLAINTEXT[] = { 0x7a,0x06,0xcc,0xb8,0xdb,0xbe,0xfa,0x29,0x3e,0xf2,0xa9,0xee,0x57,0xc3,0xb9,0x7c };
    const uint8_t CIPHERTEXT[] = { 0x67,0x19,0xda,0xbb,0x09,0x2b,0xca,0x60,0x0f,0x5c,0x53,0x4f,0x84,0x2c,0xea,0xf6 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-58", "[CFB128][MCT][256][ENCRYPT][n58]") {
    const uint8_t KEY[] = { 0x7e,0x38,0x86,0x25,0x09,0xc8,0x3b,0x54,0x62,0x66,0xd8,0xea,0xcd,0x8d,0x7c,0x40,0xc7,0xf5,0x08,0xcc,0xe5,0xf7,0x4c,0x94,0x35,0xe5,0xde,0x68,0x1b,0x5d,0xe3,0x37 };
    const uint8_t IV[] = { 0x67,0x19,0xda,0xbb,0x09,0x2b,0xca,0x60,0x0f,0x5c,0x53,0x4f,0x84,0x2c,0xea,0xf6 };
    const uint8_t PLAINTEXT[] = { 0x86,0x25,0xef,0xe7,0x12,0x60,0xd5,0xee,0xa6,0xdd,0xd9,0xf2,0x70,0xb1,0x97,0xfd };
    const uint8_t CIPHERTEXT[] = { 0x6d,0xe4,0xf6,0x6b,0x31,0xb8,0x99,0x03,0x29,0xb1,0x7d,0x94,0xb5,0xd6,0xff,0x3b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-59", "[CFB128][MCT][256][ENCRYPT][n59]") {
    const uint8_t KEY[] = { 0xc9,0xf6,0xe6,0xa1,0x0b,0x4e,0xae,0x96,0xb5,0xbd,0xb3,0x69,0xe1,0xa4,0x4f,0xe3,0xaa,0x11,0xfe,0xa7,0xd4,0x4f,0xd5,0x97,0x1c,0x54,0xa3,0xfc,0xae,0x8b,0x1c,0x0c };
    const uint8_t IV[] = { 0x6d,0xe4,0xf6,0x6b,0x31,0xb8,0x99,0x03,0x29,0xb1,0x7d,0x94,0xb5,0xd6,0xff,0x3b };
    const uint8_t PLAINTEXT[] = { 0xb7,0xce,0x60,0x84,0x02,0x86,0x95,0xc2,0xd7,0xdb,0x6b,0x83,0x2c,0x29,0x33,0xa3 };
    const uint8_t CIPHERTEXT[] = { 0xf1,0x26,0x0c,0xd5,0x8c,0xbd,0x1b,0x7c,0x07,0xcc,0x85,0x4d,0x1b,0x3d,0x19,0x84 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-60", "[CFB128][MCT][256][ENCRYPT][n60]") {
    const uint8_t KEY[] = { 0xa7,0xd1,0xbf,0x93,0x52,0xb9,0xe5,0x68,0x3c,0x2f,0xbd,0x84,0x75,0x37,0xa8,0x0d,0x5b,0x37,0xf2,0x72,0x58,0xf2,0xce,0xeb,0x1b,0x98,0x26,0xb1,0xb5,0xb6,0x05,0x88 };
    const uint8_t IV[] = { 0xf1,0x26,0x0c,0xd5,0x8c,0xbd,0x1b,0x7c,0x07,0xcc,0x85,0x4d,0x1b,0x3d,0x19,0x84 };
    const uint8_t PLAINTEXT[] = { 0x6e,0x27,0x59,0x32,0x59,0xf7,0x4b,0xfe,0x89,0x92,0x0e,0xed,0x94,0x93,0xe7,0xee };
    const uint8_t CIPHERTEXT[] = { 0x6e,0xc7,0xc5,0x0a,0x7f,0x9d,0xeb,0x26,0x6d,0xc3,0xc4,0x37,0x69,0xe2,0x05,0x76 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-61", "[CFB128][MCT][256][ENCRYPT][n61]") {
    const uint8_t KEY[] = { 0xc2,0xc1,0xcf,0x9c,0xc9,0xc4,0x40,0xa5,0xdc,0xd8,0x07,0x30,0xc8,0xe9,0x6a,0x63,0x35,0xf0,0x37,0x78,0x27,0x6f,0x25,0xcd,0x76,0x5b,0xe2,0x86,0xdc,0x54,0x00,0xfe };
    const uint8_t IV[] = { 0x6e,0xc7,0xc5,0x0a,0x7f,0x9d,0xeb,0x26,0x6d,0xc3,0xc4,0x37,0x69,0xe2,0x05,0x76 };
    const uint8_t PLAINTEXT[] = { 0x65,0x10,0x70,0x0f,0x9b,0x7d,0xa5,0xcd,0xe0,0xf7,0xba,0xb4,0xbd,0xde,0xc2,0x6e };
    const uint8_t CIPHERTEXT[] = { 0xbe,0x05,0xa1,0xf8,0x0e,0x86,0xce,0x4e,0x7f,0x14,0x72,0xc4,0x8e,0x99,0x9f,0x3d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-62", "[CFB128][MCT][256][ENCRYPT][n62]") {
    const uint8_t KEY[] = { 0xae,0x7f,0xa5,0x84,0xf7,0xa5,0x7a,0x78,0x96,0xd3,0x04,0x3e,0x21,0xb2,0xa9,0xb1,0x8b,0xf5,0x96,0x80,0x29,0xe9,0xeb,0x83,0x09,0x4f,0x90,0x42,0x52,0xcd,0x9f,0xc3 };
    const uint8_t IV[] = { 0xbe,0x05,0xa1,0xf8,0x0e,0x86,0xce,0x4e,0x7f,0x14,0x72,0xc4,0x8e,0x99,0x9f,0x3d };
    const uint8_t PLAINTEXT[] = { 0x6c,0xbe,0x6a,0x18,0x3e,0x61,0x3a,0xdd,0x4a,0x0b,0x03,0x0e,0xe9,0x5b,0xc3,0xd2 };
    const uint8_t CIPHERTEXT[] = { 0x45,0xa9,0x8a,0xa5,0x94,0x43,0x8d,0x7d,0x58,0x8d,0xad,0x0e,0xf8,0x10,0x99,0xff };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-63", "[CFB128][MCT][256][ENCRYPT][n63]") {
    const uint8_t KEY[] = { 0x02,0x36,0xff,0x79,0x90,0x98,0x47,0x97,0x6b,0x82,0x77,0xa7,0xfd,0xa1,0x0f,0x50,0xce,0x5c,0x1c,0x25,0xbd,0xaa,0x66,0xfe,0x51,0xc2,0x3d,0x4c,0xaa,0xdd,0x06,0x3c };
    const uint8_t IV[] = { 0x45,0xa9,0x8a,0xa5,0x94,0x43,0x8d,0x7d,0x58,0x8d,0xad,0x0e,0xf8,0x10,0x99,0xff };
    const uint8_t PLAINTEXT[] = { 0xac,0x49,0x5a,0xfd,0x67,0x3d,0x3d,0xef,0xfd,0x51,0x73,0x99,0xdc,0x13,0xa6,0xe1 };
    const uint8_t CIPHERTEXT[] = { 0x89,0xc0,0x40,0x5e,0x4c,0x67,0x6d,0x0c,0x7e,0x44,0x6b,0x32,0x24,0x71,0x4b,0x1d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-64", "[CFB128][MCT][256][ENCRYPT][n64]") {
    const uint8_t KEY[] = { 0xd5,0x96,0x07,0x04,0xe3,0x50,0xbf,0x13,0x14,0x9d,0xec,0x08,0xe3,0xe4,0xb2,0x9d,0x47,0x9c,0x5c,0x7b,0xf1,0xcd,0x0b,0xf2,0x2f,0x86,0x56,0x7e,0x8e,0xac,0x4d,0x21 };
    const uint8_t IV[] = { 0x89,0xc0,0x40,0x5e,0x4c,0x67,0x6d,0x0c,0x7e,0x44,0x6b,0x32,0x24,0x71,0x4b,0x1d };
    const uint8_t PLAINTEXT[] = { 0xd7,0xa0,0xf8,0x7d,0x73,0xc8,0xf8,0x84,0x7f,0x1f,0x9b,0xaf,0x1e,0x45,0xbd,0xcd };
    const uint8_t CIPHERTEXT[] = { 0x69,0xed,0x7a,0x88,0x45,0x9e,0xad,0xd1,0xb0,0x98,0x39,0xaf,0xe9,0x16,0xe7,0x99 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-65", "[CFB128][MCT][256][ENCRYPT][n65]") {
    const uint8_t KEY[] = { 0x7b,0x69,0xb9,0xe6,0xc9,0x55,0x40,0xe9,0x81,0x2b,0x31,0xde,0xc9,0x1d,0x18,0xfd,0x2e,0x71,0x26,0xf3,0xb4,0x53,0xa6,0x23,0x9f,0x1e,0x6f,0xd1,0x67,0xba,0xaa,0xb8 };
    const uint8_t IV[] = { 0x69,0xed,0x7a,0x88,0x45,0x9e,0xad,0xd1,0xb0,0x98,0x39,0xaf,0xe9,0x16,0xe7,0x99 };
    const uint8_t PLAINTEXT[] = { 0xae,0xff,0xbe,0xe2,0x2a,0x05,0xff,0xfa,0x95,0xb6,0xdd,0xd6,0x2a,0xf9,0xaa,0x60 };
    const uint8_t CIPHERTEXT[] = { 0x8b,0x47,0x6c,0x78,0xa9,0x6c,0xd2,0x4f,0x6b,0x9d,0xde,0x0e,0x8d,0xf2,0x08,0x51 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-66", "[CFB128][MCT][256][ENCRYPT][n66]") {
    const uint8_t KEY[] = { 0xdd,0x1e,0x68,0xe5,0x26,0x30,0x6f,0xf3,0x70,0xdc,0xed,0x9a,0x0f,0x4f,0x73,0xe8,0xa5,0x36,0x4a,0x8b,0x1d,0x3f,0x74,0x6c,0xf4,0x83,0xb1,0xdf,0xea,0x48,0xa2,0xe9 };
    const uint8_t IV[] = { 0x8b,0x47,0x6c,0x78,0xa9,0x6c,0xd2,0x4f,0x6b,0x9d,0xde,0x0e,0x8d,0xf2,0x08,0x51 };
    const uint8_t PLAINTEXT[] = { 0xa6,0x77,0xd1,0x03,0xef,0x65,0x2f,0x1a,0xf1,0xf7,0xdc,0x44,0xc6,0x52,0x6b,0x15 };
    const uint8_t CIPHERTEXT[] = { 0x32,0x88,0xd6,0xf2,0xf7,0x3c,0x89,0x8a,0xe6,0x9a,0xab,0xdc,0x0e,0x07,0xaf,0x20 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-67", "[CFB128][MCT][256][ENCRYPT][n67]") {
    const uint8_t KEY[] = { 0xaa,0x48,0xf0,0xb0,0x9c,0xab,0x3d,0x24,0x33,0x64,0x06,0x04,0xff,0x17,0x00,0x07,0x97,0xbe,0x9c,0x79,0xea,0x03,0xfd,0xe6,0x12,0x19,0x1a,0x03,0xe4,0x4f,0x0d,0xc9 };
    const uint8_t IV[] = { 0x32,0x88,0xd6,0xf2,0xf7,0x3c,0x89,0x8a,0xe6,0x9a,0xab,0xdc,0x0e,0x07,0xaf,0x20 };
    const uint8_t PLAINTEXT[] = { 0x77,0x56,0x98,0x55,0xba,0x9b,0x52,0xd7,0x43,0xb8,0xeb,0x9e,0xf0,0x58,0x73,0xef };
    const uint8_t CIPHERTEXT[] = { 0xbd,0x89,0x22,0xa2,0xad,0x1f,0x75,0x3f,0x20,0xef,0xb6,0x54,0x4a,0xd8,0x5b,0x67 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-68", "[CFB128][MCT][256][ENCRYPT][n68]") {
    const uint8_t KEY[] = { 0xdc,0x45,0x0d,0xd2,0x5f,0x25,0xc7,0x1f,0xab,0x1c,0x63,0x39,0x3f,0x8e,0x8b,0x5f,0x2a,0x37,0xbe,0xdb,0x47,0x1c,0x88,0xd9,0x32,0xf6,0xac,0x57,0xae,0x97,0x56,0xae };
    const uint8_t IV[] = { 0xbd,0x89,0x22,0xa2,0xad,0x1f,0x75,0x3f,0x20,0xef,0xb6,0x54,0x4a,0xd8,0x5b,0x67 };
    const uint8_t PLAINTEXT[] = { 0x76,0x0d,0xfd,0x62,0xc3,0x8e,0xfa,0x3b,0x98,0x78,0x65,0x3d,0xc0,0x99,0x8b,0x58 };
    const uint8_t CIPHERTEXT[] = { 0x00,0xa1,0xc9,0xbc,0x19,0x58,0xa7,0x18,0x53,0x74,0xe5,0x19,0xf1,0x31,0x3c,0x89 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-69", "[CFB128][MCT][256][ENCRYPT][n69]") {
    const uint8_t KEY[] = { 0xa0,0x37,0xf5,0x37,0x58,0x4a,0x4d,0xa3,0xd2,0xda,0x20,0xda,0xbe,0x43,0xf1,0x35,0x2a,0x96,0x77,0x67,0x5e,0x44,0x2f,0xc1,0x61,0x82,0x49,0x4e,0x5f,0xa6,0x6a,0x27 };
    const uint8_t IV[] = { 0x00,0xa1,0xc9,0xbc,0x19,0x58,0xa7,0x18,0x53,0x74,0xe5,0x19,0xf1,0x31,0x3c,0x89 };
    const uint8_t PLAINTEXT[] = { 0x7c,0x72,0xf8,0xe5,0x07,0x6f,0x8a,0xbc,0x79,0xc6,0x43,0xe3,0x81,0xcd,0x7a,0x6a };
    const uint8_t CIPHERTEXT[] = { 0x7f,0xa2,0x6d,0xb6,0xfd,0x28,0xc6,0xb1,0xa2,0x3e,0x3b,0x1d,0x9e,0xd1,0x2b,0x74 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-70", "[CFB128][MCT][256][ENCRYPT][n70]") {
    const uint8_t KEY[] = { 0x29,0x54,0x71,0x45,0x03,0x34,0x51,0xe9,0x89,0x3f,0xcf,0xca,0xe4,0x37,0x5a,0xeb,0x55,0x34,0x1a,0xd1,0xa3,0x6c,0xe9,0x70,0xc3,0xbc,0x72,0x53,0xc1,0x77,0x41,0x53 };
    const uint8_t IV[] = { 0x7f,0xa2,0x6d,0xb6,0xfd,0x28,0xc6,0xb1,0xa2,0x3e,0x3b,0x1d,0x9e,0xd1,0x2b,0x74 };
    const uint8_t PLAINTEXT[] = { 0x89,0x63,0x84,0x72,0x5b,0x7e,0x1c,0x4a,0x5b,0xe5,0xef,0x10,0x5a,0x74,0xab,0xde };
    const uint8_t CIPHERTEXT[] = { 0x0b,0x53,0x3e,0x46,0x3e,0xe1,0x00,0x57,0xb8,0x04,0x72,0xe7,0x83,0x6e,0x25,0x28 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-71", "[CFB128][MCT][256][ENCRYPT][n71]") {
    const uint8_t KEY[] = { 0xb1,0xe0,0x81,0xff,0x57,0x85,0x32,0x62,0x49,0x9d,0xc6,0xdc,0xa1,0x28,0xa5,0x32,0x5e,0x67,0x24,0x97,0x9d,0x8d,0xe9,0x27,0x7b,0xb8,0x00,0xb4,0x42,0x19,0x64,0x7b };
    const uint8_t IV[] = { 0x0b,0x53,0x3e,0x46,0x3e,0xe1,0x00,0x57,0xb8,0x04,0x72,0xe7,0x83,0x6e,0x25,0x28 };
    const uint8_t PLAINTEXT[] = { 0x98,0xb4,0xf0,0xba,0x54,0xb1,0x63,0x8b,0xc0,0xa2,0x09,0x16,0x45,0x1f,0xff,0xd9 };
    const uint8_t CIPHERTEXT[] = { 0xc7,0xf1,0x79,0x9b,0xd3,0x47,0xa6,0x97,0x6f,0xcd,0xc5,0x8e,0x96,0xf4,0x15,0x1f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-72", "[CFB128][MCT][256][ENCRYPT][n72]") {
    const uint8_t KEY[] = { 0x2f,0x17,0x20,0x60,0x17,0x40,0x2b,0x23,0x3a,0x82,0xaa,0x0b,0x11,0xb0,0x2e,0xfe,0x99,0x96,0x5d,0x0c,0x4e,0xca,0x4f,0xb0,0x14,0x75,0xc5,0x3a,0xd4,0xed,0x71,0x64 };
    const uint8_t IV[] = { 0xc7,0xf1,0x79,0x9b,0xd3,0x47,0xa6,0x97,0x6f,0xcd,0xc5,0x8e,0x96,0xf4,0x15,0x1f };
    const uint8_t PLAINTEXT[] = { 0x9e,0xf7,0xa1,0x9f,0x40,0xc5,0x19,0x41,0x73,0x1f,0x6c,0xd7,0xb0,0x98,0x8b,0xcc };
    const uint8_t CIPHERTEXT[] = { 0xa2,0x77,0x0a,0xb0,0xe7,0xf7,0x5e,0x53,0xf1,0x8b,0xd3,0xbf,0x1d,0x9b,0xee,0x43 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-73", "[CFB128][MCT][256][ENCRYPT][n73]") {
    const uint8_t KEY[] = { 0xe6,0xa2,0x84,0x30,0x99,0x90,0x1a,0x46,0x07,0x52,0x26,0xce,0x69,0x2d,0x07,0xfa,0x3b,0xe1,0x57,0xbc,0xa9,0x3d,0x11,0xe3,0xe5,0xfe,0x16,0x85,0xc9,0x76,0x9f,0x27 };
    const uint8_t IV[] = { 0xa2,0x77,0x0a,0xb0,0xe7,0xf7,0x5e,0x53,0xf1,0x8b,0xd3,0xbf,0x1d,0x9b,0xee,0x43 };
    const uint8_t PLAINTEXT[] = { 0xc9,0xb5,0xa4,0x50,0x8e,0xd0,0x31,0x65,0x3d,0xd0,0x8c,0xc5,0x78,0x9d,0x29,0x04 };
    const uint8_t CIPHERTEXT[] = { 0x78,0x04,0x5e,0xba,0xbb,0x50,0x9f,0xa7,0xa7,0xf2,0xb4,0x51,0xbe,0xe9,0xbc,0x9d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-74", "[CFB128][MCT][256][ENCRYPT][n74]") {
    const uint8_t KEY[] = { 0xbb,0x08,0xf8,0x49,0xea,0xa0,0x96,0x35,0x3a,0x81,0xff,0x3b,0x15,0x75,0x39,0xc2,0x43,0xe5,0x09,0x06,0x12,0x6d,0x8e,0x44,0x42,0x0c,0xa2,0xd4,0x77,0x9f,0x23,0xba };
    const uint8_t IV[] = { 0x78,0x04,0x5e,0xba,0xbb,0x50,0x9f,0xa7,0xa7,0xf2,0xb4,0x51,0xbe,0xe9,0xbc,0x9d };
    const uint8_t PLAINTEXT[] = { 0x5d,0xaa,0x7c,0x79,0x73,0x30,0x8c,0x73,0x3d,0xd3,0xd9,0xf5,0x7c,0x58,0x3e,0x38 };
    const uint8_t CIPHERTEXT[] = { 0x84,0x17,0x68,0x56,0xd1,0x5e,0x73,0xca,0x3d,0x88,0xb4,0x79,0x12,0x8b,0x0c,0x6e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-75", "[CFB128][MCT][256][ENCRYPT][n75]") {
    const uint8_t KEY[] = { 0x01,0x99,0x10,0xab,0x8f,0xf1,0xba,0x55,0xc6,0x16,0xbf,0x15,0x4b,0xb6,0xbf,0xa0,0xc7,0xf2,0x61,0x50,0xc3,0x33,0xfd,0x8e,0x7f,0x84,0x16,0xad,0x65,0x14,0x2f,0xd4 };
    const uint8_t IV[] = { 0x84,0x17,0x68,0x56,0xd1,0x5e,0x73,0xca,0x3d,0x88,0xb4,0x79,0x12,0x8b,0x0c,0x6e };
    const uint8_t PLAINTEXT[] = { 0xba,0x91,0xe8,0xe2,0x65,0x51,0x2c,0x60,0xfc,0x97,0x40,0x2e,0x5e,0xc3,0x86,0x62 };
    const uint8_t CIPHERTEXT[] = { 0x6a,0x13,0x99,0x41,0x59,0xa5,0xe1,0xf5,0x84,0x1e,0xcf,0xaf,0x95,0x0b,0x90,0x73 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-76", "[CFB128][MCT][256][ENCRYPT][n76]") {
    const uint8_t KEY[] = { 0x64,0x93,0xd4,0x00,0xb1,0xf0,0xd5,0x8e,0x20,0xef,0xa2,0xb9,0x84,0x19,0xc3,0x29,0xad,0xe1,0xf8,0x11,0x9a,0x96,0x1c,0x7b,0xfb,0x9a,0xd9,0x02,0xf0,0x1f,0xbf,0xa7 };
    const uint8_t IV[] = { 0x6a,0x13,0x99,0x41,0x59,0xa5,0xe1,0xf5,0x84,0x1e,0xcf,0xaf,0x95,0x0b,0x90,0x73 };
    const uint8_t PLAINTEXT[] = { 0x65,0x0a,0xc4,0xab,0x3e,0x01,0x6f,0xdb,0xe6,0xf9,0x1d,0xac,0xcf,0xaf,0x7c,0x89 };
    const uint8_t CIPHERTEXT[] = { 0x6c,0x0c,0x83,0x06,0x2e,0x74,0x84,0x66,0x60,0x5f,0x91,0x45,0xe4,0xf2,0xd0,0x83 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-77", "[CFB128][MCT][256][ENCRYPT][n77]") {
    const uint8_t KEY[] = { 0x58,0x63,0x81,0x2d,0xcf,0xc1,0x2a,0x5d,0x83,0xa3,0x86,0x29,0xe0,0x1e,0x6e,0x09,0xc1,0xed,0x7b,0x17,0xb4,0xe2,0x98,0x1d,0x9b,0xc5,0x48,0x47,0x14,0xed,0x6f,0x24 };
    const uint8_t IV[] = { 0x6c,0x0c,0x83,0x06,0x2e,0x74,0x84,0x66,0x60,0x5f,0x91,0x45,0xe4,0xf2,0xd0,0x83 };
    const uint8_t PLAINTEXT[] = { 0x3c,0xf0,0x55,0x2d,0x7e,0x31,0xff,0xd3,0xa3,0x4c,0x24,0x90,0x64,0x07,0xad,0x20 };
    const uint8_t CIPHERTEXT[] = { 0x69,0xb4,0x33,0x49,0xd6,0x7e,0x9b,0x46,0xff,0xd9,0x91,0x95,0x42,0xb0,0x40,0x3a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-78", "[CFB128][MCT][256][ENCRYPT][n78]") {
    const uint8_t KEY[] = { 0x1a,0x2d,0xe5,0x13,0xbd,0x43,0x02,0xcf,0xb0,0x42,0xc9,0x52,0x5f,0xee,0x87,0xe2,0xa8,0x59,0x48,0x5e,0x62,0x9c,0x03,0x5b,0x64,0x1c,0xd9,0xd2,0x56,0x5d,0x2f,0x1e };
    const uint8_t IV[] = { 0x69,0xb4,0x33,0x49,0xd6,0x7e,0x9b,0x46,0xff,0xd9,0x91,0x95,0x42,0xb0,0x40,0x3a };
    const uint8_t PLAINTEXT[] = { 0x42,0x4e,0x64,0x3e,0x72,0x82,0x28,0x92,0x33,0xe1,0x4f,0x7b,0xbf,0xf0,0xe9,0xeb };
    const uint8_t CIPHERTEXT[] = { 0xfd,0x4b,0xf0,0x6f,0xab,0xb2,0xb7,0x1c,0xcf,0x1e,0xdc,0x1d,0xd9,0x7f,0xc0,0xa0 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-79", "[CFB128][MCT][256][ENCRYPT][n79]") {
    const uint8_t KEY[] = { 0xa8,0xd5,0x56,0x5c,0x77,0xd5,0xf9,0x8f,0x24,0x9e,0x17,0x33,0xa8,0xf4,0x65,0xc4,0x55,0x12,0xb8,0x31,0xc9,0x2e,0xb4,0x47,0xab,0x02,0x05,0xcf,0x8f,0x22,0xef,0xbe };
    const uint8_t IV[] = { 0xfd,0x4b,0xf0,0x6f,0xab,0xb2,0xb7,0x1c,0xcf,0x1e,0xdc,0x1d,0xd9,0x7f,0xc0,0xa0 };
    const uint8_t PLAINTEXT[] = { 0xb2,0xf8,0xb3,0x4f,0xca,0x96,0xfb,0x40,0x94,0xdc,0xde,0x61,0xf7,0x1a,0xe2,0x26 };
    const uint8_t CIPHERTEXT[] = { 0x71,0xa0,0x53,0x7d,0x11,0xbc,0x88,0x06,0x86,0xe9,0xb7,0x6a,0x1c,0x1e,0x35,0x87 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-80", "[CFB128][MCT][256][ENCRYPT][n80]") {
    const uint8_t KEY[] = { 0x41,0xd1,0x82,0x67,0xc9,0xce,0xf7,0xce,0xcb,0x5a,0xbf,0x49,0x72,0xa5,0x52,0x46,0x24,0xb2,0xeb,0x4c,0xd8,0x92,0x3c,0x41,0x2d,0xeb,0xb2,0xa5,0x93,0x3c,0xda,0x39 };
    const uint8_t IV[] = { 0x71,0xa0,0x53,0x7d,0x11,0xbc,0x88,0x06,0x86,0xe9,0xb7,0x6a,0x1c,0x1e,0x35,0x87 };
    const uint8_t PLAINTEXT[] = { 0xe9,0x04,0xd4,0x3b,0xbe,0x1b,0x0e,0x41,0xef,0xc4,0xa8,0x7a,0xda,0x51,0x37,0x82 };
    const uint8_t CIPHERTEXT[] = { 0xc0,0x69,0xf0,0xdf,0x35,0x7e,0x00,0x86,0xcb,0x47,0x69,0x97,0xe7,0xb3,0xf1,0xb5 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-81", "[CFB128][MCT][256][ENCRYPT][n81]") {
    const uint8_t KEY[] = { 0x6a,0x29,0x4c,0x35,0xf9,0x85,0x2b,0xec,0xc8,0x28,0x6a,0x89,0xce,0x54,0x6b,0xbb,0xe4,0xdb,0x1b,0x93,0xed,0xec,0x3c,0xc7,0xe6,0xac,0xdb,0x32,0x74,0x8f,0x2b,0x8c };
    const uint8_t IV[] = { 0xc0,0x69,0xf0,0xdf,0x35,0x7e,0x00,0x86,0xcb,0x47,0x69,0x97,0xe7,0xb3,0xf1,0xb5 };
    const uint8_t PLAINTEXT[] = { 0x2b,0xf8,0xce,0x52,0x30,0x4b,0xdc,0x22,0x03,0x72,0xd5,0xc0,0xbc,0xf1,0x39,0xfd };
    const uint8_t CIPHERTEXT[] = { 0xda,0x27,0x2a,0x68,0x37,0x38,0xf0,0x28,0xa9,0xd6,0x77,0xe5,0x2f,0x45,0x18,0x71 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-82", "[CFB128][MCT][256][ENCRYPT][n82]") {
    const uint8_t KEY[] = { 0xc9,0xc4,0x5b,0x78,0x54,0x5f,0x14,0x47,0xe5,0x9d,0x44,0xe3,0x4b,0x02,0x4d,0x97,0x3e,0xfc,0x31,0xfb,0xda,0xd4,0xcc,0xef,0x4f,0x7a,0xac,0xd7,0x5b,0xca,0x33,0xfd };
    const uint8_t IV[] = { 0xda,0x27,0x2a,0x68,0x37,0x38,0xf0,0x28,0xa9,0xd6,0x77,0xe5,0x2f,0x45,0x18,0x71 };
    const uint8_t PLAINTEXT[] = { 0xa3,0xed,0x17,0x4d,0xad,0xda,0x3f,0xab,0x2d,0xb5,0x2e,0x6a,0x85,0x56,0x26,0x2c };
    const uint8_t CIPHERTEXT[] = { 0x4e,0x64,0xbf,0x72,0x87,0xe7,0x26,0xc3,0x91,0x01,0xce,0x16,0xc8,0x80,0x4e,0x27 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-83", "[CFB128][MCT][256][ENCRYPT][n83]") {
    const uint8_t KEY[] = { 0x40,0x76,0xd6,0x5e,0x34,0x1d,0xdc,0x80,0x4f,0x7f,0x72,0xa7,0x60,0x72,0xd7,0xab,0x70,0x98,0x8e,0x89,0x5d,0x33,0xea,0x2c,0xde,0x7b,0x62,0xc1,0x93,0x4a,0x7d,0xda };
    const uint8_t IV[] = { 0x4e,0x64,0xbf,0x72,0x87,0xe7,0x26,0xc3,0x91,0x01,0xce,0x16,0xc8,0x80,0x4e,0x27 };
    const uint8_t PLAINTEXT[] = { 0x89,0xb2,0x8d,0x26,0x60,0x42,0xc8,0xc7,0xaa,0xe2,0x36,0x44,0x2b,0x70,0x9a,0x3c };
    const uint8_t CIPHERTEXT[] = { 0x82,0x4c,0xde,0xbc,0xbe,0x4e,0x18,0x7d,0xb5,0x66,0x16,0xc4,0x38,0x47,0x6d,0x12 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-84", "[CFB128][MCT][256][ENCRYPT][n84]") {
    const uint8_t KEY[] = { 0x5e,0xd7,0x6e,0xcd,0xde,0x88,0xdc,0x68,0x67,0xd9,0xfd,0x21,0x13,0xf8,0x35,0x13,0xf2,0xd4,0x50,0x35,0xe3,0x7d,0xf2,0x51,0x6b,0x1d,0x74,0x05,0xab,0x0d,0x10,0xc8 };
    const uint8_t IV[] = { 0x82,0x4c,0xde,0xbc,0xbe,0x4e,0x18,0x7d,0xb5,0x66,0x16,0xc4,0x38,0x47,0x6d,0x12 };
    const uint8_t PLAINTEXT[] = { 0x1e,0xa1,0xb8,0x93,0xea,0x95,0x00,0xe8,0x28,0xa6,0x8f,0x86,0x73,0x8a,0xe2,0xb8 };
    const uint8_t CIPHERTEXT[] = { 0x9e,0x4f,0x08,0xe8,0xeb,0x96,0xdd,0x16,0x08,0x92,0x19,0xe0,0x7c,0x94,0x15,0x2d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-85", "[CFB128][MCT][256][ENCRYPT][n85]") {
    const uint8_t KEY[] = { 0xef,0xe3,0x7b,0xde,0xec,0x45,0xed,0x1c,0xef,0x42,0xcf,0x11,0x5d,0xbf,0x3d,0xa6,0x6c,0x9b,0x58,0xdd,0x08,0xeb,0x2f,0x47,0x63,0x8f,0x6d,0xe5,0xd7,0x99,0x05,0xe5 };
    const uint8_t IV[] = { 0x9e,0x4f,0x08,0xe8,0xeb,0x96,0xdd,0x16,0x08,0x92,0x19,0xe0,0x7c,0x94,0x15,0x2d };
    const uint8_t PLAINTEXT[] = { 0xb1,0x34,0x15,0x13,0x32,0xcd,0x31,0x74,0x88,0x9b,0x32,0x30,0x4e,0x47,0x08,0xb5 };
    const uint8_t CIPHERTEXT[] = { 0x8e,0xc9,0xe6,0x77,0xbc,0x99,0xff,0x8f,0x28,0x8a,0xb2,0xb5,0xa5,0x28,0xc8,0xc2 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-86", "[CFB128][MCT][256][ENCRYPT][n86]") {
    const uint8_t KEY[] = { 0xd6,0x95,0x33,0x02,0x7d,0xa7,0xeb,0x3e,0xe8,0x04,0xa1,0xc7,0xeb,0x9a,0x2e,0xcc,0xe2,0x52,0xbe,0xaa,0xb4,0x72,0xd0,0xc8,0x4b,0x05,0xdf,0x50,0x72,0xb1,0xcd,0x27 };
    const uint8_t IV[] = { 0x8e,0xc9,0xe6,0x77,0xbc,0x99,0xff,0x8f,0x28,0x8a,0xb2,0xb5,0xa5,0x28,0xc8,0xc2 };
    const uint8_t PLAINTEXT[] = { 0x39,0x76,0x48,0xdc,0x91,0xe2,0x06,0x22,0x07,0x46,0x6e,0xd6,0xb6,0x25,0x13,0x6a };
    const uint8_t CIPHERTEXT[] = { 0x2a,0xf1,0x7e,0xac,0xa3,0x30,0x5c,0x84,0xbb,0x37,0x53,0xbf,0xd3,0xd5,0xf3,0xda };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-87", "[CFB128][MCT][256][ENCRYPT][n87]") {
    const uint8_t KEY[] = { 0xee,0x3e,0xbb,0x73,0x7c,0xc5,0x15,0x76,0xfb,0x30,0xbd,0x30,0xc0,0x4c,0xfb,0x57,0xc8,0xa3,0xc0,0x06,0x17,0x42,0x8c,0x4c,0xf0,0x32,0x8c,0xef,0xa1,0x64,0x3e,0xfd };
    const uint8_t IV[] = { 0x2a,0xf1,0x7e,0xac,0xa3,0x30,0x5c,0x84,0xbb,0x37,0x53,0xbf,0xd3,0xd5,0xf3,0xda };
    const uint8_t PLAINTEXT[] = { 0x38,0xab,0x88,0x71,0x01,0x62,0xfe,0x48,0x13,0x34,0x1c,0xf7,0x2b,0xd6,0xd5,0x9b };
    const uint8_t CIPHERTEXT[] = { 0xc1,0x73,0x0a,0xa5,0xb3,0xbe,0x71,0xe9,0x2c,0x65,0xc0,0x87,0x88,0x96,0x45,0x24 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-88", "[CFB128][MCT][256][ENCRYPT][n88]") {
    const uint8_t KEY[] = { 0x36,0xed,0xf8,0xf6,0xe3,0xfa,0x26,0xe8,0xbd,0x5c,0xff,0x0a,0xe6,0x63,0xdd,0xb7,0x09,0xd0,0xca,0xa3,0xa4,0xfc,0xfd,0xa5,0xdc,0x57,0x4c,0x68,0x29,0xf2,0x7b,0xd9 };
    const uint8_t IV[] = { 0xc1,0x73,0x0a,0xa5,0xb3,0xbe,0x71,0xe9,0x2c,0x65,0xc0,0x87,0x88,0x96,0x45,0x24 };
    const uint8_t PLAINTEXT[] = { 0xd8,0xd3,0x43,0x85,0x9f,0x3f,0x33,0x9e,0x46,0x6c,0x42,0x3a,0x26,0x2f,0x26,0xe0 };
    const uint8_t CIPHERTEXT[] = { 0x80,0x1c,0x50,0xbe,0xff,0x30,0x1b,0xb1,0xec,0x95,0x02,0x67,0x36,0xe2,0xb4,0x2b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-89", "[CFB128][MCT][256][ENCRYPT][n89]") {
    const uint8_t KEY[] = { 0x41,0xc2,0x4a,0x5e,0x30,0xae,0x00,0x64,0x24,0x1d,0xe7,0x91,0xad,0x3e,0x82,0x71,0x89,0xcc,0x9a,0x1d,0x5b,0xcc,0xe6,0x14,0x30,0xc2,0x4e,0x0f,0x1f,0x10,0xcf,0xf2 };
    const uint8_t IV[] = { 0x80,0x1c,0x50,0xbe,0xff,0x30,0x1b,0xb1,0xec,0x95,0x02,0x67,0x36,0xe2,0xb4,0x2b };
    const uint8_t PLAINTEXT[] = { 0x77,0x2f,0xb2,0xa8,0xd3,0x54,0x26,0x8c,0x99,0x41,0x18,0x9b,0x4b,0x5d,0x5f,0xc6 };
    const uint8_t CIPHERTEXT[] = { 0x1b,0x35,0xf8,0xd8,0x58,0x3a,0x8c,0x1d,0x45,0x00,0xaf,0xb6,0xa3,0x23,0x02,0x31 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-90", "[CFB128][MCT][256][ENCRYPT][n90]") {
    const uint8_t KEY[] = { 0xb0,0x23,0xa0,0x8c,0x0a,0x82,0x0a,0xc4,0x1d,0x85,0x58,0x5d,0xbf,0x4c,0x38,0xa5,0x92,0xf9,0x62,0xc5,0x03,0xf6,0x6a,0x09,0x75,0xc2,0xe1,0xb9,0xbc,0x33,0xcd,0xc3 };
    const uint8_t IV[] = { 0x1b,0x35,0xf8,0xd8,0x58,0x3a,0x8c,0x1d,0x45,0x00,0xaf,0xb6,0xa3,0x23,0x02,0x31 };
    const uint8_t PLAINTEXT[] = { 0xf1,0xe1,0xea,0xd2,0x3a,0x2c,0x0a,0xa0,0x39,0x98,0xbf,0xcc,0x12,0x72,0xba,0xd4 };
    const uint8_t CIPHERTEXT[] = { 0x92,0x52,0x7d,0x1c,0x03,0xbf,0xe9,0xf4,0xe0,0x01,0x26,0xb6,0x4d,0x03,0x2f,0x10 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-91", "[CFB128][MCT][256][ENCRYPT][n91]") {
    const uint8_t KEY[] = { 0xcd,0x74,0xa4,0x94,0x2e,0x2a,0x9f,0x27,0xb8,0xce,0x34,0x00,0xf8,0x68,0x92,0x1a,0x00,0xab,0x1f,0xd9,0x00,0x49,0x83,0xfd,0x95,0xc3,0xc7,0x0f,0xf1,0x30,0xe2,0xd3 };
    const uint8_t IV[] = { 0x92,0x52,0x7d,0x1c,0x03,0xbf,0xe9,0xf4,0xe0,0x01,0x26,0xb6,0x4d,0x03,0x2f,0x10 };
    const uint8_t PLAINTEXT[] = { 0x7d,0x57,0x04,0x18,0x24,0xa8,0x95,0xe3,0xa5,0x4b,0x6c,0x5d,0x47,0x24,0xaa,0xbf };
    const uint8_t CIPHERTEXT[] = { 0xca,0x66,0xd9,0x20,0x4e,0x9b,0xf6,0xee,0x94,0xae,0x10,0xe4,0xc3,0xb6,0xee,0xdc };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-92", "[CFB128][MCT][256][ENCRYPT][n92]") {
    const uint8_t KEY[] = { 0xf0,0xed,0xc5,0x9a,0xdb,0x37,0x6c,0x6b,0x02,0xe0,0x6a,0xbd,0x4d,0x9f,0xe5,0xc8,0xca,0xcd,0xc6,0xf9,0x4e,0xd2,0x75,0x13,0x01,0x6d,0xd7,0xeb,0x32,0x86,0x0c,0x0f };
    const uint8_t IV[] = { 0xca,0x66,0xd9,0x20,0x4e,0x9b,0xf6,0xee,0x94,0xae,0x10,0xe4,0xc3,0xb6,0xee,0xdc };
    const uint8_t PLAINTEXT[] = { 0x3d,0x99,0x61,0x0e,0xf5,0x1d,0xf3,0x4c,0xba,0x2e,0x5e,0xbd,0xb5,0xf7,0x77,0xd2 };
    const uint8_t CIPHERTEXT[] = { 0x5a,0x7b,0xc7,0x25,0x41,0x8c,0xf5,0xc2,0x68,0xa6,0xbb,0x1b,0x10,0xb6,0x53,0x41 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-93", "[CFB128][MCT][256][ENCRYPT][n93]") {
    const uint8_t KEY[] = { 0x97,0x9b,0x49,0xf4,0x71,0x83,0x19,0xb0,0x3f,0xaf,0xde,0xf9,0x4a,0x2f,0xd2,0xee,0x90,0xb6,0x01,0xdc,0x0f,0x5e,0x80,0xd1,0x69,0xcb,0x6c,0xf0,0x22,0x30,0x5f,0x4e };
    const uint8_t IV[] = { 0x5a,0x7b,0xc7,0x25,0x41,0x8c,0xf5,0xc2,0x68,0xa6,0xbb,0x1b,0x10,0xb6,0x53,0x41 };
    const uint8_t PLAINTEXT[] = { 0x67,0x76,0x8c,0x6e,0xaa,0xb4,0x75,0xdb,0x3d,0x4f,0xb4,0x44,0x07,0xb0,0x37,0x26 };
    const uint8_t CIPHERTEXT[] = { 0xe0,0xed,0x3f,0xc2,0x4f,0x35,0x9b,0x12,0xb0,0xc9,0x43,0x6d,0x12,0xb6,0x8c,0xf1 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-94", "[CFB128][MCT][256][ENCRYPT][n94]") {
    const uint8_t KEY[] = { 0x1e,0x57,0x92,0x15,0x3c,0x28,0xe6,0x61,0x51,0xae,0x3d,0x43,0x8a,0x4f,0x48,0x43,0x70,0x5b,0x3e,0x1e,0x40,0x6b,0x1b,0xc3,0xd9,0x02,0x2f,0x9d,0x30,0x86,0xd3,0xbf };
    const uint8_t IV[] = { 0xe0,0xed,0x3f,0xc2,0x4f,0x35,0x9b,0x12,0xb0,0xc9,0x43,0x6d,0x12,0xb6,0x8c,0xf1 };
    const uint8_t PLAINTEXT[] = { 0x89,0xcc,0xdb,0xe1,0x4d,0xab,0xff,0xd1,0x6e,0x01,0xe3,0xba,0xc0,0x60,0x9a,0xad };
    const uint8_t CIPHERTEXT[] = { 0x24,0xd2,0x04,0x98,0xc1,0x67,0x52,0x15,0x6d,0x0c,0xd7,0x60,0x5f,0x15,0xe8,0xdd };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-95", "[CFB128][MCT][256][ENCRYPT][n95]") {
    const uint8_t KEY[] = { 0x4c,0x64,0x05,0x4d,0xaf,0x7e,0x94,0xa6,0x14,0xc9,0xa8,0x39,0x23,0x98,0x57,0xba,0x54,0x89,0x3a,0x86,0x81,0x0c,0x49,0xd6,0xb4,0x0e,0xf8,0xfd,0x6f,0x93,0x3b,0x62 };
    const uint8_t IV[] = { 0x24,0xd2,0x04,0x98,0xc1,0x67,0x52,0x15,0x6d,0x0c,0xd7,0x60,0x5f,0x15,0xe8,0xdd };
    const uint8_t PLAINTEXT[] = { 0x52,0x33,0x97,0x58,0x93,0x56,0x72,0xc7,0x45,0x67,0x95,0x7a,0xa9,0xd7,0x1f,0xf9 };
    const uint8_t CIPHERTEXT[] = { 0xeb,0x8a,0xf8,0x2f,0xde,0x4c,0x7c,0x09,0x4e,0x7b,0x73,0x8f,0x41,0x7c,0xe7,0x21 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-96", "[CFB128][MCT][256][ENCRYPT][n96]") {
    const uint8_t KEY[] = { 0xd9,0xfa,0xa4,0x9c,0x0d,0x0a,0xb2,0x47,0x6d,0xe8,0x00,0x33,0x78,0x83,0xac,0x2b,0xbf,0x03,0xc2,0xa9,0x5f,0x40,0x35,0xdf,0xfa,0x75,0x8b,0x72,0x2e,0xef,0xdc,0x43 };
    const uint8_t IV[] = { 0xeb,0x8a,0xf8,0x2f,0xde,0x4c,0x7c,0x09,0x4e,0x7b,0x73,0x8f,0x41,0x7c,0xe7,0x21 };
    const uint8_t PLAINTEXT[] = { 0x95,0x9e,0xa1,0xd1,0xa2,0x74,0x26,0xe1,0x79,0x21,0xa8,0x0a,0x5b,0x1b,0xfb,0x91 };
    const uint8_t CIPHERTEXT[] = { 0x23,0xf5,0xb7,0x92,0xb5,0x51,0x8d,0x35,0x92,0x25,0x1f,0xd0,0x93,0xfc,0x5d,0x0e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-97", "[CFB128][MCT][256][ENCRYPT][n97]") {
    const uint8_t KEY[] = { 0xc6,0xad,0x1c,0x80,0x0a,0xbb,0xb4,0x38,0xe4,0x21,0x8a,0xa3,0x28,0xc8,0x40,0x64,0x9c,0xf6,0x75,0x3b,0xea,0x11,0xb8,0xea,0x68,0x50,0x94,0xa2,0xbd,0x13,0x81,0x4d };
    const uint8_t IV[] = { 0x23,0xf5,0xb7,0x92,0xb5,0x51,0x8d,0x35,0x92,0x25,0x1f,0xd0,0x93,0xfc,0x5d,0x0e };
    const uint8_t PLAINTEXT[] = { 0x1f,0x57,0xb8,0x1c,0x07,0xb1,0x06,0x7f,0x89,0xc9,0x8a,0x90,0x50,0x4b,0xec,0x4f };
    const uint8_t CIPHERTEXT[] = { 0x14,0x32,0x0a,0x3b,0x78,0xa9,0x94,0x51,0xa5,0xce,0xd3,0x53,0xf7,0x43,0x60,0xbb };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-98", "[CFB128][MCT][256][ENCRYPT][n98]") {
    const uint8_t KEY[] = { 0xc0,0x80,0xc3,0xef,0xd6,0x81,0xa1,0x12,0x57,0x69,0xea,0x57,0x37,0x2c,0x5e,0x96,0x88,0xc4,0x7f,0x00,0x92,0xb8,0x2c,0xbb,0xcd,0x9e,0x47,0xf1,0x4a,0x50,0xe1,0xf6 };
    const uint8_t IV[] = { 0x14,0x32,0x0a,0x3b,0x78,0xa9,0x94,0x51,0xa5,0xce,0xd3,0x53,0xf7,0x43,0x60,0xbb };
    const uint8_t PLAINTEXT[] = { 0x06,0x2d,0xdf,0x6f,0xdc,0x3a,0x15,0x2a,0xb3,0x48,0x60,0xf4,0x1f,0xe4,0x1e,0xf2 };
    const uint8_t CIPHERTEXT[] = { 0x29,0xdd,0x3a,0x21,0xd3,0xec,0xfd,0x94,0xea,0xb1,0x46,0x67,0x9d,0x98,0x2c,0x00 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-ENCRYPT-99", "[CFB128][MCT][256][ENCRYPT][n99]") {
    const uint8_t KEY[] = { 0x9c,0x4e,0x42,0x5b,0x4b,0xf4,0x5e,0xb5,0x97,0x1f,0x63,0x91,0x9c,0x80,0x98,0x2e,0xa1,0x19,0x45,0x21,0x41,0x54,0xd1,0x2f,0x27,0x2f,0x01,0x96,0xd7,0xc8,0xcd,0xf6 };
    const uint8_t IV[] = { 0x29,0xdd,0x3a,0x21,0xd3,0xec,0xfd,0x94,0xea,0xb1,0x46,0x67,0x9d,0x98,0x2c,0x00 };
    const uint8_t PLAINTEXT[] = { 0x5c,0xce,0x81,0xb4,0x9d,0x75,0xff,0xa7,0xc0,0x76,0x89,0xc6,0xab,0xac,0xc6,0xb8 };
    const uint8_t CIPHERTEXT[] = { 0xd1,0x42,0xe6,0x3e,0xb1,0x4c,0xf9,0xcf,0xf8,0xa2,0x3d,0xd8,0xf1,0xa8,0x44,0x6e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-0", "[CFB128][MCT][256][DECRYPT][n0]") {
    const uint8_t KEY[] = { 0x37,0x66,0x48,0x42,0xa5,0xf6,0x47,0x79,0xa0,0x6b,0xfb,0x64,0x0a,0xe8,0x8c,0xdb,0x6e,0xa3,0xe7,0x63,0x4b,0xea,0xb5,0x52,0xb0,0x64,0x8d,0x34,0x09,0x9a,0x68,0x6e };
    const uint8_t IV[] = { 0xbb,0x18,0x02,0xf8,0xea,0xc7,0x84,0xff,0x66,0xdb,0xf2,0xfb,0xe6,0x3f,0x57,0x55 };
    const uint8_t PLAINTEXT[] = { 0x3d,0x27,0x3a,0xa4,0x1e,0x65,0x8d,0x8a,0xb5,0xbc,0x68,0x1d,0x43,0xb5,0x95,0xc2 };
    const uint8_t CIPHERTEXT[] = { 0xb2,0x0d,0x55,0x26,0xaa,0x68,0xbf,0xb5,0xd2,0xaf,0xed,0x5d,0x80,0xef,0x8a,0xae };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-1", "[CFB128][MCT][256][DECRYPT][n1]") {
    const uint8_t KEY[] = { 0x01,0xa4,0x4a,0x54,0xf6,0xb4,0x92,0xf1,0x91,0x7b,0x71,0x45,0x11,0x2d,0x75,0x19,0x53,0x84,0xdd,0xc7,0x55,0x8f,0x38,0xd8,0x05,0xd8,0xe5,0x29,0x4a,0x2f,0xfd,0xac };
    const uint8_t IV[] = { 0x3d,0x27,0x3a,0xa4,0x1e,0x65,0x8d,0x8a,0xb5,0xbc,0x68,0x1d,0x43,0xb5,0x95,0xc2 };
    const uint8_t PLAINTEXT[] = { 0xaf,0xcf,0xb1,0x2e,0xea,0xda,0x12,0x6c,0xa3,0x8d,0x4b,0xfa,0xd7,0xef,0x78,0xdd };
    const uint8_t CIPHERTEXT[] = { 0x36,0xc2,0x02,0x16,0x53,0x42,0xd5,0x88,0x31,0x10,0x8a,0x21,0x1b,0xc5,0xf9,0xc2 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-2", "[CFB128][MCT][256][DECRYPT][n2]") {
    const uint8_t KEY[] = { 0x99,0xcd,0xcb,0xa2,0x9e,0x66,0xd8,0x6a,0x02,0x46,0x6b,0x13,0xc4,0x44,0x78,0xc2,0xfc,0x4b,0x6c,0xe9,0xbf,0x55,0x2a,0xb4,0xa6,0x55,0xae,0xd3,0x9d,0xc0,0x85,0x71 };
    const uint8_t IV[] = { 0xaf,0xcf,0xb1,0x2e,0xea,0xda,0x12,0x6c,0xa3,0x8d,0x4b,0xfa,0xd7,0xef,0x78,0xdd };
    const uint8_t PLAINTEXT[] = { 0xe3,0x6a,0xb5,0x98,0xf2,0x9c,0x68,0xc5,0x6f,0x77,0x3f,0x8d,0x7d,0xc2,0x95,0xf5 };
    const uint8_t CIPHERTEXT[] = { 0x98,0x69,0x81,0xf6,0x68,0xd2,0x4a,0x9b,0x93,0x3d,0x1a,0x56,0xd5,0x69,0x0d,0xdb };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-3", "[CFB128][MCT][256][DECRYPT][n3]") {
    const uint8_t KEY[] = { 0xb1,0x44,0x31,0x33,0xb2,0xe6,0x4b,0x63,0xfb,0xc1,0x93,0x42,0x39,0x6a,0x36,0x0e,0x1f,0x21,0xd9,0x71,0x4d,0xc9,0x42,0x71,0xc9,0x22,0x91,0x5e,0xe0,0x02,0x10,0x84 };
    const uint8_t IV[] = { 0xe3,0x6a,0xb5,0x98,0xf2,0x9c,0x68,0xc5,0x6f,0x77,0x3f,0x8d,0x7d,0xc2,0x95,0xf5 };
    const uint8_t PLAINTEXT[] = { 0x77,0x75,0x2e,0xdc,0x03,0xc1,0xde,0x2c,0xbb,0xad,0xbb,0x51,0x35,0xa6,0x73,0x88 };
    const uint8_t CIPHERTEXT[] = { 0x28,0x89,0xfa,0x91,0x2c,0x80,0x93,0x09,0xf9,0x87,0xf8,0x51,0xfd,0x2e,0x4e,0xcc };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-4", "[CFB128][MCT][256][DECRYPT][n4]") {
    const uint8_t KEY[] = { 0x17,0x06,0x0c,0x49,0x95,0xc2,0x5b,0x81,0xb5,0x94,0x12,0x2e,0x48,0x89,0x1d,0x8e,0x68,0x54,0xf7,0xad,0x4e,0x08,0x9c,0x5d,0x72,0x8f,0x2a,0x0f,0xd5,0xa4,0x63,0x0c };
    const uint8_t IV[] = { 0x77,0x75,0x2e,0xdc,0x03,0xc1,0xde,0x2c,0xbb,0xad,0xbb,0x51,0x35,0xa6,0x73,0x88 };
    const uint8_t PLAINTEXT[] = { 0x84,0x41,0x0d,0x07,0x68,0xe4,0xa2,0x2d,0x77,0x9f,0xb2,0x56,0x34,0xbe,0x1b,0x51 };
    const uint8_t CIPHERTEXT[] = { 0xa6,0x42,0x3d,0x7a,0x27,0x24,0x10,0xe2,0x4e,0x55,0x81,0x6c,0x71,0xe3,0x2b,0x80 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-5", "[CFB128][MCT][256][DECRYPT][n5]") {
    const uint8_t KEY[] = { 0x1c,0xc9,0xa4,0x87,0x7c,0x41,0xb9,0x78,0xce,0xd7,0xcc,0xa3,0x45,0xc4,0xed,0x8a,0xec,0x15,0xfa,0xaa,0x26,0xec,0x3e,0x70,0x05,0x10,0x98,0x59,0xe1,0x1a,0x78,0x5d };
    const uint8_t IV[] = { 0x84,0x41,0x0d,0x07,0x68,0xe4,0xa2,0x2d,0x77,0x9f,0xb2,0x56,0x34,0xbe,0x1b,0x51 };
    const uint8_t PLAINTEXT[] = { 0xaa,0x1c,0xe1,0x8b,0x59,0xe0,0xc7,0x63,0xd2,0xca,0xf9,0x2d,0xc0,0x8b,0x0a,0x9f };
    const uint8_t CIPHERTEXT[] = { 0x0b,0xcf,0xa8,0xce,0xe9,0x83,0xe2,0xf9,0x7b,0x43,0xde,0x8d,0x0d,0x4d,0xf0,0x04 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-6", "[CFB128][MCT][256][DECRYPT][n6]") {
    const uint8_t KEY[] = { 0x17,0x22,0x0b,0x78,0x91,0x1e,0x46,0x75,0x2c,0xb5,0x23,0x93,0x33,0x09,0xe7,0xa5,0x46,0x09,0x1b,0x21,0x7f,0x0c,0xf9,0x13,0xd7,0xda,0x61,0x74,0x21,0x91,0x72,0xc2 };
    const uint8_t IV[] = { 0xaa,0x1c,0xe1,0x8b,0x59,0xe0,0xc7,0x63,0xd2,0xca,0xf9,0x2d,0xc0,0x8b,0x0a,0x9f };
    const uint8_t PLAINTEXT[] = { 0x37,0xf4,0xb8,0xb3,0x0f,0x50,0xa0,0xcb,0x95,0xd8,0x8c,0xe8,0x3f,0x5d,0xdd,0x80 };
    const uint8_t CIPHERTEXT[] = { 0x0b,0xeb,0xaf,0xff,0xed,0x5f,0xff,0x0d,0xe2,0x62,0xef,0x30,0x76,0xcd,0x0a,0x2f };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-7", "[CFB128][MCT][256][DECRYPT][n7]") {
    const uint8_t KEY[] = { 0x2f,0x9a,0x47,0x70,0x94,0xcd,0x29,0x68,0x5c,0xc2,0x0a,0x87,0xb6,0xe7,0x66,0xf9,0x71,0xfd,0xa3,0x92,0x70,0x5c,0x59,0xd8,0x42,0x02,0xed,0x9c,0x1e,0xcc,0xaf,0x42 };
    const uint8_t IV[] = { 0x37,0xf4,0xb8,0xb3,0x0f,0x50,0xa0,0xcb,0x95,0xd8,0x8c,0xe8,0x3f,0x5d,0xdd,0x80 };
    const uint8_t PLAINTEXT[] = { 0x55,0xe1,0x33,0xb2,0x12,0x69,0x24,0xb8,0x07,0xb8,0xc0,0x18,0xb1,0xc8,0x32,0x12 };
    const uint8_t CIPHERTEXT[] = { 0x38,0xb8,0x4c,0x08,0x05,0xd3,0x6f,0x1d,0x70,0x77,0x29,0x14,0x85,0xee,0x81,0x5c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-8", "[CFB128][MCT][256][DECRYPT][n8]") {
    const uint8_t KEY[] = { 0x78,0x92,0x8d,0xef,0x70,0xbb,0xfe,0x11,0x41,0x05,0xb9,0xea,0xf1,0x2f,0x2a,0x88,0x24,0x1c,0x90,0x20,0x62,0x35,0x7d,0x60,0x45,0xba,0x2d,0x84,0xaf,0x04,0x9d,0x50 };
    const uint8_t IV[] = { 0x55,0xe1,0x33,0xb2,0x12,0x69,0x24,0xb8,0x07,0xb8,0xc0,0x18,0xb1,0xc8,0x32,0x12 };
    const uint8_t PLAINTEXT[] = { 0x47,0x11,0xce,0x2f,0x8c,0x2d,0x74,0x23,0xb5,0x02,0xde,0xea,0x08,0xef,0xc4,0xcf };
    const uint8_t CIPHERTEXT[] = { 0x57,0x08,0xca,0x9f,0xe4,0x76,0xd7,0x79,0x1d,0xc7,0xb3,0x6d,0x47,0xc8,0x4c,0x71 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-9", "[CFB128][MCT][256][DECRYPT][n9]") {
    const uint8_t KEY[] = { 0x47,0x8c,0x01,0x59,0xce,0xe9,0xbd,0x41,0x2c,0x76,0x4d,0x7a,0xd8,0x1b,0x46,0x24,0x63,0x0d,0x5e,0x0f,0xee,0x18,0x09,0x43,0xf0,0xb8,0xf3,0x6e,0xa7,0xeb,0x59,0x9f };
    const uint8_t IV[] = { 0x47,0x11,0xce,0x2f,0x8c,0x2d,0x74,0x23,0xb5,0x02,0xde,0xea,0x08,0xef,0xc4,0xcf };
    const uint8_t PLAINTEXT[] = { 0x2c,0xa0,0x65,0xa0,0x9f,0x96,0x29,0xba,0xcf,0x81,0x4c,0x90,0x03,0xdd,0xd3,0xd8 };
    const uint8_t CIPHERTEXT[] = { 0x3f,0x1e,0x8c,0xb6,0xbe,0x52,0x43,0x50,0x6d,0x73,0xf4,0x90,0x29,0x34,0x6c,0xac };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-10", "[CFB128][MCT][256][DECRYPT][n10]") {
    const uint8_t KEY[] = { 0x55,0x3e,0x51,0x6c,0xfc,0x57,0xef,0x55,0xe9,0xea,0xad,0x2f,0xa3,0x39,0x98,0x7e,0x4f,0xad,0x3b,0xaf,0x71,0x8e,0x20,0xf9,0x3f,0x39,0xbf,0xfe,0xa4,0x36,0x8a,0x47 };
    const uint8_t IV[] = { 0x2c,0xa0,0x65,0xa0,0x9f,0x96,0x29,0xba,0xcf,0x81,0x4c,0x90,0x03,0xdd,0xd3,0xd8 };
    const uint8_t PLAINTEXT[] = { 0xf8,0x2b,0xf8,0x66,0x2d,0x9e,0xc7,0x56,0xca,0xd6,0x01,0x7b,0x42,0x0c,0x20,0x93 };
    const uint8_t CIPHERTEXT[] = { 0x12,0xb2,0x50,0x35,0x32,0xbe,0x52,0x14,0xc5,0x9c,0xe0,0x55,0x7b,0x22,0xde,0x5a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-11", "[CFB128][MCT][256][DECRYPT][n11]") {
    const uint8_t KEY[] = { 0x4f,0x7f,0x74,0xb8,0x7e,0x81,0x93,0x88,0x2d,0xc6,0xb5,0x87,0xa6,0x2d,0xd5,0x29,0xb7,0x86,0xc3,0xc9,0x5c,0x10,0xe7,0xaf,0xf5,0xef,0xbe,0x85,0xe6,0x3a,0xaa,0xd4 };
    const uint8_t IV[] = { 0xf8,0x2b,0xf8,0x66,0x2d,0x9e,0xc7,0x56,0xca,0xd6,0x01,0x7b,0x42,0x0c,0x20,0x93 };
    const uint8_t PLAINTEXT[] = { 0x20,0x16,0x25,0x05,0xa1,0x21,0xe1,0x88,0xd7,0x85,0xaf,0x9f,0x9c,0x05,0x0e,0x1f };
    const uint8_t CIPHERTEXT[] = { 0x1a,0x41,0x25,0xd4,0x82,0xd6,0x7c,0xdd,0xc4,0x2c,0x18,0xa8,0x05,0x14,0x4d,0x57 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-12", "[CFB128][MCT][256][DECRYPT][n12]") {
    const uint8_t KEY[] = { 0x42,0xa3,0x3c,0x5d,0xf0,0x43,0x47,0xcb,0x2e,0x81,0x42,0x18,0x74,0x3c,0x83,0x9f,0x97,0x90,0xe6,0xcc,0xfd,0x31,0x06,0x27,0x22,0x6a,0x11,0x1a,0x7a,0x3f,0xa4,0xcb };
    const uint8_t IV[] = { 0x20,0x16,0x25,0x05,0xa1,0x21,0xe1,0x88,0xd7,0x85,0xaf,0x9f,0x9c,0x05,0x0e,0x1f };
    const uint8_t PLAINTEXT[] = { 0x10,0x5d,0xd5,0x75,0x42,0x5d,0x26,0x6e,0xff,0xb6,0x2c,0x95,0xaa,0x0e,0x59,0xca };
    const uint8_t CIPHERTEXT[] = { 0x0d,0xdc,0x48,0xe5,0x8e,0xc2,0xd4,0x43,0x03,0x47,0xf7,0x9f,0xd2,0x11,0x56,0xb6 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-13", "[CFB128][MCT][256][DECRYPT][n13]") {
    const uint8_t KEY[] = { 0xd3,0xfe,0xc8,0x90,0xb3,0x1f,0x11,0x9a,0xee,0x7d,0x8b,0xe0,0x2f,0x99,0x5e,0x88,0x87,0xcd,0x33,0xb9,0xbf,0x6c,0x20,0x49,0xdd,0xdc,0x3d,0x8f,0xd0,0x31,0xfd,0x01 };
    const uint8_t IV[] = { 0x10,0x5d,0xd5,0x75,0x42,0x5d,0x26,0x6e,0xff,0xb6,0x2c,0x95,0xaa,0x0e,0x59,0xca };
    const uint8_t PLAINTEXT[] = { 0x22,0x1c,0x54,0x61,0x48,0x66,0x9c,0x1e,0x05,0x34,0x41,0x42,0xae,0xee,0x2b,0x36 };
    const uint8_t CIPHERTEXT[] = { 0x91,0x5d,0xf4,0xcd,0x43,0x5c,0x56,0x51,0xc0,0xfc,0xc9,0xf8,0x5b,0xa5,0xdd,0x17 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-14", "[CFB128][MCT][256][DECRYPT][n14]") {
    const uint8_t KEY[] = { 0xcb,0xd8,0x97,0xf1,0xbf,0xf4,0x5c,0xc7,0x80,0x15,0x02,0xc6,0x67,0x83,0x93,0x3f,0xa5,0xd1,0x67,0xd8,0xf7,0x0a,0xbc,0x57,0xd8,0xe8,0x7c,0xcd,0x7e,0xdf,0xd6,0x37 };
    const uint8_t IV[] = { 0x22,0x1c,0x54,0x61,0x48,0x66,0x9c,0x1e,0x05,0x34,0x41,0x42,0xae,0xee,0x2b,0x36 };
    const uint8_t PLAINTEXT[] = { 0xbf,0xac,0x53,0xbf,0xa3,0x33,0x8f,0xad,0xe5,0xda,0xdc,0xe1,0x81,0x9c,0x92,0x2d };
    const uint8_t CIPHERTEXT[] = { 0x18,0x26,0x5f,0x61,0x0c,0xeb,0x4d,0x5d,0x6e,0x68,0x89,0x26,0x48,0x1a,0xcd,0xb7 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-15", "[CFB128][MCT][256][DECRYPT][n15]") {
    const uint8_t KEY[] = { 0x9f,0xe7,0x6a,0x60,0x59,0x86,0x90,0xcc,0x9c,0xbd,0x30,0x5a,0x61,0x62,0x2d,0xcf,0x1a,0x7d,0x34,0x67,0x54,0x39,0x33,0xfa,0x3d,0x32,0xa0,0x2c,0xff,0x43,0x44,0x1a };
    const uint8_t IV[] = { 0xbf,0xac,0x53,0xbf,0xa3,0x33,0x8f,0xad,0xe5,0xda,0xdc,0xe1,0x81,0x9c,0x92,0x2d };
    const uint8_t PLAINTEXT[] = { 0x56,0x9d,0xb0,0xde,0x47,0x8d,0x1e,0x37,0x51,0x15,0x90,0x96,0x39,0xeb,0xdd,0x46 };
    const uint8_t CIPHERTEXT[] = { 0x54,0x3f,0xfd,0x91,0xe6,0x72,0xcc,0x0b,0x1c,0xa8,0x32,0x9c,0x06,0xe1,0xbe,0xf0 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-16", "[CFB128][MCT][256][DECRYPT][n16]") {
    const uint8_t KEY[] = { 0xd5,0xc6,0x9e,0x57,0x4f,0xb7,0x61,0x7f,0x9e,0x68,0xd4,0x9a,0xac,0xc6,0xb5,0xd2,0x4c,0xe0,0x84,0xb9,0x13,0xb4,0x2d,0xcd,0x6c,0x27,0x30,0xba,0xc6,0xa8,0x99,0x5c };
    const uint8_t IV[] = { 0x56,0x9d,0xb0,0xde,0x47,0x8d,0x1e,0x37,0x51,0x15,0x90,0x96,0x39,0xeb,0xdd,0x46 };
    const uint8_t PLAINTEXT[] = { 0xfe,0x77,0x0c,0x83,0x83,0x6c,0xc8,0x18,0xb3,0x89,0x22,0x2b,0x28,0x40,0xb6,0x25 };
    const uint8_t CIPHERTEXT[] = { 0x4a,0x21,0xf4,0x37,0x16,0x31,0xf1,0xb3,0x02,0xd5,0xe4,0xc0,0xcd,0xa4,0x98,0x1d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-17", "[CFB128][MCT][256][DECRYPT][n17]") {
    const uint8_t KEY[] = { 0x21,0xe4,0x7b,0xbe,0xf8,0xf9,0x63,0x9f,0xb9,0x91,0x24,0x9b,0x32,0xf2,0xf8,0x58,0xb2,0x97,0x88,0x3a,0x90,0xd8,0xe5,0xd5,0xdf,0xae,0x12,0x91,0xee,0xe8,0x2f,0x79 };
    const uint8_t IV[] = { 0xfe,0x77,0x0c,0x83,0x83,0x6c,0xc8,0x18,0xb3,0x89,0x22,0x2b,0x28,0x40,0xb6,0x25 };
    const uint8_t PLAINTEXT[] = { 0x4c,0xc7,0x88,0xc0,0x82,0x90,0xb2,0x3c,0x33,0xb6,0x98,0x1d,0x73,0xff,0x7d,0x8d };
    const uint8_t CIPHERTEXT[] = { 0xf4,0x22,0xe5,0xe9,0xb7,0x4e,0x02,0xe0,0x27,0xf9,0xf0,0x01,0x9e,0x34,0x4d,0x8a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-18", "[CFB128][MCT][256][DECRYPT][n18]") {
    const uint8_t KEY[] = { 0xd3,0xdf,0xe1,0x7b,0xeb,0xd4,0xc8,0x3e,0xb1,0xe4,0x61,0xbb,0xbc,0x9f,0x82,0x88,0xfe,0x50,0x00,0xfa,0x12,0x48,0x57,0xe9,0xec,0x18,0x8a,0x8c,0x9d,0x17,0x52,0xf4 };
    const uint8_t IV[] = { 0x4c,0xc7,0x88,0xc0,0x82,0x90,0xb2,0x3c,0x33,0xb6,0x98,0x1d,0x73,0xff,0x7d,0x8d };
    const uint8_t PLAINTEXT[] = { 0x02,0x3e,0x47,0x49,0x16,0xdd,0x7b,0x68,0x91,0xa4,0xce,0x7d,0x5b,0xb4,0x97,0xfd };
    const uint8_t CIPHERTEXT[] = { 0xf2,0x3b,0x9a,0xc5,0x13,0x2d,0xab,0xa1,0x08,0x75,0x45,0x20,0x8e,0x6d,0x7a,0xd0 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-19", "[CFB128][MCT][256][DECRYPT][n19]") {
    const uint8_t KEY[] = { 0xa3,0x56,0xdc,0xea,0xe9,0xb6,0x98,0x55,0x31,0x5d,0xc5,0xf4,0x86,0x5f,0xd2,0xd9,0xfc,0x6e,0x47,0xb3,0x04,0x95,0x2c,0x81,0x7d,0xbc,0x44,0xf1,0xc6,0xa3,0xc5,0x09 };
    const uint8_t IV[] = { 0x02,0x3e,0x47,0x49,0x16,0xdd,0x7b,0x68,0x91,0xa4,0xce,0x7d,0x5b,0xb4,0x97,0xfd };
    const uint8_t PLAINTEXT[] = { 0x43,0xc1,0x75,0x9e,0x60,0x80,0x3b,0x48,0xe1,0x52,0x70,0x28,0x1d,0x57,0xa4,0x3e };
    const uint8_t CIPHERTEXT[] = { 0x70,0x89,0x3d,0x91,0x02,0x62,0x50,0x6b,0x80,0xb9,0xa4,0x4f,0x3a,0xc0,0x50,0x51 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-20", "[CFB128][MCT][256][DECRYPT][n20]") {
    const uint8_t KEY[] = { 0x53,0x6c,0xc2,0xd7,0x78,0x5f,0x7d,0xdb,0xb3,0x4f,0x92,0x45,0x8d,0xb1,0xd3,0xc2,0xbf,0xaf,0x32,0x2d,0x64,0x15,0x17,0xc9,0x9c,0xee,0x34,0xd9,0xdb,0xf4,0x61,0x37 };
    const uint8_t IV[] = { 0x43,0xc1,0x75,0x9e,0x60,0x80,0x3b,0x48,0xe1,0x52,0x70,0x28,0x1d,0x57,0xa4,0x3e };
    const uint8_t PLAINTEXT[] = { 0x04,0x77,0x30,0xf0,0x17,0xde,0xf9,0xff,0x51,0xa1,0xed,0xef,0x93,0x5c,0xf2,0x33 };
    const uint8_t CIPHERTEXT[] = { 0xf0,0x3a,0x1e,0x3d,0x91,0xe9,0xe5,0x8e,0x82,0x12,0x57,0xb1,0x0b,0xee,0x01,0x1b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-21", "[CFB128][MCT][256][DECRYPT][n21]") {
    const uint8_t KEY[] = { 0x40,0xeb,0x2e,0x80,0x95,0xe1,0x9c,0x99,0x35,0x3a,0x82,0x94,0x8b,0x05,0xe1,0x82,0xbb,0xd8,0x02,0xdd,0x73,0xcb,0xee,0x36,0xcd,0x4f,0xd9,0x36,0x48,0xa8,0x93,0x04 };
    const uint8_t IV[] = { 0x04,0x77,0x30,0xf0,0x17,0xde,0xf9,0xff,0x51,0xa1,0xed,0xef,0x93,0x5c,0xf2,0x33 };
    const uint8_t PLAINTEXT[] = { 0xd5,0xa7,0xf3,0x25,0x9b,0x5b,0x4b,0x57,0x20,0xab,0x47,0x25,0x91,0xca,0xb5,0x8a };
    const uint8_t CIPHERTEXT[] = { 0x13,0x87,0xec,0x57,0xed,0xbe,0xe1,0x42,0x86,0x75,0x10,0xd1,0x06,0xb4,0x32,0x40 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-22", "[CFB128][MCT][256][DECRYPT][n22]") {
    const uint8_t KEY[] = { 0x98,0x1b,0x93,0x05,0x14,0x17,0x4c,0x51,0x83,0x80,0xff,0x3b,0x24,0xb8,0x49,0x2b,0x6e,0x7f,0xf1,0xf8,0xe8,0x90,0xa5,0x61,0xed,0xe4,0x9e,0x13,0xd9,0x62,0x26,0x8e };
    const uint8_t IV[] = { 0xd5,0xa7,0xf3,0x25,0x9b,0x5b,0x4b,0x57,0x20,0xab,0x47,0x25,0x91,0xca,0xb5,0x8a };
    const uint8_t PLAINTEXT[] = { 0xc6,0x58,0xd5,0x32,0xd6,0x5b,0xcc,0x81,0x20,0x3d,0x56,0x18,0xff,0xee,0x8f,0xf1 };
    const uint8_t CIPHERTEXT[] = { 0xd8,0xf0,0xbd,0x85,0x81,0xf6,0xd0,0xc8,0xb6,0xba,0x7d,0xaf,0xaf,0xbd,0xa8,0xa9 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-23", "[CFB128][MCT][256][DECRYPT][n23]") {
    const uint8_t KEY[] = { 0xa8,0x83,0x20,0x02,0x5c,0x8f,0xac,0x9f,0x1e,0x42,0xe4,0x95,0x28,0x65,0x14,0xda,0xa8,0x27,0x24,0xca,0x3e,0xcb,0x69,0xe0,0xcd,0xd9,0xc8,0x0b,0x26,0x8c,0xa9,0x7f };
    const uint8_t IV[] = { 0xc6,0x58,0xd5,0x32,0xd6,0x5b,0xcc,0x81,0x20,0x3d,0x56,0x18,0xff,0xee,0x8f,0xf1 };
    const uint8_t PLAINTEXT[] = { 0xf3,0x86,0xe6,0x6c,0x20,0xcd,0xd2,0x61,0xef,0x95,0x61,0x38,0x72,0x02,0xc6,0x03 };
    const uint8_t CIPHERTEXT[] = { 0x30,0x98,0xb3,0x07,0x48,0x98,0xe0,0xce,0x9d,0xc2,0x1b,0xae,0x0c,0xdd,0x5d,0xf1 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-24", "[CFB128][MCT][256][DECRYPT][n24]") {
    const uint8_t KEY[] = { 0x6e,0x24,0xa8,0xc8,0x85,0x5a,0x47,0x67,0x17,0xcf,0x5b,0x69,0x54,0xc5,0xb4,0x24,0x5b,0xa1,0xc2,0xa6,0x1e,0x06,0xbb,0x81,0x22,0x4c,0xa9,0x33,0x54,0x8e,0x6f,0x7c };
    const uint8_t IV[] = { 0xf3,0x86,0xe6,0x6c,0x20,0xcd,0xd2,0x61,0xef,0x95,0x61,0x38,0x72,0x02,0xc6,0x03 };
    const uint8_t PLAINTEXT[] = { 0x5d,0x9c,0xc1,0x49,0x47,0xdc,0x85,0x48,0x11,0x1a,0xa3,0x36,0x8a,0xf1,0xc9,0xb6 };
    const uint8_t CIPHERTEXT[] = { 0xc6,0xa7,0x88,0xca,0xd9,0xd5,0xeb,0xf8,0x09,0x8d,0xbf,0xfc,0x7c,0xa0,0xa0,0xfe };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-25", "[CFB128][MCT][256][DECRYPT][n25]") {
    const uint8_t KEY[] = { 0x98,0x32,0x50,0x5d,0x99,0xbc,0x33,0xbd,0x35,0xff,0x66,0x60,0x12,0x6d,0x35,0xeb,0x06,0x3d,0x03,0xef,0x59,0xda,0x3e,0xc9,0x33,0x56,0x0a,0x05,0xde,0x7f,0xa6,0xca };
    const uint8_t IV[] = { 0x5d,0x9c,0xc1,0x49,0x47,0xdc,0x85,0x48,0x11,0x1a,0xa3,0x36,0x8a,0xf1,0xc9,0xb6 };
    const uint8_t PLAINTEXT[] = { 0xa5,0x28,0x3f,0x6e,0xd9,0x12,0x69,0x2e,0xef,0x35,0x92,0x98,0xef,0xa6,0xba,0x2d };
    const uint8_t CIPHERTEXT[] = { 0xf6,0x16,0xf8,0x95,0x1c,0xe6,0x74,0xda,0x22,0x30,0x3d,0x09,0x46,0xa8,0x81,0xcf };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-26", "[CFB128][MCT][256][DECRYPT][n26]") {
    const uint8_t KEY[] = { 0x69,0xbc,0xab,0xdf,0xe3,0xdd,0x84,0xd3,0x49,0xdb,0xb9,0x81,0xc3,0x1f,0x74,0xb2,0xa3,0x15,0x3c,0x81,0x80,0xc8,0x57,0xe7,0xdc,0x63,0x98,0x9d,0x31,0xd9,0x1c,0xe7 };
    const uint8_t IV[] = { 0xa5,0x28,0x3f,0x6e,0xd9,0x12,0x69,0x2e,0xef,0x35,0x92,0x98,0xef,0xa6,0xba,0x2d };
    const uint8_t PLAINTEXT[] = { 0x04,0x36,0x01,0xdf,0xe0,0xe5,0x1b,0xdc,0x55,0xcd,0xe0,0xe9,0xb5,0x2f,0x7d,0x2f };
    const uint8_t CIPHERTEXT[] = { 0xf1,0x8e,0xfb,0x82,0x7a,0x61,0xb7,0x6e,0x7c,0x24,0xdf,0xe1,0xd1,0x72,0x41,0x59 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-27", "[CFB128][MCT][256][DECRYPT][n27]") {
    const uint8_t KEY[] = { 0xac,0xba,0x63,0xc3,0x73,0x9d,0xde,0x02,0x2d,0x56,0x6b,0xf1,0x0f,0xe6,0xde,0xec,0xa7,0x23,0x3d,0x5e,0x60,0x2d,0x4c,0x3b,0x89,0xae,0x78,0x74,0x84,0xf6,0x61,0xc8 };
    const uint8_t IV[] = { 0x04,0x36,0x01,0xdf,0xe0,0xe5,0x1b,0xdc,0x55,0xcd,0xe0,0xe9,0xb5,0x2f,0x7d,0x2f };
    const uint8_t PLAINTEXT[] = { 0xbf,0x86,0x75,0x55,0x1c,0xc1,0xcd,0x51,0xb7,0x99,0x16,0x3d,0x5f,0x79,0x77,0x00 };
    const uint8_t CIPHERTEXT[] = { 0xc5,0x06,0xc8,0x1c,0x90,0x40,0x5a,0xd1,0x64,0x8d,0xd2,0x70,0xcc,0xf9,0xaa,0x5e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-28", "[CFB128][MCT][256][DECRYPT][n28]") {
    const uint8_t KEY[] = { 0xdd,0x88,0x2c,0x64,0x4c,0x81,0x71,0xcb,0xb1,0x11,0xc1,0x34,0x09,0x5f,0xad,0x63,0x18,0xa5,0x48,0x0b,0x7c,0xec,0x81,0x6a,0x3e,0x37,0x6e,0x49,0xdb,0x8f,0x16,0xc8 };
    const uint8_t IV[] = { 0xbf,0x86,0x75,0x55,0x1c,0xc1,0xcd,0x51,0xb7,0x99,0x16,0x3d,0x5f,0x79,0x77,0x00 };
    const uint8_t PLAINTEXT[] = { 0xba,0x7d,0xe7,0xc5,0xbb,0x68,0x80,0x9c,0x2e,0x1a,0xf1,0xaf,0x10,0x67,0x61,0xb0 };
    const uint8_t CIPHERTEXT[] = { 0x71,0x32,0x4f,0xa7,0x3f,0x1c,0xaf,0xc9,0x9c,0x47,0xaa,0xc5,0x06,0xb9,0x73,0x8f };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-29", "[CFB128][MCT][256][DECRYPT][n29]") {
    const uint8_t KEY[] = { 0xed,0xec,0xd5,0x10,0xe4,0xcd,0x39,0x3f,0x61,0x0e,0x21,0xed,0x8c,0xae,0xd2,0x6b,0xa2,0xd8,0xaf,0xce,0xc7,0x84,0x01,0xf6,0x10,0x2d,0x9f,0xe6,0xcb,0xe8,0x77,0x78 };
    const uint8_t IV[] = { 0xba,0x7d,0xe7,0xc5,0xbb,0x68,0x80,0x9c,0x2e,0x1a,0xf1,0xaf,0x10,0x67,0x61,0xb0 };
    const uint8_t PLAINTEXT[] = { 0xe9,0x95,0x02,0x84,0x3d,0x52,0x59,0x85,0x1e,0xaa,0x2d,0x21,0x07,0xfc,0x06,0x20 };
    const uint8_t CIPHERTEXT[] = { 0x30,0x64,0xf9,0x74,0xa8,0x4c,0x48,0xf4,0xd0,0x1f,0xe0,0xd9,0x85,0xf1,0x7f,0x08 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-30", "[CFB128][MCT][256][DECRYPT][n30]") {
    const uint8_t KEY[] = { 0xc9,0x94,0x92,0x3f,0xc2,0x10,0xf0,0xa9,0x09,0x08,0x79,0x47,0xfe,0x24,0x89,0x44,0x4b,0x4d,0xad,0x4a,0xfa,0xd6,0x58,0x73,0x0e,0x87,0xb2,0xc7,0xcc,0x14,0x71,0x58 };
    const uint8_t IV[] = { 0xe9,0x95,0x02,0x84,0x3d,0x52,0x59,0x85,0x1e,0xaa,0x2d,0x21,0x07,0xfc,0x06,0x20 };
    const uint8_t PLAINTEXT[] = { 0x66,0x21,0xfa,0x59,0x1c,0x75,0x78,0x4a,0x1f,0xbc,0x79,0xb6,0xc6,0xcb,0x83,0x9b };
    const uint8_t CIPHERTEXT[] = { 0x24,0x78,0x47,0x2f,0x26,0xdd,0xc9,0x96,0x68,0x06,0x58,0xaa,0x72,0x8a,0x5b,0x2f };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-31", "[CFB128][MCT][256][DECRYPT][n31]") {
    const uint8_t KEY[] = { 0x6e,0xde,0xdf,0x36,0xca,0x95,0xfd,0xe6,0x02,0x39,0xaf,0x03,0xfd,0xad,0xb5,0x96,0x2d,0x6c,0x57,0x13,0xe6,0xa3,0x20,0x39,0x11,0x3b,0xcb,0x71,0x0a,0xdf,0xf2,0xc3 };
    const uint8_t IV[] = { 0x66,0x21,0xfa,0x59,0x1c,0x75,0x78,0x4a,0x1f,0xbc,0x79,0xb6,0xc6,0xcb,0x83,0x9b };
    const uint8_t PLAINTEXT[] = { 0x40,0xeb,0xd2,0x49,0x97,0x53,0x27,0x04,0xd8,0x4e,0x3d,0x10,0xac,0x92,0xed,0x6c };
    const uint8_t CIPHERTEXT[] = { 0xa7,0x4a,0x4d,0x09,0x08,0x85,0x0d,0x4f,0x0b,0x31,0xd6,0x44,0x03,0x89,0x3c,0xd2 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-32", "[CFB128][MCT][256][DECRYPT][n32]") {
    const uint8_t KEY[] = { 0x0e,0x72,0xa9,0x27,0xf5,0x85,0x57,0xf1,0xde,0xca,0xd5,0xbf,0xee,0x97,0x47,0x35,0x6d,0x87,0x85,0x5a,0x71,0xf0,0x07,0x3d,0xc9,0x75,0xf6,0x61,0xa6,0x4d,0x1f,0xaf };
    const uint8_t IV[] = { 0x40,0xeb,0xd2,0x49,0x97,0x53,0x27,0x04,0xd8,0x4e,0x3d,0x10,0xac,0x92,0xed,0x6c };
    const uint8_t PLAINTEXT[] = { 0x3e,0xf6,0xee,0xf1,0xd1,0x08,0xc8,0x46,0xfc,0xa0,0xad,0x19,0x9c,0x27,0xf0,0x31 };
    const uint8_t CIPHERTEXT[] = { 0x60,0xac,0x76,0x11,0x3f,0x10,0xaa,0x17,0xdc,0xf3,0x7a,0xbc,0x13,0x3a,0xf2,0xa3 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-33", "[CFB128][MCT][256][DECRYPT][n33]") {
    const uint8_t KEY[] = { 0x3d,0x5a,0xd1,0xa3,0xa9,0xa0,0x30,0xcf,0x15,0xcb,0xf9,0x96,0x74,0xe0,0x8b,0xf9,0x53,0x71,0x6b,0xab,0xa0,0xf8,0xcf,0x7b,0x35,0xd5,0x5b,0x78,0x3a,0x6a,0xef,0x9e };
    const uint8_t IV[] = { 0x3e,0xf6,0xee,0xf1,0xd1,0x08,0xc8,0x46,0xfc,0xa0,0xad,0x19,0x9c,0x27,0xf0,0x31 };
    const uint8_t PLAINTEXT[] = { 0x5f,0x9d,0xf5,0x48,0x02,0x16,0xc1,0x5e,0x7a,0xa6,0xd6,0xc0,0x81,0x86,0xfc,0x91 };
    const uint8_t CIPHERTEXT[] = { 0x33,0x28,0x78,0x84,0x5c,0x25,0x67,0x3e,0xcb,0x01,0x2c,0x29,0x9a,0x77,0xcc,0xcc };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-34", "[CFB128][MCT][256][DECRYPT][n34]") {
    const uint8_t KEY[] = { 0xb5,0x0d,0xe6,0x74,0x25,0xfb,0xcd,0x68,0xa9,0x7b,0xaa,0x29,0x46,0x98,0xe2,0x4c,0x0c,0xec,0x9e,0xe3,0xa2,0xee,0x0e,0x25,0x4f,0x73,0x8d,0xb8,0xbb,0xec,0x13,0x0f };
    const uint8_t IV[] = { 0x5f,0x9d,0xf5,0x48,0x02,0x16,0xc1,0x5e,0x7a,0xa6,0xd6,0xc0,0x81,0x86,0xfc,0x91 };
    const uint8_t PLAINTEXT[] = { 0x5d,0xfb,0x37,0xd6,0xda,0x6f,0x19,0xe9,0xf4,0x24,0x9b,0xcd,0x75,0x90,0x11,0x18 };
    const uint8_t CIPHERTEXT[] = { 0x88,0x57,0x37,0xd7,0x8c,0x5b,0xfd,0xa7,0xbc,0xb0,0x53,0xbf,0x32,0x78,0x69,0xb5 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-35", "[CFB128][MCT][256][DECRYPT][n35]") {
    const uint8_t KEY[] = { 0x8f,0x28,0xff,0x07,0x17,0xcd,0x46,0xbe,0x67,0x8e,0xf9,0x6d,0x6e,0xf6,0x9d,0xff,0x51,0x17,0xa9,0x35,0x78,0x81,0x17,0xcc,0xbb,0x57,0x16,0x75,0xce,0x7c,0x02,0x17 };
    const uint8_t IV[] = { 0x5d,0xfb,0x37,0xd6,0xda,0x6f,0x19,0xe9,0xf4,0x24,0x9b,0xcd,0x75,0x90,0x11,0x18 };
    const uint8_t PLAINTEXT[] = { 0x90,0x44,0x2f,0xcd,0xe0,0x9e,0x3f,0x13,0x23,0x99,0xd7,0x39,0x1b,0xc4,0x72,0xd9 };
    const uint8_t CIPHERTEXT[] = { 0x3a,0x25,0x19,0x73,0x32,0x36,0x8b,0xd6,0xce,0xf5,0x53,0x44,0x28,0x6e,0x7f,0xb3 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-36", "[CFB128][MCT][256][DECRYPT][n36]") {
    const uint8_t KEY[] = { 0x64,0x0d,0x00,0xe2,0x58,0x92,0xd3,0x03,0x24,0x50,0xc7,0xcc,0x46,0x85,0xab,0x06,0xc1,0x53,0x86,0xf8,0x98,0x1f,0x28,0xdf,0x98,0xce,0xc1,0x4c,0xd5,0xb8,0x70,0xce };
    const uint8_t IV[] = { 0x90,0x44,0x2f,0xcd,0xe0,0x9e,0x3f,0x13,0x23,0x99,0xd7,0x39,0x1b,0xc4,0x72,0xd9 };
    const uint8_t PLAINTEXT[] = { 0xb8,0x4a,0x6f,0x17,0xc7,0x64,0xc7,0x53,0xea,0x09,0x65,0xeb,0x7b,0x2c,0x49,0x9d };
    const uint8_t CIPHERTEXT[] = { 0xeb,0x25,0xff,0xe5,0x4f,0x5f,0x95,0xbd,0x43,0xde,0x3e,0xa1,0x28,0x73,0x36,0xf9 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-37", "[CFB128][MCT][256][DECRYPT][n37]") {
    const uint8_t KEY[] = { 0x5d,0xf2,0xc1,0x27,0x10,0xd5,0xd4,0xf4,0x08,0x3f,0xa9,0x67,0xac,0xfb,0x48,0x5b,0x79,0x19,0xe9,0xef,0x5f,0x7b,0xef,0x8c,0x72,0xc7,0xa4,0xa7,0xae,0x94,0x39,0x53 };
    const uint8_t IV[] = { 0xb8,0x4a,0x6f,0x17,0xc7,0x64,0xc7,0x53,0xea,0x09,0x65,0xeb,0x7b,0x2c,0x49,0x9d };
    const uint8_t PLAINTEXT[] = { 0xe7,0x70,0xac,0x4f,0x60,0x39,0x09,0xc9,0x91,0xd7,0xba,0x15,0xb7,0x83,0xfb,0x72 };
    const uint8_t CIPHERTEXT[] = { 0x39,0xff,0xc1,0xc5,0x48,0x47,0x07,0xf7,0x2c,0x6f,0x6e,0xab,0xea,0x7e,0xe3,0x5d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-38", "[CFB128][MCT][256][DECRYPT][n38]") {
    const uint8_t KEY[] = { 0x23,0x2f,0x85,0xb5,0xa0,0x4d,0x67,0xba,0x9e,0x09,0xae,0xf7,0xb4,0xd3,0x1f,0x5b,0x9e,0x69,0x45,0xa0,0x3f,0x42,0xe6,0x45,0xe3,0x10,0x1e,0xb2,0x19,0x17,0xc2,0x21 };
    const uint8_t IV[] = { 0xe7,0x70,0xac,0x4f,0x60,0x39,0x09,0xc9,0x91,0xd7,0xba,0x15,0xb7,0x83,0xfb,0x72 };
    const uint8_t PLAINTEXT[] = { 0xd2,0xa6,0x1b,0x48,0x27,0x8b,0x66,0x5f,0x06,0x86,0x10,0xfa,0x39,0xcb,0x37,0x37 };
    const uint8_t CIPHERTEXT[] = { 0x7e,0xdd,0x44,0x92,0xb0,0x98,0xb3,0x4e,0x96,0x36,0x07,0x90,0x18,0x28,0x57,0x00 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-39", "[CFB128][MCT][256][DECRYPT][n39]") {
    const uint8_t KEY[] = { 0xec,0xe9,0x66,0xe5,0x34,0x4d,0x14,0xad,0x7d,0x1d,0x37,0x80,0x34,0xa9,0xa5,0xee,0x4c,0xcf,0x5e,0xe8,0x18,0xc9,0x80,0x1a,0xe5,0x96,0x0e,0x48,0x20,0xdc,0xf5,0x16 };
    const uint8_t IV[] = { 0xd2,0xa6,0x1b,0x48,0x27,0x8b,0x66,0x5f,0x06,0x86,0x10,0xfa,0x39,0xcb,0x37,0x37 };
    const uint8_t PLAINTEXT[] = { 0xea,0x5e,0xec,0xec,0xc9,0x00,0xdb,0xe0,0x52,0x86,0x65,0xa2,0x76,0x3e,0xb7,0xc5 };
    const uint8_t CIPHERTEXT[] = { 0xcf,0xc6,0xe3,0x50,0x94,0x00,0x73,0x17,0xe3,0x14,0x99,0x77,0x80,0x7a,0xba,0xb5 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-40", "[CFB128][MCT][256][DECRYPT][n40]") {
    const uint8_t KEY[] = { 0x62,0xc1,0x6d,0x23,0xaf,0xa2,0x1c,0xec,0x2f,0xd0,0x19,0x76,0x3a,0x2b,0x49,0x6c,0xa6,0x91,0xb2,0x04,0xd1,0xc9,0x5b,0xfa,0xb7,0x10,0x6b,0xea,0x56,0xe2,0x42,0xd3 };
    const uint8_t IV[] = { 0xea,0x5e,0xec,0xec,0xc9,0x00,0xdb,0xe0,0x52,0x86,0x65,0xa2,0x76,0x3e,0xb7,0xc5 };
    const uint8_t PLAINTEXT[] = { 0x1d,0xe4,0x29,0xde,0x72,0x59,0x8f,0xcf,0x51,0xca,0xa4,0xe0,0x97,0xe3,0x6d,0x79 };
    const uint8_t CIPHERTEXT[] = { 0x8e,0x28,0x0b,0xc6,0x9b,0xef,0x08,0x41,0x52,0xcd,0x2e,0xf6,0x0e,0x82,0xec,0x82 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-41", "[CFB128][MCT][256][DECRYPT][n41]") {
    const uint8_t KEY[] = { 0xf0,0x2c,0x64,0x78,0x6a,0x1d,0xb0,0xa4,0x63,0xb4,0x2e,0xdf,0xe5,0x96,0x9a,0x0c,0xbb,0x75,0x9b,0xda,0xa3,0x90,0xd4,0x35,0xe6,0xda,0xcf,0x0a,0xc1,0x01,0x2f,0xaa };
    const uint8_t IV[] = { 0x1d,0xe4,0x29,0xde,0x72,0x59,0x8f,0xcf,0x51,0xca,0xa4,0xe0,0x97,0xe3,0x6d,0x79 };
    const uint8_t PLAINTEXT[] = { 0xee,0xd6,0xb3,0x9d,0x3a,0x6e,0x99,0xfb,0xdc,0x5f,0xd6,0x97,0x62,0x97,0x00,0xe1 };
    const uint8_t CIPHERTEXT[] = { 0x92,0xed,0x09,0x5b,0xc5,0xbf,0xac,0x48,0x4c,0x64,0x37,0xa9,0xdf,0xbd,0xd3,0x60 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-42", "[CFB128][MCT][256][DECRYPT][n42]") {
    const uint8_t KEY[] = { 0x22,0xb1,0x53,0xd6,0xf9,0x90,0xac,0x63,0x7c,0x86,0x70,0xa0,0xcb,0xd5,0xe3,0x8d,0x55,0xa3,0x28,0x47,0x99,0xfe,0x4d,0xce,0x3a,0x85,0x19,0x9d,0xa3,0x96,0x2f,0x4b };
    const uint8_t IV[] = { 0xee,0xd6,0xb3,0x9d,0x3a,0x6e,0x99,0xfb,0xdc,0x5f,0xd6,0x97,0x62,0x97,0x00,0xe1 };
    const uint8_t PLAINTEXT[] = { 0xff,0xa4,0xcf,0xcc,0xc6,0xb4,0x14,0xed,0xb7,0xa4,0x9d,0x02,0x01,0x0a,0x20,0xbe };
    const uint8_t CIPHERTEXT[] = { 0xd2,0x9d,0x37,0xae,0x93,0x8d,0x1c,0xc7,0x1f,0x32,0x5e,0x7f,0x2e,0x43,0x79,0x81 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-43", "[CFB128][MCT][256][DECRYPT][n43]") {
    const uint8_t KEY[] = { 0xdc,0xbe,0x81,0xda,0x1c,0xa9,0xfd,0xdf,0x98,0x9f,0x1a,0xfe,0x39,0x35,0x29,0xdf,0xaa,0x07,0xe7,0x8b,0x5f,0x4a,0x59,0x23,0x8d,0x21,0x84,0x9f,0xa2,0x9c,0x0f,0xf5 };
    const uint8_t IV[] = { 0xff,0xa4,0xcf,0xcc,0xc6,0xb4,0x14,0xed,0xb7,0xa4,0x9d,0x02,0x01,0x0a,0x20,0xbe };
    const uint8_t PLAINTEXT[] = { 0x30,0xa4,0xc7,0x69,0x3e,0x57,0x65,0x9d,0x13,0x34,0x60,0x5e,0xa4,0xe2,0xeb,0xf9 };
    const uint8_t CIPHERTEXT[] = { 0xfe,0x0f,0xd2,0x0c,0xe5,0x39,0x51,0xbc,0xe4,0x19,0x6a,0x5e,0xf2,0xe0,0xca,0x52 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-44", "[CFB128][MCT][256][DECRYPT][n44]") {
    const uint8_t KEY[] = { 0x6a,0xd4,0x41,0x44,0xf2,0xa7,0xd3,0xa4,0x63,0x7f,0x84,0xb5,0x44,0x77,0x64,0x15,0x9a,0xa3,0x20,0xe2,0x61,0x1d,0x3c,0xbe,0x9e,0x15,0xe4,0xc1,0x06,0x7e,0xe4,0x0c };
    const uint8_t IV[] = { 0x30,0xa4,0xc7,0x69,0x3e,0x57,0x65,0x9d,0x13,0x34,0x60,0x5e,0xa4,0xe2,0xeb,0xf9 };
    const uint8_t PLAINTEXT[] = { 0x25,0xab,0x61,0xf2,0x43,0x25,0x3e,0xfd,0x0f,0x78,0x50,0x14,0xd1,0xbd,0x42,0xae };
    const uint8_t CIPHERTEXT[] = { 0xb6,0x6a,0xc0,0x9e,0xee,0x0e,0x2e,0x7b,0xfb,0xe0,0x9e,0x4b,0x7d,0x42,0x4d,0xca };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-45", "[CFB128][MCT][256][DECRYPT][n45]") {
    const uint8_t KEY[] = { 0x8c,0x17,0xbb,0x34,0xaa,0x6e,0x79,0x6c,0xf8,0xbd,0xc9,0xbf,0x73,0xfc,0x11,0x16,0xbf,0x08,0x41,0x10,0x22,0x38,0x02,0x43,0x91,0x6d,0xb4,0xd5,0xd7,0xc3,0xa6,0xa2 };
    const uint8_t IV[] = { 0x25,0xab,0x61,0xf2,0x43,0x25,0x3e,0xfd,0x0f,0x78,0x50,0x14,0xd1,0xbd,0x42,0xae };
    const uint8_t PLAINTEXT[] = { 0xf4,0xd8,0xf4,0x5a,0x58,0x64,0xb9,0xa1,0xba,0x89,0x6a,0x82,0x5e,0xb9,0x8a,0xea };
    const uint8_t CIPHERTEXT[] = { 0xe6,0xc3,0xfa,0x70,0x58,0xc9,0xaa,0xc8,0x9b,0xc2,0x4d,0x0a,0x37,0x8b,0x75,0x03 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-46", "[CFB128][MCT][256][DECRYPT][n46]") {
    const uint8_t KEY[] = { 0x6b,0x22,0xb1,0xce,0x53,0xfc,0xf0,0x54,0x07,0x69,0x35,0x6f,0xa3,0x58,0x46,0xc7,0x4b,0xd0,0xb5,0x4a,0x7a,0x5c,0xbb,0xe2,0x2b,0xe4,0xde,0x57,0x89,0x7a,0x2c,0x48 };
    const uint8_t IV[] = { 0xf4,0xd8,0xf4,0x5a,0x58,0x64,0xb9,0xa1,0xba,0x89,0x6a,0x82,0x5e,0xb9,0x8a,0xea };
    const uint8_t PLAINTEXT[] = { 0x66,0xc0,0x74,0xc2,0x8b,0xae,0x94,0xb4,0xa9,0x6c,0x7a,0xd2,0xc0,0x05,0x91,0x6d };
    const uint8_t CIPHERTEXT[] = { 0xe7,0x35,0x0a,0xfa,0xf9,0x92,0x89,0x38,0xff,0xd4,0xfc,0xd0,0xd0,0xa4,0x57,0xd1 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-47", "[CFB128][MCT][256][DECRYPT][n47]") {
    const uint8_t KEY[] = { 0x92,0x3b,0x51,0x1a,0x17,0xce,0x0d,0xc7,0xe4,0x4b,0x6f,0x3c,0x2b,0xac,0xd2,0x2b,0x2d,0x10,0xc1,0x88,0xf1,0xf2,0x2f,0x56,0x82,0x88,0xa4,0x85,0x49,0x7f,0xbd,0x25 };
    const uint8_t IV[] = { 0x66,0xc0,0x74,0xc2,0x8b,0xae,0x94,0xb4,0xa9,0x6c,0x7a,0xd2,0xc0,0x05,0x91,0x6d };
    const uint8_t PLAINTEXT[] = { 0x98,0xdd,0xc2,0x5e,0x15,0x69,0xf4,0x35,0x69,0x99,0x76,0xea,0xda,0x42,0x54,0x41 };
    const uint8_t CIPHERTEXT[] = { 0xf9,0x19,0xe0,0xd4,0x44,0x32,0xfd,0x93,0xe3,0x22,0x5a,0x53,0x88,0xf4,0x94,0xec };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-48", "[CFB128][MCT][256][DECRYPT][n48]") {
    const uint8_t KEY[] = { 0x81,0x79,0x8b,0xae,0x90,0x6a,0xb1,0xd1,0xd5,0xec,0x7b,0xbb,0xd9,0xee,0x82,0xfd,0xb5,0xcd,0x03,0xd6,0xe4,0x9b,0xdb,0x63,0xeb,0x11,0xd2,0x6f,0x93,0x3d,0xe9,0x64 };
    const uint8_t IV[] = { 0x98,0xdd,0xc2,0x5e,0x15,0x69,0xf4,0x35,0x69,0x99,0x76,0xea,0xda,0x42,0x54,0x41 };
    const uint8_t PLAINTEXT[] = { 0xe2,0x2f,0xbd,0xc2,0x79,0xe7,0x30,0x2c,0xac,0xc3,0xdc,0xfd,0x05,0x58,0x14,0xea };
    const uint8_t CIPHERTEXT[] = { 0x13,0x42,0xda,0xb4,0x87,0xa4,0xbc,0x16,0x31,0xa7,0x14,0x87,0xf2,0x42,0x50,0xd6 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-49", "[CFB128][MCT][256][DECRYPT][n49]") {
    const uint8_t KEY[] = { 0xbd,0x13,0x82,0xf2,0x71,0x98,0x5a,0xfb,0x19,0xbe,0xe9,0xc9,0x20,0x9b,0x72,0x37,0x57,0xe2,0xbe,0x14,0x9d,0x7c,0xeb,0x4f,0x47,0xd2,0x0e,0x92,0x96,0x65,0xfd,0x8e };
    const uint8_t IV[] = { 0xe2,0x2f,0xbd,0xc2,0x79,0xe7,0x30,0x2c,0xac,0xc3,0xdc,0xfd,0x05,0x58,0x14,0xea };
    const uint8_t PLAINTEXT[] = { 0x96,0x43,0xa4,0xab,0x39,0x3d,0x94,0x13,0xc5,0xa7,0xd4,0x93,0xf4,0x22,0x83,0xc2 };
    const uint8_t CIPHERTEXT[] = { 0x3c,0x6a,0x09,0x5c,0xe1,0xf2,0xeb,0x2a,0xcc,0x52,0x92,0x72,0xf9,0x75,0xf0,0xca };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-50", "[CFB128][MCT][256][DECRYPT][n50]") {
    const uint8_t KEY[] = { 0xa0,0x85,0xbc,0x13,0x45,0x95,0xca,0x1f,0x85,0x69,0x45,0x53,0x8c,0x93,0xb8,0xe8,0xc1,0xa1,0x1a,0xbf,0xa4,0x41,0x7f,0x5c,0x82,0x75,0xda,0x01,0x62,0x47,0x7e,0x4c };
    const uint8_t IV[] = { 0x96,0x43,0xa4,0xab,0x39,0x3d,0x94,0x13,0xc5,0xa7,0xd4,0x93,0xf4,0x22,0x83,0xc2 };
    const uint8_t PLAINTEXT[] = { 0x95,0xcd,0x54,0x98,0x64,0x4c,0x75,0x72,0x0a,0xe3,0xee,0xa0,0xfb,0xa2,0x49,0x0d };
    const uint8_t CIPHERTEXT[] = { 0x1d,0x96,0x3e,0xe1,0x34,0x0d,0x90,0xe4,0x9c,0xd7,0xac,0x9a,0xac,0x08,0xca,0xdf };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-51", "[CFB128][MCT][256][DECRYPT][n51]") {
    const uint8_t KEY[] = { 0x3e,0xa3,0xa8,0xc4,0xc6,0x04,0xd2,0x32,0xf4,0xba,0x37,0x28,0x58,0xd2,0xef,0x90,0x54,0x6c,0x4e,0x27,0xc0,0x0d,0x0a,0x2e,0x88,0x96,0x34,0xa1,0x99,0xe5,0x37,0x41 };
    const uint8_t IV[] = { 0x95,0xcd,0x54,0x98,0x64,0x4c,0x75,0x72,0x0a,0xe3,0xee,0xa0,0xfb,0xa2,0x49,0x0d };
    const uint8_t PLAINTEXT[] = { 0xd0,0xeb,0x33,0xf2,0x60,0x0e,0x36,0xab,0x57,0x16,0x95,0xcd,0x19,0x34,0x85,0x90 };
    const uint8_t CIPHERTEXT[] = { 0x9e,0x26,0x14,0xd7,0x83,0x91,0x18,0x2d,0x71,0xd3,0x72,0x7b,0xd4,0x41,0x57,0x78 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-52", "[CFB128][MCT][256][DECRYPT][n52]") {
    const uint8_t KEY[] = { 0x5d,0x64,0x26,0xfd,0x9d,0xb2,0x48,0x37,0x5f,0xb4,0xc2,0x3c,0xc7,0x4d,0xa7,0x43,0x84,0x87,0x7d,0xd5,0xa0,0x03,0x3c,0x85,0xdf,0x80,0xa1,0x6c,0x80,0xd1,0xb2,0xd1 };
    const uint8_t IV[] = { 0xd0,0xeb,0x33,0xf2,0x60,0x0e,0x36,0xab,0x57,0x16,0x95,0xcd,0x19,0x34,0x85,0x90 };
    const uint8_t PLAINTEXT[] = { 0xd6,0x95,0x8b,0x22,0x47,0xb8,0xe9,0x62,0x79,0xa3,0x96,0x3f,0x94,0x1b,0x8a,0x33 };
    const uint8_t CIPHERTEXT[] = { 0x63,0xc7,0x8e,0x39,0x5b,0xb6,0x9a,0x05,0xab,0x0e,0xf5,0x14,0x9f,0x9f,0x48,0xd3 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-53", "[CFB128][MCT][256][DECRYPT][n53]") {
    const uint8_t KEY[] = { 0xd6,0x02,0x24,0xbc,0x93,0x45,0x2b,0x79,0x78,0xcc,0x09,0x84,0x21,0xc1,0x32,0x41,0x52,0x12,0xf6,0xf7,0xe7,0xbb,0xd5,0xe7,0xa6,0x23,0x37,0x53,0x14,0xca,0x38,0xe2 };
    const uint8_t IV[] = { 0xd6,0x95,0x8b,0x22,0x47,0xb8,0xe9,0x62,0x79,0xa3,0x96,0x3f,0x94,0x1b,0x8a,0x33 };
    const uint8_t PLAINTEXT[] = { 0xf3,0x33,0xf6,0x1c,0x34,0x06,0x09,0xa6,0x0b,0x5f,0xaf,0x8d,0x56,0xd7,0x7e,0x7d };
    const uint8_t CIPHERTEXT[] = { 0x8b,0x66,0x02,0x41,0x0e,0xf7,0x63,0x4e,0x27,0x78,0xcb,0xb8,0xe6,0x8c,0x95,0x02 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-54", "[CFB128][MCT][256][DECRYPT][n54]") {
    const uint8_t KEY[] = { 0x88,0x1a,0xfd,0x37,0x50,0xca,0x44,0xae,0x4c,0x4b,0x35,0x7c,0xf2,0xe6,0xe9,0xbd,0xa1,0x21,0x00,0xeb,0xd3,0xbd,0xdc,0x41,0xad,0x7c,0x98,0xde,0x42,0x1d,0x46,0x9f };
    const uint8_t IV[] = { 0xf3,0x33,0xf6,0x1c,0x34,0x06,0x09,0xa6,0x0b,0x5f,0xaf,0x8d,0x56,0xd7,0x7e,0x7d };
    const uint8_t PLAINTEXT[] = { 0x70,0x14,0x1e,0x6d,0x36,0xa5,0x57,0xa0,0x48,0x1e,0xee,0xd4,0x6f,0x80,0x5b,0x8c };
    const uint8_t CIPHERTEXT[] = { 0x5e,0x18,0xd9,0x8b,0xc3,0x8f,0x6f,0xd7,0x34,0x87,0x3c,0xf8,0xd3,0x27,0xdb,0xfc };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-55", "[CFB128][MCT][256][DECRYPT][n55]") {
    const uint8_t KEY[] = { 0xa3,0x92,0xfe,0x34,0x84,0xdb,0x8b,0x32,0x9d,0x4a,0x46,0x50,0xa3,0x94,0x93,0xb4,0xd1,0x35,0x1e,0x86,0xe5,0x18,0x8b,0xe1,0xe5,0x62,0x76,0x0a,0x2d,0x9d,0x1d,0x13 };
    const uint8_t IV[] = { 0x70,0x14,0x1e,0x6d,0x36,0xa5,0x57,0xa0,0x48,0x1e,0xee,0xd4,0x6f,0x80,0x5b,0x8c };
    const uint8_t PLAINTEXT[] = { 0xd1,0x17,0x6a,0x1b,0xd0,0x1c,0x2f,0xa7,0xe4,0x1d,0x3a,0x5b,0x76,0x6c,0x97,0xab };
    const uint8_t CIPHERTEXT[] = { 0x2b,0x88,0x03,0x03,0xd4,0x11,0xcf,0x9c,0xd1,0x01,0x73,0x2c,0x51,0x72,0x7a,0x09 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-56", "[CFB128][MCT][256][DECRYPT][n56]") {
    const uint8_t KEY[] = { 0x1e,0x49,0x43,0x16,0x54,0x44,0x21,0x28,0x79,0x88,0x59,0x33,0xa8,0x22,0xc1,0x44,0x00,0x22,0x74,0x9d,0x35,0x04,0xa4,0x46,0x01,0x7f,0x4c,0x51,0x5b,0xf1,0x8a,0xb8 };
    const uint8_t IV[] = { 0xd1,0x17,0x6a,0x1b,0xd0,0x1c,0x2f,0xa7,0xe4,0x1d,0x3a,0x5b,0x76,0x6c,0x97,0xab };
    const uint8_t PLAINTEXT[] = { 0xe6,0xee,0x40,0x06,0x19,0xa0,0xf6,0x7d,0x96,0x49,0x4c,0x50,0xc0,0xd2,0xbb,0x3e };
    const uint8_t CIPHERTEXT[] = { 0xbd,0xdb,0xbd,0x22,0xd0,0x9f,0xaa,0x1a,0xe4,0xc2,0x1f,0x63,0x0b,0xb6,0x52,0xf0 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-57", "[CFB128][MCT][256][DECRYPT][n57]") {
    const uint8_t KEY[] = { 0xc4,0x33,0xb6,0xb0,0xab,0xe1,0x33,0xf1,0x68,0xc8,0x69,0x06,0xd8,0x8e,0x79,0xaa,0xe6,0xcc,0x34,0x9b,0x2c,0xa4,0x52,0x3b,0x97,0x36,0x00,0x01,0x9b,0x23,0x31,0x86 };
    const uint8_t IV[] = { 0xe6,0xee,0x40,0x06,0x19,0xa0,0xf6,0x7d,0x96,0x49,0x4c,0x50,0xc0,0xd2,0xbb,0x3e };
    const uint8_t PLAINTEXT[] = { 0xb1,0x10,0x75,0x3e,0xf8,0xec,0xd4,0x0b,0x47,0x66,0x3d,0x22,0x02,0x7d,0x4d,0x9e };
    const uint8_t CIPHERTEXT[] = { 0xda,0x7a,0xf5,0xa6,0xff,0xa5,0x12,0xd9,0x11,0x40,0x30,0x35,0x70,0xac,0xb8,0xee };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-58", "[CFB128][MCT][256][DECRYPT][n58]") {
    const uint8_t KEY[] = { 0xab,0xb5,0xc9,0x98,0x70,0x48,0x86,0xb3,0x21,0x68,0x89,0x7c,0x9c,0xf7,0x77,0x34,0x57,0xdc,0x41,0xa5,0xd4,0x48,0x86,0x30,0xd0,0x50,0x3d,0x23,0x99,0x5e,0x7c,0x18 };
    const uint8_t IV[] = { 0xb1,0x10,0x75,0x3e,0xf8,0xec,0xd4,0x0b,0x47,0x66,0x3d,0x22,0x02,0x7d,0x4d,0x9e };
    const uint8_t PLAINTEXT[] = { 0x7c,0xf8,0xf4,0x75,0xe0,0xa0,0xd2,0x11,0x42,0x85,0xb2,0x9a,0xd9,0x53,0x34,0x1e };
    const uint8_t CIPHERTEXT[] = { 0x6f,0x86,0x7f,0x28,0xdb,0xa9,0xb5,0x42,0x49,0xa0,0xe0,0x7a,0x44,0x79,0x0e,0x9e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-59", "[CFB128][MCT][256][DECRYPT][n59]") {
    const uint8_t KEY[] = { 0xdb,0x17,0xbf,0xb8,0x8e,0x76,0xf7,0xa9,0x24,0xa5,0x3b,0x14,0xf0,0xac,0xee,0x1f,0x2b,0x24,0xb5,0xd0,0x34,0xe8,0x54,0x21,0x92,0xd5,0x8f,0xb9,0x40,0x0d,0x48,0x06 };
    const uint8_t IV[] = { 0x7c,0xf8,0xf4,0x75,0xe0,0xa0,0xd2,0x11,0x42,0x85,0xb2,0x9a,0xd9,0x53,0x34,0x1e };
    const uint8_t PLAINTEXT[] = { 0xa2,0x7d,0x8d,0xf6,0x55,0x53,0x1e,0xe4,0x98,0x2d,0x24,0xe0,0xb0,0x68,0x20,0xc6 };
    const uint8_t CIPHERTEXT[] = { 0x70,0xa2,0x76,0x20,0xfe,0x3e,0x71,0x1a,0x05,0xcd,0xb2,0x68,0x6c,0x5b,0x99,0x2b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-60", "[CFB128][MCT][256][DECRYPT][n60]") {
    const uint8_t KEY[] = { 0x32,0x5a,0x6c,0x94,0x4a,0x76,0x9c,0x21,0x44,0xf7,0xd3,0xc6,0x92,0x33,0xc2,0x1a,0x89,0x59,0x38,0x26,0x61,0xbb,0x4a,0xc5,0x0a,0xf8,0xab,0x59,0xf0,0x65,0x68,0xc0 };
    const uint8_t IV[] = { 0xa2,0x7d,0x8d,0xf6,0x55,0x53,0x1e,0xe4,0x98,0x2d,0x24,0xe0,0xb0,0x68,0x20,0xc6 };
    const uint8_t PLAINTEXT[] = { 0xa3,0xa4,0x8e,0xfc,0xdd,0xe4,0x31,0xfa,0x24,0x22,0x29,0x98,0x72,0x2e,0x5e,0xe1 };
    const uint8_t CIPHERTEXT[] = { 0xe9,0x4d,0xd3,0x2c,0xc4,0x00,0x6b,0x88,0x60,0x52,0xe8,0xd2,0x62,0x9f,0x2c,0x05 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-61", "[CFB128][MCT][256][DECRYPT][n61]") {
    const uint8_t KEY[] = { 0x06,0x53,0xc3,0xed,0x67,0x10,0xb9,0xb4,0x0e,0x0b,0x8b,0xbc,0xfc,0x3c,0xf8,0xc3,0x2a,0xfd,0xb6,0xda,0xbc,0x5f,0x7b,0x3f,0x2e,0xda,0x82,0xc1,0x82,0x4b,0x36,0x21 };
    const uint8_t IV[] = { 0xa3,0xa4,0x8e,0xfc,0xdd,0xe4,0x31,0xfa,0x24,0x22,0x29,0x98,0x72,0x2e,0x5e,0xe1 };
    const uint8_t PLAINTEXT[] = { 0xac,0xac,0xcd,0xaa,0x0b,0x12,0xf8,0xf1,0x9c,0xd0,0xc0,0x1a,0x50,0xc3,0x75,0x2a };
    const uint8_t CIPHERTEXT[] = { 0x34,0x09,0xaf,0x79,0x2d,0x66,0x25,0x95,0x4a,0xfc,0x58,0x7a,0x6e,0x0f,0x3a,0xd9 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-62", "[CFB128][MCT][256][DECRYPT][n62]") {
    const uint8_t KEY[] = { 0x0b,0xe1,0x8d,0xc3,0x7d,0x0e,0xd2,0xe3,0xf3,0x01,0xd3,0xf2,0xa0,0xa6,0xe0,0x02,0x86,0x51,0x7b,0x70,0xb7,0x4d,0x83,0xce,0xb2,0x0a,0x42,0xdb,0xd2,0x88,0x43,0x0b };
    const uint8_t IV[] = { 0xac,0xac,0xcd,0xaa,0x0b,0x12,0xf8,0xf1,0x9c,0xd0,0xc0,0x1a,0x50,0xc3,0x75,0x2a };
    const uint8_t PLAINTEXT[] = { 0x91,0x4f,0xc6,0x64,0x8f,0x73,0x31,0x38,0xf7,0xf0,0xff,0x35,0x41,0x93,0x51,0x31 };
    const uint8_t CIPHERTEXT[] = { 0x0d,0xb2,0x4e,0x2e,0x1a,0x1e,0x6b,0x57,0xfd,0x0a,0x58,0x4e,0x5c,0x9a,0x18,0xc1 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-63", "[CFB128][MCT][256][DECRYPT][n63]") {
    const uint8_t KEY[] = { 0x69,0x03,0xcd,0x0a,0xcf,0x5f,0x63,0x9d,0x4d,0xfb,0x9e,0xd8,0x15,0xdf,0x52,0xc3,0x17,0x1e,0xbd,0x14,0x38,0x3e,0xb2,0xf6,0x45,0xfa,0xbd,0xee,0x93,0x1b,0x12,0x3a };
    const uint8_t IV[] = { 0x91,0x4f,0xc6,0x64,0x8f,0x73,0x31,0x38,0xf7,0xf0,0xff,0x35,0x41,0x93,0x51,0x31 };
    const uint8_t PLAINTEXT[] = { 0x0f,0x07,0x3e,0x1e,0xb1,0xa1,0x19,0x1d,0xd2,0x18,0x73,0xb9,0x6b,0x1f,0xb9,0x36 };
    const uint8_t CIPHERTEXT[] = { 0x62,0xe2,0x40,0xc9,0xb2,0x51,0xb1,0x7e,0xbe,0xfa,0x4d,0x2a,0xb5,0x79,0xb2,0xc1 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-64", "[CFB128][MCT][256][DECRYPT][n64]") {
    const uint8_t KEY[] = { 0x70,0x00,0x12,0x90,0x81,0x42,0x11,0x8c,0xf3,0xf0,0x4a,0xd2,0xb6,0x2f,0xb6,0xcd,0x18,0x19,0x83,0x0a,0x89,0x9f,0xab,0xeb,0x97,0xe2,0xce,0x57,0xf8,0x04,0xab,0x0c };
    const uint8_t IV[] = { 0x0f,0x07,0x3e,0x1e,0xb1,0xa1,0x19,0x1d,0xd2,0x18,0x73,0xb9,0x6b,0x1f,0xb9,0x36 };
    const uint8_t PLAINTEXT[] = { 0x95,0x82,0xdd,0x9e,0xd1,0x73,0xb8,0xa2,0xa5,0xb3,0x62,0x14,0x65,0xd2,0xda,0x99 };
    const uint8_t CIPHERTEXT[] = { 0x19,0x03,0xdf,0x9a,0x4e,0x1d,0x72,0x11,0xbe,0x0b,0xd4,0x0a,0xa3,0xf0,0xe4,0x0e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-65", "[CFB128][MCT][256][DECRYPT][n65]") {
    const uint8_t KEY[] = { 0x91,0xd9,0x79,0xa2,0x17,0x89,0x64,0xbd,0x02,0xcb,0xd4,0x25,0xd7,0x68,0x09,0xba,0x8d,0x9b,0x5e,0x94,0x58,0xec,0x13,0x49,0x32,0x51,0xac,0x43,0x9d,0xd6,0x71,0x95 };
    const uint8_t IV[] = { 0x95,0x82,0xdd,0x9e,0xd1,0x73,0xb8,0xa2,0xa5,0xb3,0x62,0x14,0x65,0xd2,0xda,0x99 };
    const uint8_t PLAINTEXT[] = { 0xdb,0xe8,0xc6,0x16,0x00,0x93,0xa5,0xd5,0xf7,0x47,0xf6,0xd8,0xf5,0x83,0x5c,0x54 };
    const uint8_t CIPHERTEXT[] = { 0xe1,0xd9,0x6b,0x32,0x96,0xcb,0x75,0x31,0xf1,0x3b,0x9e,0xf7,0x61,0x47,0xbf,0x77 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-66", "[CFB128][MCT][256][DECRYPT][n66]") {
    const uint8_t KEY[] = { 0x28,0xe4,0x82,0x70,0x71,0x9d,0x38,0xfd,0xae,0x49,0xcd,0x4f,0xc4,0x1f,0x7b,0xc4,0x56,0x73,0x98,0x82,0x58,0x7f,0xb6,0x9c,0xc5,0x16,0x5a,0x9b,0x68,0x55,0x2d,0xc1 };
    const uint8_t IV[] = { 0xdb,0xe8,0xc6,0x16,0x00,0x93,0xa5,0xd5,0xf7,0x47,0xf6,0xd8,0xf5,0x83,0x5c,0x54 };
    const uint8_t PLAINTEXT[] = { 0xab,0x2a,0x8e,0xcb,0x7c,0x48,0xc6,0x49,0x46,0xbf,0x8d,0xbf,0x63,0x4f,0x38,0x02 };
    const uint8_t CIPHERTEXT[] = { 0xb9,0x3d,0xfb,0xd2,0x66,0x14,0x5c,0x40,0xac,0x82,0x19,0x6a,0x13,0x77,0x72,0x7e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-67", "[CFB128][MCT][256][DECRYPT][n67]") {
    const uint8_t KEY[] = { 0x99,0x99,0x6c,0xeb,0x5b,0x98,0x3f,0xca,0xfb,0x3e,0xc8,0x3b,0xd9,0x5c,0x3c,0xff,0xfd,0x59,0x16,0x49,0x24,0x37,0x70,0xd5,0x83,0xa9,0xd7,0x24,0x0b,0x1a,0x15,0xc3 };
    const uint8_t IV[] = { 0xab,0x2a,0x8e,0xcb,0x7c,0x48,0xc6,0x49,0x46,0xbf,0x8d,0xbf,0x63,0x4f,0x38,0x02 };
    const uint8_t PLAINTEXT[] = { 0x2b,0xff,0xa8,0x21,0x6e,0xa3,0x4d,0xf6,0x91,0x22,0x2a,0xa2,0xe3,0xae,0x03,0x74 };
    const uint8_t CIPHERTEXT[] = { 0xb1,0x7d,0xee,0x9b,0x2a,0x05,0x07,0x37,0x55,0x77,0x05,0x74,0x1d,0x43,0x47,0x3b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-68", "[CFB128][MCT][256][DECRYPT][n68]") {
    const uint8_t KEY[] = { 0x86,0xfa,0x17,0xe1,0xfc,0xb0,0x32,0x25,0x22,0xf6,0x29,0x41,0x00,0x29,0x2b,0xbb,0xd6,0xa6,0xbe,0x68,0x4a,0x94,0x3d,0x23,0x12,0x8b,0xfd,0x86,0xe8,0xb4,0x16,0xb7 };
    const uint8_t IV[] = { 0x2b,0xff,0xa8,0x21,0x6e,0xa3,0x4d,0xf6,0x91,0x22,0x2a,0xa2,0xe3,0xae,0x03,0x74 };
    const uint8_t PLAINTEXT[] = { 0x49,0x38,0x6e,0xa6,0xb3,0x0e,0xb8,0x5c,0x56,0x02,0xae,0x70,0x9a,0x39,0xfe,0x1d };
    const uint8_t CIPHERTEXT[] = { 0x1f,0x63,0x7b,0x0a,0xa7,0x28,0x0d,0xef,0xd9,0xc8,0xe1,0x7a,0xd9,0x75,0x17,0x44 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-69", "[CFB128][MCT][256][DECRYPT][n69]") {
    const uint8_t KEY[] = { 0x40,0xe4,0x2c,0x93,0x9a,0x56,0x85,0xd9,0x4a,0x7c,0xd8,0x69,0x0a,0x57,0x32,0x02,0x9f,0x9e,0xd0,0xce,0xf9,0x9a,0x85,0x7f,0x44,0x89,0x53,0xf6,0x72,0x8d,0xe8,0xaa };
    const uint8_t IV[] = { 0x49,0x38,0x6e,0xa6,0xb3,0x0e,0xb8,0x5c,0x56,0x02,0xae,0x70,0x9a,0x39,0xfe,0x1d };
    const uint8_t PLAINTEXT[] = { 0x68,0x25,0x7a,0x47,0x42,0x1c,0x84,0x49,0x95,0xf2,0xb5,0x93,0x75,0xc0,0xf5,0x06 };
    const uint8_t CIPHERTEXT[] = { 0xc6,0x1e,0x3b,0x72,0x66,0xe6,0xb7,0xfc,0x68,0x8a,0xf1,0x28,0x0a,0x7e,0x19,0xb9 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-70", "[CFB128][MCT][256][DECRYPT][n70]") {
    const uint8_t KEY[] = { 0xd9,0xe9,0xcd,0xe2,0xee,0x2b,0x9b,0x21,0xf5,0x3b,0x16,0xd9,0xcc,0xe8,0x05,0x7c,0xf7,0xbb,0xaa,0x89,0xbb,0x86,0x01,0x36,0xd1,0x7b,0xe6,0x65,0x07,0x4d,0x1d,0xac };
    const uint8_t IV[] = { 0x68,0x25,0x7a,0x47,0x42,0x1c,0x84,0x49,0x95,0xf2,0xb5,0x93,0x75,0xc0,0xf5,0x06 };
    const uint8_t PLAINTEXT[] = { 0x7c,0x2f,0x41,0x9b,0x19,0x3c,0xee,0xba,0x0b,0xce,0x42,0x7f,0x04,0xca,0xe1,0x7d };
    const uint8_t CIPHERTEXT[] = { 0x99,0x0d,0xe1,0x71,0x74,0x7d,0x1e,0xf8,0xbf,0x47,0xce,0xb0,0xc6,0xbf,0x37,0x7e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-71", "[CFB128][MCT][256][DECRYPT][n71]") {
    const uint8_t KEY[] = { 0x1a,0x77,0xba,0x51,0x11,0xc5,0x30,0x67,0x9e,0x05,0x94,0xdc,0x4e,0xbe,0xe4,0xb1,0x8b,0x94,0xeb,0x12,0xa2,0xba,0xef,0x8c,0xda,0xb5,0xa4,0x1a,0x03,0x87,0xfc,0xd1 };
    const uint8_t IV[] = { 0x7c,0x2f,0x41,0x9b,0x19,0x3c,0xee,0xba,0x0b,0xce,0x42,0x7f,0x04,0xca,0xe1,0x7d };
    const uint8_t PLAINTEXT[] = { 0xc2,0x94,0x6a,0x30,0x3e,0x10,0x8e,0xa3,0xba,0x41,0x52,0x65,0x78,0xfb,0x21,0x9d };
    const uint8_t CIPHERTEXT[] = { 0xc3,0x9e,0x77,0xb3,0xff,0xee,0xab,0x46,0x6b,0x3e,0x82,0x05,0x82,0x56,0xe1,0xcd };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-72", "[CFB128][MCT][256][DECRYPT][n72]") {
    const uint8_t KEY[] = { 0xa7,0xba,0x69,0x6e,0xd8,0x4d,0xc1,0x09,0xa6,0x43,0xb2,0x88,0x28,0x4b,0xb2,0xd1,0x49,0x00,0x81,0x22,0x9c,0xaa,0x61,0x2f,0x60,0xf4,0xf6,0x7f,0x7b,0x7c,0xdd,0x4c };
    const uint8_t IV[] = { 0xc2,0x94,0x6a,0x30,0x3e,0x10,0x8e,0xa3,0xba,0x41,0x52,0x65,0x78,0xfb,0x21,0x9d };
    const uint8_t PLAINTEXT[] = { 0x13,0x72,0x75,0x1d,0x12,0xfc,0x8d,0x9c,0x0a,0x67,0xc9,0x72,0xf3,0x41,0x0e,0x56 };
    const uint8_t CIPHERTEXT[] = { 0xbd,0xcd,0xd3,0x3f,0xc9,0x88,0xf1,0x6e,0x38,0x46,0x26,0x54,0x66,0xf5,0x56,0x60 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-73", "[CFB128][MCT][256][DECRYPT][n73]") {
    const uint8_t KEY[] = { 0xe9,0x49,0x40,0x23,0x10,0xa2,0x93,0xb5,0xc6,0x9c,0x81,0x4a,0xb0,0x1d,0xfd,0x34,0x5a,0x72,0xf4,0x3f,0x8e,0x56,0xec,0xb3,0x6a,0x93,0x3f,0x0d,0x88,0x3d,0xd3,0x1a };
    const uint8_t IV[] = { 0x13,0x72,0x75,0x1d,0x12,0xfc,0x8d,0x9c,0x0a,0x67,0xc9,0x72,0xf3,0x41,0x0e,0x56 };
    const uint8_t PLAINTEXT[] = { 0x76,0x58,0xa1,0x72,0x0f,0x96,0xc3,0xce,0x2c,0xa0,0xe4,0x1a,0x89,0xe5,0x8b,0x4a };
    const uint8_t CIPHERTEXT[] = { 0x4e,0xf3,0x29,0x4d,0xc8,0xef,0x52,0xbc,0x60,0xdf,0x33,0xc2,0x98,0x56,0x4f,0xe5 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-74", "[CFB128][MCT][256][DECRYPT][n74]") {
    const uint8_t KEY[] = { 0x15,0xbc,0xe6,0x55,0x47,0xfa,0x6e,0x34,0xbe,0x53,0x5f,0xee,0xb5,0x02,0xc8,0x11,0x2c,0x2a,0x55,0x4d,0x81,0xc0,0x2f,0x7d,0x46,0x33,0xdb,0x17,0x01,0xd8,0x58,0x50 };
    const uint8_t IV[] = { 0x76,0x58,0xa1,0x72,0x0f,0x96,0xc3,0xce,0x2c,0xa0,0xe4,0x1a,0x89,0xe5,0x8b,0x4a };
    const uint8_t PLAINTEXT[] = { 0x2b,0xbb,0xe3,0x34,0x24,0x8f,0x69,0xa8,0x43,0x68,0xfe,0x98,0xa4,0x09,0x22,0x04 };
    const uint8_t CIPHERTEXT[] = { 0xfc,0xf5,0xa6,0x76,0x57,0x58,0xfd,0x81,0x78,0xcf,0xde,0xa4,0x05,0x1f,0x35,0x25 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-75", "[CFB128][MCT][256][DECRYPT][n75]") {
    const uint8_t KEY[] = { 0x3d,0xae,0x9f,0x06,0xd7,0xa8,0x27,0x21,0x07,0xa1,0xce,0x09,0x1a,0x4e,0x8a,0xfc,0x07,0x91,0xb6,0x79,0xa5,0x4f,0x46,0xd5,0x05,0x5b,0x25,0x8f,0xa5,0xd1,0x7a,0x54 };
    const uint8_t IV[] = { 0x2b,0xbb,0xe3,0x34,0x24,0x8f,0x69,0xa8,0x43,0x68,0xfe,0x98,0xa4,0x09,0x22,0x04 };
    const uint8_t PLAINTEXT[] = { 0x1f,0x95,0xc4,0x7e,0x48,0x66,0xc5,0xb6,0x53,0xf6,0x0a,0x70,0xd4,0x8a,0x62,0xf2 };
    const uint8_t CIPHERTEXT[] = { 0x28,0x12,0x79,0x53,0x90,0x52,0x49,0x15,0xb9,0xf2,0x91,0xe7,0xaf,0x4c,0x42,0xed };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-76", "[CFB128][MCT][256][DECRYPT][n76]") {
    const uint8_t KEY[] = { 0x52,0x5e,0xb0,0x47,0x2b,0x5a,0x9e,0x5c,0x82,0x74,0xdb,0xf1,0x6a,0xe4,0x06,0x66,0x18,0x04,0x72,0x07,0xed,0x29,0x83,0x63,0x56,0xad,0x2f,0xff,0x71,0x5b,0x18,0xa6 };
    const uint8_t IV[] = { 0x1f,0x95,0xc4,0x7e,0x48,0x66,0xc5,0xb6,0x53,0xf6,0x0a,0x70,0xd4,0x8a,0x62,0xf2 };
    const uint8_t PLAINTEXT[] = { 0x44,0x7f,0x6b,0x6f,0xf3,0x7c,0xbb,0x98,0x6c,0x22,0xd8,0x0e,0x8b,0x12,0xd4,0x71 };
    const uint8_t CIPHERTEXT[] = { 0x6f,0xf0,0x2f,0x41,0xfc,0xf2,0xb9,0x7d,0x85,0xd5,0x15,0xf8,0x70,0xaa,0x8c,0x9a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-77", "[CFB128][MCT][256][DECRYPT][n77]") {
    const uint8_t KEY[] = { 0x01,0xeb,0x5a,0x34,0x77,0xb8,0x54,0x36,0x28,0x0a,0x11,0x4e,0x86,0xc7,0x36,0x6c,0x5c,0x7b,0x19,0x68,0x1e,0x55,0x38,0xfb,0x3a,0x8f,0xf7,0xf1,0xfa,0x49,0xcc,0xd7 };
    const uint8_t IV[] = { 0x44,0x7f,0x6b,0x6f,0xf3,0x7c,0xbb,0x98,0x6c,0x22,0xd8,0x0e,0x8b,0x12,0xd4,0x71 };
    const uint8_t PLAINTEXT[] = { 0x28,0x21,0x58,0xa6,0x4c,0xe5,0x09,0x84,0xe6,0x3f,0x9a,0x26,0x19,0x46,0x64,0x9b };
    const uint8_t CIPHERTEXT[] = { 0x53,0xb5,0xea,0x73,0x5c,0xe2,0xca,0x6a,0xaa,0x7e,0xca,0xbf,0xec,0x23,0x30,0x0a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-78", "[CFB128][MCT][256][DECRYPT][n78]") {
    const uint8_t KEY[] = { 0x93,0x78,0x49,0x62,0x1f,0xe8,0x87,0x48,0xe3,0x3a,0x12,0x61,0xb0,0xf9,0xc9,0x50,0x74,0x5a,0x41,0xce,0x52,0xb0,0x31,0x7f,0xdc,0xb0,0x6d,0xd7,0xe3,0x0f,0xa8,0x4c };
    const uint8_t IV[] = { 0x28,0x21,0x58,0xa6,0x4c,0xe5,0x09,0x84,0xe6,0x3f,0x9a,0x26,0x19,0x46,0x64,0x9b };
    const uint8_t PLAINTEXT[] = { 0x0b,0x8b,0x70,0x41,0x43,0xbe,0x5c,0x9c,0xa6,0xf1,0xaf,0x5d,0xd3,0x4a,0x83,0x7f };
    const uint8_t CIPHERTEXT[] = { 0x92,0x93,0x13,0x56,0x68,0x50,0xd3,0x7e,0xcb,0x30,0x03,0x2f,0x36,0x3e,0xff,0x3c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-79", "[CFB128][MCT][256][DECRYPT][n79]") {
    const uint8_t KEY[] = { 0x1a,0x08,0xba,0xf3,0xf0,0xd6,0x8b,0x84,0x5b,0x55,0xf8,0xe8,0x95,0xb4,0x9c,0x0f,0x7f,0xd1,0x31,0x8f,0x11,0x0e,0x6d,0xe3,0x7a,0x41,0xc2,0x8a,0x30,0x45,0x2b,0x33 };
    const uint8_t IV[] = { 0x0b,0x8b,0x70,0x41,0x43,0xbe,0x5c,0x9c,0xa6,0xf1,0xaf,0x5d,0xd3,0x4a,0x83,0x7f };
    const uint8_t PLAINTEXT[] = { 0x7f,0xf5,0x60,0x1b,0xa2,0x0c,0xe2,0xcc,0x21,0x24,0x9b,0x13,0x5c,0x72,0x18,0x76 };
    const uint8_t CIPHERTEXT[] = { 0x89,0x70,0xf3,0x91,0xef,0x3e,0x0c,0xcc,0xb8,0x6f,0xea,0x89,0x25,0x4d,0x55,0x5f };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-80", "[CFB128][MCT][256][DECRYPT][n80]") {
    const uint8_t KEY[] = { 0xc0,0xc3,0xe6,0xf7,0x11,0xf6,0x63,0xc5,0x62,0xe1,0x59,0x46,0x65,0x07,0x95,0xfc,0x00,0x24,0x51,0x94,0xb3,0x02,0x8f,0x2f,0x5b,0x65,0x59,0x99,0x6c,0x37,0x33,0x45 };
    const uint8_t IV[] = { 0x7f,0xf5,0x60,0x1b,0xa2,0x0c,0xe2,0xcc,0x21,0x24,0x9b,0x13,0x5c,0x72,0x18,0x76 };
    const uint8_t PLAINTEXT[] = { 0x8b,0xa1,0xdd,0x29,0xc3,0xcd,0xfb,0x14,0x42,0x0c,0x3c,0xd7,0x0a,0xfe,0x8f,0xe1 };
    const uint8_t CIPHERTEXT[] = { 0xda,0xcb,0x5c,0x04,0xe1,0x20,0xe8,0x41,0x39,0xb4,0xa1,0xae,0xf0,0xb3,0x09,0xf3 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-81", "[CFB128][MCT][256][DECRYPT][n81]") {
    const uint8_t KEY[] = { 0x0c,0x1a,0x73,0xf4,0x00,0x78,0xb0,0xd2,0x1a,0x70,0x6e,0x12,0x03,0x7f,0xf7,0xef,0x8b,0x85,0x8c,0xbd,0x70,0xcf,0x74,0x3b,0x19,0x69,0x65,0x4e,0x66,0xc9,0xbc,0xa4 };
    const uint8_t IV[] = { 0x8b,0xa1,0xdd,0x29,0xc3,0xcd,0xfb,0x14,0x42,0x0c,0x3c,0xd7,0x0a,0xfe,0x8f,0xe1 };
    const uint8_t PLAINTEXT[] = { 0xdb,0x58,0x3b,0x2b,0x4f,0x0a,0xa2,0xbf,0x84,0x47,0x5e,0x37,0xdd,0x37,0xa5,0xd7 };
    const uint8_t CIPHERTEXT[] = { 0xcc,0xd9,0x95,0x03,0x11,0x8e,0xd3,0x17,0x78,0x91,0x37,0x54,0x66,0x78,0x62,0x13 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-82", "[CFB128][MCT][256][DECRYPT][n82]") {
    const uint8_t KEY[] = { 0x50,0x3a,0x2b,0x80,0xe7,0x07,0x5a,0x20,0xad,0xd4,0xaa,0x0d,0x51,0x67,0x95,0x8f,0x50,0xdd,0xb7,0x96,0x3f,0xc5,0xd6,0x84,0x9d,0x2e,0x3b,0x79,0xbb,0xfe,0x19,0x73 };
    const uint8_t IV[] = { 0xdb,0x58,0x3b,0x2b,0x4f,0x0a,0xa2,0xbf,0x84,0x47,0x5e,0x37,0xdd,0x37,0xa5,0xd7 };
    const uint8_t PLAINTEXT[] = { 0xe5,0x0e,0x75,0x2f,0xd5,0xac,0x78,0x75,0xf7,0x29,0x47,0x49,0xff,0xc6,0x7d,0xb4 };
    const uint8_t CIPHERTEXT[] = { 0x5c,0x20,0x58,0x74,0xe7,0x7f,0xea,0xf2,0xb7,0xa4,0xc4,0x1f,0x52,0x18,0x62,0x60 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-83", "[CFB128][MCT][256][DECRYPT][n83]") {
    const uint8_t KEY[] = { 0x12,0x1b,0xd8,0x10,0x9c,0x3c,0x29,0x0d,0x39,0x43,0x31,0xef,0x14,0x15,0x0b,0x39,0xb5,0xd3,0xc2,0xb9,0xea,0x69,0xae,0xf1,0x6a,0x07,0x7c,0x30,0x44,0x38,0x64,0xc7 };
    const uint8_t IV[] = { 0xe5,0x0e,0x75,0x2f,0xd5,0xac,0x78,0x75,0xf7,0x29,0x47,0x49,0xff,0xc6,0x7d,0xb4 };
    const uint8_t PLAINTEXT[] = { 0x75,0x51,0x1e,0xc1,0xd1,0xd3,0x48,0x94,0xec,0x10,0xbd,0x0a,0x0e,0x2f,0x15,0x45 };
    const uint8_t CIPHERTEXT[] = { 0x42,0x21,0xf3,0x90,0x7b,0x3b,0x73,0x2d,0x94,0x97,0x9b,0xe2,0x45,0x72,0x9e,0xb6 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-84", "[CFB128][MCT][256][DECRYPT][n84]") {
    const uint8_t KEY[] = { 0x48,0x47,0xe7,0x9c,0x6e,0xb7,0x79,0x3d,0xb0,0xe1,0x93,0xf9,0xbb,0xb5,0xb5,0xab,0xc0,0x82,0xdc,0x78,0x3b,0xba,0xe6,0x65,0x86,0x17,0xc1,0x3a,0x4a,0x17,0x71,0x82 };
    const uint8_t IV[] = { 0x75,0x51,0x1e,0xc1,0xd1,0xd3,0x48,0x94,0xec,0x10,0xbd,0x0a,0x0e,0x2f,0x15,0x45 };
    const uint8_t PLAINTEXT[] = { 0x38,0x0d,0xa9,0xcf,0x15,0x8a,0xa0,0x1b,0x43,0x11,0x74,0xe9,0x92,0xe8,0x7a,0x3d };
    const uint8_t CIPHERTEXT[] = { 0x5a,0x5c,0x3f,0x8c,0xf2,0x8b,0x50,0x30,0x89,0xa2,0xa2,0x16,0xaf,0xa0,0xbe,0x92 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-85", "[CFB128][MCT][256][DECRYPT][n85]") {
    const uint8_t KEY[] = { 0x7f,0x68,0xcb,0x29,0xc3,0x1a,0x5a,0xbc,0x1d,0xc2,0x5f,0xee,0xf4,0x2f,0x5d,0xd7,0xf8,0x8f,0x75,0xb7,0x2e,0x30,0x46,0x7e,0xc5,0x06,0xb5,0xd3,0xd8,0xff,0x0b,0xbf };
    const uint8_t IV[] = { 0x38,0x0d,0xa9,0xcf,0x15,0x8a,0xa0,0x1b,0x43,0x11,0x74,0xe9,0x92,0xe8,0x7a,0x3d };
    const uint8_t PLAINTEXT[] = { 0xcd,0xe7,0x68,0xd3,0x54,0x83,0x1a,0x88,0xcf,0x81,0x37,0x0b,0xd2,0x52,0x0d,0xb3 };
    const uint8_t CIPHERTEXT[] = { 0x37,0x2f,0x2c,0xb5,0xad,0xad,0x23,0x81,0xad,0x23,0xcc,0x17,0x4f,0x9a,0xe8,0x7c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-86", "[CFB128][MCT][256][DECRYPT][n86]") {
    const uint8_t KEY[] = { 0x3b,0xd7,0xd3,0x16,0x72,0x9a,0xdc,0xcc,0x3a,0x02,0xaf,0xdd,0x81,0x95,0x34,0x5a,0x35,0x68,0x1d,0x64,0x7a,0xb3,0x5c,0xf6,0x0a,0x87,0x82,0xd8,0x0a,0xad,0x06,0x0c };
    const uint8_t IV[] = { 0xcd,0xe7,0x68,0xd3,0x54,0x83,0x1a,0x88,0xcf,0x81,0x37,0x0b,0xd2,0x52,0x0d,0xb3 };
    const uint8_t PLAINTEXT[] = { 0xb4,0xde,0x15,0x36,0xb1,0x11,0x92,0x57,0xd4,0x6e,0x3d,0xdb,0x7e,0xf3,0xb7,0xb2 };
    const uint8_t CIPHERTEXT[] = { 0x44,0xbf,0x18,0x3f,0xb1,0x80,0x86,0x70,0x27,0xc0,0xf0,0x33,0x75,0xba,0x69,0x8d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-87", "[CFB128][MCT][256][DECRYPT][n87]") {
    const uint8_t KEY[] = { 0x92,0x72,0xbf,0x2b,0xe9,0x1f,0x6c,0x13,0xaf,0x98,0xa8,0x83,0x6d,0x99,0x92,0x78,0x81,0xb6,0x08,0x52,0xcb,0xa2,0xce,0xa1,0xde,0xe9,0xbf,0x03,0x74,0x5e,0xb1,0xbe };
    const uint8_t IV[] = { 0xb4,0xde,0x15,0x36,0xb1,0x11,0x92,0x57,0xd4,0x6e,0x3d,0xdb,0x7e,0xf3,0xb7,0xb2 };
    const uint8_t PLAINTEXT[] = { 0x53,0xe7,0x39,0xd1,0x2f,0xa1,0x6b,0x14,0x49,0x7a,0xd4,0xe6,0xae,0xdb,0x1a,0x3e };
    const uint8_t CIPHERTEXT[] = { 0xa9,0xa5,0x6c,0x3d,0x9b,0x85,0xb0,0xdf,0x95,0x9a,0x07,0x5e,0xec,0x0c,0xa6,0x22 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-88", "[CFB128][MCT][256][DECRYPT][n88]") {
    const uint8_t KEY[] = { 0xbc,0x97,0x83,0x8e,0x71,0x61,0x0a,0x30,0xfa,0x6a,0xf1,0x37,0xa2,0xa2,0xb0,0xb4,0xd2,0x51,0x31,0x83,0xe4,0x03,0xa5,0xb5,0x97,0x93,0x6b,0xe5,0xda,0x85,0xab,0x80 };
    const uint8_t IV[] = { 0x53,0xe7,0x39,0xd1,0x2f,0xa1,0x6b,0x14,0x49,0x7a,0xd4,0xe6,0xae,0xdb,0x1a,0x3e };
    const uint8_t PLAINTEXT[] = { 0xe5,0xba,0x98,0xc0,0x6d,0x27,0xc2,0x1b,0x45,0x3f,0xf8,0x1a,0xb4,0xa1,0x3e,0x06 };
    const uint8_t CIPHERTEXT[] = { 0x2e,0xe5,0x3c,0xa5,0x98,0x7e,0x66,0x23,0x55,0xf2,0x59,0xb4,0xcf,0x3b,0x22,0xcc };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-89", "[CFB128][MCT][256][DECRYPT][n89]") {
    const uint8_t KEY[] = { 0x3e,0xec,0x8a,0xeb,0x21,0xeb,0xcb,0x81,0xdc,0x38,0xe2,0xa4,0xd4,0xc1,0xf0,0x14,0x37,0xeb,0xa9,0x43,0x89,0x24,0x67,0xae,0xd2,0xac,0x93,0xff,0x6e,0x24,0x95,0x86 };
    const uint8_t IV[] = { 0xe5,0xba,0x98,0xc0,0x6d,0x27,0xc2,0x1b,0x45,0x3f,0xf8,0x1a,0xb4,0xa1,0x3e,0x06 };
    const uint8_t PLAINTEXT[] = { 0xda,0x03,0x6f,0x17,0xa3,0x60,0x04,0xe3,0x04,0x40,0x13,0xcf,0x87,0x0e,0xc3,0x6f };
    const uint8_t CIPHERTEXT[] = { 0x82,0x7b,0x09,0x65,0x50,0x8a,0xc1,0xb1,0x26,0x52,0x13,0x93,0x76,0x63,0x40,0xa0 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-90", "[CFB128][MCT][256][DECRYPT][n90]") {
    const uint8_t KEY[] = { 0x37,0xf0,0x65,0x72,0x36,0x25,0x17,0x90,0x9c,0xe5,0x30,0xf4,0xba,0x6e,0x2c,0x65,0xed,0xe8,0xc6,0x54,0x2a,0x44,0x63,0x4d,0xd6,0xec,0x80,0x30,0xe9,0x2a,0x56,0xe9 };
    const uint8_t IV[] = { 0xda,0x03,0x6f,0x17,0xa3,0x60,0x04,0xe3,0x04,0x40,0x13,0xcf,0x87,0x0e,0xc3,0x6f };
    const uint8_t PLAINTEXT[] = { 0xb6,0x87,0x25,0x42,0xed,0xe9,0xef,0xb9,0xee,0x59,0x48,0x61,0x30,0x57,0xb2,0x02 };
    const uint8_t CIPHERTEXT[] = { 0x09,0x1c,0xef,0x99,0x17,0xce,0xdc,0x11,0x40,0xdd,0xd2,0x50,0x6e,0xaf,0xdc,0x71 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-91", "[CFB128][MCT][256][DECRYPT][n91]") {
    const uint8_t KEY[] = { 0xc5,0xaf,0xa9,0x57,0xde,0xe0,0xff,0xc7,0x81,0xea,0x62,0x9f,0x93,0x33,0x7e,0x70,0x5b,0x6f,0xe3,0x16,0xc7,0xad,0x8c,0xf4,0x38,0xb5,0xc8,0x51,0xd9,0x7d,0xe4,0xeb };
    const uint8_t IV[] = { 0xb6,0x87,0x25,0x42,0xed,0xe9,0xef,0xb9,0xee,0x59,0x48,0x61,0x30,0x57,0xb2,0x02 };
    const uint8_t PLAINTEXT[] = { 0x42,0x4d,0x7e,0xd5,0x79,0x2b,0x6e,0xba,0x45,0xa9,0xca,0x14,0xa0,0xff,0xc0,0xbd };
    const uint8_t CIPHERTEXT[] = { 0xf2,0x5f,0xcc,0x25,0xe8,0xc5,0xe8,0x57,0x1d,0x0f,0x52,0x6b,0x29,0x5d,0x52,0x15 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-92", "[CFB128][MCT][256][DECRYPT][n92]") {
    const uint8_t KEY[] = { 0x04,0x68,0x2e,0xc9,0x3d,0x9c,0xb1,0xfd,0xe7,0x81,0xd9,0x87,0x1f,0x7f,0xee,0x28,0x19,0x22,0x9d,0xc3,0xbe,0x86,0xe2,0x4e,0x7d,0x1c,0x02,0x45,0x79,0x82,0x24,0x56 };
    const uint8_t IV[] = { 0x42,0x4d,0x7e,0xd5,0x79,0x2b,0x6e,0xba,0x45,0xa9,0xca,0x14,0xa0,0xff,0xc0,0xbd };
    const uint8_t PLAINTEXT[] = { 0x32,0xd4,0x81,0x42,0x15,0x37,0xd1,0xd3,0xf6,0x8c,0xb5,0x17,0x0e,0xe0,0x43,0x35 };
    const uint8_t CIPHERTEXT[] = { 0xc1,0xc7,0x87,0x9e,0xe3,0x7c,0x4e,0x3a,0x66,0x6b,0xbb,0x18,0x8c,0x4c,0x90,0x58 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-93", "[CFB128][MCT][256][DECRYPT][n93]") {
    const uint8_t KEY[] = { 0x9c,0x8c,0x57,0xe9,0x63,0x5b,0xb7,0x3d,0xac,0xf6,0x5a,0x6f,0x94,0x52,0x7b,0xb8,0x2b,0xf6,0x1c,0x81,0xab,0xb1,0x33,0x9d,0x8b,0x90,0xb7,0x52,0x77,0x62,0x67,0x63 };
    const uint8_t IV[] = { 0x32,0xd4,0x81,0x42,0x15,0x37,0xd1,0xd3,0xf6,0x8c,0xb5,0x17,0x0e,0xe0,0x43,0x35 };
    const uint8_t PLAINTEXT[] = { 0xe3,0x44,0x96,0xf9,0xeb,0xc0,0x82,0x4d,0xa7,0xcb,0x3a,0xab,0x1e,0xca,0x4f,0x26 };
    const uint8_t CIPHERTEXT[] = { 0x98,0xe4,0x79,0x20,0x5e,0xc7,0x06,0xc0,0x4b,0x77,0x83,0xe8,0x8b,0x2d,0x95,0x90 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-94", "[CFB128][MCT][256][DECRYPT][n94]") {
    const uint8_t KEY[] = { 0xa1,0x65,0x62,0xf4,0x8c,0xfb,0x32,0x2b,0xbf,0x38,0x82,0xc3,0x6f,0x22,0x04,0xe0,0xc8,0xb2,0x8a,0x78,0x40,0x71,0xb1,0xd0,0x2c,0x5b,0x8d,0xf9,0x69,0xa8,0x28,0x45 };
    const uint8_t IV[] = { 0xe3,0x44,0x96,0xf9,0xeb,0xc0,0x82,0x4d,0xa7,0xcb,0x3a,0xab,0x1e,0xca,0x4f,0x26 };
    const uint8_t PLAINTEXT[] = { 0xcc,0x57,0x96,0xaa,0x9d,0x7a,0xaf,0x4a,0x57,0xe8,0x53,0xfa,0xb9,0xc5,0xcb,0xf6 };
    const uint8_t CIPHERTEXT[] = { 0x3d,0xe9,0x35,0x1d,0xef,0xa0,0x85,0x16,0x13,0xce,0xd8,0xac,0xfb,0x70,0x7f,0x58 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-95", "[CFB128][MCT][256][DECRYPT][n95]") {
    const uint8_t KEY[] = { 0x53,0x9a,0x03,0xbf,0xe7,0x4b,0x96,0xbb,0x43,0xe0,0x30,0x4b,0x30,0xdc,0xee,0xdb,0x04,0xe5,0x1c,0xd2,0xdd,0x0b,0x1e,0x9a,0x7b,0xb3,0xde,0x03,0xd0,0x6d,0xe3,0xb3 };
    const uint8_t IV[] = { 0xcc,0x57,0x96,0xaa,0x9d,0x7a,0xaf,0x4a,0x57,0xe8,0x53,0xfa,0xb9,0xc5,0xcb,0xf6 };
    const uint8_t PLAINTEXT[] = { 0xff,0xee,0x70,0xdb,0xce,0x75,0x1b,0x45,0x6d,0x79,0xad,0x74,0x30,0x20,0x91,0x44 };
    const uint8_t CIPHERTEXT[] = { 0xf2,0xff,0x61,0x4b,0x6b,0xb0,0xa4,0x90,0xfc,0xd8,0xb2,0x88,0x5f,0xfe,0xea,0x3b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-96", "[CFB128][MCT][256][DECRYPT][n96]") {
    const uint8_t KEY[] = { 0x25,0x4d,0x78,0xc2,0x8c,0xbc,0xd0,0xe7,0x52,0xaa,0xe7,0x71,0x78,0x82,0x9d,0x76,0xfb,0x0b,0x6c,0x09,0x13,0x7e,0x05,0xdf,0x16,0xca,0x73,0x77,0xe0,0x4d,0x72,0xf7 };
    const uint8_t IV[] = { 0xff,0xee,0x70,0xdb,0xce,0x75,0x1b,0x45,0x6d,0x79,0xad,0x74,0x30,0x20,0x91,0x44 };
    const uint8_t PLAINTEXT[] = { 0xab,0x69,0x9e,0xd2,0xbd,0xa5,0x1e,0x4e,0xd7,0x01,0x07,0x82,0xe8,0x8e,0xcf,0x49 };
    const uint8_t CIPHERTEXT[] = { 0x76,0xd7,0x7b,0x7d,0x6b,0xf7,0x46,0x5c,0x11,0x4a,0xd7,0x3a,0x48,0x5e,0x73,0xad };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-97", "[CFB128][MCT][256][DECRYPT][n97]") {
    const uint8_t KEY[] = { 0x0c,0xfa,0x34,0x1b,0xe5,0x89,0x6b,0xce,0xac,0x67,0x52,0xcc,0x93,0x55,0x6e,0xcc,0x50,0x62,0xf2,0xdb,0xae,0xdb,0x1b,0x91,0xc1,0xcb,0x74,0xf5,0x08,0xc3,0xbd,0xbe };
    const uint8_t IV[] = { 0xab,0x69,0x9e,0xd2,0xbd,0xa5,0x1e,0x4e,0xd7,0x01,0x07,0x82,0xe8,0x8e,0xcf,0x49 };
    const uint8_t PLAINTEXT[] = { 0x74,0xb9,0x29,0x69,0x0a,0xb7,0x3b,0x57,0x44,0xd9,0xf9,0x5c,0x1e,0x47,0x68,0xfc };
    const uint8_t CIPHERTEXT[] = { 0x29,0xb7,0x4c,0xd9,0x69,0x35,0xbb,0x29,0xfe,0xcd,0xb5,0xbd,0xeb,0xd7,0xf3,0xba };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-98", "[CFB128][MCT][256][DECRYPT][n98]") {
    const uint8_t KEY[] = { 0x2e,0x9e,0x70,0x9a,0xfb,0x9f,0x97,0xbb,0xb6,0x9d,0x4e,0xf9,0x2b,0xfb,0xc6,0x62,0x24,0xdb,0xdb,0xb2,0xa4,0x6c,0x20,0xc6,0x85,0x12,0x8d,0xa9,0x16,0x84,0xd5,0x42 };
    const uint8_t IV[] = { 0x74,0xb9,0x29,0x69,0x0a,0xb7,0x3b,0x57,0x44,0xd9,0xf9,0x5c,0x1e,0x47,0x68,0xfc };
    const uint8_t PLAINTEXT[] = { 0x62,0xb3,0x7d,0x9e,0xf9,0x68,0xc0,0x25,0x85,0x3e,0xc2,0x3c,0x9a,0x23,0xec,0x2a };
    const uint8_t CIPHERTEXT[] = { 0x22,0x64,0x44,0x81,0x1e,0x16,0xfc,0x75,0x1a,0xfa,0x1c,0x35,0xb8,0xae,0xa8,0xae };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT256-DECRYPT-99", "[CFB128][MCT][256][DECRYPT][n99]") {
    const uint8_t KEY[] = { 0x63,0x65,0xd0,0x51,0xa7,0x98,0xee,0x99,0x8a,0x63,0x28,0x28,0xf0,0x5d,0x62,0x2f,0x46,0x68,0xa6,0x2c,0x5d,0x04,0xe0,0xe3,0x00,0x2c,0x4f,0x95,0x8c,0xa7,0x39,0x68 };
    const uint8_t IV[] = { 0x62,0xb3,0x7d,0x9e,0xf9,0x68,0xc0,0x25,0x85,0x3e,0xc2,0x3c,0x9a,0x23,0xec,0x2a };
    const uint8_t PLAINTEXT[] = { 0xc5,0x21,0x72,0xae,0x9c,0xf8,0x2c,0xd4,0xd9,0xcc,0xe1,0x6b,0x62,0xdb,0xb1,0xaf };
    const uint8_t CIPHERTEXT[] = { 0x4d,0xfb,0xa0,0xcb,0x5c,0x07,0x79,0x22,0x3c,0xfe,0x66,0xd1,0xdb,0xa6,0xa4,0x4d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

