#include "rijndael.h"
#include "catch.hpp"
#include <cstring>

static inline std::string buf2str(const uint8_t *buf, size_t len) {
    std::ostringstream ss; ss << std::hex << std::setfill('0');
    for (size_t i = 0; i < len; ++i) {
        ss << std::setw(2) << static_cast<int>(buf[i]) << ' ';
    }
    return ss.str();
}

TEST_CASE("CFB8MMT256-ENCRYPT-0", "[CFB8][MMT][256][ENCRYPT][n0]") {
    const uint8_t KEY[] = { 0x34,0xe8,0x09,0x1c,0xee,0x09,0xf1,0xbd,0x3e,0xbf,0x1e,0x8f,0x05,0xf5,0x1b,0xfb,0xd4,0x89,0x9e,0xf2,0xae,0x00,0x6a,0x3a,0x0f,0x78,0x75,0x05,0x2c,0xdd,0x46,0xc8 };
    const uint8_t IV[] = { 0x43,0xeb,0x4d,0xcc,0x4b,0x04,0xa8,0x02,0x16,0xa2,0x0e,0x4a,0x09,0xa7,0xab,0xb5 };
    const uint8_t PLAINTEXT[] = { 0xf9 };
    const uint8_t CIPHERTEXT[] = { 0x28 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb8(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB8MMT256-ENCRYPT-1", "[CFB8][MMT][256][ENCRYPT][n1]") {
    const uint8_t KEY[] = { 0xe0,0x4e,0x43,0x17,0x31,0x13,0x10,0x9e,0x13,0x43,0x39,0x38,0x42,0xfe,0x6c,0xae,0xf3,0xf8,0xa2,0xe5,0x06,0xd7,0xf5,0x5f,0x83,0xdc,0xb1,0x04,0x44,0xc6,0xad,0x23 };
    const uint8_t IV[] = { 0xa3,0x8b,0x88,0xa2,0x93,0xb0,0x77,0xfb,0x55,0x46,0x63,0x6a,0xad,0x90,0xd6,0x63 };
    const uint8_t PLAINTEXT[] = { 0x29,0x14 };
    const uint8_t CIPHERTEXT[] = { 0x69,0xa6 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb8(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB8MMT256-ENCRYPT-2", "[CFB8][MMT][256][ENCRYPT][n2]") {
    const uint8_t KEY[] = { 0x06,0x48,0x74,0x09,0x2f,0x7a,0x13,0xcc,0x44,0x62,0x24,0x7a,0xd4,0x23,0xd0,0xe9,0x6e,0xdf,0x42,0xe8,0xb6,0x7a,0x5a,0x23,0xb7,0xa0,0xa6,0x47,0x7b,0x09,0x8e,0x66 };
    const uint8_t IV[] = { 0x33,0x8c,0x55,0x2f,0xf1,0xec,0xa1,0x44,0x08,0xe0,0x5d,0x8c,0xf9,0xf3,0xb3,0x1b };
    const uint8_t PLAINTEXT[] = { 0xb9,0x74,0xfa };
    const uint8_t CIPHERTEXT[] = { 0x1c,0xff,0x95 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb8(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB8MMT256-ENCRYPT-3", "[CFB8][MMT][256][ENCRYPT][n3]") {
    const uint8_t KEY[] = { 0x56,0x79,0x4a,0xdb,0x0e,0xf0,0x4a,0xed,0xde,0xab,0xd6,0x50,0xde,0x73,0x65,0x31,0xd4,0x08,0x83,0x79,0x54,0xb9,0x19,0x00,0x2c,0x33,0xed,0xfd,0xff,0x97,0x6c,0xc2 };
    const uint8_t IV[] = { 0x71,0xb5,0x52,0x6f,0xac,0xea,0x42,0x36,0xd3,0x3f,0x1f,0x41,0x07,0xe4,0xb0,0x4f };
    const uint8_t PLAINTEXT[] = { 0xdb,0x77,0x49,0x12 };
    const uint8_t CIPHERTEXT[] = { 0xf0,0x4d,0x9d,0x4f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb8(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB8MMT256-ENCRYPT-4", "[CFB8][MMT][256][ENCRYPT][n4]") {
    const uint8_t KEY[] = { 0xdd,0xdd,0x7f,0x23,0x4e,0x7d,0x0e,0x6e,0xc6,0x45,0x60,0xb9,0x64,0x30,0x98,0x6a,0x85,0x6f,0x2e,0xe9,0x80,0x54,0x43,0xa7,0x94,0x6e,0x31,0x60,0x1e,0xf6,0x67,0x9d };
    const uint8_t IV[] = { 0xe2,0x0f,0x39,0xdb,0x00,0x25,0xeb,0x24,0x49,0x1b,0xd0,0x60,0x12,0x88,0x71,0x08 };
    const uint8_t PLAINTEXT[] = { 0xad,0x1d,0x53,0x11,0xea };
    const uint8_t CIPHERTEXT[] = { 0x19,0xcc,0x97,0xa6,0x62 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb8(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB8MMT256-ENCRYPT-5", "[CFB8][MMT][256][ENCRYPT][n5]") {
    const uint8_t KEY[] = { 0xec,0x73,0xa7,0x60,0x27,0x2c,0x83,0xf9,0x17,0x71,0xb3,0xab,0x7b,0x18,0x87,0x15,0xc6,0xd6,0xaf,0xb9,0xc5,0x54,0xfe,0xae,0x83,0x85,0x6e,0x96,0x6a,0x38,0x63,0xd0 };
    const uint8_t IV[] = { 0xae,0x7b,0xfa,0x38,0xfd,0x25,0x77,0x8f,0xcf,0x66,0xce,0x81,0x57,0xf6,0xe4,0x2e };
    const uint8_t PLAINTEXT[] = { 0x02,0xfe,0x72,0x4f,0xbc,0x5d };
    const uint8_t CIPHERTEXT[] = { 0xb0,0xec,0xa6,0x34,0x05,0xf4 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb8(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB8MMT256-ENCRYPT-6", "[CFB8][MMT][256][ENCRYPT][n6]") {
    const uint8_t KEY[] = { 0xa6,0x68,0x74,0xca,0x0b,0x70,0xfb,0x98,0xb3,0x7c,0x03,0x3e,0xc9,0x64,0x13,0xf3,0x39,0xad,0xae,0x02,0xac,0xad,0xe0,0x15,0xb9,0xf0,0x16,0xb4,0x59,0xdb,0x33,0x09 };
    const uint8_t IV[] = { 0x6e,0xd4,0x80,0xd9,0xe4,0xed,0x03,0x1c,0xf6,0x6b,0xb1,0xe0,0x7f,0x8d,0x55,0x14 };
    const uint8_t PLAINTEXT[] = { 0xb4,0x77,0x7e,0x6b,0xcd,0x9a,0x05 };
    const uint8_t CIPHERTEXT[] = { 0x8c,0x01,0x73,0x97,0xad,0x5b,0xab };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb8(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB8MMT256-ENCRYPT-7", "[CFB8][MMT][256][ENCRYPT][n7]") {
    const uint8_t KEY[] = { 0xa3,0xdb,0xbb,0x77,0x5a,0xda,0x92,0xb0,0xb8,0xed,0x16,0x32,0x44,0x4e,0x21,0xc1,0xc8,0x6f,0xf3,0xeb,0xa8,0xf6,0x28,0x30,0x73,0x06,0xe7,0x66,0xb8,0xc1,0x5b,0x5c };
    const uint8_t IV[] = { 0x4e,0xc5,0x6a,0x8e,0x54,0x1f,0x5c,0xfe,0x7b,0x8a,0xb9,0x47,0xbf,0xa4,0xfd,0x08 };
    const uint8_t PLAINTEXT[] = { 0x1d,0x70,0xa5,0xa8,0x2b,0xad,0xf5,0xea };
    const uint8_t CIPHERTEXT[] = { 0x1e,0x22,0xbe,0xbe,0xbe,0xac,0xd8,0x1d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb8(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB8MMT256-ENCRYPT-8", "[CFB8][MMT][256][ENCRYPT][n8]") {
    const uint8_t KEY[] = { 0x64,0x13,0x5e,0x67,0xc0,0xca,0x1a,0xce,0xf3,0x36,0x0d,0x93,0x0a,0xfc,0xd7,0x26,0xc5,0xb0,0x48,0x61,0xa6,0x9c,0x1b,0x6a,0x48,0xbd,0xe1,0xda,0xf2,0x0f,0x3b,0x1f };
    const uint8_t IV[] = { 0x53,0x77,0xa1,0x54,0xd5,0xf9,0x48,0x18,0x9f,0x9a,0xa5,0x7b,0x46,0x6c,0x16,0xb2 };
    const uint8_t PLAINTEXT[] = { 0xa3,0x6c,0xa5,0xea,0x38,0x2a,0x32,0x2e,0xef };
    const uint8_t CIPHERTEXT[] = { 0x31,0x05,0x01,0x65,0x67,0xd3,0x17,0x4a,0xed };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb8(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB8MMT256-ENCRYPT-9", "[CFB8][MMT][256][ENCRYPT][n9]") {
    const uint8_t KEY[] = { 0xeb,0xbb,0x45,0x66,0xb5,0xe1,0x82,0xe0,0xf0,0x72,0x46,0x6b,0x0b,0x31,0x1d,0xf3,0x8f,0x91,0x75,0xbc,0x02,0x13,0xa5,0x53,0x0b,0xce,0x2e,0xc4,0xd7,0x4f,0x40,0x0d };
    const uint8_t IV[] = { 0x09,0x56,0xa4,0x8e,0x01,0x00,0x2c,0x9e,0x16,0x37,0x6d,0x6e,0x30,0x8d,0xba,0xd1 };
    const uint8_t PLAINTEXT[] = { 0xb0,0xfe,0x25,0xac,0x8d,0x3d,0x28,0xa2,0xf4,0x71 };
    const uint8_t CIPHERTEXT[] = { 0x63,0x8c,0x68,0x23,0xe7,0x25,0x6f,0xb5,0x62,0x6e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb8(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB8MMT256-DECRYPT-0", "[CFB8][MMT][256][DECRYPT][n0]") {
    const uint8_t KEY[] = { 0x16,0x87,0x83,0x15,0x80,0xcb,0x76,0x43,0x21,0xa9,0xd6,0x74,0xdb,0xd0,0xa9,0x64,0x0f,0x66,0x8b,0x0f,0x58,0xef,0x01,0xb8,0x7a,0x71,0x0b,0x30,0x95,0xd5,0xf8,0x55 };
    const uint8_t IV[] = { 0x6c,0xd5,0xbe,0xc6,0xd6,0xe1,0xfd,0x23,0xaf,0xc5,0x43,0xb8,0xf8,0x0d,0x3f,0x89 };
    const uint8_t PLAINTEXT[] = { 0x98 };
    const uint8_t CIPHERTEXT[] = { 0x6f };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb8(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB8MMT256-DECRYPT-1", "[CFB8][MMT][256][DECRYPT][n1]") {
    const uint8_t KEY[] = { 0xb6,0xb5,0x04,0xe8,0xb7,0x06,0x53,0x73,0xea,0x31,0xcd,0x54,0x9e,0x52,0xed,0xa7,0xcb,0x96,0xfd,0x1d,0xb1,0x4e,0xdd,0xac,0xbc,0x42,0x00,0x85,0xab,0x48,0xb7,0x47 };
    const uint8_t IV[] = { 0x87,0x0e,0xcd,0x45,0xb1,0x24,0x18,0x03,0xdd,0xaf,0x8b,0xad,0x15,0xa0,0x25,0xd7 };
    const uint8_t PLAINTEXT[] = { 0x35,0x72 };
    const uint8_t CIPHERTEXT[] = { 0x17,0xd4 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb8(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB8MMT256-DECRYPT-2", "[CFB8][MMT][256][DECRYPT][n2]") {
    const uint8_t KEY[] = { 0x6a,0xd3,0x10,0x5e,0x15,0xfb,0x5b,0x74,0x2b,0xf4,0xfe,0x1e,0xb8,0xe9,0x8c,0x6c,0x1f,0xfe,0xa6,0x53,0x10,0x7c,0x84,0xf6,0xb4,0x2e,0xd1,0x23,0x2a,0x0b,0xbc,0x21 };
    const uint8_t IV[] = { 0x17,0x53,0x4c,0x89,0xc4,0xea,0xe5,0xde,0xa6,0xea,0x35,0x3d,0xde,0x7b,0x16,0x23 };
    const uint8_t PLAINTEXT[] = { 0xf9,0x41,0x1a };
    const uint8_t CIPHERTEXT[] = { 0xa9,0x84,0x1e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb8(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB8MMT256-DECRYPT-3", "[CFB8][MMT][256][DECRYPT][n3]") {
    const uint8_t KEY[] = { 0x75,0x8f,0x3f,0xa8,0xb2,0xb2,0x89,0xf1,0x9f,0xd5,0x9e,0x73,0x16,0xbe,0x40,0xb9,0x04,0xef,0xf7,0xf5,0x65,0xca,0xac,0x45,0x70,0xf9,0x72,0x36,0x0e,0x0d,0xa7,0x87 };
    const uint8_t IV[] = { 0xb2,0x13,0x35,0xae,0x98,0x08,0x98,0xfa,0x92,0xc4,0xb3,0x06,0x9e,0x53,0x29,0x73 };
    const uint8_t PLAINTEXT[] = { 0x47,0x88,0x78,0x72 };
    const uint8_t CIPHERTEXT[] = { 0x84,0xb3,0x5e,0x25 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb8(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB8MMT256-DECRYPT-4", "[CFB8][MMT][256][DECRYPT][n4]") {
    const uint8_t KEY[] = { 0x80,0x2e,0x85,0x4e,0xb7,0x99,0x50,0x09,0x75,0xd9,0x60,0xa6,0x78,0x85,0x82,0x0d,0x19,0x5e,0x02,0xab,0x23,0xd5,0x1f,0x15,0xe5,0xcd,0xbc,0xee,0x86,0xa1,0x58,0x0c };
    const uint8_t IV[] = { 0x94,0x47,0x8c,0x4e,0x44,0xe2,0xfa,0x8d,0x2e,0x6b,0xc4,0x3d,0x38,0x45,0x97,0xe6 };
    const uint8_t PLAINTEXT[] = { 0xed,0x41,0x4b,0x56,0x89 };
    const uint8_t CIPHERTEXT[] = { 0xd1,0xe9,0x6b,0xf1,0xe8 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb8(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB8MMT256-DECRYPT-5", "[CFB8][MMT][256][DECRYPT][n5]") {
    const uint8_t KEY[] = { 0x3a,0x0c,0x03,0xca,0x9d,0x1e,0x5d,0x49,0xbb,0x37,0xf9,0x04,0x1f,0x88,0xd1,0x59,0xc3,0xf1,0xd5,0xce,0x26,0xc7,0x98,0xf5,0x9e,0xd5,0x4a,0x93,0xf0,0xa0,0xe6,0x00 };
    const uint8_t IV[] = { 0x9a,0xae,0x38,0xba,0x83,0x2e,0x4b,0x09,0x3b,0x50,0x44,0x40,0x74,0x51,0x7d,0x20 };
    const uint8_t PLAINTEXT[] = { 0x82,0x07,0xee,0xe2,0xa7,0xab };
    const uint8_t CIPHERTEXT[] = { 0x74,0x41,0x0c,0xcd,0x12,0xda };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb8(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB8MMT256-DECRYPT-6", "[CFB8][MMT][256][DECRYPT][n6]") {
    const uint8_t KEY[] = { 0xee,0x05,0x46,0x21,0x28,0xfe,0xa7,0x5e,0x91,0x9f,0x6f,0x43,0x6c,0xb1,0x98,0xf2,0x22,0x84,0x7d,0x69,0x8a,0x28,0x3f,0x57,0x67,0xdf,0x68,0x2d,0x33,0xd3,0xce,0x77 };
    const uint8_t IV[] = { 0xd2,0xad,0x55,0xe4,0x18,0x87,0x07,0x51,0x84,0x63,0x51,0x12,0xa2,0x2f,0xc0,0x93 };
    const uint8_t PLAINTEXT[] = { 0xaf,0xf3,0xaa,0x4c,0x24,0xe3,0x53 };
    const uint8_t CIPHERTEXT[] = { 0xff,0x03,0x9e,0x89,0x87,0x7b,0x44 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb8(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB8MMT256-DECRYPT-7", "[CFB8][MMT][256][DECRYPT][n7]") {
    const uint8_t KEY[] = { 0x08,0xab,0xbd,0xcc,0x3e,0xb9,0xc1,0x71,0x7d,0xb1,0xfa,0xa3,0x8d,0xcd,0x08,0x93,0xaf,0xd5,0xe1,0x6e,0x25,0x96,0x74,0x7a,0xf5,0x8f,0x8d,0x61,0xeb,0xed,0xf9,0xcd };
    const uint8_t IV[] = { 0xb9,0x25,0xc8,0xdc,0x9a,0x9b,0x55,0xa4,0x37,0x2e,0xa6,0xd3,0x7d,0x21,0xc1,0xeb };
    const uint8_t PLAINTEXT[] = { 0xb7,0x37,0x00,0x50,0x28,0x8b,0xf6,0x00 };
    const uint8_t CIPHERTEXT[] = { 0xe1,0x76,0xba,0x99,0xea,0x60,0x2f,0xd9 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb8(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB8MMT256-DECRYPT-8", "[CFB8][MMT][256][DECRYPT][n8]") {
    const uint8_t KEY[] = { 0x56,0xd4,0x04,0xa8,0x93,0xfb,0x3b,0x3f,0x59,0x4a,0xab,0x18,0x93,0x92,0x30,0xb0,0x96,0x64,0x6a,0x37,0xa7,0x81,0x62,0x9f,0xbd,0x92,0x70,0xf3,0x89,0x1a,0x5c,0xea };
    const uint8_t IV[] = { 0xe5,0x90,0x6b,0x36,0xf2,0xd9,0x7e,0x6f,0x2d,0xb1,0x9b,0x6c,0x7a,0x3c,0xe3,0x19 };
    const uint8_t PLAINTEXT[] = { 0xe4,0x49,0x95,0xbb,0xb0,0xff,0xf4,0x0f,0xee };
    const uint8_t CIPHERTEXT[] = { 0xc5,0x5a,0x9a,0x91,0x7a,0x80,0x9a,0x78,0x4b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb8(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB8MMT256-DECRYPT-9", "[CFB8][MMT][256][DECRYPT][n9]") {
    const uint8_t KEY[] = { 0xec,0x13,0x06,0x25,0x51,0xe4,0xd7,0x29,0x1e,0x32,0x0f,0x56,0x5b,0x74,0x9e,0xea,0x18,0x09,0xb6,0x63,0xb2,0x6f,0x2c,0x4d,0x53,0xb5,0x20,0x58,0xb8,0x33,0xe0,0xad };
    const uint8_t IV[] = { 0xfb,0xfa,0x5a,0x52,0x8e,0x20,0x86,0x30,0x12,0x79,0x0c,0x2a,0xba,0xfb,0x5a,0x0c };
    const uint8_t PLAINTEXT[] = { 0x54,0x7b,0xfd,0x64,0x2c,0xf6,0xe1,0x2e,0xd9,0x42 };
    const uint8_t CIPHERTEXT[] = { 0x2b,0xfc,0x3f,0x02,0x09,0x30,0x71,0x40,0x10,0x1a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb8(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

