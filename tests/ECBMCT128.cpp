#include "rijndael.h"
#include "catch.hpp"
#include <cstring>

static inline std::string buf2str(const uint8_t *buf, size_t len) {
    std::ostringstream ss; ss << std::hex << std::setfill('0');
    for (size_t i = 0; i < len; ++i) {
        ss << std::setw(2) << static_cast<int>(buf[i]) << ' ';
    }
    return ss.str();
}

TEST_CASE("ECBMCT128-ENCRYPT-0", "[ECB][MCT][128][ENCRYPT][n0]") {
    const uint8_t KEY[] = { 0x13,0x9a,0x35,0x42,0x2f,0x1d,0x61,0xde,0x3c,0x91,0x78,0x7f,0xe0,0x50,0x7a,0xfd };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xb9,0x14,0x5a,0x76,0x8b,0x7d,0xc4,0x89,0xa0,0x96,0xb5,0x46,0xf4,0x3b,0x23,0x1f };
    const uint8_t CIPHERTEXT[] = { 0xd7,0xc3,0xff,0xac,0x90,0x31,0x23,0x86,0x50,0x90,0x1e,0x15,0x73,0x64,0xc3,0x86 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-1", "[ECB][MCT][128][ENCRYPT][n1]") {
    const uint8_t KEY[] = { 0xc4,0x59,0xca,0xee,0xbf,0x2c,0x42,0x58,0x6c,0x01,0x66,0x6a,0x93,0x34,0xb9,0x7b };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xd7,0xc3,0xff,0xac,0x90,0x31,0x23,0x86,0x50,0x90,0x1e,0x15,0x73,0x64,0xc3,0x86 };
    const uint8_t CIPHERTEXT[] = { 0xbc,0x36,0x37,0xda,0x2d,0xaf,0x8f,0xcf,0x7c,0x68,0xbb,0x28,0xc1,0x43,0xa0,0xa4 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-2", "[ECB][MCT][128][ENCRYPT][n2]") {
    const uint8_t KEY[] = { 0x78,0x6f,0xfd,0x34,0x92,0x83,0xcd,0x97,0x10,0x69,0xdd,0x42,0x52,0x77,0x19,0xdf };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xbc,0x36,0x37,0xda,0x2d,0xaf,0x8f,0xcf,0x7c,0x68,0xbb,0x28,0xc1,0x43,0xa0,0xa4 };
    const uint8_t CIPHERTEXT[] = { 0x9c,0x88,0xa8,0xdb,0x79,0x8f,0x48,0xdf,0x1a,0xc4,0x93,0x6a,0xfa,0x95,0x9e,0xac };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-3", "[ECB][MCT][128][ENCRYPT][n3]") {
    const uint8_t KEY[] = { 0xe4,0xe7,0x55,0xef,0xeb,0x0c,0x85,0x48,0x0a,0xad,0x4e,0x28,0xa8,0xe2,0x87,0x73 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x9c,0x88,0xa8,0xdb,0x79,0x8f,0x48,0xdf,0x1a,0xc4,0x93,0x6a,0xfa,0x95,0x9e,0xac };
    const uint8_t CIPHERTEXT[] = { 0xb8,0x7a,0xaa,0x1c,0x76,0xa7,0x75,0xd9,0x4c,0x2d,0xdf,0x82,0xab,0xe5,0xc6,0x6e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-4", "[ECB][MCT][128][ENCRYPT][n4]") {
    const uint8_t KEY[] = { 0x5c,0x9d,0xff,0xf3,0x9d,0xab,0xf0,0x91,0x46,0x80,0x91,0xaa,0x03,0x07,0x41,0x1d };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xb8,0x7a,0xaa,0x1c,0x76,0xa7,0x75,0xd9,0x4c,0x2d,0xdf,0x82,0xab,0xe5,0xc6,0x6e };
    const uint8_t CIPHERTEXT[] = { 0x79,0xee,0x21,0x27,0x34,0xf1,0x4d,0x1b,0xf5,0xa5,0x9d,0x46,0xe8,0xc2,0xfa,0x34 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-5", "[ECB][MCT][128][ENCRYPT][n5]") {
    const uint8_t KEY[] = { 0x25,0x73,0xde,0xd4,0xa9,0x5a,0xbd,0x8a,0xb3,0x25,0x0c,0xec,0xeb,0xc5,0xbb,0x29 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x79,0xee,0x21,0x27,0x34,0xf1,0x4d,0x1b,0xf5,0xa5,0x9d,0x46,0xe8,0xc2,0xfa,0x34 };
    const uint8_t CIPHERTEXT[] = { 0x09,0xdf,0x49,0x13,0x5a,0xeb,0x8e,0x37,0x3a,0x19,0xfa,0x45,0x7a,0xb2,0x80,0xa0 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-6", "[ECB][MCT][128][ENCRYPT][n6]") {
    const uint8_t KEY[] = { 0x2c,0xac,0x97,0xc7,0xf3,0xb1,0x33,0xbd,0x89,0x3c,0xf6,0xa9,0x91,0x77,0x3b,0x89 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x09,0xdf,0x49,0x13,0x5a,0xeb,0x8e,0x37,0x3a,0x19,0xfa,0x45,0x7a,0xb2,0x80,0xa0 };
    const uint8_t CIPHERTEXT[] = { 0xc5,0x22,0x63,0xef,0xa6,0x37,0x92,0x09,0xd1,0x7e,0x87,0xac,0x25,0x06,0x15,0xcb };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-7", "[ECB][MCT][128][ENCRYPT][n7]") {
    const uint8_t KEY[] = { 0xe9,0x8e,0xf4,0x28,0x55,0x86,0xa1,0xb4,0x58,0x42,0x71,0x05,0xb4,0x71,0x2e,0x42 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xc5,0x22,0x63,0xef,0xa6,0x37,0x92,0x09,0xd1,0x7e,0x87,0xac,0x25,0x06,0x15,0xcb };
    const uint8_t CIPHERTEXT[] = { 0x33,0x6b,0xed,0x01,0x7e,0x10,0xa2,0x47,0xee,0x92,0x98,0x98,0x62,0x43,0x11,0x63 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-8", "[ECB][MCT][128][ENCRYPT][n8]") {
    const uint8_t KEY[] = { 0xda,0xe5,0x19,0x29,0x2b,0x96,0x03,0xf3,0xb6,0xd0,0xe9,0x9d,0xd6,0x32,0x3f,0x21 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x33,0x6b,0xed,0x01,0x7e,0x10,0xa2,0x47,0xee,0x92,0x98,0x98,0x62,0x43,0x11,0x63 };
    const uint8_t CIPHERTEXT[] = { 0xb1,0x33,0x10,0x58,0x1f,0xfe,0x5b,0x10,0xaa,0xef,0xde,0xb8,0x99,0x2a,0xec,0x18 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-9", "[ECB][MCT][128][ENCRYPT][n9]") {
    const uint8_t KEY[] = { 0x6b,0xd6,0x09,0x71,0x34,0x68,0x58,0xe3,0x1c,0x3f,0x37,0x25,0x4f,0x18,0xd3,0x39 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xb1,0x33,0x10,0x58,0x1f,0xfe,0x5b,0x10,0xaa,0xef,0xde,0xb8,0x99,0x2a,0xec,0x18 };
    const uint8_t CIPHERTEXT[] = { 0xb0,0xea,0xed,0xe3,0xf3,0xee,0xbf,0xef,0x88,0x82,0x2a,0x6e,0xde,0x19,0x50,0xb1 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-10", "[ECB][MCT][128][ENCRYPT][n10]") {
    const uint8_t KEY[] = { 0xdb,0x3c,0xe4,0x92,0xc7,0x86,0xe7,0x0c,0x94,0xbd,0x1d,0x4b,0x91,0x01,0x83,0x88 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xb0,0xea,0xed,0xe3,0xf3,0xee,0xbf,0xef,0x88,0x82,0x2a,0x6e,0xde,0x19,0x50,0xb1 };
    const uint8_t CIPHERTEXT[] = { 0x37,0x89,0x1f,0xc2,0x53,0xb0,0x0d,0xe1,0x31,0x55,0xd5,0x51,0x7e,0x1b,0x78,0x90 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-11", "[ECB][MCT][128][ENCRYPT][n11]") {
    const uint8_t KEY[] = { 0xec,0xb5,0xfb,0x50,0x94,0x36,0xea,0xed,0xa5,0xe8,0xc8,0x1a,0xef,0x1a,0xfb,0x18 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x37,0x89,0x1f,0xc2,0x53,0xb0,0x0d,0xe1,0x31,0x55,0xd5,0x51,0x7e,0x1b,0x78,0x90 };
    const uint8_t CIPHERTEXT[] = { 0x8f,0x57,0x4c,0x85,0xfa,0x44,0xaf,0x2d,0x43,0xc9,0x5e,0xe5,0xf6,0x27,0xfc,0x9d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-12", "[ECB][MCT][128][ENCRYPT][n12]") {
    const uint8_t KEY[] = { 0x63,0xe2,0xb7,0xd5,0x6e,0x72,0x45,0xc0,0xe6,0x21,0x96,0xff,0x19,0x3d,0x07,0x85 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x8f,0x57,0x4c,0x85,0xfa,0x44,0xaf,0x2d,0x43,0xc9,0x5e,0xe5,0xf6,0x27,0xfc,0x9d };
    const uint8_t CIPHERTEXT[] = { 0x6c,0x0a,0xf6,0x70,0x92,0x25,0xf3,0x28,0xa0,0x22,0x5b,0x22,0x80,0xef,0xa3,0xe3 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-13", "[ECB][MCT][128][ENCRYPT][n13]") {
    const uint8_t KEY[] = { 0x0f,0xe8,0x41,0xa5,0xfc,0x57,0xb6,0xe8,0x46,0x03,0xcd,0xdd,0x99,0xd2,0xa4,0x66 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x6c,0x0a,0xf6,0x70,0x92,0x25,0xf3,0x28,0xa0,0x22,0x5b,0x22,0x80,0xef,0xa3,0xe3 };
    const uint8_t CIPHERTEXT[] = { 0xe2,0xdc,0x36,0x07,0x3f,0xe1,0x92,0xe7,0x12,0x37,0x3a,0x87,0x02,0xe8,0xad,0xce };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-14", "[ECB][MCT][128][ENCRYPT][n14]") {
    const uint8_t KEY[] = { 0xed,0x34,0x77,0xa2,0xc3,0xb6,0x24,0x0f,0x54,0x34,0xf7,0x5a,0x9b,0x3a,0x09,0xa8 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xe2,0xdc,0x36,0x07,0x3f,0xe1,0x92,0xe7,0x12,0x37,0x3a,0x87,0x02,0xe8,0xad,0xce };
    const uint8_t CIPHERTEXT[] = { 0x1e,0x91,0xd1,0xe1,0xf8,0x2f,0x1d,0x32,0x01,0x86,0x21,0x0a,0x79,0x2f,0x7b,0xa1 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-15", "[ECB][MCT][128][ENCRYPT][n15]") {
    const uint8_t KEY[] = { 0xf3,0xa5,0xa6,0x43,0x3b,0x99,0x39,0x3d,0x55,0xb2,0xd6,0x50,0xe2,0x15,0x72,0x09 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x1e,0x91,0xd1,0xe1,0xf8,0x2f,0x1d,0x32,0x01,0x86,0x21,0x0a,0x79,0x2f,0x7b,0xa1 };
    const uint8_t CIPHERTEXT[] = { 0x22,0x8e,0xac,0x74,0x16,0x6d,0xa2,0x61,0xd7,0xfa,0x83,0xf4,0x3d,0x9d,0xdd,0x2f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-16", "[ECB][MCT][128][ENCRYPT][n16]") {
    const uint8_t KEY[] = { 0xd1,0x2b,0x0a,0x37,0x2d,0xf4,0x9b,0x5c,0x82,0x48,0x55,0xa4,0xdf,0x88,0xaf,0x26 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x22,0x8e,0xac,0x74,0x16,0x6d,0xa2,0x61,0xd7,0xfa,0x83,0xf4,0x3d,0x9d,0xdd,0x2f };
    const uint8_t CIPHERTEXT[] = { 0x25,0xd0,0xde,0x6a,0x89,0x43,0x61,0xa1,0xb8,0x3d,0x5f,0xa2,0xfd,0x60,0x7f,0x26 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-17", "[ECB][MCT][128][ENCRYPT][n17]") {
    const uint8_t KEY[] = { 0xf4,0xfb,0xd4,0x5d,0xa4,0xb7,0xfa,0xfd,0x3a,0x75,0x0a,0x06,0x22,0xe8,0xd0,0x00 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x25,0xd0,0xde,0x6a,0x89,0x43,0x61,0xa1,0xb8,0x3d,0x5f,0xa2,0xfd,0x60,0x7f,0x26 };
    const uint8_t CIPHERTEXT[] = { 0x36,0x09,0x5d,0xc3,0xe6,0x59,0xec,0x50,0xca,0x7f,0x6f,0x82,0x07,0xd2,0x00,0x31 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-18", "[ECB][MCT][128][ENCRYPT][n18]") {
    const uint8_t KEY[] = { 0xc2,0xf2,0x89,0x9e,0x42,0xee,0x16,0xad,0xf0,0x0a,0x65,0x84,0x25,0x3a,0xd0,0x31 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x36,0x09,0x5d,0xc3,0xe6,0x59,0xec,0x50,0xca,0x7f,0x6f,0x82,0x07,0xd2,0x00,0x31 };
    const uint8_t CIPHERTEXT[] = { 0x8d,0xbf,0xe9,0x65,0x07,0x84,0x68,0x87,0x5d,0x86,0x14,0x51,0x64,0xc4,0xab,0x4f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-19", "[ECB][MCT][128][ENCRYPT][n19]") {
    const uint8_t KEY[] = { 0x4f,0x4d,0x60,0xfb,0x45,0x6a,0x7e,0x2a,0xad,0x8c,0x71,0xd5,0x41,0xfe,0x7b,0x7e };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x8d,0xbf,0xe9,0x65,0x07,0x84,0x68,0x87,0x5d,0x86,0x14,0x51,0x64,0xc4,0xab,0x4f };
    const uint8_t CIPHERTEXT[] = { 0x40,0x32,0xbb,0x81,0x37,0xd4,0xb9,0xeb,0x93,0x64,0x43,0x59,0xa9,0x95,0xbb,0x4e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-20", "[ECB][MCT][128][ENCRYPT][n20]") {
    const uint8_t KEY[] = { 0x0f,0x7f,0xdb,0x7a,0x72,0xbe,0xc7,0xc1,0x3e,0xe8,0x32,0x8c,0xe8,0x6b,0xc0,0x30 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x40,0x32,0xbb,0x81,0x37,0xd4,0xb9,0xeb,0x93,0x64,0x43,0x59,0xa9,0x95,0xbb,0x4e };
    const uint8_t CIPHERTEXT[] = { 0x85,0x30,0x8a,0xa9,0x2c,0x62,0x5a,0x25,0xbd,0x5f,0x4a,0x40,0x37,0x5c,0x6b,0xaa };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-21", "[ECB][MCT][128][ENCRYPT][n21]") {
    const uint8_t KEY[] = { 0x8a,0x4f,0x51,0xd3,0x5e,0xdc,0x9d,0xe4,0x83,0xb7,0x78,0xcc,0xdf,0x37,0xab,0x9a };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x85,0x30,0x8a,0xa9,0x2c,0x62,0x5a,0x25,0xbd,0x5f,0x4a,0x40,0x37,0x5c,0x6b,0xaa };
    const uint8_t CIPHERTEXT[] = { 0x73,0x28,0x3f,0xc5,0x9e,0x04,0xe8,0x0a,0x86,0x7e,0x47,0x8d,0x97,0xa3,0xf3,0x88 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-22", "[ECB][MCT][128][ENCRYPT][n22]") {
    const uint8_t KEY[] = { 0xf9,0x67,0x6e,0x16,0xc0,0xd8,0x75,0xee,0x05,0xc9,0x3f,0x41,0x48,0x94,0x58,0x12 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x73,0x28,0x3f,0xc5,0x9e,0x04,0xe8,0x0a,0x86,0x7e,0x47,0x8d,0x97,0xa3,0xf3,0x88 };
    const uint8_t CIPHERTEXT[] = { 0x41,0x8c,0x1f,0xe3,0x77,0xe4,0xef,0x98,0x32,0xf2,0x02,0x86,0xb1,0x67,0xf9,0x16 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-23", "[ECB][MCT][128][ENCRYPT][n23]") {
    const uint8_t KEY[] = { 0xb8,0xeb,0x71,0xf5,0xb7,0x3c,0x9a,0x76,0x37,0x3b,0x3d,0xc7,0xf9,0xf3,0xa1,0x04 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x41,0x8c,0x1f,0xe3,0x77,0xe4,0xef,0x98,0x32,0xf2,0x02,0x86,0xb1,0x67,0xf9,0x16 };
    const uint8_t CIPHERTEXT[] = { 0x60,0xad,0x13,0x41,0x52,0x5e,0x67,0xcf,0xfd,0xd6,0x8f,0xf6,0x71,0x25,0x3c,0x77 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-24", "[ECB][MCT][128][ENCRYPT][n24]") {
    const uint8_t KEY[] = { 0xd8,0x46,0x62,0xb4,0xe5,0x62,0xfd,0xb9,0xca,0xed,0xb2,0x31,0x88,0xd6,0x9d,0x73 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x60,0xad,0x13,0x41,0x52,0x5e,0x67,0xcf,0xfd,0xd6,0x8f,0xf6,0x71,0x25,0x3c,0x77 };
    const uint8_t CIPHERTEXT[] = { 0x4e,0xdf,0x6e,0x01,0xa7,0x6d,0xe6,0x15,0x3d,0x17,0x71,0x3a,0x49,0xd5,0xb0,0x28 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-25", "[ECB][MCT][128][ENCRYPT][n25]") {
    const uint8_t KEY[] = { 0x96,0x99,0x0c,0xb5,0x42,0x0f,0x1b,0xac,0xf7,0xfa,0xc3,0x0b,0xc1,0x03,0x2d,0x5b };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x4e,0xdf,0x6e,0x01,0xa7,0x6d,0xe6,0x15,0x3d,0x17,0x71,0x3a,0x49,0xd5,0xb0,0x28 };
    const uint8_t CIPHERTEXT[] = { 0x2c,0x85,0xeb,0xf9,0xe3,0xd8,0x05,0x96,0xf7,0x87,0x12,0xdf,0x56,0xac,0x77,0xcd };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-26", "[ECB][MCT][128][ENCRYPT][n26]") {
    const uint8_t KEY[] = { 0xba,0x1c,0xe7,0x4c,0xa1,0xd7,0x1e,0x3a,0x00,0x7d,0xd1,0xd4,0x97,0xaf,0x5a,0x96 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x2c,0x85,0xeb,0xf9,0xe3,0xd8,0x05,0x96,0xf7,0x87,0x12,0xdf,0x56,0xac,0x77,0xcd };
    const uint8_t CIPHERTEXT[] = { 0x8f,0xc8,0xef,0x9a,0xb7,0x46,0x27,0x12,0x97,0x7e,0x87,0xc7,0x41,0x79,0x5e,0xce };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-27", "[ECB][MCT][128][ENCRYPT][n27]") {
    const uint8_t KEY[] = { 0x35,0xd4,0x08,0xd6,0x16,0x91,0x39,0x28,0x97,0x03,0x56,0x13,0xd6,0xd6,0x04,0x58 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x8f,0xc8,0xef,0x9a,0xb7,0x46,0x27,0x12,0x97,0x7e,0x87,0xc7,0x41,0x79,0x5e,0xce };
    const uint8_t CIPHERTEXT[] = { 0x37,0xe9,0xac,0x80,0x0c,0xfb,0x19,0x13,0x3b,0x4e,0x9b,0x0c,0x41,0x8c,0xa0,0x98 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-28", "[ECB][MCT][128][ENCRYPT][n28]") {
    const uint8_t KEY[] = { 0x02,0x3d,0xa4,0x56,0x1a,0x6a,0x20,0x3b,0xac,0x4d,0xcd,0x1f,0x97,0x5a,0xa4,0xc0 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x37,0xe9,0xac,0x80,0x0c,0xfb,0x19,0x13,0x3b,0x4e,0x9b,0x0c,0x41,0x8c,0xa0,0x98 };
    const uint8_t CIPHERTEXT[] = { 0xcb,0x7c,0xd7,0x61,0x9c,0xaa,0x60,0x5e,0x45,0xf9,0x5f,0x5b,0x31,0xa8,0x54,0x95 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-29", "[ECB][MCT][128][ENCRYPT][n29]") {
    const uint8_t KEY[] = { 0xc9,0x41,0x73,0x37,0x86,0xc0,0x40,0x65,0xe9,0xb4,0x92,0x44,0xa6,0xf2,0xf0,0x55 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xcb,0x7c,0xd7,0x61,0x9c,0xaa,0x60,0x5e,0x45,0xf9,0x5f,0x5b,0x31,0xa8,0x54,0x95 };
    const uint8_t CIPHERTEXT[] = { 0x6e,0x26,0x5e,0x5f,0xd0,0x30,0x84,0x7b,0x88,0x41,0xbf,0x66,0x52,0x99,0x63,0x92 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-30", "[ECB][MCT][128][ENCRYPT][n30]") {
    const uint8_t KEY[] = { 0xa7,0x67,0x2d,0x68,0x56,0xf0,0xc4,0x1e,0x61,0xf5,0x2d,0x22,0xf4,0x6b,0x93,0xc7 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x6e,0x26,0x5e,0x5f,0xd0,0x30,0x84,0x7b,0x88,0x41,0xbf,0x66,0x52,0x99,0x63,0x92 };
    const uint8_t CIPHERTEXT[] = { 0x5c,0x9a,0x7d,0x2c,0xe1,0xc8,0x6f,0x0b,0x34,0x25,0xb3,0xb6,0xaa,0xe1,0x08,0xe0 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-31", "[ECB][MCT][128][ENCRYPT][n31]") {
    const uint8_t KEY[] = { 0xfb,0xfd,0x50,0x44,0xb7,0x38,0xab,0x15,0x55,0xd0,0x9e,0x94,0x5e,0x8a,0x9b,0x27 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x5c,0x9a,0x7d,0x2c,0xe1,0xc8,0x6f,0x0b,0x34,0x25,0xb3,0xb6,0xaa,0xe1,0x08,0xe0 };
    const uint8_t CIPHERTEXT[] = { 0xc9,0x11,0xde,0xe5,0xff,0x31,0x8a,0x7e,0x79,0x9f,0x92,0xda,0xad,0xcb,0x3d,0x9a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-32", "[ECB][MCT][128][ENCRYPT][n32]") {
    const uint8_t KEY[] = { 0x32,0xec,0x8e,0xa1,0x48,0x09,0x21,0x6b,0x2c,0x4f,0x0c,0x4e,0xf3,0x41,0xa6,0xbd };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xc9,0x11,0xde,0xe5,0xff,0x31,0x8a,0x7e,0x79,0x9f,0x92,0xda,0xad,0xcb,0x3d,0x9a };
    const uint8_t CIPHERTEXT[] = { 0x7a,0x3a,0xfd,0xf1,0x04,0x10,0xf1,0xc4,0x7c,0x7d,0x92,0x8d,0x4a,0x8d,0x43,0x2a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-33", "[ECB][MCT][128][ENCRYPT][n33]") {
    const uint8_t KEY[] = { 0x48,0xd6,0x73,0x50,0x4c,0x19,0xd0,0xaf,0x50,0x32,0x9e,0xc3,0xb9,0xcc,0xe5,0x97 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x7a,0x3a,0xfd,0xf1,0x04,0x10,0xf1,0xc4,0x7c,0x7d,0x92,0x8d,0x4a,0x8d,0x43,0x2a };
    const uint8_t CIPHERTEXT[] = { 0xc6,0x81,0xb7,0xb6,0xd3,0xec,0x9d,0xc9,0x10,0x12,0xe3,0xb7,0x42,0x7c,0x67,0xad };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-34", "[ECB][MCT][128][ENCRYPT][n34]") {
    const uint8_t KEY[] = { 0x8e,0x57,0xc4,0xe6,0x9f,0xf5,0x4d,0x66,0x40,0x20,0x7d,0x74,0xfb,0xb0,0x82,0x3a };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xc6,0x81,0xb7,0xb6,0xd3,0xec,0x9d,0xc9,0x10,0x12,0xe3,0xb7,0x42,0x7c,0x67,0xad };
    const uint8_t CIPHERTEXT[] = { 0xcd,0x3f,0x84,0xbb,0xe9,0x58,0x53,0x6d,0x50,0x20,0x65,0xeb,0x37,0xae,0x10,0xb4 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-35", "[ECB][MCT][128][ENCRYPT][n35]") {
    const uint8_t KEY[] = { 0x43,0x68,0x40,0x5d,0x76,0xad,0x1e,0x0b,0x10,0x00,0x18,0x9f,0xcc,0x1e,0x92,0x8e };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xcd,0x3f,0x84,0xbb,0xe9,0x58,0x53,0x6d,0x50,0x20,0x65,0xeb,0x37,0xae,0x10,0xb4 };
    const uint8_t CIPHERTEXT[] = { 0x87,0x9d,0xb7,0x97,0xe6,0x86,0xb9,0x11,0x6c,0x25,0xc0,0x7f,0x4a,0xe6,0x75,0x93 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-36", "[ECB][MCT][128][ENCRYPT][n36]") {
    const uint8_t KEY[] = { 0xc4,0xf5,0xf7,0xca,0x90,0x2b,0xa7,0x1a,0x7c,0x25,0xd8,0xe0,0x86,0xf8,0xe7,0x1d };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x87,0x9d,0xb7,0x97,0xe6,0x86,0xb9,0x11,0x6c,0x25,0xc0,0x7f,0x4a,0xe6,0x75,0x93 };
    const uint8_t CIPHERTEXT[] = { 0x59,0x59,0xeb,0xd7,0xa1,0x16,0x77,0x13,0x42,0x9e,0xda,0x69,0x53,0x8c,0x53,0x6b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-37", "[ECB][MCT][128][ENCRYPT][n37]") {
    const uint8_t KEY[] = { 0x9d,0xac,0x1c,0x1d,0x31,0x3d,0xd0,0x09,0x3e,0xbb,0x02,0x89,0xd5,0x74,0xb4,0x76 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x59,0x59,0xeb,0xd7,0xa1,0x16,0x77,0x13,0x42,0x9e,0xda,0x69,0x53,0x8c,0x53,0x6b };
    const uint8_t CIPHERTEXT[] = { 0xf5,0x71,0x01,0xd7,0xfa,0x19,0xf9,0x7a,0x31,0xd6,0x0b,0x27,0x63,0x12,0x71,0x7c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-38", "[ECB][MCT][128][ENCRYPT][n38]") {
    const uint8_t KEY[] = { 0x68,0xdd,0x1d,0xca,0xcb,0x24,0x29,0x73,0x0f,0x6d,0x09,0xae,0xb6,0x66,0xc5,0x0a };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xf5,0x71,0x01,0xd7,0xfa,0x19,0xf9,0x7a,0x31,0xd6,0x0b,0x27,0x63,0x12,0x71,0x7c };
    const uint8_t CIPHERTEXT[] = { 0x6d,0xfb,0xbc,0x2b,0x14,0x75,0x68,0xc5,0x5a,0xdb,0xfd,0xc3,0xc7,0x06,0xed,0xb0 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-39", "[ECB][MCT][128][ENCRYPT][n39]") {
    const uint8_t KEY[] = { 0x05,0x26,0xa1,0xe1,0xdf,0x51,0x41,0xb6,0x55,0xb6,0xf4,0x6d,0x71,0x60,0x28,0xba };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x6d,0xfb,0xbc,0x2b,0x14,0x75,0x68,0xc5,0x5a,0xdb,0xfd,0xc3,0xc7,0x06,0xed,0xb0 };
    const uint8_t CIPHERTEXT[] = { 0x9c,0x4e,0xa9,0x00,0x23,0x06,0xd7,0x5e,0x7b,0x0f,0x03,0xe2,0xa7,0x2b,0x7a,0x1d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-40", "[ECB][MCT][128][ENCRYPT][n40]") {
    const uint8_t KEY[] = { 0x99,0x68,0x08,0xe1,0xfc,0x57,0x96,0xe8,0x2e,0xb9,0xf7,0x8f,0xd6,0x4b,0x52,0xa7 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x9c,0x4e,0xa9,0x00,0x23,0x06,0xd7,0x5e,0x7b,0x0f,0x03,0xe2,0xa7,0x2b,0x7a,0x1d };
    const uint8_t CIPHERTEXT[] = { 0xcb,0x99,0x75,0x33,0x6c,0xc0,0x5f,0x01,0x14,0xf2,0x6b,0xde,0x4c,0xc8,0x4f,0x8d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-41", "[ECB][MCT][128][ENCRYPT][n41]") {
    const uint8_t KEY[] = { 0x52,0xf1,0x7d,0xd2,0x90,0x97,0xc9,0xe9,0x3a,0x4b,0x9c,0x51,0x9a,0x83,0x1d,0x2a };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xcb,0x99,0x75,0x33,0x6c,0xc0,0x5f,0x01,0x14,0xf2,0x6b,0xde,0x4c,0xc8,0x4f,0x8d };
    const uint8_t CIPHERTEXT[] = { 0x90,0x2c,0x42,0x50,0xcf,0xf1,0x10,0xd7,0x92,0x93,0x8e,0x8d,0xcd,0x53,0x4c,0xf0 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-42", "[ECB][MCT][128][ENCRYPT][n42]") {
    const uint8_t KEY[] = { 0xc2,0xdd,0x3f,0x82,0x5f,0x66,0xd9,0x3e,0xa8,0xd8,0x12,0xdc,0x57,0xd0,0x51,0xda };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x90,0x2c,0x42,0x50,0xcf,0xf1,0x10,0xd7,0x92,0x93,0x8e,0x8d,0xcd,0x53,0x4c,0xf0 };
    const uint8_t CIPHERTEXT[] = { 0x14,0x02,0x42,0xf1,0x95,0xef,0x2e,0xf7,0xf6,0xee,0x23,0x57,0x4c,0x07,0x13,0x11 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-43", "[ECB][MCT][128][ENCRYPT][n43]") {
    const uint8_t KEY[] = { 0xd6,0xdf,0x7d,0x73,0xca,0x89,0xf7,0xc9,0x5e,0x36,0x31,0x8b,0x1b,0xd7,0x42,0xcb };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x14,0x02,0x42,0xf1,0x95,0xef,0x2e,0xf7,0xf6,0xee,0x23,0x57,0x4c,0x07,0x13,0x11 };
    const uint8_t CIPHERTEXT[] = { 0x3c,0x6d,0x4f,0xfa,0xfd,0xe8,0x66,0xf1,0xe9,0x94,0x48,0x0c,0x47,0xd2,0x0a,0x04 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-44", "[ECB][MCT][128][ENCRYPT][n44]") {
    const uint8_t KEY[] = { 0xea,0xb2,0x32,0x89,0x37,0x61,0x91,0x38,0xb7,0xa2,0x79,0x87,0x5c,0x05,0x48,0xcf };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x3c,0x6d,0x4f,0xfa,0xfd,0xe8,0x66,0xf1,0xe9,0x94,0x48,0x0c,0x47,0xd2,0x0a,0x04 };
    const uint8_t CIPHERTEXT[] = { 0x1c,0xa0,0x4a,0x21,0xad,0xdc,0x38,0xef,0x8b,0xfc,0x89,0x89,0xd3,0xd6,0xb3,0x3b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-45", "[ECB][MCT][128][ENCRYPT][n45]") {
    const uint8_t KEY[] = { 0xf6,0x12,0x78,0xa8,0x9a,0xbd,0xa9,0xd7,0x3c,0x5e,0xf0,0x0e,0x8f,0xd3,0xfb,0xf4 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x1c,0xa0,0x4a,0x21,0xad,0xdc,0x38,0xef,0x8b,0xfc,0x89,0x89,0xd3,0xd6,0xb3,0x3b };
    const uint8_t CIPHERTEXT[] = { 0xbb,0x88,0x75,0xee,0x3c,0x3c,0x8c,0x09,0x87,0xb1,0xc2,0x0f,0x99,0x90,0x28,0xe9 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-46", "[ECB][MCT][128][ENCRYPT][n46]") {
    const uint8_t KEY[] = { 0x4d,0x9a,0x0d,0x46,0xa6,0x81,0x25,0xde,0xbb,0xef,0x32,0x01,0x16,0x43,0xd3,0x1d };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xbb,0x88,0x75,0xee,0x3c,0x3c,0x8c,0x09,0x87,0xb1,0xc2,0x0f,0x99,0x90,0x28,0xe9 };
    const uint8_t CIPHERTEXT[] = { 0x9d,0x33,0x72,0x4d,0x80,0xa7,0x6f,0x20,0x33,0xa3,0x7a,0x85,0x14,0x03,0xef,0x28 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-47", "[ECB][MCT][128][ENCRYPT][n47]") {
    const uint8_t KEY[] = { 0xd0,0xa9,0x7f,0x0b,0x26,0x26,0x4a,0xfe,0x88,0x4c,0x48,0x84,0x02,0x40,0x3c,0x35 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x9d,0x33,0x72,0x4d,0x80,0xa7,0x6f,0x20,0x33,0xa3,0x7a,0x85,0x14,0x03,0xef,0x28 };
    const uint8_t CIPHERTEXT[] = { 0x4c,0x92,0xfe,0x15,0x2d,0x16,0xda,0x8e,0xa5,0x9b,0x9f,0x29,0xc7,0x5f,0x20,0xff };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-48", "[ECB][MCT][128][ENCRYPT][n48]") {
    const uint8_t KEY[] = { 0x9c,0x3b,0x81,0x1e,0x0b,0x30,0x90,0x70,0x2d,0xd7,0xd7,0xad,0xc5,0x1f,0x1c,0xca };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x4c,0x92,0xfe,0x15,0x2d,0x16,0xda,0x8e,0xa5,0x9b,0x9f,0x29,0xc7,0x5f,0x20,0xff };
    const uint8_t CIPHERTEXT[] = { 0x65,0x9c,0x76,0xf7,0x30,0x32,0xb0,0x19,0x2b,0x28,0x10,0x34,0xb6,0xa9,0x9a,0x3f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-49", "[ECB][MCT][128][ENCRYPT][n49]") {
    const uint8_t KEY[] = { 0xf9,0xa7,0xf7,0xe9,0x3b,0x02,0x20,0x69,0x06,0xff,0xc7,0x99,0x73,0xb6,0x86,0xf5 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x65,0x9c,0x76,0xf7,0x30,0x32,0xb0,0x19,0x2b,0x28,0x10,0x34,0xb6,0xa9,0x9a,0x3f };
    const uint8_t CIPHERTEXT[] = { 0x5d,0x29,0x66,0x37,0x69,0x7c,0xca,0xd8,0x4f,0xc7,0x79,0x36,0xa3,0x1c,0x26,0x55 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-50", "[ECB][MCT][128][ENCRYPT][n50]") {
    const uint8_t KEY[] = { 0xa4,0x8e,0x91,0xde,0x52,0x7e,0xea,0xb1,0x49,0x38,0xbe,0xaf,0xd0,0xaa,0xa0,0xa0 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x5d,0x29,0x66,0x37,0x69,0x7c,0xca,0xd8,0x4f,0xc7,0x79,0x36,0xa3,0x1c,0x26,0x55 };
    const uint8_t CIPHERTEXT[] = { 0xa7,0x2a,0x59,0x6a,0x03,0x0d,0x55,0x41,0xbc,0x4d,0x0f,0xc7,0x39,0x49,0x1d,0x5b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-51", "[ECB][MCT][128][ENCRYPT][n51]") {
    const uint8_t KEY[] = { 0x03,0xa4,0xc8,0xb4,0x51,0x73,0xbf,0xf0,0xf5,0x75,0xb1,0x68,0xe9,0xe3,0xbd,0xfb };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xa7,0x2a,0x59,0x6a,0x03,0x0d,0x55,0x41,0xbc,0x4d,0x0f,0xc7,0x39,0x49,0x1d,0x5b };
    const uint8_t CIPHERTEXT[] = { 0x5f,0x5e,0xc5,0x3c,0x91,0x22,0x57,0x17,0xfc,0xba,0x47,0x06,0x88,0xdf,0xa3,0x64 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-52", "[ECB][MCT][128][ENCRYPT][n52]") {
    const uint8_t KEY[] = { 0x5c,0xfa,0x0d,0x88,0xc0,0x51,0xe8,0xe7,0x09,0xcf,0xf6,0x6e,0x61,0x3c,0x1e,0x9f };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x5f,0x5e,0xc5,0x3c,0x91,0x22,0x57,0x17,0xfc,0xba,0x47,0x06,0x88,0xdf,0xa3,0x64 };
    const uint8_t CIPHERTEXT[] = { 0x57,0x19,0xcb,0x14,0xeb,0xa8,0x20,0xc0,0xd5,0x11,0x09,0xa0,0xc7,0xa4,0x15,0x4f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-53", "[ECB][MCT][128][ENCRYPT][n53]") {
    const uint8_t KEY[] = { 0x0b,0xe3,0xc6,0x9c,0x2b,0xf9,0xc8,0x27,0xdc,0xde,0xff,0xce,0xa6,0x98,0x0b,0xd0 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x57,0x19,0xcb,0x14,0xeb,0xa8,0x20,0xc0,0xd5,0x11,0x09,0xa0,0xc7,0xa4,0x15,0x4f };
    const uint8_t CIPHERTEXT[] = { 0x3a,0xbd,0x18,0x67,0x12,0xa9,0xde,0xf7,0x3b,0x63,0x12,0xb5,0x30,0x0f,0x02,0xaf };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-54", "[ECB][MCT][128][ENCRYPT][n54]") {
    const uint8_t KEY[] = { 0x31,0x5e,0xde,0xfb,0x39,0x50,0x16,0xd0,0xe7,0xbd,0xed,0x7b,0x96,0x97,0x09,0x7f };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x3a,0xbd,0x18,0x67,0x12,0xa9,0xde,0xf7,0x3b,0x63,0x12,0xb5,0x30,0x0f,0x02,0xaf };
    const uint8_t CIPHERTEXT[] = { 0xb1,0xe9,0x0c,0x8c,0x0d,0x4c,0x96,0x51,0xa6,0xde,0x7f,0x52,0xa6,0x3a,0xc4,0x56 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-55", "[ECB][MCT][128][ENCRYPT][n55]") {
    const uint8_t KEY[] = { 0x80,0xb7,0xd2,0x77,0x34,0x1c,0x80,0x81,0x41,0x63,0x92,0x29,0x30,0xad,0xcd,0x29 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xb1,0xe9,0x0c,0x8c,0x0d,0x4c,0x96,0x51,0xa6,0xde,0x7f,0x52,0xa6,0x3a,0xc4,0x56 };
    const uint8_t CIPHERTEXT[] = { 0x5d,0x26,0xe3,0x3a,0xae,0x14,0x41,0x55,0x40,0x34,0xc7,0x7b,0xde,0x45,0x16,0x79 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-56", "[ECB][MCT][128][ENCRYPT][n56]") {
    const uint8_t KEY[] = { 0xdd,0x91,0x31,0x4d,0x9a,0x08,0xc1,0xd4,0x01,0x57,0x55,0x52,0xee,0xe8,0xdb,0x50 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x5d,0x26,0xe3,0x3a,0xae,0x14,0x41,0x55,0x40,0x34,0xc7,0x7b,0xde,0x45,0x16,0x79 };
    const uint8_t CIPHERTEXT[] = { 0x93,0xe4,0x4c,0xdc,0xe1,0x48,0x03,0x54,0x4a,0x53,0xbc,0x5b,0x52,0x0c,0x15,0x6f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-57", "[ECB][MCT][128][ENCRYPT][n57]") {
    const uint8_t KEY[] = { 0x4e,0x75,0x7d,0x91,0x7b,0x40,0xc2,0x80,0x4b,0x04,0xe9,0x09,0xbc,0xe4,0xce,0x3f };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x93,0xe4,0x4c,0xdc,0xe1,0x48,0x03,0x54,0x4a,0x53,0xbc,0x5b,0x52,0x0c,0x15,0x6f };
    const uint8_t CIPHERTEXT[] = { 0x8e,0xe3,0xb6,0xfd,0x95,0x3b,0x44,0x10,0x43,0xf6,0x9f,0x37,0x47,0xe4,0xcf,0x63 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-58", "[ECB][MCT][128][ENCRYPT][n58]") {
    const uint8_t KEY[] = { 0xc0,0x96,0xcb,0x6c,0xee,0x7b,0x86,0x90,0x08,0xf2,0x76,0x3e,0xfb,0x00,0x01,0x5c };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x8e,0xe3,0xb6,0xfd,0x95,0x3b,0x44,0x10,0x43,0xf6,0x9f,0x37,0x47,0xe4,0xcf,0x63 };
    const uint8_t CIPHERTEXT[] = { 0xcb,0x2f,0x54,0x59,0x70,0x20,0x06,0x30,0xe5,0x14,0x5f,0x81,0x7a,0x01,0x38,0x07 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-59", "[ECB][MCT][128][ENCRYPT][n59]") {
    const uint8_t KEY[] = { 0x0b,0xb9,0x9f,0x35,0x9e,0x5b,0x80,0xa0,0xed,0xe6,0x29,0xbf,0x81,0x01,0x39,0x5b };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xcb,0x2f,0x54,0x59,0x70,0x20,0x06,0x30,0xe5,0x14,0x5f,0x81,0x7a,0x01,0x38,0x07 };
    const uint8_t CIPHERTEXT[] = { 0x50,0x04,0x72,0x76,0x45,0x1c,0xe1,0x9c,0xb1,0x4d,0x8d,0x2e,0xf0,0xb3,0x85,0x1b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-60", "[ECB][MCT][128][ENCRYPT][n60]") {
    const uint8_t KEY[] = { 0x5b,0xbd,0xed,0x43,0xdb,0x47,0x61,0x3c,0x5c,0xab,0xa4,0x91,0x71,0xb2,0xbc,0x40 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x50,0x04,0x72,0x76,0x45,0x1c,0xe1,0x9c,0xb1,0x4d,0x8d,0x2e,0xf0,0xb3,0x85,0x1b };
    const uint8_t CIPHERTEXT[] = { 0xd2,0x43,0x79,0x1d,0xde,0x33,0xc2,0xa4,0x33,0x3e,0xf4,0xdc,0xbc,0xad,0xbd,0x3a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-61", "[ECB][MCT][128][ENCRYPT][n61]") {
    const uint8_t KEY[] = { 0x89,0xfe,0x94,0x5e,0x05,0x74,0xa3,0x98,0x6f,0x95,0x50,0x4d,0xcd,0x1f,0x01,0x7a };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xd2,0x43,0x79,0x1d,0xde,0x33,0xc2,0xa4,0x33,0x3e,0xf4,0xdc,0xbc,0xad,0xbd,0x3a };
    const uint8_t CIPHERTEXT[] = { 0x34,0x31,0x81,0x86,0x00,0x92,0xa5,0xe3,0x3c,0x2e,0x1c,0x44,0x1a,0x9f,0x68,0x04 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-62", "[ECB][MCT][128][ENCRYPT][n62]") {
    const uint8_t KEY[] = { 0xbd,0xcf,0x15,0xd8,0x05,0xe6,0x06,0x7b,0x53,0xbb,0x4c,0x09,0xd7,0x80,0x69,0x7e };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x34,0x31,0x81,0x86,0x00,0x92,0xa5,0xe3,0x3c,0x2e,0x1c,0x44,0x1a,0x9f,0x68,0x04 };
    const uint8_t CIPHERTEXT[] = { 0x4e,0x7c,0xdd,0x55,0x3d,0x73,0x29,0x09,0xe2,0x5a,0x13,0xa5,0x21,0xe0,0x40,0x78 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-63", "[ECB][MCT][128][ENCRYPT][n63]") {
    const uint8_t KEY[] = { 0xf3,0xb3,0xc8,0x8d,0x38,0x95,0x2f,0x72,0xb1,0xe1,0x5f,0xac,0xf6,0x60,0x29,0x06 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x4e,0x7c,0xdd,0x55,0x3d,0x73,0x29,0x09,0xe2,0x5a,0x13,0xa5,0x21,0xe0,0x40,0x78 };
    const uint8_t CIPHERTEXT[] = { 0x9c,0x16,0xf3,0xfd,0xa4,0x9b,0xb6,0xa2,0xb6,0xd7,0x6a,0x66,0x96,0xbd,0x76,0x8f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-64", "[ECB][MCT][128][ENCRYPT][n64]") {
    const uint8_t KEY[] = { 0x6f,0xa5,0x3b,0x70,0x9c,0x0e,0x99,0xd0,0x07,0x36,0x35,0xca,0x60,0xdd,0x5f,0x89 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x9c,0x16,0xf3,0xfd,0xa4,0x9b,0xb6,0xa2,0xb6,0xd7,0x6a,0x66,0x96,0xbd,0x76,0x8f };
    const uint8_t CIPHERTEXT[] = { 0x9e,0xb6,0x3f,0x90,0x99,0x12,0x35,0x91,0xa4,0xca,0x7a,0xa0,0xff,0xf5,0x5a,0x49 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-65", "[ECB][MCT][128][ENCRYPT][n65]") {
    const uint8_t KEY[] = { 0xf1,0x13,0x04,0xe0,0x05,0x1c,0xac,0x41,0xa3,0xfc,0x4f,0x6a,0x9f,0x28,0x05,0xc0 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x9e,0xb6,0x3f,0x90,0x99,0x12,0x35,0x91,0xa4,0xca,0x7a,0xa0,0xff,0xf5,0x5a,0x49 };
    const uint8_t CIPHERTEXT[] = { 0xaa,0x6a,0x9e,0x40,0xaa,0xd6,0x92,0x55,0x0b,0x7c,0x87,0xb9,0x2b,0x20,0x5a,0xf0 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-66", "[ECB][MCT][128][ENCRYPT][n66]") {
    const uint8_t KEY[] = { 0x5b,0x79,0x9a,0xa0,0xaf,0xca,0x3e,0x14,0xa8,0x80,0xc8,0xd3,0xb4,0x08,0x5f,0x30 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xaa,0x6a,0x9e,0x40,0xaa,0xd6,0x92,0x55,0x0b,0x7c,0x87,0xb9,0x2b,0x20,0x5a,0xf0 };
    const uint8_t CIPHERTEXT[] = { 0xae,0x92,0xc2,0x67,0xf3,0x8b,0x9b,0x46,0x23,0xdf,0x36,0x52,0x3b,0xb7,0x39,0xb6 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-67", "[ECB][MCT][128][ENCRYPT][n67]") {
    const uint8_t KEY[] = { 0xf5,0xeb,0x58,0xc7,0x5c,0x41,0xa5,0x52,0x8b,0x5f,0xfe,0x81,0x8f,0xbf,0x66,0x86 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xae,0x92,0xc2,0x67,0xf3,0x8b,0x9b,0x46,0x23,0xdf,0x36,0x52,0x3b,0xb7,0x39,0xb6 };
    const uint8_t CIPHERTEXT[] = { 0x39,0xc0,0xde,0x84,0x37,0x67,0xdf,0xa2,0xd5,0x63,0xc0,0x63,0x24,0x05,0xd5,0x95 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-68", "[ECB][MCT][128][ENCRYPT][n68]") {
    const uint8_t KEY[] = { 0xcc,0x2b,0x86,0x43,0x6b,0x26,0x7a,0xf0,0x5e,0x3c,0x3e,0xe2,0xab,0xba,0xb3,0x13 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x39,0xc0,0xde,0x84,0x37,0x67,0xdf,0xa2,0xd5,0x63,0xc0,0x63,0x24,0x05,0xd5,0x95 };
    const uint8_t CIPHERTEXT[] = { 0x80,0xa9,0x44,0x5b,0xe7,0x53,0x73,0xb0,0x74,0x76,0x60,0x8f,0xeb,0x1f,0x1c,0x7b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-69", "[ECB][MCT][128][ENCRYPT][n69]") {
    const uint8_t KEY[] = { 0x4c,0x82,0xc2,0x18,0x8c,0x75,0x09,0x40,0x2a,0x4a,0x5e,0x6d,0x40,0xa5,0xaf,0x68 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x80,0xa9,0x44,0x5b,0xe7,0x53,0x73,0xb0,0x74,0x76,0x60,0x8f,0xeb,0x1f,0x1c,0x7b };
    const uint8_t CIPHERTEXT[] = { 0x53,0x06,0xf5,0xa7,0x7e,0x42,0xd9,0xf4,0xce,0xe8,0xf1,0x34,0xba,0x14,0x48,0xc6 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-70", "[ECB][MCT][128][ENCRYPT][n70]") {
    const uint8_t KEY[] = { 0x1f,0x84,0x37,0xbf,0xf2,0x37,0xd0,0xb4,0xe4,0xa2,0xaf,0x59,0xfa,0xb1,0xe7,0xae };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x53,0x06,0xf5,0xa7,0x7e,0x42,0xd9,0xf4,0xce,0xe8,0xf1,0x34,0xba,0x14,0x48,0xc6 };
    const uint8_t CIPHERTEXT[] = { 0x8d,0xb0,0xc3,0xfb,0xa7,0xdc,0x79,0x7c,0xd1,0x75,0xd9,0x75,0x03,0x75,0x92,0x60 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-71", "[ECB][MCT][128][ENCRYPT][n71]") {
    const uint8_t KEY[] = { 0x92,0x34,0xf4,0x44,0x55,0xeb,0xa9,0xc8,0x35,0xd7,0x76,0x2c,0xf9,0xc4,0x75,0xce };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x8d,0xb0,0xc3,0xfb,0xa7,0xdc,0x79,0x7c,0xd1,0x75,0xd9,0x75,0x03,0x75,0x92,0x60 };
    const uint8_t CIPHERTEXT[] = { 0x04,0xfc,0xb0,0xc7,0x7a,0xe0,0xc9,0x8d,0x2a,0xfb,0x17,0x8a,0xb2,0xc2,0xb0,0x2d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-72", "[ECB][MCT][128][ENCRYPT][n72]") {
    const uint8_t KEY[] = { 0x96,0xc8,0x44,0x83,0x2f,0x0b,0x60,0x45,0x1f,0x2c,0x61,0xa6,0x4b,0x06,0xc5,0xe3 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x04,0xfc,0xb0,0xc7,0x7a,0xe0,0xc9,0x8d,0x2a,0xfb,0x17,0x8a,0xb2,0xc2,0xb0,0x2d };
    const uint8_t CIPHERTEXT[] = { 0x1a,0x15,0x65,0x81,0xb3,0x55,0x70,0x78,0x97,0x1c,0xc6,0x87,0x7a,0x3d,0x93,0x39 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-73", "[ECB][MCT][128][ENCRYPT][n73]") {
    const uint8_t KEY[] = { 0x8c,0xdd,0x21,0x02,0x9c,0x5e,0x10,0x3d,0x88,0x30,0xa7,0x21,0x31,0x3b,0x56,0xda };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x1a,0x15,0x65,0x81,0xb3,0x55,0x70,0x78,0x97,0x1c,0xc6,0x87,0x7a,0x3d,0x93,0x39 };
    const uint8_t CIPHERTEXT[] = { 0xe4,0x70,0x87,0x28,0x92,0x90,0xfa,0x2b,0x67,0x34,0xee,0xaa,0xb2,0xfc,0x81,0x5d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-74", "[ECB][MCT][128][ENCRYPT][n74]") {
    const uint8_t KEY[] = { 0x68,0xad,0xa6,0x2a,0x0e,0xce,0xea,0x16,0xef,0x04,0x49,0x8b,0x83,0xc7,0xd7,0x87 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xe4,0x70,0x87,0x28,0x92,0x90,0xfa,0x2b,0x67,0x34,0xee,0xaa,0xb2,0xfc,0x81,0x5d };
    const uint8_t CIPHERTEXT[] = { 0x00,0xce,0x64,0x15,0x25,0x02,0x0d,0x35,0x24,0x4e,0x22,0x27,0x28,0x7b,0x2a,0x20 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-75", "[ECB][MCT][128][ENCRYPT][n75]") {
    const uint8_t KEY[] = { 0x68,0x63,0xc2,0x3f,0x2b,0xcc,0xe7,0x23,0xcb,0x4a,0x6b,0xac,0xab,0xbc,0xfd,0xa7 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x00,0xce,0x64,0x15,0x25,0x02,0x0d,0x35,0x24,0x4e,0x22,0x27,0x28,0x7b,0x2a,0x20 };
    const uint8_t CIPHERTEXT[] = { 0xec,0xf6,0x23,0xce,0xf1,0xe4,0x20,0xd0,0x99,0x40,0x70,0xc0,0x78,0x59,0x2c,0x97 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-76", "[ECB][MCT][128][ENCRYPT][n76]") {
    const uint8_t KEY[] = { 0x84,0x95,0xe1,0xf1,0xda,0x28,0xc7,0xf3,0x52,0x0a,0x1b,0x6c,0xd3,0xe5,0xd1,0x30 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xec,0xf6,0x23,0xce,0xf1,0xe4,0x20,0xd0,0x99,0x40,0x70,0xc0,0x78,0x59,0x2c,0x97 };
    const uint8_t CIPHERTEXT[] = { 0x25,0x6c,0x8f,0x28,0xdf,0x4a,0x28,0x6f,0xb0,0x55,0x14,0xfc,0xfa,0x8c,0xbc,0xaf };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-77", "[ECB][MCT][128][ENCRYPT][n77]") {
    const uint8_t KEY[] = { 0xa1,0xf9,0x6e,0xd9,0x05,0x62,0xef,0x9c,0xe2,0x5f,0x0f,0x90,0x29,0x69,0x6d,0x9f };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x25,0x6c,0x8f,0x28,0xdf,0x4a,0x28,0x6f,0xb0,0x55,0x14,0xfc,0xfa,0x8c,0xbc,0xaf };
    const uint8_t CIPHERTEXT[] = { 0xfd,0x4a,0xed,0x4b,0x5a,0x2b,0x8e,0xde,0xfe,0x3c,0xc2,0xae,0xf6,0xec,0xd2,0x98 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-78", "[ECB][MCT][128][ENCRYPT][n78]") {
    const uint8_t KEY[] = { 0x5c,0xb3,0x83,0x92,0x5f,0x49,0x61,0x42,0x1c,0x63,0xcd,0x3e,0xdf,0x85,0xbf,0x07 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xfd,0x4a,0xed,0x4b,0x5a,0x2b,0x8e,0xde,0xfe,0x3c,0xc2,0xae,0xf6,0xec,0xd2,0x98 };
    const uint8_t CIPHERTEXT[] = { 0xdf,0xe0,0xe5,0x71,0xf7,0x7f,0x0b,0x46,0xc5,0x2f,0x00,0x3e,0x77,0x49,0x18,0xac };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-79", "[ECB][MCT][128][ENCRYPT][n79]") {
    const uint8_t KEY[] = { 0x83,0x53,0x66,0xe3,0xa8,0x36,0x6a,0x04,0xd9,0x4c,0xcd,0x00,0xa8,0xcc,0xa7,0xab };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xdf,0xe0,0xe5,0x71,0xf7,0x7f,0x0b,0x46,0xc5,0x2f,0x00,0x3e,0x77,0x49,0x18,0xac };
    const uint8_t CIPHERTEXT[] = { 0xe4,0x21,0xfb,0xeb,0x4c,0x23,0x74,0x5b,0x97,0x57,0x81,0x62,0xf8,0x9e,0x68,0xfc };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-80", "[ECB][MCT][128][ENCRYPT][n80]") {
    const uint8_t KEY[] = { 0x67,0x72,0x9d,0x08,0xe4,0x15,0x1e,0x5f,0x4e,0x1b,0x4c,0x62,0x50,0x52,0xcf,0x57 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xe4,0x21,0xfb,0xeb,0x4c,0x23,0x74,0x5b,0x97,0x57,0x81,0x62,0xf8,0x9e,0x68,0xfc };
    const uint8_t CIPHERTEXT[] = { 0xc3,0x8c,0x0b,0xbd,0xe0,0x31,0xd1,0xa7,0x94,0x38,0xf7,0x9f,0xf7,0xcc,0x68,0xa5 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-81", "[ECB][MCT][128][ENCRYPT][n81]") {
    const uint8_t KEY[] = { 0xa4,0xfe,0x96,0xb5,0x04,0x24,0xcf,0xf8,0xda,0x23,0xbb,0xfd,0xa7,0x9e,0xa7,0xf2 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xc3,0x8c,0x0b,0xbd,0xe0,0x31,0xd1,0xa7,0x94,0x38,0xf7,0x9f,0xf7,0xcc,0x68,0xa5 };
    const uint8_t CIPHERTEXT[] = { 0x86,0x11,0x31,0x33,0x96,0x8a,0xa3,0x05,0x27,0x09,0x87,0x5b,0xf0,0x33,0xd8,0x04 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-82", "[ECB][MCT][128][ENCRYPT][n82]") {
    const uint8_t KEY[] = { 0x22,0xef,0xa7,0x86,0x92,0xae,0x6c,0xfd,0xfd,0x2a,0x3c,0xa6,0x57,0xad,0x7f,0xf6 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x86,0x11,0x31,0x33,0x96,0x8a,0xa3,0x05,0x27,0x09,0x87,0x5b,0xf0,0x33,0xd8,0x04 };
    const uint8_t CIPHERTEXT[] = { 0xfd,0x70,0x6b,0xef,0x1b,0xf3,0x0c,0x8d,0x1e,0x95,0x54,0x3b,0x75,0x62,0x9e,0x02 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-83", "[ECB][MCT][128][ENCRYPT][n83]") {
    const uint8_t KEY[] = { 0xdf,0x9f,0xcc,0x69,0x89,0x5d,0x60,0x70,0xe3,0xbf,0x68,0x9d,0x22,0xcf,0xe1,0xf4 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xfd,0x70,0x6b,0xef,0x1b,0xf3,0x0c,0x8d,0x1e,0x95,0x54,0x3b,0x75,0x62,0x9e,0x02 };
    const uint8_t CIPHERTEXT[] = { 0x9a,0x5b,0xbb,0x61,0x25,0x15,0x2f,0x13,0x52,0xb1,0x0e,0x1c,0x1a,0x17,0x2a,0xa6 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-84", "[ECB][MCT][128][ENCRYPT][n84]") {
    const uint8_t KEY[] = { 0x45,0xc4,0x77,0x08,0xac,0x48,0x4f,0x63,0xb1,0x0e,0x66,0x81,0x38,0xd8,0xcb,0x52 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x9a,0x5b,0xbb,0x61,0x25,0x15,0x2f,0x13,0x52,0xb1,0x0e,0x1c,0x1a,0x17,0x2a,0xa6 };
    const uint8_t CIPHERTEXT[] = { 0x3e,0xe6,0x97,0x36,0x48,0x8c,0x51,0xfa,0x72,0x78,0x4a,0xa2,0x63,0x61,0x8f,0x45 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-85", "[ECB][MCT][128][ENCRYPT][n85]") {
    const uint8_t KEY[] = { 0x7b,0x22,0xe0,0x3e,0xe4,0xc4,0x1e,0x99,0xc3,0x76,0x2c,0x23,0x5b,0xb9,0x44,0x17 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x3e,0xe6,0x97,0x36,0x48,0x8c,0x51,0xfa,0x72,0x78,0x4a,0xa2,0x63,0x61,0x8f,0x45 };
    const uint8_t CIPHERTEXT[] = { 0xfc,0x66,0xda,0xa2,0x46,0xeb,0xcc,0x32,0x0c,0x7c,0x89,0xb5,0x99,0x01,0x46,0x33 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-86", "[ECB][MCT][128][ENCRYPT][n86]") {
    const uint8_t KEY[] = { 0x87,0x44,0x3a,0x9c,0xa2,0x2f,0xd2,0xab,0xcf,0x0a,0xa5,0x96,0xc2,0xb8,0x02,0x24 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xfc,0x66,0xda,0xa2,0x46,0xeb,0xcc,0x32,0x0c,0x7c,0x89,0xb5,0x99,0x01,0x46,0x33 };
    const uint8_t CIPHERTEXT[] = { 0x35,0x64,0x58,0x85,0xed,0x20,0x5d,0x67,0xe5,0xca,0xef,0xf2,0x66,0x46,0xc3,0x8c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-87", "[ECB][MCT][128][ENCRYPT][n87]") {
    const uint8_t KEY[] = { 0xb2,0x20,0x62,0x19,0x4f,0x0f,0x8f,0xcc,0x2a,0xc0,0x4a,0x64,0xa4,0xfe,0xc1,0xa8 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x35,0x64,0x58,0x85,0xed,0x20,0x5d,0x67,0xe5,0xca,0xef,0xf2,0x66,0x46,0xc3,0x8c };
    const uint8_t CIPHERTEXT[] = { 0xda,0xea,0xa8,0x66,0xaa,0x4e,0xac,0xdb,0x75,0x2c,0xac,0xcb,0x2c,0x0a,0xe6,0xc1 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-88", "[ECB][MCT][128][ENCRYPT][n88]") {
    const uint8_t KEY[] = { 0x68,0xca,0xca,0x7f,0xe5,0x41,0x23,0x17,0x5f,0xec,0xe6,0xaf,0x88,0xf4,0x27,0x69 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xda,0xea,0xa8,0x66,0xaa,0x4e,0xac,0xdb,0x75,0x2c,0xac,0xcb,0x2c,0x0a,0xe6,0xc1 };
    const uint8_t CIPHERTEXT[] = { 0x29,0xe8,0x8b,0x1a,0xe6,0x15,0xfc,0xd0,0x6b,0x09,0xe7,0x67,0x45,0x9d,0x60,0x89 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-89", "[ECB][MCT][128][ENCRYPT][n89]") {
    const uint8_t KEY[] = { 0x41,0x22,0x41,0x65,0x03,0x54,0xdf,0xc7,0x34,0xe5,0x01,0xc8,0xcd,0x69,0x47,0xe0 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x29,0xe8,0x8b,0x1a,0xe6,0x15,0xfc,0xd0,0x6b,0x09,0xe7,0x67,0x45,0x9d,0x60,0x89 };
    const uint8_t CIPHERTEXT[] = { 0x63,0x47,0x0b,0xff,0x05,0x2e,0x7f,0x5c,0x7a,0x73,0x5c,0xc2,0xe6,0xeb,0x61,0xac };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-90", "[ECB][MCT][128][ENCRYPT][n90]") {
    const uint8_t KEY[] = { 0x22,0x65,0x4a,0x9a,0x06,0x7a,0xa0,0x9b,0x4e,0x96,0x5d,0x0a,0x2b,0x82,0x26,0x4c };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x63,0x47,0x0b,0xff,0x05,0x2e,0x7f,0x5c,0x7a,0x73,0x5c,0xc2,0xe6,0xeb,0x61,0xac };
    const uint8_t CIPHERTEXT[] = { 0xf4,0xfa,0x6a,0x35,0x49,0xcd,0x2b,0x33,0xaf,0x9c,0xac,0x13,0x4d,0x7b,0x14,0x02 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-91", "[ECB][MCT][128][ENCRYPT][n91]") {
    const uint8_t KEY[] = { 0xd6,0x9f,0x20,0xaf,0x4f,0xb7,0x8b,0xa8,0xe1,0x0a,0xf1,0x19,0x66,0xf9,0x32,0x4e };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xf4,0xfa,0x6a,0x35,0x49,0xcd,0x2b,0x33,0xaf,0x9c,0xac,0x13,0x4d,0x7b,0x14,0x02 };
    const uint8_t CIPHERTEXT[] = { 0x5b,0x22,0xa8,0x2c,0xcb,0xae,0x9b,0x9c,0x75,0xf7,0x97,0xe7,0x4e,0x6d,0xa5,0x3d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-92", "[ECB][MCT][128][ENCRYPT][n92]") {
    const uint8_t KEY[] = { 0x8d,0xbd,0x88,0x83,0x84,0x19,0x10,0x34,0x94,0xfd,0x66,0xfe,0x28,0x94,0x97,0x73 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x5b,0x22,0xa8,0x2c,0xcb,0xae,0x9b,0x9c,0x75,0xf7,0x97,0xe7,0x4e,0x6d,0xa5,0x3d };
    const uint8_t CIPHERTEXT[] = { 0x87,0xb5,0x16,0x92,0xf8,0xf2,0x87,0x43,0xbd,0x8d,0xc8,0x43,0x27,0x6f,0x35,0x1a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-93", "[ECB][MCT][128][ENCRYPT][n93]") {
    const uint8_t KEY[] = { 0x0a,0x08,0x9e,0x11,0x7c,0xeb,0x97,0x77,0x29,0x70,0xae,0xbd,0x0f,0xfb,0xa2,0x69 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x87,0xb5,0x16,0x92,0xf8,0xf2,0x87,0x43,0xbd,0x8d,0xc8,0x43,0x27,0x6f,0x35,0x1a };
    const uint8_t CIPHERTEXT[] = { 0x15,0x0f,0xb2,0x18,0x07,0x04,0xa7,0x62,0x3a,0x1f,0xab,0x8b,0xf1,0x7f,0xba,0x18 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-94", "[ECB][MCT][128][ENCRYPT][n94]") {
    const uint8_t KEY[] = { 0x1f,0x07,0x2c,0x09,0x7b,0xef,0x30,0x15,0x13,0x6f,0x05,0x36,0xfe,0x84,0x18,0x71 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x15,0x0f,0xb2,0x18,0x07,0x04,0xa7,0x62,0x3a,0x1f,0xab,0x8b,0xf1,0x7f,0xba,0x18 };
    const uint8_t CIPHERTEXT[] = { 0x80,0x88,0x87,0x4e,0x7f,0x3f,0x09,0xa9,0x8f,0xd3,0xf0,0xa5,0x9f,0x2a,0x0b,0x4b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-95", "[ECB][MCT][128][ENCRYPT][n95]") {
    const uint8_t KEY[] = { 0x9f,0x8f,0xab,0x47,0x04,0xd0,0x39,0xbc,0x9c,0xbc,0xf5,0x93,0x61,0xae,0x13,0x3a };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x80,0x88,0x87,0x4e,0x7f,0x3f,0x09,0xa9,0x8f,0xd3,0xf0,0xa5,0x9f,0x2a,0x0b,0x4b };
    const uint8_t CIPHERTEXT[] = { 0x08,0xe0,0x2c,0x09,0x10,0x57,0xd8,0x1c,0x05,0xd9,0x17,0xea,0x5c,0x07,0xcd,0xd0 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-96", "[ECB][MCT][128][ENCRYPT][n96]") {
    const uint8_t KEY[] = { 0x97,0x6f,0x87,0x4e,0x14,0x87,0xe1,0xa0,0x99,0x65,0xe2,0x79,0x3d,0xa9,0xde,0xea };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x08,0xe0,0x2c,0x09,0x10,0x57,0xd8,0x1c,0x05,0xd9,0x17,0xea,0x5c,0x07,0xcd,0xd0 };
    const uint8_t CIPHERTEXT[] = { 0xb9,0x63,0x6b,0x3e,0x27,0x52,0x69,0x4c,0x36,0x85,0x87,0x2f,0xd0,0xa9,0xa0,0xea };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-97", "[ECB][MCT][128][ENCRYPT][n97]") {
    const uint8_t KEY[] = { 0x2e,0x0c,0xec,0x70,0x33,0xd5,0x88,0xec,0xaf,0xe0,0x65,0x56,0xed,0x00,0x7e,0x00 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xb9,0x63,0x6b,0x3e,0x27,0x52,0x69,0x4c,0x36,0x85,0x87,0x2f,0xd0,0xa9,0xa0,0xea };
    const uint8_t CIPHERTEXT[] = { 0x26,0x10,0xda,0xe2,0xb6,0x4d,0x74,0xa8,0xcb,0xb4,0xf4,0x3f,0xa2,0xd0,0xa6,0x03 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-98", "[ECB][MCT][128][ENCRYPT][n98]") {
    const uint8_t KEY[] = { 0x08,0x1c,0x36,0x92,0x85,0x98,0xfc,0x44,0x64,0x54,0x91,0x69,0x4f,0xd0,0xd8,0x03 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x26,0x10,0xda,0xe2,0xb6,0x4d,0x74,0xa8,0xcb,0xb4,0xf4,0x3f,0xa2,0xd0,0xa6,0x03 };
    const uint8_t CIPHERTEXT[] = { 0x9c,0xc9,0x94,0xed,0xa6,0x97,0xfb,0x55,0x45,0xea,0xa5,0x02,0xb2,0xa3,0x0f,0xd3 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-ENCRYPT-99", "[ECB][MCT][128][ENCRYPT][n99]") {
    const uint8_t KEY[] = { 0x94,0xd5,0xa2,0x7f,0x23,0x0f,0x07,0x11,0x21,0xbe,0x34,0x6b,0xfd,0x73,0xd7,0xd0 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x9c,0xc9,0x94,0xed,0xa6,0x97,0xfb,0x55,0x45,0xea,0xa5,0x02,0xb2,0xa3,0x0f,0xd3 };
    const uint8_t CIPHERTEXT[] = { 0xfb,0x26,0x49,0x69,0x47,0x83,0xb5,0x51,0xea,0xcd,0x9d,0x5d,0xb6,0x12,0x6d,0x47 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-0", "[ECB][MCT][128][DECRYPT][n0]") {
    const uint8_t KEY[] = { 0x0c,0x60,0xe7,0xbf,0x20,0xad,0xa9,0xba,0xa9,0xe1,0xdd,0xf0,0xd1,0x54,0x07,0x26 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xb6,0x13,0xb8,0x70,0x85,0xfe,0xd1,0xbb,0x87,0xf0,0x7a,0x57,0x4e,0x6d,0x28,0x79 };
    const uint8_t CIPHERTEXT[] = { 0xb0,0x8a,0x29,0xb1,0x1a,0x50,0x0e,0xa3,0xac,0xa4,0x2c,0x36,0x67,0x5b,0x97,0x85 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-1", "[ECB][MCT][128][DECRYPT][n1]") {
    const uint8_t KEY[] = { 0xba,0x73,0x5f,0xcf,0xa5,0x53,0x78,0x01,0x2e,0x11,0xa7,0xa7,0x9f,0x39,0x2f,0x5f };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x55,0x41,0xd7,0xbf,0x6d,0x25,0xc5,0x5c,0x0c,0x22,0x96,0xac,0xba,0x75,0x6e,0x9e };
    const uint8_t CIPHERTEXT[] = { 0xb6,0x13,0xb8,0x70,0x85,0xfe,0xd1,0xbb,0x87,0xf0,0x7a,0x57,0x4e,0x6d,0x28,0x79 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-2", "[ECB][MCT][128][DECRYPT][n2]") {
    const uint8_t KEY[] = { 0xef,0x32,0x88,0x70,0xc8,0x76,0xbd,0x5d,0x22,0x33,0x31,0x0b,0x25,0x4c,0x41,0xc1 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x4c,0x13,0x81,0x98,0xd5,0x5d,0x0d,0x87,0xd4,0x3c,0xdb,0x92,0xfb,0x0b,0x5f,0xc0 };
    const uint8_t CIPHERTEXT[] = { 0x55,0x41,0xd7,0xbf,0x6d,0x25,0xc5,0x5c,0x0c,0x22,0x96,0xac,0xba,0x75,0x6e,0x9e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-3", "[ECB][MCT][128][DECRYPT][n3]") {
    const uint8_t KEY[] = { 0xa3,0x21,0x09,0xe8,0x1d,0x2b,0xb0,0xda,0xf6,0x0f,0xea,0x99,0xde,0x47,0x1e,0x01 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x25,0x7c,0x07,0xbd,0xcb,0xa5,0x7a,0xff,0x16,0x43,0xde,0x90,0xb6,0x3c,0x0a,0x88 };
    const uint8_t CIPHERTEXT[] = { 0x4c,0x13,0x81,0x98,0xd5,0x5d,0x0d,0x87,0xd4,0x3c,0xdb,0x92,0xfb,0x0b,0x5f,0xc0 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-4", "[ECB][MCT][128][DECRYPT][n4]") {
    const uint8_t KEY[] = { 0x86,0x5d,0x0e,0x55,0xd6,0x8e,0xca,0x25,0xe0,0x4c,0x34,0x09,0x68,0x7b,0x14,0x89 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x80,0x39,0xbe,0x4e,0x65,0xd2,0x18,0xd3,0xe6,0x40,0xf8,0x83,0x09,0xd0,0x1c,0x6f };
    const uint8_t CIPHERTEXT[] = { 0x25,0x7c,0x07,0xbd,0xcb,0xa5,0x7a,0xff,0x16,0x43,0xde,0x90,0xb6,0x3c,0x0a,0x88 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-5", "[ECB][MCT][128][DECRYPT][n5]") {
    const uint8_t KEY[] = { 0x06,0x64,0xb0,0x1b,0xb3,0x5c,0xd2,0xf6,0x06,0x0c,0xcc,0x8a,0x61,0xab,0x08,0xe6 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x01,0x15,0xdc,0xd3,0x90,0x85,0x5b,0xf5,0xce,0x32,0xe9,0x46,0xa6,0xd5,0xad,0x38 };
    const uint8_t CIPHERTEXT[] = { 0x80,0x39,0xbe,0x4e,0x65,0xd2,0x18,0xd3,0xe6,0x40,0xf8,0x83,0x09,0xd0,0x1c,0x6f };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-6", "[ECB][MCT][128][DECRYPT][n6]") {
    const uint8_t KEY[] = { 0x07,0x71,0x6c,0xc8,0x23,0xd9,0x89,0x03,0xc8,0x3e,0x25,0xcc,0xc7,0x7e,0xa5,0xde };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x71,0x74,0x1c,0xcb,0x72,0x33,0x48,0xc7,0xf3,0xf9,0xe4,0xa3,0x97,0x97,0x7b,0xdb };
    const uint8_t CIPHERTEXT[] = { 0x01,0x15,0xdc,0xd3,0x90,0x85,0x5b,0xf5,0xce,0x32,0xe9,0x46,0xa6,0xd5,0xad,0x38 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-7", "[ECB][MCT][128][DECRYPT][n7]") {
    const uint8_t KEY[] = { 0x76,0x05,0x70,0x03,0x51,0xea,0xc1,0xc4,0x3b,0xc7,0xc1,0x6f,0x50,0xe9,0xde,0x05 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x66,0x8c,0x9f,0x3d,0xc9,0xe1,0x54,0xbd,0x16,0xd6,0x13,0x64,0xa9,0x9f,0x63,0x5d };
    const uint8_t CIPHERTEXT[] = { 0x71,0x74,0x1c,0xcb,0x72,0x33,0x48,0xc7,0xf3,0xf9,0xe4,0xa3,0x97,0x97,0x7b,0xdb };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-8", "[ECB][MCT][128][DECRYPT][n8]") {
    const uint8_t KEY[] = { 0x10,0x89,0xef,0x3e,0x98,0x0b,0x95,0x79,0x2d,0x11,0xd2,0x0b,0xf9,0x76,0xbd,0x58 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x12,0x4b,0x19,0xb2,0x50,0x1a,0x54,0x00,0x66,0xdd,0xf7,0x94,0x34,0x17,0xcb,0xa3 };
    const uint8_t CIPHERTEXT[] = { 0x66,0x8c,0x9f,0x3d,0xc9,0xe1,0x54,0xbd,0x16,0xd6,0x13,0x64,0xa9,0x9f,0x63,0x5d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-9", "[ECB][MCT][128][DECRYPT][n9]") {
    const uint8_t KEY[] = { 0x02,0xc2,0xf6,0x8c,0xc8,0x11,0xc1,0x79,0x4b,0xcc,0x25,0x9f,0xcd,0x61,0x76,0xfb };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x23,0xe7,0xc9,0x5f,0x7e,0xd9,0x01,0x7a,0xf3,0x39,0xc2,0x34,0xb7,0xa8,0xfc,0xc4 };
    const uint8_t CIPHERTEXT[] = { 0x12,0x4b,0x19,0xb2,0x50,0x1a,0x54,0x00,0x66,0xdd,0xf7,0x94,0x34,0x17,0xcb,0xa3 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-10", "[ECB][MCT][128][DECRYPT][n10]") {
    const uint8_t KEY[] = { 0x21,0x25,0x3f,0xd3,0xb6,0xc8,0xc0,0x03,0xb8,0xf5,0xe7,0xab,0x7a,0xc9,0x8a,0x3f };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x7b,0x0e,0x1e,0x1a,0xfe,0x46,0xc1,0xe5,0x07,0x85,0xef,0xb9,0x39,0xf8,0xad,0xe3 };
    const uint8_t CIPHERTEXT[] = { 0x23,0xe7,0xc9,0x5f,0x7e,0xd9,0x01,0x7a,0xf3,0x39,0xc2,0x34,0xb7,0xa8,0xfc,0xc4 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-11", "[ECB][MCT][128][DECRYPT][n11]") {
    const uint8_t KEY[] = { 0x5a,0x2b,0x21,0xc9,0x48,0x8e,0x01,0xe6,0xbf,0x70,0x08,0x12,0x43,0x31,0x27,0xdc };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xc1,0x66,0xae,0xeb,0xf5,0x18,0x2c,0x96,0xd1,0xf3,0xc9,0x2c,0xec,0xe9,0xd7,0x14 };
    const uint8_t CIPHERTEXT[] = { 0x7b,0x0e,0x1e,0x1a,0xfe,0x46,0xc1,0xe5,0x07,0x85,0xef,0xb9,0x39,0xf8,0xad,0xe3 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-12", "[ECB][MCT][128][DECRYPT][n12]") {
    const uint8_t KEY[] = { 0x9b,0x4d,0x8f,0x22,0xbd,0x96,0x2d,0x70,0x6e,0x83,0xc1,0x3e,0xaf,0xd8,0xf0,0xc8 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x71,0x96,0x87,0x62,0xdc,0x1b,0x41,0xbe,0xbd,0x9e,0xe8,0xb2,0x39,0x6b,0x87,0xbe };
    const uint8_t CIPHERTEXT[] = { 0xc1,0x66,0xae,0xeb,0xf5,0x18,0x2c,0x96,0xd1,0xf3,0xc9,0x2c,0xec,0xe9,0xd7,0x14 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-13", "[ECB][MCT][128][DECRYPT][n13]") {
    const uint8_t KEY[] = { 0xea,0xdb,0x08,0x40,0x61,0x8d,0x6c,0xce,0xd3,0x1d,0x29,0x8c,0x96,0xb3,0x77,0x76 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x77,0xb0,0xaa,0x88,0x22,0x2a,0x78,0x52,0x82,0x35,0x2b,0xb8,0x61,0xea,0x0c,0xd2 };
    const uint8_t CIPHERTEXT[] = { 0x71,0x96,0x87,0x62,0xdc,0x1b,0x41,0xbe,0xbd,0x9e,0xe8,0xb2,0x39,0x6b,0x87,0xbe };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-14", "[ECB][MCT][128][DECRYPT][n14]") {
    const uint8_t KEY[] = { 0x9d,0x6b,0xa2,0xc8,0x43,0xa7,0x14,0x9c,0x51,0x28,0x02,0x34,0xf7,0x59,0x7b,0xa4 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xe6,0x5c,0x46,0x1c,0xba,0x69,0x57,0xfe,0x5b,0x5e,0xe5,0x01,0x4c,0x89,0x9e,0x65 };
    const uint8_t CIPHERTEXT[] = { 0x77,0xb0,0xaa,0x88,0x22,0x2a,0x78,0x52,0x82,0x35,0x2b,0xb8,0x61,0xea,0x0c,0xd2 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-15", "[ECB][MCT][128][DECRYPT][n15]") {
    const uint8_t KEY[] = { 0x7b,0x37,0xe4,0xd4,0xf9,0xce,0x43,0x62,0x0a,0x76,0xe7,0x35,0xbb,0xd0,0xe5,0xc1 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xa7,0x99,0x87,0x0c,0xee,0x00,0x15,0x51,0xf3,0x49,0x4b,0xdf,0x3c,0x27,0xbd,0x94 };
    const uint8_t CIPHERTEXT[] = { 0xe6,0x5c,0x46,0x1c,0xba,0x69,0x57,0xfe,0x5b,0x5e,0xe5,0x01,0x4c,0x89,0x9e,0x65 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-16", "[ECB][MCT][128][DECRYPT][n16]") {
    const uint8_t KEY[] = { 0xdc,0xae,0x63,0xd8,0x17,0xce,0x56,0x33,0xf9,0x3f,0xac,0xea,0x87,0xf7,0x58,0x55 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xf5,0x46,0x97,0x57,0x61,0x53,0xf9,0x7d,0x9f,0xb1,0xa4,0xd1,0x64,0xa8,0x53,0x8e };
    const uint8_t CIPHERTEXT[] = { 0xa7,0x99,0x87,0x0c,0xee,0x00,0x15,0x51,0xf3,0x49,0x4b,0xdf,0x3c,0x27,0xbd,0x94 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-17", "[ECB][MCT][128][DECRYPT][n17]") {
    const uint8_t KEY[] = { 0x29,0xe8,0xf4,0x8f,0x76,0x9d,0xaf,0x4e,0x66,0x8e,0x08,0x3b,0xe3,0x5f,0x0b,0xdb };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xf3,0xf1,0xf9,0x64,0xb9,0x8b,0x34,0x98,0x89,0x8c,0x30,0x32,0xe4,0x4a,0x30,0x8c };
    const uint8_t CIPHERTEXT[] = { 0xf5,0x46,0x97,0x57,0x61,0x53,0xf9,0x7d,0x9f,0xb1,0xa4,0xd1,0x64,0xa8,0x53,0x8e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-18", "[ECB][MCT][128][DECRYPT][n18]") {
    const uint8_t KEY[] = { 0xda,0x19,0x0d,0xeb,0xcf,0x16,0x9b,0xd6,0xef,0x02,0x38,0x09,0x07,0x15,0x3b,0x57 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x40,0xcc,0xc3,0xa2,0x61,0x41,0x90,0x02,0x80,0xa3,0xa7,0xb6,0x2d,0x4e,0xd8,0xb6 };
    const uint8_t CIPHERTEXT[] = { 0xf3,0xf1,0xf9,0x64,0xb9,0x8b,0x34,0x98,0x89,0x8c,0x30,0x32,0xe4,0x4a,0x30,0x8c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-19", "[ECB][MCT][128][DECRYPT][n19]") {
    const uint8_t KEY[] = { 0x9a,0xd5,0xce,0x49,0xae,0x57,0x0b,0xd4,0x6f,0xa1,0x9f,0xbf,0x2a,0x5b,0xe3,0xe1 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x7f,0xcf,0x64,0xbd,0x75,0x80,0x8b,0xe6,0x19,0x9f,0x3f,0xac,0x08,0x81,0xd4,0xd4 };
    const uint8_t CIPHERTEXT[] = { 0x40,0xcc,0xc3,0xa2,0x61,0x41,0x90,0x02,0x80,0xa3,0xa7,0xb6,0x2d,0x4e,0xd8,0xb6 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-20", "[ECB][MCT][128][DECRYPT][n20]") {
    const uint8_t KEY[] = { 0xe5,0x1a,0xaa,0xf4,0xdb,0xd7,0x80,0x32,0x76,0x3e,0xa0,0x13,0x22,0xda,0x37,0x35 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x11,0xca,0x97,0x0c,0x16,0x93,0x15,0xff,0x0b,0x54,0xec,0xdb,0x00,0xba,0x45,0x47 };
    const uint8_t CIPHERTEXT[] = { 0x7f,0xcf,0x64,0xbd,0x75,0x80,0x8b,0xe6,0x19,0x9f,0x3f,0xac,0x08,0x81,0xd4,0xd4 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-21", "[ECB][MCT][128][DECRYPT][n21]") {
    const uint8_t KEY[] = { 0xf4,0xd0,0x3d,0xf8,0xcd,0x44,0x95,0xcd,0x7d,0x6a,0x4c,0xc8,0x22,0x60,0x72,0x72 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xbc,0x02,0x61,0x57,0x54,0xb5,0x8e,0xb9,0x75,0xc2,0x61,0x90,0xa3,0x58,0x3d,0x28 };
    const uint8_t CIPHERTEXT[] = { 0x11,0xca,0x97,0x0c,0x16,0x93,0x15,0xff,0x0b,0x54,0xec,0xdb,0x00,0xba,0x45,0x47 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-22", "[ECB][MCT][128][DECRYPT][n22]") {
    const uint8_t KEY[] = { 0x48,0xd2,0x5c,0xaf,0x99,0xf1,0x1b,0x74,0x08,0xa8,0x2d,0x58,0x81,0x38,0x4f,0x5a };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x5b,0x12,0x92,0x5c,0x7f,0x72,0xaa,0xaf,0xba,0xe6,0x83,0x4a,0x6e,0x9d,0x5a,0xf9 };
    const uint8_t CIPHERTEXT[] = { 0xbc,0x02,0x61,0x57,0x54,0xb5,0x8e,0xb9,0x75,0xc2,0x61,0x90,0xa3,0x58,0x3d,0x28 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-23", "[ECB][MCT][128][DECRYPT][n23]") {
    const uint8_t KEY[] = { 0x13,0xc0,0xce,0xf3,0xe6,0x83,0xb1,0xdb,0xb2,0x4e,0xae,0x12,0xef,0xa5,0x15,0xa3 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x79,0x50,0xff,0xe2,0x53,0x72,0x35,0xbf,0xaa,0x38,0x10,0x1c,0x2a,0x9e,0x6d,0x42 };
    const uint8_t CIPHERTEXT[] = { 0x5b,0x12,0x92,0x5c,0x7f,0x72,0xaa,0xaf,0xba,0xe6,0x83,0x4a,0x6e,0x9d,0x5a,0xf9 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-24", "[ECB][MCT][128][DECRYPT][n24]") {
    const uint8_t KEY[] = { 0x6a,0x90,0x31,0x11,0xb5,0xf1,0x84,0x64,0x18,0x76,0xbe,0x0e,0xc5,0x3b,0x78,0xe1 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xcd,0xf5,0xc9,0x97,0xd8,0xdd,0xcc,0x1d,0xe7,0xcc,0x47,0xec,0xc4,0x7d,0x08,0x19 };
    const uint8_t CIPHERTEXT[] = { 0x79,0x50,0xff,0xe2,0x53,0x72,0x35,0xbf,0xaa,0x38,0x10,0x1c,0x2a,0x9e,0x6d,0x42 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-25", "[ECB][MCT][128][DECRYPT][n25]") {
    const uint8_t KEY[] = { 0xa7,0x65,0xf8,0x86,0x6d,0x2c,0x48,0x79,0xff,0xba,0xf9,0xe2,0x01,0x46,0x70,0xf8 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x8f,0x4d,0x77,0xbc,0xcc,0x48,0x58,0x01,0x6b,0x28,0xc2,0xe8,0xf8,0x4d,0xd9,0xa3 };
    const uint8_t CIPHERTEXT[] = { 0xcd,0xf5,0xc9,0x97,0xd8,0xdd,0xcc,0x1d,0xe7,0xcc,0x47,0xec,0xc4,0x7d,0x08,0x19 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-26", "[ECB][MCT][128][DECRYPT][n26]") {
    const uint8_t KEY[] = { 0x28,0x28,0x8f,0x3a,0xa1,0x64,0x10,0x78,0x94,0x92,0x3b,0x0a,0xf9,0x0b,0xa9,0x5b };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x56,0x1d,0x95,0x84,0x78,0x69,0xcc,0xcc,0x81,0xdf,0x7d,0xf6,0x5d,0x70,0x80,0x8d };
    const uint8_t CIPHERTEXT[] = { 0x8f,0x4d,0x77,0xbc,0xcc,0x48,0x58,0x01,0x6b,0x28,0xc2,0xe8,0xf8,0x4d,0xd9,0xa3 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-27", "[ECB][MCT][128][DECRYPT][n27]") {
    const uint8_t KEY[] = { 0x7e,0x35,0x1a,0xbe,0xd9,0x0d,0xdc,0xb4,0x15,0x4d,0x46,0xfc,0xa4,0x7b,0x29,0xd6 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x17,0xb9,0xe6,0xf8,0x6e,0xc1,0xcf,0xf2,0x2c,0xc6,0xf8,0xe1,0x40,0x72,0xbb,0x0f };
    const uint8_t CIPHERTEXT[] = { 0x56,0x1d,0x95,0x84,0x78,0x69,0xcc,0xcc,0x81,0xdf,0x7d,0xf6,0x5d,0x70,0x80,0x8d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-28", "[ECB][MCT][128][DECRYPT][n28]") {
    const uint8_t KEY[] = { 0x69,0x8c,0xfc,0x46,0xb7,0xcc,0x13,0x46,0x39,0x8b,0xbe,0x1d,0xe4,0x09,0x92,0xd9 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x8f,0x95,0x9f,0x24,0xfa,0xe9,0x34,0x18,0xc2,0x26,0x2e,0xc7,0x3c,0x6c,0x8e,0x1d };
    const uint8_t CIPHERTEXT[] = { 0x17,0xb9,0xe6,0xf8,0x6e,0xc1,0xcf,0xf2,0x2c,0xc6,0xf8,0xe1,0x40,0x72,0xbb,0x0f };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-29", "[ECB][MCT][128][DECRYPT][n29]") {
    const uint8_t KEY[] = { 0xe6,0x19,0x63,0x62,0x4d,0x25,0x27,0x5e,0xfb,0xad,0x90,0xda,0xd8,0x65,0x1c,0xc4 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x28,0x76,0xf3,0xa9,0x0b,0x7a,0x60,0x16,0x88,0x69,0xd9,0xde,0x1e,0x45,0x58,0x36 };
    const uint8_t CIPHERTEXT[] = { 0x8f,0x95,0x9f,0x24,0xfa,0xe9,0x34,0x18,0xc2,0x26,0x2e,0xc7,0x3c,0x6c,0x8e,0x1d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-30", "[ECB][MCT][128][DECRYPT][n30]") {
    const uint8_t KEY[] = { 0xce,0x6f,0x90,0xcb,0x46,0x5f,0x47,0x48,0x73,0xc4,0x49,0x04,0xc6,0x20,0x44,0xf2 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x5c,0x60,0x9c,0x0a,0xcd,0xf2,0xe3,0x89,0xf1,0x9b,0x3e,0x06,0x57,0x70,0x6c,0x9c };
    const uint8_t CIPHERTEXT[] = { 0x28,0x76,0xf3,0xa9,0x0b,0x7a,0x60,0x16,0x88,0x69,0xd9,0xde,0x1e,0x45,0x58,0x36 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-31", "[ECB][MCT][128][DECRYPT][n31]") {
    const uint8_t KEY[] = { 0x92,0x0f,0x0c,0xc1,0x8b,0xad,0xa4,0xc1,0x82,0x5f,0x77,0x02,0x91,0x50,0x28,0x6e };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x88,0xf5,0x37,0xf6,0x74,0x81,0x49,0x0d,0x20,0xb7,0x13,0xff,0x48,0xb0,0x79,0xe5 };
    const uint8_t CIPHERTEXT[] = { 0x5c,0x60,0x9c,0x0a,0xcd,0xf2,0xe3,0x89,0xf1,0x9b,0x3e,0x06,0x57,0x70,0x6c,0x9c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-32", "[ECB][MCT][128][DECRYPT][n32]") {
    const uint8_t KEY[] = { 0x1a,0xfa,0x3b,0x37,0xff,0x2c,0xed,0xcc,0xa2,0xe8,0x64,0xfd,0xd9,0xe0,0x51,0x8b };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x0b,0x18,0x78,0xfc,0x94,0x06,0xb6,0xc5,0xf2,0xc0,0x08,0x5e,0x8c,0x9e,0x0d,0xd9 };
    const uint8_t CIPHERTEXT[] = { 0x88,0xf5,0x37,0xf6,0x74,0x81,0x49,0x0d,0x20,0xb7,0x13,0xff,0x48,0xb0,0x79,0xe5 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-33", "[ECB][MCT][128][DECRYPT][n33]") {
    const uint8_t KEY[] = { 0x11,0xe2,0x43,0xcb,0x6b,0x2a,0x5b,0x09,0x50,0x28,0x6c,0xa3,0x55,0x7e,0x5c,0x52 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x59,0x4b,0x9d,0xf3,0xba,0xd0,0x40,0xaf,0xa1,0x4e,0x63,0x29,0x89,0x45,0x06,0x8d };
    const uint8_t CIPHERTEXT[] = { 0x0b,0x18,0x78,0xfc,0x94,0x06,0xb6,0xc5,0xf2,0xc0,0x08,0x5e,0x8c,0x9e,0x0d,0xd9 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-34", "[ECB][MCT][128][DECRYPT][n34]") {
    const uint8_t KEY[] = { 0x48,0xa9,0xde,0x38,0xd1,0xfa,0x1b,0xa6,0xf1,0x66,0x0f,0x8a,0xdc,0x3b,0x5a,0xdf };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xfc,0xf5,0xff,0xaf,0xac,0xc3,0x72,0xe6,0x41,0xb1,0x52,0x0f,0xe7,0x6d,0x16,0xc7 };
    const uint8_t CIPHERTEXT[] = { 0x59,0x4b,0x9d,0xf3,0xba,0xd0,0x40,0xaf,0xa1,0x4e,0x63,0x29,0x89,0x45,0x06,0x8d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-35", "[ECB][MCT][128][DECRYPT][n35]") {
    const uint8_t KEY[] = { 0xb4,0x5c,0x21,0x97,0x7d,0x39,0x69,0x40,0xb0,0xd7,0x5d,0x85,0x3b,0x56,0x4c,0x18 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x67,0x31,0x9b,0x7a,0xb3,0x94,0x93,0x72,0x44,0xb9,0x39,0x77,0xba,0x06,0xc1,0xee };
    const uint8_t CIPHERTEXT[] = { 0xfc,0xf5,0xff,0xaf,0xac,0xc3,0x72,0xe6,0x41,0xb1,0x52,0x0f,0xe7,0x6d,0x16,0xc7 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-36", "[ECB][MCT][128][DECRYPT][n36]") {
    const uint8_t KEY[] = { 0xd3,0x6d,0xba,0xed,0xce,0xad,0xfa,0x32,0xf4,0x6e,0x64,0xf2,0x81,0x50,0x8d,0xf6 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xd9,0x56,0xa3,0x11,0x88,0xa6,0x67,0xee,0xa4,0x4c,0x93,0x58,0x2d,0x6a,0xed,0x6f };
    const uint8_t CIPHERTEXT[] = { 0x67,0x31,0x9b,0x7a,0xb3,0x94,0x93,0x72,0x44,0xb9,0x39,0x77,0xba,0x06,0xc1,0xee };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-37", "[ECB][MCT][128][DECRYPT][n37]") {
    const uint8_t KEY[] = { 0x0a,0x3b,0x19,0xfc,0x46,0x0b,0x9d,0xdc,0x50,0x22,0xf7,0xaa,0xac,0x3a,0x60,0x99 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x04,0xf1,0x82,0x89,0x30,0x87,0x87,0xf3,0xd9,0x36,0xdd,0x2a,0x45,0xc4,0x9e,0x22 };
    const uint8_t CIPHERTEXT[] = { 0xd9,0x56,0xa3,0x11,0x88,0xa6,0x67,0xee,0xa4,0x4c,0x93,0x58,0x2d,0x6a,0xed,0x6f };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-38", "[ECB][MCT][128][DECRYPT][n38]") {
    const uint8_t KEY[] = { 0x0e,0xca,0x9b,0x75,0x76,0x8c,0x1a,0x2f,0x89,0x14,0x2a,0x80,0xe9,0xfe,0xfe,0xbb };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xc9,0x25,0xdf,0x60,0xf4,0x55,0xb0,0xe2,0x78,0x52,0xef,0xcf,0x9f,0xdd,0xc3,0xd0 };
    const uint8_t CIPHERTEXT[] = { 0x04,0xf1,0x82,0x89,0x30,0x87,0x87,0xf3,0xd9,0x36,0xdd,0x2a,0x45,0xc4,0x9e,0x22 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-39", "[ECB][MCT][128][DECRYPT][n39]") {
    const uint8_t KEY[] = { 0xc7,0xef,0x44,0x15,0x82,0xd9,0xaa,0xcd,0xf1,0x46,0xc5,0x4f,0x76,0x23,0x3d,0x6b };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x14,0xc3,0xbc,0xf8,0x34,0x83,0xde,0x97,0x3d,0x97,0x5d,0xbf,0x24,0x9c,0x50,0x5e };
    const uint8_t CIPHERTEXT[] = { 0xc9,0x25,0xdf,0x60,0xf4,0x55,0xb0,0xe2,0x78,0x52,0xef,0xcf,0x9f,0xdd,0xc3,0xd0 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-40", "[ECB][MCT][128][DECRYPT][n40]") {
    const uint8_t KEY[] = { 0xd3,0x2c,0xf8,0xed,0xb6,0x5a,0x74,0x5a,0xcc,0xd1,0x98,0xf0,0x52,0xbf,0x6d,0x35 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xa5,0xf3,0xf4,0xaf,0xd0,0xd0,0x1b,0x9f,0x49,0x99,0xd2,0x7e,0x63,0x86,0xe9,0x25 };
    const uint8_t CIPHERTEXT[] = { 0x14,0xc3,0xbc,0xf8,0x34,0x83,0xde,0x97,0x3d,0x97,0x5d,0xbf,0x24,0x9c,0x50,0x5e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-41", "[ECB][MCT][128][DECRYPT][n41]") {
    const uint8_t KEY[] = { 0x76,0xdf,0x0c,0x42,0x66,0x8a,0x6f,0xc5,0x85,0x48,0x4a,0x8e,0x31,0x39,0x84,0x10 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xd9,0x44,0x51,0x37,0x44,0x78,0xc1,0xbd,0xb4,0xb9,0x4e,0xb6,0x90,0x8a,0x20,0x5e };
    const uint8_t CIPHERTEXT[] = { 0xa5,0xf3,0xf4,0xaf,0xd0,0xd0,0x1b,0x9f,0x49,0x99,0xd2,0x7e,0x63,0x86,0xe9,0x25 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-42", "[ECB][MCT][128][DECRYPT][n42]") {
    const uint8_t KEY[] = { 0xaf,0x9b,0x5d,0x75,0x22,0xf2,0xae,0x78,0x31,0xf1,0x04,0x38,0xa1,0xb3,0xa4,0x4e };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x9f,0x3c,0x6e,0xd4,0x0a,0x32,0xc8,0x9d,0x4e,0xe8,0xd4,0xb8,0x7c,0x82,0x98,0xc7 };
    const uint8_t CIPHERTEXT[] = { 0xd9,0x44,0x51,0x37,0x44,0x78,0xc1,0xbd,0xb4,0xb9,0x4e,0xb6,0x90,0x8a,0x20,0x5e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-43", "[ECB][MCT][128][DECRYPT][n43]") {
    const uint8_t KEY[] = { 0x30,0xa7,0x33,0xa1,0x28,0xc0,0x66,0xe5,0x7f,0x19,0xd0,0x80,0xdd,0x31,0x3c,0x89 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x54,0xaa,0x57,0xcf,0x75,0x65,0x0c,0xf6,0xb7,0xcc,0xbd,0x72,0x02,0x46,0x9b,0xf7 };
    const uint8_t CIPHERTEXT[] = { 0x9f,0x3c,0x6e,0xd4,0x0a,0x32,0xc8,0x9d,0x4e,0xe8,0xd4,0xb8,0x7c,0x82,0x98,0xc7 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-44", "[ECB][MCT][128][DECRYPT][n44]") {
    const uint8_t KEY[] = { 0x64,0x0d,0x64,0x6e,0x5d,0xa5,0x6a,0x13,0xc8,0xd5,0x6d,0xf2,0xdf,0x77,0xa7,0x7e };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x11,0xbc,0x0b,0xe2,0x04,0x65,0x84,0x89,0x34,0xc0,0xfd,0x7d,0x7c,0xed,0x8b,0xd1 };
    const uint8_t CIPHERTEXT[] = { 0x54,0xaa,0x57,0xcf,0x75,0x65,0x0c,0xf6,0xb7,0xcc,0xbd,0x72,0x02,0x46,0x9b,0xf7 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-45", "[ECB][MCT][128][DECRYPT][n45]") {
    const uint8_t KEY[] = { 0x75,0xb1,0x6f,0x8c,0x59,0xc0,0xee,0x9a,0xfc,0x15,0x90,0x8f,0xa3,0x9a,0x2c,0xaf };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x69,0xd4,0x8f,0x1c,0xa3,0x99,0x77,0xf1,0xc0,0x5f,0x8c,0xab,0xd5,0xf7,0xe4,0xac };
    const uint8_t CIPHERTEXT[] = { 0x11,0xbc,0x0b,0xe2,0x04,0x65,0x84,0x89,0x34,0xc0,0xfd,0x7d,0x7c,0xed,0x8b,0xd1 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-46", "[ECB][MCT][128][DECRYPT][n46]") {
    const uint8_t KEY[] = { 0x1c,0x65,0xe0,0x90,0xfa,0x59,0x99,0x6b,0x3c,0x4a,0x1c,0x24,0x76,0x6d,0xc8,0x03 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x2e,0x44,0x7e,0x61,0x21,0x16,0x23,0x82,0xc1,0x82,0xb3,0xef,0xb2,0x7b,0x2d,0x5a };
    const uint8_t CIPHERTEXT[] = { 0x69,0xd4,0x8f,0x1c,0xa3,0x99,0x77,0xf1,0xc0,0x5f,0x8c,0xab,0xd5,0xf7,0xe4,0xac };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-47", "[ECB][MCT][128][DECRYPT][n47]") {
    const uint8_t KEY[] = { 0x32,0x21,0x9e,0xf1,0xdb,0x4f,0xba,0xe9,0xfd,0xc8,0xaf,0xcb,0xc4,0x16,0xe5,0x59 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x3d,0x99,0xd0,0xdf,0xf0,0x89,0x1c,0x38,0xbe,0xc0,0x15,0x51,0xb4,0x04,0x0e,0x55 };
    const uint8_t CIPHERTEXT[] = { 0x2e,0x44,0x7e,0x61,0x21,0x16,0x23,0x82,0xc1,0x82,0xb3,0xef,0xb2,0x7b,0x2d,0x5a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-48", "[ECB][MCT][128][DECRYPT][n48]") {
    const uint8_t KEY[] = { 0x0f,0xb8,0x4e,0x2e,0x2b,0xc6,0xa6,0xd1,0x43,0x08,0xba,0x9a,0x70,0x12,0xeb,0x0c };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x92,0x29,0x4b,0xa3,0x63,0xed,0x5b,0x75,0x0c,0x06,0x6c,0xb6,0x70,0x86,0x20,0xee };
    const uint8_t CIPHERTEXT[] = { 0x3d,0x99,0xd0,0xdf,0xf0,0x89,0x1c,0x38,0xbe,0xc0,0x15,0x51,0xb4,0x04,0x0e,0x55 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-49", "[ECB][MCT][128][DECRYPT][n49]") {
    const uint8_t KEY[] = { 0x9d,0x91,0x05,0x8d,0x48,0x2b,0xfd,0xa4,0x4f,0x0e,0xd6,0x2c,0x00,0x94,0xcb,0xe2 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xcb,0x67,0x4d,0xec,0xff,0xaa,0xe4,0x72,0xd3,0xd0,0x71,0x09,0x35,0xb0,0x2a,0xae };
    const uint8_t CIPHERTEXT[] = { 0x92,0x29,0x4b,0xa3,0x63,0xed,0x5b,0x75,0x0c,0x06,0x6c,0xb6,0x70,0x86,0x20,0xee };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-50", "[ECB][MCT][128][DECRYPT][n50]") {
    const uint8_t KEY[] = { 0x56,0xf6,0x48,0x61,0xb7,0x81,0x19,0xd6,0x9c,0xde,0xa7,0x25,0x35,0x24,0xe1,0x4c };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x47,0xcd,0x6a,0x4b,0x2f,0x9b,0x3d,0x61,0x0d,0x2b,0xd3,0xfe,0x39,0xfe,0xec,0x91 };
    const uint8_t CIPHERTEXT[] = { 0xcb,0x67,0x4d,0xec,0xff,0xaa,0xe4,0x72,0xd3,0xd0,0x71,0x09,0x35,0xb0,0x2a,0xae };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-51", "[ECB][MCT][128][DECRYPT][n51]") {
    const uint8_t KEY[] = { 0x11,0x3b,0x22,0x2a,0x98,0x1a,0x24,0xb7,0x91,0xf5,0x74,0xdb,0x0c,0xda,0x0d,0xdd };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x65,0xb0,0xb9,0x26,0xa5,0xb5,0xb6,0x7f,0x68,0x95,0xaf,0x42,0x44,0x1f,0x10,0x6b };
    const uint8_t CIPHERTEXT[] = { 0x47,0xcd,0x6a,0x4b,0x2f,0x9b,0x3d,0x61,0x0d,0x2b,0xd3,0xfe,0x39,0xfe,0xec,0x91 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-52", "[ECB][MCT][128][DECRYPT][n52]") {
    const uint8_t KEY[] = { 0x74,0x8b,0x9b,0x0c,0x3d,0xaf,0x92,0xc8,0xf9,0x60,0xdb,0x99,0x48,0xc5,0x1d,0xb6 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x36,0x42,0xfd,0x59,0x02,0x4e,0xfb,0x3d,0xc4,0xe5,0xbb,0x26,0x8d,0xd9,0xde,0x04 };
    const uint8_t CIPHERTEXT[] = { 0x65,0xb0,0xb9,0x26,0xa5,0xb5,0xb6,0x7f,0x68,0x95,0xaf,0x42,0x44,0x1f,0x10,0x6b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-53", "[ECB][MCT][128][DECRYPT][n53]") {
    const uint8_t KEY[] = { 0x42,0xc9,0x66,0x55,0x3f,0xe1,0x69,0xf5,0x3d,0x85,0x60,0xbf,0xc5,0x1c,0xc3,0xb2 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x4e,0x5d,0x32,0xa0,0xe4,0x0d,0xd9,0xb8,0x30,0xaf,0x0c,0x29,0x04,0x51,0x89,0x06 };
    const uint8_t CIPHERTEXT[] = { 0x36,0x42,0xfd,0x59,0x02,0x4e,0xfb,0x3d,0xc4,0xe5,0xbb,0x26,0x8d,0xd9,0xde,0x04 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-54", "[ECB][MCT][128][DECRYPT][n54]") {
    const uint8_t KEY[] = { 0x0c,0x94,0x54,0xf5,0xdb,0xec,0xb0,0x4d,0x0d,0x2a,0x6c,0x96,0xc1,0x4d,0x4a,0xb4 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x40,0xa7,0xff,0x6a,0x6d,0x0e,0xa1,0x35,0x24,0x5d,0x5b,0x24,0xa0,0x00,0x44,0x66 };
    const uint8_t CIPHERTEXT[] = { 0x4e,0x5d,0x32,0xa0,0xe4,0x0d,0xd9,0xb8,0x30,0xaf,0x0c,0x29,0x04,0x51,0x89,0x06 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-55", "[ECB][MCT][128][DECRYPT][n55]") {
    const uint8_t KEY[] = { 0x4c,0x33,0xab,0x9f,0xb6,0xe2,0x11,0x78,0x29,0x77,0x37,0xb2,0x61,0x4d,0x0e,0xd2 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xb1,0x8e,0x6d,0x37,0xf5,0x29,0x2a,0xcd,0x1e,0xae,0xee,0x74,0x29,0x30,0x95,0x2a };
    const uint8_t CIPHERTEXT[] = { 0x40,0xa7,0xff,0x6a,0x6d,0x0e,0xa1,0x35,0x24,0x5d,0x5b,0x24,0xa0,0x00,0x44,0x66 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-56", "[ECB][MCT][128][DECRYPT][n56]") {
    const uint8_t KEY[] = { 0xfd,0xbd,0xc6,0xa8,0x43,0xcb,0x3b,0xb5,0x37,0xd9,0xd9,0xc6,0x48,0x7d,0x9b,0xf8 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x42,0xdf,0x9c,0x23,0xbf,0xbc,0x90,0xb7,0x87,0xc5,0xcb,0x0d,0xc0,0x8e,0x80,0xdc };
    const uint8_t CIPHERTEXT[] = { 0xb1,0x8e,0x6d,0x37,0xf5,0x29,0x2a,0xcd,0x1e,0xae,0xee,0x74,0x29,0x30,0x95,0x2a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-57", "[ECB][MCT][128][DECRYPT][n57]") {
    const uint8_t KEY[] = { 0xbf,0x62,0x5a,0x8b,0xfc,0x77,0xab,0x02,0xb0,0x1c,0x12,0xcb,0x88,0xf3,0x1b,0x24 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x58,0x9a,0xf9,0x9a,0xbb,0xba,0x45,0x31,0x81,0x06,0xd2,0xc1,0xca,0x7b,0x82,0xb0 };
    const uint8_t CIPHERTEXT[] = { 0x42,0xdf,0x9c,0x23,0xbf,0xbc,0x90,0xb7,0x87,0xc5,0xcb,0x0d,0xc0,0x8e,0x80,0xdc };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-58", "[ECB][MCT][128][DECRYPT][n58]") {
    const uint8_t KEY[] = { 0xe7,0xf8,0xa3,0x11,0x47,0xcd,0xee,0x33,0x31,0x1a,0xc0,0x0a,0x42,0x88,0x99,0x94 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x96,0xf5,0x4a,0x5b,0xac,0xec,0x99,0x5c,0x02,0x63,0x22,0x6c,0xd4,0x43,0xf2,0xc6 };
    const uint8_t CIPHERTEXT[] = { 0x58,0x9a,0xf9,0x9a,0xbb,0xba,0x45,0x31,0x81,0x06,0xd2,0xc1,0xca,0x7b,0x82,0xb0 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-59", "[ECB][MCT][128][DECRYPT][n59]") {
    const uint8_t KEY[] = { 0x71,0x0d,0xe9,0x4a,0xeb,0x21,0x77,0x6f,0x33,0x79,0xe2,0x66,0x96,0xcb,0x6b,0x52 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x84,0xe0,0x7c,0xe7,0x17,0xc7,0x47,0xcb,0x92,0x4e,0x42,0xcd,0xf6,0xec,0x65,0x24 };
    const uint8_t CIPHERTEXT[] = { 0x96,0xf5,0x4a,0x5b,0xac,0xec,0x99,0x5c,0x02,0x63,0x22,0x6c,0xd4,0x43,0xf2,0xc6 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-60", "[ECB][MCT][128][DECRYPT][n60]") {
    const uint8_t KEY[] = { 0xf5,0xed,0x95,0xad,0xfc,0xe6,0x30,0xa4,0xa1,0x37,0xa0,0xab,0x60,0x27,0x0e,0x76 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x51,0x40,0xa6,0x6d,0x02,0x86,0x7d,0xdf,0xa8,0xbb,0x01,0x4f,0x75,0xd5,0x3b,0x83 };
    const uint8_t CIPHERTEXT[] = { 0x84,0xe0,0x7c,0xe7,0x17,0xc7,0x47,0xcb,0x92,0x4e,0x42,0xcd,0xf6,0xec,0x65,0x24 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-61", "[ECB][MCT][128][DECRYPT][n61]") {
    const uint8_t KEY[] = { 0xa4,0xad,0x33,0xc0,0xfe,0x60,0x4d,0x7b,0x09,0x8c,0xa1,0xe4,0x15,0xf2,0x35,0xf5 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xa1,0x57,0x0d,0xc8,0x60,0x5d,0x7d,0x68,0xf0,0xa2,0x41,0x6a,0xa2,0xc3,0x53,0x6a };
    const uint8_t CIPHERTEXT[] = { 0x51,0x40,0xa6,0x6d,0x02,0x86,0x7d,0xdf,0xa8,0xbb,0x01,0x4f,0x75,0xd5,0x3b,0x83 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-62", "[ECB][MCT][128][DECRYPT][n62]") {
    const uint8_t KEY[] = { 0x05,0xfa,0x3e,0x08,0x9e,0x3d,0x30,0x13,0xf9,0x2e,0xe0,0x8e,0xb7,0x31,0x66,0x9f };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x96,0xab,0x8b,0xd9,0x09,0x1a,0x70,0x3a,0x6e,0x6d,0x1a,0x21,0x90,0xf0,0xb5,0xc9 };
    const uint8_t CIPHERTEXT[] = { 0xa1,0x57,0x0d,0xc8,0x60,0x5d,0x7d,0x68,0xf0,0xa2,0x41,0x6a,0xa2,0xc3,0x53,0x6a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-63", "[ECB][MCT][128][DECRYPT][n63]") {
    const uint8_t KEY[] = { 0x93,0x51,0xb5,0xd1,0x97,0x27,0x40,0x29,0x97,0x43,0xfa,0xaf,0x27,0xc1,0xd3,0x56 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x84,0x18,0xc2,0xce,0xc9,0xd7,0xcc,0x38,0x25,0x15,0x27,0x90,0xf1,0x20,0x48,0x8f };
    const uint8_t CIPHERTEXT[] = { 0x96,0xab,0x8b,0xd9,0x09,0x1a,0x70,0x3a,0x6e,0x6d,0x1a,0x21,0x90,0xf0,0xb5,0xc9 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-64", "[ECB][MCT][128][DECRYPT][n64]") {
    const uint8_t KEY[] = { 0x17,0x49,0x77,0x1f,0x5e,0xf0,0x8c,0x11,0xb2,0x56,0xdd,0x3f,0xd6,0xe1,0x9b,0xd9 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x79,0x73,0x67,0x37,0x55,0xc8,0x20,0x1e,0xc5,0x2b,0xde,0xc3,0x0a,0x86,0x19,0x1f };
    const uint8_t CIPHERTEXT[] = { 0x84,0x18,0xc2,0xce,0xc9,0xd7,0xcc,0x38,0x25,0x15,0x27,0x90,0xf1,0x20,0x48,0x8f };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-65", "[ECB][MCT][128][DECRYPT][n65]") {
    const uint8_t KEY[] = { 0x6e,0x3a,0x10,0x28,0x0b,0x38,0xac,0x0f,0x77,0x7d,0x03,0xfc,0xdc,0x67,0x82,0xc6 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x2a,0x92,0xba,0x99,0x17,0x55,0xf3,0xc6,0xad,0x1e,0xf5,0x86,0x81,0xac,0x3a,0x12 };
    const uint8_t CIPHERTEXT[] = { 0x79,0x73,0x67,0x37,0x55,0xc8,0x20,0x1e,0xc5,0x2b,0xde,0xc3,0x0a,0x86,0x19,0x1f };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-66", "[ECB][MCT][128][DECRYPT][n66]") {
    const uint8_t KEY[] = { 0x44,0xa8,0xaa,0xb1,0x1c,0x6d,0x5f,0xc9,0xda,0x63,0xf6,0x7a,0x5d,0xcb,0xb8,0xd4 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xe3,0xda,0xa0,0xcf,0xe7,0x95,0x94,0x31,0x17,0x62,0xca,0x0d,0x39,0x98,0x5d,0xa2 };
    const uint8_t CIPHERTEXT[] = { 0x2a,0x92,0xba,0x99,0x17,0x55,0xf3,0xc6,0xad,0x1e,0xf5,0x86,0x81,0xac,0x3a,0x12 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-67", "[ECB][MCT][128][DECRYPT][n67]") {
    const uint8_t KEY[] = { 0xa7,0x72,0x0a,0x7e,0xfb,0xf8,0xcb,0xf8,0xcd,0x01,0x3c,0x77,0x64,0x53,0xe5,0x76 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x5c,0x2e,0xa8,0xb0,0xb4,0xbd,0x7b,0x50,0xb4,0x8a,0xbd,0x7d,0xf8,0xe7,0x16,0xf2 };
    const uint8_t CIPHERTEXT[] = { 0xe3,0xda,0xa0,0xcf,0xe7,0x95,0x94,0x31,0x17,0x62,0xca,0x0d,0x39,0x98,0x5d,0xa2 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-68", "[ECB][MCT][128][DECRYPT][n68]") {
    const uint8_t KEY[] = { 0xfb,0x5c,0xa2,0xce,0x4f,0x45,0xb0,0xa8,0x79,0x8b,0x81,0x0a,0x9c,0xb4,0xf3,0x84 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xf1,0x5e,0x39,0xa1,0x1e,0xd3,0x97,0x37,0x8b,0x6d,0xe3,0xd6,0x2b,0xde,0x10,0xc2 };
    const uint8_t CIPHERTEXT[] = { 0x5c,0x2e,0xa8,0xb0,0xb4,0xbd,0x7b,0x50,0xb4,0x8a,0xbd,0x7d,0xf8,0xe7,0x16,0xf2 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-69", "[ECB][MCT][128][DECRYPT][n69]") {
    const uint8_t KEY[] = { 0x0a,0x02,0x9b,0x6f,0x51,0x96,0x27,0x9f,0xf2,0xe6,0x62,0xdc,0xb7,0x6a,0xe3,0x46 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xd1,0x68,0x79,0xee,0x2f,0xe2,0xc0,0x77,0x03,0xe7,0xeb,0xa3,0xe0,0x93,0xe9,0x11 };
    const uint8_t CIPHERTEXT[] = { 0xf1,0x5e,0x39,0xa1,0x1e,0xd3,0x97,0x37,0x8b,0x6d,0xe3,0xd6,0x2b,0xde,0x10,0xc2 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-70", "[ECB][MCT][128][DECRYPT][n70]") {
    const uint8_t KEY[] = { 0xdb,0x6a,0xe2,0x81,0x7e,0x74,0xe7,0xe8,0xf1,0x01,0x89,0x7f,0x57,0xf9,0x0a,0x57 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x57,0xaa,0xc9,0xd1,0x2d,0xa6,0x81,0xf1,0xef,0x4f,0xc3,0xd0,0x72,0x69,0xe1,0x59 };
    const uint8_t CIPHERTEXT[] = { 0xd1,0x68,0x79,0xee,0x2f,0xe2,0xc0,0x77,0x03,0xe7,0xeb,0xa3,0xe0,0x93,0xe9,0x11 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-71", "[ECB][MCT][128][DECRYPT][n71]") {
    const uint8_t KEY[] = { 0x8c,0xc0,0x2b,0x50,0x53,0xd2,0x66,0x19,0x1e,0x4e,0x4a,0xaf,0x25,0x90,0xeb,0x0e };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xf6,0x47,0x2d,0x8a,0x7d,0x28,0x8d,0xb2,0x26,0x2d,0x82,0x6f,0xf2,0xf8,0x06,0xee };
    const uint8_t CIPHERTEXT[] = { 0x57,0xaa,0xc9,0xd1,0x2d,0xa6,0x81,0xf1,0xef,0x4f,0xc3,0xd0,0x72,0x69,0xe1,0x59 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-72", "[ECB][MCT][128][DECRYPT][n72]") {
    const uint8_t KEY[] = { 0x7a,0x87,0x06,0xda,0x2e,0xfa,0xeb,0xab,0x38,0x63,0xc8,0xc0,0xd7,0x68,0xed,0xe0 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xd3,0xec,0x20,0xae,0x32,0x57,0x19,0x2d,0x51,0xf2,0xce,0x4e,0x73,0xf8,0x7e,0x53 };
    const uint8_t CIPHERTEXT[] = { 0xf6,0x47,0x2d,0x8a,0x7d,0x28,0x8d,0xb2,0x26,0x2d,0x82,0x6f,0xf2,0xf8,0x06,0xee };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-73", "[ECB][MCT][128][DECRYPT][n73]") {
    const uint8_t KEY[] = { 0xa9,0x6b,0x26,0x74,0x1c,0xad,0xf2,0x86,0x69,0x91,0x06,0x8e,0xa4,0x90,0x93,0xb3 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xd9,0x98,0x91,0xb2,0x45,0x28,0x26,0x41,0xfb,0x9e,0x91,0x68,0x1f,0xce,0x7e,0xe1 };
    const uint8_t CIPHERTEXT[] = { 0xd3,0xec,0x20,0xae,0x32,0x57,0x19,0x2d,0x51,0xf2,0xce,0x4e,0x73,0xf8,0x7e,0x53 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-74", "[ECB][MCT][128][DECRYPT][n74]") {
    const uint8_t KEY[] = { 0x70,0xf3,0xb7,0xc6,0x59,0x85,0xd4,0xc7,0x92,0x0f,0x97,0xe6,0xbb,0x5e,0xed,0x52 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x8f,0x2f,0xa0,0x03,0x1b,0xaa,0xcb,0x38,0x8e,0xd7,0xda,0x3e,0x7f,0xd6,0x28,0x28 };
    const uint8_t CIPHERTEXT[] = { 0xd9,0x98,0x91,0xb2,0x45,0x28,0x26,0x41,0xfb,0x9e,0x91,0x68,0x1f,0xce,0x7e,0xe1 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-75", "[ECB][MCT][128][DECRYPT][n75]") {
    const uint8_t KEY[] = { 0xff,0xdc,0x17,0xc5,0x42,0x2f,0x1f,0xff,0x1c,0xd8,0x4d,0xd8,0xc4,0x88,0xc5,0x7a };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x80,0xbe,0xd1,0x3a,0xd5,0xae,0xbb,0x07,0x83,0x62,0x9b,0x03,0xaf,0x2f,0x68,0x97 };
    const uint8_t CIPHERTEXT[] = { 0x8f,0x2f,0xa0,0x03,0x1b,0xaa,0xcb,0x38,0x8e,0xd7,0xda,0x3e,0x7f,0xd6,0x28,0x28 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-76", "[ECB][MCT][128][DECRYPT][n76]") {
    const uint8_t KEY[] = { 0x7f,0x62,0xc6,0xff,0x97,0x81,0xa4,0xf8,0x9f,0xba,0xd6,0xdb,0x6b,0xa7,0xad,0xed };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xfa,0xc4,0x3d,0xfa,0x16,0xd3,0x93,0x58,0x0f,0x13,0x0b,0x8a,0x95,0x53,0x39,0xa6 };
    const uint8_t CIPHERTEXT[] = { 0x80,0xbe,0xd1,0x3a,0xd5,0xae,0xbb,0x07,0x83,0x62,0x9b,0x03,0xaf,0x2f,0x68,0x97 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-77", "[ECB][MCT][128][DECRYPT][n77]") {
    const uint8_t KEY[] = { 0x85,0xa6,0xfb,0x05,0x81,0x52,0x37,0xa0,0x90,0xa9,0xdd,0x51,0xfe,0xf4,0x94,0x4b };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x60,0xaa,0x3f,0x36,0x83,0x34,0x6b,0x09,0x46,0x6f,0x1c,0x4c,0x11,0xb3,0x76,0xf5 };
    const uint8_t CIPHERTEXT[] = { 0xfa,0xc4,0x3d,0xfa,0x16,0xd3,0x93,0x58,0x0f,0x13,0x0b,0x8a,0x95,0x53,0x39,0xa6 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-78", "[ECB][MCT][128][DECRYPT][n78]") {
    const uint8_t KEY[] = { 0xe5,0x0c,0xc4,0x33,0x02,0x66,0x5c,0xa9,0xd6,0xc6,0xc1,0x1d,0xef,0x47,0xe2,0xbe };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xe9,0x3a,0xc1,0x58,0xda,0x11,0x37,0x97,0xbc,0xe2,0x47,0x22,0x40,0xc4,0xd7,0xbb };
    const uint8_t CIPHERTEXT[] = { 0x60,0xaa,0x3f,0x36,0x83,0x34,0x6b,0x09,0x46,0x6f,0x1c,0x4c,0x11,0xb3,0x76,0xf5 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-79", "[ECB][MCT][128][DECRYPT][n79]") {
    const uint8_t KEY[] = { 0x0c,0x36,0x05,0x6b,0xd8,0x77,0x6b,0x3e,0x6a,0x24,0x86,0x3f,0xaf,0x83,0x35,0x05 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xe9,0x6e,0x84,0x32,0xe2,0xee,0xa1,0xde,0x7e,0x0c,0xce,0xad,0xfe,0x5e,0x16,0x23 };
    const uint8_t CIPHERTEXT[] = { 0xe9,0x3a,0xc1,0x58,0xda,0x11,0x37,0x97,0xbc,0xe2,0x47,0x22,0x40,0xc4,0xd7,0xbb };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-80", "[ECB][MCT][128][DECRYPT][n80]") {
    const uint8_t KEY[] = { 0xe5,0x58,0x81,0x59,0x3a,0x99,0xca,0xe0,0x14,0x28,0x48,0x92,0x51,0xdd,0x23,0x26 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xd9,0x96,0x30,0xcb,0x34,0xf0,0x6a,0x3a,0x02,0xe9,0x80,0x3a,0x02,0x99,0x80,0xa2 };
    const uint8_t CIPHERTEXT[] = { 0xe9,0x6e,0x84,0x32,0xe2,0xee,0xa1,0xde,0x7e,0x0c,0xce,0xad,0xfe,0x5e,0x16,0x23 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-81", "[ECB][MCT][128][DECRYPT][n81]") {
    const uint8_t KEY[] = { 0x3c,0xce,0xb1,0x92,0x0e,0x69,0xa0,0xda,0x16,0xc1,0xc8,0xa8,0x53,0x44,0xa3,0x84 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xe5,0xa1,0x4b,0x33,0x44,0x30,0x76,0x8e,0xdf,0x5d,0xd7,0x86,0x3e,0xe3,0x06,0x78 };
    const uint8_t CIPHERTEXT[] = { 0xd9,0x96,0x30,0xcb,0x34,0xf0,0x6a,0x3a,0x02,0xe9,0x80,0x3a,0x02,0x99,0x80,0xa2 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-82", "[ECB][MCT][128][DECRYPT][n82]") {
    const uint8_t KEY[] = { 0xd9,0x6f,0xfa,0xa1,0x4a,0x59,0xd6,0x54,0xc9,0x9c,0x1f,0x2e,0x6d,0xa7,0xa5,0xfc };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x49,0xda,0xb0,0xbc,0x5f,0xb8,0xc3,0x87,0xea,0x9c,0x55,0x7d,0x3a,0x35,0xe6,0x59 };
    const uint8_t CIPHERTEXT[] = { 0xe5,0xa1,0x4b,0x33,0x44,0x30,0x76,0x8e,0xdf,0x5d,0xd7,0x86,0x3e,0xe3,0x06,0x78 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-83", "[ECB][MCT][128][DECRYPT][n83]") {
    const uint8_t KEY[] = { 0x90,0xb5,0x4a,0x1d,0x15,0xe1,0x15,0xd3,0x23,0x00,0x4a,0x53,0x57,0x92,0x43,0xa5 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x68,0x67,0xe9,0x56,0x76,0x3a,0x73,0x77,0xa1,0x5a,0x42,0x48,0xab,0x91,0xc8,0x29 };
    const uint8_t CIPHERTEXT[] = { 0x49,0xda,0xb0,0xbc,0x5f,0xb8,0xc3,0x87,0xea,0x9c,0x55,0x7d,0x3a,0x35,0xe6,0x59 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-84", "[ECB][MCT][128][DECRYPT][n84]") {
    const uint8_t KEY[] = { 0xf8,0xd2,0xa3,0x4b,0x63,0xdb,0x66,0xa4,0x82,0x5a,0x08,0x1b,0xfc,0x03,0x8b,0x8c };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x4f,0x53,0x63,0x83,0xba,0x4e,0x25,0x8d,0xd3,0xab,0x76,0x40,0x27,0xa6,0x6e,0x39 };
    const uint8_t CIPHERTEXT[] = { 0x68,0x67,0xe9,0x56,0x76,0x3a,0x73,0x77,0xa1,0x5a,0x42,0x48,0xab,0x91,0xc8,0x29 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-85", "[ECB][MCT][128][DECRYPT][n85]") {
    const uint8_t KEY[] = { 0xb7,0x81,0xc0,0xc8,0xd9,0x95,0x43,0x29,0x51,0xf1,0x7e,0x5b,0xdb,0xa5,0xe5,0xb5 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xe9,0xb6,0xab,0xc0,0x89,0x28,0x68,0x34,0xeb,0x94,0x21,0xe7,0x1f,0xe9,0x85,0x17 };
    const uint8_t CIPHERTEXT[] = { 0x4f,0x53,0x63,0x83,0xba,0x4e,0x25,0x8d,0xd3,0xab,0x76,0x40,0x27,0xa6,0x6e,0x39 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-86", "[ECB][MCT][128][DECRYPT][n86]") {
    const uint8_t KEY[] = { 0x5e,0x37,0x6b,0x08,0x50,0xbd,0x2b,0x1d,0xba,0x65,0x5f,0xbc,0xc4,0x4c,0x60,0xa2 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x25,0x61,0x21,0xde,0xad,0x70,0xe6,0x67,0x5a,0xd6,0x31,0xdd,0x05,0x27,0xfb,0x1a };
    const uint8_t CIPHERTEXT[] = { 0xe9,0xb6,0xab,0xc0,0x89,0x28,0x68,0x34,0xeb,0x94,0x21,0xe7,0x1f,0xe9,0x85,0x17 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-87", "[ECB][MCT][128][DECRYPT][n87]") {
    const uint8_t KEY[] = { 0x7b,0x56,0x4a,0xd6,0xfd,0xcd,0xcd,0x7a,0xe0,0xb3,0x6e,0x61,0xc1,0x6b,0x9b,0xb8 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x6b,0xdb,0xcc,0x94,0xec,0x64,0x97,0x44,0x5e,0x40,0x24,0xac,0xb6,0x01,0x74,0x1b };
    const uint8_t CIPHERTEXT[] = { 0x25,0x61,0x21,0xde,0xad,0x70,0xe6,0x67,0x5a,0xd6,0x31,0xdd,0x05,0x27,0xfb,0x1a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-88", "[ECB][MCT][128][DECRYPT][n88]") {
    const uint8_t KEY[] = { 0x10,0x8d,0x86,0x42,0x11,0xa9,0x5a,0x3e,0xbe,0xf3,0x4a,0xcd,0x77,0x6a,0xef,0xa3 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x44,0xe8,0x6f,0x9d,0x48,0xc6,0x69,0x95,0x54,0xa3,0x53,0x8e,0xb6,0xf5,0x54,0x79 };
    const uint8_t CIPHERTEXT[] = { 0x6b,0xdb,0xcc,0x94,0xec,0x64,0x97,0x44,0x5e,0x40,0x24,0xac,0xb6,0x01,0x74,0x1b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-89", "[ECB][MCT][128][DECRYPT][n89]") {
    const uint8_t KEY[] = { 0x54,0x65,0xe9,0xdf,0x59,0x6f,0x33,0xab,0xea,0x50,0x19,0x43,0xc1,0x9f,0xbb,0xda };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xc7,0xc6,0x22,0xfe,0xe0,0x0a,0x18,0x0f,0x31,0x31,0xa5,0x7a,0x82,0xac,0xf7,0xa9 };
    const uint8_t CIPHERTEXT[] = { 0x44,0xe8,0x6f,0x9d,0x48,0xc6,0x69,0x95,0x54,0xa3,0x53,0x8e,0xb6,0xf5,0x54,0x79 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-90", "[ECB][MCT][128][DECRYPT][n90]") {
    const uint8_t KEY[] = { 0x93,0xa3,0xcb,0x21,0xb9,0x65,0x2b,0xa4,0xdb,0x61,0xbc,0x39,0x43,0x33,0x4c,0x73 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xe0,0x96,0xb0,0x40,0x6e,0x6e,0x8a,0xbb,0x6c,0xed,0x35,0x3f,0x1b,0xe4,0x06,0x93 };
    const uint8_t CIPHERTEXT[] = { 0xc7,0xc6,0x22,0xfe,0xe0,0x0a,0x18,0x0f,0x31,0x31,0xa5,0x7a,0x82,0xac,0xf7,0xa9 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-91", "[ECB][MCT][128][DECRYPT][n91]") {
    const uint8_t KEY[] = { 0x73,0x35,0x7b,0x61,0xd7,0x0b,0xa1,0x1f,0xb7,0x8c,0x89,0x06,0x58,0xd7,0x4a,0xe0 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x73,0x32,0x62,0x51,0xdb,0xd8,0x9c,0x23,0xb3,0x7c,0xae,0xe2,0xee,0x6d,0x2d,0x9e };
    const uint8_t CIPHERTEXT[] = { 0xe0,0x96,0xb0,0x40,0x6e,0x6e,0x8a,0xbb,0x6c,0xed,0x35,0x3f,0x1b,0xe4,0x06,0x93 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-92", "[ECB][MCT][128][DECRYPT][n92]") {
    const uint8_t KEY[] = { 0x00,0x07,0x19,0x30,0x0c,0xd3,0x3d,0x3c,0x04,0xf0,0x27,0xe4,0xb6,0xba,0x67,0x7e };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x7b,0x2c,0x68,0x7d,0x46,0x00,0x54,0xaf,0x03,0x70,0x96,0x45,0x05,0x64,0x07,0xc6 };
    const uint8_t CIPHERTEXT[] = { 0x73,0x32,0x62,0x51,0xdb,0xd8,0x9c,0x23,0xb3,0x7c,0xae,0xe2,0xee,0x6d,0x2d,0x9e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-93", "[ECB][MCT][128][DECRYPT][n93]") {
    const uint8_t KEY[] = { 0x7b,0x2b,0x71,0x4d,0x4a,0xd3,0x69,0x93,0x07,0x80,0xb1,0xa1,0xb3,0xde,0x60,0xb8 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x8b,0xb9,0xf3,0x81,0x43,0x81,0x45,0xa9,0x67,0x14,0xe2,0x38,0xa8,0x86,0x4e,0x0b };
    const uint8_t CIPHERTEXT[] = { 0x7b,0x2c,0x68,0x7d,0x46,0x00,0x54,0xaf,0x03,0x70,0x96,0x45,0x05,0x64,0x07,0xc6 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-94", "[ECB][MCT][128][DECRYPT][n94]") {
    const uint8_t KEY[] = { 0xf0,0x92,0x82,0xcc,0x09,0x52,0x2c,0x3a,0x60,0x94,0x53,0x99,0x1b,0x58,0x2e,0xb3 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xd5,0x95,0x09,0xd0,0x8b,0xcf,0xc3,0x0e,0x20,0x34,0x4b,0x1c,0x4c,0x53,0xf7,0x26 };
    const uint8_t CIPHERTEXT[] = { 0x8b,0xb9,0xf3,0x81,0x43,0x81,0x45,0xa9,0x67,0x14,0xe2,0x38,0xa8,0x86,0x4e,0x0b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-95", "[ECB][MCT][128][DECRYPT][n95]") {
    const uint8_t KEY[] = { 0x25,0x07,0x8b,0x1c,0x82,0x9d,0xef,0x34,0x40,0xa0,0x18,0x85,0x57,0x0b,0xd9,0x95 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x02,0xe6,0x07,0x7d,0x01,0xa3,0x52,0x63,0x78,0x99,0xd6,0xce,0x62,0x67,0x82,0xac };
    const uint8_t CIPHERTEXT[] = { 0xd5,0x95,0x09,0xd0,0x8b,0xcf,0xc3,0x0e,0x20,0x34,0x4b,0x1c,0x4c,0x53,0xf7,0x26 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-96", "[ECB][MCT][128][DECRYPT][n96]") {
    const uint8_t KEY[] = { 0x27,0xe1,0x8c,0x61,0x83,0x3e,0xbd,0x57,0x38,0x39,0xce,0x4b,0x35,0x6c,0x5b,0x39 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xed,0x01,0xd9,0x60,0x11,0x45,0xc1,0x16,0x62,0x98,0x6b,0x08,0x27,0xe4,0x03,0xec };
    const uint8_t CIPHERTEXT[] = { 0x02,0xe6,0x07,0x7d,0x01,0xa3,0x52,0x63,0x78,0x99,0xd6,0xce,0x62,0x67,0x82,0xac };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-97", "[ECB][MCT][128][DECRYPT][n97]") {
    const uint8_t KEY[] = { 0xca,0xe0,0x55,0x01,0x92,0x7b,0x7c,0x41,0x5a,0xa1,0xa5,0x43,0x12,0x88,0x58,0xd5 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x7d,0x5b,0x1c,0xa0,0x68,0x84,0xb5,0xa5,0x5e,0x90,0x35,0xfe,0x7d,0x77,0xd4,0xa7 };
    const uint8_t CIPHERTEXT[] = { 0xed,0x01,0xd9,0x60,0x11,0x45,0xc1,0x16,0x62,0x98,0x6b,0x08,0x27,0xe4,0x03,0xec };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-98", "[ECB][MCT][128][DECRYPT][n98]") {
    const uint8_t KEY[] = { 0xb7,0xbb,0x49,0xa1,0xfa,0xff,0xc9,0xe4,0x04,0x31,0x90,0xbd,0x6f,0xff,0x8c,0x72 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x1a,0x23,0xd3,0x71,0xb9,0x7e,0x10,0x56,0xe8,0xbc,0x95,0x45,0xc5,0x6c,0xab,0x9e };
    const uint8_t CIPHERTEXT[] = { 0x7d,0x5b,0x1c,0xa0,0x68,0x84,0xb5,0xa5,0x5e,0x90,0x35,0xfe,0x7d,0x77,0xd4,0xa7 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT128-DECRYPT-99", "[ECB][MCT][128][DECRYPT][n99]") {
    const uint8_t KEY[] = { 0xad,0x98,0x9a,0xd0,0x43,0x81,0xd9,0xb2,0xec,0x8d,0x05,0xf8,0xaa,0x93,0x27,0xec };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xd1,0xd2,0xbf,0xdc,0x58,0xff,0xca,0xd2,0x34,0x1b,0x09,0x5b,0xce,0x55,0x22,0x1e };
    const uint8_t CIPHERTEXT[] = { 0x1a,0x23,0xd3,0x71,0xb9,0x7e,0x10,0x56,0xe8,0xbc,0x95,0x45,0xc5,0x6c,0xab,0x9e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

