#include "rijndael.h"
#include "catch.hpp"
#include <cstring>

static inline std::string buf2str(const uint8_t *buf, size_t len) {
    std::ostringstream ss; ss << std::hex << std::setfill('0');
    for (size_t i = 0; i < len; ++i) {
        ss << std::setw(2) << static_cast<int>(buf[i]) << ' ';
    }
    return ss.str();
}

TEST_CASE("CFB8MMT192-ENCRYPT-0", "[CFB8][MMT][192][ENCRYPT][n0]") {
    const uint8_t KEY[] = { 0x32,0xa1,0xb0,0xe3,0xda,0x36,0x8d,0xb5,0x63,0xd7,0x31,0x6b,0x97,0x79,0xd3,0x32,0x7e,0x53,0xd9,0xa6,0xd2,0x87,0xed,0x97 };
    const uint8_t IV[] = { 0x3d,0xd0,0xe7,0xe2,0x1f,0x09,0xd5,0x84,0x2f,0x3a,0x69,0x9d,0xa9,0xb5,0x73,0x46 };
    const uint8_t PLAINTEXT[] = { 0x54 };
    const uint8_t CIPHERTEXT[] = { 0x6d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb8(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB8MMT192-ENCRYPT-1", "[CFB8][MMT][192][ENCRYPT][n1]") {
    const uint8_t KEY[] = { 0xa6,0x38,0x1d,0xcc,0x18,0xdd,0x85,0xd7,0x72,0x9c,0x1d,0xce,0x90,0x74,0x3b,0xbe,0x1d,0xf5,0x80,0xd8,0x57,0xf5,0xb9,0xc4 };
    const uint8_t IV[] = { 0xc0,0xac,0x50,0x1f,0xad,0x7f,0x4a,0x14,0x65,0xda,0xf3,0x2e,0x18,0xfc,0x1a,0x4f };
    const uint8_t PLAINTEXT[] = { 0xa4,0x56 };
    const uint8_t CIPHERTEXT[] = { 0x8f,0xb6 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb8(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB8MMT192-ENCRYPT-2", "[CFB8][MMT][192][ENCRYPT][n2]") {
    const uint8_t KEY[] = { 0xd0,0x8d,0xbe,0xe4,0x73,0x2c,0x7f,0xfc,0x54,0x4c,0x16,0x95,0xb2,0x01,0xd3,0x0e,0x79,0x50,0x37,0x32,0x5e,0xf0,0xaa,0x18 };
    const uint8_t IV[] = { 0xa1,0xe3,0x9a,0xee,0xb9,0x72,0xa8,0xd7,0x0a,0xa0,0xfc,0x7d,0x6f,0xac,0x6e,0xac };
    const uint8_t PLAINTEXT[] = { 0xfd,0x11,0x5d };
    const uint8_t CIPHERTEXT[] = { 0xc4,0xc0,0x16 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb8(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB8MMT192-ENCRYPT-3", "[CFB8][MMT][192][ENCRYPT][n3]") {
    const uint8_t KEY[] = { 0x27,0x71,0x85,0xa4,0xa4,0x40,0x86,0x99,0x20,0xf5,0x23,0xc4,0xd5,0x78,0xfc,0x5b,0xed,0xd3,0x3a,0xee,0x8d,0x2e,0xba,0xf7 };
    const uint8_t IV[] = { 0x67,0xbe,0x00,0x57,0x2f,0x82,0xaa,0xbc,0x13,0xd6,0xe5,0xa2,0xe5,0x1d,0x1f,0x08 };
    const uint8_t PLAINTEXT[] = { 0x88,0xe0,0x70,0x61 };
    const uint8_t CIPHERTEXT[] = { 0x8b,0xb6,0x30,0xba };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb8(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB8MMT192-ENCRYPT-4", "[CFB8][MMT][192][ENCRYPT][n4]") {
    const uint8_t KEY[] = { 0x83,0xf7,0x0f,0xdc,0xe4,0x73,0x06,0xfc,0xbb,0x8c,0x21,0xb6,0xa8,0xb3,0x20,0x9f,0x7e,0xc1,0x85,0xfe,0xf4,0xde,0xeb,0xd4 };
    const uint8_t IV[] = { 0xff,0x73,0xb3,0x10,0xcf,0x7e,0x62,0xce,0x6f,0x50,0x10,0x92,0xfa,0x6c,0xc8,0x88 };
    const uint8_t PLAINTEXT[] = { 0x36,0x66,0x4e,0x22,0x2d };
    const uint8_t CIPHERTEXT[] = { 0x20,0x85,0x55,0x55,0xd1 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb8(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB8MMT192-ENCRYPT-5", "[CFB8][MMT][192][ENCRYPT][n5]") {
    const uint8_t KEY[] = { 0xc5,0xbe,0x27,0x1a,0x29,0xf4,0xa2,0x9e,0x08,0x5e,0x8e,0x98,0x19,0x66,0x01,0xdc,0xb8,0x8c,0xcc,0x03,0xe5,0x59,0xa3,0x04 };
    const uint8_t IV[] = { 0x9f,0x51,0xfa,0x2e,0xb8,0xa0,0x84,0x71,0x8f,0x72,0x40,0xe4,0x7d,0x13,0x5d,0xce };
    const uint8_t PLAINTEXT[] = { 0xb5,0x7f,0x12,0x34,0x2a,0x62 };
    const uint8_t CIPHERTEXT[] = { 0x73,0xff,0x9b,0xf3,0xec,0x4b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb8(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB8MMT192-ENCRYPT-6", "[CFB8][MMT][192][ENCRYPT][n6]") {
    const uint8_t KEY[] = { 0x9c,0x55,0x32,0x2e,0x6d,0x49,0x5b,0xe0,0x10,0x76,0xd4,0xb8,0x03,0x71,0xad,0x14,0x79,0xae,0x56,0x36,0xff,0x98,0x61,0xf5 };
    const uint8_t IV[] = { 0x2b,0x79,0xcf,0xc1,0xff,0x37,0x25,0x4d,0xed,0xf5,0x92,0x4a,0x6b,0x61,0xe3,0xe0 };
    const uint8_t PLAINTEXT[] = { 0x6d,0xce,0xde,0x43,0xc2,0xee,0x65 };
    const uint8_t CIPHERTEXT[] = { 0x7c,0x89,0x76,0x58,0x28,0x22,0x20 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb8(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB8MMT192-ENCRYPT-7", "[CFB8][MMT][192][ENCRYPT][n7]") {
    const uint8_t KEY[] = { 0x6e,0x78,0xcc,0xec,0xe7,0xd1,0xb2,0xa3,0xc0,0x8c,0xf0,0xde,0x73,0x8b,0xee,0x33,0xcb,0xbb,0xf7,0x8d,0x9b,0xf4,0x92,0x2c };
    const uint8_t IV[] = { 0x4b,0xbe,0x15,0xb1,0xe9,0x4a,0x7b,0x97,0x25,0x0a,0x21,0x36,0xd8,0x80,0x4e,0x46 };
    const uint8_t PLAINTEXT[] = { 0xce,0xda,0x42,0x52,0x78,0x71,0xf8,0x02 };
    const uint8_t CIPHERTEXT[] = { 0xd9,0x2f,0xf8,0x90,0x45,0xb1,0x91,0x7f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb8(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB8MMT192-ENCRYPT-8", "[CFB8][MMT][192][ENCRYPT][n8]") {
    const uint8_t KEY[] = { 0x13,0xc9,0x86,0x65,0x74,0x6f,0x78,0x25,0xb3,0x7b,0x40,0x49,0x16,0x24,0x0a,0xdb,0xd1,0xe4,0x36,0x4b,0xe1,0xd0,0x5c,0x63 };
    const uint8_t IV[] = { 0x0e,0x47,0x9f,0xbd,0x5f,0x39,0x61,0xf3,0x8b,0x8a,0x26,0xbe,0x1f,0x2d,0x65,0xc5 };
    const uint8_t PLAINTEXT[] = { 0x1b,0x0a,0x63,0xd7,0x34,0x64,0xab,0x3c,0x8a };
    const uint8_t CIPHERTEXT[] = { 0x54,0x85,0x84,0x7e,0x5d,0x3c,0x2e,0x2c,0xc4 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb8(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB8MMT192-ENCRYPT-9", "[CFB8][MMT][192][ENCRYPT][n9]") {
    const uint8_t KEY[] = { 0x53,0x7e,0x7b,0xf6,0x61,0xfd,0x40,0x24,0xa0,0x24,0x61,0x3f,0x15,0xb1,0x36,0x90,0xf7,0xd0,0xc8,0x47,0xc1,0xe1,0x89,0x65 };
    const uint8_t IV[] = { 0x3a,0x81,0xf9,0xd9,0xd3,0xc1,0x55,0xb0,0xca,0xad,0x5d,0x73,0x34,0x94,0x76,0xfc };
    const uint8_t PLAINTEXT[] = { 0xd3,0xd8,0xb9,0xb9,0x84,0xad,0xc2,0x42,0x37,0xee };
    const uint8_t CIPHERTEXT[] = { 0x38,0x79,0xfe,0xa7,0x2a,0xc9,0x99,0x29,0xe5,0x3a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb8(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB8MMT192-DECRYPT-0", "[CFB8][MMT][192][DECRYPT][n0]") {
    const uint8_t KEY[] = { 0x7d,0xbd,0xc1,0x5a,0xd4,0x03,0x4e,0xd8,0x28,0xdc,0x86,0x27,0x99,0xb7,0xad,0xc9,0xab,0xd6,0x8e,0xaf,0x9d,0x52,0x6d,0x5d };
    const uint8_t IV[] = { 0x43,0x59,0x68,0x3a,0xf5,0xa3,0xa8,0x5c,0x24,0x8f,0xb7,0xf5,0x50,0x6f,0x31,0x7b };
    const uint8_t PLAINTEXT[] = { 0x2d };
    const uint8_t CIPHERTEXT[] = { 0x25 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb8(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB8MMT192-DECRYPT-1", "[CFB8][MMT][192][DECRYPT][n1]") {
    const uint8_t KEY[] = { 0x3a,0x2c,0xdf,0x9c,0x96,0x08,0xc1,0xdd,0x62,0x33,0xd0,0x3d,0xd8,0x55,0x29,0x3b,0x08,0x85,0x91,0x51,0x14,0xb2,0x52,0x79 };
    const uint8_t IV[] = { 0xe7,0xa2,0x8e,0xe3,0x4a,0xcc,0x52,0x12,0x8d,0xda,0xe6,0x58,0xec,0x63,0x98,0xa2 };
    const uint8_t PLAINTEXT[] = { 0x7b,0x04 };
    const uint8_t CIPHERTEXT[] = { 0x06,0x78 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb8(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB8MMT192-DECRYPT-2", "[CFB8][MMT][192][DECRYPT][n2]") {
    const uint8_t KEY[] = { 0xc9,0x84,0xb9,0x9a,0x6c,0xc5,0xbc,0x88,0x00,0x31,0x43,0xcb,0xe4,0xb7,0x55,0xe6,0xe3,0x0b,0xa9,0x41,0x14,0xf7,0xad,0x1e };
    const uint8_t IV[] = { 0x41,0xe3,0xb8,0xfd,0x13,0x8f,0x8c,0x35,0x8d,0xfe,0xef,0x42,0x03,0x02,0xf6,0x34 };
    const uint8_t PLAINTEXT[] = { 0x65,0x8d,0x0a };
    const uint8_t CIPHERTEXT[] = { 0x03,0x7c,0xf6 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb8(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB8MMT192-DECRYPT-3", "[CFB8][MMT][192][DECRYPT][n3]") {
    const uint8_t KEY[] = { 0x39,0x74,0x7d,0xa2,0x25,0xbd,0xc0,0xc5,0x3c,0x34,0x63,0xfd,0x68,0x6d,0xbe,0x19,0xd1,0x41,0x57,0x53,0x51,0x71,0xf9,0x1d };
    const uint8_t IV[] = { 0x77,0xd3,0xa5,0xad,0x8b,0xbd,0xb1,0x69,0xf8,0xd2,0x9e,0x5f,0x21,0x79,0x86,0x51 };
    const uint8_t PLAINTEXT[] = { 0x2d,0x19,0x1f,0x2f };
    const uint8_t CIPHERTEXT[] = { 0x0f,0xb0,0xce,0xe2 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb8(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB8MMT192-DECRYPT-4", "[CFB8][MMT][192][DECRYPT][n4]") {
    const uint8_t KEY[] = { 0x4c,0xd1,0x31,0x79,0xdf,0xa1,0x6d,0x01,0xc6,0xa8,0x63,0x3d,0xfc,0x87,0x83,0xe7,0x23,0xe7,0x21,0x14,0xc9,0xb0,0xd5,0x0a };
    const uint8_t IV[] = { 0x66,0x57,0xc4,0x6c,0x99,0xd6,0x42,0x47,0x4c,0x33,0x0d,0x80,0x16,0xb7,0x1d,0xbe };
    const uint8_t PLAINTEXT[] = { 0x10,0x5a,0x64,0xc8,0x72 };
    const uint8_t CIPHERTEXT[] = { 0x09,0xd9,0x14,0xcf,0x0b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb8(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB8MMT192-DECRYPT-5", "[CFB8][MMT][192][DECRYPT][n5]") {
    const uint8_t KEY[] = { 0x5d,0xcc,0x9b,0x8d,0x8a,0x45,0x6e,0x99,0x17,0xcd,0x8d,0x54,0xd7,0xf7,0x10,0x0b,0x34,0x96,0x4b,0x4e,0xd2,0xd3,0x98,0xa0 };
    const uint8_t IV[] = { 0x4f,0xa2,0x95,0xa8,0x98,0x7f,0x1b,0x01,0x0c,0xe4,0xe0,0x11,0xfb,0xf9,0x41,0x56 };
    const uint8_t PLAINTEXT[] = { 0x98,0xf3,0x32,0xd3,0x7b,0x78 };
    const uint8_t CIPHERTEXT[] = { 0x28,0x8c,0x75,0x2d,0x9f,0xac };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb8(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB8MMT192-DECRYPT-6", "[CFB8][MMT][192][DECRYPT][n6]") {
    const uint8_t KEY[] = { 0xc8,0xba,0xf0,0x20,0x4e,0xf8,0x0b,0x8e,0x01,0x25,0xef,0xe4,0x3a,0x0b,0xcc,0xdf,0xd0,0xf3,0x56,0xb6,0x2e,0x6c,0x75,0xfe };
    const uint8_t IV[] = { 0xe9,0x14,0x4b,0xf2,0xcb,0xc5,0x72,0x0a,0x1b,0x4c,0xb6,0xf3,0x7d,0x11,0xed,0xff };
    const uint8_t PLAINTEXT[] = { 0x56,0xbb,0x4c,0x3c,0xae,0x53,0xb3 };
    const uint8_t CIPHERTEXT[] = { 0xc9,0x98,0x1a,0x34,0xb7,0xaa,0x89 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb8(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB8MMT192-DECRYPT-7", "[CFB8][MMT][192][DECRYPT][n7]") {
    const uint8_t KEY[] = { 0x64,0xe4,0x07,0x63,0xf3,0x8a,0x63,0xae,0x37,0x8c,0x32,0x05,0x2b,0x0a,0xe3,0xaa,0x53,0x8b,0xb8,0x68,0xa0,0x4a,0xc9,0x85 };
    const uint8_t IV[] = { 0xaa,0xcf,0x65,0x08,0x9e,0x4b,0x28,0x54,0x38,0x45,0x1f,0xfd,0xcd,0x0f,0x63,0x89 };
    const uint8_t PLAINTEXT[] = { 0xb5,0x67,0x41,0x1b,0xc6,0x1b,0x0a,0x76 };
    const uint8_t CIPHERTEXT[] = { 0xd8,0xfc,0xf8,0x3a,0x88,0x51,0x0a,0x0d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb8(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB8MMT192-DECRYPT-8", "[CFB8][MMT][192][DECRYPT][n8]") {
    const uint8_t KEY[] = { 0x7b,0xfd,0xca,0x96,0x05,0xf1,0x72,0x53,0xf2,0x03,0xef,0xff,0xc9,0x2d,0xa9,0x6f,0xde,0x02,0x30,0x07,0xd2,0x2c,0xda,0xd0 };
    const uint8_t IV[] = { 0x45,0xc0,0x9e,0x44,0x03,0x60,0x70,0xf8,0xa7,0x73,0x7a,0x51,0x76,0xb8,0xcf,0x26 };
    const uint8_t PLAINTEXT[] = { 0x89,0x35,0x8d,0xf6,0x5c,0x3e,0xf1,0x4d,0x26 };
    const uint8_t CIPHERTEXT[] = { 0x9c,0x19,0x5b,0x19,0x44,0xc4,0xaf,0x5b,0xfb };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb8(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB8MMT192-DECRYPT-9", "[CFB8][MMT][192][DECRYPT][n9]") {
    const uint8_t KEY[] = { 0xba,0xf0,0x8b,0x76,0x31,0x7a,0x65,0xc5,0xf0,0x7a,0xe6,0xf5,0x7e,0xb0,0xe6,0x54,0x88,0x65,0x93,0x24,0xd2,0x97,0x09,0xe3 };
    const uint8_t IV[] = { 0x0a,0x02,0x84,0x6b,0x62,0xab,0xb6,0x93,0xef,0x31,0xd7,0x54,0x84,0x2e,0xed,0x29 };
    const uint8_t PLAINTEXT[] = { 0x98,0x95,0x93,0x24,0x02,0x39,0x3d,0xc3,0x3a,0x60 };
    const uint8_t CIPHERTEXT[] = { 0x72,0x9c,0x0b,0x6d,0xeb,0x75,0xfa,0x6e,0xb5,0xe8 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb8(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

