#include "rijndael.h"
#include "catch.hpp"
#include <cstring>

static inline std::string buf2str(const uint8_t *buf, size_t len) {
    std::ostringstream ss; ss << std::hex << std::setfill('0');
    for (size_t i = 0; i < len; ++i) {
        ss << std::setw(2) << static_cast<int>(buf[i]) << ' ';
    }
    return ss.str();
}

TEST_CASE("CBCMCT128-ENCRYPT-0", "[CBC][MCT][128][ENCRYPT][n0]") {
    const uint8_t KEY[] = { 0x88,0x09,0xe7,0xdd,0x3a,0x95,0x9e,0xe5,0xd8,0xdb,0xb1,0x3f,0x50,0x1f,0x22,0x74 };
    const uint8_t IV[] = { 0xe5,0xc0,0xbb,0x53,0x5d,0x7d,0x54,0x57,0x2a,0xd0,0x6d,0x17,0x0a,0x0e,0x58,0xae };
    const uint8_t PLAINTEXT[] = { 0x1f,0xd4,0xee,0x65,0x60,0x3e,0x61,0x30,0xcf,0xc2,0xa8,0x2a,0xb3,0xd5,0x6c,0x24 };
    const uint8_t CIPHERTEXT[] = { 0xb1,0x27,0xa5,0xb4,0xc4,0x69,0x2d,0x87,0x48,0x3d,0xb0,0xc3,0xb0,0xd1,0x1e,0x64 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-1", "[CBC][MCT][128][ENCRYPT][n1]") {
    const uint8_t KEY[] = { 0x39,0x2e,0x42,0x69,0xfe,0xfc,0xb3,0x62,0x90,0xe6,0x01,0xfc,0xe0,0xce,0x3c,0x10 };
    const uint8_t IV[] = { 0xb1,0x27,0xa5,0xb4,0xc4,0x69,0x2d,0x87,0x48,0x3d,0xb0,0xc3,0xb0,0xd1,0x1e,0x64 };
    const uint8_t PLAINTEXT[] = { 0x4e,0x18,0xf8,0xd3,0x77,0xd3,0xd0,0x3e,0x49,0x7a,0x05,0x76,0x3a,0x4d,0x35,0x0a };
    const uint8_t CIPHERTEXT[] = { 0xb8,0xb7,0x9b,0x15,0x3b,0x5d,0x64,0xf7,0x72,0x3b,0x0e,0xa5,0x39,0x71,0x3a,0x91 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-2", "[CBC][MCT][128][ENCRYPT][n2]") {
    const uint8_t KEY[] = { 0x81,0x99,0xd9,0x7c,0xc5,0xa1,0xd7,0x95,0xe2,0xdd,0x0f,0x59,0xd9,0xbf,0x06,0x81 };
    const uint8_t IV[] = { 0xb8,0xb7,0x9b,0x15,0x3b,0x5d,0x64,0xf7,0x72,0x3b,0x0e,0xa5,0x39,0x71,0x3a,0x91 };
    const uint8_t PLAINTEXT[] = { 0x14,0x3a,0x6c,0xfb,0x8c,0xee,0x0a,0x96,0xaf,0x45,0x39,0x30,0xff,0xe9,0xc5,0xe3 };
    const uint8_t CIPHERTEXT[] = { 0xdd,0x21,0xbf,0x19,0x3c,0x6e,0x16,0xeb,0x7f,0xd7,0xb2,0x33,0x7f,0xcc,0x75,0x4e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-3", "[CBC][MCT][128][ENCRYPT][n3]") {
    const uint8_t KEY[] = { 0x5c,0xb8,0x66,0x65,0xf9,0xcf,0xc1,0x7e,0x9d,0x0a,0xbd,0x6a,0xa6,0x73,0x73,0xcf };
    const uint8_t IV[] = { 0xdd,0x21,0xbf,0x19,0x3c,0x6e,0x16,0xeb,0x7f,0xd7,0xb2,0x33,0x7f,0xcc,0x75,0x4e };
    const uint8_t PLAINTEXT[] = { 0xe4,0x66,0x6e,0xa8,0xc0,0x5f,0x4c,0x23,0x6b,0x4b,0x02,0xe7,0x2a,0x62,0x35,0x7e };
    const uint8_t CIPHERTEXT[] = { 0x44,0x79,0x18,0x08,0x9f,0x62,0x37,0xab,0xbc,0x91,0x4f,0xd8,0x85,0xc2,0x7f,0xa4 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-4", "[CBC][MCT][128][ENCRYPT][n4]") {
    const uint8_t KEY[] = { 0x18,0xc1,0x7e,0x6d,0x66,0xad,0xf6,0xd5,0x21,0x9b,0xf2,0xb2,0x23,0xb1,0x0c,0x6b };
    const uint8_t IV[] = { 0x44,0x79,0x18,0x08,0x9f,0x62,0x37,0xab,0xbc,0x91,0x4f,0xd8,0x85,0xc2,0x7f,0xa4 };
    const uint8_t PLAINTEXT[] = { 0x37,0x4f,0xd0,0x44,0x80,0x99,0x6c,0xc2,0x02,0x30,0x97,0x9f,0x39,0x31,0x8c,0x40 };
    const uint8_t CIPHERTEXT[] = { 0x31,0x22,0x20,0xdd,0x22,0xdc,0xcb,0xa6,0x93,0x8e,0xaf,0xf9,0x9a,0x91,0x25,0x38 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-5", "[CBC][MCT][128][ENCRYPT][n5]") {
    const uint8_t KEY[] = { 0x29,0xe3,0x5e,0xb0,0x44,0x71,0x3d,0x73,0xb2,0x15,0x5d,0x4b,0xb9,0x20,0x29,0x53 };
    const uint8_t IV[] = { 0x31,0x22,0x20,0xdd,0x22,0xdc,0xcb,0xa6,0x93,0x8e,0xaf,0xf9,0x9a,0x91,0x25,0x38 };
    const uint8_t PLAINTEXT[] = { 0x1b,0xa2,0xef,0x5a,0xb7,0xc1,0xc4,0x03,0xda,0xdc,0x31,0x37,0x64,0xf1,0x20,0xbf };
    const uint8_t CIPHERTEXT[] = { 0x49,0x6d,0x5f,0xab,0xda,0x7b,0xe6,0x88,0xcb,0xb3,0x87,0x73,0xe3,0x8c,0x2e,0xcc };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-6", "[CBC][MCT][128][ENCRYPT][n6]") {
    const uint8_t KEY[] = { 0x60,0x8e,0x01,0x1b,0x9e,0x0a,0xdb,0xfb,0x79,0xa6,0xda,0x38,0x5a,0xac,0x07,0x9f };
    const uint8_t IV[] = { 0x49,0x6d,0x5f,0xab,0xda,0x7b,0xe6,0x88,0xcb,0xb3,0x87,0x73,0xe3,0x8c,0x2e,0xcc };
    const uint8_t PLAINTEXT[] = { 0xb4,0xc6,0x49,0x2b,0x9c,0x3d,0xb4,0xed,0x37,0xf1,0x3c,0xa5,0xf9,0xad,0xd9,0x3f };
    const uint8_t CIPHERTEXT[] = { 0xff,0xc2,0x5b,0x40,0x9f,0x20,0xd3,0x2c,0x1b,0x14,0x41,0xce,0x09,0x6d,0xe9,0x35 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-7", "[CBC][MCT][128][ENCRYPT][n7]") {
    const uint8_t KEY[] = { 0x9f,0x4c,0x5a,0x5b,0x01,0x2a,0x08,0xd7,0x62,0xb2,0x9b,0xf6,0x53,0xc1,0xee,0xaa };
    const uint8_t IV[] = { 0xff,0xc2,0x5b,0x40,0x9f,0x20,0xd3,0x2c,0x1b,0x14,0x41,0xce,0x09,0x6d,0xe9,0x35 };
    const uint8_t PLAINTEXT[] = { 0x72,0x20,0x7b,0x35,0x61,0x79,0x45,0x8d,0xcd,0x5f,0xb9,0xd2,0x4e,0x74,0x5c,0x03 };
    const uint8_t CIPHERTEXT[] = { 0x46,0xc4,0x39,0xec,0xbd,0xff,0x70,0x29,0x85,0xfd,0x42,0x96,0x75,0xfe,0x66,0x0a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-8", "[CBC][MCT][128][ENCRYPT][n8]") {
    const uint8_t KEY[] = { 0xd9,0x88,0x63,0xb7,0xbc,0xd5,0x78,0xfe,0xe7,0x4f,0xd9,0x60,0x26,0x3f,0x88,0xa0 };
    const uint8_t IV[] = { 0x46,0xc4,0x39,0xec,0xbd,0xff,0x70,0x29,0x85,0xfd,0x42,0x96,0x75,0xfe,0x66,0x0a };
    const uint8_t PLAINTEXT[] = { 0x72,0x6d,0xda,0xd8,0xbe,0x0b,0x14,0xb2,0xbe,0xd5,0xd8,0x51,0xab,0x75,0x15,0x47 };
    const uint8_t CIPHERTEXT[] = { 0x50,0xa3,0x69,0x19,0xfe,0x26,0xe5,0x47,0x9d,0x55,0x34,0xba,0x05,0xd9,0xf3,0x80 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-9", "[CBC][MCT][128][ENCRYPT][n9]") {
    const uint8_t KEY[] = { 0x89,0x2b,0x0a,0xae,0x42,0xf3,0x9d,0xb9,0x7a,0x1a,0xed,0xda,0x23,0xe6,0x7b,0x20 };
    const uint8_t IV[] = { 0x50,0xa3,0x69,0x19,0xfe,0x26,0xe5,0x47,0x9d,0x55,0x34,0xba,0x05,0xd9,0xf3,0x80 };
    const uint8_t PLAINTEXT[] = { 0x55,0x09,0xd0,0xdf,0x60,0x00,0x77,0x37,0x3a,0xe0,0xcd,0xe9,0x2d,0xd3,0x81,0x74 };
    const uint8_t CIPHERTEXT[] = { 0x0f,0xd2,0xd1,0x93,0x23,0xbb,0x6a,0xad,0xb1,0xe2,0x57,0xec,0x1f,0x2f,0x10,0xfc };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-10", "[CBC][MCT][128][ENCRYPT][n10]") {
    const uint8_t KEY[] = { 0x86,0xf9,0xdb,0x3d,0x61,0x48,0xf7,0x14,0xcb,0xf8,0xba,0x36,0x3c,0xc9,0x6b,0xdc };
    const uint8_t IV[] = { 0x0f,0xd2,0xd1,0x93,0x23,0xbb,0x6a,0xad,0xb1,0xe2,0x57,0xec,0x1f,0x2f,0x10,0xfc };
    const uint8_t PLAINTEXT[] = { 0x6b,0x21,0xc3,0xe8,0x89,0x9f,0x68,0xd0,0xf8,0xd3,0x9f,0xa7,0xd9,0x96,0xb5,0x4a };
    const uint8_t CIPHERTEXT[] = { 0x70,0x68,0xb7,0x8a,0x15,0x93,0xad,0x89,0x40,0x51,0xb1,0xd6,0x3b,0xc5,0x1e,0x21 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-11", "[CBC][MCT][128][ENCRYPT][n11]") {
    const uint8_t KEY[] = { 0xf6,0x91,0x6c,0xb7,0x74,0xdb,0x5a,0x9d,0x8b,0xa9,0x0b,0xe0,0x07,0x0c,0x75,0xfd };
    const uint8_t IV[] = { 0x70,0x68,0xb7,0x8a,0x15,0x93,0xad,0x89,0x40,0x51,0xb1,0xd6,0x3b,0xc5,0x1e,0x21 };
    const uint8_t PLAINTEXT[] = { 0xf7,0xd9,0x89,0x2a,0x9f,0x7f,0x47,0xaf,0xaa,0xca,0xc3,0x99,0x9e,0x6b,0xdb,0x9d };
    const uint8_t CIPHERTEXT[] = { 0x5b,0x6c,0x0e,0xcb,0x76,0x91,0x12,0x0e,0xcd,0x15,0xa2,0x0d,0x1a,0xbd,0xc7,0x4c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-12", "[CBC][MCT][128][ENCRYPT][n12]") {
    const uint8_t KEY[] = { 0xad,0xfd,0x62,0x7c,0x02,0x4a,0x48,0x93,0x46,0xbc,0xa9,0xed,0x1d,0xb1,0xb2,0xb1 };
    const uint8_t IV[] = { 0x5b,0x6c,0x0e,0xcb,0x76,0x91,0x12,0x0e,0xcd,0x15,0xa2,0x0d,0x1a,0xbd,0xc7,0x4c };
    const uint8_t PLAINTEXT[] = { 0x1f,0xa8,0x90,0x91,0xb4,0xc9,0x31,0x01,0xef,0x06,0x3e,0xa5,0x2c,0x2a,0xd4,0x2e };
    const uint8_t CIPHERTEXT[] = { 0xee,0x13,0x41,0x1d,0xe6,0x5c,0xaf,0x7c,0x05,0x72,0x96,0x47,0xa4,0x6e,0xfe,0x2d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-13", "[CBC][MCT][128][ENCRYPT][n13]") {
    const uint8_t KEY[] = { 0x43,0xee,0x23,0x61,0xe4,0x16,0xe7,0xef,0x43,0xce,0x3f,0xaa,0xb9,0xdf,0x4c,0x9c };
    const uint8_t IV[] = { 0xee,0x13,0x41,0x1d,0xe6,0x5c,0xaf,0x7c,0x05,0x72,0x96,0x47,0xa4,0x6e,0xfe,0x2d };
    const uint8_t PLAINTEXT[] = { 0x64,0x01,0x2c,0xa8,0xc8,0x0c,0x0a,0xbc,0xef,0xe4,0x40,0x57,0x99,0x0e,0xd2,0x62 };
    const uint8_t CIPHERTEXT[] = { 0xba,0x29,0x88,0x6d,0x56,0x8e,0x5f,0x5c,0xa9,0x15,0x4b,0xf2,0x7d,0x6f,0x92,0x0b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-14", "[CBC][MCT][128][ENCRYPT][n14]") {
    const uint8_t KEY[] = { 0xf9,0xc7,0xab,0x0c,0xb2,0x98,0xb8,0xb3,0xea,0xdb,0x74,0x58,0xc4,0xb0,0xde,0x97 };
    const uint8_t IV[] = { 0xba,0x29,0x88,0x6d,0x56,0x8e,0x5f,0x5c,0xa9,0x15,0x4b,0xf2,0x7d,0x6f,0x92,0x0b };
    const uint8_t PLAINTEXT[] = { 0x27,0x25,0x75,0x41,0x9e,0x4f,0xd4,0x26,0xe6,0x16,0x21,0x82,0xa5,0x63,0xcc,0xf2 };
    const uint8_t CIPHERTEXT[] = { 0xaf,0xc4,0x64,0x3d,0xff,0xdc,0x6f,0xbc,0x30,0x1c,0x3f,0x86,0xa8,0x23,0x8d,0xeb };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-15", "[CBC][MCT][128][ENCRYPT][n15]") {
    const uint8_t KEY[] = { 0x56,0x03,0xcf,0x31,0x4d,0x44,0xd7,0x0f,0xda,0xc7,0x4b,0xde,0x6c,0x93,0x53,0x7c };
    const uint8_t IV[] = { 0xaf,0xc4,0x64,0x3d,0xff,0xdc,0x6f,0xbc,0x30,0x1c,0x3f,0x86,0xa8,0x23,0x8d,0xeb };
    const uint8_t PLAINTEXT[] = { 0x37,0xf5,0x2a,0x2f,0xa3,0x46,0x54,0x8d,0xb9,0x7b,0x43,0xe3,0x09,0x75,0x3d,0x4a };
    const uint8_t CIPHERTEXT[] = { 0x18,0x55,0xed,0x24,0x87,0x6c,0x24,0xf6,0x4b,0xfc,0x50,0x34,0x65,0x5c,0xe9,0x68 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-16", "[CBC][MCT][128][ENCRYPT][n16]") {
    const uint8_t KEY[] = { 0x4e,0x56,0x22,0x15,0xca,0x28,0xf3,0xf9,0x91,0x3b,0x1b,0xea,0x09,0xcf,0xba,0x14 };
    const uint8_t IV[] = { 0x18,0x55,0xed,0x24,0x87,0x6c,0x24,0xf6,0x4b,0xfc,0x50,0x34,0x65,0x5c,0xe9,0x68 };
    const uint8_t PLAINTEXT[] = { 0x7e,0xdf,0xd0,0xc7,0x96,0x93,0x6f,0x43,0x0f,0x2c,0x99,0x9d,0xe9,0x76,0xf5,0xb5 };
    const uint8_t CIPHERTEXT[] = { 0x3e,0xfe,0x3a,0xc0,0x83,0x2c,0x96,0x78,0x7a,0xdd,0x51,0x8f,0x37,0xe8,0xf2,0x37 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-17", "[CBC][MCT][128][ENCRYPT][n17]") {
    const uint8_t KEY[] = { 0x70,0xa8,0x18,0xd5,0x49,0x04,0x65,0x81,0xeb,0xe6,0x4a,0x65,0x3e,0x27,0x48,0x23 };
    const uint8_t IV[] = { 0x3e,0xfe,0x3a,0xc0,0x83,0x2c,0x96,0x78,0x7a,0xdd,0x51,0x8f,0x37,0xe8,0xf2,0x37 };
    const uint8_t PLAINTEXT[] = { 0xd7,0x6b,0x12,0xaa,0x1c,0xe7,0xbb,0x8d,0x20,0xcb,0xe1,0xa5,0x28,0xf1,0xef,0xeb };
    const uint8_t CIPHERTEXT[] = { 0x30,0x81,0xa9,0x9d,0x40,0x83,0x8b,0x8f,0x65,0x71,0x87,0x70,0x0e,0x49,0xa8,0x65 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-18", "[CBC][MCT][128][ENCRYPT][n18]") {
    const uint8_t KEY[] = { 0x40,0x29,0xb1,0x48,0x09,0x87,0xee,0x0e,0x8e,0x97,0xcd,0x15,0x30,0x6e,0xe0,0x46 };
    const uint8_t IV[] = { 0x30,0x81,0xa9,0x9d,0x40,0x83,0x8b,0x8f,0x65,0x71,0x87,0x70,0x0e,0x49,0xa8,0x65 };
    const uint8_t PLAINTEXT[] = { 0x68,0xb8,0x36,0xa4,0x8e,0x1b,0xa7,0x61,0xe6,0x80,0x68,0x8b,0x64,0x09,0x0d,0x30 };
    const uint8_t CIPHERTEXT[] = { 0x5e,0x93,0x24,0x21,0x11,0xc6,0x15,0x74,0xae,0x5b,0xe6,0x79,0x43,0x13,0x2f,0x04 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-19", "[CBC][MCT][128][ENCRYPT][n19]") {
    const uint8_t KEY[] = { 0x1e,0xba,0x95,0x69,0x18,0x41,0xfb,0x7a,0x20,0xcc,0x2b,0x6c,0x73,0x7d,0xcf,0x42 };
    const uint8_t IV[] = { 0x5e,0x93,0x24,0x21,0x11,0xc6,0x15,0x74,0xae,0x5b,0xe6,0x79,0x43,0x13,0x2f,0x04 };
    const uint8_t PLAINTEXT[] = { 0xe0,0x6c,0xf0,0xa7,0xe6,0x19,0x6c,0xbe,0x75,0xb5,0xdd,0xd6,0x78,0xf5,0xd5,0xb8 };
    const uint8_t CIPHERTEXT[] = { 0xa1,0x14,0x2e,0xed,0x0c,0x38,0x5a,0xff,0xde,0x5c,0x71,0xd9,0xf3,0xcd,0x6b,0xd6 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-20", "[CBC][MCT][128][ENCRYPT][n20]") {
    const uint8_t KEY[] = { 0xbf,0xae,0xbb,0x84,0x14,0x79,0xa1,0x85,0xfe,0x90,0x5a,0xb5,0x80,0xb0,0xa4,0x94 };
    const uint8_t IV[] = { 0xa1,0x14,0x2e,0xed,0x0c,0x38,0x5a,0xff,0xde,0x5c,0x71,0xd9,0xf3,0xcd,0x6b,0xd6 };
    const uint8_t PLAINTEXT[] = { 0x77,0x42,0x4e,0x51,0x30,0x06,0x66,0x53,0xff,0x12,0x33,0x93,0x26,0x9b,0xcf,0x9f };
    const uint8_t CIPHERTEXT[] = { 0xa5,0xe4,0x74,0xcf,0xac,0x40,0x13,0x7a,0x75,0x61,0xc7,0xb8,0xc6,0xac,0xb9,0x3d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-21", "[CBC][MCT][128][ENCRYPT][n21]") {
    const uint8_t KEY[] = { 0x1a,0x4a,0xcf,0x4b,0xb8,0x39,0xb2,0xff,0x8b,0xf1,0x9d,0x0d,0x46,0x1c,0x1d,0xa9 };
    const uint8_t IV[] = { 0xa5,0xe4,0x74,0xcf,0xac,0x40,0x13,0x7a,0x75,0x61,0xc7,0xb8,0xc6,0xac,0xb9,0x3d };
    const uint8_t PLAINTEXT[] = { 0x8b,0x17,0xf2,0x16,0xb6,0xba,0xe3,0x2a,0xbb,0x3f,0xcc,0x87,0xad,0xa1,0x48,0x99 };
    const uint8_t CIPHERTEXT[] = { 0x44,0xa3,0x10,0x20,0x30,0x8d,0xb6,0x7c,0xb4,0x8c,0xad,0x41,0x62,0xe6,0xc9,0x5c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-22", "[CBC][MCT][128][ENCRYPT][n22]") {
    const uint8_t KEY[] = { 0x5e,0xe9,0xdf,0x6b,0x88,0xb4,0x04,0x83,0x3f,0x7d,0x30,0x4c,0x24,0xfa,0xd4,0xf5 };
    const uint8_t IV[] = { 0x44,0xa3,0x10,0x20,0x30,0x8d,0xb6,0x7c,0xb4,0x8c,0xad,0x41,0x62,0xe6,0xc9,0x5c };
    const uint8_t PLAINTEXT[] = { 0x29,0xb4,0x7a,0xb0,0x11,0xe0,0x34,0xad,0x3b,0xa6,0x15,0xc6,0x72,0xf8,0x43,0xc3 };
    const uint8_t CIPHERTEXT[] = { 0x07,0xbf,0xda,0xbe,0xdc,0x1c,0xc1,0x54,0x0c,0xf2,0x3b,0xd9,0xec,0xb6,0x28,0xb3 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-23", "[CBC][MCT][128][ENCRYPT][n23]") {
    const uint8_t KEY[] = { 0x59,0x56,0x05,0xd5,0x54,0xa8,0xc5,0xd7,0x33,0x8f,0x0b,0x95,0xc8,0x4c,0xfc,0x46 };
    const uint8_t IV[] = { 0x07,0xbf,0xda,0xbe,0xdc,0x1c,0xc1,0x54,0x0c,0xf2,0x3b,0xd9,0xec,0xb6,0x28,0xb3 };
    const uint8_t PLAINTEXT[] = { 0x5f,0xb7,0x77,0x24,0xaf,0x9c,0x6b,0x7c,0xd6,0x48,0x97,0xd7,0xb0,0x87,0x64,0xb0 };
    const uint8_t CIPHERTEXT[] = { 0x47,0x09,0x1a,0xc5,0x07,0x82,0x4f,0xbb,0x7d,0x0f,0x9c,0xb1,0xf5,0x7c,0xf6,0x04 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-24", "[CBC][MCT][128][ENCRYPT][n24]") {
    const uint8_t KEY[] = { 0x1e,0x5f,0x1f,0x10,0x53,0x2a,0x8a,0x6c,0x4e,0x80,0x97,0x24,0x3d,0x30,0x0a,0x42 };
    const uint8_t IV[] = { 0x47,0x09,0x1a,0xc5,0x07,0x82,0x4f,0xbb,0x7d,0x0f,0x9c,0xb1,0xf5,0x7c,0xf6,0x04 };
    const uint8_t PLAINTEXT[] = { 0xfa,0x67,0x88,0xff,0x21,0x85,0x89,0x05,0x07,0xb8,0xfd,0xb6,0xce,0xf4,0x1f,0x44 };
    const uint8_t CIPHERTEXT[] = { 0xcc,0xfc,0xab,0x1d,0x95,0x87,0x90,0x55,0x94,0xbf,0xf7,0x47,0x02,0x0d,0xf0,0x56 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-25", "[CBC][MCT][128][ENCRYPT][n25]") {
    const uint8_t KEY[] = { 0xd2,0xa3,0xb4,0x0d,0xc6,0xad,0x1a,0x39,0xda,0x3f,0x60,0x63,0x3f,0x3d,0xfa,0x14 };
    const uint8_t IV[] = { 0xcc,0xfc,0xab,0x1d,0x95,0x87,0x90,0x55,0x94,0xbf,0xf7,0x47,0x02,0x0d,0xf0,0x56 };
    const uint8_t PLAINTEXT[] = { 0xe7,0xa5,0x00,0x8a,0xec,0x10,0x59,0xd4,0xde,0xe8,0x38,0x0f,0x41,0xcf,0x3a,0x9a };
    const uint8_t CIPHERTEXT[] = { 0x8e,0x8d,0xd8,0xa9,0x0e,0x9c,0x87,0x2b,0x4e,0xab,0x3e,0x2a,0x2d,0x0d,0xd7,0x4c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-26", "[CBC][MCT][128][ENCRYPT][n26]") {
    const uint8_t KEY[] = { 0x5c,0x2e,0x6c,0xa4,0xc8,0x31,0x9d,0x12,0x94,0x94,0x5e,0x49,0x12,0x30,0x2d,0x58 };
    const uint8_t IV[] = { 0x8e,0x8d,0xd8,0xa9,0x0e,0x9c,0x87,0x2b,0x4e,0xab,0x3e,0x2a,0x2d,0x0d,0xd7,0x4c };
    const uint8_t PLAINTEXT[] = { 0xeb,0xf7,0xd1,0xb0,0xf3,0x5f,0x1d,0xb7,0x81,0x99,0xfa,0xbb,0x1e,0x8c,0xe6,0x57 };
    const uint8_t CIPHERTEXT[] = { 0x63,0x75,0x3d,0x7c,0xf1,0xe8,0x90,0xc9,0x33,0x42,0x06,0x65,0xc1,0x0a,0x49,0x25 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-27", "[CBC][MCT][128][ENCRYPT][n27]") {
    const uint8_t KEY[] = { 0x3f,0x5b,0x51,0xd8,0x39,0xd9,0x0d,0xdb,0xa7,0xd6,0x58,0x2c,0xd3,0x3a,0x64,0x7d };
    const uint8_t IV[] = { 0x63,0x75,0x3d,0x7c,0xf1,0xe8,0x90,0xc9,0x33,0x42,0x06,0x65,0xc1,0x0a,0x49,0x25 };
    const uint8_t PLAINTEXT[] = { 0xcb,0xb9,0xae,0xb7,0x95,0xe5,0x41,0x9a,0x39,0xa9,0x92,0xe8,0xd1,0x27,0x1f,0x36 };
    const uint8_t CIPHERTEXT[] = { 0xe8,0x6d,0x0f,0x32,0x7a,0xeb,0xbd,0x6e,0x66,0x3e,0xe2,0x64,0x08,0x94,0x56,0xb0 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-28", "[CBC][MCT][128][ENCRYPT][n28]") {
    const uint8_t KEY[] = { 0xd7,0x36,0x5e,0xea,0x43,0x32,0xb0,0xb5,0xc1,0xe8,0xba,0x48,0xdb,0xae,0x32,0xcd };
    const uint8_t IV[] = { 0xe8,0x6d,0x0f,0x32,0x7a,0xeb,0xbd,0x6e,0x66,0x3e,0xe2,0x64,0x08,0x94,0x56,0xb0 };
    const uint8_t PLAINTEXT[] = { 0x34,0x1b,0xeb,0x35,0x3a,0x43,0x6a,0x28,0xe9,0x85,0xde,0xd7,0xd7,0x09,0xa3,0x2a };
    const uint8_t CIPHERTEXT[] = { 0xc8,0xd3,0xd8,0x10,0xa3,0xdd,0x24,0xe7,0x05,0xf1,0x7d,0x89,0xcb,0x9d,0x5a,0x7a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-29", "[CBC][MCT][128][ENCRYPT][n29]") {
    const uint8_t KEY[] = { 0x1f,0xe5,0x86,0xfa,0xe0,0xef,0x94,0x52,0xc4,0x19,0xc7,0xc1,0x10,0x33,0x68,0xb7 };
    const uint8_t IV[] = { 0xc8,0xd3,0xd8,0x10,0xa3,0xdd,0x24,0xe7,0x05,0xf1,0x7d,0x89,0xcb,0x9d,0x5a,0x7a };
    const uint8_t PLAINTEXT[] = { 0xaa,0x0a,0x76,0x88,0x18,0x46,0xbc,0xa5,0xaa,0xc1,0x64,0x3a,0xc0,0x1c,0xa1,0x47 };
    const uint8_t CIPHERTEXT[] = { 0x4f,0xb1,0x84,0x94,0x82,0x3c,0x8c,0xd0,0x0e,0x03,0x2e,0xce,0x30,0x17,0x1f,0x17 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-30", "[CBC][MCT][128][ENCRYPT][n30]") {
    const uint8_t KEY[] = { 0x50,0x54,0x02,0x6e,0x62,0xd3,0x18,0x82,0xca,0x1a,0xe9,0x0f,0x20,0x24,0x77,0xa0 };
    const uint8_t IV[] = { 0x4f,0xb1,0x84,0x94,0x82,0x3c,0x8c,0xd0,0x0e,0x03,0x2e,0xce,0x30,0x17,0x1f,0x17 };
    const uint8_t PLAINTEXT[] = { 0x6f,0x7d,0x32,0x3f,0x7b,0x4e,0x79,0xbc,0x05,0x05,0xb0,0x35,0xf3,0xce,0xb3,0x9c };
    const uint8_t CIPHERTEXT[] = { 0x61,0x54,0x26,0xa9,0x64,0xff,0x4f,0xcc,0x56,0xdf,0xa6,0x3a,0x6e,0xf8,0x3d,0xd0 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-31", "[CBC][MCT][128][ENCRYPT][n31]") {
    const uint8_t KEY[] = { 0x31,0x00,0x24,0xc7,0x06,0x2c,0x57,0x4e,0x9c,0xc5,0x4f,0x35,0x4e,0xdc,0x4a,0x70 };
    const uint8_t IV[] = { 0x61,0x54,0x26,0xa9,0x64,0xff,0x4f,0xcc,0x56,0xdf,0xa6,0x3a,0x6e,0xf8,0x3d,0xd0 };
    const uint8_t PLAINTEXT[] = { 0x30,0x48,0xe1,0x21,0xd3,0x0b,0xcf,0x1e,0x1f,0xe9,0x8c,0x1f,0xad,0x00,0x33,0x73 };
    const uint8_t CIPHERTEXT[] = { 0x1a,0x16,0xa1,0xc8,0x53,0x75,0x9a,0x17,0x14,0x68,0x73,0xef,0x16,0xf8,0x4e,0x06 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-32", "[CBC][MCT][128][ENCRYPT][n32]") {
    const uint8_t KEY[] = { 0x2b,0x16,0x85,0x0f,0x55,0x59,0xcd,0x59,0x88,0xad,0x3c,0xda,0x58,0x24,0x04,0x76 };
    const uint8_t IV[] = { 0x1a,0x16,0xa1,0xc8,0x53,0x75,0x9a,0x17,0x14,0x68,0x73,0xef,0x16,0xf8,0x4e,0x06 };
    const uint8_t PLAINTEXT[] = { 0x86,0x8a,0xf5,0x40,0x94,0xa6,0xdc,0x63,0xca,0x40,0x71,0xff,0xe5,0x18,0xe3,0x47 };
    const uint8_t CIPHERTEXT[] = { 0x90,0xa5,0x93,0x3d,0x21,0x9c,0x0c,0xbe,0xbb,0x9c,0x34,0xa6,0xf6,0x2f,0x3b,0xee };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-33", "[CBC][MCT][128][ENCRYPT][n33]") {
    const uint8_t KEY[] = { 0xbb,0xb3,0x16,0x32,0x74,0xc5,0xc1,0xe7,0x33,0x31,0x08,0x7c,0xae,0x0b,0x3f,0x98 };
    const uint8_t IV[] = { 0x90,0xa5,0x93,0x3d,0x21,0x9c,0x0c,0xbe,0xbb,0x9c,0x34,0xa6,0xf6,0x2f,0x3b,0xee };
    const uint8_t PLAINTEXT[] = { 0x2e,0x0c,0x17,0xbb,0x7e,0xaf,0x60,0xd7,0x44,0xf0,0xa8,0xc7,0x39,0x9a,0xf1,0xb0 };
    const uint8_t CIPHERTEXT[] = { 0x96,0xa4,0xc5,0x53,0x48,0x4a,0x41,0x81,0x73,0x7c,0x3e,0x18,0x6b,0x26,0x20,0xb5 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-34", "[CBC][MCT][128][ENCRYPT][n34]") {
    const uint8_t KEY[] = { 0x2d,0x17,0xd3,0x61,0x3c,0x8f,0x80,0x66,0x40,0x4d,0x36,0x64,0xc5,0x2d,0x1f,0x2d };
    const uint8_t IV[] = { 0x96,0xa4,0xc5,0x53,0x48,0x4a,0x41,0x81,0x73,0x7c,0x3e,0x18,0x6b,0x26,0x20,0xb5 };
    const uint8_t PLAINTEXT[] = { 0x8f,0x6e,0x4e,0x38,0x9b,0xdf,0xe9,0x5d,0x4a,0x7f,0x7e,0xd9,0x11,0x93,0x6b,0x48 };
    const uint8_t CIPHERTEXT[] = { 0x61,0xb7,0x25,0x31,0x1b,0x8a,0xf9,0xdd,0xf7,0x40,0xb6,0x1f,0xb6,0xed,0x5d,0xab };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-35", "[CBC][MCT][128][ENCRYPT][n35]") {
    const uint8_t KEY[] = { 0x4c,0xa0,0xf6,0x50,0x27,0x05,0x79,0xbb,0xb7,0x0d,0x80,0x7b,0x73,0xc0,0x42,0x86 };
    const uint8_t IV[] = { 0x61,0xb7,0x25,0x31,0x1b,0x8a,0xf9,0xdd,0xf7,0x40,0xb6,0x1f,0xb6,0xed,0x5d,0xab };
    const uint8_t PLAINTEXT[] = { 0xf9,0xab,0xe5,0x41,0xa5,0x5f,0xe5,0xe6,0x3e,0xe5,0x36,0x31,0xd1,0xa5,0x2b,0xc8 };
    const uint8_t CIPHERTEXT[] = { 0x8c,0x77,0x15,0xc7,0xad,0xdc,0x0c,0x1d,0xd1,0x7b,0x99,0x67,0xa6,0x64,0x38,0x10 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-36", "[CBC][MCT][128][ENCRYPT][n36]") {
    const uint8_t KEY[] = { 0xc0,0xd7,0xe3,0x97,0x8a,0xd9,0x75,0xa6,0x66,0x76,0x19,0x1c,0xd5,0xa4,0x7a,0x96 };
    const uint8_t IV[] = { 0x8c,0x77,0x15,0xc7,0xad,0xdc,0x0c,0x1d,0xd1,0x7b,0x99,0x67,0xa6,0x64,0x38,0x10 };
    const uint8_t PLAINTEXT[] = { 0x02,0x9a,0x2a,0x95,0xb9,0xee,0xb6,0xa9,0x95,0xd8,0xbb,0xaf,0xa8,0x66,0x7b,0x93 };
    const uint8_t CIPHERTEXT[] = { 0xa7,0x40,0x63,0x7d,0xeb,0x56,0x40,0x91,0x4c,0x7e,0x59,0xda,0x31,0x19,0x3a,0x69 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-37", "[CBC][MCT][128][ENCRYPT][n37]") {
    const uint8_t KEY[] = { 0x67,0x97,0x80,0xea,0x61,0x8f,0x35,0x37,0x2a,0x08,0x40,0xc6,0xe4,0xbd,0x40,0xff };
    const uint8_t IV[] = { 0xa7,0x40,0x63,0x7d,0xeb,0x56,0x40,0x91,0x4c,0x7e,0x59,0xda,0x31,0x19,0x3a,0x69 };
    const uint8_t PLAINTEXT[] = { 0x14,0x69,0xcf,0x2c,0x5f,0x2e,0x30,0x24,0xbe,0x1b,0x76,0xa2,0x80,0xba,0x62,0xff };
    const uint8_t CIPHERTEXT[] = { 0xb0,0xae,0xfb,0x01,0xe7,0x33,0xb0,0xe2,0xba,0xf4,0x4b,0x4a,0xb7,0x7b,0x58,0x70 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-38", "[CBC][MCT][128][ENCRYPT][n38]") {
    const uint8_t KEY[] = { 0xd7,0x39,0x7b,0xeb,0x86,0xbc,0x85,0xd5,0x90,0xfc,0x0b,0x8c,0x53,0xc6,0x18,0x8f };
    const uint8_t IV[] = { 0xb0,0xae,0xfb,0x01,0xe7,0x33,0xb0,0xe2,0xba,0xf4,0x4b,0x4a,0xb7,0x7b,0x58,0x70 };
    const uint8_t PLAINTEXT[] = { 0x99,0x96,0x89,0xc3,0x20,0x50,0x12,0x5d,0xda,0x72,0x50,0xc9,0xc9,0xaa,0xe0,0xec };
    const uint8_t CIPHERTEXT[] = { 0xc9,0x46,0xa4,0x79,0x86,0x90,0x3f,0x1a,0x38,0xad,0xe9,0x46,0xcd,0x00,0x9a,0xcc };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-39", "[CBC][MCT][128][ENCRYPT][n39]") {
    const uint8_t KEY[] = { 0x1e,0x7f,0xdf,0x92,0x00,0x2c,0xba,0xcf,0xa8,0x51,0xe2,0xca,0x9e,0xc6,0x82,0x43 };
    const uint8_t IV[] = { 0xc9,0x46,0xa4,0x79,0x86,0x90,0x3f,0x1a,0x38,0xad,0xe9,0x46,0xcd,0x00,0x9a,0xcc };
    const uint8_t PLAINTEXT[] = { 0xe8,0x6b,0x33,0x15,0xeb,0xe5,0x83,0x15,0x26,0xfa,0xac,0xd3,0xf0,0xe2,0x91,0xae };
    const uint8_t CIPHERTEXT[] = { 0xe8,0x6b,0x67,0x47,0x3b,0x91,0x31,0xec,0x31,0xd6,0x3c,0x4a,0x23,0x7f,0x50,0xd0 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-40", "[CBC][MCT][128][ENCRYPT][n40]") {
    const uint8_t KEY[] = { 0xf6,0x14,0xb8,0xd5,0x3b,0xbd,0x8b,0x23,0x99,0x87,0xde,0x80,0xbd,0xb9,0xd2,0x93 };
    const uint8_t IV[] = { 0xe8,0x6b,0x67,0x47,0x3b,0x91,0x31,0xec,0x31,0xd6,0x3c,0x4a,0x23,0x7f,0x50,0xd0 };
    const uint8_t PLAINTEXT[] = { 0xf8,0x49,0x8a,0xbe,0xba,0x9c,0x30,0x41,0x1e,0x0e,0xfb,0x40,0x55,0x37,0xac,0xdf };
    const uint8_t CIPHERTEXT[] = { 0x61,0x32,0xbc,0x9d,0x83,0x7d,0xfd,0x2e,0x49,0xe8,0xf7,0x4e,0x99,0x8f,0x28,0xf4 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-41", "[CBC][MCT][128][ENCRYPT][n41]") {
    const uint8_t KEY[] = { 0x97,0x26,0x04,0x48,0xb8,0xc0,0x76,0x0d,0xd0,0x6f,0x29,0xce,0x24,0x36,0xfa,0x67 };
    const uint8_t IV[] = { 0x61,0x32,0xbc,0x9d,0x83,0x7d,0xfd,0x2e,0x49,0xe8,0xf7,0x4e,0x99,0x8f,0x28,0xf4 };
    const uint8_t PLAINTEXT[] = { 0x4f,0x9a,0x6c,0x5f,0xde,0x17,0x90,0xa4,0xcc,0xbe,0x59,0x9a,0x1c,0x46,0x9c,0xfb };
    const uint8_t CIPHERTEXT[] = { 0xdc,0xbf,0x06,0x66,0x19,0xba,0x6e,0xb5,0xf1,0xa5,0x67,0x4b,0x85,0x1b,0xc8,0xff };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-42", "[CBC][MCT][128][ENCRYPT][n42]") {
    const uint8_t KEY[] = { 0x4b,0x99,0x02,0x2e,0xa1,0x7a,0x18,0xb8,0x21,0xca,0x4e,0x85,0xa1,0x2d,0x32,0x98 };
    const uint8_t IV[] = { 0xdc,0xbf,0x06,0x66,0x19,0xba,0x6e,0xb5,0xf1,0xa5,0x67,0x4b,0x85,0x1b,0xc8,0xff };
    const uint8_t PLAINTEXT[] = { 0x29,0x62,0xc4,0x94,0x07,0x31,0xbb,0x73,0x69,0x3f,0x4a,0x35,0xe8,0x00,0xa3,0x31 };
    const uint8_t CIPHERTEXT[] = { 0x43,0xbf,0x3b,0x75,0xb9,0xb6,0x98,0x2d,0xe2,0x5c,0x33,0xd3,0xc4,0xbc,0x0e,0xd1 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-43", "[CBC][MCT][128][ENCRYPT][n43]") {
    const uint8_t KEY[] = { 0x08,0x26,0x39,0x5b,0x18,0xcc,0x80,0x95,0xc3,0x96,0x7d,0x56,0x65,0x91,0x3c,0x49 };
    const uint8_t IV[] = { 0x43,0xbf,0x3b,0x75,0xb9,0xb6,0x98,0x2d,0xe2,0x5c,0x33,0xd3,0xc4,0xbc,0x0e,0xd1 };
    const uint8_t PLAINTEXT[] = { 0xdf,0x49,0x8a,0x42,0x99,0x89,0x9b,0xba,0x1d,0xe4,0x0a,0xa6,0x3c,0x54,0x21,0x9f };
    const uint8_t CIPHERTEXT[] = { 0xb3,0x71,0xf1,0xe8,0xe4,0x54,0x2a,0x6a,0xe6,0x63,0x2b,0xeb,0xdd,0x8c,0xe7,0x27 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-44", "[CBC][MCT][128][ENCRYPT][n44]") {
    const uint8_t KEY[] = { 0xbb,0x57,0xc8,0xb3,0xfc,0x98,0xaa,0xff,0x25,0xf5,0x56,0xbd,0xb8,0x1d,0xdb,0x6e };
    const uint8_t IV[] = { 0xb3,0x71,0xf1,0xe8,0xe4,0x54,0x2a,0x6a,0xe6,0x63,0x2b,0xeb,0xdd,0x8c,0xe7,0x27 };
    const uint8_t PLAINTEXT[] = { 0xf5,0x92,0x48,0x3e,0x8a,0xc9,0x98,0xec,0x60,0xab,0x15,0x08,0xe3,0xc0,0x14,0x23 };
    const uint8_t CIPHERTEXT[] = { 0x3b,0x0b,0xb1,0x9c,0xd2,0x80,0xb3,0x67,0x02,0xd3,0xa4,0x67,0xf1,0x0e,0x08,0xe2 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-45", "[CBC][MCT][128][ENCRYPT][n45]") {
    const uint8_t KEY[] = { 0x80,0x5c,0x79,0x2f,0x2e,0x18,0x19,0x98,0x27,0x26,0xf2,0xda,0x49,0x13,0xd3,0x8c };
    const uint8_t IV[] = { 0x3b,0x0b,0xb1,0x9c,0xd2,0x80,0xb3,0x67,0x02,0xd3,0xa4,0x67,0xf1,0x0e,0x08,0xe2 };
    const uint8_t PLAINTEXT[] = { 0x79,0xbc,0xea,0xa0,0x83,0x67,0x69,0x68,0xb4,0x5b,0xab,0xdf,0x29,0x8b,0xb1,0xd7 };
    const uint8_t CIPHERTEXT[] = { 0xec,0x9d,0x36,0xff,0x63,0xb4,0x1b,0xbc,0x29,0xee,0xf0,0x87,0x92,0xa1,0x60,0xb4 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-46", "[CBC][MCT][128][ENCRYPT][n46]") {
    const uint8_t KEY[] = { 0x6c,0xc1,0x4f,0xd0,0x4d,0xac,0x02,0x24,0x0e,0xc8,0x02,0x5d,0xdb,0xb2,0xb3,0x38 };
    const uint8_t IV[] = { 0xec,0x9d,0x36,0xff,0x63,0xb4,0x1b,0xbc,0x29,0xee,0xf0,0x87,0x92,0xa1,0x60,0xb4 };
    const uint8_t PLAINTEXT[] = { 0x77,0x5b,0xd0,0xc2,0x91,0xdd,0xcf,0x8f,0xe0,0xe0,0xa1,0x97,0xe9,0x02,0x41,0x8d };
    const uint8_t CIPHERTEXT[] = { 0x32,0x8f,0xa4,0xbb,0x30,0x17,0xdc,0xca,0xe1,0xa8,0xaf,0x98,0x82,0x9e,0x12,0xb3 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-47", "[CBC][MCT][128][ENCRYPT][n47]") {
    const uint8_t KEY[] = { 0x5e,0x4e,0xeb,0x6b,0x7d,0xbb,0xde,0xee,0xef,0x60,0xad,0xc5,0x59,0x2c,0xa1,0x8b };
    const uint8_t IV[] = { 0x32,0x8f,0xa4,0xbb,0x30,0x17,0xdc,0xca,0xe1,0xa8,0xaf,0x98,0x82,0x9e,0x12,0xb3 };
    const uint8_t PLAINTEXT[] = { 0xcc,0xba,0x9e,0x9d,0x00,0xb2,0x36,0x95,0xab,0x75,0x5b,0x07,0x9c,0x71,0x8d,0x87 };
    const uint8_t CIPHERTEXT[] = { 0x5d,0xd5,0xb6,0x1d,0x95,0x3a,0xc4,0x66,0xde,0x03,0x02,0x62,0xdb,0xb9,0xb2,0xd8 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-48", "[CBC][MCT][128][ENCRYPT][n48]") {
    const uint8_t KEY[] = { 0x03,0x9b,0x5d,0x76,0xe8,0x81,0x1a,0x88,0x31,0x63,0xaf,0xa7,0x82,0x95,0x13,0x53 };
    const uint8_t IV[] = { 0x5d,0xd5,0xb6,0x1d,0x95,0x3a,0xc4,0x66,0xde,0x03,0x02,0x62,0xdb,0xb9,0xb2,0xd8 };
    const uint8_t PLAINTEXT[] = { 0xb6,0x8c,0x98,0x59,0xd7,0x36,0x2d,0x49,0xa0,0x2f,0xa0,0xd8,0xd6,0x91,0x51,0x56 };
    const uint8_t CIPHERTEXT[] = { 0x2f,0xab,0x5c,0xc0,0x36,0xef,0x88,0xf8,0x70,0x9d,0xa1,0x4a,0x96,0x51,0xc3,0x0a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-49", "[CBC][MCT][128][ENCRYPT][n49]") {
    const uint8_t KEY[] = { 0x2c,0x30,0x01,0xb6,0xde,0x6e,0x92,0x70,0x41,0xfe,0x0e,0xed,0x14,0xc4,0xd0,0x59 };
    const uint8_t IV[] = { 0x2f,0xab,0x5c,0xc0,0x36,0xef,0x88,0xf8,0x70,0x9d,0xa1,0x4a,0x96,0x51,0xc3,0x0a };
    const uint8_t PLAINTEXT[] = { 0x6f,0xff,0x5a,0x9f,0xe8,0x6d,0x39,0xf5,0xab,0x05,0x24,0x4c,0xcd,0xf6,0x70,0xcd };
    const uint8_t CIPHERTEXT[] = { 0x91,0x2f,0xd6,0x4d,0x65,0xd7,0xe8,0xf9,0x62,0x0b,0x56,0xf4,0xe8,0x16,0x7b,0xd7 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-50", "[CBC][MCT][128][ENCRYPT][n50]") {
    const uint8_t KEY[] = { 0xbd,0x1f,0xd7,0xfb,0xbb,0xb9,0x7a,0x89,0x23,0xf5,0x58,0x19,0xfc,0xd2,0xab,0x8e };
    const uint8_t IV[] = { 0x91,0x2f,0xd6,0x4d,0x65,0xd7,0xe8,0xf9,0x62,0x0b,0x56,0xf4,0xe8,0x16,0x7b,0xd7 };
    const uint8_t PLAINTEXT[] = { 0x3c,0xf5,0x18,0x6f,0xfd,0x90,0x43,0x6a,0x43,0x2b,0xad,0xe2,0x17,0x09,0xd5,0x9b };
    const uint8_t CIPHERTEXT[] = { 0x12,0x7b,0x62,0x6f,0xbd,0x0b,0x8f,0xbc,0x1e,0xca,0xad,0x58,0x65,0xbe,0x1b,0x13 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-51", "[CBC][MCT][128][ENCRYPT][n51]") {
    const uint8_t KEY[] = { 0xaf,0x64,0xb5,0x94,0x06,0xb2,0xf5,0x35,0x3d,0x3f,0xf5,0x41,0x99,0x6c,0xb0,0x9d };
    const uint8_t IV[] = { 0x12,0x7b,0x62,0x6f,0xbd,0x0b,0x8f,0xbc,0x1e,0xca,0xad,0x58,0x65,0xbe,0x1b,0x13 };
    const uint8_t PLAINTEXT[] = { 0x47,0x1f,0x1f,0x48,0xcd,0x3d,0xe2,0x85,0x89,0x12,0x87,0x66,0x7f,0x9b,0x60,0x41 };
    const uint8_t CIPHERTEXT[] = { 0x92,0xc0,0xe2,0x45,0xf4,0x0b,0x2f,0x52,0x71,0x37,0x1a,0x86,0xfa,0x77,0xf1,0x20 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-52", "[CBC][MCT][128][ENCRYPT][n52]") {
    const uint8_t KEY[] = { 0x3d,0xa4,0x57,0xd1,0xf2,0xb9,0xda,0x67,0x4c,0x08,0xef,0xc7,0x63,0x1b,0x41,0xbd };
    const uint8_t IV[] = { 0x92,0xc0,0xe2,0x45,0xf4,0x0b,0x2f,0x52,0x71,0x37,0x1a,0x86,0xfa,0x77,0xf1,0x20 };
    const uint8_t PLAINTEXT[] = { 0xd7,0xb0,0x46,0x98,0xa3,0x2d,0x7f,0x08,0x4c,0x5e,0x22,0x18,0x5e,0xf2,0x1c,0x75 };
    const uint8_t CIPHERTEXT[] = { 0x69,0xa9,0xcf,0x73,0xc1,0x6b,0xda,0x65,0xec,0x91,0x04,0x5e,0x06,0xc3,0xc4,0x46 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-53", "[CBC][MCT][128][ENCRYPT][n53]") {
    const uint8_t KEY[] = { 0x54,0x0d,0x98,0xa2,0x33,0xd2,0x00,0x02,0xa0,0x99,0xeb,0x99,0x65,0xd8,0x85,0xfb };
    const uint8_t IV[] = { 0x69,0xa9,0xcf,0x73,0xc1,0x6b,0xda,0x65,0xec,0x91,0x04,0x5e,0x06,0xc3,0xc4,0x46 };
    const uint8_t PLAINTEXT[] = { 0x5a,0xca,0xa9,0x24,0xef,0x09,0x05,0x70,0x02,0x26,0xc4,0x05,0x37,0xc5,0x3e,0x32 };
    const uint8_t CIPHERTEXT[] = { 0x8b,0x35,0x7f,0x9c,0xa8,0xc0,0xe4,0x14,0xaa,0x14,0xe5,0xbc,0xec,0x2f,0x0a,0x65 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-54", "[CBC][MCT][128][ENCRYPT][n54]") {
    const uint8_t KEY[] = { 0xdf,0x38,0xe7,0x3e,0x9b,0x12,0xe4,0x16,0x0a,0x8d,0x0e,0x25,0x89,0xf7,0x8f,0x9e };
    const uint8_t IV[] = { 0x8b,0x35,0x7f,0x9c,0xa8,0xc0,0xe4,0x14,0xaa,0x14,0xe5,0xbc,0xec,0x2f,0x0a,0x65 };
    const uint8_t PLAINTEXT[] = { 0x32,0x1e,0x82,0xbc,0xf4,0x21,0xc4,0x24,0x16,0xf4,0x50,0x62,0x1a,0x1e,0x36,0x6a };
    const uint8_t CIPHERTEXT[] = { 0x3c,0xa8,0xfa,0xb1,0x0d,0x4b,0xcb,0x43,0xaa,0x30,0x3a,0xa1,0x48,0x56,0xbc,0xed };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-55", "[CBC][MCT][128][ENCRYPT][n55]") {
    const uint8_t KEY[] = { 0xe3,0x90,0x1d,0x8f,0x96,0x59,0x2f,0x55,0xa0,0xbd,0x34,0x84,0xc1,0xa1,0x33,0x73 };
    const uint8_t IV[] = { 0x3c,0xa8,0xfa,0xb1,0x0d,0x4b,0xcb,0x43,0xaa,0x30,0x3a,0xa1,0x48,0x56,0xbc,0xed };
    const uint8_t PLAINTEXT[] = { 0x32,0x11,0x2b,0x6f,0x2d,0xe5,0x7f,0xb7,0xb4,0xcc,0x18,0x1c,0xcd,0xc3,0x77,0x64 };
    const uint8_t CIPHERTEXT[] = { 0x80,0x20,0xd8,0x78,0x75,0xc9,0x42,0xa0,0xe1,0xbf,0x5f,0x98,0x9f,0x41,0x25,0x46 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-56", "[CBC][MCT][128][ENCRYPT][n56]") {
    const uint8_t KEY[] = { 0x63,0xb0,0xc5,0xf7,0xe3,0x90,0x6d,0xf5,0x41,0x02,0x6b,0x1c,0x5e,0xe0,0x16,0x35 };
    const uint8_t IV[] = { 0x80,0x20,0xd8,0x78,0x75,0xc9,0x42,0xa0,0xe1,0xbf,0x5f,0x98,0x9f,0x41,0x25,0x46 };
    const uint8_t PLAINTEXT[] = { 0x1b,0xf8,0x21,0x5b,0x2c,0xd3,0xb6,0xa3,0xee,0x78,0x17,0x20,0x88,0x9c,0xc6,0xd0 };
    const uint8_t CIPHERTEXT[] = { 0x26,0x02,0x0d,0x81,0x64,0x87,0x57,0x4c,0xed,0x0d,0xb0,0xd8,0xd9,0x0f,0xf8,0x36 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-57", "[CBC][MCT][128][ENCRYPT][n57]") {
    const uint8_t KEY[] = { 0x45,0xb2,0xc8,0x76,0x87,0x17,0x3a,0xb9,0xac,0x0f,0xdb,0xc4,0x87,0xef,0xee,0x03 };
    const uint8_t IV[] = { 0x26,0x02,0x0d,0x81,0x64,0x87,0x57,0x4c,0xed,0x0d,0xb0,0xd8,0xd9,0x0f,0xf8,0x36 };
    const uint8_t PLAINTEXT[] = { 0x42,0x3e,0x90,0x2f,0x68,0xf1,0x2b,0x7b,0xc2,0x5f,0x50,0x82,0x62,0x86,0xad,0x18 };
    const uint8_t CIPHERTEXT[] = { 0x74,0x12,0xb3,0xc0,0x7a,0xe1,0x27,0xdd,0xa2,0x1e,0xc5,0xea,0xe4,0xfc,0x0e,0x9e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-58", "[CBC][MCT][128][ENCRYPT][n58]") {
    const uint8_t KEY[] = { 0x31,0xa0,0x7b,0xb6,0xfd,0xf6,0x1d,0x64,0x0e,0x11,0x1e,0x2e,0x63,0x13,0xe0,0x9d };
    const uint8_t IV[] = { 0x74,0x12,0xb3,0xc0,0x7a,0xe1,0x27,0xdd,0xa2,0x1e,0xc5,0xea,0xe4,0xfc,0x0e,0x9e };
    const uint8_t PLAINTEXT[] = { 0xf6,0x08,0x50,0xcc,0x52,0xa6,0xef,0xbc,0xdf,0xfc,0x80,0xa5,0xdf,0x13,0x3d,0x6b };
    const uint8_t CIPHERTEXT[] = { 0x9a,0xc4,0xa4,0x77,0xd6,0xac,0xa9,0xfc,0xd9,0x81,0x5f,0x3a,0x8e,0xd8,0x83,0xdf };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-59", "[CBC][MCT][128][ENCRYPT][n59]") {
    const uint8_t KEY[] = { 0xab,0x64,0xdf,0xc1,0x2b,0x5a,0xb4,0x98,0xd7,0x90,0x41,0x14,0xed,0xcb,0x63,0x42 };
    const uint8_t IV[] = { 0x9a,0xc4,0xa4,0x77,0xd6,0xac,0xa9,0xfc,0xd9,0x81,0x5f,0x3a,0x8e,0xd8,0x83,0xdf };
    const uint8_t PLAINTEXT[] = { 0xb9,0xae,0xf3,0x64,0x52,0xc4,0x4b,0x79,0x44,0x1d,0x5d,0xd1,0xde,0x6f,0x8d,0xd5 };
    const uint8_t CIPHERTEXT[] = { 0x1d,0x50,0x72,0x9e,0xbd,0x80,0xe7,0xc2,0x17,0x1b,0x50,0x7f,0xf0,0x4f,0x2f,0x7f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-60", "[CBC][MCT][128][ENCRYPT][n60]") {
    const uint8_t KEY[] = { 0xb6,0x34,0xad,0x5f,0x96,0xda,0x53,0x5a,0xc0,0x8b,0x11,0x6b,0x1d,0x84,0x4c,0x3d };
    const uint8_t IV[] = { 0x1d,0x50,0x72,0x9e,0xbd,0x80,0xe7,0xc2,0x17,0x1b,0x50,0x7f,0xf0,0x4f,0x2f,0x7f };
    const uint8_t PLAINTEXT[] = { 0x86,0xbd,0x16,0xce,0x91,0x5e,0x72,0x07,0x6c,0x8f,0xa0,0x46,0x96,0x6d,0xcf,0xc2 };
    const uint8_t CIPHERTEXT[] = { 0xb6,0x82,0xa6,0x94,0xa1,0x41,0xa3,0x16,0xcc,0xb8,0x24,0x2b,0xe6,0x8d,0x1d,0x5c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-61", "[CBC][MCT][128][ENCRYPT][n61]") {
    const uint8_t KEY[] = { 0x00,0xb6,0x0b,0xcb,0x37,0x9b,0xf0,0x4c,0x0c,0x33,0x35,0x40,0xfb,0x09,0x51,0x61 };
    const uint8_t IV[] = { 0xb6,0x82,0xa6,0x94,0xa1,0x41,0xa3,0x16,0xcc,0xb8,0x24,0x2b,0xe6,0x8d,0x1d,0x5c };
    const uint8_t PLAINTEXT[] = { 0xe5,0xd1,0xa8,0x03,0xfc,0xc6,0xbb,0xd1,0xba,0x81,0x3f,0x5b,0x83,0x67,0x7c,0xa9 };
    const uint8_t CIPHERTEXT[] = { 0x3e,0xb3,0xab,0x21,0x4a,0x94,0xb7,0xc3,0x33,0x29,0xbc,0xe0,0xba,0x04,0x75,0x0d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-62", "[CBC][MCT][128][ENCRYPT][n62]") {
    const uint8_t KEY[] = { 0x3e,0x05,0xa0,0xea,0x7d,0x0f,0x47,0x8f,0x3f,0x1a,0x89,0xa0,0x41,0x0d,0x24,0x6c };
    const uint8_t IV[] = { 0x3e,0xb3,0xab,0x21,0x4a,0x94,0xb7,0xc3,0x33,0x29,0xbc,0xe0,0xba,0x04,0x75,0x0d };
    const uint8_t PLAINTEXT[] = { 0x8f,0xa2,0xc8,0xa1,0xf9,0x68,0x83,0x77,0x1e,0xf6,0x74,0x6f,0x27,0x7c,0xd4,0x57 };
    const uint8_t CIPHERTEXT[] = { 0xcc,0xbd,0x25,0xf8,0x5c,0xc9,0xb5,0x0b,0x98,0x34,0xcb,0x19,0x85,0x9d,0x32,0xbd };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-63", "[CBC][MCT][128][ENCRYPT][n63]") {
    const uint8_t KEY[] = { 0xf2,0xb8,0x85,0x12,0x21,0xc6,0xf2,0x84,0xa7,0x2e,0x42,0xb9,0xc4,0x90,0x16,0xd1 };
    const uint8_t IV[] = { 0xcc,0xbd,0x25,0xf8,0x5c,0xc9,0xb5,0x0b,0x98,0x34,0xcb,0x19,0x85,0x9d,0x32,0xbd };
    const uint8_t PLAINTEXT[] = { 0x61,0xd9,0x8e,0x21,0xad,0x14,0x16,0x4e,0xdb,0x72,0x65,0x3b,0xb7,0xa5,0x26,0xf4 };
    const uint8_t CIPHERTEXT[] = { 0x52,0x44,0xc2,0x34,0xb0,0x11,0x78,0xd4,0xdd,0x00,0xd7,0xf5,0x92,0xea,0xa8,0x4b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-64", "[CBC][MCT][128][ENCRYPT][n64]") {
    const uint8_t KEY[] = { 0xa0,0xfc,0x47,0x26,0x91,0xd7,0x8a,0x50,0x7a,0x2e,0x95,0x4c,0x56,0x7a,0xbe,0x9a };
    const uint8_t IV[] = { 0x52,0x44,0xc2,0x34,0xb0,0x11,0x78,0xd4,0xdd,0x00,0xd7,0xf5,0x92,0xea,0xa8,0x4b };
    const uint8_t PLAINTEXT[] = { 0x55,0xf9,0x9e,0x64,0x9f,0x5e,0x16,0x80,0x19,0x5a,0xd7,0x97,0x17,0x08,0xe2,0xa5 };
    const uint8_t CIPHERTEXT[] = { 0x13,0xe7,0xd4,0x6f,0x7f,0xed,0xb1,0xc1,0xac,0xd8,0x1f,0x7c,0x0c,0x12,0x50,0x71 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-65", "[CBC][MCT][128][ENCRYPT][n65]") {
    const uint8_t KEY[] = { 0xb3,0x1b,0x93,0x49,0xee,0x3a,0x3b,0x91,0xd6,0xf6,0x8a,0x30,0x5a,0x68,0xee,0xeb };
    const uint8_t IV[] = { 0x13,0xe7,0xd4,0x6f,0x7f,0xed,0xb1,0xc1,0xac,0xd8,0x1f,0x7c,0x0c,0x12,0x50,0x71 };
    const uint8_t PLAINTEXT[] = { 0xe9,0x9b,0x3a,0x2c,0x20,0x71,0xcd,0xac,0x45,0xb3,0x9e,0xc7,0xa0,0xf9,0xca,0x0d };
    const uint8_t CIPHERTEXT[] = { 0xc7,0x86,0xe8,0xbe,0xa4,0x98,0x3a,0xd6,0x56,0x40,0xbb,0xe6,0xcc,0xcf,0xac,0xa9 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-66", "[CBC][MCT][128][ENCRYPT][n66]") {
    const uint8_t KEY[] = { 0x74,0x9d,0x7b,0xf7,0x4a,0xa2,0x01,0x47,0x80,0xb6,0x31,0xd6,0x96,0xa7,0x42,0x42 };
    const uint8_t IV[] = { 0xc7,0x86,0xe8,0xbe,0xa4,0x98,0x3a,0xd6,0x56,0x40,0xbb,0xe6,0xcc,0xcf,0xac,0xa9 };
    const uint8_t PLAINTEXT[] = { 0xa2,0x40,0x86,0x63,0x22,0x51,0x44,0x05,0x33,0x2b,0x18,0x80,0x4b,0x3a,0xd8,0xf5 };
    const uint8_t CIPHERTEXT[] = { 0x1b,0x93,0x29,0xbb,0x69,0xc7,0xb9,0x73,0x9c,0xe5,0x55,0x65,0x47,0x98,0x6b,0xea };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-67", "[CBC][MCT][128][ENCRYPT][n67]") {
    const uint8_t KEY[] = { 0x6f,0x0e,0x52,0x4c,0x23,0x65,0xb8,0x34,0x1c,0x53,0x64,0xb3,0xd1,0x3f,0x29,0xa8 };
    const uint8_t IV[] = { 0x1b,0x93,0x29,0xbb,0x69,0xc7,0xb9,0x73,0x9c,0xe5,0x55,0x65,0x47,0x98,0x6b,0xea };
    const uint8_t PLAINTEXT[] = { 0xf9,0xf0,0x85,0xa7,0x5c,0x18,0x42,0x61,0x0d,0xf4,0xa2,0x0e,0x99,0xaf,0x91,0xa2 };
    const uint8_t CIPHERTEXT[] = { 0x7f,0x00,0xf5,0x58,0x4f,0xbe,0x0d,0x65,0x1e,0xe8,0x1e,0x6d,0xb8,0xc3,0x1c,0xc8 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-68", "[CBC][MCT][128][ENCRYPT][n68]") {
    const uint8_t KEY[] = { 0x10,0x0e,0xa7,0x14,0x6c,0xdb,0xb5,0x51,0x02,0xbb,0x7a,0xde,0x69,0xfc,0x35,0x60 };
    const uint8_t IV[] = { 0x7f,0x00,0xf5,0x58,0x4f,0xbe,0x0d,0x65,0x1e,0xe8,0x1e,0x6d,0xb8,0xc3,0x1c,0xc8 };
    const uint8_t PLAINTEXT[] = { 0x6a,0x62,0x01,0x00,0x22,0x1b,0xba,0xdb,0x95,0xa1,0xd5,0xb8,0xa3,0xab,0xae,0x48 };
    const uint8_t CIPHERTEXT[] = { 0x89,0x28,0x4b,0xd8,0x37,0x99,0x37,0x73,0xf3,0xd8,0x09,0xc8,0x4e,0xe7,0x57,0xbc };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-69", "[CBC][MCT][128][ENCRYPT][n69]") {
    const uint8_t KEY[] = { 0x99,0x26,0xec,0xcc,0x5b,0x42,0x82,0x22,0xf1,0x63,0x73,0x16,0x27,0x1b,0x62,0xdc };
    const uint8_t IV[] = { 0x89,0x28,0x4b,0xd8,0x37,0x99,0x37,0x73,0xf3,0xd8,0x09,0xc8,0x4e,0xe7,0x57,0xbc };
    const uint8_t PLAINTEXT[] = { 0x4b,0xbe,0x2c,0x9c,0xa1,0x48,0x2c,0xa3,0x75,0x0b,0x32,0x87,0xce,0x85,0xd4,0x49 };
    const uint8_t CIPHERTEXT[] = { 0x68,0xf0,0x1a,0x39,0x80,0x85,0xd7,0x27,0x72,0x60,0x63,0x71,0x5a,0xb1,0x68,0x8a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-70", "[CBC][MCT][128][ENCRYPT][n70]") {
    const uint8_t KEY[] = { 0xf1,0xd6,0xf6,0xf5,0xdb,0xc7,0x55,0x05,0x83,0x03,0x10,0x67,0x7d,0xaa,0x0a,0x56 };
    const uint8_t IV[] = { 0x68,0xf0,0x1a,0x39,0x80,0x85,0xd7,0x27,0x72,0x60,0x63,0x71,0x5a,0xb1,0x68,0x8a };
    const uint8_t PLAINTEXT[] = { 0x8f,0x6d,0xc5,0xc5,0x5b,0x1e,0xd7,0x43,0xa8,0x7c,0x7d,0xda,0x2f,0x5a,0x51,0x8f };
    const uint8_t CIPHERTEXT[] = { 0x50,0x46,0x33,0x8f,0xa6,0x11,0x8a,0x25,0xfb,0x55,0xa0,0x31,0x10,0xd8,0x87,0xa1 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-71", "[CBC][MCT][128][ENCRYPT][n71]") {
    const uint8_t KEY[] = { 0xa1,0x90,0xc5,0x7a,0x7d,0xd6,0xdf,0x20,0x78,0x56,0xb0,0x56,0x6d,0x72,0x8d,0xf7 };
    const uint8_t IV[] = { 0x50,0x46,0x33,0x8f,0xa6,0x11,0x8a,0x25,0xfb,0x55,0xa0,0x31,0x10,0xd8,0x87,0xa1 };
    const uint8_t PLAINTEXT[] = { 0x66,0x43,0xa8,0x4c,0xac,0x25,0x54,0x18,0x58,0x10,0xc9,0x42,0xf4,0x18,0x97,0x4b };
    const uint8_t CIPHERTEXT[] = { 0x29,0x9a,0x5e,0x6f,0x0d,0x05,0xc8,0xeb,0x53,0x07,0xd3,0x0a,0xdf,0xa7,0x47,0x88 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-72", "[CBC][MCT][128][ENCRYPT][n72]") {
    const uint8_t KEY[] = { 0x88,0x0a,0x9b,0x15,0x70,0xd3,0x17,0xcb,0x2b,0x51,0x63,0x5c,0xb2,0xd5,0xca,0x7f };
    const uint8_t IV[] = { 0x29,0x9a,0x5e,0x6f,0x0d,0x05,0xc8,0xeb,0x53,0x07,0xd3,0x0a,0xdf,0xa7,0x47,0x88 };
    const uint8_t PLAINTEXT[] = { 0x83,0xee,0x41,0xd7,0xdf,0xe2,0xa0,0x16,0x1b,0x12,0xef,0x4e,0xb8,0x8a,0x5a,0x1d };
    const uint8_t CIPHERTEXT[] = { 0x28,0x66,0x9f,0x00,0x2f,0xb3,0xe1,0x70,0xf2,0x83,0x47,0x05,0xa7,0xa0,0x82,0x72 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-73", "[CBC][MCT][128][ENCRYPT][n73]") {
    const uint8_t KEY[] = { 0xa0,0x6c,0x04,0x15,0x5f,0x60,0xf6,0xbb,0xd9,0xd2,0x24,0x59,0x15,0x75,0x48,0x0d };
    const uint8_t IV[] = { 0x28,0x66,0x9f,0x00,0x2f,0xb3,0xe1,0x70,0xf2,0x83,0x47,0x05,0xa7,0xa0,0x82,0x72 };
    const uint8_t PLAINTEXT[] = { 0x89,0x96,0x02,0x6b,0xd9,0xcb,0x6a,0x8b,0xb9,0xe7,0x71,0xe8,0xfa,0x4a,0xfb,0xd7 };
    const uint8_t CIPHERTEXT[] = { 0x92,0x3c,0x5d,0x21,0x82,0xc0,0x81,0xf3,0x04,0x8f,0xd7,0x21,0xf1,0xea,0x5c,0x69 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-74", "[CBC][MCT][128][ENCRYPT][n74]") {
    const uint8_t KEY[] = { 0x32,0x50,0x59,0x34,0xdd,0xa0,0x77,0x48,0xdd,0x5d,0xf3,0x78,0xe4,0x9f,0x14,0x64 };
    const uint8_t IV[] = { 0x92,0x3c,0x5d,0x21,0x82,0xc0,0x81,0xf3,0x04,0x8f,0xd7,0x21,0xf1,0xea,0x5c,0x69 };
    const uint8_t PLAINTEXT[] = { 0x1c,0xe4,0x8f,0x3d,0x65,0xf1,0xe3,0x4f,0x77,0x6b,0x04,0x3f,0x4c,0x7d,0xff,0x72 };
    const uint8_t CIPHERTEXT[] = { 0x80,0x51,0x78,0x5b,0xbc,0x1c,0xc2,0x4f,0x60,0xa2,0x7b,0xe6,0x5f,0xc5,0x27,0x0d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-75", "[CBC][MCT][128][ENCRYPT][n75]") {
    const uint8_t KEY[] = { 0xb2,0x01,0x21,0x6f,0x61,0xbc,0xb5,0x07,0xbd,0xff,0x88,0x9e,0xbb,0x5a,0x33,0x69 };
    const uint8_t IV[] = { 0x80,0x51,0x78,0x5b,0xbc,0x1c,0xc2,0x4f,0x60,0xa2,0x7b,0xe6,0x5f,0xc5,0x27,0x0d };
    const uint8_t PLAINTEXT[] = { 0x06,0x67,0x28,0x2c,0x65,0x0e,0x0e,0x96,0xf3,0x3c,0x32,0x81,0x45,0x7e,0x1f,0x8f };
    const uint8_t CIPHERTEXT[] = { 0xcb,0x8a,0xc9,0x9c,0x2e,0xaa,0x43,0x19,0x0e,0x29,0xb3,0x43,0x4c,0x4b,0xa1,0xe5 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-76", "[CBC][MCT][128][ENCRYPT][n76]") {
    const uint8_t KEY[] = { 0x79,0x8b,0xe8,0xf3,0x4f,0x16,0xf6,0x1e,0xb3,0xd6,0x3b,0xdd,0xf7,0x11,0x92,0x8c };
    const uint8_t IV[] = { 0xcb,0x8a,0xc9,0x9c,0x2e,0xaa,0x43,0x19,0x0e,0x29,0xb3,0x43,0x4c,0x4b,0xa1,0xe5 };
    const uint8_t PLAINTEXT[] = { 0xd6,0x0e,0xd6,0x36,0x26,0x85,0x22,0x5f,0xbc,0xd1,0xbd,0xdc,0x0f,0xb3,0x43,0x67 };
    const uint8_t CIPHERTEXT[] = { 0x89,0xd7,0x92,0xf0,0x78,0x35,0x72,0x68,0xac,0xb8,0x44,0x85,0x12,0x54,0x02,0xeb };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-77", "[CBC][MCT][128][ENCRYPT][n77]") {
    const uint8_t KEY[] = { 0xf0,0x5c,0x7a,0x03,0x37,0x23,0x84,0x76,0x1f,0x6e,0x7f,0x58,0xe5,0x45,0x90,0x67 };
    const uint8_t IV[] = { 0x89,0xd7,0x92,0xf0,0x78,0x35,0x72,0x68,0xac,0xb8,0x44,0x85,0x12,0x54,0x02,0xeb };
    const uint8_t PLAINTEXT[] = { 0x21,0xc0,0x6f,0x22,0x45,0x44,0xb2,0xe2,0xaf,0x0f,0xa6,0xab,0x1a,0x53,0xff,0x5b };
    const uint8_t CIPHERTEXT[] = { 0x7e,0xdd,0x61,0x97,0x2d,0x3c,0x87,0xcc,0x1b,0x06,0xcf,0x8e,0xc1,0x14,0x3d,0x17 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-78", "[CBC][MCT][128][ENCRYPT][n78]") {
    const uint8_t KEY[] = { 0x8e,0x81,0x1b,0x94,0x1a,0x1f,0x03,0xba,0x04,0x68,0xb0,0xd6,0x24,0x51,0xad,0x70 };
    const uint8_t IV[] = { 0x7e,0xdd,0x61,0x97,0x2d,0x3c,0x87,0xcc,0x1b,0x06,0xcf,0x8e,0xc1,0x14,0x3d,0x17 };
    const uint8_t PLAINTEXT[] = { 0xfa,0xb4,0x11,0x90,0x4a,0x91,0x3f,0x88,0xc0,0x05,0x7d,0xe4,0xb8,0xbc,0x37,0xa5 };
    const uint8_t CIPHERTEXT[] = { 0x92,0xae,0x30,0xac,0xf4,0x10,0x26,0x8f,0xc5,0x79,0xd8,0xe9,0x52,0xf6,0x53,0xfd };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-79", "[CBC][MCT][128][ENCRYPT][n79]") {
    const uint8_t KEY[] = { 0x1c,0x2f,0x2b,0x38,0xee,0x0f,0x25,0x35,0xc1,0x11,0x68,0x3f,0x76,0xa7,0xfe,0x8d };
    const uint8_t IV[] = { 0x92,0xae,0x30,0xac,0xf4,0x10,0x26,0x8f,0xc5,0x79,0xd8,0xe9,0x52,0xf6,0x53,0xfd };
    const uint8_t PLAINTEXT[] = { 0xb9,0xb5,0xbe,0x84,0xb1,0x14,0x5c,0xc2,0xbb,0x76,0xfa,0x6b,0xba,0xf7,0x5d,0x37 };
    const uint8_t CIPHERTEXT[] = { 0x36,0xae,0x96,0x57,0xc3,0xd4,0xe9,0xb6,0x28,0x93,0x75,0x64,0xed,0x4f,0xae,0x87 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-80", "[CBC][MCT][128][ENCRYPT][n80]") {
    const uint8_t KEY[] = { 0x2a,0x81,0xbd,0x6f,0x2d,0xdb,0xcc,0x83,0xe9,0x82,0x1d,0x5b,0x9b,0xe8,0x50,0x0a };
    const uint8_t IV[] = { 0x36,0xae,0x96,0x57,0xc3,0xd4,0xe9,0xb6,0x28,0x93,0x75,0x64,0xed,0x4f,0xae,0x87 };
    const uint8_t PLAINTEXT[] = { 0x99,0xc2,0x75,0xaa,0x39,0xff,0x44,0xe7,0x07,0x73,0xe4,0x32,0x53,0x8b,0x8e,0xd1 };
    const uint8_t CIPHERTEXT[] = { 0x9c,0xc4,0x60,0xf8,0x16,0xbe,0x09,0x3c,0x8e,0x79,0x96,0x11,0x12,0x7f,0xe2,0xa2 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-81", "[CBC][MCT][128][ENCRYPT][n81]") {
    const uint8_t KEY[] = { 0xb6,0x45,0xdd,0x97,0x3b,0x65,0xc5,0xbf,0x67,0xfb,0x8b,0x4a,0x89,0x97,0xb2,0xa8 };
    const uint8_t IV[] = { 0x9c,0xc4,0x60,0xf8,0x16,0xbe,0x09,0x3c,0x8e,0x79,0x96,0x11,0x12,0x7f,0xe2,0xa2 };
    const uint8_t PLAINTEXT[] = { 0x52,0xc6,0x18,0xc6,0x10,0x49,0x7e,0x2b,0x72,0xb9,0xbb,0xeb,0xac,0xd5,0x11,0x23 };
    const uint8_t CIPHERTEXT[] = { 0xa5,0x9f,0x54,0xef,0x1f,0x87,0x1f,0x76,0xf7,0x45,0xcd,0x0d,0x75,0xa0,0x65,0xf8 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-82", "[CBC][MCT][128][ENCRYPT][n82]") {
    const uint8_t KEY[] = { 0x13,0xda,0x89,0x78,0x24,0xe2,0xda,0xc9,0x90,0xbe,0x46,0x47,0xfc,0x37,0xd7,0x50 };
    const uint8_t IV[] = { 0xa5,0x9f,0x54,0xef,0x1f,0x87,0x1f,0x76,0xf7,0x45,0xcd,0x0d,0x75,0xa0,0x65,0xf8 };
    const uint8_t PLAINTEXT[] = { 0xeb,0xc9,0x0b,0x23,0xc2,0x83,0x7f,0x95,0x0a,0x0e,0xed,0x06,0x90,0xba,0x4b,0xa0 };
    const uint8_t CIPHERTEXT[] = { 0xc4,0x0c,0xef,0xc7,0x0f,0xb3,0x01,0x3b,0x86,0x6d,0x36,0x04,0x0f,0xba,0x4d,0x09 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-83", "[CBC][MCT][128][ENCRYPT][n83]") {
    const uint8_t KEY[] = { 0xd7,0xd6,0x66,0xbf,0x2b,0x51,0xdb,0xf2,0x16,0xd3,0x70,0x43,0xf3,0x8d,0x9a,0x59 };
    const uint8_t IV[] = { 0xc4,0x0c,0xef,0xc7,0x0f,0xb3,0x01,0x3b,0x86,0x6d,0x36,0x04,0x0f,0xba,0x4d,0x09 };
    const uint8_t PLAINTEXT[] = { 0x70,0x23,0xdd,0x22,0xe8,0x59,0xe8,0x28,0x04,0xec,0x3b,0x5f,0xd3,0x14,0xbd,0xb8 };
    const uint8_t CIPHERTEXT[] = { 0xdc,0x9b,0xad,0xde,0x27,0xec,0xde,0xf7,0x51,0xdd,0xaf,0x0f,0x39,0x69,0x28,0x69 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-84", "[CBC][MCT][128][ENCRYPT][n84]") {
    const uint8_t KEY[] = { 0x0b,0x4d,0xcb,0x61,0x0c,0xbd,0x05,0x05,0x47,0x0e,0xdf,0x4c,0xca,0xe4,0xb2,0x30 };
    const uint8_t IV[] = { 0xdc,0x9b,0xad,0xde,0x27,0xec,0xde,0xf7,0x51,0xdd,0xaf,0x0f,0x39,0x69,0x28,0x69 };
    const uint8_t PLAINTEXT[] = { 0x18,0xff,0x45,0x2e,0x7a,0x5f,0xe2,0x76,0xb0,0xee,0x72,0xce,0xc7,0x8d,0x3b,0x25 };
    const uint8_t CIPHERTEXT[] = { 0x21,0xda,0x7b,0x3f,0x53,0x5c,0x63,0xe0,0x21,0xeb,0xb8,0x16,0x26,0x93,0x78,0x4e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-85", "[CBC][MCT][128][ENCRYPT][n85]") {
    const uint8_t KEY[] = { 0x2a,0x97,0xb0,0x5e,0x5f,0xe1,0x66,0xe5,0x66,0xe5,0x67,0x5a,0xec,0x77,0xca,0x7e };
    const uint8_t IV[] = { 0x21,0xda,0x7b,0x3f,0x53,0x5c,0x63,0xe0,0x21,0xeb,0xb8,0x16,0x26,0x93,0x78,0x4e };
    const uint8_t PLAINTEXT[] = { 0xa0,0xb7,0xf4,0x14,0x17,0x3e,0x39,0xa0,0xcf,0xdd,0x41,0x2a,0x87,0xae,0x45,0xac };
    const uint8_t CIPHERTEXT[] = { 0xdb,0xe3,0x80,0x8a,0xed,0x01,0x01,0x89,0xd8,0x84,0xea,0x68,0x6c,0xbf,0x18,0x63 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-86", "[CBC][MCT][128][ENCRYPT][n86]") {
    const uint8_t KEY[] = { 0xf1,0x74,0x30,0xd4,0xb2,0xe0,0x67,0x6c,0xbe,0x61,0x8d,0x32,0x80,0xc8,0xd2,0x1d };
    const uint8_t IV[] = { 0xdb,0xe3,0x80,0x8a,0xed,0x01,0x01,0x89,0xd8,0x84,0xea,0x68,0x6c,0xbf,0x18,0x63 };
    const uint8_t PLAINTEXT[] = { 0xa9,0xff,0x2f,0x70,0x60,0x82,0x1b,0x50,0xeb,0x9b,0x75,0x6d,0x24,0xe1,0x29,0x1b };
    const uint8_t CIPHERTEXT[] = { 0xc3,0xd7,0xfa,0x49,0x26,0xa1,0xc6,0xfe,0xf0,0x9d,0x60,0xb6,0xb2,0x34,0xc7,0x0c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-87", "[CBC][MCT][128][ENCRYPT][n87]") {
    const uint8_t KEY[] = { 0x32,0xa3,0xca,0x9d,0x94,0x41,0xa1,0x92,0x4e,0xfc,0xed,0x84,0x32,0xfc,0x15,0x11 };
    const uint8_t IV[] = { 0xc3,0xd7,0xfa,0x49,0x26,0xa1,0xc6,0xfe,0xf0,0x9d,0x60,0xb6,0xb2,0x34,0xc7,0x0c };
    const uint8_t PLAINTEXT[] = { 0x1b,0xe5,0x54,0x31,0x2f,0xed,0x95,0xd3,0x20,0x55,0x0e,0x1d,0x45,0x02,0x94,0x1c };
    const uint8_t CIPHERTEXT[] = { 0x38,0xea,0x5e,0x86,0x9b,0xa7,0xa8,0x09,0x6b,0x82,0x5c,0xab,0x01,0x53,0xdd,0x8a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-88", "[CBC][MCT][128][ENCRYPT][n88]") {
    const uint8_t KEY[] = { 0x0a,0x49,0x94,0x1b,0x0f,0xe6,0x09,0x9b,0x25,0x7e,0xb1,0x2f,0x33,0xaf,0xc8,0x9b };
    const uint8_t IV[] = { 0x38,0xea,0x5e,0x86,0x9b,0xa7,0xa8,0x09,0x6b,0x82,0x5c,0xab,0x01,0x53,0xdd,0x8a };
    const uint8_t PLAINTEXT[] = { 0x9a,0x42,0xd7,0xaa,0xc8,0x28,0x3f,0xfb,0xe5,0x38,0xcb,0x1a,0xf3,0xf1,0x58,0x81 };
    const uint8_t CIPHERTEXT[] = { 0xcc,0x6b,0x1e,0xfa,0x71,0x5d,0x61,0xe0,0x4a,0x4c,0x07,0xe3,0xea,0xca,0x32,0x49 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-89", "[CBC][MCT][128][ENCRYPT][n89]") {
    const uint8_t KEY[] = { 0xc6,0x22,0x8a,0xe1,0x7e,0xbb,0x68,0x7b,0x6f,0x32,0xb6,0xcc,0xd9,0x65,0xfa,0xd2 };
    const uint8_t IV[] = { 0xcc,0x6b,0x1e,0xfa,0x71,0x5d,0x61,0xe0,0x4a,0x4c,0x07,0xe3,0xea,0xca,0x32,0x49 };
    const uint8_t PLAINTEXT[] = { 0x07,0x49,0x1f,0x55,0xe2,0xfd,0xa0,0x9e,0x3a,0x3e,0x9d,0x1b,0x32,0xc8,0x97,0xcf };
    const uint8_t CIPHERTEXT[] = { 0xf8,0x9d,0x8c,0x43,0xc3,0xc4,0xad,0xb5,0xf9,0xad,0x04,0x05,0x58,0xe5,0x36,0x95 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-90", "[CBC][MCT][128][ENCRYPT][n90]") {
    const uint8_t KEY[] = { 0x3e,0xbf,0x06,0xa2,0xbd,0x7f,0xc5,0xce,0x96,0x9f,0xb2,0xc9,0x81,0x80,0xcc,0x47 };
    const uint8_t IV[] = { 0xf8,0x9d,0x8c,0x43,0xc3,0xc4,0xad,0xb5,0xf9,0xad,0x04,0x05,0x58,0xe5,0x36,0x95 };
    const uint8_t PLAINTEXT[] = { 0xf8,0x0f,0x7f,0x8a,0xe6,0x31,0xb8,0x1a,0x5f,0x7a,0xce,0xba,0x7f,0xbe,0xa0,0xc1 };
    const uint8_t CIPHERTEXT[] = { 0x7c,0xdf,0xf3,0xc7,0xed,0x22,0xef,0x18,0x63,0x40,0x38,0xe7,0xc5,0xe0,0x91,0x2c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-91", "[CBC][MCT][128][ENCRYPT][n91]") {
    const uint8_t KEY[] = { 0x42,0x60,0xf5,0x65,0x50,0x5d,0x2a,0xd6,0xf5,0xdf,0x8a,0x2e,0x44,0x60,0x5d,0x6b };
    const uint8_t IV[] = { 0x7c,0xdf,0xf3,0xc7,0xed,0x22,0xef,0x18,0x63,0x40,0x38,0xe7,0xc5,0xe0,0x91,0x2c };
    const uint8_t PLAINTEXT[] = { 0x42,0x6e,0xe4,0x60,0xa6,0x75,0x06,0xd4,0x06,0x9c,0x78,0x4d,0x8f,0x9d,0xb1,0xd5 };
    const uint8_t CIPHERTEXT[] = { 0x17,0x14,0x7e,0x78,0x39,0x39,0x97,0xff,0x3c,0xae,0x65,0xde,0x18,0xa0,0x00,0x2f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-92", "[CBC][MCT][128][ENCRYPT][n92]") {
    const uint8_t KEY[] = { 0x55,0x74,0x8b,0x1d,0x69,0x64,0xbd,0x29,0xc9,0x71,0xef,0xf0,0x5c,0xc0,0x5d,0x44 };
    const uint8_t IV[] = { 0x17,0x14,0x7e,0x78,0x39,0x39,0x97,0xff,0x3c,0xae,0x65,0xde,0x18,0xa0,0x00,0x2f };
    const uint8_t PLAINTEXT[] = { 0x56,0xbb,0x4b,0x70,0x76,0x66,0x68,0x37,0x94,0xfe,0xa1,0x51,0x2c,0xa1,0x69,0x4c };
    const uint8_t CIPHERTEXT[] = { 0x33,0xb6,0xc5,0xe6,0xc6,0x93,0xad,0x06,0x44,0x9b,0x7c,0x19,0x6e,0x90,0xe1,0x4c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-93", "[CBC][MCT][128][ENCRYPT][n93]") {
    const uint8_t KEY[] = { 0x66,0xc2,0x4e,0xfb,0xaf,0xf7,0x10,0x2f,0x8d,0xea,0x93,0xe9,0x32,0x50,0xbc,0x08 };
    const uint8_t IV[] = { 0x33,0xb6,0xc5,0xe6,0xc6,0x93,0xad,0x06,0x44,0x9b,0x7c,0x19,0x6e,0x90,0xe1,0x4c };
    const uint8_t PLAINTEXT[] = { 0xf5,0xfb,0xff,0xe1,0x45,0xed,0x08,0x6c,0x4b,0xad,0x54,0x41,0x87,0xc6,0x4f,0x1f };
    const uint8_t CIPHERTEXT[] = { 0x98,0xb8,0x9b,0xe2,0xa5,0x20,0x42,0x6a,0x0d,0xb8,0xb6,0xaa,0x65,0xe3,0xd1,0x97 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-94", "[CBC][MCT][128][ENCRYPT][n94]") {
    const uint8_t KEY[] = { 0xfe,0x7a,0xd5,0x19,0x0a,0xd7,0x52,0x45,0x80,0x52,0x25,0x43,0x57,0xb3,0x6d,0x9f };
    const uint8_t IV[] = { 0x98,0xb8,0x9b,0xe2,0xa5,0x20,0x42,0x6a,0x0d,0xb8,0xb6,0xaa,0x65,0xe3,0xd1,0x97 };
    const uint8_t PLAINTEXT[] = { 0xf0,0x49,0x07,0x56,0xad,0x8e,0x60,0xe1,0x9f,0xef,0xb2,0xa6,0x7f,0xd8,0x45,0xd7 };
    const uint8_t CIPHERTEXT[] = { 0xc5,0xce,0x31,0x45,0xb5,0xc7,0xc2,0xa2,0xde,0xa9,0x37,0x3e,0x9b,0xce,0x89,0x8c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-95", "[CBC][MCT][128][ENCRYPT][n95]") {
    const uint8_t KEY[] = { 0x3b,0xb4,0xe4,0x5c,0xbf,0x10,0x90,0xe7,0x5e,0xfb,0x12,0x7d,0xcc,0x7d,0xe4,0x13 };
    const uint8_t IV[] = { 0xc5,0xce,0x31,0x45,0xb5,0xc7,0xc2,0xa2,0xde,0xa9,0x37,0x3e,0x9b,0xce,0x89,0x8c };
    const uint8_t PLAINTEXT[] = { 0x52,0x15,0xda,0x75,0xcb,0x0a,0x7b,0xe1,0xe6,0xd4,0x92,0x27,0x8f,0x51,0x6a,0xec };
    const uint8_t CIPHERTEXT[] = { 0x14,0xa4,0xb7,0x63,0xb4,0x7b,0x8d,0x64,0x87,0x6b,0x1b,0x44,0x57,0x4a,0xaa,0xdf };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-96", "[CBC][MCT][128][ENCRYPT][n96]") {
    const uint8_t KEY[] = { 0x2f,0x10,0x53,0x3f,0x0b,0x6b,0x1d,0x83,0xd9,0x90,0x09,0x39,0x9b,0x37,0x4e,0xcc };
    const uint8_t IV[] = { 0x14,0xa4,0xb7,0x63,0xb4,0x7b,0x8d,0x64,0x87,0x6b,0x1b,0x44,0x57,0x4a,0xaa,0xdf };
    const uint8_t PLAINTEXT[] = { 0x73,0x1d,0x34,0xc3,0x40,0x40,0x3b,0xa7,0x93,0xd7,0x69,0x33,0x00,0xd3,0x7a,0x33 };
    const uint8_t CIPHERTEXT[] = { 0x97,0x85,0x44,0xd6,0x45,0x9c,0x2c,0x68,0x61,0x04,0xe7,0x70,0x4d,0x28,0x2e,0x9e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-97", "[CBC][MCT][128][ENCRYPT][n97]") {
    const uint8_t KEY[] = { 0xb8,0x95,0x17,0xe9,0x4e,0xf7,0x31,0xeb,0xb8,0x94,0xee,0x49,0xd6,0x1f,0x60,0x52 };
    const uint8_t IV[] = { 0x97,0x85,0x44,0xd6,0x45,0x9c,0x2c,0x68,0x61,0x04,0xe7,0x70,0x4d,0x28,0x2e,0x9e };
    const uint8_t PLAINTEXT[] = { 0x8e,0xe9,0x80,0x91,0x43,0xde,0x73,0x31,0x6d,0xbc,0xcf,0xa3,0x24,0xda,0x35,0xd2 };
    const uint8_t CIPHERTEXT[] = { 0x4d,0x7a,0x73,0x6f,0xd4,0x59,0x3c,0x5f,0xd4,0xa7,0x7f,0x8e,0x91,0x85,0x00,0x36 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-98", "[CBC][MCT][128][ENCRYPT][n98]") {
    const uint8_t KEY[] = { 0xf5,0xef,0x64,0x86,0x9a,0xae,0x0d,0xb4,0x6c,0x33,0x91,0xc7,0x47,0x9a,0x60,0x64 };
    const uint8_t IV[] = { 0x4d,0x7a,0x73,0x6f,0xd4,0x59,0x3c,0x5f,0xd4,0xa7,0x7f,0x8e,0x91,0x85,0x00,0x36 };
    const uint8_t PLAINTEXT[] = { 0xb4,0x74,0xda,0x68,0xb7,0x5f,0xbe,0x55,0x1a,0x0b,0x4a,0xaa,0x3b,0x5b,0xeb,0x5d };
    const uint8_t CIPHERTEXT[] = { 0x2d,0x0a,0x2d,0x6f,0x47,0x90,0x98,0xc9,0x6c,0x16,0xae,0x03,0x6f,0x33,0xa7,0x40 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-ENCRYPT-99", "[CBC][MCT][128][ENCRYPT][n99]") {
    const uint8_t KEY[] = { 0xd8,0xe5,0x49,0xe9,0xdd,0x3e,0x95,0x7d,0x00,0x25,0x3f,0xc4,0x28,0xa9,0xc7,0x24 };
    const uint8_t IV[] = { 0x2d,0x0a,0x2d,0x6f,0x47,0x90,0x98,0xc9,0x6c,0x16,0xae,0x03,0x6f,0x33,0xa7,0x40 };
    const uint8_t PLAINTEXT[] = { 0xb0,0x1f,0xbd,0xb7,0x71,0x20,0xa9,0x0e,0x67,0x6b,0x64,0x0c,0xf1,0xf7,0x20,0xb6 };
    const uint8_t CIPHERTEXT[] = { 0x7b,0xed,0x76,0x71,0xc8,0x91,0x3a,0xa1,0x33,0x0f,0x19,0x37,0x61,0x52,0x3e,0x67 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-0", "[CBC][MCT][128][DECRYPT][n0]") {
    const uint8_t KEY[] = { 0x28,0x7b,0x07,0xc7,0x8f,0x8e,0x3e,0x1b,0xe7,0xc4,0x1b,0x3d,0x96,0xc0,0x4e,0x6e };
    const uint8_t IV[] = { 0x41,0xb4,0x61,0xf9,0x46,0x4f,0xd5,0x15,0xd2,0x54,0x13,0xb4,0x24,0x10,0x02,0xb8 };
    const uint8_t PLAINTEXT[] = { 0x28,0x05,0xd1,0x0b,0x12,0x7f,0xcd,0x1d,0xa5,0x28,0xfa,0xad,0x4e,0xb2,0xe1,0x0b };
    const uint8_t CIPHERTEXT[] = { 0x7c,0x54,0x92,0x3b,0x04,0x90,0xa9,0xd4,0xde,0x4e,0xc1,0xce,0x67,0x90,0xaa,0x4d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-1", "[CBC][MCT][128][DECRYPT][n1]") {
    const uint8_t KEY[] = { 0x00,0x7e,0xd6,0xcc,0x9d,0xf1,0xf3,0x06,0x42,0xec,0xe1,0x90,0xd8,0x72,0xaf,0x65 };
    const uint8_t IV[] = { 0x28,0x05,0xd1,0x0b,0x12,0x7f,0xcd,0x1d,0xa5,0x28,0xfa,0xad,0x4e,0xb2,0xe1,0x0b };
    const uint8_t PLAINTEXT[] = { 0x74,0x3b,0x75,0x5c,0x0d,0x1d,0x28,0x7f,0xfd,0x6c,0xce,0xbe,0xb3,0xee,0xe6,0xb3 };
    const uint8_t CIPHERTEXT[] = { 0xa7,0xb7,0x60,0xbe,0x92,0x37,0xb4,0x9e,0x8d,0xad,0x24,0xa6,0x06,0x35,0x23,0xa6 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-2", "[CBC][MCT][128][DECRYPT][n2]") {
    const uint8_t KEY[] = { 0x74,0x45,0xa3,0x90,0x90,0xec,0xdb,0x79,0xbf,0x80,0x2f,0x2e,0x6b,0x9c,0x49,0xd6 };
    const uint8_t IV[] = { 0x74,0x3b,0x75,0x5c,0x0d,0x1d,0x28,0x7f,0xfd,0x6c,0xce,0xbe,0xb3,0xee,0xe6,0xb3 };
    const uint8_t PLAINTEXT[] = { 0xb8,0x63,0xf5,0xf5,0x12,0x57,0xa3,0x88,0xdf,0xd4,0x5f,0x57,0xb1,0x71,0xfe,0x70 };
    const uint8_t CIPHERTEXT[] = { 0x79,0x41,0x4e,0x51,0x81,0x9e,0xca,0xaf,0xbb,0xb6,0xfd,0x04,0xa3,0xb4,0x2f,0xad };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-3", "[CBC][MCT][128][DECRYPT][n3]") {
    const uint8_t KEY[] = { 0xcc,0x26,0x56,0x65,0x82,0xbb,0x78,0xf1,0x60,0x54,0x70,0x79,0xda,0xed,0xb7,0xa6 };
    const uint8_t IV[] = { 0xb8,0x63,0xf5,0xf5,0x12,0x57,0xa3,0x88,0xdf,0xd4,0x5f,0x57,0xb1,0x71,0xfe,0x70 };
    const uint8_t PLAINTEXT[] = { 0x09,0x39,0x92,0xda,0x8c,0xf4,0xb1,0xd7,0x40,0x42,0x3f,0x8c,0xe8,0x80,0xbf,0x57 };
    const uint8_t CIPHERTEXT[] = { 0x41,0x40,0xda,0xad,0x9a,0xc9,0x21,0x04,0xca,0xfb,0xc5,0xd7,0x3f,0x56,0x1e,0x15 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-4", "[CBC][MCT][128][DECRYPT][n4]") {
    const uint8_t KEY[] = { 0xc5,0x1f,0xc4,0xbf,0x0e,0x4f,0xc9,0x26,0x20,0x16,0x4f,0xf5,0x32,0x6d,0x08,0xf1 };
    const uint8_t IV[] = { 0x09,0x39,0x92,0xda,0x8c,0xf4,0xb1,0xd7,0x40,0x42,0x3f,0x8c,0xe8,0x80,0xbf,0x57 };
    const uint8_t PLAINTEXT[] = { 0xba,0x90,0x3e,0xb5,0x6b,0xd8,0x8f,0x3d,0xa6,0xa9,0x92,0x90,0x60,0x3d,0xa1,0xf4 };
    const uint8_t CIPHERTEXT[] = { 0x9c,0xc3,0xac,0x03,0x23,0x67,0xf0,0x99,0x19,0x52,0xdd,0x77,0xd9,0xc0,0x2b,0x5b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-5", "[CBC][MCT][128][DECRYPT][n5]") {
    const uint8_t KEY[] = { 0x7f,0x8f,0xfa,0x0a,0x65,0x97,0x46,0x1b,0x86,0xbf,0xdd,0x65,0x52,0x50,0xa9,0x05 };
    const uint8_t IV[] = { 0xba,0x90,0x3e,0xb5,0x6b,0xd8,0x8f,0x3d,0xa6,0xa9,0x92,0x90,0x60,0x3d,0xa1,0xf4 };
    const uint8_t PLAINTEXT[] = { 0x8f,0x38,0x71,0x1c,0xaf,0x4c,0x68,0xeb,0x73,0x2f,0x8a,0x20,0xd3,0xff,0x76,0xb1 };
    const uint8_t CIPHERTEXT[] = { 0x5a,0xfc,0x41,0x75,0x29,0xce,0x88,0x1d,0xea,0x14,0x71,0xd9,0x07,0x0f,0x1e,0x8c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-6", "[CBC][MCT][128][DECRYPT][n6]") {
    const uint8_t KEY[] = { 0xf0,0xb7,0x8b,0x16,0xca,0xdb,0x2e,0xf0,0xf5,0x90,0x57,0x45,0x81,0xaf,0xdf,0xb4 };
    const uint8_t IV[] = { 0x8f,0x38,0x71,0x1c,0xaf,0x4c,0x68,0xeb,0x73,0x2f,0x8a,0x20,0xd3,0xff,0x76,0xb1 };
    const uint8_t PLAINTEXT[] = { 0xaf,0x81,0x2b,0xf8,0x45,0x80,0x27,0x43,0xc3,0xd9,0x22,0x9d,0x84,0x0a,0x79,0xcd };
    const uint8_t CIPHERTEXT[] = { 0xa3,0x15,0xab,0x0b,0xda,0xe5,0x1a,0x44,0x27,0x3b,0x6a,0x0d,0xfc,0x28,0x3d,0x72 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-7", "[CBC][MCT][128][DECRYPT][n7]") {
    const uint8_t KEY[] = { 0x5f,0x36,0xa0,0xee,0x8f,0x5b,0x09,0xb3,0x36,0x49,0x75,0xd8,0x05,0xa5,0xa6,0x79 };
    const uint8_t IV[] = { 0xaf,0x81,0x2b,0xf8,0x45,0x80,0x27,0x43,0xc3,0xd9,0x22,0x9d,0x84,0x0a,0x79,0xcd };
    const uint8_t PLAINTEXT[] = { 0xe4,0xb0,0x2a,0xff,0x90,0xe6,0x02,0x53,0xf4,0xab,0x88,0x8d,0xcd,0x44,0x33,0x46 };
    const uint8_t CIPHERTEXT[] = { 0x59,0xc4,0xd8,0x7b,0x6b,0xaf,0x63,0xdb,0xa7,0x2b,0xf1,0xcf,0x2e,0x18,0xc7,0xc1 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-8", "[CBC][MCT][128][DECRYPT][n8]") {
    const uint8_t KEY[] = { 0xbb,0x86,0x8a,0x11,0x1f,0xbd,0x0b,0xe0,0xc2,0xe2,0xfd,0x55,0xc8,0xe1,0x95,0x3f };
    const uint8_t IV[] = { 0xe4,0xb0,0x2a,0xff,0x90,0xe6,0x02,0x53,0xf4,0xab,0x88,0x8d,0xcd,0x44,0x33,0x46 };
    const uint8_t PLAINTEXT[] = { 0x4f,0x20,0x86,0x29,0x76,0xce,0x4b,0x54,0x3d,0x48,0x10,0x34,0x86,0x30,0x29,0x4c };
    const uint8_t CIPHERTEXT[] = { 0xd0,0xfa,0x28,0xc2,0xbd,0x2a,0xfa,0x59,0xc9,0xf6,0xc3,0x46,0x7c,0xc4,0x3e,0x77 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-9", "[CBC][MCT][128][DECRYPT][n9]") {
    const uint8_t KEY[] = { 0xf4,0xa6,0x0c,0x38,0x69,0x73,0x40,0xb4,0xff,0xaa,0xed,0x61,0x4e,0xd1,0xbc,0x73 };
    const uint8_t IV[] = { 0x4f,0x20,0x86,0x29,0x76,0xce,0x4b,0x54,0x3d,0x48,0x10,0x34,0x86,0x30,0x29,0x4c };
    const uint8_t PLAINTEXT[] = { 0x32,0x88,0xd6,0x16,0x10,0x59,0x8b,0x22,0xe3,0x3b,0xc6,0xee,0xac,0xd9,0x9b,0x01 };
    const uint8_t CIPHERTEXT[] = { 0x76,0xd9,0xeb,0x0e,0x1e,0x79,0x8a,0x59,0x30,0xc6,0x23,0xfa,0xe0,0xd5,0x88,0xca };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-10", "[CBC][MCT][128][DECRYPT][n10]") {
    const uint8_t KEY[] = { 0xc6,0x2e,0xda,0x2e,0x79,0x2a,0xcb,0x96,0x1c,0x91,0x2b,0x8f,0xe2,0x08,0x27,0x72 };
    const uint8_t IV[] = { 0x32,0x88,0xd6,0x16,0x10,0x59,0x8b,0x22,0xe3,0x3b,0xc6,0xee,0xac,0xd9,0x9b,0x01 };
    const uint8_t PLAINTEXT[] = { 0x02,0xa8,0xaa,0x4a,0x58,0x70,0x7d,0xf1,0xf7,0xea,0x8e,0x25,0xe6,0x3c,0x9c,0xbf };
    const uint8_t CIPHERTEXT[] = { 0xb6,0xc4,0xf8,0x36,0x31,0xba,0x2e,0x0e,0x28,0x03,0x1e,0xdb,0x41,0x7a,0x7b,0xf0 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-11", "[CBC][MCT][128][DECRYPT][n11]") {
    const uint8_t KEY[] = { 0xc4,0x86,0x70,0x64,0x21,0x5a,0xb6,0x67,0xeb,0x7b,0xa5,0xaa,0x04,0x34,0xbb,0xcd };
    const uint8_t IV[] = { 0x02,0xa8,0xaa,0x4a,0x58,0x70,0x7d,0xf1,0xf7,0xea,0x8e,0x25,0xe6,0x3c,0x9c,0xbf };
    const uint8_t PLAINTEXT[] = { 0x0b,0x52,0x24,0x81,0x8c,0xec,0xe3,0x8c,0x5d,0x64,0x4f,0x28,0xbe,0xae,0xb9,0x5c };
    const uint8_t CIPHERTEXT[] = { 0x0e,0x57,0xda,0x5d,0xcd,0x91,0x17,0x7e,0xe2,0xb6,0xae,0xcd,0xe8,0x7c,0xe6,0x1e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-12", "[CBC][MCT][128][DECRYPT][n12]") {
    const uint8_t KEY[] = { 0xcf,0xd4,0x54,0xe5,0xad,0xb6,0x55,0xeb,0xb6,0x1f,0xea,0x82,0xba,0x9a,0x02,0x91 };
    const uint8_t IV[] = { 0x0b,0x52,0x24,0x81,0x8c,0xec,0xe3,0x8c,0x5d,0x64,0x4f,0x28,0xbe,0xae,0xb9,0x5c };
    const uint8_t PLAINTEXT[] = { 0xb2,0xc4,0x40,0x02,0xb6,0x74,0x72,0x59,0x5d,0xae,0xfc,0x2e,0xda,0x15,0x46,0x74 };
    const uint8_t CIPHERTEXT[] = { 0x5f,0xd6,0x5d,0x26,0x8f,0x65,0x1c,0xb9,0xb2,0x35,0x16,0xe9,0x8c,0xa2,0xde,0x50 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-13", "[CBC][MCT][128][DECRYPT][n13]") {
    const uint8_t KEY[] = { 0x7d,0x10,0x14,0xe7,0x1b,0xc2,0x27,0xb2,0xeb,0xb1,0x16,0xac,0x60,0x8f,0x44,0xe5 };
    const uint8_t IV[] = { 0xb2,0xc4,0x40,0x02,0xb6,0x74,0x72,0x59,0x5d,0xae,0xfc,0x2e,0xda,0x15,0x46,0x74 };
    const uint8_t PLAINTEXT[] = { 0x35,0x17,0xc4,0x6b,0xb5,0xd6,0x72,0x91,0xc1,0x56,0x52,0x87,0xb3,0x73,0x64,0x75 };
    const uint8_t CIPHERTEXT[] = { 0x58,0xee,0xa0,0xf0,0xbc,0xdd,0x28,0x57,0x8a,0x14,0x0e,0x6c,0xa8,0x2c,0x0b,0x01 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-14", "[CBC][MCT][128][DECRYPT][n14]") {
    const uint8_t KEY[] = { 0x48,0x07,0xd0,0x8c,0xae,0x14,0x55,0x23,0x2a,0xe7,0x44,0x2b,0xd3,0xfc,0x20,0x90 };
    const uint8_t IV[] = { 0x35,0x17,0xc4,0x6b,0xb5,0xd6,0x72,0x91,0xc1,0x56,0x52,0x87,0xb3,0x73,0x64,0x75 };
    const uint8_t PLAINTEXT[] = { 0x64,0x4f,0xf5,0x3d,0x8b,0x03,0xbc,0x1d,0xd2,0x4f,0x1c,0x14,0x8e,0xf0,0x22,0xcb };
    const uint8_t CIPHERTEXT[] = { 0x70,0x43,0x50,0xa3,0x3a,0x39,0x2a,0x1c,0xa5,0xf1,0xf2,0x40,0x5c,0x81,0x12,0x59 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-15", "[CBC][MCT][128][DECRYPT][n15]") {
    const uint8_t KEY[] = { 0x2c,0x48,0x25,0xb1,0x25,0x17,0xe9,0x3e,0xf8,0xa8,0x58,0x3f,0x5d,0x0c,0x02,0x5b };
    const uint8_t IV[] = { 0x64,0x4f,0xf5,0x3d,0x8b,0x03,0xbc,0x1d,0xd2,0x4f,0x1c,0x14,0x8e,0xf0,0x22,0xcb };
    const uint8_t PLAINTEXT[] = { 0x34,0x21,0x51,0x15,0x52,0xa4,0xd3,0x50,0x20,0x6d,0xb3,0xb1,0x58,0x07,0x75,0x9d };
    const uint8_t CIPHERTEXT[] = { 0x61,0xae,0xe5,0x3a,0x19,0xda,0x9e,0x4d,0x27,0xed,0x20,0x3b,0x4f,0x20,0x49,0x14 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-16", "[CBC][MCT][128][DECRYPT][n16]") {
    const uint8_t KEY[] = { 0x18,0x69,0x74,0xa4,0x77,0xb3,0x3a,0x6e,0xd8,0xc5,0xeb,0x8e,0x05,0x0b,0x77,0xc6 };
    const uint8_t IV[] = { 0x34,0x21,0x51,0x15,0x52,0xa4,0xd3,0x50,0x20,0x6d,0xb3,0xb1,0x58,0x07,0x75,0x9d };
    const uint8_t PLAINTEXT[] = { 0x65,0xc0,0x6f,0xb3,0x32,0x32,0x6f,0x84,0x0a,0xb7,0x96,0x90,0x22,0x45,0xba,0x40 };
    const uint8_t CIPHERTEXT[] = { 0x64,0x6f,0x23,0x67,0xf2,0x5b,0x3c,0x9a,0x0c,0x3b,0x65,0x76,0xed,0xf7,0xe5,0xda };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-17", "[CBC][MCT][128][DECRYPT][n17]") {
    const uint8_t KEY[] = { 0x7d,0xa9,0x1b,0x17,0x45,0x81,0x55,0xea,0xd2,0x72,0x7d,0x1e,0x27,0x4e,0xcd,0x86 };
    const uint8_t IV[] = { 0x65,0xc0,0x6f,0xb3,0x32,0x32,0x6f,0x84,0x0a,0xb7,0x96,0x90,0x22,0x45,0xba,0x40 };
    const uint8_t PLAINTEXT[] = { 0x21,0x48,0x7a,0xde,0x72,0x19,0xaa,0xdc,0x33,0x5a,0x68,0x7c,0x55,0x46,0xdb,0xda };
    const uint8_t CIPHERTEXT[] = { 0x70,0x8d,0xbc,0xf7,0xc0,0x74,0xaa,0x12,0x0b,0xa0,0xf5,0x4b,0xf9,0x2f,0x16,0x08 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-18", "[CBC][MCT][128][DECRYPT][n18]") {
    const uint8_t KEY[] = { 0x5c,0xe1,0x61,0xc9,0x37,0x98,0xff,0x36,0xe1,0x28,0x15,0x62,0x72,0x08,0x16,0x5c };
    const uint8_t IV[] = { 0x21,0x48,0x7a,0xde,0x72,0x19,0xaa,0xdc,0x33,0x5a,0x68,0x7c,0x55,0x46,0xdb,0xda };
    const uint8_t PLAINTEXT[] = { 0xc3,0xba,0xe0,0x5d,0xe2,0x32,0x93,0xb5,0x31,0x25,0x96,0xb0,0x5f,0x2b,0x04,0xf0 };
    const uint8_t CIPHERTEXT[] = { 0xdd,0xf5,0x73,0x3d,0x05,0x1f,0xbf,0x37,0x1a,0xc1,0xed,0xb3,0xd8,0x76,0x7d,0xc5 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-19", "[CBC][MCT][128][DECRYPT][n19]") {
    const uint8_t KEY[] = { 0x9f,0x5b,0x81,0x94,0xd5,0xaa,0x6c,0x83,0xd0,0x0d,0x83,0xd2,0x2d,0x23,0x12,0xac };
    const uint8_t IV[] = { 0xc3,0xba,0xe0,0x5d,0xe2,0x32,0x93,0xb5,0x31,0x25,0x96,0xb0,0x5f,0x2b,0x04,0xf0 };
    const uint8_t PLAINTEXT[] = { 0x89,0x2e,0x1c,0xec,0x70,0xfc,0x3a,0x0c,0x9e,0x58,0xcb,0x7f,0x40,0x3a,0xdc,0x64 };
    const uint8_t CIPHERTEXT[] = { 0xf1,0x20,0x06,0xae,0x9a,0x34,0x5d,0xc6,0x5c,0x37,0x89,0x37,0x33,0x53,0x97,0x6f };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-20", "[CBC][MCT][128][DECRYPT][n20]") {
    const uint8_t KEY[] = { 0x16,0x75,0x9d,0x78,0xa5,0x56,0x56,0x8f,0x4e,0x55,0x48,0xad,0x6d,0x19,0xce,0xc8 };
    const uint8_t IV[] = { 0x89,0x2e,0x1c,0xec,0x70,0xfc,0x3a,0x0c,0x9e,0x58,0xcb,0x7f,0x40,0x3a,0xdc,0x64 };
    const uint8_t PLAINTEXT[] = { 0xc4,0x2d,0xc8,0x68,0x43,0x4e,0x49,0x78,0xaf,0xbf,0x1f,0x9f,0xe2,0xa4,0x18,0x32 };
    const uint8_t CIPHERTEXT[] = { 0x1f,0x75,0x82,0x63,0xd6,0x2e,0xb6,0xfd,0x7c,0x7a,0x56,0x66,0x62,0x0e,0x10,0x7c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-21", "[CBC][MCT][128][DECRYPT][n21]") {
    const uint8_t KEY[] = { 0xd2,0x58,0x55,0x10,0xe6,0x18,0x1f,0xf7,0xe1,0xea,0x57,0x32,0x8f,0xbd,0xd6,0xfa };
    const uint8_t IV[] = { 0xc4,0x2d,0xc8,0x68,0x43,0x4e,0x49,0x78,0xaf,0xbf,0x1f,0x9f,0xe2,0xa4,0x18,0x32 };
    const uint8_t PLAINTEXT[] = { 0x7d,0x68,0xbc,0xe7,0x38,0xca,0x71,0xf1,0x45,0xf4,0xff,0x87,0xef,0xeb,0xcb,0x14 };
    const uint8_t CIPHERTEXT[] = { 0x78,0x54,0xdd,0x5e,0xc9,0x27,0xf8,0x32,0x43,0xa7,0x25,0x47,0x94,0xb9,0x1b,0xcd };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-22", "[CBC][MCT][128][DECRYPT][n22]") {
    const uint8_t KEY[] = { 0xaf,0x30,0xe9,0xf7,0xde,0xd2,0x6e,0x06,0xa4,0x1e,0xa8,0xb5,0x60,0x56,0x1d,0xee };
    const uint8_t IV[] = { 0x7d,0x68,0xbc,0xe7,0x38,0xca,0x71,0xf1,0x45,0xf4,0xff,0x87,0xef,0xeb,0xcb,0x14 };
    const uint8_t PLAINTEXT[] = { 0x40,0x3c,0x77,0xd6,0x46,0x30,0xe6,0x32,0x8e,0xd3,0x05,0xdb,0xa9,0x1b,0x42,0x21 };
    const uint8_t CIPHERTEXT[] = { 0x91,0x30,0xd8,0x4e,0x31,0x7f,0x63,0x31,0x67,0xb1,0x49,0x3f,0x10,0x83,0x67,0x61 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-23", "[CBC][MCT][128][DECRYPT][n23]") {
    const uint8_t KEY[] = { 0xef,0x0c,0x9e,0x21,0x98,0xe2,0x88,0x34,0x2a,0xcd,0xad,0x6e,0xc9,0x4d,0x5f,0xcf };
    const uint8_t IV[] = { 0x40,0x3c,0x77,0xd6,0x46,0x30,0xe6,0x32,0x8e,0xd3,0x05,0xdb,0xa9,0x1b,0x42,0x21 };
    const uint8_t PLAINTEXT[] = { 0x06,0xa7,0x9b,0x34,0x11,0x6c,0xe0,0xed,0x1f,0x37,0x18,0x7a,0x0f,0x2d,0x15,0xc3 };
    const uint8_t CIPHERTEXT[] = { 0x75,0x17,0xea,0x8c,0x43,0xad,0xe8,0x10,0x2e,0x23,0x56,0xca,0x34,0xe7,0x18,0x6d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-24", "[CBC][MCT][128][DECRYPT][n24]") {
    const uint8_t KEY[] = { 0xe9,0xab,0x05,0x15,0x89,0x8e,0x68,0xd9,0x35,0xfa,0xb5,0x14,0xc6,0x60,0x4a,0x0c };
    const uint8_t IV[] = { 0x06,0xa7,0x9b,0x34,0x11,0x6c,0xe0,0xed,0x1f,0x37,0x18,0x7a,0x0f,0x2d,0x15,0xc3 };
    const uint8_t PLAINTEXT[] = { 0x3a,0x52,0x31,0x50,0x7e,0xa5,0x63,0xc0,0x4b,0x60,0x15,0x3f,0x75,0xe6,0xf8,0x58 };
    const uint8_t CIPHERTEXT[] = { 0xbc,0x65,0xe9,0xd2,0x21,0x7c,0xc8,0xd7,0xa4,0x9f,0x2c,0x98,0x81,0xeb,0x3d,0xbf };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-25", "[CBC][MCT][128][DECRYPT][n25]") {
    const uint8_t KEY[] = { 0xd3,0xf9,0x34,0x45,0xf7,0x2b,0x0b,0x19,0x7e,0x9a,0xa0,0x2b,0xb3,0x86,0xb2,0x54 };
    const uint8_t IV[] = { 0x3a,0x52,0x31,0x50,0x7e,0xa5,0x63,0xc0,0x4b,0x60,0x15,0x3f,0x75,0xe6,0xf8,0x58 };
    const uint8_t PLAINTEXT[] = { 0x0c,0x8c,0xc1,0xe5,0xc6,0x72,0x5c,0x99,0xc8,0x7d,0x54,0x0e,0xc2,0xad,0xd9,0x93 };
    const uint8_t CIPHERTEXT[] = { 0x3f,0xa0,0x3f,0xa0,0x88,0xb9,0xe7,0x78,0x14,0x74,0x18,0xf2,0x08,0xc8,0xfa,0x5d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-26", "[CBC][MCT][128][DECRYPT][n26]") {
    const uint8_t KEY[] = { 0xdf,0x75,0xf5,0xa0,0x31,0x59,0x57,0x80,0xb6,0xe7,0xf4,0x25,0x71,0x2b,0x6b,0xc7 };
    const uint8_t IV[] = { 0x0c,0x8c,0xc1,0xe5,0xc6,0x72,0x5c,0x99,0xc8,0x7d,0x54,0x0e,0xc2,0xad,0xd9,0x93 };
    const uint8_t PLAINTEXT[] = { 0x1b,0x09,0xf1,0xa9,0x02,0x0e,0x74,0x4e,0xdd,0x60,0x3b,0x17,0x7d,0x57,0xbd,0xb6 };
    const uint8_t CIPHERTEXT[] = { 0x19,0xc2,0x6c,0xbb,0x9d,0xd8,0x0d,0xdd,0x48,0xa7,0xdf,0x80,0x7d,0x7c,0x1a,0x0f };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-27", "[CBC][MCT][128][DECRYPT][n27]") {
    const uint8_t KEY[] = { 0xc4,0x7c,0x04,0x09,0x33,0x57,0x23,0xce,0x6b,0x87,0xcf,0x32,0x0c,0x7c,0xd6,0x71 };
    const uint8_t IV[] = { 0x1b,0x09,0xf1,0xa9,0x02,0x0e,0x74,0x4e,0xdd,0x60,0x3b,0x17,0x7d,0x57,0xbd,0xb6 };
    const uint8_t PLAINTEXT[] = { 0x07,0xe3,0x14,0x5f,0x0f,0x6d,0x3f,0xa6,0x1d,0xf6,0x6b,0xc7,0xa7,0x79,0x10,0x0e };
    const uint8_t CIPHERTEXT[] = { 0x69,0x9a,0x10,0x25,0x5b,0x89,0x8e,0xa7,0x2b,0xc6,0x3e,0x05,0x4d,0x10,0xd3,0x91 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-28", "[CBC][MCT][128][DECRYPT][n28]") {
    const uint8_t KEY[] = { 0xc3,0x9f,0x10,0x56,0x3c,0x3a,0x1c,0x68,0x76,0x71,0xa4,0xf5,0xab,0x05,0xc6,0x7f };
    const uint8_t IV[] = { 0x07,0xe3,0x14,0x5f,0x0f,0x6d,0x3f,0xa6,0x1d,0xf6,0x6b,0xc7,0xa7,0x79,0x10,0x0e };
    const uint8_t PLAINTEXT[] = { 0x64,0xe2,0x67,0x6b,0x56,0xa4,0x4a,0xf6,0xf8,0x49,0x99,0x04,0x48,0xdd,0xe2,0xe3 };
    const uint8_t CIPHERTEXT[] = { 0x26,0x4f,0x19,0x3f,0x18,0x17,0xf4,0x4a,0x3b,0x5d,0x89,0xdb,0x22,0xe6,0x0b,0xbc };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-29", "[CBC][MCT][128][DECRYPT][n29]") {
    const uint8_t KEY[] = { 0xa7,0x7d,0x77,0x3d,0x6a,0x9e,0x56,0x9e,0x8e,0x38,0x3d,0xf1,0xe3,0xd8,0x24,0x9c };
    const uint8_t IV[] = { 0x64,0xe2,0x67,0x6b,0x56,0xa4,0x4a,0xf6,0xf8,0x49,0x99,0x04,0x48,0xdd,0xe2,0xe3 };
    const uint8_t PLAINTEXT[] = { 0x27,0x86,0xa7,0xe5,0x33,0x3d,0x09,0x9c,0xc3,0x36,0x8c,0xd3,0x86,0x8e,0xa1,0x8d };
    const uint8_t CIPHERTEXT[] = { 0xb1,0x3e,0x63,0xb9,0x47,0x73,0x87,0x31,0xa4,0xb5,0x7f,0xe8,0x86,0x2a,0xa9,0x8a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-30", "[CBC][MCT][128][DECRYPT][n30]") {
    const uint8_t KEY[] = { 0x80,0xfb,0xd0,0xd8,0x59,0xa3,0x5f,0x02,0x4d,0x0e,0xb1,0x22,0x65,0x56,0x85,0x11 };
    const uint8_t IV[] = { 0x27,0x86,0xa7,0xe5,0x33,0x3d,0x09,0x9c,0xc3,0x36,0x8c,0xd3,0x86,0x8e,0xa1,0x8d };
    const uint8_t PLAINTEXT[] = { 0xab,0x61,0x2a,0x2a,0xb2,0xc8,0x00,0x6d,0x7d,0x32,0x39,0xf6,0xde,0x8a,0xac,0x55 };
    const uint8_t CIPHERTEXT[] = { 0x82,0xc3,0xce,0x7c,0x4d,0x6f,0xda,0x2a,0x26,0x49,0x27,0x87,0x9f,0x84,0x6a,0x75 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-31", "[CBC][MCT][128][DECRYPT][n31]") {
    const uint8_t KEY[] = { 0x2b,0x9a,0xfa,0xf2,0xeb,0x6b,0x5f,0x6f,0x30,0x3c,0x88,0xd4,0xbb,0xdc,0x29,0x44 };
    const uint8_t IV[] = { 0xab,0x61,0x2a,0x2a,0xb2,0xc8,0x00,0x6d,0x7d,0x32,0x39,0xf6,0xde,0x8a,0xac,0x55 };
    const uint8_t PLAINTEXT[] = { 0x65,0xb5,0xf3,0x6e,0x25,0x7d,0x67,0x09,0xd3,0xf7,0xb8,0x59,0x27,0xb8,0xfa,0x7d };
    const uint8_t CIPHERTEXT[] = { 0x82,0x68,0xa5,0x4d,0x0f,0x96,0x0c,0xd9,0x34,0x0e,0xdc,0xce,0x04,0x84,0x3c,0x82 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-32", "[CBC][MCT][128][DECRYPT][n32]") {
    const uint8_t KEY[] = { 0x4e,0x2f,0x09,0x9c,0xce,0x16,0x38,0x66,0xe3,0xcb,0x30,0x8d,0x9c,0x64,0xd3,0x39 };
    const uint8_t IV[] = { 0x65,0xb5,0xf3,0x6e,0x25,0x7d,0x67,0x09,0xd3,0xf7,0xb8,0x59,0x27,0xb8,0xfa,0x7d };
    const uint8_t PLAINTEXT[] = { 0x1e,0x94,0x16,0x82,0x59,0x2b,0x10,0x9f,0x4d,0x4c,0x9d,0x32,0xd1,0x29,0xc5,0x03 };
    const uint8_t CIPHERTEXT[] = { 0x24,0x27,0x1e,0x61,0xd2,0x06,0x1c,0xde,0x1c,0x76,0x65,0x08,0x70,0x89,0x0e,0x84 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-33", "[CBC][MCT][128][DECRYPT][n33]") {
    const uint8_t KEY[] = { 0x50,0xbb,0x1f,0x1e,0x97,0x3d,0x28,0xf9,0xae,0x87,0xad,0xbf,0x4d,0x4d,0x16,0x3a };
    const uint8_t IV[] = { 0x1e,0x94,0x16,0x82,0x59,0x2b,0x10,0x9f,0x4d,0x4c,0x9d,0x32,0xd1,0x29,0xc5,0x03 };
    const uint8_t PLAINTEXT[] = { 0x8a,0x35,0xe5,0x33,0x87,0xb2,0x6d,0x2e,0xeb,0xe4,0x30,0x40,0x1c,0x75,0xb4,0xd0 };
    const uint8_t CIPHERTEXT[] = { 0x47,0x73,0xba,0x50,0x07,0x69,0xa3,0xda,0x30,0x89,0x32,0x71,0xc5,0xa8,0xbe,0xed };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-34", "[CBC][MCT][128][DECRYPT][n34]") {
    const uint8_t KEY[] = { 0xda,0x8e,0xfa,0x2d,0x10,0x8f,0x45,0xd7,0x45,0x63,0x9d,0xff,0x51,0x38,0xa2,0xea };
    const uint8_t IV[] = { 0x8a,0x35,0xe5,0x33,0x87,0xb2,0x6d,0x2e,0xeb,0xe4,0x30,0x40,0x1c,0x75,0xb4,0xd0 };
    const uint8_t PLAINTEXT[] = { 0xd8,0xc6,0x47,0x38,0x83,0xef,0x7d,0x79,0x2f,0x0c,0xb9,0x5e,0xfc,0x61,0x2b,0x2e };
    const uint8_t CIPHERTEXT[] = { 0x24,0xf4,0xc4,0xc0,0x19,0x99,0x0d,0xe0,0x38,0x9c,0xee,0x5e,0xde,0x56,0xe3,0x4b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-35", "[CBC][MCT][128][DECRYPT][n35]") {
    const uint8_t KEY[] = { 0x02,0x48,0xbd,0x15,0x93,0x60,0x38,0xae,0x6a,0x6f,0x24,0xa1,0xad,0x59,0x89,0xc4 };
    const uint8_t IV[] = { 0xd8,0xc6,0x47,0x38,0x83,0xef,0x7d,0x79,0x2f,0x0c,0xb9,0x5e,0xfc,0x61,0x2b,0x2e };
    const uint8_t PLAINTEXT[] = { 0xd3,0x0a,0x61,0x50,0x3b,0x34,0x82,0xfe,0xe7,0xa6,0xff,0x96,0xc1,0x85,0xdf,0x95 };
    const uint8_t CIPHERTEXT[] = { 0xa9,0xf9,0x62,0xc5,0x2d,0xb2,0xc2,0x23,0x92,0x42,0x67,0x76,0x60,0xaa,0x42,0x92 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-36", "[CBC][MCT][128][DECRYPT][n36]") {
    const uint8_t KEY[] = { 0xd1,0x42,0xdc,0x45,0xa8,0x54,0xba,0x50,0x8d,0xc9,0xdb,0x37,0x6c,0xdc,0x56,0x51 };
    const uint8_t IV[] = { 0xd3,0x0a,0x61,0x50,0x3b,0x34,0x82,0xfe,0xe7,0xa6,0xff,0x96,0xc1,0x85,0xdf,0x95 };
    const uint8_t PLAINTEXT[] = { 0x35,0xc3,0x83,0x20,0x66,0x24,0x7f,0x1e,0xca,0x79,0x2c,0xd5,0xab,0x09,0x94,0x80 };
    const uint8_t CIPHERTEXT[] = { 0x68,0x3b,0xdd,0xc6,0x33,0x06,0x48,0x51,0x85,0xb5,0x50,0x95,0xbe,0x6c,0x12,0x62 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-37", "[CBC][MCT][128][DECRYPT][n37]") {
    const uint8_t KEY[] = { 0xe4,0x81,0x5f,0x65,0xce,0x70,0xc5,0x4e,0x47,0xb0,0xf7,0xe2,0xc7,0xd5,0xc2,0xd1 };
    const uint8_t IV[] = { 0x35,0xc3,0x83,0x20,0x66,0x24,0x7f,0x1e,0xca,0x79,0x2c,0xd5,0xab,0x09,0x94,0x80 };
    const uint8_t PLAINTEXT[] = { 0x17,0xae,0x4d,0xdf,0x59,0xb3,0x0e,0x46,0xc8,0x4e,0x65,0xd8,0xa2,0x24,0xbe,0x03 };
    const uint8_t CIPHERTEXT[] = { 0x61,0x8c,0x71,0x85,0x6b,0x4e,0x9e,0xb6,0x2b,0xf9,0x33,0x0d,0x61,0x09,0x5a,0xb2 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-38", "[CBC][MCT][128][DECRYPT][n38]") {
    const uint8_t KEY[] = { 0xf3,0x2f,0x12,0xba,0x97,0xc3,0xcb,0x08,0x8f,0xfe,0x92,0x3a,0x65,0xf1,0x7c,0xd2 };
    const uint8_t IV[] = { 0x17,0xae,0x4d,0xdf,0x59,0xb3,0x0e,0x46,0xc8,0x4e,0x65,0xd8,0xa2,0x24,0xbe,0x03 };
    const uint8_t PLAINTEXT[] = { 0xa2,0xf3,0x24,0x2e,0x26,0xd3,0x0f,0x46,0x7d,0x58,0xab,0xc1,0xba,0x68,0x8d,0x43 };
    const uint8_t CIPHERTEXT[] = { 0x95,0x36,0xe8,0x7c,0x5d,0x6c,0xb6,0x62,0x7e,0x46,0xef,0x2b,0x06,0x7e,0x9b,0x46 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-39", "[CBC][MCT][128][DECRYPT][n39]") {
    const uint8_t KEY[] = { 0x51,0xdc,0x36,0x94,0xb1,0x10,0xc4,0x4e,0xf2,0xa6,0x39,0xfb,0xdf,0x99,0xf1,0x91 };
    const uint8_t IV[] = { 0xa2,0xf3,0x24,0x2e,0x26,0xd3,0x0f,0x46,0x7d,0x58,0xab,0xc1,0xba,0x68,0x8d,0x43 };
    const uint8_t PLAINTEXT[] = { 0x25,0x52,0x9a,0xf0,0xaf,0x24,0xf5,0x38,0xd5,0x57,0x1d,0x43,0x19,0x14,0xcd,0xbc };
    const uint8_t CIPHERTEXT[] = { 0x40,0x30,0xdf,0x68,0x08,0x31,0x75,0x8e,0x38,0x58,0x1e,0x6d,0xb7,0x8d,0x58,0x06 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-40", "[CBC][MCT][128][DECRYPT][n40]") {
    const uint8_t KEY[] = { 0x74,0x8e,0xac,0x64,0x1e,0x34,0x31,0x76,0x27,0xf1,0x24,0xb8,0xc6,0x8d,0x3c,0x2d };
    const uint8_t IV[] = { 0x25,0x52,0x9a,0xf0,0xaf,0x24,0xf5,0x38,0xd5,0x57,0x1d,0x43,0x19,0x14,0xcd,0xbc };
    const uint8_t PLAINTEXT[] = { 0xd6,0xbf,0xc5,0xfc,0xfe,0x83,0xdb,0x2d,0x9a,0x8a,0x84,0xe8,0x88,0x1b,0xb8,0xe2 };
    const uint8_t CIPHERTEXT[] = { 0xe0,0xbe,0xf9,0x17,0xa2,0x56,0x21,0x13,0x8f,0x5b,0x44,0x4b,0x2c,0xe3,0x69,0x85 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-41", "[CBC][MCT][128][DECRYPT][n41]") {
    const uint8_t KEY[] = { 0xa2,0x31,0x69,0x98,0xe0,0xb7,0xea,0x5b,0xbd,0x7b,0xa0,0x50,0x4e,0x96,0x84,0xcf };
    const uint8_t IV[] = { 0xd6,0xbf,0xc5,0xfc,0xfe,0x83,0xdb,0x2d,0x9a,0x8a,0x84,0xe8,0x88,0x1b,0xb8,0xe2 };
    const uint8_t PLAINTEXT[] = { 0xe1,0x18,0xc7,0xbb,0x46,0x5a,0xa7,0xfe,0x8a,0xe3,0x1d,0xdc,0x04,0xa5,0x7c,0xd3 };
    const uint8_t CIPHERTEXT[] = { 0xee,0xd8,0xce,0x1b,0xab,0x9e,0x40,0x6a,0x12,0x91,0xaa,0x20,0xf3,0x8c,0x0a,0xbf };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-42", "[CBC][MCT][128][DECRYPT][n42]") {
    const uint8_t KEY[] = { 0x43,0x29,0xae,0x23,0xa6,0xed,0x4d,0xa5,0x37,0x98,0xbd,0x8c,0x4a,0x33,0xf8,0x1c };
    const uint8_t IV[] = { 0xe1,0x18,0xc7,0xbb,0x46,0x5a,0xa7,0xfe,0x8a,0xe3,0x1d,0xdc,0x04,0xa5,0x7c,0xd3 };
    const uint8_t PLAINTEXT[] = { 0xdb,0xf7,0xa6,0x77,0x38,0x5b,0xe8,0xbf,0x89,0xfd,0xd3,0xbd,0x1f,0x1f,0x54,0xc8 };
    const uint8_t CIPHERTEXT[] = { 0xbb,0xdc,0xbc,0xf7,0xe0,0x12,0x53,0xb4,0xec,0xd8,0x41,0x94,0x26,0x68,0x95,0xd6 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-43", "[CBC][MCT][128][DECRYPT][n43]") {
    const uint8_t KEY[] = { 0x98,0xde,0x08,0x54,0x9e,0xb6,0xa5,0x1a,0xbe,0x65,0x6e,0x31,0x55,0x2c,0xac,0xd4 };
    const uint8_t IV[] = { 0xdb,0xf7,0xa6,0x77,0x38,0x5b,0xe8,0xbf,0x89,0xfd,0xd3,0xbd,0x1f,0x1f,0x54,0xc8 };
    const uint8_t PLAINTEXT[] = { 0x2a,0x63,0x25,0x47,0x3b,0xa0,0x29,0xa4,0x4e,0xe8,0x35,0x4c,0x1b,0x3c,0xd5,0xd8 };
    const uint8_t CIPHERTEXT[] = { 0xce,0xaa,0x87,0xea,0x18,0xc7,0x34,0x47,0x15,0xc9,0xd0,0xf4,0x31,0x07,0x3e,0xc0 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-44", "[CBC][MCT][128][DECRYPT][n44]") {
    const uint8_t KEY[] = { 0xb2,0xbd,0x2d,0x13,0xa5,0x16,0x8c,0xbe,0xf0,0x8d,0x5b,0x7d,0x4e,0x10,0x79,0x0c };
    const uint8_t IV[] = { 0x2a,0x63,0x25,0x47,0x3b,0xa0,0x29,0xa4,0x4e,0xe8,0x35,0x4c,0x1b,0x3c,0xd5,0xd8 };
    const uint8_t PLAINTEXT[] = { 0x77,0x8c,0xb1,0xa5,0x3f,0x48,0x87,0x48,0xc7,0x58,0x2a,0xfd,0x9d,0xb7,0xc2,0x1f };
    const uint8_t CIPHERTEXT[] = { 0x0d,0xd9,0x3e,0x6b,0x01,0xef,0x7a,0x83,0x86,0x37,0x2e,0x64,0x6e,0xb6,0xfb,0x87 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-45", "[CBC][MCT][128][DECRYPT][n45]") {
    const uint8_t KEY[] = { 0xc5,0x31,0x9c,0xb6,0x9a,0x5e,0x0b,0xf6,0x37,0xd5,0x71,0x80,0xd3,0xa7,0xbb,0x13 };
    const uint8_t IV[] = { 0x77,0x8c,0xb1,0xa5,0x3f,0x48,0x87,0x48,0xc7,0x58,0x2a,0xfd,0x9d,0xb7,0xc2,0x1f };
    const uint8_t PLAINTEXT[] = { 0xd2,0x5d,0x1b,0x52,0xfb,0x06,0x7f,0xe5,0x99,0x7c,0xfc,0xc3,0xc4,0xb6,0x55,0xa2 };
    const uint8_t CIPHERTEXT[] = { 0xc8,0x7d,0x49,0x01,0x4e,0xfe,0xfc,0x19,0xb5,0xe2,0x3f,0x14,0xd4,0x1f,0x3d,0xbd };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-46", "[CBC][MCT][128][DECRYPT][n46]") {
    const uint8_t KEY[] = { 0x17,0x6c,0x87,0xe4,0x61,0x58,0x74,0x13,0xae,0xa9,0x8d,0x43,0x17,0x11,0xee,0xb1 };
    const uint8_t IV[] = { 0xd2,0x5d,0x1b,0x52,0xfb,0x06,0x7f,0xe5,0x99,0x7c,0xfc,0xc3,0xc4,0xb6,0x55,0xa2 };
    const uint8_t PLAINTEXT[] = { 0x34,0x68,0x76,0x74,0xac,0x07,0x6f,0xde,0x71,0x25,0x78,0x88,0x56,0x4c,0x63,0x16 };
    const uint8_t CIPHERTEXT[] = { 0x58,0x56,0xb5,0x66,0xcb,0xdd,0x91,0x3e,0x1f,0x7b,0x0c,0x4d,0x0c,0x5c,0x45,0x8e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-47", "[CBC][MCT][128][DECRYPT][n47]") {
    const uint8_t KEY[] = { 0x23,0x04,0xf1,0x90,0xcd,0x5f,0x1b,0xcd,0xdf,0x8c,0xf5,0xcb,0x41,0x5d,0x8d,0xa7 };
    const uint8_t IV[] = { 0x34,0x68,0x76,0x74,0xac,0x07,0x6f,0xde,0x71,0x25,0x78,0x88,0x56,0x4c,0x63,0x16 };
    const uint8_t PLAINTEXT[] = { 0x59,0x7e,0x7e,0xe9,0x36,0xd3,0x2e,0x92,0xa6,0x25,0x3a,0x27,0xa4,0xeb,0xe6,0x8a };
    const uint8_t CIPHERTEXT[] = { 0xa1,0xd7,0x8a,0xd4,0x73,0x41,0xbc,0xdf,0x23,0xc2,0x8f,0x40,0x87,0xc7,0x91,0x71 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-48", "[CBC][MCT][128][DECRYPT][n48]") {
    const uint8_t KEY[] = { 0x7a,0x7a,0x8f,0x79,0xfb,0x8c,0x35,0x5f,0x79,0xa9,0xcf,0xec,0xe5,0xb6,0x6b,0x2d };
    const uint8_t IV[] = { 0x59,0x7e,0x7e,0xe9,0x36,0xd3,0x2e,0x92,0xa6,0x25,0x3a,0x27,0xa4,0xeb,0xe6,0x8a };
    const uint8_t PLAINTEXT[] = { 0xe2,0x6d,0x1a,0x95,0xa8,0x3f,0x99,0xff,0x1a,0x17,0xf3,0x4c,0x6d,0xa1,0x74,0x92 };
    const uint8_t CIPHERTEXT[] = { 0x5a,0xa7,0xc8,0x5d,0x46,0xbe,0x7b,0x4a,0x20,0x3b,0x96,0xd5,0x92,0x49,0x7a,0xef };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-49", "[CBC][MCT][128][DECRYPT][n49]") {
    const uint8_t KEY[] = { 0x98,0x17,0x95,0xec,0x53,0xb3,0xac,0xa0,0x63,0xbe,0x3c,0xa0,0x88,0x17,0x1f,0xbf };
    const uint8_t IV[] = { 0xe2,0x6d,0x1a,0x95,0xa8,0x3f,0x99,0xff,0x1a,0x17,0xf3,0x4c,0x6d,0xa1,0x74,0x92 };
    const uint8_t PLAINTEXT[] = { 0x42,0xbf,0x21,0xef,0xbb,0x7e,0x11,0x9a,0x60,0x38,0xe7,0x6a,0xc7,0x48,0xcb,0xbb };
    const uint8_t CIPHERTEXT[] = { 0x63,0x5a,0x71,0x05,0x5e,0x05,0x45,0x9b,0xfd,0xb5,0x31,0x36,0x9a,0xc8,0x2f,0x42 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-50", "[CBC][MCT][128][DECRYPT][n50]") {
    const uint8_t KEY[] = { 0xda,0xa8,0xb4,0x03,0xe8,0xcd,0xbd,0x3a,0x03,0x86,0xdb,0xca,0x4f,0x5f,0xd4,0x04 };
    const uint8_t IV[] = { 0x42,0xbf,0x21,0xef,0xbb,0x7e,0x11,0x9a,0x60,0x38,0xe7,0x6a,0xc7,0x48,0xcb,0xbb };
    const uint8_t PLAINTEXT[] = { 0x52,0x99,0x0d,0x51,0xcb,0x26,0xc2,0xbf,0x44,0xba,0xf3,0x7e,0xd5,0x8a,0x76,0xc3 };
    const uint8_t CIPHERTEXT[] = { 0xdc,0x24,0xd8,0x56,0xdc,0xba,0x9e,0xb2,0xa8,0xfd,0x5e,0x51,0x14,0x10,0x2b,0xd0 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-51", "[CBC][MCT][128][DECRYPT][n51]") {
    const uint8_t KEY[] = { 0x88,0x31,0xb9,0x52,0x23,0xeb,0x7f,0x85,0x47,0x3c,0x28,0xb4,0x9a,0xd5,0xa2,0xc7 };
    const uint8_t IV[] = { 0x52,0x99,0x0d,0x51,0xcb,0x26,0xc2,0xbf,0x44,0xba,0xf3,0x7e,0xd5,0x8a,0x76,0xc3 };
    const uint8_t PLAINTEXT[] = { 0xac,0xb9,0x30,0x6d,0x5e,0x5f,0xfe,0xc5,0x5b,0x12,0x8d,0x8a,0xe6,0x88,0x76,0xe8 };
    const uint8_t CIPHERTEXT[] = { 0x84,0x99,0x28,0xac,0xd3,0x55,0xff,0x61,0xaa,0xc0,0xe9,0xca,0x85,0x2e,0xc6,0xad };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-52", "[CBC][MCT][128][DECRYPT][n52]") {
    const uint8_t KEY[] = { 0x24,0x88,0x89,0x3f,0x7d,0xb4,0x81,0x40,0x1c,0x2e,0xa5,0x3e,0x7c,0x5d,0xd4,0x2f };
    const uint8_t IV[] = { 0xac,0xb9,0x30,0x6d,0x5e,0x5f,0xfe,0xc5,0x5b,0x12,0x8d,0x8a,0xe6,0x88,0x76,0xe8 };
    const uint8_t PLAINTEXT[] = { 0x1f,0x6a,0xc3,0x41,0x3a,0x65,0x50,0x73,0xab,0x9b,0x5a,0x7d,0xf0,0xe8,0x04,0xf7 };
    const uint8_t CIPHERTEXT[] = { 0x35,0x72,0xa5,0xa1,0xa7,0xc9,0xf0,0x82,0x0b,0x0c,0x1c,0xe9,0xe3,0x89,0x26,0x8a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-53", "[CBC][MCT][128][DECRYPT][n53]") {
    const uint8_t KEY[] = { 0x3b,0xe2,0x4a,0x7e,0x47,0xd1,0xd1,0x33,0xb7,0xb5,0xff,0x43,0x8c,0xb5,0xd0,0xd8 };
    const uint8_t IV[] = { 0x1f,0x6a,0xc3,0x41,0x3a,0x65,0x50,0x73,0xab,0x9b,0x5a,0x7d,0xf0,0xe8,0x04,0xf7 };
    const uint8_t PLAINTEXT[] = { 0x20,0x7e,0xdc,0xcc,0x1b,0xb8,0x49,0x7b,0xc2,0xe9,0xd0,0x0d,0x33,0xd2,0x7d,0x3b };
    const uint8_t CIPHERTEXT[] = { 0xe0,0xd8,0xda,0x95,0xbb,0x35,0xd2,0x1b,0x31,0x5e,0x24,0x25,0x5c,0x47,0x14,0x4b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-54", "[CBC][MCT][128][DECRYPT][n54]") {
    const uint8_t KEY[] = { 0x1b,0x9c,0x96,0xb2,0x5c,0x69,0x98,0x48,0x75,0x5c,0x2f,0x4e,0xbf,0x67,0xad,0xe3 };
    const uint8_t IV[] = { 0x20,0x7e,0xdc,0xcc,0x1b,0xb8,0x49,0x7b,0xc2,0xe9,0xd0,0x0d,0x33,0xd2,0x7d,0x3b };
    const uint8_t PLAINTEXT[] = { 0x63,0x03,0xfb,0x3c,0x2c,0x75,0x8a,0x04,0x86,0x73,0xa2,0xf0,0x3c,0x93,0xed,0xb4 };
    const uint8_t CIPHERTEXT[] = { 0x66,0xbc,0xf1,0xcf,0x97,0x5f,0x2a,0x04,0x43,0xc8,0x40,0xe0,0x0e,0x3c,0x74,0x6a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-55", "[CBC][MCT][128][DECRYPT][n55]") {
    const uint8_t KEY[] = { 0x78,0x9f,0x6d,0x8e,0x70,0x1c,0x12,0x4c,0xf3,0x2f,0x8d,0xbe,0x83,0xf4,0x40,0x57 };
    const uint8_t IV[] = { 0x63,0x03,0xfb,0x3c,0x2c,0x75,0x8a,0x04,0x86,0x73,0xa2,0xf0,0x3c,0x93,0xed,0xb4 };
    const uint8_t PLAINTEXT[] = { 0xd1,0xfc,0xfc,0x18,0xbe,0x2a,0x7f,0x3b,0xc8,0xba,0x51,0xfb,0xb1,0x96,0xcb,0xbb };
    const uint8_t CIPHERTEXT[] = { 0x2b,0x20,0x9e,0xbd,0xb1,0x74,0xa9,0xe8,0xbc,0x1b,0x2a,0xe4,0x32,0xc4,0x6d,0x2c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-56", "[CBC][MCT][128][DECRYPT][n56]") {
    const uint8_t KEY[] = { 0xa9,0x63,0x91,0x96,0xce,0x36,0x6d,0x77,0x3b,0x95,0xdc,0x45,0x32,0x62,0x8b,0xec };
    const uint8_t IV[] = { 0xd1,0xfc,0xfc,0x18,0xbe,0x2a,0x7f,0x3b,0xc8,0xba,0x51,0xfb,0xb1,0x96,0xcb,0xbb };
    const uint8_t PLAINTEXT[] = { 0x6d,0x4a,0xfc,0xe3,0x31,0x26,0x72,0x9f,0xa4,0xfc,0x9d,0xc1,0x9a,0x66,0x62,0x90 };
    const uint8_t CIPHERTEXT[] = { 0xeb,0x8e,0x77,0x23,0x3a,0xbb,0xcc,0x20,0xa0,0x2a,0xa9,0x3f,0xc9,0x1f,0x7d,0x40 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-57", "[CBC][MCT][128][DECRYPT][n57]") {
    const uint8_t KEY[] = { 0xc4,0x29,0x6d,0x75,0xff,0x10,0x1f,0xe8,0x9f,0x69,0x41,0x84,0xa8,0x04,0xe9,0x7c };
    const uint8_t IV[] = { 0x6d,0x4a,0xfc,0xe3,0x31,0x26,0x72,0x9f,0xa4,0xfc,0x9d,0xc1,0x9a,0x66,0x62,0x90 };
    const uint8_t PLAINTEXT[] = { 0xd0,0xe0,0x49,0xb2,0x0d,0x9a,0xe5,0xeb,0x9a,0x3c,0x33,0xbe,0x19,0x07,0x19,0x76 };
    const uint8_t CIPHERTEXT[] = { 0x03,0x16,0x9a,0x39,0xcf,0x00,0xb6,0xa0,0xbd,0xb6,0x11,0x65,0x8a,0xe4,0x9b,0x9b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-58", "[CBC][MCT][128][DECRYPT][n58]") {
    const uint8_t KEY[] = { 0x14,0xc9,0x24,0xc7,0xf2,0x8a,0xfa,0x03,0x05,0x55,0x72,0x3a,0xb1,0x03,0xf0,0x0a };
    const uint8_t IV[] = { 0xd0,0xe0,0x49,0xb2,0x0d,0x9a,0xe5,0xeb,0x9a,0x3c,0x33,0xbe,0x19,0x07,0x19,0x76 };
    const uint8_t PLAINTEXT[] = { 0x8c,0x2b,0x98,0x24,0x49,0xb1,0x3b,0x9a,0x5c,0x93,0x47,0x45,0xed,0xea,0xce,0x59 };
    const uint8_t CIPHERTEXT[] = { 0x9d,0xad,0x2b,0x5e,0x10,0xb7,0x42,0x2e,0xd0,0x3a,0xcc,0x02,0x62,0x6b,0x17,0xa9 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-59", "[CBC][MCT][128][DECRYPT][n59]") {
    const uint8_t KEY[] = { 0x98,0xe2,0xbc,0xe3,0xbb,0x3b,0xc1,0x99,0x59,0xc6,0x35,0x7f,0x5c,0xe9,0x3e,0x53 };
    const uint8_t IV[] = { 0x8c,0x2b,0x98,0x24,0x49,0xb1,0x3b,0x9a,0x5c,0x93,0x47,0x45,0xed,0xea,0xce,0x59 };
    const uint8_t PLAINTEXT[] = { 0x11,0xff,0x2e,0xcc,0xf5,0x75,0x79,0x02,0x91,0x37,0x71,0x7b,0x1b,0x07,0x43,0x3c };
    const uint8_t CIPHERTEXT[] = { 0x65,0x31,0x93,0xda,0x38,0x0f,0x3c,0xb6,0xae,0x9d,0x92,0x5d,0x70,0x66,0xc5,0x71 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-60", "[CBC][MCT][128][DECRYPT][n60]") {
    const uint8_t KEY[] = { 0x89,0x1d,0x92,0x2f,0x4e,0x4e,0xb8,0x9b,0xc8,0xf1,0x44,0x04,0x47,0xee,0x7d,0x6f };
    const uint8_t IV[] = { 0x11,0xff,0x2e,0xcc,0xf5,0x75,0x79,0x02,0x91,0x37,0x71,0x7b,0x1b,0x07,0x43,0x3c };
    const uint8_t PLAINTEXT[] = { 0x1f,0x81,0xe5,0x71,0x0c,0x8c,0xd2,0xbf,0x8b,0x02,0xbb,0x18,0xea,0xc7,0x4f,0x5a };
    const uint8_t CIPHERTEXT[] = { 0x56,0xd3,0x7e,0x16,0xfc,0xa9,0xf7,0x62,0x79,0x54,0xbb,0x20,0x9f,0x76,0xfc,0x7c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-61", "[CBC][MCT][128][DECRYPT][n61]") {
    const uint8_t KEY[] = { 0x96,0x9c,0x77,0x5e,0x42,0xc2,0x6a,0x24,0x43,0xf3,0xff,0x1c,0xad,0x29,0x32,0x35 };
    const uint8_t IV[] = { 0x1f,0x81,0xe5,0x71,0x0c,0x8c,0xd2,0xbf,0x8b,0x02,0xbb,0x18,0xea,0xc7,0x4f,0x5a };
    const uint8_t PLAINTEXT[] = { 0xbe,0xcc,0x4f,0x2d,0x78,0xcf,0x02,0x8b,0x60,0xae,0x80,0x93,0x5e,0xef,0x9b,0x56 };
    const uint8_t CIPHERTEXT[] = { 0xef,0xa8,0xa3,0x9e,0x92,0xeb,0xb2,0x32,0xba,0x66,0x66,0x90,0x52,0xff,0x98,0x98 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-62", "[CBC][MCT][128][DECRYPT][n62]") {
    const uint8_t KEY[] = { 0x28,0x50,0x38,0x73,0x3a,0x0d,0x68,0xaf,0x23,0x5d,0x7f,0x8f,0xf3,0xc6,0xa9,0x63 };
    const uint8_t IV[] = { 0xbe,0xcc,0x4f,0x2d,0x78,0xcf,0x02,0x8b,0x60,0xae,0x80,0x93,0x5e,0xef,0x9b,0x56 };
    const uint8_t PLAINTEXT[] = { 0x7f,0x32,0x99,0xe3,0x95,0xe3,0x35,0xbc,0x99,0x12,0x7e,0x39,0x42,0xd6,0xa0,0xda };
    const uint8_t CIPHERTEXT[] = { 0xba,0x34,0x2a,0x16,0x60,0x5b,0x2d,0x28,0x0f,0x4f,0xc8,0x2f,0xcd,0x75,0xf2,0xfc };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-63", "[CBC][MCT][128][DECRYPT][n63]") {
    const uint8_t KEY[] = { 0x57,0x62,0xa1,0x90,0xaf,0xee,0x5d,0x13,0xba,0x4f,0x01,0xb6,0xb1,0x10,0x09,0xb9 };
    const uint8_t IV[] = { 0x7f,0x32,0x99,0xe3,0x95,0xe3,0x35,0xbc,0x99,0x12,0x7e,0x39,0x42,0xd6,0xa0,0xda };
    const uint8_t PLAINTEXT[] = { 0x9d,0x76,0xb2,0x0b,0x25,0x44,0xab,0xd3,0x63,0x5a,0x3c,0xe9,0x6e,0x98,0xf6,0xe7 };
    const uint8_t CIPHERTEXT[] = { 0xc8,0xca,0xa0,0x32,0x24,0x99,0xe2,0x6c,0x63,0x37,0xcf,0x6d,0x65,0x7f,0x6e,0xa5 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-64", "[CBC][MCT][128][DECRYPT][n64]") {
    const uint8_t KEY[] = { 0xca,0x14,0x13,0x9b,0x8a,0xaa,0xf6,0xc0,0xd9,0x15,0x3d,0x5f,0xdf,0x88,0xff,0x5e };
    const uint8_t IV[] = { 0x9d,0x76,0xb2,0x0b,0x25,0x44,0xab,0xd3,0x63,0x5a,0x3c,0xe9,0x6e,0x98,0xf6,0xe7 };
    const uint8_t PLAINTEXT[] = { 0xec,0x0b,0x90,0xa2,0x5f,0xf3,0x2c,0xeb,0x06,0xe1,0x93,0x74,0xca,0xfa,0xea,0x15 };
    const uint8_t CIPHERTEXT[] = { 0xd1,0x2d,0x1b,0xae,0x16,0x78,0x9b,0x8f,0x04,0xe7,0x30,0xa4,0xa4,0x26,0x35,0xa4 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-65", "[CBC][MCT][128][DECRYPT][n65]") {
    const uint8_t KEY[] = { 0x26,0x1f,0x83,0x39,0xd5,0x59,0xda,0x2b,0xdf,0xf4,0xae,0x2b,0x15,0x72,0x15,0x4b };
    const uint8_t IV[] = { 0xec,0x0b,0x90,0xa2,0x5f,0xf3,0x2c,0xeb,0x06,0xe1,0x93,0x74,0xca,0xfa,0xea,0x15 };
    const uint8_t PLAINTEXT[] = { 0xe2,0xf4,0x8d,0xb4,0xbe,0x4e,0xee,0xd0,0x38,0x4d,0xdb,0xb0,0x7e,0xb6,0x63,0xc1 };
    const uint8_t CIPHERTEXT[] = { 0x75,0x0b,0xe0,0xfb,0xcc,0x11,0x85,0x41,0x50,0xec,0x57,0x8f,0x05,0xfa,0x01,0xcb };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-66", "[CBC][MCT][128][DECRYPT][n66]") {
    const uint8_t KEY[] = { 0xc4,0xeb,0x0e,0x8d,0x6b,0x17,0x34,0xfb,0xe7,0xb9,0x75,0x9b,0x6b,0xc4,0x76,0x8a };
    const uint8_t IV[] = { 0xe2,0xf4,0x8d,0xb4,0xbe,0x4e,0xee,0xd0,0x38,0x4d,0xdb,0xb0,0x7e,0xb6,0x63,0xc1 };
    const uint8_t PLAINTEXT[] = { 0x46,0x3c,0x08,0x13,0xd0,0x56,0x50,0xfb,0x31,0xfd,0xc4,0x31,0x2e,0x6d,0x5e,0x73 };
    const uint8_t CIPHERTEXT[] = { 0x84,0xa6,0x63,0xaa,0xa1,0x87,0x76,0x1b,0x9a,0x2b,0xaa,0x50,0xff,0x60,0xc1,0x15 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-67", "[CBC][MCT][128][DECRYPT][n67]") {
    const uint8_t KEY[] = { 0x82,0xd7,0x06,0x9e,0xbb,0x41,0x64,0x00,0xd6,0x44,0xb1,0xaa,0x45,0xa9,0x28,0xf9 };
    const uint8_t IV[] = { 0x46,0x3c,0x08,0x13,0xd0,0x56,0x50,0xfb,0x31,0xfd,0xc4,0x31,0x2e,0x6d,0x5e,0x73 };
    const uint8_t PLAINTEXT[] = { 0x4e,0x32,0x03,0xa8,0xa8,0x0a,0xa7,0xca,0x55,0x0f,0x78,0xc9,0x2b,0x38,0xaf,0x22 };
    const uint8_t CIPHERTEXT[] = { 0xd3,0xf4,0x21,0xef,0xc3,0x70,0x4f,0x69,0x65,0xd6,0x90,0xf0,0xb7,0xa4,0x94,0x13 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-68", "[CBC][MCT][128][DECRYPT][n68]") {
    const uint8_t KEY[] = { 0xcc,0xe5,0x05,0x36,0x13,0x4b,0xc3,0xca,0x83,0x4b,0xc9,0x63,0x6e,0x91,0x87,0xdb };
    const uint8_t IV[] = { 0x4e,0x32,0x03,0xa8,0xa8,0x0a,0xa7,0xca,0x55,0x0f,0x78,0xc9,0x2b,0x38,0xaf,0x22 };
    const uint8_t PLAINTEXT[] = { 0xc8,0xc3,0x7d,0xdb,0xce,0x6e,0x1b,0x36,0x55,0x1c,0x8c,0xf0,0x2b,0xe1,0x38,0x41 };
    const uint8_t CIPHERTEXT[] = { 0xb6,0x8a,0x3d,0x58,0x31,0x90,0xad,0xb8,0xc1,0x19,0x7a,0x8e,0x41,0xf1,0xc5,0xf9 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-69", "[CBC][MCT][128][DECRYPT][n69]") {
    const uint8_t KEY[] = { 0x04,0x26,0x78,0xed,0xdd,0x25,0xd8,0xfc,0xd6,0x57,0x45,0x93,0x45,0x70,0xbf,0x9a };
    const uint8_t IV[] = { 0xc8,0xc3,0x7d,0xdb,0xce,0x6e,0x1b,0x36,0x55,0x1c,0x8c,0xf0,0x2b,0xe1,0x38,0x41 };
    const uint8_t PLAINTEXT[] = { 0x08,0xd9,0x56,0x66,0xfb,0x0d,0xd8,0x1e,0xfb,0x1b,0x80,0x12,0x32,0xfe,0x6c,0xe4 };
    const uint8_t CIPHERTEXT[] = { 0xe5,0xe1,0x60,0x4f,0x41,0x06,0xa4,0x79,0xf7,0x5a,0xd8,0x84,0x0d,0x19,0x61,0x89 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-70", "[CBC][MCT][128][DECRYPT][n70]") {
    const uint8_t KEY[] = { 0x0c,0xff,0x2e,0x8b,0x26,0x28,0x00,0xe2,0x2d,0x4c,0xc5,0x81,0x77,0x8e,0xd3,0x7e };
    const uint8_t IV[] = { 0x08,0xd9,0x56,0x66,0xfb,0x0d,0xd8,0x1e,0xfb,0x1b,0x80,0x12,0x32,0xfe,0x6c,0xe4 };
    const uint8_t PLAINTEXT[] = { 0x66,0xb9,0xdc,0x4f,0x8f,0x07,0x6e,0x7b,0xfc,0xef,0xf8,0x87,0xba,0x70,0xc6,0x2c };
    const uint8_t CIPHERTEXT[] = { 0x05,0x4e,0x72,0x93,0x4e,0x3d,0xfd,0x33,0x65,0x9d,0xf5,0x30,0x70,0xa6,0x8d,0xa6 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-71", "[CBC][MCT][128][DECRYPT][n71]") {
    const uint8_t KEY[] = { 0x6a,0x46,0xf2,0xc4,0xa9,0x2f,0x6e,0x99,0xd1,0xa3,0x3d,0x06,0xcd,0xfe,0x15,0x52 };
    const uint8_t IV[] = { 0x66,0xb9,0xdc,0x4f,0x8f,0x07,0x6e,0x7b,0xfc,0xef,0xf8,0x87,0xba,0x70,0xc6,0x2c };
    const uint8_t PLAINTEXT[] = { 0x77,0x02,0x49,0x2b,0x61,0xa3,0x6a,0x1c,0x45,0xfd,0x61,0x20,0xec,0xf8,0x01,0xd1 };
    const uint8_t CIPHERTEXT[] = { 0xdc,0x1d,0x60,0x9b,0xa5,0x9a,0x90,0x18,0xf1,0x52,0x14,0xa8,0x1b,0xce,0x95,0x45 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-72", "[CBC][MCT][128][DECRYPT][n72]") {
    const uint8_t KEY[] = { 0x1d,0x44,0xbb,0xef,0xc8,0x8c,0x04,0x85,0x94,0x5e,0x5c,0x26,0x21,0x06,0x14,0x83 };
    const uint8_t IV[] = { 0x77,0x02,0x49,0x2b,0x61,0xa3,0x6a,0x1c,0x45,0xfd,0x61,0x20,0xec,0xf8,0x01,0xd1 };
    const uint8_t PLAINTEXT[] = { 0xc8,0x9b,0x1c,0x34,0x8f,0xb7,0x41,0xdd,0x34,0x7c,0xb1,0x6e,0x96,0x74,0xb8,0x54 };
    const uint8_t CIPHERTEXT[] = { 0x29,0x1c,0x77,0x2f,0xca,0xde,0x1b,0x9d,0x93,0xe5,0x31,0x9a,0x99,0xa1,0x00,0xd5 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-73", "[CBC][MCT][128][DECRYPT][n73]") {
    const uint8_t KEY[] = { 0xd5,0xdf,0xa7,0xdb,0x47,0x3b,0x45,0x58,0xa0,0x22,0xed,0x48,0xb7,0x72,0xac,0xd7 };
    const uint8_t IV[] = { 0xc8,0x9b,0x1c,0x34,0x8f,0xb7,0x41,0xdd,0x34,0x7c,0xb1,0x6e,0x96,0x74,0xb8,0x54 };
    const uint8_t PLAINTEXT[] = { 0x46,0x1f,0xe7,0x28,0xf4,0xda,0xca,0xad,0xca,0x23,0xb5,0x3e,0x0f,0x57,0xac,0xd3 };
    const uint8_t CIPHERTEXT[] = { 0x6e,0xc3,0x5b,0x8b,0x75,0x67,0x1c,0x81,0x13,0xc0,0x3a,0x86,0x3d,0xb7,0xef,0x66 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-74", "[CBC][MCT][128][DECRYPT][n74]") {
    const uint8_t KEY[] = { 0x93,0xc0,0x40,0xf3,0xb3,0xe1,0x8f,0xf5,0x6a,0x01,0x58,0x76,0xb8,0x25,0x00,0x04 };
    const uint8_t IV[] = { 0x46,0x1f,0xe7,0x28,0xf4,0xda,0xca,0xad,0xca,0x23,0xb5,0x3e,0x0f,0x57,0xac,0xd3 };
    const uint8_t PLAINTEXT[] = { 0x3a,0x67,0x24,0x6e,0x3e,0xfa,0x50,0x11,0xb4,0x37,0x5c,0x1f,0x7a,0x38,0xfe,0xaa };
    const uint8_t CIPHERTEXT[] = { 0xaa,0xf8,0xfc,0x40,0xbf,0xb2,0xa2,0xc4,0xd2,0xa8,0x7f,0xa7,0x22,0x49,0xec,0xa7 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-75", "[CBC][MCT][128][DECRYPT][n75]") {
    const uint8_t KEY[] = { 0xa9,0xa7,0x64,0x9d,0x8d,0x1b,0xdf,0xe4,0xde,0x36,0x04,0x69,0xc2,0x1d,0xfe,0xae };
    const uint8_t IV[] = { 0x3a,0x67,0x24,0x6e,0x3e,0xfa,0x50,0x11,0xb4,0x37,0x5c,0x1f,0x7a,0x38,0xfe,0xaa };
    const uint8_t PLAINTEXT[] = { 0x6c,0x52,0xab,0x94,0x07,0xd1,0xff,0xeb,0x14,0x01,0xa3,0xe8,0xa9,0xaf,0x25,0x62 };
    const uint8_t CIPHERTEXT[] = { 0x85,0x57,0x89,0x2b,0xf6,0xa4,0x75,0x05,0x41,0xdc,0xf7,0x71,0xe7,0x1d,0x7f,0xc7 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-76", "[CBC][MCT][128][DECRYPT][n76]") {
    const uint8_t KEY[] = { 0xc5,0xf5,0xcf,0x09,0x8a,0xca,0x20,0x0f,0xca,0x37,0xa7,0x81,0x6b,0xb2,0xdb,0xcc };
    const uint8_t IV[] = { 0x6c,0x52,0xab,0x94,0x07,0xd1,0xff,0xeb,0x14,0x01,0xa3,0xe8,0xa9,0xaf,0x25,0x62 };
    const uint8_t PLAINTEXT[] = { 0xd0,0xff,0xa3,0x84,0x65,0x71,0x9b,0x43,0xdc,0x03,0xfd,0x04,0xf5,0x93,0xef,0x3e };
    const uint8_t CIPHERTEXT[] = { 0xd3,0xc9,0x48,0x98,0xb3,0x15,0x59,0xc2,0x33,0x08,0xfa,0xf2,0xd8,0x40,0xcc,0x18 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-77", "[CBC][MCT][128][DECRYPT][n77]") {
    const uint8_t KEY[] = { 0x15,0x0a,0x6c,0x8d,0xef,0xbb,0xbb,0x4c,0x16,0x34,0x5a,0x85,0x9e,0x21,0x34,0xf2 };
    const uint8_t IV[] = { 0xd0,0xff,0xa3,0x84,0x65,0x71,0x9b,0x43,0xdc,0x03,0xfd,0x04,0xf5,0x93,0xef,0x3e };
    const uint8_t PLAINTEXT[] = { 0xa5,0xb8,0xec,0x0a,0xb1,0x44,0x6d,0xff,0x7c,0xa6,0x5e,0xef,0xde,0xcd,0xa5,0x43 };
    const uint8_t CIPHERTEXT[] = { 0x77,0x64,0x55,0xc8,0xf7,0xf9,0xe5,0x21,0x31,0x47,0xcd,0xbc,0xf8,0x1a,0x9c,0x29 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-78", "[CBC][MCT][128][DECRYPT][n78]") {
    const uint8_t KEY[] = { 0xb0,0xb2,0x80,0x87,0x5e,0xff,0xd6,0xb3,0x6a,0x92,0x04,0x6a,0x40,0xec,0x91,0xb1 };
    const uint8_t IV[] = { 0xa5,0xb8,0xec,0x0a,0xb1,0x44,0x6d,0xff,0x7c,0xa6,0x5e,0xef,0xde,0xcd,0xa5,0x43 };
    const uint8_t PLAINTEXT[] = { 0x4f,0x87,0xbc,0xd1,0x74,0x90,0x0c,0x60,0x36,0x0e,0xcc,0x2a,0xad,0xbd,0x2e,0x3a };
    const uint8_t CIPHERTEXT[] = { 0x55,0xdd,0x71,0xef,0x65,0xc6,0xd4,0x54,0xf4,0x83,0x88,0x16,0xc5,0xfa,0x73,0xc9 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-79", "[CBC][MCT][128][DECRYPT][n79]") {
    const uint8_t KEY[] = { 0xff,0x35,0x3c,0x56,0x2a,0x6f,0xda,0xd3,0x5c,0x9c,0xc8,0x40,0xed,0x51,0xbf,0x8b };
    const uint8_t IV[] = { 0x4f,0x87,0xbc,0xd1,0x74,0x90,0x0c,0x60,0x36,0x0e,0xcc,0x2a,0xad,0xbd,0x2e,0x3a };
    const uint8_t PLAINTEXT[] = { 0x1b,0xf0,0x5a,0xb2,0x3b,0xad,0x33,0x8e,0xcc,0xae,0xf6,0x61,0x47,0x2c,0x08,0x8e };
    const uint8_t CIPHERTEXT[] = { 0xba,0xc4,0xcb,0x5f,0x9d,0x60,0x10,0x07,0xb7,0x3a,0xc6,0x87,0x32,0x38,0x40,0x9a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-80", "[CBC][MCT][128][DECRYPT][n80]") {
    const uint8_t KEY[] = { 0xe4,0xc5,0x66,0xe4,0x11,0xc2,0xe9,0x5d,0x90,0x32,0x3e,0x21,0xaa,0x7d,0xb7,0x05 };
    const uint8_t IV[] = { 0x1b,0xf0,0x5a,0xb2,0x3b,0xad,0x33,0x8e,0xcc,0xae,0xf6,0x61,0x47,0x2c,0x08,0x8e };
    const uint8_t PLAINTEXT[] = { 0xce,0x04,0x8f,0x07,0xa6,0x6f,0xfe,0x1e,0x4a,0x76,0x7b,0xd4,0xc0,0xf0,0x40,0x5b };
    const uint8_t CIPHERTEXT[] = { 0x7f,0xd2,0x73,0xe7,0x3a,0x9e,0xd0,0x06,0x21,0xef,0x61,0xb2,0xef,0xfc,0x50,0x55 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-81", "[CBC][MCT][128][DECRYPT][n81]") {
    const uint8_t KEY[] = { 0x2a,0xc1,0xe9,0xe3,0xb7,0xad,0x17,0x43,0xda,0x44,0x45,0xf5,0x6a,0x8d,0xf7,0x5e };
    const uint8_t IV[] = { 0xce,0x04,0x8f,0x07,0xa6,0x6f,0xfe,0x1e,0x4a,0x76,0x7b,0xd4,0xc0,0xf0,0x40,0x5b };
    const uint8_t PLAINTEXT[] = { 0x3a,0x74,0x31,0x51,0x16,0x6f,0xef,0x45,0xf3,0xd3,0x87,0x7c,0x30,0x7b,0x7c,0x35 };
    const uint8_t CIPHERTEXT[] = { 0x30,0xc5,0xa2,0x03,0x49,0x1f,0x12,0x1d,0x40,0x3a,0x65,0xa2,0x88,0x9f,0x46,0x07 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-82", "[CBC][MCT][128][DECRYPT][n82]") {
    const uint8_t KEY[] = { 0x10,0xb5,0xd8,0xb2,0xa1,0xc2,0xf8,0x06,0x29,0x97,0xc2,0x89,0x5a,0xf6,0x8b,0x6b };
    const uint8_t IV[] = { 0x3a,0x74,0x31,0x51,0x16,0x6f,0xef,0x45,0xf3,0xd3,0x87,0x7c,0x30,0x7b,0x7c,0x35 };
    const uint8_t PLAINTEXT[] = { 0x3d,0xdd,0x0f,0x56,0x6f,0xb6,0x0c,0x1a,0x98,0xc0,0xb5,0xfe,0x10,0xf8,0x70,0x9b };
    const uint8_t CIPHERTEXT[] = { 0x0b,0xec,0x16,0x48,0xfd,0x76,0xd5,0xe5,0x19,0x1b,0x28,0x3c,0x8e,0x1a,0x28,0xad };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-83", "[CBC][MCT][128][DECRYPT][n83]") {
    const uint8_t KEY[] = { 0x2d,0x68,0xd7,0xe4,0xce,0x74,0xf4,0x1c,0xb1,0x57,0x77,0x77,0x4a,0x0e,0xfb,0xf0 };
    const uint8_t IV[] = { 0x3d,0xdd,0x0f,0x56,0x6f,0xb6,0x0c,0x1a,0x98,0xc0,0xb5,0xfe,0x10,0xf8,0x70,0x9b };
    const uint8_t PLAINTEXT[] = { 0x2a,0x75,0xe3,0x0b,0xfb,0x46,0xac,0x36,0xbc,0xdc,0x1c,0x3d,0x47,0x3f,0x9d,0xa3 };
    const uint8_t CIPHERTEXT[] = { 0xf6,0x23,0xe0,0x8c,0x92,0x9a,0x8e,0xe2,0x38,0x37,0x35,0x5d,0xa4,0x1d,0xc9,0xd6 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-84", "[CBC][MCT][128][DECRYPT][n84]") {
    const uint8_t KEY[] = { 0x07,0x1d,0x34,0xef,0x35,0x32,0x58,0x2a,0x0d,0x8b,0x6b,0x4a,0x0d,0x31,0x66,0x53 };
    const uint8_t IV[] = { 0x2a,0x75,0xe3,0x0b,0xfb,0x46,0xac,0x36,0xbc,0xdc,0x1c,0x3d,0x47,0x3f,0x9d,0xa3 };
    const uint8_t PLAINTEXT[] = { 0x8e,0x15,0xfe,0xea,0x90,0xc6,0xcb,0x7d,0x5a,0xa3,0xc6,0x9e,0x63,0xf5,0x3d,0x4f };
    const uint8_t CIPHERTEXT[] = { 0x0a,0xe4,0x2f,0xd4,0xd0,0x75,0xd6,0xf1,0x3e,0x62,0xfb,0x00,0xcf,0x18,0xf3,0xbe };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-85", "[CBC][MCT][128][DECRYPT][n85]") {
    const uint8_t KEY[] = { 0x89,0x08,0xca,0x05,0xa5,0xf4,0x93,0x57,0x57,0x28,0xad,0xd4,0x6e,0xc4,0x5b,0x1c };
    const uint8_t IV[] = { 0x8e,0x15,0xfe,0xea,0x90,0xc6,0xcb,0x7d,0x5a,0xa3,0xc6,0x9e,0x63,0xf5,0x3d,0x4f };
    const uint8_t PLAINTEXT[] = { 0x6c,0xb1,0x47,0x51,0x77,0xbc,0x8a,0xe3,0x32,0x5e,0x13,0xa1,0xe5,0x06,0x3f,0xc0 };
    const uint8_t CIPHERTEXT[] = { 0xc6,0x25,0x42,0xf3,0xcf,0x5c,0xaf,0x7e,0x85,0x6d,0x27,0xca,0x26,0xe1,0xec,0x2e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-86", "[CBC][MCT][128][DECRYPT][n86]") {
    const uint8_t KEY[] = { 0xe5,0xb9,0x8d,0x54,0xd2,0x48,0x19,0xb4,0x65,0x76,0xbe,0x75,0x8b,0xc2,0x64,0xdc };
    const uint8_t IV[] = { 0x6c,0xb1,0x47,0x51,0x77,0xbc,0x8a,0xe3,0x32,0x5e,0x13,0xa1,0xe5,0x06,0x3f,0xc0 };
    const uint8_t PLAINTEXT[] = { 0xe6,0x32,0x91,0xf3,0x1d,0x9d,0x8e,0x14,0x9b,0x9b,0x7a,0x56,0xe3,0x97,0x04,0x9a };
    const uint8_t CIPHERTEXT[] = { 0x24,0xf7,0x32,0x85,0x7c,0x55,0xc2,0x91,0x8f,0x7e,0x67,0xa4,0xf1,0xb1,0x11,0xf2 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-87", "[CBC][MCT][128][DECRYPT][n87]") {
    const uint8_t KEY[] = { 0x03,0x8b,0x1c,0xa7,0xcf,0xd5,0x97,0xa0,0xfe,0xed,0xc4,0x23,0x68,0x55,0x60,0x46 };
    const uint8_t IV[] = { 0xe6,0x32,0x91,0xf3,0x1d,0x9d,0x8e,0x14,0x9b,0x9b,0x7a,0x56,0xe3,0x97,0x04,0x9a };
    const uint8_t PLAINTEXT[] = { 0xc5,0xe9,0x74,0x1d,0x95,0x82,0x7a,0x08,0x3d,0x82,0x4c,0x13,0x62,0xdf,0x60,0x15 };
    const uint8_t CIPHERTEXT[] = { 0x0c,0x99,0xa3,0x1b,0x72,0x2b,0xaa,0x50,0x63,0xab,0xe6,0x18,0x5a,0x62,0xe8,0xdb };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-88", "[CBC][MCT][128][DECRYPT][n88]") {
    const uint8_t KEY[] = { 0xc6,0x62,0x68,0xba,0x5a,0x57,0xed,0xa8,0xc3,0x6f,0x88,0x30,0x0a,0x8a,0x00,0x53 };
    const uint8_t IV[] = { 0xc5,0xe9,0x74,0x1d,0x95,0x82,0x7a,0x08,0x3d,0x82,0x4c,0x13,0x62,0xdf,0x60,0x15 };
    const uint8_t PLAINTEXT[] = { 0x83,0xbb,0x32,0x88,0xa0,0x12,0x13,0xeb,0x8a,0xb6,0x8d,0x15,0x4e,0xf6,0x63,0x92 };
    const uint8_t CIPHERTEXT[] = { 0xc4,0x8f,0x29,0xa5,0xf7,0x3f,0x2d,0xfe,0x76,0xdc,0x4e,0x69,0x47,0x83,0x22,0x87 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-89", "[CBC][MCT][128][DECRYPT][n89]") {
    const uint8_t KEY[] = { 0x45,0xd9,0x5a,0x32,0xfa,0x45,0xfe,0x43,0x49,0xd9,0x05,0x25,0x44,0x7c,0x63,0xc1 };
    const uint8_t IV[] = { 0x83,0xbb,0x32,0x88,0xa0,0x12,0x13,0xeb,0x8a,0xb6,0x8d,0x15,0x4e,0xf6,0x63,0x92 };
    const uint8_t PLAINTEXT[] = { 0xfd,0xe5,0xf6,0xa1,0xf2,0x82,0x78,0xa0,0xfb,0xb1,0x31,0x7d,0xf4,0xde,0x3c,0x08 };
    const uint8_t CIPHERTEXT[] = { 0x33,0xe2,0x5b,0x99,0x34,0x4b,0x30,0x4e,0x0c,0xe1,0x3a,0x66,0xd2,0xbe,0xe6,0xe5 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-90", "[CBC][MCT][128][DECRYPT][n90]") {
    const uint8_t KEY[] = { 0xb8,0x3c,0xac,0x93,0x08,0xc7,0x86,0xe3,0xb2,0x68,0x34,0x58,0xb0,0xa2,0x5f,0xc9 };
    const uint8_t IV[] = { 0xfd,0xe5,0xf6,0xa1,0xf2,0x82,0x78,0xa0,0xfb,0xb1,0x31,0x7d,0xf4,0xde,0x3c,0x08 };
    const uint8_t PLAINTEXT[] = { 0x03,0x3d,0x79,0x1f,0x6e,0xd5,0xd4,0xfc,0xa4,0x4d,0x08,0xe9,0x64,0x4d,0x26,0x49 };
    const uint8_t CIPHERTEXT[] = { 0xba,0x91,0xc5,0xd6,0x86,0x38,0x97,0x52,0x4a,0x7d,0x2b,0x3f,0xfd,0xa5,0x75,0x2b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-91", "[CBC][MCT][128][DECRYPT][n91]") {
    const uint8_t KEY[] = { 0xbb,0x01,0xd5,0x8c,0x66,0x12,0x52,0x1f,0x16,0x25,0x3c,0xb1,0xd4,0xef,0x79,0x80 };
    const uint8_t IV[] = { 0x03,0x3d,0x79,0x1f,0x6e,0xd5,0xd4,0xfc,0xa4,0x4d,0x08,0xe9,0x64,0x4d,0x26,0x49 };
    const uint8_t PLAINTEXT[] = { 0xe8,0x4b,0xc6,0xb1,0x85,0xb6,0x36,0xfc,0x48,0x8a,0xc4,0xe8,0x75,0x4e,0x93,0x37 };
    const uint8_t CIPHERTEXT[] = { 0x78,0x81,0x26,0x6b,0x60,0xd1,0xcc,0xe9,0x88,0xa7,0x58,0x01,0xfa,0xc4,0x41,0x80 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-92", "[CBC][MCT][128][DECRYPT][n92]") {
    const uint8_t KEY[] = { 0x53,0x4a,0x13,0x3d,0xe3,0xa4,0x64,0xe3,0x5e,0xaf,0xf8,0x59,0xa1,0xa1,0xea,0xb7 };
    const uint8_t IV[] = { 0xe8,0x4b,0xc6,0xb1,0x85,0xb6,0x36,0xfc,0x48,0x8a,0xc4,0xe8,0x75,0x4e,0x93,0x37 };
    const uint8_t PLAINTEXT[] = { 0x25,0x3a,0xd1,0x28,0x62,0x9e,0x8a,0xdb,0xc4,0x69,0xde,0xa7,0xfd,0xc9,0xa6,0xbc };
    const uint8_t CIPHERTEXT[] = { 0xc3,0x3f,0xfb,0x63,0x9e,0xf7,0xa6,0xa2,0xed,0x7f,0x8f,0x3f,0x52,0x0c,0xf1,0x66 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-93", "[CBC][MCT][128][DECRYPT][n93]") {
    const uint8_t KEY[] = { 0x76,0x70,0xc2,0x15,0x81,0x3a,0xee,0x38,0x9a,0xc6,0x26,0xfe,0x5c,0x68,0x4c,0x0b };
    const uint8_t IV[] = { 0x25,0x3a,0xd1,0x28,0x62,0x9e,0x8a,0xdb,0xc4,0x69,0xde,0xa7,0xfd,0xc9,0xa6,0xbc };
    const uint8_t PLAINTEXT[] = { 0xc3,0xd6,0x85,0xf9,0x1a,0xd2,0xbc,0x68,0xbe,0xea,0x70,0x6e,0x5d,0x5b,0x56,0x30 };
    const uint8_t CIPHERTEXT[] = { 0x2d,0xb3,0x48,0x56,0xe6,0x40,0x42,0x56,0x90,0x7e,0x74,0xf4,0x8b,0xfa,0x23,0x4b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-94", "[CBC][MCT][128][DECRYPT][n94]") {
    const uint8_t KEY[] = { 0xb5,0xa6,0x47,0xec,0x9b,0xe8,0x52,0x50,0x24,0x2c,0x56,0x90,0x01,0x33,0x1a,0x3b };
    const uint8_t IV[] = { 0xc3,0xd6,0x85,0xf9,0x1a,0xd2,0xbc,0x68,0xbe,0xea,0x70,0x6e,0x5d,0x5b,0x56,0x30 };
    const uint8_t PLAINTEXT[] = { 0x6d,0xfa,0x98,0xef,0xcc,0x40,0xdb,0x6e,0xda,0x63,0xa7,0x2b,0x96,0x70,0x1b,0x61 };
    const uint8_t CIPHERTEXT[] = { 0x35,0x97,0xb8,0x08,0x0c,0x07,0x87,0x2a,0x31,0xe8,0x61,0xa0,0x29,0x24,0x2a,0xf1 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-95", "[CBC][MCT][128][DECRYPT][n95]") {
    const uint8_t KEY[] = { 0xd8,0x5c,0xdf,0x03,0x57,0xa8,0x89,0x3e,0xfe,0x4f,0xf1,0xbb,0x97,0x43,0x01,0x5a };
    const uint8_t IV[] = { 0x6d,0xfa,0x98,0xef,0xcc,0x40,0xdb,0x6e,0xda,0x63,0xa7,0x2b,0x96,0x70,0x1b,0x61 };
    const uint8_t PLAINTEXT[] = { 0xbd,0x99,0xf4,0x48,0x0a,0x8f,0x26,0x85,0xd5,0x4c,0x51,0x04,0x3b,0xe2,0xac,0xdc };
    const uint8_t CIPHERTEXT[] = { 0x38,0xba,0x8f,0xbf,0x7d,0xbb,0x5d,0xc4,0xea,0x23,0x90,0x92,0x66,0x77,0x5c,0xde };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-96", "[CBC][MCT][128][DECRYPT][n96]") {
    const uint8_t KEY[] = { 0x65,0xc5,0x2b,0x4b,0x5d,0x27,0xaf,0xbb,0x2b,0x03,0xa0,0xbf,0xac,0xa1,0xad,0x86 };
    const uint8_t IV[] = { 0xbd,0x99,0xf4,0x48,0x0a,0x8f,0x26,0x85,0xd5,0x4c,0x51,0x04,0x3b,0xe2,0xac,0xdc };
    const uint8_t PLAINTEXT[] = { 0x05,0x51,0x32,0xd8,0x07,0x4e,0x8b,0x92,0x84,0xde,0x7e,0x25,0x7c,0xd0,0xac,0xe8 };
    const uint8_t CIPHERTEXT[] = { 0x5d,0x1c,0xe3,0xa8,0x7a,0x41,0xc1,0xbb,0xd6,0x1c,0x9f,0xb4,0xef,0xd2,0x15,0xc6 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-97", "[CBC][MCT][128][DECRYPT][n97]") {
    const uint8_t KEY[] = { 0x60,0x94,0x19,0x93,0x5a,0x69,0x24,0x29,0xaf,0xdd,0xde,0x9a,0xd0,0x71,0x01,0x6e };
    const uint8_t IV[] = { 0x05,0x51,0x32,0xd8,0x07,0x4e,0x8b,0x92,0x84,0xde,0x7e,0x25,0x7c,0xd0,0xac,0xe8 };
    const uint8_t PLAINTEXT[] = { 0xdc,0x64,0xa5,0x97,0x08,0xb5,0x82,0x0f,0x98,0x17,0x3c,0xc0,0x8d,0x10,0x56,0x48 };
    const uint8_t CIPHERTEXT[] = { 0xb3,0x38,0xfc,0x78,0xd6,0xd7,0x0c,0xd2,0x1c,0xea,0x8f,0x4d,0x2c,0x41,0x6d,0x10 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-98", "[CBC][MCT][128][DECRYPT][n98]") {
    const uint8_t KEY[] = { 0xbc,0xf0,0xbc,0x04,0x52,0xdc,0xa6,0x26,0x37,0xca,0xe2,0x5a,0x5d,0x61,0x57,0x26 };
    const uint8_t IV[] = { 0xdc,0x64,0xa5,0x97,0x08,0xb5,0x82,0x0f,0x98,0x17,0x3c,0xc0,0x8d,0x10,0x56,0x48 };
    const uint8_t PLAINTEXT[] = { 0xef,0x2a,0x26,0xc3,0xe8,0x40,0xb0,0xf0,0x6a,0xb1,0x39,0xf7,0x56,0x02,0xa7,0x63 };
    const uint8_t CIPHERTEXT[] = { 0xb2,0x4e,0xd2,0xdf,0x68,0xbb,0x46,0x18,0xd7,0xd7,0x89,0xa4,0x66,0xff,0x77,0xac };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT128-DECRYPT-99", "[CBC][MCT][128][DECRYPT][n99]") {
    const uint8_t KEY[] = { 0x53,0xda,0x9a,0xc7,0xba,0x9c,0x16,0xd6,0x5d,0x7b,0xdb,0xad,0x0b,0x63,0xf0,0x45 };
    const uint8_t IV[] = { 0xef,0x2a,0x26,0xc3,0xe8,0x40,0xb0,0xf0,0x6a,0xb1,0x39,0xf7,0x56,0x02,0xa7,0x63 };
    const uint8_t PLAINTEXT[] = { 0x47,0x69,0x31,0x7b,0x05,0x62,0xc4,0x59,0x49,0xc1,0x8b,0x38,0x55,0xf8,0xbf,0x4a };
    const uint8_t CIPHERTEXT[] = { 0x17,0x83,0x7d,0xef,0x8d,0x21,0xe2,0x75,0x71,0xd2,0x0e,0x96,0x88,0x52,0x58,0x79 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

