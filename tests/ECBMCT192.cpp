#include "rijndael.h"
#include "catch.hpp"
#include <cstring>

static inline std::string buf2str(const uint8_t *buf, size_t len) {
    std::ostringstream ss; ss << std::hex << std::setfill('0');
    for (size_t i = 0; i < len; ++i) {
        ss << std::setw(2) << static_cast<int>(buf[i]) << ' ';
    }
    return ss.str();
}

TEST_CASE("ECBMCT192-ENCRYPT-0", "[ECB][MCT][192][ENCRYPT][n0]") {
    const uint8_t KEY[] = { 0xb9,0xa6,0x3e,0x09,0xe1,0xdf,0xc4,0x2e,0x93,0xa9,0x0d,0x9b,0xad,0x73,0x9e,0x59,0x67,0xae,0xf6,0x72,0xee,0xdd,0x5d,0xa9 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x85,0xa1,0xf7,0xa5,0x81,0x67,0xb3,0x89,0xcd,0xdc,0x8a,0x9f,0xf1,0x75,0xee,0x26 };
    const uint8_t CIPHERTEXT[] = { 0xee,0x83,0xd8,0x52,0x79,0xe0,0x22,0xd2,0x04,0x80,0x31,0xab,0xee,0xfb,0xc4,0xa4 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-1", "[ECB][MCT][192][ENCRYPT][n1]") {
    const uint8_t KEY[] = { 0x3a,0xaa,0x45,0x81,0x60,0xee,0x54,0xc9,0x7d,0x2a,0xd5,0xc9,0xd4,0x93,0xbc,0x8b,0x63,0x2e,0xc7,0xd9,0x00,0x26,0x99,0x0d };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xee,0x83,0xd8,0x52,0x79,0xe0,0x22,0xd2,0x04,0x80,0x31,0xab,0xee,0xfb,0xc4,0xa4 };
    const uint8_t CIPHERTEXT[] = { 0xa8,0xf9,0x95,0x17,0xb4,0xbd,0x14,0xa1,0x6c,0x26,0xba,0xe9,0x01,0x41,0x74,0x98 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-2", "[ECB][MCT][192][ENCRYPT][n2]") {
    const uint8_t KEY[] = { 0x1d,0x17,0xd1,0xbc,0xc7,0x4a,0x85,0x84,0xd5,0xd3,0x40,0xde,0x60,0x2e,0xa8,0x2a,0x0f,0x08,0x7d,0x30,0x01,0x67,0xed,0x95 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xa8,0xf9,0x95,0x17,0xb4,0xbd,0x14,0xa1,0x6c,0x26,0xba,0xe9,0x01,0x41,0x74,0x98 };
    const uint8_t CIPHERTEXT[] = { 0x80,0x28,0x6e,0x71,0x93,0x73,0x34,0xfd,0x6e,0x90,0xc7,0x06,0xab,0xba,0xf0,0xff };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-3", "[ECB][MCT][192][ENCRYPT][n3]") {
    const uint8_t KEY[] = { 0xc0,0x02,0x5c,0xd0,0xeb,0x1f,0x23,0xc0,0x55,0xfb,0x2e,0xaf,0xf3,0x5d,0x9c,0xd7,0x61,0x98,0xba,0x36,0xaa,0xdd,0x1d,0x6a };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x80,0x28,0x6e,0x71,0x93,0x73,0x34,0xfd,0x6e,0x90,0xc7,0x06,0xab,0xba,0xf0,0xff };
    const uint8_t CIPHERTEXT[] = { 0xc8,0xb8,0xc1,0x53,0xbc,0xb2,0x31,0xe9,0x42,0x4d,0x65,0xf3,0x7b,0xff,0x75,0xb8 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-4", "[ECB][MCT][192][ENCRYPT][n4]") {
    const uint8_t KEY[] = { 0xaf,0xb4,0x5c,0x10,0x97,0x55,0x3d,0x58,0x9d,0x43,0xef,0xfc,0x4f,0xef,0xad,0x3e,0x23,0xd5,0xdf,0xc5,0xd1,0x22,0x68,0xd2 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xc8,0xb8,0xc1,0x53,0xbc,0xb2,0x31,0xe9,0x42,0x4d,0x65,0xf3,0x7b,0xff,0x75,0xb8 };
    const uint8_t CIPHERTEXT[] = { 0x81,0x08,0xfb,0xfd,0xe1,0xcf,0xf0,0xd9,0x4b,0x88,0xb1,0x07,0x31,0x14,0xc6,0x57 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-5", "[ECB][MCT][192][ENCRYPT][n5]") {
    const uint8_t KEY[] = { 0x8b,0x81,0xe2,0x41,0x8f,0x67,0x6a,0x5b,0x1c,0x4b,0x14,0x01,0xae,0x20,0x5d,0xe7,0x68,0x5d,0x6e,0xc2,0xe0,0x36,0xae,0x85 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x81,0x08,0xfb,0xfd,0xe1,0xcf,0xf0,0xd9,0x4b,0x88,0xb1,0x07,0x31,0x14,0xc6,0x57 };
    const uint8_t CIPHERTEXT[] = { 0x79,0xaf,0x44,0xf2,0x49,0x0e,0xfc,0x90,0xd2,0x17,0xaf,0x55,0xdd,0x10,0xfd,0x2e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-6", "[ECB][MCT][192][ENCRYPT][n6]") {
    const uint8_t KEY[] = { 0x43,0x46,0x3b,0xbf,0x95,0x28,0xc3,0xbc,0x65,0xe4,0x50,0xf3,0xe7,0x2e,0xa1,0x77,0xba,0x4a,0xc1,0x97,0x3d,0x26,0x53,0xab };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x79,0xaf,0x44,0xf2,0x49,0x0e,0xfc,0x90,0xd2,0x17,0xaf,0x55,0xdd,0x10,0xfd,0x2e };
    const uint8_t CIPHERTEXT[] = { 0xd0,0xc2,0xda,0x38,0x60,0xc3,0x67,0xe1,0xfd,0x68,0xcf,0x04,0xbb,0x6b,0x41,0xcd };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-7", "[ECB][MCT][192][ENCRYPT][n7]") {
    const uint8_t KEY[] = { 0x0e,0x3e,0xfc,0xa8,0xca,0x3f,0xd4,0x5b,0xb5,0x26,0x8a,0xcb,0x87,0xed,0xc6,0x96,0x47,0x22,0x0e,0x93,0x86,0x4d,0x12,0x66 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xd0,0xc2,0xda,0x38,0x60,0xc3,0x67,0xe1,0xfd,0x68,0xcf,0x04,0xbb,0x6b,0x41,0xcd };
    const uint8_t CIPHERTEXT[] = { 0xe5,0xd3,0x9a,0x5d,0x7c,0xa8,0xc4,0xf4,0xaa,0xfd,0x3d,0x85,0x1c,0x40,0xc0,0x16 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-8", "[ECB][MCT][192][ENCRYPT][n8]") {
    const uint8_t KEY[] = { 0x29,0x08,0x44,0x59,0x68,0xd0,0xa1,0x8f,0x50,0xf5,0x10,0x96,0xfb,0x45,0x02,0x62,0xed,0xdf,0x33,0x16,0x9a,0x0d,0xd2,0x70 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xe5,0xd3,0x9a,0x5d,0x7c,0xa8,0xc4,0xf4,0xaa,0xfd,0x3d,0x85,0x1c,0x40,0xc0,0x16 };
    const uint8_t CIPHERTEXT[] = { 0x98,0x65,0x70,0x51,0xb2,0x3c,0x69,0x74,0x1b,0x2a,0xb5,0x06,0xf8,0x18,0xfd,0x3f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-9", "[ECB][MCT][192][ENCRYPT][n9]") {
    const uint8_t KEY[] = { 0x00,0xfe,0xb8,0xbf,0xfd,0x6b,0x4b,0xcb,0xc8,0x90,0x60,0xc7,0x49,0x79,0x6b,0x16,0xf6,0xf5,0x86,0x10,0x62,0x15,0x2f,0x4f };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x98,0x65,0x70,0x51,0xb2,0x3c,0x69,0x74,0x1b,0x2a,0xb5,0x06,0xf8,0x18,0xfd,0x3f };
    const uint8_t CIPHERTEXT[] = { 0xc9,0xb6,0xe9,0x5f,0xb5,0x4b,0x54,0x0a,0xdc,0x1f,0xaa,0x8c,0xec,0xe0,0x02,0x86 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-10", "[ECB][MCT][192][ENCRYPT][n10]") {
    const uint8_t KEY[] = { 0xbe,0x96,0xe1,0x6f,0xff,0xe0,0xa2,0xdb,0x01,0x26,0x89,0x98,0xfc,0x32,0x3f,0x1c,0x2a,0xea,0x2c,0x9c,0x8e,0xf5,0x2d,0xc9 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xc9,0xb6,0xe9,0x5f,0xb5,0x4b,0x54,0x0a,0xdc,0x1f,0xaa,0x8c,0xec,0xe0,0x02,0x86 };
    const uint8_t CIPHERTEXT[] = { 0x5c,0xf9,0xf6,0x1a,0x3d,0xd3,0xa2,0xf7,0x6d,0x57,0x13,0x84,0xc8,0x31,0xae,0x88 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-11", "[ECB][MCT][192][ENCRYPT][n11]") {
    const uint8_t KEY[] = { 0x41,0xba,0xf8,0x17,0x49,0x0b,0xf4,0x9c,0x5d,0xdf,0x7f,0x82,0xc1,0xe1,0x9d,0xeb,0x47,0xbd,0x3f,0x18,0x46,0xc4,0x83,0x41 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x5c,0xf9,0xf6,0x1a,0x3d,0xd3,0xa2,0xf7,0x6d,0x57,0x13,0x84,0xc8,0x31,0xae,0x88 };
    const uint8_t CIPHERTEXT[] = { 0xdc,0x6e,0x6c,0x13,0x67,0x99,0x58,0x96,0x3b,0x86,0x48,0x45,0x7e,0xb8,0xa4,0x15 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-12", "[ECB][MCT][192][ENCRYPT][n12]") {
    const uint8_t KEY[] = { 0xa4,0xaf,0xa1,0xac,0x95,0x7b,0x31,0xfe,0x81,0xb1,0x13,0x91,0xa6,0x78,0xc5,0x7d,0x7c,0x3b,0x77,0x5d,0x38,0x7c,0x27,0x54 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xdc,0x6e,0x6c,0x13,0x67,0x99,0x58,0x96,0x3b,0x86,0x48,0x45,0x7e,0xb8,0xa4,0x15 };
    const uint8_t CIPHERTEXT[] = { 0x03,0x3f,0x2b,0x71,0x89,0xec,0x7f,0x2e,0xf0,0xc4,0x96,0xa8,0x3f,0x5c,0x50,0x51 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-13", "[ECB][MCT][192][ENCRYPT][n13]") {
    const uint8_t KEY[] = { 0x6a,0x5b,0x44,0x86,0x0a,0x26,0xa4,0xff,0x82,0x8e,0x38,0xe0,0x2f,0x94,0xba,0x53,0x8c,0xff,0xe1,0xf5,0x07,0x20,0x77,0x05 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x03,0x3f,0x2b,0x71,0x89,0xec,0x7f,0x2e,0xf0,0xc4,0x96,0xa8,0x3f,0x5c,0x50,0x51 };
    const uint8_t CIPHERTEXT[] = { 0x03,0x27,0x27,0x20,0x4d,0x9b,0x16,0x96,0x79,0xef,0xf2,0xff,0xe5,0xf7,0x1e,0xfb };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-14", "[ECB][MCT][192][ENCRYPT][n14]") {
    const uint8_t KEY[] = { 0xc8,0x0d,0x5e,0xbc,0x48,0x69,0x3f,0xdc,0x81,0xa9,0x1f,0xc0,0x62,0x0f,0xac,0xc5,0xf5,0x10,0x13,0x0a,0xe2,0xd7,0x69,0xfe };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x03,0x27,0x27,0x20,0x4d,0x9b,0x16,0x96,0x79,0xef,0xf2,0xff,0xe5,0xf7,0x1e,0xfb };
    const uint8_t CIPHERTEXT[] = { 0xd1,0x98,0x84,0xaa,0xae,0x71,0x0c,0x58,0x61,0xff,0xf7,0x25,0x1e,0xa1,0x43,0xc8 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-15", "[ECB][MCT][192][ENCRYPT][n15]") {
    const uint8_t KEY[] = { 0xb9,0xd3,0x62,0x90,0xd5,0x32,0x4a,0x83,0x50,0x31,0x9b,0x6a,0xcc,0x7e,0xa0,0x9d,0x94,0xef,0xe4,0x2f,0xfc,0x76,0x2a,0x36 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xd1,0x98,0x84,0xaa,0xae,0x71,0x0c,0x58,0x61,0xff,0xf7,0x25,0x1e,0xa1,0x43,0xc8 };
    const uint8_t CIPHERTEXT[] = { 0x30,0x97,0xd3,0x22,0x45,0x16,0x3f,0xcf,0x4c,0x57,0x8e,0x5a,0x7d,0xd2,0x34,0x9a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-16", "[ECB][MCT][192][ENCRYPT][n16]") {
    const uint8_t KEY[] = { 0x3d,0x00,0x40,0x3b,0xc3,0xa0,0xff,0x5b,0x60,0xa6,0x48,0x48,0x89,0x68,0x9f,0x52,0xd8,0xb8,0x6a,0x75,0x81,0xa4,0x1e,0xac };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x30,0x97,0xd3,0x22,0x45,0x16,0x3f,0xcf,0x4c,0x57,0x8e,0x5a,0x7d,0xd2,0x34,0x9a };
    const uint8_t CIPHERTEXT[] = { 0x39,0xb6,0x61,0x5b,0x1e,0x04,0x7b,0x94,0x69,0xb3,0xcf,0xd7,0x25,0x19,0x87,0xc9 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-17", "[ECB][MCT][192][ENCRYPT][n17]") {
    const uint8_t KEY[] = { 0xbb,0x85,0xf6,0x57,0xf0,0xd5,0x24,0x16,0x59,0x10,0x29,0x13,0x97,0x6c,0xe4,0xc6,0xb1,0x0b,0xa5,0xa2,0xa4,0xbd,0x99,0x65 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x39,0xb6,0x61,0x5b,0x1e,0x04,0x7b,0x94,0x69,0xb3,0xcf,0xd7,0x25,0x19,0x87,0xc9 };
    const uint8_t CIPHERTEXT[] = { 0x86,0x81,0x94,0xc4,0x4a,0x68,0xd8,0xb4,0x8e,0x0e,0xd4,0xdb,0xac,0xde,0xd1,0x28 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-18", "[ECB][MCT][192][ENCRYPT][n18]") {
    const uint8_t KEY[] = { 0x7d,0xb3,0x63,0x5b,0xf7,0xd5,0x2f,0x66,0xdf,0x91,0xbd,0xd7,0xdd,0x04,0x3c,0x72,0x3f,0x05,0x71,0x79,0x08,0x63,0x48,0x4d };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x86,0x81,0x94,0xc4,0x4a,0x68,0xd8,0xb4,0x8e,0x0e,0xd4,0xdb,0xac,0xde,0xd1,0x28 };
    const uint8_t CIPHERTEXT[] = { 0xd3,0x24,0xfd,0x7d,0xb1,0xcf,0xaa,0x86,0x51,0x12,0x80,0xda,0xfa,0x53,0x40,0xe6 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-19", "[ECB][MCT][192][ENCRYPT][n19]") {
    const uint8_t KEY[] = { 0x14,0x49,0xe3,0x2d,0x51,0xb3,0x68,0x0f,0x0c,0xb5,0x40,0xaa,0x6c,0xcb,0x96,0xf4,0x6e,0x17,0xf1,0xa3,0xf2,0x30,0x08,0xab };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xd3,0x24,0xfd,0x7d,0xb1,0xcf,0xaa,0x86,0x51,0x12,0x80,0xda,0xfa,0x53,0x40,0xe6 };
    const uint8_t CIPHERTEXT[] = { 0x40,0x9a,0xa2,0x5d,0xcb,0x51,0xd8,0x83,0x1a,0x2f,0x56,0x27,0x74,0x6c,0x2b,0xc9 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-20", "[ECB][MCT][192][ENCRYPT][n20]") {
    const uint8_t KEY[] = { 0x63,0xd4,0xb3,0x3e,0x24,0xbf,0x3f,0x7c,0x4c,0x2f,0xe2,0xf7,0xa7,0x9a,0x4e,0x77,0x74,0x38,0xa7,0x84,0x86,0x5c,0x23,0x62 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x40,0x9a,0xa2,0x5d,0xcb,0x51,0xd8,0x83,0x1a,0x2f,0x56,0x27,0x74,0x6c,0x2b,0xc9 };
    const uint8_t CIPHERTEXT[] = { 0xbf,0xa0,0x34,0x83,0x98,0xb9,0xbc,0x4e,0x07,0xeb,0x17,0x39,0xc5,0x89,0xb2,0x25 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-21", "[ECB][MCT][192][ENCRYPT][n21]") {
    const uint8_t KEY[] = { 0x03,0xf2,0x11,0x69,0xaa,0xd2,0x1a,0xf3,0xf3,0x8f,0xd6,0x74,0x3f,0x23,0xf2,0x39,0x73,0xd3,0xb0,0xbd,0x43,0xd5,0x91,0x47 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xbf,0xa0,0x34,0x83,0x98,0xb9,0xbc,0x4e,0x07,0xeb,0x17,0x39,0xc5,0x89,0xb2,0x25 };
    const uint8_t CIPHERTEXT[] = { 0x13,0x58,0x2b,0x48,0x81,0xe6,0xb7,0xf6,0x39,0x8f,0x41,0xb5,0x7d,0x61,0x72,0x01 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-22", "[ECB][MCT][192][ENCRYPT][n22]") {
    const uint8_t KEY[] = { 0x54,0x18,0x79,0xf8,0x77,0x0a,0xd3,0x5d,0xe0,0xd7,0xfd,0x3c,0xbe,0xc5,0x45,0xcf,0x4a,0x5c,0xf1,0x08,0x3e,0xb4,0xe3,0x46 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x13,0x58,0x2b,0x48,0x81,0xe6,0xb7,0xf6,0x39,0x8f,0x41,0xb5,0x7d,0x61,0x72,0x01 };
    const uint8_t CIPHERTEXT[] = { 0xd9,0xd5,0x80,0x82,0xc3,0xa9,0x76,0x85,0x2a,0x35,0x0b,0xa5,0x51,0x86,0x23,0x62 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-23", "[ECB][MCT][192][ENCRYPT][n23]") {
    const uint8_t KEY[] = { 0xd0,0xc6,0x10,0x0d,0x7f,0x8f,0xdd,0x87,0x39,0x02,0x7d,0xbe,0x7d,0x6c,0x33,0x4a,0x60,0x69,0xfa,0xad,0x6f,0x32,0xc0,0x24 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xd9,0xd5,0x80,0x82,0xc3,0xa9,0x76,0x85,0x2a,0x35,0x0b,0xa5,0x51,0x86,0x23,0x62 };
    const uint8_t CIPHERTEXT[] = { 0x3c,0xaf,0xa1,0x75,0x06,0xa9,0x23,0x59,0xc2,0x36,0x00,0x40,0x4a,0xd6,0x15,0x13 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-24", "[ECB][MCT][192][ENCRYPT][n24]") {
    const uint8_t KEY[] = { 0x05,0x34,0x56,0x51,0xac,0x0d,0x23,0xb3,0x05,0xad,0xdc,0xcb,0x7b,0xc5,0x10,0x13,0xa2,0x5f,0xfa,0xed,0x25,0xe4,0xd5,0x37 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x3c,0xaf,0xa1,0x75,0x06,0xa9,0x23,0x59,0xc2,0x36,0x00,0x40,0x4a,0xd6,0x15,0x13 };
    const uint8_t CIPHERTEXT[] = { 0xa4,0xa3,0x04,0x18,0x03,0xfe,0x9b,0xf7,0xd3,0x55,0xb3,0x4d,0x21,0x29,0x3e,0xcf };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-25", "[ECB][MCT][192][ENCRYPT][n25]") {
    const uint8_t KEY[] = { 0x4c,0xe9,0xe1,0x10,0x2c,0xcb,0xa4,0x88,0xa1,0x0e,0xd8,0xd3,0x78,0x3b,0x8b,0xe4,0x71,0x0a,0x49,0xa0,0x04,0xcd,0xeb,0xf8 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xa4,0xa3,0x04,0x18,0x03,0xfe,0x9b,0xf7,0xd3,0x55,0xb3,0x4d,0x21,0x29,0x3e,0xcf };
    const uint8_t CIPHERTEXT[] = { 0xcf,0xa6,0x74,0xab,0xa2,0x2c,0x17,0x03,0x6d,0xa4,0x37,0x83,0x2c,0x63,0x5b,0x30 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-26", "[ECB][MCT][192][ENCRYPT][n26]") {
    const uint8_t KEY[] = { 0x08,0xfe,0xd0,0xe9,0x35,0x0a,0xc7,0x38,0x6e,0xa8,0xac,0x78,0xda,0x17,0x9c,0xe7,0x1c,0xae,0x7e,0x23,0x28,0xae,0xb0,0xc8 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xcf,0xa6,0x74,0xab,0xa2,0x2c,0x17,0x03,0x6d,0xa4,0x37,0x83,0x2c,0x63,0x5b,0x30 };
    const uint8_t CIPHERTEXT[] = { 0xf4,0xde,0x16,0x4a,0x6c,0xa9,0x3e,0x96,0xdf,0xc9,0x14,0x26,0xd6,0x36,0xe4,0x81 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-27", "[ECB][MCT][192][ENCRYPT][n27]") {
    const uint8_t KEY[] = { 0xcc,0x56,0x43,0xba,0x70,0x4f,0x96,0x1c,0x9a,0x76,0xba,0x32,0xb6,0xbe,0xa2,0x71,0xc3,0x67,0x6a,0x05,0xfe,0x98,0x54,0x49 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xf4,0xde,0x16,0x4a,0x6c,0xa9,0x3e,0x96,0xdf,0xc9,0x14,0x26,0xd6,0x36,0xe4,0x81 };
    const uint8_t CIPHERTEXT[] = { 0x1d,0xeb,0x55,0x3a,0xc9,0x1e,0xc3,0x46,0x20,0x11,0x54,0xdb,0xbd,0xac,0x9b,0x14 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-28", "[ECB][MCT][192][ENCRYPT][n28]") {
    const uint8_t KEY[] = { 0xd4,0x13,0xa3,0x79,0x43,0x9b,0x2c,0xaf,0x87,0x9d,0xef,0x08,0x7f,0xa0,0x61,0x37,0xe3,0x76,0x3e,0xde,0x43,0x34,0xcf,0x5d };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x1d,0xeb,0x55,0x3a,0xc9,0x1e,0xc3,0x46,0x20,0x11,0x54,0xdb,0xbd,0xac,0x9b,0x14 };
    const uint8_t CIPHERTEXT[] = { 0x52,0x37,0x24,0x15,0x20,0x88,0x49,0xa2,0x22,0xac,0xf6,0xf2,0x7e,0x14,0x5f,0x75 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-29", "[ECB][MCT][192][ENCRYPT][n29]") {
    const uint8_t KEY[] = { 0x57,0x5a,0x3e,0x57,0x73,0x6f,0xe9,0x6d,0xd5,0xaa,0xcb,0x1d,0x5f,0x28,0x28,0x95,0xc1,0xda,0xc8,0x2c,0x3d,0x20,0x90,0x28 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x52,0x37,0x24,0x15,0x20,0x88,0x49,0xa2,0x22,0xac,0xf6,0xf2,0x7e,0x14,0x5f,0x75 };
    const uint8_t CIPHERTEXT[] = { 0x71,0x0f,0x70,0x8e,0x40,0x23,0x25,0xc6,0x76,0x3c,0xa4,0x61,0xf6,0xf8,0x55,0xe0 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-30", "[ECB][MCT][192][ENCRYPT][n30]") {
    const uint8_t KEY[] = { 0x7d,0x59,0x3f,0x39,0x9f,0x19,0x8b,0x9d,0xa4,0xa5,0xbb,0x93,0x1f,0x0b,0x0d,0x53,0xb7,0xe6,0x6c,0x4d,0xcb,0xd8,0xc5,0xc8 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x71,0x0f,0x70,0x8e,0x40,0x23,0x25,0xc6,0x76,0x3c,0xa4,0x61,0xf6,0xf8,0x55,0xe0 };
    const uint8_t CIPHERTEXT[] = { 0x8f,0xae,0x56,0x69,0x9e,0x3a,0xf5,0x3b,0x86,0xd4,0x84,0xbe,0x24,0x63,0xb6,0x02 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-31", "[ECB][MCT][192][ENCRYPT][n31]") {
    const uint8_t KEY[] = { 0x40,0x1e,0x3d,0x45,0x9d,0x72,0x54,0xa8,0x2b,0x0b,0xed,0xfa,0x81,0x31,0xf8,0x68,0x31,0x32,0xe8,0xf3,0xef,0xbb,0x73,0xca };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x8f,0xae,0x56,0x69,0x9e,0x3a,0xf5,0x3b,0x86,0xd4,0x84,0xbe,0x24,0x63,0xb6,0x02 };
    const uint8_t CIPHERTEXT[] = { 0xaa,0x44,0x67,0x8e,0xfb,0x43,0x32,0x67,0x27,0xd5,0x20,0x4e,0xdc,0x94,0x2f,0xe2 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-32", "[ECB][MCT][192][ENCRYPT][n32]") {
    const uint8_t KEY[] = { 0x99,0x6d,0x36,0xde,0x69,0x4d,0xc3,0xcb,0x81,0x4f,0x8a,0x74,0x7a,0x72,0xca,0x0f,0x16,0xe7,0xc8,0xbd,0x33,0x2f,0x5c,0x28 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xaa,0x44,0x67,0x8e,0xfb,0x43,0x32,0x67,0x27,0xd5,0x20,0x4e,0xdc,0x94,0x2f,0xe2 };
    const uint8_t CIPHERTEXT[] = { 0xfb,0x04,0xca,0xba,0x31,0x2e,0x38,0x75,0x28,0xa3,0x55,0xd3,0x9d,0xb1,0x5d,0xb6 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-33", "[ECB][MCT][192][ENCRYPT][n33]") {
    const uint8_t KEY[] = { 0xbb,0xa2,0xdd,0xbf,0x7c,0xc0,0x63,0x95,0x7a,0x4b,0x40,0xce,0x4b,0x5c,0xf2,0x7a,0x3e,0x44,0x9d,0x6e,0xae,0x9e,0x01,0x9e };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xfb,0x04,0xca,0xba,0x31,0x2e,0x38,0x75,0x28,0xa3,0x55,0xd3,0x9d,0xb1,0x5d,0xb6 };
    const uint8_t CIPHERTEXT[] = { 0x5d,0x81,0x56,0x33,0x52,0x10,0xcc,0x39,0x88,0x5a,0xb6,0x52,0xd8,0xcc,0xfd,0x33 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-34", "[ECB][MCT][192][ENCRYPT][n34]") {
    const uint8_t KEY[] = { 0x5f,0xdb,0xf5,0xf7,0xb3,0xb3,0x89,0xc7,0x27,0xca,0x16,0xfd,0x19,0x4c,0x3e,0x43,0xb6,0x1e,0x2b,0x3c,0x76,0x52,0xfc,0xad };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x5d,0x81,0x56,0x33,0x52,0x10,0xcc,0x39,0x88,0x5a,0xb6,0x52,0xd8,0xcc,0xfd,0x33 };
    const uint8_t CIPHERTEXT[] = { 0x8b,0x8d,0x34,0x55,0x18,0x8a,0xd9,0x61,0x5a,0x2c,0x3a,0x34,0xc4,0xbf,0xb8,0xdf };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-35", "[ECB][MCT][192][ENCRYPT][n35]") {
    const uint8_t KEY[] = { 0xfa,0x87,0x6e,0xc6,0x4e,0x22,0xb1,0x6b,0xac,0x47,0x22,0xa8,0x01,0xc6,0xe7,0x22,0xec,0x32,0x11,0x08,0xb2,0xed,0x44,0x72 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x8b,0x8d,0x34,0x55,0x18,0x8a,0xd9,0x61,0x5a,0x2c,0x3a,0x34,0xc4,0xbf,0xb8,0xdf };
    const uint8_t CIPHERTEXT[] = { 0x1c,0x5b,0xab,0x7b,0x91,0x03,0x2f,0xfa,0xc3,0xa8,0xe4,0xd4,0x1a,0x3a,0x53,0x38 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-36", "[ECB][MCT][192][ENCRYPT][n36]") {
    const uint8_t KEY[] = { 0xce,0xed,0xa6,0x42,0x21,0xae,0x37,0xd3,0xb0,0x1c,0x89,0xd3,0x90,0xc5,0xc8,0xd8,0x2f,0x9a,0xf5,0xdc,0xa8,0xd7,0x17,0x4a };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x1c,0x5b,0xab,0x7b,0x91,0x03,0x2f,0xfa,0xc3,0xa8,0xe4,0xd4,0x1a,0x3a,0x53,0x38 };
    const uint8_t CIPHERTEXT[] = { 0xad,0x98,0xde,0xf9,0xc2,0x4e,0x9d,0x0d,0xe0,0xe6,0xa9,0x54,0x1c,0x86,0xc3,0x4c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-37", "[ECB][MCT][192][ENCRYPT][n37]") {
    const uint8_t KEY[] = { 0xb2,0xb6,0xb9,0x07,0x47,0x95,0xf6,0x50,0x1d,0x84,0x57,0x2a,0x52,0x8b,0x55,0xd5,0xcf,0x7c,0x5c,0x88,0xb4,0x51,0xd4,0x06 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xad,0x98,0xde,0xf9,0xc2,0x4e,0x9d,0x0d,0xe0,0xe6,0xa9,0x54,0x1c,0x86,0xc3,0x4c };
    const uint8_t CIPHERTEXT[] = { 0xee,0x54,0xa4,0x10,0xd2,0xe4,0x10,0xe7,0x21,0xbf,0x9b,0x12,0xf9,0xa8,0xbb,0x04 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-38", "[ECB][MCT][192][ENCRYPT][n38]") {
    const uint8_t KEY[] = { 0x42,0xe6,0x92,0x73,0x95,0xe5,0xd3,0xdb,0xf3,0xd0,0xf3,0x3a,0x80,0x6f,0x45,0x32,0xee,0xc3,0xc7,0x9a,0x4d,0xf9,0x6f,0x02 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xee,0x54,0xa4,0x10,0xd2,0xe4,0x10,0xe7,0x21,0xbf,0x9b,0x12,0xf9,0xa8,0xbb,0x04 };
    const uint8_t CIPHERTEXT[] = { 0x7b,0x89,0x4a,0x4e,0x55,0x14,0x24,0x90,0x29,0xaf,0x11,0x18,0x57,0x60,0x93,0xcc };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-39", "[ECB][MCT][192][ENCRYPT][n39]") {
    const uint8_t KEY[] = { 0x07,0x37,0x3c,0x87,0x10,0x02,0xda,0xaf,0x88,0x59,0xb9,0x74,0xd5,0x7b,0x61,0xa2,0xc7,0x6c,0xd6,0x82,0x1a,0x99,0xfc,0xce };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x7b,0x89,0x4a,0x4e,0x55,0x14,0x24,0x90,0x29,0xaf,0x11,0x18,0x57,0x60,0x93,0xcc };
    const uint8_t CIPHERTEXT[] = { 0xf5,0x55,0xd9,0x3e,0x38,0x13,0x7c,0x9b,0x93,0x1b,0x45,0x83,0xde,0x36,0x7f,0xf2 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-40", "[ECB][MCT][192][ENCRYPT][n40]") {
    const uint8_t KEY[] = { 0x8e,0xeb,0xc3,0x22,0xf6,0x66,0x30,0x68,0x7d,0x0c,0x60,0x4a,0xed,0x68,0x1d,0x39,0x54,0x77,0x93,0x01,0xc4,0xaf,0x83,0x3c };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xf5,0x55,0xd9,0x3e,0x38,0x13,0x7c,0x9b,0x93,0x1b,0x45,0x83,0xde,0x36,0x7f,0xf2 };
    const uint8_t CIPHERTEXT[] = { 0xf5,0xad,0xbb,0x37,0xc9,0x96,0x46,0x91,0x3d,0x16,0x70,0xcc,0xd8,0x20,0x3c,0x04 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-41", "[ECB][MCT][192][ENCRYPT][n41]") {
    const uint8_t KEY[] = { 0x56,0xd7,0x0f,0x07,0xf9,0x0e,0x11,0xab,0x88,0xa1,0xdb,0x7d,0x24,0xfe,0x5b,0xa8,0x69,0x61,0xe3,0xcd,0x1c,0x8f,0xbf,0x38 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xf5,0xad,0xbb,0x37,0xc9,0x96,0x46,0x91,0x3d,0x16,0x70,0xcc,0xd8,0x20,0x3c,0x04 };
    const uint8_t CIPHERTEXT[] = { 0x12,0x2f,0x21,0x49,0x00,0xff,0xcf,0xd5,0x96,0x52,0xc1,0xaf,0x64,0xb1,0x0c,0x71 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-42", "[ECB][MCT][192][ENCRYPT][n42]") {
    const uint8_t KEY[] = { 0xcf,0x4e,0xc9,0xb7,0xf5,0x2c,0xd2,0xd9,0x9a,0x8e,0xfa,0x34,0x24,0x01,0x94,0x7d,0xff,0x33,0x22,0x62,0x78,0x3e,0xb3,0x49 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x12,0x2f,0x21,0x49,0x00,0xff,0xcf,0xd5,0x96,0x52,0xc1,0xaf,0x64,0xb1,0x0c,0x71 };
    const uint8_t CIPHERTEXT[] = { 0xbe,0x1b,0x5d,0x5a,0xc7,0xb6,0x1b,0x73,0xc4,0x79,0xd7,0xb1,0xfc,0x65,0xea,0x35 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-43", "[ECB][MCT][192][ENCRYPT][n43]") {
    const uint8_t KEY[] = { 0x8c,0xa5,0xb0,0xfe,0x10,0x53,0xb3,0x98,0x24,0x95,0xa7,0x6e,0xe3,0xb7,0x8f,0x0e,0x3b,0x4a,0xf5,0xd3,0x84,0x5b,0x59,0x7c };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xbe,0x1b,0x5d,0x5a,0xc7,0xb6,0x1b,0x73,0xc4,0x79,0xd7,0xb1,0xfc,0x65,0xea,0x35 };
    const uint8_t CIPHERTEXT[] = { 0xf9,0x86,0x8b,0x44,0xc1,0xce,0x21,0xb0,0x40,0xb8,0xff,0xf3,0x71,0x6b,0x01,0x1a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-44", "[ECB][MCT][192][ENCRYPT][n44]") {
    const uint8_t KEY[] = { 0x34,0xf2,0xce,0x0d,0xbb,0x3f,0xa2,0xd2,0xdd,0x13,0x2c,0x2a,0x22,0x79,0xae,0xbe,0x7b,0xf2,0x0a,0x20,0xf5,0x30,0x58,0x66 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xf9,0x86,0x8b,0x44,0xc1,0xce,0x21,0xb0,0x40,0xb8,0xff,0xf3,0x71,0x6b,0x01,0x1a };
    const uint8_t CIPHERTEXT[] = { 0x9c,0xac,0x4e,0xfb,0x17,0x0d,0xc8,0xde,0xd3,0xfc,0x6a,0x30,0x9f,0xd7,0xac,0xa7 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-45", "[ECB][MCT][192][ENCRYPT][n45]") {
    const uint8_t KEY[] = { 0x60,0x3b,0xbb,0x7b,0xf5,0x4b,0x36,0x5d,0x41,0xbf,0x62,0xd1,0x35,0x74,0x66,0x60,0xa8,0x0e,0x60,0x10,0x6a,0xe7,0xf4,0xc1 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x9c,0xac,0x4e,0xfb,0x17,0x0d,0xc8,0xde,0xd3,0xfc,0x6a,0x30,0x9f,0xd7,0xac,0xa7 };
    const uint8_t CIPHERTEXT[] = { 0xe5,0x2a,0x42,0xe7,0x80,0x48,0xc6,0xdd,0xa6,0x3f,0x98,0xfc,0x6c,0x5f,0x47,0xf9 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-46", "[ECB][MCT][192][ENCRYPT][n46]") {
    const uint8_t KEY[] = { 0xa1,0x46,0xac,0x00,0x0c,0xb1,0xf1,0x4b,0xa4,0x95,0x20,0x36,0xb5,0x3c,0xa0,0xbd,0x0e,0x31,0xf8,0xec,0x06,0xb8,0xb3,0x38 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xe5,0x2a,0x42,0xe7,0x80,0x48,0xc6,0xdd,0xa6,0x3f,0x98,0xfc,0x6c,0x5f,0x47,0xf9 };
    const uint8_t CIPHERTEXT[] = { 0x82,0x6a,0xf4,0x73,0xc6,0x0d,0x61,0xbd,0x74,0x6a,0x8d,0x8b,0xda,0x3b,0x41,0x0c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-47", "[ECB][MCT][192][ENCRYPT][n47]") {
    const uint8_t KEY[] = { 0x97,0x9e,0x02,0x46,0xf7,0x5d,0x08,0xe2,0x26,0xff,0xd4,0x45,0x73,0x31,0xc1,0x00,0x7a,0x5b,0x75,0x67,0xdc,0x83,0xf2,0x34 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x82,0x6a,0xf4,0x73,0xc6,0x0d,0x61,0xbd,0x74,0x6a,0x8d,0x8b,0xda,0x3b,0x41,0x0c };
    const uint8_t CIPHERTEXT[] = { 0x9f,0xa4,0xeb,0xdc,0xca,0xce,0x90,0x33,0xa5,0x6e,0x3a,0x5a,0xac,0xe7,0x4d,0xba };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-48", "[ECB][MCT][192][ENCRYPT][n48]") {
    const uint8_t KEY[] = { 0x3c,0x34,0xcf,0x05,0x82,0x1c,0x9d,0x17,0xb9,0x5b,0x3f,0x99,0xb9,0xff,0x51,0x33,0xdf,0x35,0x4f,0x3d,0x70,0x64,0xbf,0x8e };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x9f,0xa4,0xeb,0xdc,0xca,0xce,0x90,0x33,0xa5,0x6e,0x3a,0x5a,0xac,0xe7,0x4d,0xba };
    const uint8_t CIPHERTEXT[] = { 0xe0,0xac,0x5d,0xee,0x9d,0x62,0x47,0xd5,0x0b,0x37,0x95,0x89,0xc2,0x41,0x54,0x44 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-49", "[ECB][MCT][192][ENCRYPT][n49]") {
    const uint8_t KEY[] = { 0x3e,0x42,0xac,0x26,0xf6,0xc0,0x97,0x7a,0x59,0xf7,0x62,0x77,0x24,0x9d,0x16,0xe6,0xd4,0x02,0xda,0xb4,0xb2,0x25,0xeb,0xca };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xe0,0xac,0x5d,0xee,0x9d,0x62,0x47,0xd5,0x0b,0x37,0x95,0x89,0xc2,0x41,0x54,0x44 };
    const uint8_t CIPHERTEXT[] = { 0x46,0x25,0x62,0xda,0x72,0xea,0x6b,0x5c,0x37,0x15,0x30,0xc7,0x16,0x87,0x9d,0xcd };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-50", "[ECB][MCT][192][ENCRYPT][n50]") {
    const uint8_t KEY[] = { 0xed,0x7e,0xdf,0xf1,0x58,0x90,0xf7,0x84,0x1f,0xd2,0x00,0xad,0x56,0x77,0x7d,0xba,0xe3,0x17,0xea,0x73,0xa4,0xa2,0x76,0x07 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x46,0x25,0x62,0xda,0x72,0xea,0x6b,0x5c,0x37,0x15,0x30,0xc7,0x16,0x87,0x9d,0xcd };
    const uint8_t CIPHERTEXT[] = { 0x78,0xa0,0x40,0x00,0x9e,0x18,0xef,0x20,0x72,0x53,0xef,0x99,0x2e,0x7e,0x2c,0x91 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-51", "[ECB][MCT][192][ENCRYPT][n51]") {
    const uint8_t KEY[] = { 0x41,0x40,0x88,0x20,0x41,0x91,0x21,0x62,0x67,0x72,0x40,0xad,0xc8,0x6f,0x92,0x9a,0x91,0x44,0x05,0xea,0x8a,0xdc,0x5a,0x96 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x78,0xa0,0x40,0x00,0x9e,0x18,0xef,0x20,0x72,0x53,0xef,0x99,0x2e,0x7e,0x2c,0x91 };
    const uint8_t CIPHERTEXT[] = { 0xf8,0xc7,0xa7,0x9f,0x10,0xc9,0x2e,0xc4,0x9e,0x1e,0xc5,0x9b,0x08,0x49,0x8d,0x64 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-52", "[ECB][MCT][192][ENCRYPT][n52]") {
    const uint8_t KEY[] = { 0x2c,0xbc,0x00,0xf6,0x0f,0x66,0x69,0x5a,0x9f,0xb5,0xe7,0x32,0xd8,0xa6,0xbc,0x5e,0x0f,0x5a,0xc0,0x71,0x82,0x95,0xd7,0xf2 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xf8,0xc7,0xa7,0x9f,0x10,0xc9,0x2e,0xc4,0x9e,0x1e,0xc5,0x9b,0x08,0x49,0x8d,0x64 };
    const uint8_t CIPHERTEXT[] = { 0x2f,0x9a,0x5f,0x2c,0xfd,0x51,0x5a,0x68,0x78,0xec,0xd9,0x23,0xc3,0x6b,0x1b,0x4e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-53", "[ECB][MCT][192][ENCRYPT][n53]") {
    const uint8_t KEY[] = { 0xce,0x98,0x54,0xaa,0x7b,0x6e,0x18,0x4a,0xb0,0x2f,0xb8,0x1e,0x25,0xf7,0xe6,0x36,0x77,0xb6,0x19,0x52,0x41,0xfe,0xcc,0xbc };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x2f,0x9a,0x5f,0x2c,0xfd,0x51,0x5a,0x68,0x78,0xec,0xd9,0x23,0xc3,0x6b,0x1b,0x4e };
    const uint8_t CIPHERTEXT[] = { 0xf7,0xd3,0xb3,0x75,0x8e,0xcf,0x53,0x59,0xab,0x52,0x3b,0xea,0xa1,0x7a,0x03,0x06 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-54", "[ECB][MCT][192][ENCRYPT][n54]") {
    const uint8_t KEY[] = { 0x93,0x16,0x3a,0xe2,0x8f,0x22,0x57,0x0b,0x47,0xfc,0x0b,0x6b,0xab,0x38,0xb5,0x6f,0xdc,0xe4,0x22,0xb8,0xe0,0x84,0xcf,0xba };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xf7,0xd3,0xb3,0x75,0x8e,0xcf,0x53,0x59,0xab,0x52,0x3b,0xea,0xa1,0x7a,0x03,0x06 };
    const uint8_t CIPHERTEXT[] = { 0x6c,0x9d,0xd0,0x76,0x75,0x0b,0xd1,0xd2,0xc0,0xb8,0xf2,0x03,0xca,0x14,0xee,0x1e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-55", "[ECB][MCT][192][ENCRYPT][n55]") {
    const uint8_t KEY[] = { 0xca,0x2a,0x78,0x82,0xdb,0x1c,0xb3,0xb5,0x2b,0x61,0xdb,0x1d,0xde,0x33,0x64,0xbd,0x1c,0x5c,0xd0,0xbb,0x2a,0x90,0x21,0xa4 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x6c,0x9d,0xd0,0x76,0x75,0x0b,0xd1,0xd2,0xc0,0xb8,0xf2,0x03,0xca,0x14,0xee,0x1e };
    const uint8_t CIPHERTEXT[] = { 0x28,0x9c,0xf1,0xab,0x3b,0x9e,0xac,0x26,0xcd,0xd0,0x2d,0xf2,0x44,0x41,0x2d,0x4e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-56", "[ECB][MCT][192][ENCRYPT][n56]") {
    const uint8_t KEY[] = { 0x90,0xdc,0x3a,0x02,0xba,0x5b,0x5f,0x2b,0x03,0xfd,0x2a,0xb6,0xe5,0xad,0xc8,0x9b,0xd1,0x8c,0xfd,0x49,0x6e,0xd1,0x0c,0xea };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x28,0x9c,0xf1,0xab,0x3b,0x9e,0xac,0x26,0xcd,0xd0,0x2d,0xf2,0x44,0x41,0x2d,0x4e };
    const uint8_t CIPHERTEXT[] = { 0x8e,0xe4,0xca,0x3c,0x6c,0x9c,0xc5,0xf2,0x7d,0xdb,0x79,0xae,0x7c,0xfc,0xc4,0x7e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-57", "[ECB][MCT][192][ENCRYPT][n57]") {
    const uint8_t KEY[] = { 0x11,0xb2,0x6d,0x4f,0x3e,0xb7,0x7d,0x21,0x8d,0x19,0xe0,0x8a,0x89,0x31,0x0d,0x69,0xac,0x57,0x84,0xe7,0x12,0x2d,0xc8,0x94 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x8e,0xe4,0xca,0x3c,0x6c,0x9c,0xc5,0xf2,0x7d,0xdb,0x79,0xae,0x7c,0xfc,0xc4,0x7e };
    const uint8_t CIPHERTEXT[] = { 0x6c,0xbf,0x94,0xfc,0xdc,0xad,0xfd,0x9a,0x39,0xd4,0xc4,0xf7,0x02,0xd7,0xb1,0x01 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-58", "[ECB][MCT][192][ENCRYPT][n58]") {
    const uint8_t KEY[] = { 0x71,0x59,0xcd,0x86,0x84,0xc2,0x80,0x39,0xe1,0xa6,0x74,0x76,0x55,0x9c,0xf0,0xf3,0x95,0x83,0x40,0x10,0x10,0xfa,0x79,0x95 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x6c,0xbf,0x94,0xfc,0xdc,0xad,0xfd,0x9a,0x39,0xd4,0xc4,0xf7,0x02,0xd7,0xb1,0x01 };
    const uint8_t CIPHERTEXT[] = { 0x50,0x47,0x27,0x0d,0xb2,0x33,0xf7,0x5e,0x84,0xc7,0x34,0xb5,0xcb,0x56,0xf7,0x65 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-59", "[ECB][MCT][192][ENCRYPT][n59]") {
    const uint8_t KEY[] = { 0x76,0xbb,0xdc,0x75,0xf5,0x30,0xec,0x0a,0xb1,0xe1,0x53,0x7b,0xe7,0xaf,0x07,0xad,0x11,0x44,0x74,0xa5,0xdb,0xac,0x8e,0xf0 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x50,0x47,0x27,0x0d,0xb2,0x33,0xf7,0x5e,0x84,0xc7,0x34,0xb5,0xcb,0x56,0xf7,0x65 };
    const uint8_t CIPHERTEXT[] = { 0xb8,0x26,0x02,0xcd,0x22,0xe7,0x82,0x1b,0xe6,0x2e,0x5f,0xf6,0x7c,0xb1,0x93,0xc6 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-60", "[ECB][MCT][192][ENCRYPT][n60]") {
    const uint8_t KEY[] = { 0x30,0x6a,0x47,0x20,0x86,0x7e,0xca,0x70,0x09,0xc7,0x51,0xb6,0xc5,0x48,0x85,0xb6,0xf7,0x6a,0x2b,0x53,0xa7,0x1d,0x1d,0x36 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xb8,0x26,0x02,0xcd,0x22,0xe7,0x82,0x1b,0xe6,0x2e,0x5f,0xf6,0x7c,0xb1,0x93,0xc6 };
    const uint8_t CIPHERTEXT[] = { 0x5a,0x24,0x1f,0xbc,0xb4,0xa0,0xf7,0x69,0xc3,0x74,0x08,0xab,0xe6,0x58,0xda,0x25 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-61", "[ECB][MCT][192][ENCRYPT][n61]") {
    const uint8_t KEY[] = { 0x30,0x63,0x23,0xbb,0xf5,0x3b,0xd8,0x4f,0x53,0xe3,0x4e,0x0a,0x71,0xe8,0x72,0xdf,0x34,0x1e,0x23,0xf8,0x41,0x45,0xc7,0x13 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x5a,0x24,0x1f,0xbc,0xb4,0xa0,0xf7,0x69,0xc3,0x74,0x08,0xab,0xe6,0x58,0xda,0x25 };
    const uint8_t CIPHERTEXT[] = { 0x9a,0x63,0xd9,0x56,0xa9,0xc7,0x19,0x46,0x5e,0x30,0xcd,0xc1,0x60,0x99,0x10,0x42 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-62", "[ECB][MCT][192][ENCRYPT][n62]") {
    const uint8_t KEY[] = { 0x89,0x7b,0x6f,0x11,0xec,0xb9,0x78,0x62,0xc9,0x80,0x97,0x5c,0xd8,0x2f,0x6b,0x99,0x6a,0x2e,0xee,0x39,0x21,0xdc,0xd7,0x51 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x9a,0x63,0xd9,0x56,0xa9,0xc7,0x19,0x46,0x5e,0x30,0xcd,0xc1,0x60,0x99,0x10,0x42 };
    const uint8_t CIPHERTEXT[] = { 0x2a,0x73,0x3f,0x40,0x7d,0x80,0x80,0x47,0x0c,0x5f,0x22,0xa6,0xcf,0x83,0x58,0xcd };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-63", "[ECB][MCT][192][ENCRYPT][n63]") {
    const uint8_t KEY[] = { 0x14,0xfa,0x0e,0x99,0x78,0x67,0x2a,0xd5,0xe3,0xf3,0xa8,0x1c,0xa5,0xaf,0xeb,0xde,0x66,0x71,0xcc,0x9f,0xee,0x5f,0x8f,0x9c };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x2a,0x73,0x3f,0x40,0x7d,0x80,0x80,0x47,0x0c,0x5f,0x22,0xa6,0xcf,0x83,0x58,0xcd };
    const uint8_t CIPHERTEXT[] = { 0x24,0xdb,0x9f,0x77,0xf6,0x10,0x60,0xac,0xcf,0x6d,0x41,0xe7,0x63,0x9c,0x1e,0xc6 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-64", "[ECB][MCT][192][ENCRYPT][n64]") {
    const uint8_t KEY[] = { 0xc1,0x12,0x5a,0x27,0xa8,0x5e,0x38,0x26,0xc7,0x28,0x37,0x6b,0x53,0xbf,0x8b,0x72,0xa9,0x1c,0x8d,0x78,0x8d,0xc3,0x91,0x5a };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x24,0xdb,0x9f,0x77,0xf6,0x10,0x60,0xac,0xcf,0x6d,0x41,0xe7,0x63,0x9c,0x1e,0xc6 };
    const uint8_t CIPHERTEXT[] = { 0xa8,0x9e,0xcc,0xce,0x6e,0xe8,0xc9,0xd4,0xd3,0x4c,0xf5,0xba,0x8b,0x29,0xcb,0xa7 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-65", "[ECB][MCT][192][ENCRYPT][n65]") {
    const uint8_t KEY[] = { 0x1c,0xe3,0x85,0xac,0x9c,0x70,0xd4,0xe2,0x6f,0xb6,0xfb,0xa5,0x3d,0x57,0x42,0xa6,0x7a,0x50,0x78,0xc2,0x06,0xea,0x5a,0xfd };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xa8,0x9e,0xcc,0xce,0x6e,0xe8,0xc9,0xd4,0xd3,0x4c,0xf5,0xba,0x8b,0x29,0xcb,0xa7 };
    const uint8_t CIPHERTEXT[] = { 0xe4,0xef,0x08,0xe8,0x61,0x41,0x94,0x0e,0xf8,0x7d,0x6b,0x38,0x5d,0x19,0x10,0x8c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-66", "[ECB][MCT][192][ENCRYPT][n66]") {
    const uint8_t KEY[] = { 0x9a,0x39,0x67,0xa8,0xff,0x01,0xd3,0x5f,0x8b,0x59,0xf3,0x4d,0x5c,0x16,0xd6,0xa8,0x82,0x2d,0x13,0xfa,0x5b,0xf3,0x4a,0x71 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xe4,0xef,0x08,0xe8,0x61,0x41,0x94,0x0e,0xf8,0x7d,0x6b,0x38,0x5d,0x19,0x10,0x8c };
    const uint8_t CIPHERTEXT[] = { 0x10,0x39,0xc4,0x41,0x00,0x7d,0x68,0x05,0x55,0x1a,0x87,0xe8,0x20,0xc6,0x3d,0xca };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-67", "[ECB][MCT][192][ENCRYPT][n67]") {
    const uint8_t KEY[] = { 0x7d,0x0a,0xf1,0xcd,0x0d,0x64,0x1f,0x20,0x9b,0x60,0x37,0x0c,0x5c,0x6b,0xbe,0xad,0xd7,0x37,0x94,0x12,0x7b,0x35,0x77,0xbb };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x10,0x39,0xc4,0x41,0x00,0x7d,0x68,0x05,0x55,0x1a,0x87,0xe8,0x20,0xc6,0x3d,0xca };
    const uint8_t CIPHERTEXT[] = { 0x25,0x84,0xb5,0x5b,0x21,0x4a,0x94,0xee,0x98,0x94,0xb1,0x04,0x17,0x8a,0x6d,0xd5 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-68", "[ECB][MCT][192][ENCRYPT][n68]") {
    const uint8_t KEY[] = { 0x3f,0x78,0xd2,0x95,0x44,0x99,0x08,0xe6,0xbe,0xe4,0x82,0x57,0x7d,0x21,0x2a,0x43,0x4f,0xa3,0x25,0x16,0x6c,0xbf,0x1a,0x6e };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x25,0x84,0xb5,0x5b,0x21,0x4a,0x94,0xee,0x98,0x94,0xb1,0x04,0x17,0x8a,0x6d,0xd5 };
    const uint8_t CIPHERTEXT[] = { 0x9d,0x32,0xbd,0x63,0x57,0x55,0x10,0x91,0xca,0x65,0x9f,0x7b,0xd4,0x50,0x9f,0xc2 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-69", "[ECB][MCT][192][ENCRYPT][n69]") {
    const uint8_t KEY[] = { 0x9c,0xd2,0x8f,0x26,0x5a,0x13,0x55,0x61,0x23,0xd6,0x3f,0x34,0x2a,0x74,0x3a,0xd2,0x85,0xc6,0xba,0x6d,0xb8,0xef,0x85,0xac };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x9d,0x32,0xbd,0x63,0x57,0x55,0x10,0x91,0xca,0x65,0x9f,0x7b,0xd4,0x50,0x9f,0xc2 };
    const uint8_t CIPHERTEXT[] = { 0x9a,0xc4,0x6e,0xb8,0xe2,0x53,0xbb,0x37,0x30,0x43,0x94,0xff,0x00,0x42,0xd3,0x06 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-70", "[ECB][MCT][192][ENCRYPT][n70]") {
    const uint8_t KEY[] = { 0x34,0xca,0xf5,0x80,0x01,0x41,0x64,0xd4,0xb9,0x12,0x51,0x8c,0xc8,0x27,0x81,0xe5,0xb5,0x85,0x2e,0x92,0xb8,0xad,0x56,0xaa };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x9a,0xc4,0x6e,0xb8,0xe2,0x53,0xbb,0x37,0x30,0x43,0x94,0xff,0x00,0x42,0xd3,0x06 };
    const uint8_t CIPHERTEXT[] = { 0x3b,0x89,0x9f,0x1f,0x2d,0x93,0xe3,0x89,0x04,0x18,0x76,0x3f,0xdd,0x35,0x94,0x3a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-71", "[ECB][MCT][192][ENCRYPT][n71]") {
    const uint8_t KEY[] = { 0x7c,0x19,0xa5,0x0f,0xa9,0x36,0x00,0x41,0x82,0x9b,0xce,0x93,0xe5,0xb4,0x62,0x6c,0xb1,0x9d,0x58,0xad,0x65,0x98,0xc2,0x90 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x3b,0x89,0x9f,0x1f,0x2d,0x93,0xe3,0x89,0x04,0x18,0x76,0x3f,0xdd,0x35,0x94,0x3a };
    const uint8_t CIPHERTEXT[] = { 0xea,0x89,0xd4,0x53,0x77,0x84,0xf2,0x53,0xea,0xe2,0xd6,0xce,0xbd,0xd6,0x3a,0x4c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-72", "[ECB][MCT][192][ENCRYPT][n72]") {
    const uint8_t KEY[] = { 0x21,0x09,0xb2,0x88,0x04,0x79,0xbb,0x4f,0x68,0x12,0x1a,0xc0,0x92,0x30,0x90,0x3f,0x5b,0x7f,0x8e,0x63,0xd8,0x4e,0xf8,0xdc };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xea,0x89,0xd4,0x53,0x77,0x84,0xf2,0x53,0xea,0xe2,0xd6,0xce,0xbd,0xd6,0x3a,0x4c };
    const uint8_t CIPHERTEXT[] = { 0x80,0x71,0x1a,0x42,0xf6,0x68,0x7a,0x62,0x59,0x0a,0x8a,0x0d,0x16,0x5b,0x2f,0xb8 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-73", "[ECB][MCT][192][ENCRYPT][n73]") {
    const uint8_t KEY[] = { 0x83,0xfe,0x68,0x2b,0x1f,0xcd,0xb5,0x7b,0xe8,0x63,0x00,0x82,0x64,0x58,0xea,0x5d,0x02,0x75,0x04,0x6e,0xce,0x15,0xd7,0x64 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x80,0x71,0x1a,0x42,0xf6,0x68,0x7a,0x62,0x59,0x0a,0x8a,0x0d,0x16,0x5b,0x2f,0xb8 };
    const uint8_t CIPHERTEXT[] = { 0xb2,0x17,0x4f,0xfa,0xb7,0x55,0xe3,0xe0,0xc6,0x66,0xce,0xcb,0x07,0x52,0x56,0xec };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-74", "[ECB][MCT][192][ENCRYPT][n74]") {
    const uint8_t KEY[] = { 0x63,0x43,0x4f,0x6c,0x69,0xc0,0x41,0x73,0x5a,0x74,0x4f,0x78,0xd3,0x0d,0x09,0xbd,0xc4,0x13,0xca,0xa5,0xc9,0x47,0x81,0x88 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xb2,0x17,0x4f,0xfa,0xb7,0x55,0xe3,0xe0,0xc6,0x66,0xce,0xcb,0x07,0x52,0x56,0xec };
    const uint8_t CIPHERTEXT[] = { 0x57,0x12,0x03,0x86,0xbd,0x56,0x6d,0x31,0x80,0x7a,0x6f,0xe7,0xb0,0xe7,0x80,0x41 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-75", "[ECB][MCT][192][ENCRYPT][n75]") {
    const uint8_t KEY[] = { 0xdf,0xa4,0xb3,0xf9,0x9e,0xda,0x96,0x42,0x0d,0x66,0x4c,0xfe,0x6e,0x5b,0x64,0x8c,0x44,0x69,0xa5,0x42,0x79,0xa0,0x01,0xc9 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x57,0x12,0x03,0x86,0xbd,0x56,0x6d,0x31,0x80,0x7a,0x6f,0xe7,0xb0,0xe7,0x80,0x41 };
    const uint8_t CIPHERTEXT[] = { 0x3b,0x12,0x8f,0xcd,0xb7,0xbb,0x42,0x52,0xb5,0xe5,0xe0,0x0d,0xf5,0x62,0x95,0x08 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-76", "[ECB][MCT][192][ENCRYPT][n76]") {
    const uint8_t KEY[] = { 0x24,0xfa,0x37,0xbb,0x6d,0x70,0xbd,0x94,0x36,0x74,0xc3,0x33,0xd9,0xe0,0x26,0xde,0xf1,0x8c,0x45,0x4f,0x8c,0xc2,0x94,0xc1 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x3b,0x12,0x8f,0xcd,0xb7,0xbb,0x42,0x52,0xb5,0xe5,0xe0,0x0d,0xf5,0x62,0x95,0x08 };
    const uint8_t CIPHERTEXT[] = { 0x48,0x26,0xcf,0x69,0xd8,0x3c,0x7f,0x47,0x52,0x30,0x67,0x9b,0x61,0xca,0x8e,0x0a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-77", "[ECB][MCT][192][ENCRYPT][n77]") {
    const uint8_t KEY[] = { 0x24,0x6a,0x74,0x08,0xf7,0x39,0xd1,0xd3,0x7e,0x52,0x0c,0x5a,0x01,0xdc,0x59,0x99,0xa3,0xbc,0x22,0xd4,0xed,0x08,0x1a,0xcb };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x48,0x26,0xcf,0x69,0xd8,0x3c,0x7f,0x47,0x52,0x30,0x67,0x9b,0x61,0xca,0x8e,0x0a };
    const uint8_t CIPHERTEXT[] = { 0x25,0xa2,0x3c,0x7f,0xb7,0x98,0xa5,0x0f,0x59,0x29,0xe9,0x0e,0x74,0x3d,0xa1,0x1c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-78", "[ECB][MCT][192][ENCRYPT][n78]") {
    const uint8_t KEY[] = { 0x9f,0x18,0x27,0xbe,0x83,0x51,0x8d,0xbc,0x5b,0xf0,0x30,0x25,0xb6,0x44,0xfc,0x96,0xfa,0x95,0xcb,0xda,0x99,0x35,0xbb,0xd7 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x25,0xa2,0x3c,0x7f,0xb7,0x98,0xa5,0x0f,0x59,0x29,0xe9,0x0e,0x74,0x3d,0xa1,0x1c };
    const uint8_t CIPHERTEXT[] = { 0x76,0x39,0xe9,0xf9,0x02,0xd6,0x5f,0xeb,0x6b,0xc5,0xcb,0xc4,0x4b,0x5e,0x12,0xed };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-79", "[ECB][MCT][192][ENCRYPT][n79]") {
    const uint8_t KEY[] = { 0xfd,0xa6,0xb0,0xd1,0x64,0xb7,0xfd,0x98,0x2d,0xc9,0xd9,0xdc,0xb4,0x92,0xa3,0x7d,0x91,0x50,0x00,0x1e,0xd2,0x6b,0xa9,0x3a };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x76,0x39,0xe9,0xf9,0x02,0xd6,0x5f,0xeb,0x6b,0xc5,0xcb,0xc4,0x4b,0x5e,0x12,0xed };
    const uint8_t CIPHERTEXT[] = { 0x85,0xa7,0x1e,0xe4,0x57,0xe9,0x4f,0xc8,0x5c,0xb9,0xac,0x46,0x1f,0xff,0x1c,0x4f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-80", "[ECB][MCT][192][ENCRYPT][n80]") {
    const uint8_t KEY[] = { 0x07,0x55,0xb8,0x6a,0x47,0x0b,0xb9,0x3a,0xa8,0x6e,0xc7,0x38,0xe3,0x7b,0xec,0xb5,0xcd,0xe9,0xac,0x58,0xcd,0x94,0xb5,0x75 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x85,0xa7,0x1e,0xe4,0x57,0xe9,0x4f,0xc8,0x5c,0xb9,0xac,0x46,0x1f,0xff,0x1c,0x4f };
    const uint8_t CIPHERTEXT[] = { 0xc9,0xef,0x84,0xa2,0x68,0x87,0x7e,0xce,0xf8,0x8b,0xb5,0x54,0xea,0x63,0xc3,0x36 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-81", "[ECB][MCT][192][ENCRYPT][n81]") {
    const uint8_t KEY[] = { 0x8f,0x13,0xf2,0xd9,0x08,0x50,0x91,0x81,0x61,0x81,0x43,0x9a,0x8b,0xfc,0x92,0x7b,0x35,0x62,0x19,0x0c,0x27,0xf7,0x76,0x43 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xc9,0xef,0x84,0xa2,0x68,0x87,0x7e,0xce,0xf8,0x8b,0xb5,0x54,0xea,0x63,0xc3,0x36 };
    const uint8_t CIPHERTEXT[] = { 0x26,0x0d,0xd6,0xbf,0x13,0x66,0xc0,0x29,0xb5,0xfd,0x64,0xe7,0x28,0x53,0xd2,0xd7 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-82", "[ECB][MCT][192][ENCRYPT][n82]") {
    const uint8_t KEY[] = { 0xfd,0xd7,0x1c,0x52,0x4c,0x37,0x43,0x45,0x47,0x8c,0x95,0x25,0x98,0x9a,0x52,0x52,0x80,0x9f,0x7d,0xeb,0x0f,0xa4,0xa4,0x94 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x26,0x0d,0xd6,0xbf,0x13,0x66,0xc0,0x29,0xb5,0xfd,0x64,0xe7,0x28,0x53,0xd2,0xd7 };
    const uint8_t CIPHERTEXT[] = { 0x39,0xcc,0x3e,0x22,0x47,0x38,0xef,0xaa,0xf4,0x5f,0xab,0x52,0x5f,0xc1,0x31,0x27 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-83", "[ECB][MCT][192][ENCRYPT][n83]") {
    const uint8_t KEY[] = { 0x8b,0xd4,0x3e,0x3f,0x44,0x87,0x78,0xea,0x7e,0x40,0xab,0x07,0xdf,0xa2,0xbd,0xf8,0x74,0xc0,0xd6,0xb9,0x50,0x65,0x95,0xb3 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x39,0xcc,0x3e,0x22,0x47,0x38,0xef,0xaa,0xf4,0x5f,0xab,0x52,0x5f,0xc1,0x31,0x27 };
    const uint8_t CIPHERTEXT[] = { 0x4d,0x5a,0xc8,0x50,0x6c,0x0a,0x13,0xb1,0xc2,0x09,0x27,0x31,0xc6,0xfe,0x5f,0xbc };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-84", "[ECB][MCT][192][ENCRYPT][n84]") {
    const uint8_t KEY[] = { 0x69,0xb7,0x44,0x9d,0xc8,0x11,0xb1,0x9c,0x33,0x1a,0x63,0x57,0xb3,0xa8,0xae,0x49,0xb6,0xc9,0xf1,0x88,0x96,0x9b,0xca,0x0f };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x4d,0x5a,0xc8,0x50,0x6c,0x0a,0x13,0xb1,0xc2,0x09,0x27,0x31,0xc6,0xfe,0x5f,0xbc };
    const uint8_t CIPHERTEXT[] = { 0xed,0xe6,0x9b,0xd8,0x0f,0x87,0x9d,0x57,0x64,0x0c,0x77,0xbc,0x13,0x12,0xf0,0x64 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-85", "[ECB][MCT][192][ENCRYPT][n85]") {
    const uint8_t KEY[] = { 0x40,0xe1,0x69,0x2d,0x44,0xe3,0xb4,0x41,0xde,0xfc,0xf8,0x8f,0xbc,0x2f,0x33,0x1e,0xd2,0xc5,0x86,0x34,0x85,0x89,0x3a,0x6b };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xed,0xe6,0x9b,0xd8,0x0f,0x87,0x9d,0x57,0x64,0x0c,0x77,0xbc,0x13,0x12,0xf0,0x64 };
    const uint8_t CIPHERTEXT[] = { 0x31,0xdc,0x85,0x4d,0x85,0x52,0xe6,0x68,0x49,0x04,0xbc,0x65,0x02,0x68,0x24,0x34 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-86", "[ECB][MCT][192][ENCRYPT][n86]") {
    const uint8_t KEY[] = { 0xc1,0xde,0x7d,0x92,0x85,0x75,0x11,0x38,0xef,0x20,0x7d,0xc2,0x39,0x7d,0xd5,0x76,0x9b,0xc1,0x3a,0x51,0x87,0xe1,0x1e,0x5f };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x31,0xdc,0x85,0x4d,0x85,0x52,0xe6,0x68,0x49,0x04,0xbc,0x65,0x02,0x68,0x24,0x34 };
    const uint8_t CIPHERTEXT[] = { 0xc7,0xbd,0xc5,0x7a,0xaa,0x44,0x5e,0x48,0x96,0x55,0x15,0x4b,0x25,0xd3,0x90,0x6d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-87", "[ECB][MCT][192][ENCRYPT][n87]") {
    const uint8_t KEY[] = { 0xd8,0x68,0x9f,0xdc,0xc9,0xb7,0x72,0x27,0x28,0x9d,0xb8,0xb8,0x93,0x39,0x8b,0x3e,0x0d,0x94,0x2f,0x1a,0xa2,0x32,0x8e,0x32 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xc7,0xbd,0xc5,0x7a,0xaa,0x44,0x5e,0x48,0x96,0x55,0x15,0x4b,0x25,0xd3,0x90,0x6d };
    const uint8_t CIPHERTEXT[] = { 0xc4,0xb4,0x98,0x47,0x0a,0x24,0x11,0x3b,0x6b,0x18,0x26,0x74,0xc0,0x36,0x61,0x31 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-88", "[ECB][MCT][192][ENCRYPT][n88]") {
    const uint8_t KEY[] = { 0x82,0x93,0xa9,0x98,0x63,0x3a,0x40,0x5d,0xec,0x29,0x20,0xff,0x99,0x1d,0x9a,0x05,0x66,0x8c,0x09,0x6e,0x62,0x04,0xef,0x03 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xc4,0xb4,0x98,0x47,0x0a,0x24,0x11,0x3b,0x6b,0x18,0x26,0x74,0xc0,0x36,0x61,0x31 };
    const uint8_t CIPHERTEXT[] = { 0x75,0x75,0x10,0x4d,0xa6,0xd5,0xb4,0xe0,0xfb,0x21,0xd6,0x82,0xf9,0x3d,0x0d,0x24 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-89", "[ECB][MCT][192][ENCRYPT][n89]") {
    const uint8_t KEY[] = { 0xe7,0x1e,0x9c,0x09,0x18,0xc9,0x08,0xae,0x99,0x5c,0x30,0xb2,0x3f,0xc8,0x2e,0xe5,0x9d,0xad,0xdf,0xec,0x9b,0x39,0xe2,0x27 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x75,0x75,0x10,0x4d,0xa6,0xd5,0xb4,0xe0,0xfb,0x21,0xd6,0x82,0xf9,0x3d,0x0d,0x24 };
    const uint8_t CIPHERTEXT[] = { 0xc5,0xac,0xdc,0x31,0x83,0x53,0xc4,0xef,0x3f,0x6f,0x45,0xbf,0x4a,0x84,0xc6,0x59 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-90", "[ECB][MCT][192][ENCRYPT][n90]") {
    const uint8_t KEY[] = { 0xa5,0xf1,0x9f,0x39,0x2e,0xb2,0xaf,0xd1,0x5c,0xf0,0xec,0x83,0xbc,0x9b,0xea,0x0a,0xa2,0xc2,0x9a,0x53,0xd1,0xbd,0x24,0x7e };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xc5,0xac,0xdc,0x31,0x83,0x53,0xc4,0xef,0x3f,0x6f,0x45,0xbf,0x4a,0x84,0xc6,0x59 };
    const uint8_t CIPHERTEXT[] = { 0xaf,0x6a,0x60,0xf6,0x0f,0xc0,0x85,0x65,0x6e,0x30,0x5a,0x4c,0x05,0x0c,0xc9,0xc3 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-91", "[ECB][MCT][192][ENCRYPT][n91]") {
    const uint8_t KEY[] = { 0x18,0x0b,0x05,0xbf,0xf1,0x3a,0x1a,0xd3,0xf3,0x9a,0x8c,0x75,0xb3,0x5b,0x6f,0x6f,0xcc,0xf2,0xc0,0x1f,0xd4,0xb1,0xed,0xbd };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xaf,0x6a,0x60,0xf6,0x0f,0xc0,0x85,0x65,0x6e,0x30,0x5a,0x4c,0x05,0x0c,0xc9,0xc3 };
    const uint8_t CIPHERTEXT[] = { 0x9d,0x5f,0x30,0xe4,0x88,0xc3,0x24,0x3a,0xd2,0x07,0x67,0xb3,0x9e,0xc9,0xee,0x4e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-92", "[ECB][MCT][192][ENCRYPT][n92]") {
    const uint8_t KEY[] = { 0x1f,0xb7,0xff,0x20,0xca,0xb8,0xa5,0x18,0x6e,0xc5,0xbc,0x91,0x3b,0x98,0x4b,0x55,0x1e,0xf5,0xa7,0xac,0x4a,0x78,0x03,0xf3 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x9d,0x5f,0x30,0xe4,0x88,0xc3,0x24,0x3a,0xd2,0x07,0x67,0xb3,0x9e,0xc9,0xee,0x4e };
    const uint8_t CIPHERTEXT[] = { 0x5c,0x3a,0x1d,0x14,0x4e,0x5e,0xfe,0x7c,0xed,0xe8,0x8e,0x21,0xdc,0xbc,0x27,0x77 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-93", "[ECB][MCT][192][ENCRYPT][n93]") {
    const uint8_t KEY[] = { 0x3e,0x99,0x97,0x61,0xc9,0xd1,0x5f,0x39,0x32,0xff,0xa1,0x85,0x75,0xc6,0xb5,0x29,0xf3,0x1d,0x29,0x8d,0x96,0xc4,0x24,0x84 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x5c,0x3a,0x1d,0x14,0x4e,0x5e,0xfe,0x7c,0xed,0xe8,0x8e,0x21,0xdc,0xbc,0x27,0x77 };
    const uint8_t CIPHERTEXT[] = { 0x4f,0x16,0x3c,0x25,0xa6,0xd5,0x45,0xcc,0xff,0xc5,0x45,0x11,0xb2,0xa5,0x60,0x5d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-94", "[ECB][MCT][192][ENCRYPT][n94]") {
    const uint8_t KEY[] = { 0x8b,0xc1,0xe5,0x31,0xe9,0xd3,0xf8,0x4f,0x7d,0xe9,0x9d,0xa0,0xd3,0x13,0xf0,0xe5,0x0c,0xd8,0x6c,0x9c,0x24,0x61,0x44,0xd9 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x4f,0x16,0x3c,0x25,0xa6,0xd5,0x45,0xcc,0xff,0xc5,0x45,0x11,0xb2,0xa5,0x60,0x5d };
    const uint8_t CIPHERTEXT[] = { 0x3e,0xed,0x65,0xda,0xb0,0xbd,0x7a,0xe8,0xc8,0xb1,0x15,0xfa,0x18,0x5e,0x31,0x0a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-95", "[ECB][MCT][192][ENCRYPT][n95]") {
    const uint8_t KEY[] = { 0x4e,0xfa,0xae,0x2e,0x7e,0xca,0xdc,0xd2,0x43,0x04,0xf8,0x7a,0x63,0xae,0x8a,0x0d,0xc4,0x69,0x79,0x66,0x3c,0x3f,0x75,0xd3 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x3e,0xed,0x65,0xda,0xb0,0xbd,0x7a,0xe8,0xc8,0xb1,0x15,0xfa,0x18,0x5e,0x31,0x0a };
    const uint8_t CIPHERTEXT[] = { 0xfe,0xfc,0xe0,0xda,0x5a,0xf3,0x88,0x5d,0x02,0x26,0x36,0xf1,0x9a,0xda,0xb9,0xb8 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-96", "[ECB][MCT][192][ENCRYPT][n96]") {
    const uint8_t KEY[] = { 0x44,0xe1,0x22,0x4d,0x08,0x47,0x6e,0x9c,0xbd,0xf8,0x18,0xa0,0x39,0x5d,0x02,0x50,0xc6,0x4f,0x4f,0x97,0xa6,0xe5,0xcc,0x6b };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xfe,0xfc,0xe0,0xda,0x5a,0xf3,0x88,0x5d,0x02,0x26,0x36,0xf1,0x9a,0xda,0xb9,0xb8 };
    const uint8_t CIPHERTEXT[] = { 0x3a,0x0c,0x3d,0x80,0x6a,0xff,0x32,0xfd,0xe8,0x68,0x34,0x3b,0x0b,0x58,0xc7,0x7a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-97", "[ECB][MCT][192][ENCRYPT][n97]") {
    const uint8_t KEY[] = { 0xef,0x93,0xff,0xb9,0xeb,0x0b,0x9f,0x17,0x87,0xf4,0x25,0x20,0x53,0xa2,0x30,0xad,0x2e,0x27,0x7b,0xac,0xad,0xbd,0x0b,0x11 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x3a,0x0c,0x3d,0x80,0x6a,0xff,0x32,0xfd,0xe8,0x68,0x34,0x3b,0x0b,0x58,0xc7,0x7a };
    const uint8_t CIPHERTEXT[] = { 0x66,0x10,0xee,0x19,0x97,0x0e,0xe6,0x06,0x08,0x39,0x68,0xe5,0x23,0xaf,0x23,0x70 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-98", "[ECB][MCT][192][ENCRYPT][n98]") {
    const uint8_t KEY[] = { 0xfc,0x7c,0x2c,0x3d,0x27,0x51,0x90,0x36,0xe1,0xe4,0xcb,0x39,0xc4,0xac,0xd6,0xab,0x26,0x1e,0x13,0x49,0x8e,0x12,0x28,0x61 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x66,0x10,0xee,0x19,0x97,0x0e,0xe6,0x06,0x08,0x39,0x68,0xe5,0x23,0xaf,0x23,0x70 };
    const uint8_t CIPHERTEXT[] = { 0x2f,0x71,0x4d,0xdb,0xd4,0xad,0xf8,0x32,0x7d,0xc9,0x3c,0x72,0x3a,0xeb,0xff,0xfa };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-ENCRYPT-99", "[ECB][MCT][192][ENCRYPT][n99]") {
    const uint8_t KEY[] = { 0xf2,0xf8,0xa8,0x24,0x77,0x24,0xe2,0x89,0xce,0x95,0x86,0xe2,0x10,0x01,0x2e,0x99,0x5b,0xd7,0x2f,0x3b,0xb4,0xf9,0xd7,0x9b };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x2f,0x71,0x4d,0xdb,0xd4,0xad,0xf8,0x32,0x7d,0xc9,0x3c,0x72,0x3a,0xeb,0xff,0xfa };
    const uint8_t CIPHERTEXT[] = { 0x5d,0x11,0x96,0xda,0x8f,0x18,0x49,0x75,0xe2,0x40,0x94,0x9a,0x25,0x10,0x45,0x54 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-0", "[ECB][MCT][192][DECRYPT][n0]") {
    const uint8_t KEY[] = { 0x4b,0x97,0x58,0x57,0x01,0xc0,0x3f,0xbe,0xbd,0xfa,0x85,0x55,0x02,0x4f,0x58,0x9f,0x14,0x82,0xc5,0x8a,0x00,0xfd,0xd9,0xfd };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xc7,0xb6,0x58,0x1c,0xcc,0x88,0xf7,0xfc,0x26,0xd1,0x5d,0x27,0x31,0xe7,0x25,0x1b };
    const uint8_t CIPHERTEXT[] = { 0xd0,0xbd,0x0e,0x02,0xde,0xd1,0x55,0xe4,0x51,0x6b,0xe8,0x3f,0x42,0xd3,0x47,0xa4 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-1", "[ECB][MCT][192][DECRYPT][n1]") {
    const uint8_t KEY[] = { 0x3c,0x98,0xc8,0x03,0x36,0xe0,0xf1,0x3f,0x7a,0x4c,0xdd,0x49,0xce,0xc7,0xaf,0x63,0x32,0x53,0x98,0xad,0x31,0x1a,0xfc,0xe6 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x01,0xaa,0x95,0x7b,0x12,0xc5,0x96,0x51,0x14,0x84,0xed,0x77,0x05,0x76,0x6c,0x67 };
    const uint8_t CIPHERTEXT[] = { 0xc7,0xb6,0x58,0x1c,0xcc,0x88,0xf7,0xfc,0x26,0xd1,0x5d,0x27,0x31,0xe7,0x25,0x1b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-2", "[ECB][MCT][192][DECRYPT][n2]") {
    const uint8_t KEY[] = { 0x82,0x53,0x49,0x97,0x1b,0x37,0x0d,0xc4,0x7b,0xe6,0x48,0x32,0xdc,0x02,0x39,0x32,0x26,0xd7,0x75,0xda,0x34,0x6c,0x90,0x81 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xf9,0x8c,0x15,0xd9,0x3f,0x5d,0xae,0xf6,0x04,0x7c,0x27,0x60,0xc5,0xdf,0x55,0x40 };
    const uint8_t CIPHERTEXT[] = { 0x01,0xaa,0x95,0x7b,0x12,0xc5,0x96,0x51,0x14,0x84,0xed,0x77,0x05,0x76,0x6c,0x67 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-3", "[ECB][MCT][192][DECRYPT][n3]") {
    const uint8_t KEY[] = { 0xeb,0xb9,0x61,0x1c,0xf2,0x56,0x85,0xc3,0x82,0x6a,0x5d,0xeb,0xe3,0x5f,0x97,0xc4,0x22,0xab,0x52,0xba,0xf1,0xb3,0xc5,0xc1 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x5c,0x86,0x39,0x5c,0x6b,0x3e,0xd7,0xd3,0x0d,0x5e,0x3c,0xe3,0x33,0x1f,0xb3,0xed };
    const uint8_t CIPHERTEXT[] = { 0xf9,0x8c,0x15,0xd9,0x3f,0x5d,0xae,0xf6,0x04,0x7c,0x27,0x60,0xc5,0xdf,0x55,0x40 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-4", "[ECB][MCT][192][DECRYPT][n4]") {
    const uint8_t KEY[] = { 0xd8,0xd6,0xd5,0x91,0xe3,0x0f,0x4e,0x77,0xde,0xec,0x64,0xb7,0x88,0x61,0x40,0x17,0x2f,0xf5,0x6e,0x59,0xc2,0xac,0x76,0x2c };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x8e,0x8c,0xb7,0x68,0xb3,0x1e,0x65,0xd0,0x54,0xe9,0xdb,0x8d,0x19,0x86,0x20,0x84 };
    const uint8_t CIPHERTEXT[] = { 0x5c,0x86,0x39,0x5c,0x6b,0x3e,0xd7,0xd3,0x0d,0x5e,0x3c,0xe3,0x33,0x1f,0xb3,0xed };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-5", "[ECB][MCT][192][DECRYPT][n5]") {
    const uint8_t KEY[] = { 0x77,0x5a,0x6f,0x9a,0x0e,0x47,0x33,0xe4,0x50,0x60,0xd3,0xdf,0x3b,0x7f,0x25,0xc7,0x7b,0x1c,0xb5,0xd4,0xdb,0x2a,0x56,0xa8 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x96,0xca,0xb3,0x80,0x70,0xea,0x8e,0x37,0xc3,0xd4,0x37,0xa0,0x91,0xe9,0xe7,0x4c };
    const uint8_t CIPHERTEXT[] = { 0x8e,0x8c,0xb7,0x68,0xb3,0x1e,0x65,0xd0,0x54,0xe9,0xdb,0x8d,0x19,0x86,0x20,0x84 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-6", "[ECB][MCT][192][DECRYPT][n6]") {
    const uint8_t KEY[] = { 0x51,0x1e,0x53,0x6e,0xa1,0x13,0x42,0x9b,0xc6,0xaa,0x60,0x5f,0x4b,0x95,0xab,0xf0,0xb8,0xc8,0x82,0x74,0x4a,0xc3,0xb1,0xe4 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xf8,0x35,0x6c,0xfe,0x48,0x6b,0x23,0x75,0xc2,0xe2,0xe4,0x13,0x8b,0x28,0x5c,0xe7 };
    const uint8_t CIPHERTEXT[] = { 0x96,0xca,0xb3,0x80,0x70,0xea,0x8e,0x37,0xc3,0xd4,0x37,0xa0,0x91,0xe9,0xe7,0x4c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-7", "[ECB][MCT][192][DECRYPT][n7]") {
    const uint8_t KEY[] = { 0xc3,0xf9,0x4c,0x74,0xf8,0x6b,0x59,0x72,0x3e,0x9f,0x0c,0xa1,0x03,0xfe,0x88,0x85,0x7a,0x2a,0x66,0x67,0xc1,0xeb,0xed,0x03 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x6a,0x15,0x77,0x0b,0x29,0x96,0x0c,0x06,0x33,0x95,0xa7,0x0d,0xc3,0xcf,0x75,0x75 };
    const uint8_t CIPHERTEXT[] = { 0xf8,0x35,0x6c,0xfe,0x48,0x6b,0x23,0x75,0xc2,0xe2,0xe4,0x13,0x8b,0x28,0x5c,0xe7 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-8", "[ECB][MCT][192][DECRYPT][n8]") {
    const uint8_t KEY[] = { 0xa2,0x20,0xf1,0x97,0xee,0x7d,0xb5,0xa2,0x54,0x8a,0x7b,0xaa,0x2a,0x68,0x84,0x83,0x49,0xbf,0xc1,0x6a,0x02,0x24,0x98,0x76 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xd1,0x64,0x63,0x74,0x5d,0xa3,0x8e,0xf8,0x99,0x7e,0x20,0xe1,0x02,0xfb,0x85,0x73 };
    const uint8_t CIPHERTEXT[] = { 0x6a,0x15,0x77,0x0b,0x29,0x96,0x0c,0x06,0x33,0x95,0xa7,0x0d,0xc3,0xcf,0x75,0x75 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-9", "[ECB][MCT][192][DECRYPT][n9]") {
    const uint8_t KEY[] = { 0x18,0x7b,0xc7,0x71,0xe5,0x67,0xfb,0x12,0x85,0xee,0x18,0xde,0x77,0xcb,0x0a,0x7b,0xd0,0xc1,0xe1,0x8b,0x00,0xdf,0x1d,0x05 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x98,0xea,0x16,0x87,0x5a,0x9e,0x30,0x06,0xde,0x15,0x0e,0x93,0xbe,0x95,0x85,0xb8 };
    const uint8_t CIPHERTEXT[] = { 0xd1,0x64,0x63,0x74,0x5d,0xa3,0x8e,0xf8,0x99,0x7e,0x20,0xe1,0x02,0xfb,0x85,0x73 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-10", "[ECB][MCT][192][DECRYPT][n10]") {
    const uint8_t KEY[] = { 0x43,0x2a,0xb1,0x05,0x70,0x33,0xbb,0x04,0x1d,0x04,0x0e,0x59,0x2d,0x55,0x3a,0x7d,0x0e,0xd4,0xef,0x18,0xbe,0x4a,0x98,0xbd };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x9d,0x4c,0x05,0xcb,0x0c,0x5c,0xb5,0x43,0x51,0x5c,0xfd,0x05,0xa4,0xb9,0x00,0x04 };
    const uint8_t CIPHERTEXT[] = { 0x98,0xea,0x16,0x87,0x5a,0x9e,0x30,0x06,0xde,0x15,0x0e,0x93,0xbe,0x95,0x85,0xb8 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-11", "[ECB][MCT][192][DECRYPT][n11]") {
    const uint8_t KEY[] = { 0x64,0xa7,0xf5,0x43,0xe2,0xe2,0xa6,0x07,0x80,0x48,0x0b,0x92,0x21,0x09,0x8f,0x3e,0x5f,0x88,0x12,0x1d,0x1a,0xf3,0x98,0xb9 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x93,0xc4,0x63,0x8f,0x0f,0x76,0xb0,0xa4,0x24,0x81,0xc0,0x30,0x31,0x4c,0xa5,0x94 };
    const uint8_t CIPHERTEXT[] = { 0x9d,0x4c,0x05,0xcb,0x0c,0x5c,0xb5,0x43,0x51,0x5c,0xfd,0x05,0xa4,0xb9,0x00,0x04 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-12", "[ECB][MCT][192][DECRYPT][n12]") {
    const uint8_t KEY[] = { 0x75,0x5c,0x48,0xe6,0xe4,0x4a,0x95,0x6f,0x13,0x8c,0x68,0x1d,0x2e,0x7f,0x3f,0x9a,0x7b,0x09,0xd2,0x2d,0x2b,0xbf,0x3d,0x2d };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x8a,0xd1,0xd1,0x44,0x14,0x4c,0x85,0x30,0x21,0x8c,0x0e,0xdf,0x31,0x19,0xaa,0x82 };
    const uint8_t CIPHERTEXT[] = { 0x93,0xc4,0x63,0x8f,0x0f,0x76,0xb0,0xa4,0x24,0x81,0xc0,0x30,0x31,0x4c,0xa5,0x94 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-13", "[ECB][MCT][192][DECRYPT][n13]") {
    const uint8_t KEY[] = { 0x4f,0xf1,0x46,0x6b,0x9e,0x99,0x39,0xaf,0x99,0x5d,0xb9,0x59,0x3a,0x33,0xba,0xaa,0x5a,0x85,0xdc,0xf2,0x1a,0xa6,0x97,0xaf };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xa4,0x6e,0x11,0xcc,0xa3,0xb2,0xf9,0x8e,0x9f,0x73,0x60,0xd3,0x3d,0x23,0x61,0x89 };
    const uint8_t CIPHERTEXT[] = { 0x8a,0xd1,0xd1,0x44,0x14,0x4c,0x85,0x30,0x21,0x8c,0x0e,0xdf,0x31,0x19,0xaa,0x82 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-14", "[ECB][MCT][192][DECRYPT][n14]") {
    const uint8_t KEY[] = { 0xb2,0xe2,0x65,0xf1,0x32,0x66,0x03,0x5a,0x3d,0x33,0xa8,0x95,0x99,0x81,0x43,0x24,0xc5,0xf6,0xbc,0x21,0x27,0x85,0xf6,0x26 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x9e,0xce,0x35,0xfb,0x84,0x95,0x75,0x74,0xfd,0x35,0x3c,0xfa,0xc1,0x60,0x89,0x43 };
    const uint8_t CIPHERTEXT[] = { 0xa4,0x6e,0x11,0xcc,0xa3,0xb2,0xf9,0x8e,0x9f,0x73,0x60,0xd3,0x3d,0x23,0x61,0x89 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-15", "[ECB][MCT][192][DECRYPT][n15]") {
    const uint8_t KEY[] = { 0x10,0x2d,0x9a,0xfa,0x0e,0x70,0xb1,0xda,0xa3,0xfd,0x9d,0x6e,0x1d,0x14,0x36,0x50,0x38,0xc3,0x80,0xdb,0xe6,0xe5,0x7f,0x65 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x22,0x5c,0xe2,0xf6,0x98,0x73,0x92,0xaf,0xd1,0x92,0x1c,0x5e,0xec,0xd6,0xba,0x17 };
    const uint8_t CIPHERTEXT[] = { 0x9e,0xce,0x35,0xfb,0x84,0x95,0x75,0x74,0xfd,0x35,0x3c,0xfa,0xc1,0x60,0x89,0x43 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-16", "[ECB][MCT][192][DECRYPT][n16]") {
    const uint8_t KEY[] = { 0xc7,0x72,0x08,0x12,0x27,0x69,0x7c,0xc0,0x81,0xa1,0x7f,0x98,0x85,0x67,0xa4,0xff,0xe9,0x51,0x9c,0x85,0x0a,0x33,0xc5,0x72 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x85,0xfd,0x49,0x4b,0xfd,0x51,0x27,0xcf,0xf9,0x60,0x88,0xe0,0xb1,0x30,0xef,0x04 };
    const uint8_t CIPHERTEXT[] = { 0x22,0x5c,0xe2,0xf6,0x98,0x73,0x92,0xaf,0xd1,0x92,0x1c,0x5e,0xec,0xd6,0xba,0x17 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-17", "[ECB][MCT][192][DECRYPT][n17]") {
    const uint8_t KEY[] = { 0xc3,0x06,0x02,0x8a,0xea,0x2e,0x8f,0x1c,0x04,0x5c,0x36,0xd3,0x78,0x36,0x83,0x30,0x10,0x31,0x14,0x65,0xbb,0x03,0x2a,0x76 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x1e,0x69,0x30,0x09,0xbe,0x7a,0x86,0x8d,0xb9,0xe6,0xa4,0x95,0xc2,0xe2,0x38,0xf3 };
    const uint8_t CIPHERTEXT[] = { 0x85,0xfd,0x49,0x4b,0xfd,0x51,0x27,0xcf,0xf9,0x60,0x88,0xe0,0xb1,0x30,0xef,0x04 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-18", "[ECB][MCT][192][DECRYPT][n18]") {
    const uint8_t KEY[] = { 0x7a,0x64,0x6e,0xa7,0xab,0x6a,0x11,0x10,0x1a,0x35,0x06,0xda,0xc6,0x4c,0x05,0xbd,0xa9,0xd7,0xb0,0xf0,0x79,0xe1,0x12,0x85 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x49,0xf5,0x52,0x37,0xf9,0xa6,0x60,0x50,0xb7,0xe0,0x4e,0x66,0xa0,0xb4,0xbf,0x24 };
    const uint8_t CIPHERTEXT[] = { 0x1e,0x69,0x30,0x09,0xbe,0x7a,0x86,0x8d,0xb9,0xe6,0xa4,0x95,0xc2,0xe2,0x38,0xf3 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-19", "[ECB][MCT][192][DECRYPT][n19]") {
    const uint8_t KEY[] = { 0xdd,0xbe,0x30,0xe8,0x4a,0x14,0x07,0x79,0x53,0xc0,0x54,0xed,0x3f,0xea,0x65,0xed,0x1e,0x37,0xfe,0x96,0xd9,0x55,0xad,0xa1 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xb9,0x66,0xec,0x67,0x48,0xbd,0x87,0x60,0x46,0xbe,0x2b,0xe1,0x1a,0xbf,0xf8,0x2a };
    const uint8_t CIPHERTEXT[] = { 0x49,0xf5,0x52,0x37,0xf9,0xa6,0x60,0x50,0xb7,0xe0,0x4e,0x66,0xa0,0xb4,0xbf,0x24 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-20", "[ECB][MCT][192][DECRYPT][n20]") {
    const uint8_t KEY[] = { 0x55,0xe1,0x47,0x2b,0xe2,0xe1,0x73,0x9a,0xea,0xa6,0xb8,0x8a,0x77,0x57,0xe2,0x8d,0x58,0x89,0xd5,0x77,0xc3,0xea,0x55,0x8b };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x0f,0x6a,0x78,0xac,0x23,0xe6,0xea,0x2d,0x9f,0x42,0x32,0xe8,0x56,0x8c,0xea,0x97 };
    const uint8_t CIPHERTEXT[] = { 0xb9,0x66,0xec,0x67,0x48,0xbd,0x87,0x60,0x46,0xbe,0x2b,0xe1,0x1a,0xbf,0xf8,0x2a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-21", "[ECB][MCT][192][DECRYPT][n21]") {
    const uint8_t KEY[] = { 0x38,0x75,0x0e,0x9c,0x7a,0x72,0x9e,0x09,0xe5,0xcc,0xc0,0x26,0x54,0xb1,0x08,0xa0,0xc7,0xcb,0xe7,0x9f,0x95,0x66,0xbf,0x1c };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xc8,0x0b,0xfb,0xe5,0x8f,0xb9,0xb0,0x0c,0xd4,0x85,0x8f,0xd7,0x69,0xe3,0xcd,0x1d };
    const uint8_t CIPHERTEXT[] = { 0x0f,0x6a,0x78,0xac,0x23,0xe6,0xea,0x2d,0x9f,0x42,0x32,0xe8,0x56,0x8c,0xea,0x97 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-22", "[ECB][MCT][192][DECRYPT][n22]") {
    const uint8_t KEY[] = { 0xe4,0x5a,0xce,0x33,0xa0,0xf7,0x49,0x4c,0x2d,0xc7,0x3b,0xc3,0xdb,0x08,0xb8,0xac,0x13,0x4e,0x68,0x48,0xfc,0x85,0x72,0x01 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x91,0x8e,0x28,0xb7,0xa7,0xad,0x8a,0x37,0x0d,0x2f,0x26,0x0f,0x9f,0x7a,0x5f,0xec };
    const uint8_t CIPHERTEXT[] = { 0xc8,0x0b,0xfb,0xe5,0x8f,0xb9,0xb0,0x0c,0xd4,0x85,0x8f,0xd7,0x69,0xe3,0xcd,0x1d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-23", "[ECB][MCT][192][DECRYPT][n23]") {
    const uint8_t KEY[] = { 0xd2,0xa3,0xb2,0xca,0x94,0x19,0x50,0x1a,0xbc,0x49,0x13,0x74,0x7c,0xa5,0x32,0x9b,0x1e,0x61,0x4e,0x47,0x63,0xff,0x2d,0xed };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x59,0xd1,0x73,0x2f,0xc2,0x45,0x2e,0x53,0xee,0xda,0x07,0x90,0xb8,0x0a,0x24,0x4a };
    const uint8_t CIPHERTEXT[] = { 0x91,0x8e,0x28,0xb7,0xa7,0xad,0x8a,0x37,0x0d,0x2f,0x26,0x0f,0x9f,0x7a,0x5f,0xec };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-24", "[ECB][MCT][192][DECRYPT][n24]") {
    const uint8_t KEY[] = { 0x9d,0xae,0x1b,0x9e,0xaa,0x53,0xbd,0xfc,0xe5,0x98,0x60,0x5b,0xbe,0xe0,0x1c,0xc8,0xf0,0xbb,0x49,0xd7,0xdb,0xf5,0x09,0xa7 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xe7,0x4d,0x82,0x02,0x49,0x41,0x0c,0xd1,0xa3,0x92,0x87,0xdc,0x53,0x6e,0xd5,0xfc };
    const uint8_t CIPHERTEXT[] = { 0x59,0xd1,0x73,0x2f,0xc2,0x45,0x2e,0x53,0xee,0xda,0x07,0x90,0xb8,0x0a,0x24,0x4a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-25", "[ECB][MCT][192][DECRYPT][n25]") {
    const uint8_t KEY[] = { 0xe7,0x42,0x68,0xa3,0xd4,0x2e,0xdb,0x87,0x02,0xd5,0xe2,0x59,0xf7,0xa1,0x10,0x19,0x53,0x29,0xce,0x0b,0x88,0x9b,0xdc,0x5b };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x27,0xca,0x67,0x82,0x84,0x85,0xbe,0x98,0xa6,0xcd,0x22,0xd7,0x24,0xaf,0x53,0xb9 };
    const uint8_t CIPHERTEXT[] = { 0xe7,0x4d,0x82,0x02,0x49,0x41,0x0c,0xd1,0xa3,0x92,0x87,0xdc,0x53,0x6e,0xd5,0xfc };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-26", "[ECB][MCT][192][DECRYPT][n26]") {
    const uint8_t KEY[] = { 0x0d,0x79,0x3e,0x8f,0x7e,0x0e,0xa8,0x2d,0x25,0x1f,0x85,0xdb,0x73,0x24,0xae,0x81,0xf5,0xe4,0xec,0xdc,0xac,0x34,0x8f,0xe2 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x49,0x27,0xab,0x19,0x55,0x21,0x02,0x41,0x4e,0x39,0x12,0x6b,0x8a,0x91,0xc6,0x75 };
    const uint8_t CIPHERTEXT[] = { 0x27,0xca,0x67,0x82,0x84,0x85,0xbe,0x98,0xa6,0xcd,0x22,0xd7,0x24,0xaf,0x53,0xb9 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-27", "[ECB][MCT][192][DECRYPT][n27]") {
    const uint8_t KEY[] = { 0xc9,0x97,0x88,0xfd,0x8d,0xc7,0xa7,0x24,0x6c,0x38,0x2e,0xc2,0x26,0x05,0xac,0xc0,0xbb,0xdd,0xfe,0xb7,0x26,0xa5,0x49,0x97 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x99,0xea,0x6c,0xcf,0x10,0x0d,0x06,0x24,0x3b,0x45,0x99,0x8d,0x68,0xc9,0xb6,0xbc };
    const uint8_t CIPHERTEXT[] = { 0x49,0x27,0xab,0x19,0x55,0x21,0x02,0x41,0x4e,0x39,0x12,0x6b,0x8a,0x91,0xc6,0x75 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-28", "[ECB][MCT][192][DECRYPT][n28]") {
    const uint8_t KEY[] = { 0x73,0x34,0x25,0x87,0x2b,0xb7,0x17,0xed,0xf5,0xd2,0x42,0x0d,0x36,0x08,0xaa,0xe4,0x80,0x98,0x67,0x3a,0x4e,0x6c,0xff,0x2b };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xf0,0x29,0xe5,0x99,0x25,0xe6,0x7d,0xe1,0x78,0xb5,0xcb,0x9f,0xd1,0x87,0xf2,0xc6 };
    const uint8_t CIPHERTEXT[] = { 0x99,0xea,0x6c,0xcf,0x10,0x0d,0x06,0x24,0x3b,0x45,0x99,0x8d,0x68,0xc9,0xb6,0xbc };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-29", "[ECB][MCT][192][DECRYPT][n29]") {
    const uint8_t KEY[] = { 0xfc,0x02,0x10,0x65,0x17,0x29,0x9a,0x1e,0x05,0xfb,0xa7,0x94,0x13,0xee,0xd7,0x05,0xf8,0x2d,0xac,0xa5,0x9f,0xeb,0x0d,0xed };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x5f,0x9d,0xa9,0x5a,0xa4,0x24,0xd5,0xa6,0x5f,0x1f,0xf3,0xd9,0x97,0x69,0x52,0x2d };
    const uint8_t CIPHERTEXT[] = { 0xf0,0x29,0xe5,0x99,0x25,0xe6,0x7d,0xe1,0x78,0xb5,0xcb,0x9f,0xd1,0x87,0xf2,0xc6 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-30", "[ECB][MCT][192][DECRYPT][n30]") {
    const uint8_t KEY[] = { 0x9b,0x0e,0xfe,0x0e,0x5f,0x4f,0x4e,0x39,0x5a,0x66,0x0e,0xce,0xb7,0xca,0x02,0xa3,0xa7,0x32,0x5f,0x7c,0x08,0x82,0x5f,0xc0 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xa2,0x0f,0x23,0x2b,0xb3,0x55,0x37,0x0d,0xf2,0x7f,0x55,0xbb,0x53,0x46,0x9b,0x40 };
    const uint8_t CIPHERTEXT[] = { 0x5f,0x9d,0xa9,0x5a,0xa4,0x24,0xd5,0xa6,0x5f,0x1f,0xf3,0xd9,0x97,0x69,0x52,0x2d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-31", "[ECB][MCT][192][DECRYPT][n31]") {
    const uint8_t KEY[] = { 0x50,0x2b,0x27,0x02,0x05,0x13,0x3d,0x51,0xf8,0x69,0x2d,0xe5,0x04,0x9f,0x35,0xae,0x55,0x4d,0x0a,0xc7,0x5b,0xc4,0xc4,0x80 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x32,0xe5,0xd1,0x3e,0x44,0xb2,0xe6,0x79,0x52,0xd8,0xef,0x98,0xaf,0x19,0xa4,0xd3 };
    const uint8_t CIPHERTEXT[] = { 0xa2,0x0f,0x23,0x2b,0xb3,0x55,0x37,0x0d,0xf2,0x7f,0x55,0xbb,0x53,0x46,0x9b,0x40 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-32", "[ECB][MCT][192][DECRYPT][n32]") {
    const uint8_t KEY[] = { 0xd1,0xca,0xc8,0xa8,0x2a,0x2e,0x3a,0xb3,0xca,0x8c,0xfc,0xdb,0x40,0x2d,0xd3,0xd7,0x07,0x95,0xe5,0x5f,0xf4,0xdd,0x60,0x53 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x68,0x8a,0xb3,0xed,0x2b,0x37,0x34,0x67,0xbc,0x54,0x7b,0xe2,0xbf,0x51,0x98,0x46 };
    const uint8_t CIPHERTEXT[] = { 0x32,0xe5,0xd1,0x3e,0x44,0xb2,0xe6,0x79,0x52,0xd8,0xef,0x98,0xaf,0x19,0xa4,0xd3 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-33", "[ECB][MCT][192][DECRYPT][n33]") {
    const uint8_t KEY[] = { 0x7e,0x4a,0xf6,0x62,0x9e,0xfd,0x55,0xdf,0xa2,0x06,0x4f,0x36,0x6b,0x1a,0xe7,0xb0,0xbb,0xc1,0x9e,0xbd,0x4b,0x8c,0xf8,0x15 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x1a,0x88,0xd4,0x5d,0xe2,0x6c,0xab,0x11,0x8e,0x86,0xfe,0x70,0x89,0xd8,0x18,0xd0 };
    const uint8_t CIPHERTEXT[] = { 0x68,0x8a,0xb3,0xed,0x2b,0x37,0x34,0x67,0xbc,0x54,0x7b,0xe2,0xbf,0x51,0x98,0x46 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-34", "[ECB][MCT][192][DECRYPT][n34]") {
    const uint8_t KEY[] = { 0x21,0x6c,0xd4,0xed,0x3d,0x38,0xe6,0x8c,0xb8,0x8e,0x9b,0x6b,0x89,0x76,0x4c,0xa1,0x35,0x47,0x60,0xcd,0xc2,0x54,0xe0,0xc5 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x8d,0x15,0x4a,0x7e,0xbc,0x0e,0x6f,0xd2,0xd6,0xd7,0x68,0x6d,0x9b,0x94,0x92,0xad };
    const uint8_t CIPHERTEXT[] = { 0x1a,0x88,0xd4,0x5d,0xe2,0x6c,0xab,0x11,0x8e,0x86,0xfe,0x70,0x89,0xd8,0x18,0xd0 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-35", "[ECB][MCT][192][DECRYPT][n35]") {
    const uint8_t KEY[] = { 0xed,0xf6,0xf3,0xe4,0xf3,0x23,0xdc,0x91,0x35,0x9b,0xd1,0x15,0x35,0x78,0x23,0x73,0xe3,0x90,0x08,0xa0,0x59,0xc0,0x72,0x68 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xbe,0x46,0xea,0xd5,0xf4,0x31,0xee,0x2c,0x6d,0x17,0x95,0xf8,0x52,0x55,0x8e,0xd7 };
    const uint8_t CIPHERTEXT[] = { 0x8d,0x15,0x4a,0x7e,0xbc,0x0e,0x6f,0xd2,0xd6,0xd7,0x68,0x6d,0x9b,0x94,0x92,0xad };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-36", "[ECB][MCT][192][DECRYPT][n36]") {
    const uint8_t KEY[] = { 0x94,0xaf,0xb2,0xde,0x65,0x6d,0xaf,0x68,0x8b,0xdd,0x3b,0xc0,0xc1,0x49,0xcd,0x5f,0x8e,0x87,0x9d,0x58,0x0b,0x95,0xfc,0xbf };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x9f,0x1e,0xcd,0x98,0x39,0xab,0xd6,0xab,0xbe,0xcb,0xa8,0x9a,0x71,0x40,0x5c,0x76 };
    const uint8_t CIPHERTEXT[] = { 0xbe,0x46,0xea,0xd5,0xf4,0x31,0xee,0x2c,0x6d,0x17,0x95,0xf8,0x52,0x55,0x8e,0xd7 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-37", "[ECB][MCT][192][DECRYPT][n37]") {
    const uint8_t KEY[] = { 0x70,0xbe,0xa4,0x08,0x07,0xc9,0x03,0xc7,0x14,0xc3,0xf6,0x58,0xf8,0xe2,0x1b,0xf4,0x30,0x4c,0x35,0xc2,0x7a,0xd5,0xa0,0xc9 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xf5,0xf3,0x35,0x14,0x2d,0x71,0xd3,0x5a,0x47,0x23,0xbb,0xec,0xe7,0xa3,0x9c,0x43 };
    const uint8_t CIPHERTEXT[] = { 0x9f,0x1e,0xcd,0x98,0x39,0xab,0xd6,0xab,0xbe,0xcb,0xa8,0x9a,0x71,0x40,0x5c,0x76 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-38", "[ECB][MCT][192][DECRYPT][n38]") {
    const uint8_t KEY[] = { 0xb3,0x23,0x69,0xcb,0x5a,0x16,0x11,0xd7,0xe1,0x30,0xc3,0x4c,0xd5,0x93,0xc8,0xae,0x77,0x6f,0x8e,0x2e,0x9d,0x76,0x3c,0x8a };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x55,0xac,0xe2,0xaa,0x46,0x1a,0xf1,0x0d,0x10,0x43,0x6e,0x52,0x9a,0x2d,0x8d,0x85 };
    const uint8_t CIPHERTEXT[] = { 0xf5,0xf3,0x35,0x14,0x2d,0x71,0xd3,0x5a,0x47,0x23,0xbb,0xec,0xe7,0xa3,0x9c,0x43 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-39", "[ECB][MCT][192][DECRYPT][n39]") {
    const uint8_t KEY[] = { 0xf6,0x41,0x2c,0xbd,0x1f,0x98,0xe4,0x45,0xb4,0x9c,0x21,0xe6,0x93,0x89,0x39,0xa3,0x67,0x2c,0xe0,0x7c,0x07,0x5b,0xb1,0x0f };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xf6,0x67,0x0a,0x65,0x76,0xaa,0x2d,0x20,0xb6,0x34,0x82,0xaa,0xb2,0x6f,0x7c,0x82 };
    const uint8_t CIPHERTEXT[] = { 0x55,0xac,0xe2,0xaa,0x46,0x1a,0xf1,0x0d,0x10,0x43,0x6e,0x52,0x9a,0x2d,0x8d,0x85 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-40", "[ECB][MCT][192][DECRYPT][n40]") {
    const uint8_t KEY[] = { 0xea,0x7c,0xf5,0x5a,0x9e,0x0f,0xcb,0x0d,0x42,0xfb,0x2b,0x83,0xe5,0x23,0x14,0x83,0xd1,0x18,0x62,0xd6,0xb5,0x34,0xcd,0x8d };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x93,0xe8,0x1b,0x98,0x66,0x97,0x9a,0x0a,0xdc,0x57,0x3d,0x38,0x00,0x65,0xf1,0x8e };
    const uint8_t CIPHERTEXT[] = { 0xf6,0x67,0x0a,0x65,0x76,0xaa,0x2d,0x20,0xb6,0x34,0x82,0xaa,0xb2,0x6f,0x7c,0x82 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-41", "[ECB][MCT][192][DECRYPT][n41]") {
    const uint8_t KEY[] = { 0x1a,0x5d,0x1d,0xe4,0x46,0x8e,0xd5,0xe5,0xd1,0x13,0x30,0x1b,0x83,0xb4,0x8e,0x89,0x0d,0x4f,0x5f,0xee,0xb5,0x51,0x3c,0x03 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x32,0x40,0x24,0x00,0x7e,0xda,0xd9,0xa3,0xe4,0xb4,0x35,0xb2,0x12,0xbf,0xec,0x88 };
    const uint8_t CIPHERTEXT[] = { 0x93,0xe8,0x1b,0x98,0x66,0x97,0x9a,0x0a,0xdc,0x57,0x3d,0x38,0x00,0x65,0xf1,0x8e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-42", "[ECB][MCT][192][DECRYPT][n42]") {
    const uint8_t KEY[] = { 0x8e,0xd3,0xc1,0x88,0x37,0x59,0x3a,0xf6,0xe3,0x53,0x14,0x1b,0xfd,0x6e,0x57,0x2a,0xe9,0xfb,0x6a,0x5c,0xa7,0xee,0xd0,0x8b };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x5e,0xb5,0xe7,0x1f,0x06,0x99,0x2c,0x19,0x98,0xae,0x0c,0xf0,0x3d,0xbc,0x9d,0xce };
    const uint8_t CIPHERTEXT[] = { 0x32,0x40,0x24,0x00,0x7e,0xda,0xd9,0xa3,0xe4,0xb4,0x35,0xb2,0x12,0xbf,0xec,0x88 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-43", "[ECB][MCT][192][DECRYPT][n43]") {
    const uint8_t KEY[] = { 0xe5,0xd6,0xd1,0x56,0x6d,0x3c,0x9a,0x17,0xbd,0xe6,0xf3,0x04,0xfb,0xf7,0x7b,0x33,0x71,0x55,0x66,0xac,0x9a,0x52,0x4d,0x45 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xa8,0x3f,0xe8,0xf2,0x26,0xad,0x5e,0xe5,0xb3,0x58,0xfa,0xc0,0x3a,0x09,0x28,0x82 };
    const uint8_t CIPHERTEXT[] = { 0x5e,0xb5,0xe7,0x1f,0x06,0x99,0x2c,0x19,0x98,0xae,0x0c,0xf0,0x3d,0xbc,0x9d,0xce };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-44", "[ECB][MCT][192][DECRYPT][n44]") {
    const uint8_t KEY[] = { 0xd5,0xec,0x4f,0x5d,0xf3,0x02,0xbf,0xa5,0x15,0xd9,0x1b,0xf6,0xdd,0x5a,0x25,0xd6,0xc2,0x0d,0x9c,0x6c,0xa0,0x5b,0x65,0xc7 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x72,0x36,0x0b,0x4f,0xcd,0x12,0x93,0xa3,0x6e,0xd0,0xbb,0x44,0x21,0x3d,0xa8,0xb9 };
    const uint8_t CIPHERTEXT[] = { 0xa8,0x3f,0xe8,0xf2,0x26,0xad,0x5e,0xe5,0xb3,0x58,0xfa,0xc0,0x3a,0x09,0x28,0x82 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-45", "[ECB][MCT][192][DECRYPT][n45]") {
    const uint8_t KEY[] = { 0x50,0x25,0x73,0x06,0xe7,0x57,0xd7,0x65,0x67,0xef,0x10,0xb9,0x10,0x48,0xb6,0x75,0xac,0xdd,0x27,0x28,0x81,0x66,0xcd,0x7e };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x98,0x21,0x19,0x60,0x0a,0x3e,0x73,0xdf,0xf3,0x35,0x83,0x55,0x81,0x34,0xbc,0xf0 };
    const uint8_t CIPHERTEXT[] = { 0x72,0x36,0x0b,0x4f,0xcd,0x12,0x93,0xa3,0x6e,0xd0,0xbb,0x44,0x21,0x3d,0xa8,0xb9 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-46", "[ECB][MCT][192][DECRYPT][n46]") {
    const uint8_t KEY[] = { 0x64,0xb3,0x94,0xf7,0x98,0x41,0x5f,0xbc,0xff,0xce,0x09,0xd9,0x1a,0x76,0xc5,0xaa,0x5f,0xe8,0xa4,0x7d,0x00,0x52,0x71,0x8e };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x0c,0x33,0x66,0x9b,0x84,0xd7,0x14,0x95,0x97,0x85,0xb3,0x7d,0x58,0x6b,0xb3,0x55 };
    const uint8_t CIPHERTEXT[] = { 0x98,0x21,0x19,0x60,0x0a,0x3e,0x73,0xdf,0xf3,0x35,0x83,0x55,0x81,0x34,0xbc,0xf0 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-47", "[ECB][MCT][192][DECRYPT][n47]") {
    const uint8_t KEY[] = { 0xcb,0xaf,0x8d,0x92,0xf1,0x8e,0xfe,0x87,0xf3,0xfd,0x6f,0x42,0x9e,0xa1,0xd1,0x3f,0xc8,0x6d,0x17,0x00,0x58,0x39,0xc2,0xdb };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x9f,0xc2,0xfd,0x51,0xbb,0xef,0xd7,0x0f,0xe7,0xce,0x0c,0x13,0xaf,0x3d,0x2a,0xce };
    const uint8_t CIPHERTEXT[] = { 0x0c,0x33,0x66,0x9b,0x84,0xd7,0x14,0x95,0x97,0x85,0xb3,0x7d,0x58,0x6b,0xb3,0x55 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-48", "[ECB][MCT][192][DECRYPT][n48]") {
    const uint8_t KEY[] = { 0x80,0xbb,0x74,0x5f,0xb5,0xb9,0xcb,0x61,0x6c,0x3f,0x92,0x13,0x25,0x4e,0x06,0x30,0x2f,0xa3,0x1b,0x13,0xf7,0x04,0xe8,0x15 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xaf,0x4a,0x45,0x66,0xe5,0x56,0xa7,0xf2,0xdd,0x34,0x77,0xa5,0x3c,0x09,0x44,0x98 };
    const uint8_t CIPHERTEXT[] = { 0x9f,0xc2,0xfd,0x51,0xbb,0xef,0xd7,0x0f,0xe7,0xce,0x0c,0x13,0xaf,0x3d,0x2a,0xce };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-49", "[ECB][MCT][192][DECRYPT][n49]") {
    const uint8_t KEY[] = { 0xb5,0xd9,0x43,0x40,0xd5,0x85,0x2f,0x04,0xc3,0x75,0xd7,0x75,0xc0,0x18,0xa1,0xc2,0xf2,0x97,0x6c,0xb6,0xcb,0x0d,0xac,0x8d };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x81,0x07,0xca,0x3f,0xc8,0x33,0xfe,0xe7,0x45,0x01,0xf2,0xa4,0x2f,0x08,0x84,0x01 };
    const uint8_t CIPHERTEXT[] = { 0xaf,0x4a,0x45,0x66,0xe5,0x56,0xa7,0xf2,0xdd,0x34,0x77,0xa5,0x3c,0x09,0x44,0x98 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-50", "[ECB][MCT][192][DECRYPT][n50]") {
    const uint8_t KEY[] = { 0x23,0x34,0x1a,0x3b,0x64,0x90,0x10,0xc9,0x42,0x72,0x1d,0x4a,0x08,0x2b,0x5f,0x25,0xb7,0x96,0x9e,0x12,0xe4,0x05,0x28,0x8c };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x71,0x43,0x41,0x18,0x3a,0x67,0xb9,0x5a,0xbc,0xf9,0xbc,0x99,0x2d,0x1a,0xa2,0x90 };
    const uint8_t CIPHERTEXT[] = { 0x81,0x07,0xca,0x3f,0xc8,0x33,0xfe,0xe7,0x45,0x01,0xf2,0xa4,0x2f,0x08,0x84,0x01 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-51", "[ECB][MCT][192][DECRYPT][n51]") {
    const uint8_t KEY[] = { 0x95,0x50,0x75,0xd1,0x66,0x64,0x49,0x83,0x33,0x31,0x5c,0x52,0x32,0x4c,0xe6,0x7f,0x0b,0x6f,0x22,0x8b,0xc9,0x1f,0x8a,0x1c };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x56,0x42,0x89,0xf3,0xac,0x30,0xd6,0xe2,0x7d,0xde,0x43,0x08,0xee,0x56,0x37,0xab };
    const uint8_t CIPHERTEXT[] = { 0x71,0x43,0x41,0x18,0x3a,0x67,0xb9,0x5a,0xbc,0xf9,0xbc,0x99,0x2d,0x1a,0xa2,0x90 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-52", "[ECB][MCT][192][DECRYPT][n52]") {
    const uint8_t KEY[] = { 0x9e,0x54,0x93,0xcf,0x59,0xa7,0xd0,0xe7,0x65,0x73,0xd5,0xa1,0x9e,0x7c,0x30,0x9d,0x76,0xb1,0x61,0x83,0x27,0x49,0xbd,0xb7 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x80,0x54,0x24,0xbe,0x37,0xb7,0xf0,0xb5,0x49,0x8a,0xb5,0xbf,0x89,0x04,0xf4,0x68 };
    const uint8_t CIPHERTEXT[] = { 0x56,0x42,0x89,0xf3,0xac,0x30,0xd6,0xe2,0x7d,0xde,0x43,0x08,0xee,0x56,0x37,0xab };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-53", "[ECB][MCT][192][DECRYPT][n53]") {
    const uint8_t KEY[] = { 0x0e,0x8d,0xd0,0x53,0x8b,0xcf,0xa4,0x48,0xe5,0x27,0xf1,0x1f,0xa9,0xcb,0xc0,0x28,0x3f,0x3b,0xd4,0x3c,0xae,0x4d,0x49,0xdf };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x79,0x35,0x54,0xc1,0xcc,0x56,0x5f,0x00,0xf9,0xf2,0x12,0x2b,0xd0,0x66,0x72,0xaa };
    const uint8_t CIPHERTEXT[] = { 0x80,0x54,0x24,0xbe,0x37,0xb7,0xf0,0xb5,0x49,0x8a,0xb5,0xbf,0x89,0x04,0xf4,0x68 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-54", "[ECB][MCT][192][DECRYPT][n54]") {
    const uint8_t KEY[] = { 0xf2,0x53,0x72,0x34,0x71,0x59,0x0c,0x24,0x9c,0x12,0xa5,0xde,0x65,0x9d,0x9f,0x28,0xc6,0xc9,0xc6,0x17,0x7e,0x2b,0x3b,0x75 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xb8,0x9f,0xee,0xe1,0x7d,0x71,0xa4,0x52,0xb4,0x6e,0x46,0x83,0xcf,0xdd,0xc0,0xba };
    const uint8_t CIPHERTEXT[] = { 0x79,0x35,0x54,0xc1,0xcc,0x56,0x5f,0x00,0xf9,0xf2,0x12,0x2b,0xd0,0x66,0x72,0xaa };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-55", "[ECB][MCT][192][DECRYPT][n55]") {
    const uint8_t KEY[] = { 0x14,0x78,0x1c,0x9f,0x73,0x22,0x78,0x25,0x24,0x8d,0x4b,0x3f,0x18,0xec,0x3b,0x7a,0x72,0xa7,0x80,0x94,0xb1,0xf6,0xfb,0xcf };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x73,0x7c,0x41,0x8d,0x35,0x81,0x25,0x56,0xf6,0xd2,0x6e,0xbf,0x91,0x02,0x8a,0xd7 };
    const uint8_t CIPHERTEXT[] = { 0xb8,0x9f,0xee,0xe1,0x7d,0x71,0xa4,0x52,0xb4,0x6e,0x46,0x83,0xcf,0xdd,0xc0,0xba };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-56", "[ECB][MCT][192][DECRYPT][n56]") {
    const uint8_t KEY[] = { 0xc4,0x70,0x6d,0x64,0x14,0xa3,0x59,0x46,0x57,0xf1,0x0a,0xb2,0x2d,0x6d,0x1e,0x2c,0x84,0x75,0xee,0x2b,0x20,0xf4,0x71,0x18 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xc2,0xe3,0x52,0xec,0x71,0x2b,0x84,0xfa,0x74,0xf9,0x82,0x54,0x74,0x0d,0x08,0x47 };
    const uint8_t CIPHERTEXT[] = { 0x73,0x7c,0x41,0x8d,0x35,0x81,0x25,0x56,0xf6,0xd2,0x6e,0xbf,0x91,0x02,0x8a,0xd7 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-57", "[ECB][MCT][192][DECRYPT][n57]") {
    const uint8_t KEY[] = { 0x74,0xfa,0xba,0xf9,0x65,0x45,0xe7,0x19,0x95,0x12,0x58,0x5e,0x5c,0x46,0x9a,0xd6,0xf0,0x8c,0x6c,0x7f,0x54,0xf9,0x79,0x5f };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xe0,0x9f,0x8d,0x7c,0xc0,0xe4,0xd7,0xf4,0xef,0xb6,0x5e,0x10,0x52,0x95,0x92,0xe5 };
    const uint8_t CIPHERTEXT[] = { 0xc2,0xe3,0x52,0xec,0x71,0x2b,0x84,0xfa,0x74,0xf9,0x82,0x54,0x74,0x0d,0x08,0x47 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-58", "[ECB][MCT][192][DECRYPT][n58]") {
    const uint8_t KEY[] = { 0xdb,0xfa,0x75,0xaa,0xd7,0xf1,0xad,0x19,0x75,0x8d,0xd5,0x22,0x9c,0xa2,0x4d,0x22,0x1f,0x3a,0x32,0x6f,0x06,0x6c,0xeb,0xba };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x8a,0x89,0x11,0x57,0x9e,0x11,0xd8,0x58,0xbd,0x4e,0x33,0x6b,0x81,0x25,0xfa,0x6f };
    const uint8_t CIPHERTEXT[] = { 0xe0,0x9f,0x8d,0x7c,0xc0,0xe4,0xd7,0xf4,0xef,0xb6,0x5e,0x10,0x52,0x95,0x92,0xe5 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-59", "[ECB][MCT][192][DECRYPT][n59]") {
    const uint8_t KEY[] = { 0xad,0x8e,0xa3,0x06,0xbb,0x3e,0xb7,0x7b,0xff,0x04,0xc4,0x75,0x02,0xb3,0x95,0x7a,0xa2,0x74,0x01,0x04,0x87,0x49,0x11,0xd5 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x3b,0x1f,0x39,0x6e,0xae,0x6a,0xe5,0x39,0x26,0xe9,0x60,0x7f,0xb4,0xb6,0xe1,0xd6 };
    const uint8_t CIPHERTEXT[] = { 0x8a,0x89,0x11,0x57,0x9e,0x11,0xd8,0x58,0xbd,0x4e,0x33,0x6b,0x81,0x25,0xfa,0x6f };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-60", "[ECB][MCT][192][DECRYPT][n60]") {
    const uint8_t KEY[] = { 0x2b,0x20,0x45,0x20,0xb1,0x38,0x9d,0x5b,0xc4,0x1b,0xfd,0x1b,0xac,0xd9,0x70,0x43,0x84,0x9d,0x61,0x7b,0x33,0xff,0xf0,0x03 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x6d,0x06,0xfe,0x25,0x6d,0x84,0xab,0x01,0x12,0x11,0x94,0x25,0xd7,0x0d,0x5a,0xa6 };
    const uint8_t CIPHERTEXT[] = { 0x3b,0x1f,0x39,0x6e,0xae,0x6a,0xe5,0x39,0x26,0xe9,0x60,0x7f,0xb4,0xb6,0xe1,0xd6 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-61", "[ECB][MCT][192][DECRYPT][n61]") {
    const uint8_t KEY[] = { 0x86,0xd7,0x61,0xe0,0x20,0xa4,0x6b,0x76,0xa9,0x1d,0x03,0x3e,0xc1,0x5d,0xdb,0x42,0x96,0x8c,0xf5,0x5e,0xe4,0xf2,0xaa,0xa5 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x53,0x7d,0xd3,0x00,0x0f,0xdf,0xf6,0x71,0x07,0x36,0x2d,0xa6,0x5c,0x95,0xf1,0x01 };
    const uint8_t CIPHERTEXT[] = { 0x6d,0x06,0xfe,0x25,0x6d,0x84,0xab,0x01,0x12,0x11,0x94,0x25,0xd7,0x0d,0x5a,0xa6 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-62", "[ECB][MCT][192][DECRYPT][n62]") {
    const uint8_t KEY[] = { 0xbe,0xe0,0x86,0x1f,0x51,0x13,0x6b,0xd0,0xfa,0x60,0xd0,0x3e,0xce,0x82,0x2d,0x33,0x91,0xba,0xd8,0xf8,0xb8,0x67,0x5b,0xa4 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x28,0x43,0xb7,0xb7,0x10,0x7b,0x13,0x90,0xbe,0x39,0x31,0x37,0xe3,0xe2,0x66,0xc9 };
    const uint8_t CIPHERTEXT[] = { 0x53,0x7d,0xd3,0x00,0x0f,0xdf,0xf6,0x71,0x07,0x36,0x2d,0xa6,0x5c,0x95,0xf1,0x01 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-63", "[ECB][MCT][192][DECRYPT][n63]") {
    const uint8_t KEY[] = { 0x87,0x06,0xa8,0xa8,0xfa,0xb0,0x2e,0x3d,0xd2,0x23,0x67,0x89,0xde,0xf9,0x3e,0xa3,0x2f,0x83,0xe9,0xcf,0x5b,0x85,0x3d,0x6d };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xd5,0xfa,0xe7,0x3a,0x89,0x40,0xec,0x3c,0x1b,0xeb,0xe8,0xa5,0xe4,0xfa,0x04,0x23 };
    const uint8_t CIPHERTEXT[] = { 0x28,0x43,0xb7,0xb7,0x10,0x7b,0x13,0x90,0xbe,0x39,0x31,0x37,0xe3,0xe2,0x66,0xc9 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-64", "[ECB][MCT][192][DECRYPT][n64]") {
    const uint8_t KEY[] = { 0x43,0xab,0x0c,0x15,0x09,0x50,0x5c,0x74,0x07,0xd9,0x80,0xb3,0x57,0xb9,0xd2,0x9f,0x34,0x68,0x01,0x6a,0xbf,0x7f,0x39,0x4e };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x63,0xa9,0xa8,0xc9,0x9a,0x6a,0x89,0x84,0xdc,0x69,0x75,0x77,0x2d,0xd0,0xbe,0xac };
    const uint8_t CIPHERTEXT[] = { 0xd5,0xfa,0xe7,0x3a,0x89,0x40,0xec,0x3c,0x1b,0xeb,0xe8,0xa5,0xe4,0xfa,0x04,0x23 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-65", "[ECB][MCT][192][DECRYPT][n65]") {
    const uint8_t KEY[] = { 0xfb,0x0d,0xbb,0x8c,0xab,0x3b,0x89,0xb1,0x64,0x70,0x28,0x7a,0xcd,0xd3,0x5b,0x1b,0xe8,0x01,0x74,0x1d,0x92,0xaf,0x87,0xe2 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x4c,0x7b,0x28,0xc6,0x9c,0x39,0xc7,0xee,0xa1,0x35,0x9b,0xa2,0xc1,0x67,0x26,0x6a };
    const uint8_t CIPHERTEXT[] = { 0x63,0xa9,0xa8,0xc9,0x9a,0x6a,0x89,0x84,0xdc,0x69,0x75,0x77,0x2d,0xd0,0xbe,0xac };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-66", "[ECB][MCT][192][DECRYPT][n66]") {
    const uint8_t KEY[] = { 0x1a,0xbc,0x60,0x31,0xa8,0x4a,0x59,0x08,0x28,0x0b,0x00,0xbc,0x51,0xea,0x9c,0xf5,0x49,0x34,0xef,0xbf,0x53,0xc8,0xa1,0x88 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x07,0x60,0x24,0xc1,0x1b,0xf6,0x96,0x87,0x4d,0x79,0x18,0x13,0x88,0x76,0x85,0xe7 };
    const uint8_t CIPHERTEXT[] = { 0x4c,0x7b,0x28,0xc6,0x9c,0x39,0xc7,0xee,0xa1,0x35,0x9b,0xa2,0xc1,0x67,0x26,0x6a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-67", "[ECB][MCT][192][DECRYPT][n67]") {
    const uint8_t KEY[] = { 0x74,0x67,0x18,0xf1,0x46,0xca,0xd3,0xd9,0x2f,0x6b,0x24,0x7d,0x4a,0x1c,0x0a,0x72,0x04,0x4d,0xf7,0xac,0xdb,0xbe,0x24,0x6f };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xb4,0x13,0xf1,0x48,0xdc,0x94,0xe0,0x52,0x5a,0xd4,0x80,0x0f,0xb5,0x3d,0xfc,0x64 };
    const uint8_t CIPHERTEXT[] = { 0x07,0x60,0x24,0xc1,0x1b,0xf6,0x96,0x87,0x4d,0x79,0x18,0x13,0x88,0x76,0x85,0xe7 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-68", "[ECB][MCT][192][DECRYPT][n68]") {
    const uint8_t KEY[] = { 0x65,0xa4,0x22,0xdc,0xcc,0x0f,0x07,0x77,0x9b,0x78,0xd5,0x35,0x96,0x88,0xea,0x20,0x5e,0x99,0x77,0xa3,0x6e,0x83,0xd8,0x0b };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xbd,0x94,0x77,0x62,0x97,0xb1,0x68,0xe8,0x62,0xd3,0xaf,0xd0,0x66,0x9a,0x26,0x68 };
    const uint8_t CIPHERTEXT[] = { 0xb4,0x13,0xf1,0x48,0xdc,0x94,0xe0,0x52,0x5a,0xd4,0x80,0x0f,0xb5,0x3d,0xfc,0x64 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-69", "[ECB][MCT][192][DECRYPT][n69]") {
    const uint8_t KEY[] = { 0x6d,0x9f,0xc6,0xa3,0x83,0x9c,0x40,0x14,0x26,0xec,0xa2,0x57,0x01,0x39,0x82,0xc8,0x3c,0x4a,0xd8,0x73,0x08,0x19,0xfe,0x63 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xa3,0x83,0xeb,0x81,0x2e,0x9d,0x2a,0xd7,0xd0,0x4e,0xf0,0x5b,0xee,0xbc,0x66,0x3c };
    const uint8_t CIPHERTEXT[] = { 0xbd,0x94,0x77,0x62,0x97,0xb1,0x68,0xe8,0x62,0xd3,0xaf,0xd0,0x66,0x9a,0x26,0x68 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-70", "[ECB][MCT][192][DECRYPT][n70]") {
    const uint8_t KEY[] = { 0x31,0xe8,0xba,0x40,0x17,0x1b,0xe0,0xcc,0x85,0x6f,0x49,0xd6,0x2f,0xa4,0xa8,0x1f,0xec,0x04,0x28,0x28,0xe6,0xa5,0x98,0x5f };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x12,0x58,0x33,0xc5,0xa9,0x64,0x73,0x3d,0x24,0xca,0x84,0xae,0x57,0x3e,0x53,0x7e };
    const uint8_t CIPHERTEXT[] = { 0xa3,0x83,0xeb,0x81,0x2e,0x9d,0x2a,0xd7,0xd0,0x4e,0xf0,0x5b,0xee,0xbc,0x66,0x3c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-71", "[ECB][MCT][192][DECRYPT][n71]") {
    const uint8_t KEY[] = { 0xa1,0xbd,0x65,0x66,0x77,0x24,0x4e,0x35,0x97,0x37,0x7a,0x13,0x86,0xc0,0xdb,0x22,0xc8,0xce,0xac,0x86,0xb1,0x9b,0xcb,0x21 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xd6,0x59,0x7f,0xe3,0x68,0x7c,0x9d,0xc2,0xf6,0x08,0x7a,0xd4,0x8b,0xb2,0xab,0x18 };
    const uint8_t CIPHERTEXT[] = { 0x12,0x58,0x33,0xc5,0xa9,0x64,0x73,0x3d,0x24,0xca,0x84,0xae,0x57,0x3e,0x53,0x7e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-72", "[ECB][MCT][192][DECRYPT][n72]") {
    const uint8_t KEY[] = { 0x94,0x67,0xdf,0x27,0xc2,0xb9,0x0c,0xa7,0x41,0x6e,0x05,0xf0,0xee,0xbc,0x46,0xe0,0x3e,0xc6,0xd6,0x52,0x3a,0x29,0x60,0x39 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xfd,0x6a,0xbd,0xb2,0x79,0x3f,0x84,0x9b,0xed,0xea,0x16,0x0e,0x34,0xab,0x1a,0x9d };
    const uint8_t CIPHERTEXT[] = { 0xd6,0x59,0x7f,0xe3,0x68,0x7c,0x9d,0xc2,0xf6,0x08,0x7a,0xd4,0x8b,0xb2,0xab,0x18 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-73", "[ECB][MCT][192][DECRYPT][n73]") {
    const uint8_t KEY[] = { 0x1e,0xe8,0xf6,0xb4,0x18,0x7a,0x87,0xf0,0xbc,0x04,0xb8,0x42,0x97,0x83,0xc2,0x7b,0xd3,0x2c,0xc0,0x5c,0x0e,0x82,0x7a,0xa4 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xfd,0x2c,0xcb,0xa2,0x55,0xe7,0x4b,0x16,0x86,0x4a,0xc2,0xff,0x80,0x89,0x4e,0xbb };
    const uint8_t CIPHERTEXT[] = { 0xfd,0x6a,0xbd,0xb2,0x79,0x3f,0x84,0x9b,0xed,0xea,0x16,0x0e,0x34,0xab,0x1a,0x9d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-74", "[ECB][MCT][192][DECRYPT][n74]") {
    const uint8_t KEY[] = { 0x3f,0x23,0xc2,0x5c,0x52,0xd6,0x45,0x4c,0x41,0x28,0x73,0xe0,0xc2,0x64,0x89,0x6d,0x55,0x66,0x02,0xa3,0x8e,0x0b,0x34,0x1f };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x45,0x71,0xab,0xac,0xb8,0xfa,0xa7,0x40,0x07,0x70,0x22,0x58,0x22,0x0b,0x3e,0x19 };
    const uint8_t CIPHERTEXT[] = { 0xfd,0x2c,0xcb,0xa2,0x55,0xe7,0x4b,0x16,0x86,0x4a,0xc2,0xff,0x80,0x89,0x4e,0xbb };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-75", "[ECB][MCT][192][DECRYPT][n75]") {
    const uint8_t KEY[] = { 0x4e,0xed,0xfc,0x72,0x5f,0x39,0x01,0xb8,0x04,0x59,0xd8,0x4c,0x7a,0x9e,0x2e,0x2d,0x52,0x16,0x20,0xfb,0xac,0x00,0x0a,0x06 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x94,0x1b,0x06,0x9f,0x75,0x45,0xd1,0x6d,0x24,0xe6,0x9a,0x30,0x97,0x94,0xa2,0x59 };
    const uint8_t CIPHERTEXT[] = { 0x45,0x71,0xab,0xac,0xb8,0xfa,0xa7,0x40,0x07,0x70,0x22,0x58,0x22,0x0b,0x3e,0x19 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-76", "[ECB][MCT][192][DECRYPT][n76]") {
    const uint8_t KEY[] = { 0xad,0x8b,0x4c,0xd0,0x42,0xb8,0x74,0xd0,0x90,0x42,0xde,0xd3,0x0f,0xdb,0xff,0x40,0x76,0xf0,0xba,0xcb,0x3b,0x94,0xa8,0x5f };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x51,0x5a,0xb9,0xb5,0x04,0x47,0xea,0x30,0xe5,0xab,0x92,0xdd,0xd1,0x49,0x8d,0x69 };
    const uint8_t CIPHERTEXT[] = { 0x94,0x1b,0x06,0x9f,0x75,0x45,0xd1,0x6d,0x24,0xe6,0x9a,0x30,0x97,0x94,0xa2,0x59 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-77", "[ECB][MCT][192][DECRYPT][n77]") {
    const uint8_t KEY[] = { 0xc0,0x85,0xe9,0xfd,0xe0,0xa6,0x06,0x64,0xc1,0x18,0x67,0x66,0x0b,0x9c,0x15,0x70,0x93,0x5b,0x28,0x16,0xea,0xdd,0x25,0x36 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x87,0x2c,0x0d,0x54,0xb1,0x38,0x2c,0x09,0x5b,0x1a,0x47,0x5f,0xee,0x11,0x4c,0xd5 };
    const uint8_t CIPHERTEXT[] = { 0x51,0x5a,0xb9,0xb5,0x04,0x47,0xea,0x30,0xe5,0xab,0x92,0xdd,0xd1,0x49,0x8d,0x69 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-78", "[ECB][MCT][192][DECRYPT][n78]") {
    const uint8_t KEY[] = { 0x47,0x90,0xa2,0xb2,0xee,0x10,0x8f,0xbb,0x46,0x34,0x6a,0x32,0xba,0xa4,0x39,0x79,0xc8,0x41,0x6f,0x49,0x04,0xcc,0x69,0xe3 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x6a,0xa4,0xb9,0xe4,0x55,0x9d,0x2c,0x1d,0xe4,0xf5,0x9d,0xaf,0xba,0xf0,0x90,0x9e };
    const uint8_t CIPHERTEXT[] = { 0x87,0x2c,0x0d,0x54,0xb1,0x38,0x2c,0x09,0x5b,0x1a,0x47,0x5f,0xee,0x11,0x4c,0xd5 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-79", "[ECB][MCT][192][DECRYPT][n79]") {
    const uint8_t KEY[] = { 0x56,0x88,0x03,0x40,0xe6,0xea,0xf2,0x47,0x2c,0x90,0xd3,0xd6,0xef,0x39,0x15,0x64,0x2c,0xb4,0xf2,0xe6,0xbe,0x3c,0xf9,0x7d };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xc4,0xce,0x24,0xdd,0x76,0x0b,0x44,0x79,0x9d,0x00,0xce,0x4c,0x5f,0xfd,0xb8,0xc5 };
    const uint8_t CIPHERTEXT[] = { 0x6a,0xa4,0xb9,0xe4,0x55,0x9d,0x2c,0x1d,0xe4,0xf5,0x9d,0xaf,0xba,0xf0,0x90,0x9e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-80", "[ECB][MCT][192][DECRYPT][n80]") {
    const uint8_t KEY[] = { 0xd3,0x21,0xa2,0x16,0x92,0x3e,0x2c,0x1d,0xe8,0x5e,0xf7,0x0b,0x99,0x32,0x51,0x1d,0xb1,0xb4,0x3c,0xaa,0xe1,0xc1,0x41,0xb8 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xd7,0x3e,0x44,0xee,0x7f,0x75,0xc2,0xfb,0x66,0x96,0xaa,0xba,0x64,0xaf,0x99,0x25 };
    const uint8_t CIPHERTEXT[] = { 0xc4,0xce,0x24,0xdd,0x76,0x0b,0x44,0x79,0x9d,0x00,0xce,0x4c,0x5f,0xfd,0xb8,0xc5 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-81", "[ECB][MCT][192][DECRYPT][n81]") {
    const uint8_t KEY[] = { 0xa8,0x01,0x25,0x60,0x6e,0xf3,0xf3,0x95,0x3f,0x60,0xb3,0xe5,0xe6,0x47,0x93,0xe6,0xd7,0x22,0x96,0x10,0x85,0x6e,0xd8,0x9d };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x1a,0xdd,0x98,0xac,0xb3,0xa3,0x17,0x33,0xb3,0xe0,0xa3,0x2d,0xa1,0x4a,0x71,0xcf };
    const uint8_t CIPHERTEXT[] = { 0xd7,0x3e,0x44,0xee,0x7f,0x75,0xc2,0xfb,0x66,0x96,0xaa,0xba,0x64,0xaf,0x99,0x25 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-82", "[ECB][MCT][192][DECRYPT][n82]") {
    const uint8_t KEY[] = { 0xfd,0x54,0x73,0x07,0x99,0xc7,0x6e,0x1e,0x25,0xbd,0x2b,0x49,0x55,0xe4,0x84,0xd5,0x64,0xc2,0x35,0x3d,0x24,0x24,0xa9,0x52 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x6d,0x22,0x01,0xf6,0x26,0x8f,0x7c,0x12,0x6e,0x4d,0x57,0x37,0x5f,0x5a,0xc9,0x7b };
    const uint8_t CIPHERTEXT[] = { 0x1a,0xdd,0x98,0xac,0xb3,0xa3,0x17,0x33,0xb3,0xe0,0xa3,0x2d,0xa1,0x4a,0x71,0xcf };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-83", "[ECB][MCT][192][DECRYPT][n83]") {
    const uint8_t KEY[] = { 0xb0,0x7e,0x34,0x46,0x19,0xdf,0x38,0xe5,0x48,0x9f,0x2a,0xbf,0x73,0x6b,0xf8,0xc7,0x0a,0x8f,0x62,0x0a,0x7b,0x7e,0x60,0x29 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x34,0x9d,0xaa,0xfd,0x5a,0x96,0x76,0xa0,0xbf,0x5e,0x01,0x53,0x19,0xa5,0x08,0x3b };
    const uint8_t CIPHERTEXT[] = { 0x6d,0x22,0x01,0xf6,0x26,0x8f,0x7c,0x12,0x6e,0x4d,0x57,0x37,0x5f,0x5a,0xc9,0x7b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-84", "[ECB][MCT][192][DECRYPT][n84]") {
    const uint8_t KEY[] = { 0xf6,0x6e,0x77,0x02,0x37,0x9b,0xbe,0xac,0x7c,0x02,0x80,0x42,0x29,0xfd,0x8e,0x67,0xb5,0xd1,0x63,0x59,0x62,0xdb,0x68,0x12 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xfd,0x6c,0xd6,0x98,0x38,0x8a,0x46,0xf6,0x96,0xda,0x48,0x54,0x3a,0x32,0x7e,0x10 };
    const uint8_t CIPHERTEXT[] = { 0x34,0x9d,0xaa,0xfd,0x5a,0x96,0x76,0xa0,0xbf,0x5e,0x01,0x53,0x19,0xa5,0x08,0x3b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-85", "[ECB][MCT][192][DECRYPT][n85]") {
    const uint8_t KEY[] = { 0x1a,0xab,0x1a,0x24,0x9c,0xb5,0xfa,0x91,0x81,0x6e,0x56,0xda,0x11,0x77,0xc8,0x91,0x23,0x0b,0x2b,0x0d,0x58,0xe9,0x16,0x02 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xba,0xa9,0xb8,0xa3,0xf9,0xff,0xa8,0x62,0x41,0xbb,0x5a,0xbe,0x04,0xb7,0xee,0xa5 };
    const uint8_t CIPHERTEXT[] = { 0xfd,0x6c,0xd6,0x98,0x38,0x8a,0x46,0xf6,0x96,0xda,0x48,0x54,0x3a,0x32,0x7e,0x10 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-86", "[ECB][MCT][192][DECRYPT][n86]") {
    const uint8_t KEY[] = { 0xdd,0x88,0x1f,0x34,0x32,0x07,0x3d,0x25,0x3b,0xc7,0xee,0x79,0xe8,0x88,0x60,0xf3,0x62,0xb0,0x71,0xb3,0x5c,0x5e,0xf8,0xa7 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x19,0xad,0x5a,0x06,0x19,0xf1,0xb5,0xee,0xd3,0x8f,0xb5,0xfb,0xbb,0xbe,0x12,0x47 };
    const uint8_t CIPHERTEXT[] = { 0xba,0xa9,0xb8,0xa3,0xf9,0xff,0xa8,0x62,0x41,0xbb,0x5a,0xbe,0x04,0xb7,0xee,0xa5 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-87", "[ECB][MCT][192][DECRYPT][n87]") {
    const uint8_t KEY[] = { 0xd4,0x08,0x82,0x61,0xdd,0xa8,0xdf,0xc1,0x22,0x6a,0xb4,0x7f,0xf1,0x79,0xd5,0x1d,0xb1,0x3f,0xc4,0x48,0xe7,0xe0,0xea,0xe0 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x83,0x2e,0x01,0x27,0x4c,0x6a,0x59,0xb1,0x48,0xdc,0x6d,0xe3,0xe6,0xcc,0xc0,0x37 };
    const uint8_t CIPHERTEXT[] = { 0x19,0xad,0x5a,0x06,0x19,0xf1,0xb5,0xee,0xd3,0x8f,0xb5,0xfb,0xbb,0xbe,0x12,0x47 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-88", "[ECB][MCT][192][DECRYPT][n88]") {
    const uint8_t KEY[] = { 0x0f,0xf9,0x7f,0x22,0xbd,0xef,0x40,0x05,0xa1,0x44,0xb5,0x58,0xbd,0x13,0x8c,0xac,0xf9,0xe3,0xa9,0xab,0x01,0x2c,0x2a,0xd7 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x98,0x53,0xba,0x4a,0x08,0x80,0x44,0x9a,0x63,0x44,0xfd,0x0d,0xab,0xfc,0x9e,0x74 };
    const uint8_t CIPHERTEXT[] = { 0x83,0x2e,0x01,0x27,0x4c,0x6a,0x59,0xb1,0x48,0xdc,0x6d,0xe3,0xe6,0xcc,0xc0,0x37 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-89", "[ECB][MCT][192][DECRYPT][n89]") {
    const uint8_t KEY[] = { 0xa2,0xf2,0x35,0x11,0x38,0xf5,0x3e,0xd6,0x39,0x17,0x0f,0x12,0xb5,0x93,0xc8,0x36,0x9a,0xa7,0x54,0xa6,0xaa,0xd0,0xb4,0xa3 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x89,0xeb,0xc0,0x90,0xe0,0x7d,0x36,0x67,0x0f,0x48,0xa3,0x20,0x74,0xc9,0xca,0x18 };
    const uint8_t CIPHERTEXT[] = { 0x98,0x53,0xba,0x4a,0x08,0x80,0x44,0x9a,0x63,0x44,0xfd,0x0d,0xab,0xfc,0x9e,0x74 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-90", "[ECB][MCT][192][DECRYPT][n90]") {
    const uint8_t KEY[] = { 0xb7,0xc5,0x64,0x16,0x1c,0x5e,0x50,0x61,0xb0,0xfc,0xcf,0x82,0x55,0xee,0xfe,0x51,0x95,0xef,0xf7,0x86,0xde,0x19,0x7e,0xbb };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x56,0x95,0x15,0x4c,0x14,0xae,0xb5,0xd0,0x9a,0x51,0x6c,0xa8,0x02,0xd7,0xfb,0x21 };
    const uint8_t CIPHERTEXT[] = { 0x89,0xeb,0xc0,0x90,0xe0,0x7d,0x36,0x67,0x0f,0x48,0xa3,0x20,0x74,0xc9,0xca,0x18 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-91", "[ECB][MCT][192][DECRYPT][n91]") {
    const uint8_t KEY[] = { 0x95,0xaa,0x68,0xa5,0xba,0x0d,0x34,0x6b,0xe6,0x69,0xda,0xce,0x41,0x40,0x4b,0x81,0x0f,0xbe,0x9b,0x2e,0xdc,0xce,0x85,0x9a };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xf4,0x9c,0x91,0x00,0xc1,0x65,0xc2,0x2f,0x16,0x66,0x1c,0x23,0xbf,0x46,0x52,0x0e };
    const uint8_t CIPHERTEXT[] = { 0x56,0x95,0x15,0x4c,0x14,0xae,0xb5,0xd0,0x9a,0x51,0x6c,0xa8,0x02,0xd7,0xfb,0x21 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-92", "[ECB][MCT][192][DECRYPT][n92]") {
    const uint8_t KEY[] = { 0x02,0x8f,0x06,0x45,0x8b,0x3a,0x50,0xce,0x12,0xf5,0x4b,0xce,0x80,0x25,0x89,0xae,0x19,0xd8,0x87,0x0d,0x63,0x88,0xd7,0x94 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x1a,0xec,0x4f,0x3a,0xde,0x3b,0x41,0xdd,0x3d,0x54,0x48,0xdc,0x7e,0x57,0x7e,0x67 };
    const uint8_t CIPHERTEXT[] = { 0xf4,0x9c,0x91,0x00,0xc1,0x65,0xc2,0x2f,0x16,0x66,0x1c,0x23,0xbf,0x46,0x52,0x0e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-93", "[ECB][MCT][192][DECRYPT][n93]") {
    const uint8_t KEY[] = { 0xe0,0xb7,0x5d,0xb3,0xcf,0xb1,0xe3,0xf6,0x08,0x19,0x04,0xf4,0x5e,0x1e,0xc8,0x73,0x24,0x8c,0xcf,0xd1,0x1d,0xdf,0xa9,0xf3 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x5c,0x75,0xfb,0xca,0xa8,0x93,0x32,0x66,0x41,0xaa,0x34,0x3f,0x40,0xf6,0xee,0x31 };
    const uint8_t CIPHERTEXT[] = { 0x1a,0xec,0x4f,0x3a,0xde,0x3b,0x41,0xdd,0x3d,0x54,0x48,0xdc,0x7e,0x57,0x7e,0x67 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-94", "[ECB][MCT][192][DECRYPT][n94]") {
    const uint8_t KEY[] = { 0xe5,0x11,0x61,0xc0,0xee,0x3b,0xf4,0xfe,0x54,0x6c,0xff,0x3e,0xf6,0x8d,0xfa,0x15,0x65,0x26,0xfb,0xee,0x5d,0x29,0x47,0xc2 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xa2,0xc9,0x53,0xd4,0x04,0x21,0x2d,0x5d,0xa4,0xe9,0x8f,0x31,0xd8,0xcc,0x0a,0x5b };
    const uint8_t CIPHERTEXT[] = { 0x5c,0x75,0xfb,0xca,0xa8,0x93,0x32,0x66,0x41,0xaa,0x34,0x3f,0x40,0xf6,0xee,0x31 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-95", "[ECB][MCT][192][DECRYPT][n95]") {
    const uint8_t KEY[] = { 0x1f,0x13,0xdd,0x6e,0x77,0x47,0x73,0x37,0xf6,0xa5,0xac,0xea,0xf2,0xac,0xd7,0x48,0xc1,0xcf,0x74,0xdf,0x85,0xe5,0x4d,0x99 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x17,0xea,0x5b,0xd0,0xc1,0x39,0xce,0x39,0x12,0x40,0xff,0x70,0x10,0x85,0xb0,0x60 };
    const uint8_t CIPHERTEXT[] = { 0xa2,0xc9,0x53,0xd4,0x04,0x21,0x2d,0x5d,0xa4,0xe9,0x8f,0x31,0xd8,0xcc,0x0a,0x5b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-96", "[ECB][MCT][192][DECRYPT][n96]") {
    const uint8_t KEY[] = { 0x54,0x7e,0x1d,0x3b,0xa5,0x98,0x83,0x27,0xe1,0x4f,0xf7,0x3a,0x33,0x95,0x19,0x71,0xd3,0x8f,0x8b,0xaf,0x95,0x60,0xfd,0xf9 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x98,0xd8,0x7a,0xca,0xeb,0x84,0x3c,0xcf,0x7b,0x6e,0x92,0xa1,0x88,0x9f,0xf1,0x29 };
    const uint8_t CIPHERTEXT[] = { 0x17,0xea,0x5b,0xd0,0xc1,0x39,0xce,0x39,0x12,0x40,0xff,0x70,0x10,0x85,0xb0,0x60 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-97", "[ECB][MCT][192][DECRYPT][n97]") {
    const uint8_t KEY[] = { 0xd1,0x40,0xd8,0x29,0x58,0xfb,0x4d,0x89,0x79,0x97,0x8d,0xf0,0xd8,0x11,0x25,0xbe,0xa8,0xe1,0x19,0x0e,0x1d,0xff,0x0c,0xd0 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x0c,0x21,0x32,0x94,0x20,0x34,0x44,0x2e,0xa6,0xeb,0x14,0xd2,0x3c,0xcd,0xf8,0x68 };
    const uint8_t CIPHERTEXT[] = { 0x98,0xd8,0x7a,0xca,0xeb,0x84,0x3c,0xcf,0x7b,0x6e,0x92,0xa1,0x88,0x9f,0xf1,0x29 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-98", "[ECB][MCT][192][DECRYPT][n98]") {
    const uint8_t KEY[] = { 0xf3,0x11,0xab,0x46,0xbb,0xa2,0x8f,0x9a,0x75,0xb6,0xbf,0x64,0xf8,0x25,0x61,0x90,0x0e,0x0a,0x0d,0xdc,0x21,0x32,0xf4,0xb8 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x91,0x34,0x1b,0x21,0x7d,0x52,0x11,0x68,0x25,0x1a,0xd3,0x77,0x81,0x71,0xe5,0xba };
    const uint8_t CIPHERTEXT[] = { 0x0c,0x21,0x32,0x94,0x20,0x34,0x44,0x2e,0xa6,0xeb,0x14,0xd2,0x3c,0xcd,0xf8,0x68 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMCT192-DECRYPT-99", "[ECB][MCT][192][DECRYPT][n99]") {
    const uint8_t KEY[] = { 0x0a,0xbe,0xa3,0x78,0x84,0x94,0x6a,0xa1,0xe4,0x82,0xa4,0x45,0x85,0x77,0x70,0xf8,0x2b,0x10,0xde,0xab,0xa0,0x43,0x11,0x02 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xb6,0x3e,0xf1,0xb7,0x95,0x07,0xa6,0x2e,0xba,0x3d,0xaf,0xce,0xc5,0x4a,0x63,0x28 };
    const uint8_t CIPHERTEXT[] = { 0x91,0x34,0x1b,0x21,0x7d,0x52,0x11,0x68,0x25,0x1a,0xd3,0x77,0x81,0x71,0xe5,0xba };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ecb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

