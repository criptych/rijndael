#include "rijndael.h"
#include "catch.hpp"
#include <cstring>

static inline std::string buf2str(const uint8_t *buf, size_t len) {
    std::ostringstream ss; ss << std::hex << std::setfill('0');
    for (size_t i = 0; i < len; ++i) {
        ss << std::setw(2) << static_cast<int>(buf[i]) << ' ';
    }
    return ss.str();
}

TEST_CASE("OFBMCT128-ENCRYPT-0", "[OFB][MCT][128][ENCRYPT][n0]") {
    const uint8_t KEY[] = { 0x89,0xf6,0x80,0x63,0x68,0xc1,0x30,0x62,0x7a,0x98,0xbf,0xb6,0xbb,0x5b,0x1f,0xd7 };
    const uint8_t IV[] = { 0xb2,0x4d,0x13,0xaf,0xfe,0xd8,0x67,0x17,0xdf,0x32,0xa5,0xb4,0x3f,0xa9,0xb8,0x59 };
    const uint8_t PLAINTEXT[] = { 0x05,0x6f,0x30,0x63,0x17,0x04,0x50,0xa5,0xac,0x72,0xc1,0x5c,0xaa,0x54,0xc6,0x90 };
    const uint8_t CIPHERTEXT[] = { 0xb0,0xe7,0x56,0x2d,0xac,0x92,0xf9,0x0d,0x59,0x35,0xc5,0x7b,0xaf,0x33,0x62,0x04 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-1", "[OFB][MCT][128][ENCRYPT][n1]") {
    const uint8_t KEY[] = { 0x39,0x11,0xd6,0x4e,0xc4,0x53,0xc9,0x6f,0x23,0xad,0x7a,0xcd,0x14,0x68,0x7d,0xd3 };
    const uint8_t IV[] = { 0xb0,0xe7,0x56,0x2d,0xac,0x92,0xf9,0x0d,0x59,0x35,0xc5,0x7b,0xaf,0x33,0x62,0x04 };
    const uint8_t PLAINTEXT[] = { 0xf7,0xa1,0x50,0x88,0xe1,0x27,0x59,0xd6,0x9c,0x68,0x86,0x38,0xc2,0x07,0x22,0x4d };
    const uint8_t CIPHERTEXT[] = { 0xda,0xa7,0x53,0xaf,0xde,0xf1,0x36,0x56,0x5d,0x05,0x1f,0x4c,0x65,0x1e,0xda,0x8d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-2", "[OFB][MCT][128][ENCRYPT][n2]") {
    const uint8_t KEY[] = { 0xe3,0xb6,0x85,0xe1,0x1a,0xa2,0xff,0x39,0x7e,0xa8,0x65,0x81,0x71,0x76,0xa7,0x5e };
    const uint8_t IV[] = { 0xda,0xa7,0x53,0xaf,0xde,0xf1,0x36,0x56,0x5d,0x05,0x1f,0x4c,0x65,0x1e,0xda,0x8d };
    const uint8_t PLAINTEXT[] = { 0x86,0xcf,0xc4,0xe5,0x07,0x5c,0x61,0x70,0x23,0x22,0x91,0x8f,0x22,0x9b,0x9c,0xf7 };
    const uint8_t CIPHERTEXT[] = { 0x3b,0xc9,0x2d,0x79,0x99,0x44,0x8a,0xb8,0x38,0x60,0x9b,0xe1,0xf5,0xe1,0xbe,0xab };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-3", "[OFB][MCT][128][ENCRYPT][n3]") {
    const uint8_t KEY[] = { 0xd8,0x7f,0xa8,0x98,0x83,0xe6,0x75,0x81,0x46,0xc8,0xfe,0x60,0x84,0x97,0x19,0xf5 };
    const uint8_t IV[] = { 0x3b,0xc9,0x2d,0x79,0x99,0x44,0x8a,0xb8,0x38,0x60,0x9b,0xe1,0xf5,0xe1,0xbe,0xab };
    const uint8_t PLAINTEXT[] = { 0x85,0xbb,0x52,0xfb,0x90,0x67,0x7a,0x73,0xd5,0xc1,0xb2,0x30,0x95,0x51,0x5e,0xd1 };
    const uint8_t CIPHERTEXT[] = { 0xd9,0x25,0x5c,0x54,0x47,0x64,0x5c,0xc8,0xca,0x58,0x38,0xe3,0xd7,0x71,0x9b,0x78 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-4", "[OFB][MCT][128][ENCRYPT][n4]") {
    const uint8_t KEY[] = { 0x01,0x5a,0xf4,0xcc,0xc4,0x82,0x29,0x49,0x8c,0x90,0xc6,0x83,0x53,0xe6,0x82,0x8d };
    const uint8_t IV[] = { 0xd9,0x25,0x5c,0x54,0x47,0x64,0x5c,0xc8,0xca,0x58,0x38,0xe3,0xd7,0x71,0x9b,0x78 };
    const uint8_t PLAINTEXT[] = { 0xcd,0x6b,0xb1,0x3e,0xd9,0x27,0xce,0x45,0xcf,0xcf,0xdd,0x77,0xd7,0xd2,0x3b,0x42 };
    const uint8_t CIPHERTEXT[] = { 0xa9,0x22,0x6e,0x4c,0x9f,0x17,0x2e,0x72,0x17,0x25,0xc4,0x14,0xe8,0xe8,0x65,0xb2 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-5", "[OFB][MCT][128][ENCRYPT][n5]") {
    const uint8_t KEY[] = { 0xa8,0x78,0x9a,0x80,0x5b,0x95,0x07,0x3b,0x9b,0xb5,0x02,0x97,0xbb,0x0e,0xe7,0x3f };
    const uint8_t IV[] = { 0xa9,0x22,0x6e,0x4c,0x9f,0x17,0x2e,0x72,0x17,0x25,0xc4,0x14,0xe8,0xe8,0x65,0xb2 };
    const uint8_t PLAINTEXT[] = { 0x4b,0x53,0x29,0x64,0x98,0xda,0x0c,0xf8,0x2f,0xbc,0xd0,0x0c,0xd6,0xb3,0x47,0x43 };
    const uint8_t CIPHERTEXT[] = { 0x87,0xc8,0xe2,0x67,0x1c,0x1a,0xed,0x67,0x9e,0x5f,0x1f,0x9d,0x75,0xb8,0x92,0xfe };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-6", "[OFB][MCT][128][ENCRYPT][n6]") {
    const uint8_t KEY[] = { 0x2f,0xb0,0x78,0xe7,0x47,0x8f,0xea,0x5c,0x05,0xea,0x1d,0x0a,0xce,0xb6,0x75,0xc1 };
    const uint8_t IV[] = { 0x87,0xc8,0xe2,0x67,0x1c,0x1a,0xed,0x67,0x9e,0x5f,0x1f,0x9d,0x75,0xb8,0x92,0xfe };
    const uint8_t PLAINTEXT[] = { 0xa6,0xe3,0xf8,0x9b,0x7f,0x51,0x43,0x85,0x0f,0x68,0x67,0x71,0x84,0x04,0x6e,0xf2 };
    const uint8_t CIPHERTEXT[] = { 0xaf,0x23,0x68,0xba,0xb3,0x73,0x3a,0x97,0xe1,0x35,0xd8,0x4e,0x12,0x28,0x6f,0x07 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-7", "[OFB][MCT][128][ENCRYPT][n7]") {
    const uint8_t KEY[] = { 0x80,0x93,0x10,0x5d,0xf4,0xfc,0xd0,0xcb,0xe4,0xdf,0xc5,0x44,0xdc,0x9e,0x1a,0xc6 };
    const uint8_t IV[] = { 0xaf,0x23,0x68,0xba,0xb3,0x73,0x3a,0x97,0xe1,0x35,0xd8,0x4e,0x12,0x28,0x6f,0x07 };
    const uint8_t PLAINTEXT[] = { 0xac,0x5e,0x07,0xb3,0x5a,0xd7,0x9c,0xd5,0x0f,0x4a,0x2b,0x28,0x63,0xfb,0x38,0x34 };
    const uint8_t CIPHERTEXT[] = { 0x6b,0xbd,0x9b,0xb9,0xc2,0x7e,0x82,0xad,0x80,0x46,0x54,0xe8,0xf0,0xa7,0x29,0x4e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-8", "[OFB][MCT][128][ENCRYPT][n8]") {
    const uint8_t KEY[] = { 0xeb,0x2e,0x8b,0xe4,0x36,0x82,0x52,0x66,0x64,0x99,0x91,0xac,0x2c,0x39,0x33,0x88 };
    const uint8_t IV[] = { 0x6b,0xbd,0x9b,0xb9,0xc2,0x7e,0x82,0xad,0x80,0x46,0x54,0xe8,0xf0,0xa7,0x29,0x4e };
    const uint8_t PLAINTEXT[] = { 0xa0,0xd5,0x8a,0xdb,0xbb,0xd8,0x9e,0xae,0x94,0xaa,0x5e,0x36,0xc8,0x34,0xd0,0x42 };
    const uint8_t CIPHERTEXT[] = { 0x16,0xfe,0x51,0xe0,0xc4,0xb5,0xe6,0x6f,0xfd,0xf5,0xa5,0x03,0x35,0xf8,0x00,0x09 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-9", "[OFB][MCT][128][ENCRYPT][n9]") {
    const uint8_t KEY[] = { 0xfd,0xd0,0xda,0x04,0xf2,0x37,0xb4,0x09,0x99,0x6c,0x34,0xaf,0x19,0xc1,0x33,0x81 };
    const uint8_t IV[] = { 0x16,0xfe,0x51,0xe0,0xc4,0xb5,0xe6,0x6f,0xfd,0xf5,0xa5,0x03,0x35,0xf8,0x00,0x09 };
    const uint8_t PLAINTEXT[] = { 0x77,0x4f,0xa8,0x4d,0x11,0x93,0xbe,0xbe,0x49,0xa7,0x8e,0xc4,0xe8,0x48,0xb1,0x9b };
    const uint8_t CIPHERTEXT[] = { 0x4f,0x62,0xe8,0x00,0x52,0xb9,0x08,0x10,0x25,0x9e,0x5c,0x3f,0xaf,0x13,0x77,0xd2 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-10", "[OFB][MCT][128][ENCRYPT][n10]") {
    const uint8_t KEY[] = { 0xb2,0xb2,0x32,0x04,0xa0,0x8e,0xbc,0x19,0xbc,0xf2,0x68,0x90,0xb6,0xd2,0x44,0x53 };
    const uint8_t IV[] = { 0x4f,0x62,0xe8,0x00,0x52,0xb9,0x08,0x10,0x25,0x9e,0x5c,0x3f,0xaf,0x13,0x77,0xd2 };
    const uint8_t PLAINTEXT[] = { 0x4f,0x1f,0xc0,0x19,0xa3,0x78,0x7b,0xec,0x7e,0x8b,0x60,0xdc,0x05,0x0a,0x28,0x0e };
    const uint8_t CIPHERTEXT[] = { 0x3d,0xde,0x69,0xa0,0x4a,0x22,0x55,0x05,0xb3,0xa8,0x38,0x10,0x8e,0x46,0xd8,0x4f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-11", "[OFB][MCT][128][ENCRYPT][n11]") {
    const uint8_t KEY[] = { 0x8f,0x6c,0x5b,0xa4,0xea,0xac,0xe9,0x1c,0x0f,0x5a,0x50,0x80,0x38,0x94,0x9c,0x1c };
    const uint8_t IV[] = { 0x3d,0xde,0x69,0xa0,0x4a,0x22,0x55,0x05,0xb3,0xa8,0x38,0x10,0x8e,0x46,0xd8,0x4f };
    const uint8_t PLAINTEXT[] = { 0x17,0x22,0x4e,0xa2,0xf2,0x48,0x65,0x69,0x47,0x38,0xc7,0x1b,0xb6,0x6d,0x28,0x52 };
    const uint8_t CIPHERTEXT[] = { 0x4c,0x4d,0xf0,0xc8,0x9f,0xcf,0xa4,0xa0,0x41,0xca,0xf4,0xc1,0x19,0xcf,0xe1,0x0e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-12", "[OFB][MCT][128][ENCRYPT][n12]") {
    const uint8_t KEY[] = { 0xc3,0x21,0xab,0x6c,0x75,0x63,0x4d,0xbc,0x4e,0x90,0xa4,0x41,0x21,0x5b,0x7d,0x12 };
    const uint8_t IV[] = { 0x4c,0x4d,0xf0,0xc8,0x9f,0xcf,0xa4,0xa0,0x41,0xca,0xf4,0xc1,0x19,0xcf,0xe1,0x0e };
    const uint8_t PLAINTEXT[] = { 0x42,0xc0,0x27,0x0b,0x25,0x7d,0x85,0x60,0x7d,0x89,0xcb,0xdd,0x76,0x0b,0x75,0x92 };
    const uint8_t CIPHERTEXT[] = { 0x73,0x17,0xc4,0x10,0x67,0x43,0xe7,0x51,0x8b,0x18,0x2c,0x8b,0x33,0x57,0xc6,0x78 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-13", "[OFB][MCT][128][ENCRYPT][n13]") {
    const uint8_t KEY[] = { 0xb0,0x36,0x6f,0x7c,0x12,0x20,0xaa,0xed,0xc5,0x88,0x88,0xca,0x12,0x0c,0xbb,0x6a };
    const uint8_t IV[] = { 0x73,0x17,0xc4,0x10,0x67,0x43,0xe7,0x51,0x8b,0x18,0x2c,0x8b,0x33,0x57,0xc6,0x78 };
    const uint8_t PLAINTEXT[] = { 0x34,0x73,0x79,0x50,0xe3,0xb3,0x86,0x30,0xe4,0x54,0xce,0xd9,0xf3,0xfd,0x9e,0xf2 };
    const uint8_t CIPHERTEXT[] = { 0xb7,0x57,0xb6,0x14,0xc2,0xc4,0x58,0xed,0x97,0x86,0x29,0x4a,0x08,0x91,0xd0,0xf2 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-14", "[OFB][MCT][128][ENCRYPT][n14]") {
    const uint8_t KEY[] = { 0x07,0x61,0xd9,0x68,0xd0,0xe4,0xf2,0x00,0x52,0x0e,0xa1,0x80,0x1a,0x9d,0x6b,0x98 };
    const uint8_t IV[] = { 0xb7,0x57,0xb6,0x14,0xc2,0xc4,0x58,0xed,0x97,0x86,0x29,0x4a,0x08,0x91,0xd0,0xf2 };
    const uint8_t PLAINTEXT[] = { 0x26,0x4b,0xaa,0x06,0xd4,0x61,0x2e,0x1e,0xc7,0xd0,0xe4,0xc2,0xee,0x17,0xf7,0x78 };
    const uint8_t CIPHERTEXT[] = { 0xd7,0x83,0x65,0xa4,0x6c,0xc7,0xc4,0xca,0xf6,0x04,0xae,0x8a,0x20,0x7b,0x61,0xfa };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-15", "[OFB][MCT][128][ENCRYPT][n15]") {
    const uint8_t KEY[] = { 0xd0,0xe2,0xbc,0xcc,0xbc,0x23,0x36,0xca,0xa4,0x0a,0x0f,0x0a,0x3a,0xe6,0x0a,0x62 };
    const uint8_t IV[] = { 0xd7,0x83,0x65,0xa4,0x6c,0xc7,0xc4,0xca,0xf6,0x04,0xae,0x8a,0x20,0x7b,0x61,0xfa };
    const uint8_t PLAINTEXT[] = { 0x95,0x07,0x67,0x33,0x52,0xe0,0xec,0xd7,0xb2,0xb6,0x3a,0x86,0x37,0x40,0x20,0xff };
    const uint8_t CIPHERTEXT[] = { 0xee,0xae,0x58,0x6a,0x77,0x95,0x0f,0x35,0x5e,0xc5,0x33,0x7b,0xdf,0xc3,0x57,0xaf };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-16", "[OFB][MCT][128][ENCRYPT][n16]") {
    const uint8_t KEY[] = { 0x3e,0x4c,0xe4,0xa6,0xcb,0xb6,0x39,0xff,0xfa,0xcf,0x3c,0x71,0xe5,0x25,0x5d,0xcd };
    const uint8_t IV[] = { 0xee,0xae,0x58,0x6a,0x77,0x95,0x0f,0x35,0x5e,0xc5,0x33,0x7b,0xdf,0xc3,0x57,0xaf };
    const uint8_t PLAINTEXT[] = { 0xfe,0x29,0x78,0x82,0x1b,0xe3,0x96,0x77,0xa1,0x42,0xcd,0xee,0xa9,0xf2,0x1b,0xf9 };
    const uint8_t CIPHERTEXT[] = { 0x81,0x00,0x98,0xd9,0xed,0xf1,0x27,0xda,0x39,0xec,0x7b,0x71,0x79,0x2a,0x54,0x90 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-17", "[OFB][MCT][128][ENCRYPT][n17]") {
    const uint8_t KEY[] = { 0xbf,0x4c,0x7c,0x7f,0x26,0x47,0x1e,0x25,0xc3,0x23,0x47,0x00,0x9c,0x0f,0x09,0x5d };
    const uint8_t IV[] = { 0x81,0x00,0x98,0xd9,0xed,0xf1,0x27,0xda,0x39,0xec,0x7b,0x71,0x79,0x2a,0x54,0x90 };
    const uint8_t PLAINTEXT[] = { 0x40,0x7c,0x1d,0xcc,0xb7,0x5f,0x0f,0xc1,0xa1,0xff,0x26,0x27,0x01,0xfd,0x92,0xb9 };
    const uint8_t CIPHERTEXT[] = { 0xa5,0x87,0x2b,0x19,0xa9,0x41,0xd6,0x4c,0x65,0xa2,0x9b,0x2f,0x4d,0x9f,0x00,0x0d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-18", "[OFB][MCT][128][ENCRYPT][n18]") {
    const uint8_t KEY[] = { 0x1a,0xcb,0x57,0x66,0x8f,0x06,0xc8,0x69,0xa6,0x81,0xdc,0x2f,0xd1,0x90,0x09,0x50 };
    const uint8_t IV[] = { 0xa5,0x87,0x2b,0x19,0xa9,0x41,0xd6,0x4c,0x65,0xa2,0x9b,0x2f,0x4d,0x9f,0x00,0x0d };
    const uint8_t PLAINTEXT[] = { 0xfd,0x77,0x81,0x5c,0x12,0xc6,0x7b,0xbb,0x19,0x81,0xab,0xa6,0xf8,0x97,0xbe,0x13 };
    const uint8_t CIPHERTEXT[] = { 0x75,0xa5,0xde,0xb9,0xe1,0x0b,0x49,0x61,0xf4,0x1e,0xe1,0xae,0xd2,0xfa,0xcf,0x46 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-19", "[OFB][MCT][128][ENCRYPT][n19]") {
    const uint8_t KEY[] = { 0x6f,0x6e,0x89,0xdf,0x6e,0x0d,0x81,0x08,0x52,0x9f,0x3d,0x81,0x03,0x6a,0xc6,0x16 };
    const uint8_t IV[] = { 0x75,0xa5,0xde,0xb9,0xe1,0x0b,0x49,0x61,0xf4,0x1e,0xe1,0xae,0xd2,0xfa,0xcf,0x46 };
    const uint8_t PLAINTEXT[] = { 0x29,0x7f,0x51,0x90,0x2e,0xbe,0x38,0xce,0x4a,0x32,0xdb,0xb4,0x3e,0x43,0xb7,0x6e };
    const uint8_t CIPHERTEXT[] = { 0xb7,0x9f,0x23,0xe7,0x9f,0xa5,0x57,0xb1,0xa9,0x7e,0x92,0xeb,0x2b,0x5c,0x16,0xc4 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-20", "[OFB][MCT][128][ENCRYPT][n20]") {
    const uint8_t KEY[] = { 0xd8,0xf1,0xaa,0x38,0xf1,0xa8,0xd6,0xb9,0xfb,0xe1,0xaf,0x6a,0x28,0x36,0xd0,0xd2 };
    const uint8_t IV[] = { 0xb7,0x9f,0x23,0xe7,0x9f,0xa5,0x57,0xb1,0xa9,0x7e,0x92,0xeb,0x2b,0x5c,0x16,0xc4 };
    const uint8_t PLAINTEXT[] = { 0xf2,0x8b,0xf5,0x6c,0xb3,0xd4,0xc9,0xb5,0xeb,0x33,0x1b,0x60,0x82,0x68,0x0e,0x38 };
    const uint8_t CIPHERTEXT[] = { 0x8a,0x04,0x5e,0x48,0xe3,0x50,0x07,0x87,0x11,0xab,0x47,0x86,0x14,0x50,0xd7,0xd9 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-21", "[OFB][MCT][128][ENCRYPT][n21]") {
    const uint8_t KEY[] = { 0x52,0xf5,0xf4,0x70,0x12,0xf8,0xd1,0x3e,0xea,0x4a,0xe8,0xec,0x3c,0x66,0x07,0x0b };
    const uint8_t IV[] = { 0x8a,0x04,0x5e,0x48,0xe3,0x50,0x07,0x87,0x11,0xab,0x47,0x86,0x14,0x50,0xd7,0xd9 };
    const uint8_t PLAINTEXT[] = { 0xd4,0x95,0x3c,0x91,0x22,0x63,0x2c,0x8c,0x15,0x4e,0xb6,0x3e,0xa2,0x00,0x5b,0xc2 };
    const uint8_t CIPHERTEXT[] = { 0xad,0x02,0xcf,0x1e,0x38,0x03,0x7c,0x36,0x0d,0xfe,0x08,0x4c,0x76,0xf7,0x0d,0xe0 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-22", "[OFB][MCT][128][ENCRYPT][n22]") {
    const uint8_t KEY[] = { 0xff,0xf7,0x3b,0x6e,0x2a,0xfb,0xad,0x08,0xe7,0xb4,0xe0,0xa0,0x4a,0x91,0x0a,0xeb };
    const uint8_t IV[] = { 0xad,0x02,0xcf,0x1e,0x38,0x03,0x7c,0x36,0x0d,0xfe,0x08,0x4c,0x76,0xf7,0x0d,0xe0 };
    const uint8_t PLAINTEXT[] = { 0x0f,0x44,0xc6,0x9c,0xfd,0x40,0xfe,0x06,0x1f,0x89,0x9c,0x1c,0x99,0x56,0xed,0x3c };
    const uint8_t CIPHERTEXT[] = { 0xfe,0xd5,0x1f,0x5a,0x54,0xbc,0x36,0x23,0xd4,0x96,0x55,0x3c,0xab,0x91,0x17,0xdb };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-23", "[OFB][MCT][128][ENCRYPT][n23]") {
    const uint8_t KEY[] = { 0x01,0x22,0x24,0x34,0x7e,0x47,0x9b,0x2b,0x33,0x22,0xb5,0x9c,0xe1,0x00,0x1d,0x30 };
    const uint8_t IV[] = { 0xfe,0xd5,0x1f,0x5a,0x54,0xbc,0x36,0x23,0xd4,0x96,0x55,0x3c,0xab,0x91,0x17,0xdb };
    const uint8_t PLAINTEXT[] = { 0x87,0xd5,0x9e,0xb3,0xbd,0x17,0x4e,0xde,0x2c,0xa0,0xe2,0x9e,0x3b,0x8c,0x90,0x97 };
    const uint8_t CIPHERTEXT[] = { 0xcd,0x2b,0x17,0xe0,0x71,0x2b,0x4d,0x95,0x3d,0x78,0x3f,0x7b,0xeb,0x18,0x42,0xdc };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-24", "[OFB][MCT][128][ENCRYPT][n24]") {
    const uint8_t KEY[] = { 0xcc,0x09,0x33,0xd4,0x0f,0x6c,0xd6,0xbe,0x0e,0x5a,0x8a,0xe7,0x0a,0x18,0x5f,0xec };
    const uint8_t IV[] = { 0xcd,0x2b,0x17,0xe0,0x71,0x2b,0x4d,0x95,0x3d,0x78,0x3f,0x7b,0xeb,0x18,0x42,0xdc };
    const uint8_t PLAINTEXT[] = { 0x1d,0x4b,0x37,0x8b,0x9c,0x4e,0xb6,0x24,0xdd,0x75,0x6b,0xf2,0x72,0xc9,0xc1,0xae };
    const uint8_t CIPHERTEXT[] = { 0xfa,0x27,0x6a,0x29,0xb1,0xfb,0x0b,0x48,0x71,0xbb,0x17,0x4e,0x71,0x03,0x97,0x3b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-25", "[OFB][MCT][128][ENCRYPT][n25]") {
    const uint8_t KEY[] = { 0x36,0x2e,0x59,0xfd,0xbe,0x97,0xdd,0xf6,0x7f,0xe1,0x9d,0xa9,0x7b,0x1b,0xc8,0xd7 };
    const uint8_t IV[] = { 0xfa,0x27,0x6a,0x29,0xb1,0xfb,0x0b,0x48,0x71,0xbb,0x17,0x4e,0x71,0x03,0x97,0x3b };
    const uint8_t PLAINTEXT[] = { 0xa6,0x42,0xaf,0x65,0xea,0x00,0x4d,0xfb,0xba,0xc7,0x34,0xbd,0xb9,0x1e,0x75,0x42 };
    const uint8_t CIPHERTEXT[] = { 0xd2,0x2e,0x6c,0x74,0xa3,0x99,0x7b,0xa1,0x13,0x15,0x8b,0xc2,0x93,0xbe,0x55,0xfb };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-26", "[OFB][MCT][128][ENCRYPT][n26]") {
    const uint8_t KEY[] = { 0xe4,0x00,0x35,0x89,0x1d,0x0e,0xa6,0x57,0x6c,0xf4,0x16,0x6b,0xe8,0xa5,0x9d,0x2c };
    const uint8_t IV[] = { 0xd2,0x2e,0x6c,0x74,0xa3,0x99,0x7b,0xa1,0x13,0x15,0x8b,0xc2,0x93,0xbe,0x55,0xfb };
    const uint8_t PLAINTEXT[] = { 0xf6,0x82,0xc5,0xa4,0xe9,0x2e,0x4c,0xe6,0xf5,0x6e,0x55,0x4e,0x90,0xf1,0xa0,0x66 };
    const uint8_t CIPHERTEXT[] = { 0x75,0x83,0x19,0x71,0x74,0xa5,0xd1,0x1a,0xd1,0x76,0x58,0x66,0x77,0x9a,0x29,0x98 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-27", "[OFB][MCT][128][ENCRYPT][n27]") {
    const uint8_t KEY[] = { 0x91,0x83,0x2c,0xf8,0x69,0xab,0x77,0x4d,0xbd,0x82,0x4e,0x0d,0x9f,0x3f,0xb4,0xb4 };
    const uint8_t IV[] = { 0x75,0x83,0x19,0x71,0x74,0xa5,0xd1,0x1a,0xd1,0x76,0x58,0x66,0x77,0x9a,0x29,0x98 };
    const uint8_t PLAINTEXT[] = { 0xaa,0x02,0xf2,0x10,0x16,0x94,0xe3,0x52,0xf0,0xce,0x14,0xa0,0xc0,0x33,0x49,0x9c };
    const uint8_t CIPHERTEXT[] = { 0xc1,0x81,0xbd,0x40,0x9d,0x83,0x97,0xdc,0x70,0x1b,0x5e,0xf4,0xda,0x59,0x26,0xdb };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-28", "[OFB][MCT][128][ENCRYPT][n28]") {
    const uint8_t KEY[] = { 0x50,0x02,0x91,0xb8,0xf4,0x28,0xe0,0x91,0xcd,0x99,0x10,0xf9,0x45,0x66,0x92,0x6f };
    const uint8_t IV[] = { 0xc1,0x81,0xbd,0x40,0x9d,0x83,0x97,0xdc,0x70,0x1b,0x5e,0xf4,0xda,0x59,0x26,0xdb };
    const uint8_t PLAINTEXT[] = { 0xb5,0xa1,0x2b,0xe1,0x21,0xcc,0x58,0x2d,0x3c,0x42,0xc5,0x67,0xcb,0x9d,0x6d,0xf9 };
    const uint8_t CIPHERTEXT[] = { 0xfe,0x6e,0x64,0xbe,0xbb,0xb2,0x7e,0x44,0x82,0x98,0xcf,0xfc,0xe8,0xea,0xb5,0xf3 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-29", "[OFB][MCT][128][ENCRYPT][n29]") {
    const uint8_t KEY[] = { 0xae,0x6c,0xf5,0x06,0x4f,0x9a,0x9e,0xd5,0x4f,0x01,0xdf,0x05,0xad,0x8c,0x27,0x9c };
    const uint8_t IV[] = { 0xfe,0x6e,0x64,0xbe,0xbb,0xb2,0x7e,0x44,0x82,0x98,0xcf,0xfc,0xe8,0xea,0xb5,0xf3 };
    const uint8_t PLAINTEXT[] = { 0x0f,0x13,0xd0,0xbd,0xc1,0x96,0x66,0xf6,0x14,0x03,0x75,0x9c,0x41,0x43,0x07,0x85 };
    const uint8_t CIPHERTEXT[] = { 0x76,0xdc,0x0d,0xa2,0xd9,0x40,0x80,0x00,0x77,0x76,0x07,0xea,0xcc,0x71,0x0d,0xe1 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-30", "[OFB][MCT][128][ENCRYPT][n30]") {
    const uint8_t KEY[] = { 0xd8,0xb0,0xf8,0xa4,0x96,0xda,0x1e,0xd5,0x38,0x77,0xd8,0xef,0x61,0xfd,0x2a,0x7d };
    const uint8_t IV[] = { 0x76,0xdc,0x0d,0xa2,0xd9,0x40,0x80,0x00,0x77,0x76,0x07,0xea,0xcc,0x71,0x0d,0xe1 };
    const uint8_t PLAINTEXT[] = { 0x8a,0xb3,0x45,0xac,0xa6,0xd2,0x26,0x38,0x5e,0x92,0x55,0x6a,0xb1,0x1f,0x73,0xdc };
    const uint8_t CIPHERTEXT[] = { 0x79,0xa5,0xa1,0xd5,0x48,0xbc,0x6a,0xa9,0x9b,0x1b,0x6e,0xc6,0x8d,0x29,0x89,0xa0 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-31", "[OFB][MCT][128][ENCRYPT][n31]") {
    const uint8_t KEY[] = { 0xa1,0x15,0x59,0x71,0xde,0x66,0x74,0x7c,0xa3,0x6c,0xb6,0x29,0xec,0xd4,0xa3,0xdd };
    const uint8_t IV[] = { 0x79,0xa5,0xa1,0xd5,0x48,0xbc,0x6a,0xa9,0x9b,0x1b,0x6e,0xc6,0x8d,0x29,0x89,0xa0 };
    const uint8_t PLAINTEXT[] = { 0x14,0x24,0x4b,0xfd,0xde,0x48,0x34,0xf7,0xc7,0xeb,0xac,0xe2,0xe2,0x1e,0x0e,0xfb };
    const uint8_t CIPHERTEXT[] = { 0xad,0x15,0x54,0xce,0x80,0x4d,0x93,0x76,0xd3,0x47,0x7a,0x3c,0x26,0x1f,0x81,0x2b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-32", "[OFB][MCT][128][ENCRYPT][n32]") {
    const uint8_t KEY[] = { 0x0c,0x00,0x0d,0xbf,0x5e,0x2b,0xe7,0x0a,0x70,0x2b,0xcc,0x15,0xca,0xcb,0x22,0xf6 };
    const uint8_t IV[] = { 0xad,0x15,0x54,0xce,0x80,0x4d,0x93,0x76,0xd3,0x47,0x7a,0x3c,0x26,0x1f,0x81,0x2b };
    const uint8_t PLAINTEXT[] = { 0x88,0x80,0xf4,0xb7,0xc7,0x8e,0x03,0x84,0xa2,0xc4,0xe6,0x70,0xad,0x13,0xf5,0x0a };
    const uint8_t CIPHERTEXT[] = { 0xac,0xec,0x28,0x0c,0xd2,0x22,0xda,0xfa,0x7c,0x10,0xe6,0x21,0xf4,0xfc,0xf0,0xbf };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-33", "[OFB][MCT][128][ENCRYPT][n33]") {
    const uint8_t KEY[] = { 0xa0,0xec,0x25,0xb3,0x8c,0x09,0x3d,0xf0,0x0c,0x3b,0x2a,0x34,0x3e,0x37,0xd2,0x49 };
    const uint8_t IV[] = { 0xac,0xec,0x28,0x0c,0xd2,0x22,0xda,0xfa,0x7c,0x10,0xe6,0x21,0xf4,0xfc,0xf0,0xbf };
    const uint8_t PLAINTEXT[] = { 0x0f,0xbb,0x8f,0xd9,0x68,0x70,0x57,0xdc,0x0b,0x41,0xfc,0x94,0x4b,0x47,0x32,0xb0 };
    const uint8_t CIPHERTEXT[] = { 0x16,0x6c,0xca,0x4c,0xb1,0x6c,0x05,0x91,0x7f,0xff,0x2c,0x90,0x64,0xb8,0xc7,0x79 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-34", "[OFB][MCT][128][ENCRYPT][n34]") {
    const uint8_t KEY[] = { 0xb6,0x80,0xef,0xff,0x3d,0x65,0x38,0x61,0x73,0xc4,0x06,0xa4,0x5a,0x8f,0x15,0x30 };
    const uint8_t IV[] = { 0x16,0x6c,0xca,0x4c,0xb1,0x6c,0x05,0x91,0x7f,0xff,0x2c,0x90,0x64,0xb8,0xc7,0x79 };
    const uint8_t PLAINTEXT[] = { 0x27,0x57,0xc6,0xbb,0x63,0x97,0xb3,0x4d,0xf6,0x91,0xf5,0x6c,0x1a,0x82,0xef,0xfe };
    const uint8_t CIPHERTEXT[] = { 0x46,0x2a,0x93,0x27,0xb4,0x19,0x60,0x99,0x9e,0xc6,0x71,0x4c,0x78,0x9e,0xa8,0xbe };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-35", "[OFB][MCT][128][ENCRYPT][n35]") {
    const uint8_t KEY[] = { 0xf0,0xaa,0x7c,0xd8,0x89,0x7c,0x58,0xf8,0xed,0x02,0x77,0xe8,0x22,0x11,0xbd,0x8e };
    const uint8_t IV[] = { 0x46,0x2a,0x93,0x27,0xb4,0x19,0x60,0x99,0x9e,0xc6,0x71,0x4c,0x78,0x9e,0xa8,0xbe };
    const uint8_t PLAINTEXT[] = { 0xec,0xe9,0x9b,0x46,0xa1,0x7a,0x02,0x45,0x4d,0x77,0x70,0x75,0x96,0xb8,0xf2,0x29 };
    const uint8_t CIPHERTEXT[] = { 0x7c,0x4e,0x9f,0x96,0xe4,0x1f,0x42,0x95,0xeb,0x11,0x98,0xe7,0xdb,0x0b,0x91,0x7d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-36", "[OFB][MCT][128][ENCRYPT][n36]") {
    const uint8_t KEY[] = { 0x8c,0xe4,0xe3,0x4e,0x6d,0x63,0x1a,0x6d,0x06,0x13,0xef,0x0f,0xf9,0x1a,0x2c,0xf3 };
    const uint8_t IV[] = { 0x7c,0x4e,0x9f,0x96,0xe4,0x1f,0x42,0x95,0xeb,0x11,0x98,0xe7,0xdb,0x0b,0x91,0x7d };
    const uint8_t PLAINTEXT[] = { 0xa3,0xcc,0xd9,0x73,0xc0,0x68,0x79,0xf4,0xf3,0x5a,0x0b,0x04,0x31,0xfa,0x74,0x15 };
    const uint8_t CIPHERTEXT[] = { 0x23,0x0f,0xab,0x46,0xad,0x33,0xbb,0xd0,0xe4,0x33,0x0f,0x6c,0x0f,0x4c,0xfa,0x27 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-37", "[OFB][MCT][128][ENCRYPT][n37]") {
    const uint8_t KEY[] = { 0xaf,0xeb,0x48,0x08,0xc0,0x50,0xa1,0xbd,0xe2,0x20,0xe0,0x63,0xf6,0x56,0xd6,0xd4 };
    const uint8_t IV[] = { 0x23,0x0f,0xab,0x46,0xad,0x33,0xbb,0xd0,0xe4,0x33,0x0f,0x6c,0x0f,0x4c,0xfa,0x27 };
    const uint8_t PLAINTEXT[] = { 0x99,0x10,0x65,0xa5,0x3a,0x11,0x0b,0xc4,0x08,0x6e,0xa1,0x3f,0x57,0xed,0x87,0xc2 };
    const uint8_t CIPHERTEXT[] = { 0x22,0xfc,0xda,0x66,0x41,0xc9,0xfa,0xe9,0x85,0x53,0x51,0x95,0xfb,0xdf,0x2c,0xfe };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-38", "[OFB][MCT][128][ENCRYPT][n38]") {
    const uint8_t KEY[] = { 0x8d,0x17,0x92,0x6e,0x81,0x99,0x5b,0x54,0x67,0x73,0xb1,0xf6,0x0d,0x89,0xfa,0x2a };
    const uint8_t IV[] = { 0x22,0xfc,0xda,0x66,0x41,0xc9,0xfa,0xe9,0x85,0x53,0x51,0x95,0xfb,0xdf,0x2c,0xfe };
    const uint8_t PLAINTEXT[] = { 0x6f,0x4e,0xfe,0xc9,0xa6,0x91,0x01,0xc8,0x5e,0xba,0x29,0x79,0x88,0xf5,0xa8,0xe9 };
    const uint8_t CIPHERTEXT[] = { 0x6f,0xf8,0x2c,0x05,0x0e,0x55,0xb5,0x63,0x99,0xb2,0x65,0x34,0x78,0x64,0x48,0xa9 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-39", "[OFB][MCT][128][ENCRYPT][n39]") {
    const uint8_t KEY[] = { 0xe2,0xef,0xbe,0x6b,0x8f,0xcc,0xee,0x37,0xfe,0xc1,0xd4,0xc2,0x75,0xed,0xb2,0x83 };
    const uint8_t IV[] = { 0x6f,0xf8,0x2c,0x05,0x0e,0x55,0xb5,0x63,0x99,0xb2,0x65,0x34,0x78,0x64,0x48,0xa9 };
    const uint8_t PLAINTEXT[] = { 0x59,0x14,0xa4,0x95,0x24,0x01,0x4c,0x3f,0x59,0x60,0xf3,0xa5,0x91,0xaf,0xb9,0xdd };
    const uint8_t CIPHERTEXT[] = { 0x4b,0x22,0x2a,0x9c,0x06,0xb1,0x4e,0x0f,0x92,0x2c,0x96,0x8b,0xd7,0x16,0x1b,0x42 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-40", "[OFB][MCT][128][ENCRYPT][n40]") {
    const uint8_t KEY[] = { 0xa9,0xcd,0x94,0xf7,0x89,0x7d,0xa0,0x38,0x6c,0xed,0x42,0x49,0xa2,0xfb,0xa9,0xc1 };
    const uint8_t IV[] = { 0x4b,0x22,0x2a,0x9c,0x06,0xb1,0x4e,0x0f,0x92,0x2c,0x96,0x8b,0xd7,0x16,0x1b,0x42 };
    const uint8_t PLAINTEXT[] = { 0x48,0xf8,0xf5,0x91,0xdf,0x3b,0x48,0xac,0x24,0x91,0x85,0x52,0xd2,0xe7,0x59,0x0e };
    const uint8_t CIPHERTEXT[] = { 0xa9,0x65,0x19,0x91,0xc2,0xf0,0x8e,0xba,0xc6,0xa9,0x69,0x50,0x20,0xe4,0x37,0x41 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-41", "[OFB][MCT][128][ENCRYPT][n41]") {
    const uint8_t KEY[] = { 0x00,0xa8,0x8d,0x66,0x4b,0x8d,0x2e,0x82,0xaa,0x44,0x2b,0x19,0x82,0x1f,0x9e,0x80 };
    const uint8_t IV[] = { 0xa9,0x65,0x19,0x91,0xc2,0xf0,0x8e,0xba,0xc6,0xa9,0x69,0x50,0x20,0xe4,0x37,0x41 };
    const uint8_t PLAINTEXT[] = { 0x4d,0x18,0x34,0xb4,0x38,0x13,0xa4,0x9e,0x61,0x97,0x8b,0x44,0x41,0x6e,0x0f,0x7a };
    const uint8_t CIPHERTEXT[] = { 0x9c,0xbd,0xf2,0x85,0xe4,0xd6,0x70,0x72,0x42,0x8c,0x81,0x13,0x8b,0x8e,0xd2,0x21 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-42", "[OFB][MCT][128][ENCRYPT][n42]") {
    const uint8_t KEY[] = { 0x9c,0x15,0x7f,0xe3,0xaf,0x5b,0x5e,0xf0,0xe8,0xc8,0xaa,0x0a,0x09,0x91,0x4c,0xa1 };
    const uint8_t IV[] = { 0x9c,0xbd,0xf2,0x85,0xe4,0xd6,0x70,0x72,0x42,0x8c,0x81,0x13,0x8b,0x8e,0xd2,0x21 };
    const uint8_t PLAINTEXT[] = { 0x38,0xf5,0xd6,0x79,0xbb,0x27,0x4e,0x53,0x5c,0xb2,0xe8,0xd4,0xad,0x2d,0xb9,0x23 };
    const uint8_t CIPHERTEXT[] = { 0xd3,0xf6,0xe9,0x64,0xb2,0xc1,0xd9,0x8c,0xf2,0xc6,0xc1,0x7d,0xca,0x6c,0x7c,0x19 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-43", "[OFB][MCT][128][ENCRYPT][n43]") {
    const uint8_t KEY[] = { 0x4f,0xe3,0x96,0x87,0x1d,0x9a,0x87,0x7c,0x1a,0x0e,0x6b,0x77,0xc3,0xfd,0x30,0xb8 };
    const uint8_t IV[] = { 0xd3,0xf6,0xe9,0x64,0xb2,0xc1,0xd9,0x8c,0xf2,0xc6,0xc1,0x7d,0xca,0x6c,0x7c,0x19 };
    const uint8_t PLAINTEXT[] = { 0xa3,0x8e,0x6a,0xa9,0xaf,0x05,0xb1,0x99,0xa7,0xda,0x36,0x6a,0xed,0x54,0x5c,0xe6 };
    const uint8_t CIPHERTEXT[] = { 0x2d,0x54,0x0d,0x87,0x95,0xb9,0xb8,0x64,0x15,0xd8,0xc7,0x38,0x7f,0xcf,0x6f,0x04 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-44", "[OFB][MCT][128][ENCRYPT][n44]") {
    const uint8_t KEY[] = { 0x62,0xb7,0x9b,0x00,0x88,0x23,0x3f,0x18,0x0f,0xd6,0xac,0x4f,0xbc,0x32,0x5f,0xbc };
    const uint8_t IV[] = { 0x2d,0x54,0x0d,0x87,0x95,0xb9,0xb8,0x64,0x15,0xd8,0xc7,0x38,0x7f,0xcf,0x6f,0x04 };
    const uint8_t PLAINTEXT[] = { 0xa7,0x38,0xfc,0x50,0xa7,0x2e,0x67,0xd5,0xdb,0x7b,0xac,0x31,0xaf,0x21,0x20,0xa1 };
    const uint8_t CIPHERTEXT[] = { 0x6d,0x1e,0xd4,0xba,0x9a,0x52,0x27,0x41,0xcb,0xbe,0x7d,0x26,0x69,0x12,0x35,0x09 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-45", "[OFB][MCT][128][ENCRYPT][n45]") {
    const uint8_t KEY[] = { 0x0f,0xa9,0x4f,0xba,0x12,0x71,0x18,0x59,0xc4,0x68,0xd1,0x69,0xd5,0x20,0x6a,0xb5 };
    const uint8_t IV[] = { 0x6d,0x1e,0xd4,0xba,0x9a,0x52,0x27,0x41,0xcb,0xbe,0x7d,0x26,0x69,0x12,0x35,0x09 };
    const uint8_t PLAINTEXT[] = { 0x81,0xd7,0x22,0xe8,0xa5,0x84,0xd2,0xe3,0x27,0x81,0x2f,0xe3,0xcd,0x1d,0xb2,0x3c };
    const uint8_t CIPHERTEXT[] = { 0x9d,0x74,0xbe,0x45,0x83,0x1b,0xf1,0xf8,0xa4,0x17,0x4a,0x08,0x44,0x08,0xc6,0x2c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-46", "[OFB][MCT][128][ENCRYPT][n46]") {
    const uint8_t KEY[] = { 0x92,0xdd,0xf1,0xff,0x91,0x6a,0xe9,0xa1,0x60,0x7f,0x9b,0x61,0x91,0x28,0xac,0x99 };
    const uint8_t IV[] = { 0x9d,0x74,0xbe,0x45,0x83,0x1b,0xf1,0xf8,0xa4,0x17,0x4a,0x08,0x44,0x08,0xc6,0x2c };
    const uint8_t PLAINTEXT[] = { 0x01,0x07,0x7d,0x02,0xbc,0x76,0x47,0xf9,0xc1,0x0e,0x3d,0x11,0x12,0x31,0x88,0x9a };
    const uint8_t CIPHERTEXT[] = { 0xb5,0x4a,0x22,0x3a,0xff,0x3c,0x47,0x20,0x56,0xfa,0x7e,0x6d,0x47,0x50,0x5b,0x64 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-47", "[OFB][MCT][128][ENCRYPT][n47]") {
    const uint8_t KEY[] = { 0x27,0x97,0xd3,0xc5,0x6e,0x56,0xae,0x81,0x36,0x85,0xe5,0x0c,0xd6,0x78,0xf7,0xfd };
    const uint8_t IV[] = { 0xb5,0x4a,0x22,0x3a,0xff,0x3c,0x47,0x20,0x56,0xfa,0x7e,0x6d,0x47,0x50,0x5b,0x64 };
    const uint8_t PLAINTEXT[] = { 0xcc,0x0f,0x4b,0xdf,0x8c,0xea,0x28,0xaf,0x08,0x3e,0x01,0x29,0xc4,0x28,0xff,0x2b };
    const uint8_t CIPHERTEXT[] = { 0x5e,0xa8,0x3e,0x91,0x98,0xb4,0x99,0x5d,0xe9,0xd4,0xa1,0x9c,0xb1,0x72,0x6f,0x18 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-48", "[OFB][MCT][128][ENCRYPT][n48]") {
    const uint8_t KEY[] = { 0x79,0x3f,0xed,0x54,0xf6,0xe2,0x37,0xdc,0xdf,0x51,0x44,0x90,0x67,0x0a,0x98,0xe5 };
    const uint8_t IV[] = { 0x5e,0xa8,0x3e,0x91,0x98,0xb4,0x99,0x5d,0xe9,0xd4,0xa1,0x9c,0xb1,0x72,0x6f,0x18 };
    const uint8_t PLAINTEXT[] = { 0xdd,0xa1,0x8e,0x4b,0x2c,0x1d,0xea,0x63,0x50,0xe7,0xf5,0xa5,0xce,0xbe,0x0d,0x19 };
    const uint8_t CIPHERTEXT[] = { 0x4d,0xde,0x82,0xe4,0x43,0xbe,0x7b,0xe0,0xd3,0xde,0x1a,0x70,0x01,0x07,0xb7,0x9c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-49", "[OFB][MCT][128][ENCRYPT][n49]") {
    const uint8_t KEY[] = { 0x34,0xe1,0x6f,0xb0,0xb5,0x5c,0x4c,0x3c,0x0c,0x8f,0x5e,0xe0,0x66,0x0d,0x2f,0x79 };
    const uint8_t IV[] = { 0x4d,0xde,0x82,0xe4,0x43,0xbe,0x7b,0xe0,0xd3,0xde,0x1a,0x70,0x01,0x07,0xb7,0x9c };
    const uint8_t PLAINTEXT[] = { 0xdb,0x25,0xa7,0x56,0x88,0xb5,0xbc,0x2c,0xf8,0x5d,0x3c,0xa3,0xb2,0x78,0xef,0xb4 };
    const uint8_t CIPHERTEXT[] = { 0x02,0x5c,0x06,0x83,0x69,0x86,0xb2,0x9a,0xb6,0xb6,0x96,0xd8,0xa1,0x9f,0x72,0x27 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-50", "[OFB][MCT][128][ENCRYPT][n50]") {
    const uint8_t KEY[] = { 0x36,0xbd,0x69,0x33,0xdc,0xda,0xfe,0xa6,0xba,0x39,0xc8,0x38,0xc7,0x92,0x5d,0x5e };
    const uint8_t IV[] = { 0x02,0x5c,0x06,0x83,0x69,0x86,0xb2,0x9a,0xb6,0xb6,0x96,0xd8,0xa1,0x9f,0x72,0x27 };
    const uint8_t PLAINTEXT[] = { 0xd2,0xea,0x9b,0x3c,0xfd,0x6d,0xa0,0xaa,0xd3,0x2b,0x71,0xcd,0xcd,0xc3,0x9b,0x1e };
    const uint8_t CIPHERTEXT[] = { 0x02,0x89,0xce,0xad,0x0f,0xf4,0x7c,0xae,0x80,0x39,0xf3,0xef,0xf3,0x37,0x9e,0xef };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-51", "[OFB][MCT][128][ENCRYPT][n51]") {
    const uint8_t KEY[] = { 0x34,0x34,0xa7,0x9e,0xd3,0x2e,0x82,0x08,0x3a,0x00,0x3b,0xd7,0x34,0xa5,0xc3,0xb1 };
    const uint8_t IV[] = { 0x02,0x89,0xce,0xad,0x0f,0xf4,0x7c,0xae,0x80,0x39,0xf3,0xef,0xf3,0x37,0x9e,0xef };
    const uint8_t PLAINTEXT[] = { 0x95,0x44,0x7f,0x2d,0xe3,0x3b,0x43,0x59,0xa9,0xf3,0x97,0x9c,0xd6,0x1c,0x09,0xff };
    const uint8_t CIPHERTEXT[] = { 0xd0,0x6f,0xbb,0x95,0x52,0xc4,0xa0,0x05,0x79,0x11,0x93,0x6a,0x18,0x88,0x0b,0xb8 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-52", "[OFB][MCT][128][ENCRYPT][n52]") {
    const uint8_t KEY[] = { 0xe4,0x5b,0x1c,0x0b,0x81,0xea,0x22,0x0d,0x43,0x11,0xa8,0xbd,0x2c,0x2d,0xc8,0x09 };
    const uint8_t IV[] = { 0xd0,0x6f,0xbb,0x95,0x52,0xc4,0xa0,0x05,0x79,0x11,0x93,0x6a,0x18,0x88,0x0b,0xb8 };
    const uint8_t PLAINTEXT[] = { 0xb5,0x9b,0xe9,0x68,0x82,0xf9,0xa9,0xcc,0x2e,0xbc,0x23,0x9f,0xbd,0xc0,0x66,0x39 };
    const uint8_t CIPHERTEXT[] = { 0xf5,0x0a,0xa2,0xa6,0x4a,0x92,0x78,0x49,0x34,0xc4,0x43,0xfe,0xeb,0xc0,0xef,0x4b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-53", "[OFB][MCT][128][ENCRYPT][n53]") {
    const uint8_t KEY[] = { 0x11,0x51,0xbe,0xad,0xcb,0x78,0x5a,0x44,0x77,0xd5,0xeb,0x43,0xc7,0xed,0x27,0x42 };
    const uint8_t IV[] = { 0xf5,0x0a,0xa2,0xa6,0x4a,0x92,0x78,0x49,0x34,0xc4,0x43,0xfe,0xeb,0xc0,0xef,0x4b };
    const uint8_t PLAINTEXT[] = { 0x59,0x38,0x12,0x58,0x35,0x84,0xfd,0x7e,0x88,0x6c,0x37,0x44,0xf4,0x7a,0xd2,0x0d };
    const uint8_t CIPHERTEXT[] = { 0x2f,0x31,0xaf,0x54,0xbf,0x28,0x6d,0x83,0x0a,0x56,0xeb,0xe2,0x81,0xc9,0x13,0x41 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-54", "[OFB][MCT][128][ENCRYPT][n54]") {
    const uint8_t KEY[] = { 0x3e,0x60,0x11,0xf9,0x74,0x50,0x37,0xc7,0x7d,0x83,0x00,0xa1,0x46,0x24,0x34,0x03 };
    const uint8_t IV[] = { 0x2f,0x31,0xaf,0x54,0xbf,0x28,0x6d,0x83,0x0a,0x56,0xeb,0xe2,0x81,0xc9,0x13,0x41 };
    const uint8_t PLAINTEXT[] = { 0xd6,0xf6,0xab,0x46,0x1a,0x4a,0x88,0x86,0xc5,0xb8,0x9d,0xae,0x43,0xf4,0x24,0xf6 };
    const uint8_t CIPHERTEXT[] = { 0x91,0x5d,0xa3,0x46,0x0d,0xea,0xb9,0xc2,0x80,0x60,0x52,0x04,0x31,0x05,0x57,0x41 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-55", "[OFB][MCT][128][ENCRYPT][n55]") {
    const uint8_t KEY[] = { 0xaf,0x3d,0xb2,0xbf,0x79,0xba,0x8e,0x05,0xfd,0xe3,0x52,0xa5,0x77,0x21,0x63,0x42 };
    const uint8_t IV[] = { 0x91,0x5d,0xa3,0x46,0x0d,0xea,0xb9,0xc2,0x80,0x60,0x52,0x04,0x31,0x05,0x57,0x41 };
    const uint8_t PLAINTEXT[] = { 0x69,0x50,0x12,0x14,0x82,0xce,0x6d,0x30,0x9b,0xd7,0x7b,0x67,0xdd,0xaa,0x31,0x34 };
    const uint8_t CIPHERTEXT[] = { 0x98,0x28,0x72,0x9d,0xc3,0x9b,0xbb,0xa2,0x75,0x35,0x59,0x36,0xb3,0xc7,0x5b,0x51 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-56", "[OFB][MCT][128][ENCRYPT][n56]") {
    const uint8_t KEY[] = { 0x37,0x15,0xc0,0x22,0xba,0x21,0x35,0xa7,0x88,0xd6,0x0b,0x93,0xc4,0xe6,0x38,0x13 };
    const uint8_t IV[] = { 0x98,0x28,0x72,0x9d,0xc3,0x9b,0xbb,0xa2,0x75,0x35,0x59,0x36,0xb3,0xc7,0x5b,0x51 };
    const uint8_t PLAINTEXT[] = { 0xa0,0x98,0x63,0xc3,0xf2,0x89,0xf7,0xf6,0x00,0xd6,0x2f,0xf3,0xe6,0x13,0xac,0xbb };
    const uint8_t CIPHERTEXT[] = { 0x0f,0x14,0x12,0xce,0x0c,0x17,0x03,0x9d,0xec,0x34,0x57,0x7a,0x88,0x12,0x35,0x0d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-57", "[OFB][MCT][128][ENCRYPT][n57]") {
    const uint8_t KEY[] = { 0x38,0x01,0xd2,0xec,0xb6,0x36,0x36,0x3a,0x64,0xe2,0x5c,0xe9,0x4c,0xf4,0x0d,0x1e };
    const uint8_t IV[] = { 0x0f,0x14,0x12,0xce,0x0c,0x17,0x03,0x9d,0xec,0x34,0x57,0x7a,0x88,0x12,0x35,0x0d };
    const uint8_t PLAINTEXT[] = { 0x3c,0x0e,0x3b,0x7c,0xd1,0x39,0x3e,0xd2,0xb4,0xb8,0x93,0x7b,0x31,0x29,0x53,0x75 };
    const uint8_t CIPHERTEXT[] = { 0x16,0xc4,0x50,0x15,0xcd,0xad,0xb5,0xe9,0x85,0xb0,0xbd,0xcf,0x02,0x87,0x7c,0x62 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-58", "[OFB][MCT][128][ENCRYPT][n58]") {
    const uint8_t KEY[] = { 0x2e,0xc5,0x82,0xf9,0x7b,0x9b,0x83,0xd3,0xe1,0x52,0xe1,0x26,0x4e,0x73,0x71,0x7c };
    const uint8_t IV[] = { 0x16,0xc4,0x50,0x15,0xcd,0xad,0xb5,0xe9,0x85,0xb0,0xbd,0xcf,0x02,0x87,0x7c,0x62 };
    const uint8_t PLAINTEXT[] = { 0xf1,0x0c,0x0e,0xa2,0x48,0x43,0x84,0x0f,0x24,0x9c,0xe2,0x34,0x6e,0x40,0x6c,0x85 };
    const uint8_t CIPHERTEXT[] = { 0xa9,0x9a,0x5e,0x4c,0xde,0x34,0xea,0xf3,0x1e,0x0c,0x28,0x8f,0x8c,0xe6,0x6b,0x53 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-59", "[OFB][MCT][128][ENCRYPT][n59]") {
    const uint8_t KEY[] = { 0x87,0x5f,0xdc,0xb5,0xa5,0xaf,0x69,0x20,0xff,0x5e,0xc9,0xa9,0xc2,0x95,0x1a,0x2f };
    const uint8_t IV[] = { 0xa9,0x9a,0x5e,0x4c,0xde,0x34,0xea,0xf3,0x1e,0x0c,0x28,0x8f,0x8c,0xe6,0x6b,0x53 };
    const uint8_t PLAINTEXT[] = { 0xe7,0x15,0xd2,0xe6,0xed,0x35,0x1f,0xbe,0x38,0xa0,0xc3,0xb1,0x3c,0xd7,0xe7,0x0f };
    const uint8_t CIPHERTEXT[] = { 0xc3,0x76,0x66,0xdc,0x92,0x52,0x69,0x2e,0xa1,0x60,0x14,0xac,0xa3,0x49,0xe8,0x1e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-60", "[OFB][MCT][128][ENCRYPT][n60]") {
    const uint8_t KEY[] = { 0x44,0x29,0xba,0x69,0x37,0xfd,0x00,0x0e,0x5e,0x3e,0xdd,0x05,0x61,0xdc,0xf2,0x31 };
    const uint8_t IV[] = { 0xc3,0x76,0x66,0xdc,0x92,0x52,0x69,0x2e,0xa1,0x60,0x14,0xac,0xa3,0x49,0xe8,0x1e };
    const uint8_t PLAINTEXT[] = { 0x46,0x89,0x42,0xaa,0x1b,0x49,0x52,0x6d,0x16,0x4a,0x8d,0x27,0xf6,0xa5,0x1a,0x8f };
    const uint8_t CIPHERTEXT[] = { 0x30,0xee,0xd1,0x37,0x19,0x3c,0x7e,0x7c,0x78,0xd4,0x0e,0xb4,0x56,0x33,0x43,0xf2 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-61", "[OFB][MCT][128][ENCRYPT][n61]") {
    const uint8_t KEY[] = { 0x74,0xc7,0x6b,0x5e,0x2e,0xc1,0x7e,0x72,0x26,0xea,0xd3,0xb1,0x37,0xef,0xb1,0xc3 };
    const uint8_t IV[] = { 0x30,0xee,0xd1,0x37,0x19,0x3c,0x7e,0x7c,0x78,0xd4,0x0e,0xb4,0x56,0x33,0x43,0xf2 };
    const uint8_t PLAINTEXT[] = { 0xa6,0xa6,0x9a,0x3d,0xf6,0x29,0x63,0xee,0x58,0x93,0x36,0xd2,0x73,0xd3,0xbc,0x24 };
    const uint8_t CIPHERTEXT[] = { 0x7a,0xa4,0x3c,0x25,0xd8,0xb1,0xb1,0x20,0x76,0xa0,0x5d,0x66,0xe1,0x8d,0xc2,0x6f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-62", "[OFB][MCT][128][ENCRYPT][n62]") {
    const uint8_t KEY[] = { 0x0e,0x63,0x57,0x7b,0xf6,0x70,0xcf,0x52,0x50,0x4a,0x8e,0xd7,0xd6,0x62,0x73,0xac };
    const uint8_t IV[] = { 0x7a,0xa4,0x3c,0x25,0xd8,0xb1,0xb1,0x20,0x76,0xa0,0x5d,0x66,0xe1,0x8d,0xc2,0x6f };
    const uint8_t PLAINTEXT[] = { 0xec,0xdb,0x83,0x6f,0x82,0xc8,0xb5,0x83,0x06,0xc1,0x06,0x86,0x0f,0x1a,0x26,0x42 };
    const uint8_t CIPHERTEXT[] = { 0x08,0xb8,0x71,0xa7,0xb8,0x3b,0x54,0x53,0xd7,0xf4,0x7e,0xc6,0xb3,0x42,0x52,0x0a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-63", "[OFB][MCT][128][ENCRYPT][n63]") {
    const uint8_t KEY[] = { 0x06,0xdb,0x26,0xdc,0x4e,0x4b,0x9b,0x01,0x87,0xbe,0xf0,0x11,0x65,0x20,0x21,0xa6 };
    const uint8_t IV[] = { 0x08,0xb8,0x71,0xa7,0xb8,0x3b,0x54,0x53,0xd7,0xf4,0x7e,0xc6,0xb3,0x42,0x52,0x0a };
    const uint8_t PLAINTEXT[] = { 0x9a,0x14,0xc5,0x76,0xa6,0x26,0x36,0xa4,0x51,0xbc,0xdc,0x84,0x12,0x04,0xac,0x29 };
    const uint8_t CIPHERTEXT[] = { 0x6d,0x0d,0x80,0xcf,0x2f,0xcb,0xaa,0x5b,0x9d,0x89,0xd6,0x07,0x57,0x2d,0x58,0x4f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-64", "[OFB][MCT][128][ENCRYPT][n64]") {
    const uint8_t KEY[] = { 0x6b,0xd6,0xa6,0x13,0x61,0x80,0x31,0x5a,0x1a,0x37,0x26,0x16,0x32,0x0d,0x79,0xe9 };
    const uint8_t IV[] = { 0x6d,0x0d,0x80,0xcf,0x2f,0xcb,0xaa,0x5b,0x9d,0x89,0xd6,0x07,0x57,0x2d,0x58,0x4f };
    const uint8_t PLAINTEXT[] = { 0x2c,0xed,0xd4,0xb1,0x52,0xbc,0xea,0x3c,0x26,0x55,0x1a,0x19,0x5c,0x9b,0x59,0x36 };
    const uint8_t CIPHERTEXT[] = { 0x99,0x26,0xae,0x8f,0x30,0xea,0xcd,0x90,0xcd,0xf8,0x1d,0x9a,0x45,0xfe,0x3b,0x84 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-65", "[OFB][MCT][128][ENCRYPT][n65]") {
    const uint8_t KEY[] = { 0xf2,0xf0,0x08,0x9c,0x51,0x6a,0xfc,0xca,0xd7,0xcf,0x3b,0x8c,0x77,0xf3,0x42,0x6d };
    const uint8_t IV[] = { 0x99,0x26,0xae,0x8f,0x30,0xea,0xcd,0x90,0xcd,0xf8,0x1d,0x9a,0x45,0xfe,0x3b,0x84 };
    const uint8_t PLAINTEXT[] = { 0x3f,0xb8,0xab,0xb4,0x31,0xec,0x54,0xb7,0x0d,0xbd,0xec,0x52,0x26,0x71,0x62,0xd4 };
    const uint8_t CIPHERTEXT[] = { 0x2a,0xe8,0x9c,0xfc,0x33,0xf1,0x22,0x0e,0xb7,0x0c,0x75,0x59,0x43,0xf5,0xcc,0xd6 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-66", "[OFB][MCT][128][ENCRYPT][n66]") {
    const uint8_t KEY[] = { 0xd8,0x18,0x94,0x60,0x62,0x9b,0xde,0xc4,0x60,0xc3,0x4e,0xd5,0x34,0x06,0x8e,0xbb };
    const uint8_t IV[] = { 0x2a,0xe8,0x9c,0xfc,0x33,0xf1,0x22,0x0e,0xb7,0x0c,0x75,0x59,0x43,0xf5,0xcc,0xd6 };
    const uint8_t PLAINTEXT[] = { 0x63,0x55,0x5f,0x1f,0x93,0x8c,0xf2,0xa2,0xf1,0x0c,0xfd,0x9d,0xe3,0xd3,0x80,0x9e };
    const uint8_t CIPHERTEXT[] = { 0xe3,0x4f,0xb8,0x6f,0x76,0x3e,0xbc,0x36,0x03,0xf8,0x6c,0x7d,0xb8,0x2c,0xac,0x36 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-67", "[OFB][MCT][128][ENCRYPT][n67]") {
    const uint8_t KEY[] = { 0x3b,0x57,0x2c,0x0f,0x14,0xa5,0x62,0xf2,0x63,0x3b,0x22,0xa8,0x8c,0x2a,0x22,0x8d };
    const uint8_t IV[] = { 0xe3,0x4f,0xb8,0x6f,0x76,0x3e,0xbc,0x36,0x03,0xf8,0x6c,0x7d,0xb8,0x2c,0xac,0x36 };
    const uint8_t PLAINTEXT[] = { 0x38,0x38,0xe3,0x7d,0xb4,0x77,0x09,0xdd,0x51,0x05,0xe9,0x49,0xf0,0x0b,0xbd,0x3c };
    const uint8_t CIPHERTEXT[] = { 0xde,0x59,0xa9,0x5e,0x77,0xae,0xec,0xd9,0xe0,0x1a,0x3e,0x4a,0x48,0x0d,0x48,0x62 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-68", "[OFB][MCT][128][ENCRYPT][n68]") {
    const uint8_t KEY[] = { 0xe5,0x0e,0x85,0x51,0x63,0x0b,0x8e,0x2b,0x83,0x21,0x1c,0xe2,0xc4,0x27,0x6a,0xef };
    const uint8_t IV[] = { 0xde,0x59,0xa9,0x5e,0x77,0xae,0xec,0xd9,0xe0,0x1a,0x3e,0x4a,0x48,0x0d,0x48,0x62 };
    const uint8_t PLAINTEXT[] = { 0xc0,0x9a,0x19,0x8b,0xc2,0xba,0xcf,0x22,0x6c,0x6e,0x6d,0x8d,0x04,0x8f,0xf8,0xf4 };
    const uint8_t CIPHERTEXT[] = { 0xf4,0xe1,0x7a,0x91,0x7d,0xf0,0xa7,0xdd,0xa4,0x75,0x01,0xb3,0xc1,0x68,0xad,0x82 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-69", "[OFB][MCT][128][ENCRYPT][n69]") {
    const uint8_t KEY[] = { 0x11,0xef,0xff,0xc0,0x1e,0xfb,0x29,0xf6,0x27,0x54,0x1d,0x51,0x05,0x4f,0xc7,0x6d };
    const uint8_t IV[] = { 0xf4,0xe1,0x7a,0x91,0x7d,0xf0,0xa7,0xdd,0xa4,0x75,0x01,0xb3,0xc1,0x68,0xad,0x82 };
    const uint8_t PLAINTEXT[] = { 0x4a,0x14,0x38,0x69,0xa1,0xcd,0xac,0xfe,0x84,0xe6,0xfb,0xa6,0x82,0xc8,0x55,0x2a };
    const uint8_t CIPHERTEXT[] = { 0x44,0x97,0x21,0xce,0x76,0x69,0xd0,0x0f,0x28,0x70,0x7e,0xd2,0x7a,0x9c,0xc9,0x10 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-70", "[OFB][MCT][128][ENCRYPT][n70]") {
    const uint8_t KEY[] = { 0x55,0x78,0xde,0x0e,0x68,0x92,0xf9,0xf9,0x0f,0x24,0x63,0x83,0x7f,0xd3,0x0e,0x7d };
    const uint8_t IV[] = { 0x44,0x97,0x21,0xce,0x76,0x69,0xd0,0x0f,0x28,0x70,0x7e,0xd2,0x7a,0x9c,0xc9,0x10 };
    const uint8_t PLAINTEXT[] = { 0xfb,0x65,0xca,0xd9,0xc6,0xd1,0x9d,0x35,0x53,0x39,0xc6,0xe2,0xb7,0x89,0x72,0x8e };
    const uint8_t CIPHERTEXT[] = { 0xb5,0x67,0x20,0xf7,0x0e,0x5f,0xb8,0xb6,0x1b,0x4e,0x20,0xaf,0x66,0x55,0xc2,0xc2 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-71", "[OFB][MCT][128][ENCRYPT][n71]") {
    const uint8_t KEY[] = { 0xe0,0x1f,0xfe,0xf9,0x66,0xcd,0x41,0x4f,0x14,0x6a,0x43,0x2c,0x19,0x86,0xcc,0xbf };
    const uint8_t IV[] = { 0xb5,0x67,0x20,0xf7,0x0e,0x5f,0xb8,0xb6,0x1b,0x4e,0x20,0xaf,0x66,0x55,0xc2,0xc2 };
    const uint8_t PLAINTEXT[] = { 0xde,0xb6,0x9b,0x0d,0x26,0x13,0x7f,0xae,0x64,0x7b,0xa2,0x80,0x9d,0x10,0xfb,0x88 };
    const uint8_t CIPHERTEXT[] = { 0x1a,0x6b,0x18,0xaf,0xb6,0x52,0x7c,0x74,0x43,0xbb,0xb8,0x42,0x1f,0x65,0xdc,0x9f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-72", "[OFB][MCT][128][ENCRYPT][n72]") {
    const uint8_t KEY[] = { 0xfa,0x74,0xe6,0x56,0xd0,0x9f,0x3d,0x3b,0x57,0xd1,0xfb,0x6e,0x06,0xe3,0x10,0x20 };
    const uint8_t IV[] = { 0x1a,0x6b,0x18,0xaf,0xb6,0x52,0x7c,0x74,0x43,0xbb,0xb8,0x42,0x1f,0x65,0xdc,0x9f };
    const uint8_t PLAINTEXT[] = { 0xaa,0xea,0x91,0x6f,0x18,0x40,0xf6,0x62,0xb9,0x1e,0xe7,0xd2,0xf3,0xaa,0x19,0x06 };
    const uint8_t CIPHERTEXT[] = { 0x9b,0xff,0x53,0xfa,0x4c,0xee,0xb9,0x94,0x48,0x65,0x77,0xa8,0x3b,0x07,0xfd,0xf7 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-73", "[OFB][MCT][128][ENCRYPT][n73]") {
    const uint8_t KEY[] = { 0x61,0x8b,0xb5,0xac,0x9c,0x71,0x84,0xaf,0x1f,0xb4,0x8c,0xc6,0x3d,0xe4,0xed,0xd7 };
    const uint8_t IV[] = { 0x9b,0xff,0x53,0xfa,0x4c,0xee,0xb9,0x94,0x48,0x65,0x77,0xa8,0x3b,0x07,0xfd,0xf7 };
    const uint8_t PLAINTEXT[] = { 0x9d,0x53,0x8b,0x77,0xcd,0xd1,0xfa,0x15,0x57,0xb0,0x0a,0x67,0xe3,0xb6,0x43,0x7a };
    const uint8_t CIPHERTEXT[] = { 0x27,0x93,0x8f,0x37,0x88,0xdb,0xb7,0x68,0x0a,0x79,0x64,0x76,0x8b,0x5b,0xa3,0x59 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-74", "[OFB][MCT][128][ENCRYPT][n74]") {
    const uint8_t KEY[] = { 0x46,0x18,0x3a,0x9b,0x14,0xaa,0x33,0xc7,0x15,0xcd,0xe8,0xb0,0xb6,0xbf,0x4e,0x8e };
    const uint8_t IV[] = { 0x27,0x93,0x8f,0x37,0x88,0xdb,0xb7,0x68,0x0a,0x79,0x64,0x76,0x8b,0x5b,0xa3,0x59 };
    const uint8_t PLAINTEXT[] = { 0x78,0x40,0x6e,0x0d,0xf3,0x8c,0x80,0xd0,0x6c,0xaf,0x58,0xc9,0xc1,0x78,0x63,0x82 };
    const uint8_t CIPHERTEXT[] = { 0x85,0x00,0x7a,0x82,0xbb,0x14,0xbb,0x26,0x37,0x61,0xd1,0xa0,0x28,0xcd,0xd0,0xf7 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-75", "[OFB][MCT][128][ENCRYPT][n75]") {
    const uint8_t KEY[] = { 0xc3,0x18,0x40,0x19,0xaf,0xbe,0x88,0xe1,0x22,0xac,0x39,0x10,0x9e,0x72,0x9e,0x79 };
    const uint8_t IV[] = { 0x85,0x00,0x7a,0x82,0xbb,0x14,0xbb,0x26,0x37,0x61,0xd1,0xa0,0x28,0xcd,0xd0,0xf7 };
    const uint8_t PLAINTEXT[] = { 0x34,0x1e,0x5a,0x28,0x66,0x90,0x0c,0x64,0x6a,0xbe,0xee,0xb8,0x13,0x71,0x44,0x01 };
    const uint8_t CIPHERTEXT[] = { 0xf6,0x47,0x04,0x1f,0x72,0x98,0xce,0x43,0x3c,0xd0,0x47,0x2e,0x39,0xc2,0xd6,0x19 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-76", "[OFB][MCT][128][ENCRYPT][n76]") {
    const uint8_t KEY[] = { 0x35,0x5f,0x44,0x06,0xdd,0x26,0x46,0xa2,0x1e,0x7c,0x7e,0x3e,0xa7,0xb0,0x48,0x60 };
    const uint8_t IV[] = { 0xf6,0x47,0x04,0x1f,0x72,0x98,0xce,0x43,0x3c,0xd0,0x47,0x2e,0x39,0xc2,0xd6,0x19 };
    const uint8_t PLAINTEXT[] = { 0xde,0x00,0xe5,0xfc,0x8a,0xee,0x45,0x44,0xbc,0xab,0x42,0x99,0xf8,0xca,0xdc,0x12 };
    const uint8_t CIPHERTEXT[] = { 0x2d,0xac,0x72,0x7a,0x62,0x75,0x4f,0xbe,0x8c,0x1e,0xdb,0x02,0x5f,0x32,0xc5,0x5a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-77", "[OFB][MCT][128][ENCRYPT][n77]") {
    const uint8_t KEY[] = { 0x18,0xf3,0x36,0x7c,0xbf,0x53,0x09,0x1c,0x92,0x62,0xa5,0x3c,0xf8,0x82,0x8d,0x3a };
    const uint8_t IV[] = { 0x2d,0xac,0x72,0x7a,0x62,0x75,0x4f,0xbe,0x8c,0x1e,0xdb,0x02,0x5f,0x32,0xc5,0x5a };
    const uint8_t PLAINTEXT[] = { 0x02,0x9c,0x14,0x2b,0x8c,0xe5,0xce,0xa4,0x03,0xe9,0x45,0x31,0xa2,0x56,0xb5,0x82 };
    const uint8_t CIPHERTEXT[] = { 0x5e,0xe3,0x9e,0x37,0x99,0x03,0x3b,0xc3,0x9f,0xff,0xee,0x70,0xaa,0x6a,0x7d,0xb9 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-78", "[OFB][MCT][128][ENCRYPT][n78]") {
    const uint8_t KEY[] = { 0x46,0x10,0xa8,0x4b,0x26,0x50,0x32,0xdf,0x0d,0x9d,0x4b,0x4c,0x52,0xe8,0xf0,0x83 };
    const uint8_t IV[] = { 0x5e,0xe3,0x9e,0x37,0x99,0x03,0x3b,0xc3,0x9f,0xff,0xee,0x70,0xaa,0x6a,0x7d,0xb9 };
    const uint8_t PLAINTEXT[] = { 0xb3,0xeb,0x6e,0xc6,0xde,0x36,0xba,0x53,0x18,0xcf,0x29,0x49,0xf3,0x8e,0xe1,0x1e };
    const uint8_t CIPHERTEXT[] = { 0xb9,0x04,0x95,0x93,0x34,0xd9,0x13,0xbe,0x4b,0x79,0xb9,0xad,0x47,0xce,0xc8,0x32 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-79", "[OFB][MCT][128][ENCRYPT][n79]") {
    const uint8_t KEY[] = { 0xff,0x14,0x3d,0xd8,0x12,0x89,0x21,0x61,0x46,0xe4,0xf2,0xe1,0x15,0x26,0x38,0xb1 };
    const uint8_t IV[] = { 0xb9,0x04,0x95,0x93,0x34,0xd9,0x13,0xbe,0x4b,0x79,0xb9,0xad,0x47,0xce,0xc8,0x32 };
    const uint8_t PLAINTEXT[] = { 0x3c,0x12,0x69,0x64,0xb2,0x04,0x54,0x36,0xb9,0xe1,0x30,0xb5,0xd7,0x20,0x5e,0x18 };
    const uint8_t CIPHERTEXT[] = { 0x6b,0x04,0xc3,0xa1,0xf0,0x07,0xd4,0xfe,0x1d,0x8e,0xd1,0xfb,0x36,0xf6,0x52,0xd9 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-80", "[OFB][MCT][128][ENCRYPT][n80]") {
    const uint8_t KEY[] = { 0x94,0x10,0xfe,0x79,0xe2,0x8e,0xf5,0x9f,0x5b,0x6a,0x23,0x1a,0x23,0xd0,0x6a,0x68 };
    const uint8_t IV[] = { 0x6b,0x04,0xc3,0xa1,0xf0,0x07,0xd4,0xfe,0x1d,0x8e,0xd1,0xfb,0x36,0xf6,0x52,0xd9 };
    const uint8_t PLAINTEXT[] = { 0xc6,0xee,0x16,0xf6,0x2f,0xd2,0x0d,0x3a,0xb8,0xd8,0xf8,0x94,0x23,0x2c,0xef,0x1f };
    const uint8_t CIPHERTEXT[] = { 0x07,0xf2,0x1f,0x21,0xf3,0x35,0x36,0xc3,0x7d,0xee,0x7a,0x7f,0x53,0x1a,0x4d,0x0f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-81", "[OFB][MCT][128][ENCRYPT][n81]") {
    const uint8_t KEY[] = { 0x93,0xe2,0xe1,0x58,0x11,0xbb,0xc3,0x5c,0x26,0x84,0x59,0x65,0x70,0xca,0x27,0x67 };
    const uint8_t IV[] = { 0x07,0xf2,0x1f,0x21,0xf3,0x35,0x36,0xc3,0x7d,0xee,0x7a,0x7f,0x53,0x1a,0x4d,0x0f };
    const uint8_t PLAINTEXT[] = { 0xa9,0xc7,0x9c,0x44,0xb4,0x88,0x7d,0x48,0x04,0x72,0x93,0xd5,0x71,0x8e,0x83,0x31 };
    const uint8_t CIPHERTEXT[] = { 0xe2,0xb4,0x11,0xe1,0xce,0x4e,0x97,0x93,0x35,0xac,0xd3,0xc3,0xaa,0xe5,0xff,0xb5 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-82", "[OFB][MCT][128][ENCRYPT][n82]") {
    const uint8_t KEY[] = { 0x71,0x56,0xf0,0xb9,0xdf,0xf5,0x54,0xcf,0x13,0x28,0x8a,0xa6,0xda,0x2f,0xd8,0xd2 };
    const uint8_t IV[] = { 0xe2,0xb4,0x11,0xe1,0xce,0x4e,0x97,0x93,0x35,0xac,0xd3,0xc3,0xaa,0xe5,0xff,0xb5 };
    const uint8_t PLAINTEXT[] = { 0xcd,0x22,0x4c,0x53,0x65,0x02,0xbb,0x4e,0x14,0x7f,0xdc,0x43,0x18,0xfd,0x50,0x28 };
    const uint8_t CIPHERTEXT[] = { 0x99,0xf6,0x43,0x9f,0xa8,0x78,0x45,0xb4,0xea,0x6a,0x0d,0x5e,0x85,0x53,0x64,0xf1 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-83", "[OFB][MCT][128][ENCRYPT][n83]") {
    const uint8_t KEY[] = { 0xe8,0xa0,0xb3,0x26,0x77,0x8d,0x11,0x7b,0xf9,0x42,0x87,0xf8,0x5f,0x7c,0xbc,0x23 };
    const uint8_t IV[] = { 0x99,0xf6,0x43,0x9f,0xa8,0x78,0x45,0xb4,0xea,0x6a,0x0d,0x5e,0x85,0x53,0x64,0xf1 };
    const uint8_t PLAINTEXT[] = { 0x0c,0x48,0x84,0xcd,0x78,0xcb,0x8b,0x27,0xc9,0x4d,0xcd,0xb6,0xd1,0xd7,0x63,0xd3 };
    const uint8_t CIPHERTEXT[] = { 0xa1,0x79,0xe9,0x8f,0x64,0x82,0x27,0x2d,0x42,0x83,0x37,0x11,0xb2,0x6a,0x24,0x05 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-84", "[OFB][MCT][128][ENCRYPT][n84]") {
    const uint8_t KEY[] = { 0x49,0xd9,0x5a,0xa9,0x13,0x0f,0x36,0x56,0xbb,0xc1,0xb0,0xe9,0xed,0x16,0x98,0x26 };
    const uint8_t IV[] = { 0xa1,0x79,0xe9,0x8f,0x64,0x82,0x27,0x2d,0x42,0x83,0x37,0x11,0xb2,0x6a,0x24,0x05 };
    const uint8_t PLAINTEXT[] = { 0x3c,0x21,0x41,0x3f,0xbf,0x88,0xbb,0xe9,0xa4,0x4a,0x87,0x9a,0x1e,0x6c,0xcc,0x48 };
    const uint8_t CIPHERTEXT[] = { 0x1a,0xa0,0xdd,0xb7,0x47,0x46,0x35,0x03,0xfb,0x3e,0x6f,0xba,0x86,0x7f,0xc0,0xa6 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-85", "[OFB][MCT][128][ENCRYPT][n85]") {
    const uint8_t KEY[] = { 0x53,0x79,0x87,0x1e,0x54,0x49,0x03,0x55,0x40,0xff,0xdf,0x53,0x6b,0x69,0x58,0x80 };
    const uint8_t IV[] = { 0x1a,0xa0,0xdd,0xb7,0x47,0x46,0x35,0x03,0xfb,0x3e,0x6f,0xba,0x86,0x7f,0xc0,0xa6 };
    const uint8_t PLAINTEXT[] = { 0x2e,0x20,0xa4,0x14,0xc1,0xf1,0x81,0x4a,0x8b,0xed,0xeb,0xf8,0xd8,0x2a,0xe5,0xee };
    const uint8_t CIPHERTEXT[] = { 0xff,0xd2,0x96,0x39,0x2a,0x78,0x1e,0x07,0x36,0x9a,0x33,0x8d,0x7e,0x42,0x23,0xc4 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-86", "[OFB][MCT][128][ENCRYPT][n86]") {
    const uint8_t KEY[] = { 0xac,0xab,0x11,0x27,0x7e,0x31,0x1d,0x52,0x76,0x65,0xec,0xde,0x15,0x2b,0x7b,0x44 };
    const uint8_t IV[] = { 0xff,0xd2,0x96,0x39,0x2a,0x78,0x1e,0x07,0x36,0x9a,0x33,0x8d,0x7e,0x42,0x23,0xc4 };
    const uint8_t PLAINTEXT[] = { 0xc8,0x67,0x2c,0xdd,0x50,0xe9,0xe6,0x39,0xae,0x61,0xf0,0xc7,0x5a,0x02,0x75,0xf1 };
    const uint8_t CIPHERTEXT[] = { 0x8d,0x22,0x7a,0xf2,0x53,0x87,0x65,0x02,0xbb,0x5e,0x21,0xf7,0x0d,0x9c,0xf1,0xb1 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-87", "[OFB][MCT][128][ENCRYPT][n87]") {
    const uint8_t KEY[] = { 0x21,0x89,0x6b,0xd5,0x2d,0xb6,0x78,0x50,0xcd,0x3b,0xcd,0x29,0x18,0xb7,0x8a,0xf5 };
    const uint8_t IV[] = { 0x8d,0x22,0x7a,0xf2,0x53,0x87,0x65,0x02,0xbb,0x5e,0x21,0xf7,0x0d,0x9c,0xf1,0xb1 };
    const uint8_t PLAINTEXT[] = { 0x0d,0xd3,0x30,0x71,0xd2,0x03,0x45,0x94,0xc9,0xf6,0x04,0x59,0xeb,0x09,0x80,0x65 };
    const uint8_t CIPHERTEXT[] = { 0x7b,0x2b,0x6e,0xda,0xf0,0xb4,0xc0,0x3a,0x88,0x78,0x1d,0x53,0x3d,0x81,0x37,0xcb };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-88", "[OFB][MCT][128][ENCRYPT][n88]") {
    const uint8_t KEY[] = { 0x5a,0xa2,0x05,0x0f,0xdd,0x02,0xb8,0x6a,0x45,0x43,0xd0,0x7a,0x25,0x36,0xbd,0x3e };
    const uint8_t IV[] = { 0x7b,0x2b,0x6e,0xda,0xf0,0xb4,0xc0,0x3a,0x88,0x78,0x1d,0x53,0x3d,0x81,0x37,0xcb };
    const uint8_t PLAINTEXT[] = { 0xd6,0xe5,0x24,0x30,0x5f,0x72,0xa5,0x0d,0x90,0x1e,0xc2,0xb4,0xcb,0x8a,0x39,0xca };
    const uint8_t CIPHERTEXT[] = { 0x1e,0x7b,0xb0,0x7a,0x46,0x80,0x90,0x1e,0xf7,0xe3,0x82,0x7e,0xa3,0x52,0x2b,0x5b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-89", "[OFB][MCT][128][ENCRYPT][n89]") {
    const uint8_t KEY[] = { 0x44,0xd9,0xb5,0x75,0x9b,0x82,0x28,0x74,0xb2,0xa0,0x52,0x04,0x86,0x64,0x96,0x65 };
    const uint8_t IV[] = { 0x1e,0x7b,0xb0,0x7a,0x46,0x80,0x90,0x1e,0xf7,0xe3,0x82,0x7e,0xa3,0x52,0x2b,0x5b };
    const uint8_t PLAINTEXT[] = { 0xd3,0x9d,0x63,0x33,0x82,0xfe,0x6f,0xab,0xaf,0x4b,0xb2,0x63,0x3d,0xd5,0xed,0x6a };
    const uint8_t CIPHERTEXT[] = { 0x37,0xa4,0x4c,0x2d,0xf5,0x25,0x5a,0x29,0xc6,0x6b,0xfd,0x84,0x39,0xcb,0x98,0x42 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-90", "[OFB][MCT][128][ENCRYPT][n90]") {
    const uint8_t KEY[] = { 0x73,0x7d,0xf9,0x58,0x6e,0xa7,0x72,0x5d,0x74,0xcb,0xaf,0x80,0xbf,0xaf,0x0e,0x27 };
    const uint8_t IV[] = { 0x37,0xa4,0x4c,0x2d,0xf5,0x25,0x5a,0x29,0xc6,0x6b,0xfd,0x84,0x39,0xcb,0x98,0x42 };
    const uint8_t PLAINTEXT[] = { 0x58,0x8f,0x9b,0xd8,0x6d,0x9a,0xa8,0xad,0x9c,0xb3,0x49,0x05,0xbb,0x17,0xdc,0xa8 };
    const uint8_t CIPHERTEXT[] = { 0x6a,0xe8,0xc4,0xb4,0xe1,0x12,0xdb,0x8c,0x94,0x0c,0x58,0xe8,0xae,0xe1,0x6f,0xd7 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-91", "[OFB][MCT][128][ENCRYPT][n91]") {
    const uint8_t KEY[] = { 0x19,0x95,0x3d,0xec,0x8f,0xb5,0xa9,0xd1,0xe0,0xc7,0xf7,0x68,0x11,0x4e,0x61,0xf0 };
    const uint8_t IV[] = { 0x6a,0xe8,0xc4,0xb4,0xe1,0x12,0xdb,0x8c,0x94,0x0c,0x58,0xe8,0xae,0xe1,0x6f,0xd7 };
    const uint8_t PLAINTEXT[] = { 0x58,0x40,0xb5,0xe6,0x0d,0x3d,0x64,0xe9,0x92,0xb2,0x13,0x3d,0xa5,0x20,0xdd,0xb0 };
    const uint8_t CIPHERTEXT[] = { 0x6e,0x5b,0x0a,0x8d,0xe1,0x91,0x37,0x0a,0x6d,0x2f,0xa5,0xa0,0x0c,0x92,0xbe,0xec };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-92", "[OFB][MCT][128][ENCRYPT][n92]") {
    const uint8_t KEY[] = { 0x77,0xce,0x37,0x61,0x6e,0x24,0x9e,0xdb,0x8d,0xe8,0x52,0xc8,0x1d,0xdc,0xdf,0x1c };
    const uint8_t IV[] = { 0x6e,0x5b,0x0a,0x8d,0xe1,0x91,0x37,0x0a,0x6d,0x2f,0xa5,0xa0,0x0c,0x92,0xbe,0xec };
    const uint8_t PLAINTEXT[] = { 0x81,0x9b,0x01,0x91,0x33,0x33,0xe8,0x90,0x73,0x6b,0xfe,0x83,0x9b,0xa7,0x7e,0x67 };
    const uint8_t CIPHERTEXT[] = { 0x5c,0xbd,0xe0,0x30,0xd0,0x83,0xa7,0xba,0x7c,0x33,0x7d,0xbd,0xda,0x9f,0xb8,0x14 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-93", "[OFB][MCT][128][ENCRYPT][n93]") {
    const uint8_t KEY[] = { 0x2b,0x73,0xd7,0x51,0xbe,0xa7,0x39,0x61,0xf1,0xdb,0x2f,0x75,0xc7,0x43,0x67,0x08 };
    const uint8_t IV[] = { 0x5c,0xbd,0xe0,0x30,0xd0,0x83,0xa7,0xba,0x7c,0x33,0x7d,0xbd,0xda,0x9f,0xb8,0x14 };
    const uint8_t PLAINTEXT[] = { 0x51,0x5b,0x49,0xc5,0x3b,0xa8,0xf5,0x42,0x6a,0xc4,0x7a,0x67,0x08,0x48,0x7f,0x30 };
    const uint8_t CIPHERTEXT[] = { 0xda,0x5b,0xc7,0x51,0x63,0x08,0xae,0x65,0xf8,0x85,0x26,0xad,0x11,0x6b,0x49,0x82 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-94", "[OFB][MCT][128][ENCRYPT][n94]") {
    const uint8_t KEY[] = { 0xf1,0x28,0x10,0x00,0xdd,0xaf,0x97,0x04,0x09,0x5e,0x09,0xd8,0xd6,0x28,0x2e,0x8a };
    const uint8_t IV[] = { 0xda,0x5b,0xc7,0x51,0x63,0x08,0xae,0x65,0xf8,0x85,0x26,0xad,0x11,0x6b,0x49,0x82 };
    const uint8_t PLAINTEXT[] = { 0xc3,0x38,0x97,0xf2,0x68,0x12,0x40,0xf3,0x6a,0xb1,0x04,0xf2,0x31,0x24,0x9c,0x58 };
    const uint8_t CIPHERTEXT[] = { 0x90,0x51,0x89,0x94,0x7a,0x2e,0xe5,0x6c,0x1b,0x30,0xcd,0x9f,0xbb,0xb3,0x56,0x85 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-95", "[OFB][MCT][128][ENCRYPT][n95]") {
    const uint8_t KEY[] = { 0x61,0x79,0x99,0x94,0xa7,0x81,0x72,0x68,0x12,0x6e,0xc4,0x47,0x6d,0x9b,0x78,0x0f };
    const uint8_t IV[] = { 0x90,0x51,0x89,0x94,0x7a,0x2e,0xe5,0x6c,0x1b,0x30,0xcd,0x9f,0xbb,0xb3,0x56,0x85 };
    const uint8_t PLAINTEXT[] = { 0x05,0xaa,0x7e,0xa4,0xbd,0x4b,0x49,0xab,0x01,0xc4,0xa6,0xe3,0x89,0x93,0xc7,0xbe };
    const uint8_t CIPHERTEXT[] = { 0x6a,0x32,0x28,0x0f,0x99,0x1e,0xa0,0xaa,0x7a,0x11,0xe1,0xd1,0xd6,0xb9,0x42,0x3d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-96", "[OFB][MCT][128][ENCRYPT][n96]") {
    const uint8_t KEY[] = { 0x0b,0x4b,0xb1,0x9b,0x3e,0x9f,0xd2,0xc2,0x68,0x7f,0x25,0x96,0xbb,0x22,0x3a,0x32 };
    const uint8_t IV[] = { 0x6a,0x32,0x28,0x0f,0x99,0x1e,0xa0,0xaa,0x7a,0x11,0xe1,0xd1,0xd6,0xb9,0x42,0x3d };
    const uint8_t PLAINTEXT[] = { 0x8c,0x33,0xe0,0x1e,0x92,0x2f,0x26,0xa5,0x71,0x3e,0x14,0x81,0x78,0x92,0x7f,0xff };
    const uint8_t CIPHERTEXT[] = { 0x4d,0x87,0x3f,0x78,0x6f,0xb2,0xb6,0x0c,0x2b,0x1a,0xe7,0x47,0xb9,0x03,0x30,0x30 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-97", "[OFB][MCT][128][ENCRYPT][n97]") {
    const uint8_t KEY[] = { 0x46,0xcc,0x8e,0xe3,0x51,0x2d,0x64,0xce,0x43,0x65,0xc2,0xd1,0x02,0x21,0x0a,0x02 };
    const uint8_t IV[] = { 0x4d,0x87,0x3f,0x78,0x6f,0xb2,0xb6,0x0c,0x2b,0x1a,0xe7,0x47,0xb9,0x03,0x30,0x30 };
    const uint8_t PLAINTEXT[] = { 0xf2,0x5f,0xa0,0xdc,0xbc,0x60,0xb8,0xb8,0x08,0x2a,0x54,0x14,0x9d,0xd4,0x63,0xc6 };
    const uint8_t CIPHERTEXT[] = { 0x92,0x53,0x1b,0x7f,0xe4,0x46,0xd0,0x7c,0xe5,0xe3,0x38,0xba,0xf5,0x8a,0xe9,0xf6 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-98", "[OFB][MCT][128][ENCRYPT][n98]") {
    const uint8_t KEY[] = { 0xd4,0x9f,0x95,0x9c,0xb5,0x6b,0xb4,0xb2,0xa6,0x86,0xfa,0x6b,0xf7,0xab,0xe3,0xf4 };
    const uint8_t IV[] = { 0x92,0x53,0x1b,0x7f,0xe4,0x46,0xd0,0x7c,0xe5,0xe3,0x38,0xba,0xf5,0x8a,0xe9,0xf6 };
    const uint8_t PLAINTEXT[] = { 0x2f,0xdc,0xf6,0xd3,0x49,0x46,0xa7,0xd7,0x9b,0x78,0x01,0x74,0x80,0x03,0xf4,0xd4 };
    const uint8_t CIPHERTEXT[] = { 0x59,0x2e,0x5e,0x15,0x7a,0x16,0x33,0x08,0x3c,0x6a,0xb9,0x05,0xee,0xbc,0x3f,0xf9 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-ENCRYPT-99", "[OFB][MCT][128][ENCRYPT][n99]") {
    const uint8_t KEY[] = { 0x8d,0xb1,0xcb,0x89,0xcf,0x7d,0x87,0xba,0x9a,0xec,0x43,0x6e,0x19,0x17,0xdc,0x0d };
    const uint8_t IV[] = { 0x59,0x2e,0x5e,0x15,0x7a,0x16,0x33,0x08,0x3c,0x6a,0xb9,0x05,0xee,0xbc,0x3f,0xf9 };
    const uint8_t PLAINTEXT[] = { 0x1a,0xac,0xbd,0xe6,0xe4,0x61,0xe7,0x7d,0xc0,0x00,0xef,0x15,0x1e,0xbf,0x08,0x9e };
    const uint8_t CIPHERTEXT[] = { 0x67,0x54,0xf2,0x52,0x1b,0x14,0x15,0x48,0x19,0xb1,0xb4,0xf2,0xa9,0x8a,0x89,0xfa };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-0", "[OFB][MCT][128][DECRYPT][n0]") {
    const uint8_t KEY[] = { 0x6e,0xc8,0xf8,0xdb,0x4b,0x5e,0xec,0x1f,0x64,0xa7,0x99,0xc1,0xbb,0x29,0xb9,0xaa };
    const uint8_t IV[] = { 0xb2,0x32,0x17,0x65,0xf4,0x8e,0xdd,0xc7,0xf8,0x4b,0x94,0x23,0xa5,0x40,0x00,0x3c };
    const uint8_t PLAINTEXT[] = { 0x9c,0x10,0x37,0xb7,0x7f,0x32,0xbd,0x31,0x49,0x29,0xce,0xa9,0x5a,0x39,0xbc,0xdc };
    const uint8_t CIPHERTEXT[] = { 0x0d,0xda,0x83,0x4a,0xda,0xec,0x20,0x39,0x04,0xd2,0x88,0xf4,0x32,0x63,0xc4,0xb7 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-1", "[OFB][MCT][128][DECRYPT][n1]") {
    const uint8_t KEY[] = { 0xf2,0xd8,0xcf,0x6c,0x34,0x6c,0x51,0x2e,0x2d,0x8e,0x57,0x68,0xe1,0x10,0x05,0x76 };
    const uint8_t IV[] = { 0x9c,0x10,0x37,0xb7,0x7f,0x32,0xbd,0x31,0x49,0x29,0xce,0xa9,0x5a,0x39,0xbc,0xdc };
    const uint8_t PLAINTEXT[] = { 0x66,0x9d,0x8c,0xf0,0x91,0x4b,0x9f,0xcc,0xf6,0x03,0x67,0xa2,0x8e,0xba,0x72,0x48 };
    const uint8_t CIPHERTEXT[] = { 0x1d,0x4c,0x9d,0x06,0x75,0xf0,0xfd,0x0f,0xc8,0x43,0xe8,0x3d,0xaf,0xe6,0x57,0x1e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-2", "[OFB][MCT][128][DECRYPT][n2]") {
    const uint8_t KEY[] = { 0x94,0x45,0x43,0x9c,0xa5,0x27,0xce,0xe2,0xdb,0x8d,0x30,0xca,0x6f,0xaa,0x77,0x3e };
    const uint8_t IV[] = { 0x66,0x9d,0x8c,0xf0,0x91,0x4b,0x9f,0xcc,0xf6,0x03,0x67,0xa2,0x8e,0xba,0x72,0x48 };
    const uint8_t PLAINTEXT[] = { 0x59,0x0c,0x69,0xbd,0x9e,0xeb,0x15,0x15,0x81,0x39,0xa9,0x8c,0x1e,0x28,0x11,0x99 };
    const uint8_t CIPHERTEXT[] = { 0x88,0x7a,0x11,0x98,0xa7,0x65,0x8b,0x4c,0xba,0x5c,0x6d,0x02,0xf4,0xc6,0x63,0x7d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-3", "[OFB][MCT][128][DECRYPT][n3]") {
    const uint8_t KEY[] = { 0xcd,0x49,0x2a,0x21,0x3b,0xcc,0xdb,0xf7,0x5a,0xb4,0x99,0x46,0x71,0x82,0x66,0xa7 };
    const uint8_t IV[] = { 0x59,0x0c,0x69,0xbd,0x9e,0xeb,0x15,0x15,0x81,0x39,0xa9,0x8c,0x1e,0x28,0x11,0x99 };
    const uint8_t PLAINTEXT[] = { 0x6c,0x62,0xc3,0xe1,0xde,0x88,0xa2,0x52,0xd2,0x00,0x67,0x77,0x9c,0x44,0xcd,0xbb };
    const uint8_t CIPHERTEXT[] = { 0xfa,0x4c,0x51,0x5b,0xfd,0x9e,0x5b,0x2c,0xba,0x02,0x68,0xf1,0xed,0xf2,0x28,0x7e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-4", "[OFB][MCT][128][DECRYPT][n4]") {
    const uint8_t KEY[] = { 0xa1,0x2b,0xe9,0xc0,0xe5,0x44,0x79,0xa5,0x88,0xb4,0xfe,0x31,0xed,0xc6,0xab,0x1c };
    const uint8_t IV[] = { 0x6c,0x62,0xc3,0xe1,0xde,0x88,0xa2,0x52,0xd2,0x00,0x67,0x77,0x9c,0x44,0xcd,0xbb };
    const uint8_t PLAINTEXT[] = { 0x53,0x68,0xa9,0x80,0x33,0x0f,0xa5,0x4a,0x3f,0xc2,0x13,0xf0,0xaa,0x59,0x9e,0x8b };
    const uint8_t CIPHERTEXT[] = { 0x65,0x03,0xe5,0xa5,0x5c,0xef,0x56,0x44,0x70,0x4a,0x38,0xfa,0x88,0x70,0xa3,0x0d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-5", "[OFB][MCT][128][DECRYPT][n5]") {
    const uint8_t KEY[] = { 0xf2,0x43,0x40,0x40,0xd6,0x4b,0xdc,0xef,0xb7,0x76,0xed,0xc1,0x47,0x9f,0x35,0x97 };
    const uint8_t IV[] = { 0x53,0x68,0xa9,0x80,0x33,0x0f,0xa5,0x4a,0x3f,0xc2,0x13,0xf0,0xaa,0x59,0x9e,0x8b };
    const uint8_t PLAINTEXT[] = { 0x18,0x71,0x72,0xa7,0xfe,0x2a,0xbc,0x92,0xbc,0x05,0x3b,0xa2,0xf2,0x6d,0x79,0x5f };
    const uint8_t CIPHERTEXT[] = { 0xfc,0x90,0x2b,0x8f,0x1b,0x77,0xf3,0x5a,0x20,0x1c,0x99,0xae,0x0f,0x7e,0x42,0x2e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-6", "[OFB][MCT][128][DECRYPT][n6]") {
    const uint8_t KEY[] = { 0xea,0x32,0x32,0xe7,0x28,0x61,0x60,0x7d,0x0b,0x73,0xd6,0x63,0xb5,0xf2,0x4c,0xc8 };
    const uint8_t IV[] = { 0x18,0x71,0x72,0xa7,0xfe,0x2a,0xbc,0x92,0xbc,0x05,0x3b,0xa2,0xf2,0x6d,0x79,0x5f };
    const uint8_t PLAINTEXT[] = { 0x17,0xfb,0x8d,0xcc,0x1d,0x83,0xde,0x89,0x18,0x2e,0xa1,0x8a,0xc9,0x5e,0x0d,0xca };
    const uint8_t CIPHERTEXT[] = { 0x2b,0x09,0xbf,0x75,0x8e,0xe2,0x4c,0x26,0x99,0xaa,0x14,0x11,0x03,0xd0,0x44,0xb0 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-7", "[OFB][MCT][128][DECRYPT][n7]") {
    const uint8_t KEY[] = { 0xfd,0xc9,0xbf,0x2b,0x35,0xe2,0xbe,0xf4,0x13,0x5d,0x77,0xe9,0x7c,0xac,0x41,0x02 };
    const uint8_t IV[] = { 0x17,0xfb,0x8d,0xcc,0x1d,0x83,0xde,0x89,0x18,0x2e,0xa1,0x8a,0xc9,0x5e,0x0d,0xca };
    const uint8_t PLAINTEXT[] = { 0x09,0x95,0x69,0x12,0x64,0xcc,0x83,0x84,0x04,0x75,0x00,0xff,0x33,0x96,0xd9,0x49 };
    const uint8_t CIPHERTEXT[] = { 0x00,0xfc,0x0a,0x80,0x08,0xc9,0x9a,0xde,0x4a,0xbc,0xcc,0x62,0xcd,0x9a,0xdc,0x8f };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-8", "[OFB][MCT][128][DECRYPT][n8]") {
    const uint8_t KEY[] = { 0xf4,0x5c,0xd6,0x39,0x51,0x2e,0x3d,0x70,0x17,0x28,0x77,0x16,0x4f,0x3a,0x98,0x4b };
    const uint8_t IV[] = { 0x09,0x95,0x69,0x12,0x64,0xcc,0x83,0x84,0x04,0x75,0x00,0xff,0x33,0x96,0xd9,0x49 };
    const uint8_t PLAINTEXT[] = { 0xc1,0x89,0x53,0x05,0x4a,0xe2,0xa9,0x1c,0x39,0xcc,0x4b,0xe3,0xe9,0x30,0x40,0xb4 };
    const uint8_t CIPHERTEXT[] = { 0xff,0x1e,0x48,0xbe,0xec,0x4d,0x3d,0xef,0x55,0x90,0xc3,0xbd,0x25,0x1a,0xa6,0x68 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-9", "[OFB][MCT][128][DECRYPT][n9]") {
    const uint8_t KEY[] = { 0x35,0xd5,0x85,0x3c,0x1b,0xcc,0x94,0x6c,0x2e,0xe4,0x3c,0xf5,0xa6,0x0a,0xd8,0xff };
    const uint8_t IV[] = { 0xc1,0x89,0x53,0x05,0x4a,0xe2,0xa9,0x1c,0x39,0xcc,0x4b,0xe3,0xe9,0x30,0x40,0xb4 };
    const uint8_t PLAINTEXT[] = { 0x98,0xc8,0x3d,0x82,0x21,0x1e,0xe0,0x72,0x8a,0x42,0x3d,0x77,0xc7,0x44,0x3c,0xbc };
    const uint8_t CIPHERTEXT[] = { 0x61,0x6e,0x07,0x5f,0xfa,0x94,0x33,0x64,0x3c,0xf8,0xa8,0x0d,0x63,0xdb,0xb7,0x51 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-10", "[OFB][MCT][128][DECRYPT][n10]") {
    const uint8_t KEY[] = { 0xad,0x1d,0xb8,0xbe,0x3a,0xd2,0x74,0x1e,0xa4,0xa6,0x01,0x82,0x61,0x4e,0xe4,0x43 };
    const uint8_t IV[] = { 0x98,0xc8,0x3d,0x82,0x21,0x1e,0xe0,0x72,0x8a,0x42,0x3d,0x77,0xc7,0x44,0x3c,0xbc };
    const uint8_t PLAINTEXT[] = { 0x6b,0x8e,0x6b,0xe6,0x49,0xe7,0x1a,0xd8,0xcd,0x3f,0x77,0x4f,0x0f,0x4b,0x54,0xcb };
    const uint8_t CIPHERTEXT[] = { 0x41,0x84,0xed,0xe9,0x2e,0xdc,0x14,0x1b,0xa1,0x99,0x14,0xdf,0x65,0xb6,0xb7,0x33 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-11", "[OFB][MCT][128][DECRYPT][n11]") {
    const uint8_t KEY[] = { 0xc6,0x93,0xd3,0x58,0x73,0x35,0x6e,0xc6,0x69,0x99,0x76,0xcd,0x6e,0x05,0xb0,0x88 };
    const uint8_t IV[] = { 0x6b,0x8e,0x6b,0xe6,0x49,0xe7,0x1a,0xd8,0xcd,0x3f,0x77,0x4f,0x0f,0x4b,0x54,0xcb };
    const uint8_t PLAINTEXT[] = { 0xf4,0x15,0xa7,0x42,0xfd,0x9f,0xce,0xa7,0x56,0x9d,0x7f,0x41,0x83,0xef,0x11,0x62 };
    const uint8_t CIPHERTEXT[] = { 0x47,0xd0,0xf8,0xc2,0xd5,0xb5,0x3d,0x73,0x83,0x9c,0x7f,0xf2,0xb0,0xaf,0xf4,0xa7 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-12", "[OFB][MCT][128][DECRYPT][n12]") {
    const uint8_t KEY[] = { 0x32,0x86,0x74,0x1a,0x8e,0xaa,0xa0,0x61,0x3f,0x04,0x09,0x8c,0xed,0xea,0xa1,0xea };
    const uint8_t IV[] = { 0xf4,0x15,0xa7,0x42,0xfd,0x9f,0xce,0xa7,0x56,0x9d,0x7f,0x41,0x83,0xef,0x11,0x62 };
    const uint8_t PLAINTEXT[] = { 0xa1,0xf9,0x67,0xf0,0x1b,0x30,0x07,0xa1,0xe3,0x49,0x54,0x8c,0xaa,0xa5,0x00,0xc5 };
    const uint8_t CIPHERTEXT[] = { 0x60,0x05,0x5e,0x68,0x67,0xd3,0x3e,0xc2,0x63,0xfc,0xc9,0xed,0x31,0xfb,0x54,0x01 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-13", "[OFB][MCT][128][DECRYPT][n13]") {
    const uint8_t KEY[] = { 0x93,0x7f,0x13,0xea,0x95,0x9a,0xa7,0xc0,0xdc,0x4d,0x5d,0x00,0x47,0x4f,0xa1,0x2f };
    const uint8_t IV[] = { 0xa1,0xf9,0x67,0xf0,0x1b,0x30,0x07,0xa1,0xe3,0x49,0x54,0x8c,0xaa,0xa5,0x00,0xc5 };
    const uint8_t PLAINTEXT[] = { 0xb9,0xa3,0x6b,0x32,0xe8,0x79,0x2f,0x63,0x14,0x09,0xa7,0x2f,0x57,0x15,0x0a,0xcc };
    const uint8_t CIPHERTEXT[] = { 0xe5,0x31,0x7f,0xc2,0x0c,0xf2,0x41,0x1f,0x09,0xe8,0x3d,0x40,0x46,0xe0,0xb9,0x91 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-14", "[OFB][MCT][128][DECRYPT][n14]") {
    const uint8_t KEY[] = { 0x2a,0xdc,0x78,0xd8,0x7d,0xe3,0x88,0xa3,0xc8,0x44,0xfa,0x2f,0x10,0x5a,0xab,0xe3 };
    const uint8_t IV[] = { 0xb9,0xa3,0x6b,0x32,0xe8,0x79,0x2f,0x63,0x14,0x09,0xa7,0x2f,0x57,0x15,0x0a,0xcc };
    const uint8_t PLAINTEXT[] = { 0xf2,0xf4,0x2c,0xdb,0xab,0xeb,0x65,0xbe,0x2d,0x6a,0xcf,0xe5,0x7d,0xf5,0xfa,0x0b };
    const uint8_t CIPHERTEXT[] = { 0xf1,0x17,0xf8,0x89,0x74,0xc3,0x1a,0x56,0x62,0x2b,0xe0,0x17,0xfd,0xe1,0xcd,0x08 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-15", "[OFB][MCT][128][DECRYPT][n15]") {
    const uint8_t KEY[] = { 0xd8,0x28,0x54,0x03,0xd6,0x08,0xed,0x1d,0xe5,0x2e,0x35,0xca,0x6d,0xaf,0x51,0xe8 };
    const uint8_t IV[] = { 0xf2,0xf4,0x2c,0xdb,0xab,0xeb,0x65,0xbe,0x2d,0x6a,0xcf,0xe5,0x7d,0xf5,0xfa,0x0b };
    const uint8_t PLAINTEXT[] = { 0xff,0x04,0xed,0xe8,0xbb,0xd8,0xfc,0x5d,0xc6,0x5e,0xe7,0x72,0x7e,0x91,0x6c,0x81 };
    const uint8_t CIPHERTEXT[] = { 0xbe,0x79,0x6f,0xc4,0x8b,0x4a,0x6f,0x09,0x68,0x6d,0xe6,0xcb,0x24,0x96,0x6a,0xb5 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-16", "[OFB][MCT][128][DECRYPT][n16]") {
    const uint8_t KEY[] = { 0x27,0x2c,0xb9,0xeb,0x6d,0xd0,0x11,0x40,0x23,0x70,0xd2,0xb8,0x13,0x3e,0x3d,0x69 };
    const uint8_t IV[] = { 0xff,0x04,0xed,0xe8,0xbb,0xd8,0xfc,0x5d,0xc6,0x5e,0xe7,0x72,0x7e,0x91,0x6c,0x81 };
    const uint8_t PLAINTEXT[] = { 0x6c,0x55,0x63,0x00,0x16,0x4f,0x8f,0x63,0xa5,0x65,0xd7,0xd4,0xfa,0xf8,0x5f,0xcf };
    const uint8_t CIPHERTEXT[] = { 0x5c,0x07,0x2d,0xb8,0xb8,0xc5,0xdf,0x0e,0xeb,0x10,0x66,0x9c,0x9e,0x08,0xe6,0x19 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-17", "[OFB][MCT][128][DECRYPT][n17]") {
    const uint8_t KEY[] = { 0x4b,0x79,0xda,0xeb,0x7b,0x9f,0x9e,0x23,0x86,0x15,0x05,0x6c,0xe9,0xc6,0x62,0xa6 };
    const uint8_t IV[] = { 0x6c,0x55,0x63,0x00,0x16,0x4f,0x8f,0x63,0xa5,0x65,0xd7,0xd4,0xfa,0xf8,0x5f,0xcf };
    const uint8_t PLAINTEXT[] = { 0x22,0x1a,0x1b,0xcf,0xe0,0x2a,0xf5,0x77,0xf1,0x9d,0x50,0x4d,0x82,0x6e,0x8f,0x74 };
    const uint8_t CIPHERTEXT[] = { 0x29,0x6c,0xb3,0xab,0xe5,0x61,0x6c,0x32,0x8f,0x73,0x90,0xf1,0xf3,0xdc,0xac,0x0b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-18", "[OFB][MCT][128][DECRYPT][n18]") {
    const uint8_t KEY[] = { 0x69,0x63,0xc1,0x24,0x9b,0xb5,0x6b,0x54,0x77,0x88,0x55,0x21,0x6b,0xa8,0xed,0xd2 };
    const uint8_t IV[] = { 0x22,0x1a,0x1b,0xcf,0xe0,0x2a,0xf5,0x77,0xf1,0x9d,0x50,0x4d,0x82,0x6e,0x8f,0x74 };
    const uint8_t PLAINTEXT[] = { 0x0e,0x2e,0x73,0x65,0xc1,0x29,0xeb,0x21,0xd5,0x40,0xf9,0x5a,0x90,0xb7,0x28,0xc4 };
    const uint8_t CIPHERTEXT[] = { 0xf1,0x15,0xd8,0xd2,0x9e,0xe6,0x03,0x11,0x6a,0x1f,0x57,0x2b,0xe3,0xff,0x2c,0xab };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-19", "[OFB][MCT][128][DECRYPT][n19]") {
    const uint8_t KEY[] = { 0x67,0x4d,0xb2,0x41,0x5a,0x9c,0x80,0x75,0xa2,0xc8,0xac,0x7b,0xfb,0x1f,0xc5,0x16 };
    const uint8_t IV[] = { 0x0e,0x2e,0x73,0x65,0xc1,0x29,0xeb,0x21,0xd5,0x40,0xf9,0x5a,0x90,0xb7,0x28,0xc4 };
    const uint8_t PLAINTEXT[] = { 0x60,0xe9,0x54,0x5b,0xf4,0xae,0x97,0x87,0xb2,0x42,0x7d,0xfb,0x02,0x66,0x6f,0x0e };
    const uint8_t CIPHERTEXT[] = { 0x58,0xa5,0x9e,0x1c,0x6a,0xe7,0x57,0x59,0xa2,0x81,0x38,0xb8,0xde,0x59,0x4e,0x5d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-20", "[OFB][MCT][128][DECRYPT][n20]") {
    const uint8_t KEY[] = { 0x07,0xa4,0xe6,0x1a,0xae,0x32,0x17,0xf2,0x10,0x8a,0xd1,0x80,0xf9,0x79,0xaa,0x18 };
    const uint8_t IV[] = { 0x60,0xe9,0x54,0x5b,0xf4,0xae,0x97,0x87,0xb2,0x42,0x7d,0xfb,0x02,0x66,0x6f,0x0e };
    const uint8_t PLAINTEXT[] = { 0xc9,0xb7,0xb7,0xa9,0xf9,0xb6,0x2b,0xcd,0x49,0xd8,0xb0,0x6d,0xa1,0x66,0xba,0xa9 };
    const uint8_t CIPHERTEXT[] = { 0x32,0x94,0x2a,0x0b,0x98,0x78,0x6e,0xb1,0x67,0xe7,0x75,0x3a,0x26,0x64,0x8a,0x90 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-21", "[OFB][MCT][128][DECRYPT][n21]") {
    const uint8_t KEY[] = { 0xce,0x13,0x51,0xb3,0x57,0x84,0x3c,0x3f,0x59,0x52,0x61,0xed,0x58,0x1f,0x10,0xb1 };
    const uint8_t IV[] = { 0xc9,0xb7,0xb7,0xa9,0xf9,0xb6,0x2b,0xcd,0x49,0xd8,0xb0,0x6d,0xa1,0x66,0xba,0xa9 };
    const uint8_t PLAINTEXT[] = { 0xe2,0x71,0xc1,0x13,0x3f,0xe1,0x04,0x7c,0xd4,0xf7,0xc5,0x46,0x41,0x71,0x4e,0xd4 };
    const uint8_t CIPHERTEXT[] = { 0xb3,0x2f,0x62,0x45,0x9f,0x71,0x38,0x54,0x57,0x3a,0x3c,0xd9,0xc0,0xa0,0xdc,0xaf };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-22", "[OFB][MCT][128][DECRYPT][n22]") {
    const uint8_t KEY[] = { 0x2c,0x62,0x90,0xa0,0x68,0x65,0x38,0x43,0x8d,0xa5,0xa4,0xab,0x19,0x6e,0x5e,0x65 };
    const uint8_t IV[] = { 0xe2,0x71,0xc1,0x13,0x3f,0xe1,0x04,0x7c,0xd4,0xf7,0xc5,0x46,0x41,0x71,0x4e,0xd4 };
    const uint8_t PLAINTEXT[] = { 0x63,0xf6,0xf9,0xa3,0x65,0xb3,0x4c,0xf4,0x7c,0x31,0x0e,0xb7,0xfb,0xcc,0xee,0xfa };
    const uint8_t CIPHERTEXT[] = { 0x78,0x35,0x9e,0xa3,0xd1,0x36,0x50,0x58,0x72,0x4a,0x77,0x6a,0x87,0x39,0x02,0x31 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-23", "[OFB][MCT][128][DECRYPT][n23]") {
    const uint8_t KEY[] = { 0x4f,0x94,0x69,0x03,0x0d,0xd6,0x74,0xb7,0xf1,0x94,0xaa,0x1c,0xe2,0xa2,0xb0,0x9f };
    const uint8_t IV[] = { 0x63,0xf6,0xf9,0xa3,0x65,0xb3,0x4c,0xf4,0x7c,0x31,0x0e,0xb7,0xfb,0xcc,0xee,0xfa };
    const uint8_t PLAINTEXT[] = { 0xbf,0x15,0xe5,0x7c,0xc5,0x06,0xde,0xf1,0x34,0x74,0x0b,0xce,0x64,0x5b,0x3a,0x30 };
    const uint8_t CIPHERTEXT[] = { 0x4a,0xc7,0x8c,0x0d,0x0d,0x60,0xdb,0x44,0xcf,0x90,0x1d,0xc2,0x67,0x15,0xf5,0x43 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-24", "[OFB][MCT][128][DECRYPT][n24]") {
    const uint8_t KEY[] = { 0xf0,0x81,0x8c,0x7f,0xc8,0xd0,0xaa,0x46,0xc5,0xe0,0xa1,0xd2,0x86,0xf9,0x8a,0xaf };
    const uint8_t IV[] = { 0xbf,0x15,0xe5,0x7c,0xc5,0x06,0xde,0xf1,0x34,0x74,0x0b,0xce,0x64,0x5b,0x3a,0x30 };
    const uint8_t PLAINTEXT[] = { 0x26,0xcc,0x03,0x70,0xf9,0x12,0xa4,0xa0,0xc1,0x99,0x30,0xbd,0x17,0x68,0x1a,0x70 };
    const uint8_t CIPHERTEXT[] = { 0x8f,0xd4,0x20,0x28,0xba,0xd8,0xe2,0xc6,0x59,0xcc,0x1a,0x1c,0x0d,0x37,0x6b,0xb4 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-25", "[OFB][MCT][128][DECRYPT][n25]") {
    const uint8_t KEY[] = { 0xd6,0x4d,0x8f,0x0f,0x31,0xc2,0x0e,0xe6,0x04,0x79,0x91,0x6f,0x91,0x91,0x90,0xdf };
    const uint8_t IV[] = { 0x26,0xcc,0x03,0x70,0xf9,0x12,0xa4,0xa0,0xc1,0x99,0x30,0xbd,0x17,0x68,0x1a,0x70 };
    const uint8_t PLAINTEXT[] = { 0xd2,0xe5,0xc9,0x11,0x5e,0xff,0x36,0x79,0x33,0x03,0x89,0x2d,0x83,0x4d,0xa5,0xe1 };
    const uint8_t CIPHERTEXT[] = { 0x08,0xe6,0x76,0x17,0x71,0xae,0x6c,0x8a,0x3d,0x85,0x5a,0xc0,0x1e,0x32,0x3a,0xd1 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-26", "[OFB][MCT][128][DECRYPT][n26]") {
    const uint8_t KEY[] = { 0x04,0xa8,0x46,0x1e,0x6f,0x3d,0x38,0x9f,0x37,0x7a,0x18,0x42,0x12,0xdc,0x35,0x3e };
    const uint8_t IV[] = { 0xd2,0xe5,0xc9,0x11,0x5e,0xff,0x36,0x79,0x33,0x03,0x89,0x2d,0x83,0x4d,0xa5,0xe1 };
    const uint8_t PLAINTEXT[] = { 0x18,0xdb,0x9b,0xca,0xc8,0x31,0x0d,0xe9,0x34,0x7d,0xb4,0xbe,0x3e,0xbc,0x4e,0x89 };
    const uint8_t CIPHERTEXT[] = { 0xdc,0xb7,0x49,0x57,0xc6,0x92,0x8a,0xbd,0xa1,0xa8,0xa2,0xef,0x26,0x2e,0xf3,0x54 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-27", "[OFB][MCT][128][DECRYPT][n27]") {
    const uint8_t KEY[] = { 0x1c,0x73,0xdd,0xd4,0xa7,0x0c,0x35,0x76,0x03,0x07,0xac,0xfc,0x2c,0x60,0x7b,0xb7 };
    const uint8_t IV[] = { 0x18,0xdb,0x9b,0xca,0xc8,0x31,0x0d,0xe9,0x34,0x7d,0xb4,0xbe,0x3e,0xbc,0x4e,0x89 };
    const uint8_t PLAINTEXT[] = { 0x8a,0x99,0x6a,0xd5,0x20,0xa6,0xda,0xc7,0xb1,0x68,0x75,0x36,0x94,0x03,0xb7,0x0a };
    const uint8_t CIPHERTEXT[] = { 0xff,0xc0,0x26,0xd6,0x82,0x95,0x39,0x7c,0x3f,0xea,0x66,0x8e,0xdf,0x68,0xc3,0x34 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-28", "[OFB][MCT][128][DECRYPT][n28]") {
    const uint8_t KEY[] = { 0x96,0xea,0xb7,0x01,0x87,0xaa,0xef,0xb1,0xb2,0x6f,0xd9,0xca,0xb8,0x63,0xcc,0xbd };
    const uint8_t IV[] = { 0x8a,0x99,0x6a,0xd5,0x20,0xa6,0xda,0xc7,0xb1,0x68,0x75,0x36,0x94,0x03,0xb7,0x0a };
    const uint8_t PLAINTEXT[] = { 0x46,0x90,0x2a,0xe5,0x4d,0xf4,0x7f,0x17,0xd5,0x44,0x86,0x6b,0xbf,0x22,0xa3,0xf5 };
    const uint8_t CIPHERTEXT[] = { 0xd4,0x30,0x2d,0x84,0x9c,0xc0,0xf8,0xc3,0x9f,0x5c,0x55,0x41,0x82,0x83,0x07,0x5c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-29", "[OFB][MCT][128][DECRYPT][n29]") {
    const uint8_t KEY[] = { 0xd0,0x7a,0x9d,0xe4,0xca,0x5e,0x90,0xa6,0x67,0x2b,0x5f,0xa1,0x07,0x41,0x6f,0x48 };
    const uint8_t IV[] = { 0x46,0x90,0x2a,0xe5,0x4d,0xf4,0x7f,0x17,0xd5,0x44,0x86,0x6b,0xbf,0x22,0xa3,0xf5 };
    const uint8_t PLAINTEXT[] = { 0xb9,0xb6,0xfe,0xe1,0xc0,0x6f,0xbc,0xe7,0x98,0x36,0xa1,0x9e,0x19,0x36,0xde,0x1a };
    const uint8_t CIPHERTEXT[] = { 0x0f,0xac,0xd7,0x0d,0x14,0xaf,0x12,0x13,0x6b,0x39,0x1d,0xd2,0x81,0x86,0x5b,0xfe };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-30", "[OFB][MCT][128][DECRYPT][n30]") {
    const uint8_t KEY[] = { 0x69,0xcc,0x63,0x05,0x0a,0x31,0x2c,0x41,0xff,0x1d,0xfe,0x3f,0x1e,0x77,0xb1,0x52 };
    const uint8_t IV[] = { 0xb9,0xb6,0xfe,0xe1,0xc0,0x6f,0xbc,0xe7,0x98,0x36,0xa1,0x9e,0x19,0x36,0xde,0x1a };
    const uint8_t PLAINTEXT[] = { 0x6e,0x04,0xd7,0x80,0x56,0x8b,0x50,0xf5,0xf9,0x80,0x0b,0x68,0x02,0x85,0xa4,0x74 };
    const uint8_t CIPHERTEXT[] = { 0x3e,0x76,0x4e,0xf9,0xcc,0x8e,0xc1,0x6c,0x44,0xc3,0x7a,0xbf,0xf5,0x2d,0x0b,0x52 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-31", "[OFB][MCT][128][DECRYPT][n31]") {
    const uint8_t KEY[] = { 0x07,0xc8,0xb4,0x85,0x5c,0xba,0x7c,0xb4,0x06,0x9d,0xf5,0x57,0x1c,0xf2,0x15,0x26 };
    const uint8_t IV[] = { 0x6e,0x04,0xd7,0x80,0x56,0x8b,0x50,0xf5,0xf9,0x80,0x0b,0x68,0x02,0x85,0xa4,0x74 };
    const uint8_t PLAINTEXT[] = { 0x5c,0xea,0xc8,0xc7,0x1e,0x75,0x49,0x1c,0xc8,0xc3,0xde,0xf7,0x54,0xc6,0x19,0x8e };
    const uint8_t CIPHERTEXT[] = { 0x8f,0x6e,0x45,0x2e,0x13,0x29,0x43,0x1f,0x3e,0xcc,0x48,0xc3,0x4d,0x11,0x28,0x9a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-32", "[OFB][MCT][128][DECRYPT][n32]") {
    const uint8_t KEY[] = { 0x5b,0x22,0x7c,0x42,0x42,0xcf,0x35,0xa8,0xce,0x5e,0x2b,0xa0,0x48,0x34,0x0c,0xa8 };
    const uint8_t IV[] = { 0x5c,0xea,0xc8,0xc7,0x1e,0x75,0x49,0x1c,0xc8,0xc3,0xde,0xf7,0x54,0xc6,0x19,0x8e };
    const uint8_t PLAINTEXT[] = { 0xea,0xb3,0xf9,0x33,0x14,0x45,0xaf,0x35,0x83,0x30,0x08,0x30,0x8d,0x12,0xa2,0x38 };
    const uint8_t CIPHERTEXT[] = { 0xc1,0x5f,0xf7,0x8c,0x5d,0x22,0xe0,0x91,0x20,0x57,0x41,0xe6,0x5d,0xcc,0x55,0x73 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-33", "[OFB][MCT][128][DECRYPT][n33]") {
    const uint8_t KEY[] = { 0xb1,0x91,0x85,0x71,0x56,0x8a,0x9a,0x9d,0x4d,0x6e,0x23,0x90,0xc5,0x26,0xae,0x90 };
    const uint8_t IV[] = { 0xea,0xb3,0xf9,0x33,0x14,0x45,0xaf,0x35,0x83,0x30,0x08,0x30,0x8d,0x12,0xa2,0x38 };
    const uint8_t PLAINTEXT[] = { 0xc8,0x89,0x1d,0x75,0x45,0x20,0x76,0xdf,0x87,0x3f,0x6b,0x26,0x2f,0xb4,0x2f,0xd5 };
    const uint8_t CIPHERTEXT[] = { 0x28,0xa7,0xa3,0xec,0xa6,0x41,0x92,0x0b,0xfb,0xde,0xa4,0xa7,0x63,0x3d,0xf6,0xf0 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-34", "[OFB][MCT][128][DECRYPT][n34]") {
    const uint8_t KEY[] = { 0x79,0x18,0x98,0x04,0x13,0xaa,0xec,0x42,0xca,0x51,0x48,0xb6,0xea,0x92,0x81,0x45 };
    const uint8_t IV[] = { 0xc8,0x89,0x1d,0x75,0x45,0x20,0x76,0xdf,0x87,0x3f,0x6b,0x26,0x2f,0xb4,0x2f,0xd5 };
    const uint8_t PLAINTEXT[] = { 0x45,0xd1,0x4b,0x12,0xbe,0x21,0x10,0x01,0x3c,0x27,0x64,0xb4,0xad,0xa9,0x11,0xa4 };
    const uint8_t CIPHERTEXT[] = { 0xff,0x3e,0x97,0x91,0x35,0x6c,0x8f,0xda,0x0f,0xc4,0x19,0xbe,0x20,0x41,0x0d,0x2e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-35", "[OFB][MCT][128][DECRYPT][n35]") {
    const uint8_t KEY[] = { 0x3c,0xc9,0xd3,0x16,0xad,0x8b,0xfc,0x43,0xf6,0x76,0x2c,0x02,0x47,0x3b,0x90,0xe1 };
    const uint8_t IV[] = { 0x45,0xd1,0x4b,0x12,0xbe,0x21,0x10,0x01,0x3c,0x27,0x64,0xb4,0xad,0xa9,0x11,0xa4 };
    const uint8_t PLAINTEXT[] = { 0xc4,0x11,0x89,0x04,0x1c,0x0f,0xd5,0xbf,0xb6,0x22,0x1f,0x2f,0x44,0xc2,0x9b,0x1d };
    const uint8_t CIPHERTEXT[] = { 0xc7,0x2c,0x50,0x6e,0x18,0x3c,0xb3,0xbb,0x95,0xb7,0xda,0xd8,0x9f,0xbf,0x3f,0x7c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-36", "[OFB][MCT][128][DECRYPT][n36]") {
    const uint8_t KEY[] = { 0xf8,0xd8,0x5a,0x12,0xb1,0x84,0x29,0xfc,0x40,0x54,0x33,0x2d,0x03,0xf9,0x0b,0xfc };
    const uint8_t IV[] = { 0xc4,0x11,0x89,0x04,0x1c,0x0f,0xd5,0xbf,0xb6,0x22,0x1f,0x2f,0x44,0xc2,0x9b,0x1d };
    const uint8_t PLAINTEXT[] = { 0x36,0x9f,0xb0,0x95,0x15,0x71,0xc4,0xa0,0xc8,0xdf,0xc0,0xe9,0xc6,0xbc,0xa6,0xeb };
    const uint8_t CIPHERTEXT[] = { 0x79,0xc4,0x71,0xca,0xaa,0xda,0x66,0xf4,0x4a,0x89,0x94,0x31,0x8f,0x97,0x0a,0x8f };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-37", "[OFB][MCT][128][DECRYPT][n37]") {
    const uint8_t KEY[] = { 0xce,0x47,0xea,0x87,0xa4,0xf5,0xed,0x5c,0x88,0x8b,0xf3,0xc4,0xc5,0x45,0xad,0x17 };
    const uint8_t IV[] = { 0x36,0x9f,0xb0,0x95,0x15,0x71,0xc4,0xa0,0xc8,0xdf,0xc0,0xe9,0xc6,0xbc,0xa6,0xeb };
    const uint8_t PLAINTEXT[] = { 0x50,0xec,0xd0,0x54,0xe8,0xd7,0x88,0x56,0x8f,0x49,0x53,0x4e,0x0d,0x40,0x2a,0x43 };
    const uint8_t CIPHERTEXT[] = { 0xb7,0xef,0xca,0x9c,0x98,0x52,0x50,0x10,0xe1,0x40,0xb2,0x07,0xe0,0x6d,0x28,0xb0 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-38", "[OFB][MCT][128][DECRYPT][n38]") {
    const uint8_t KEY[] = { 0x9e,0xab,0x3a,0xd3,0x4c,0x22,0x65,0x0a,0x07,0xc2,0xa0,0x8a,0xc8,0x05,0x87,0x54 };
    const uint8_t IV[] = { 0x50,0xec,0xd0,0x54,0xe8,0xd7,0x88,0x56,0x8f,0x49,0x53,0x4e,0x0d,0x40,0x2a,0x43 };
    const uint8_t PLAINTEXT[] = { 0x24,0x03,0xc9,0x40,0x0d,0xe9,0x7b,0x62,0xa6,0xce,0x8c,0xd4,0x01,0x3c,0xd4,0xfe };
    const uint8_t CIPHERTEXT[] = { 0x02,0x60,0xb0,0xee,0x91,0x16,0x38,0x08,0xe8,0x83,0x98,0x26,0x93,0x64,0xb3,0x4a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-39", "[OFB][MCT][128][DECRYPT][n39]") {
    const uint8_t KEY[] = { 0xba,0xa8,0xf3,0x93,0x41,0xcb,0x1e,0x68,0xa1,0x0c,0x2c,0x5e,0xc9,0x39,0x53,0xaa };
    const uint8_t IV[] = { 0x24,0x03,0xc9,0x40,0x0d,0xe9,0x7b,0x62,0xa6,0xce,0x8c,0xd4,0x01,0x3c,0xd4,0xfe };
    const uint8_t PLAINTEXT[] = { 0x69,0xe6,0xa6,0x3d,0x4a,0x9c,0xa5,0x0f,0x52,0xf4,0xda,0x74,0x81,0x05,0xb1,0x57 };
    const uint8_t CIPHERTEXT[] = { 0xd0,0xc7,0xbb,0xab,0xa9,0x45,0xb4,0xe9,0x03,0xa9,0x69,0x38,0x9e,0xf5,0x6b,0x83 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-40", "[OFB][MCT][128][DECRYPT][n40]") {
    const uint8_t KEY[] = { 0xd3,0x4e,0x55,0xae,0x0b,0x57,0xbb,0x67,0xf3,0xf8,0xf6,0x2a,0x48,0x3c,0xe2,0xfd };
    const uint8_t IV[] = { 0x69,0xe6,0xa6,0x3d,0x4a,0x9c,0xa5,0x0f,0x52,0xf4,0xda,0x74,0x81,0x05,0xb1,0x57 };
    const uint8_t PLAINTEXT[] = { 0x57,0xa3,0x08,0xd3,0x36,0x65,0x50,0xdd,0x0e,0x5c,0x79,0x74,0xde,0x91,0x80,0x28 };
    const uint8_t CIPHERTEXT[] = { 0x76,0x77,0x10,0x05,0xbf,0x93,0x13,0xb9,0xaa,0x9d,0x41,0xcd,0x87,0xde,0x3c,0x7c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-41", "[OFB][MCT][128][DECRYPT][n41]") {
    const uint8_t KEY[] = { 0x84,0xed,0x5d,0x7d,0x3d,0x32,0xeb,0xba,0xfd,0xa4,0x8f,0x5e,0x96,0xad,0x62,0xd5 };
    const uint8_t IV[] = { 0x57,0xa3,0x08,0xd3,0x36,0x65,0x50,0xdd,0x0e,0x5c,0x79,0x74,0xde,0x91,0x80,0x28 };
    const uint8_t PLAINTEXT[] = { 0x6d,0x87,0x46,0x5d,0x26,0x28,0xcc,0x82,0xa1,0x70,0x38,0x62,0x81,0x8b,0xc8,0xba };
    const uint8_t CIPHERTEXT[] = { 0xa6,0xcd,0x6b,0x0d,0xf6,0x2c,0x2d,0xf3,0x89,0x8e,0xa8,0xc8,0xb5,0xce,0x7b,0x78 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-42", "[OFB][MCT][128][DECRYPT][n42]") {
    const uint8_t KEY[] = { 0xe9,0x6a,0x1b,0x20,0x1b,0x1a,0x27,0x38,0x5c,0xd4,0xb7,0x3c,0x17,0x26,0xaa,0x6f };
    const uint8_t IV[] = { 0x6d,0x87,0x46,0x5d,0x26,0x28,0xcc,0x82,0xa1,0x70,0x38,0x62,0x81,0x8b,0xc8,0xba };
    const uint8_t PLAINTEXT[] = { 0x5f,0x67,0xb8,0x0d,0x89,0xfd,0xca,0x88,0x99,0x67,0xcd,0xcb,0x33,0xf5,0xa5,0xfe };
    const uint8_t CIPHERTEXT[] = { 0xa8,0x43,0x37,0x25,0x70,0xb5,0x2d,0xde,0x37,0xbf,0x4c,0xfa,0x03,0xde,0x38,0xef };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-43", "[OFB][MCT][128][DECRYPT][n43]") {
    const uint8_t KEY[] = { 0xb6,0x0d,0xa3,0x2d,0x92,0xe7,0xed,0xb0,0xc5,0xb3,0x7a,0xf7,0x24,0xd3,0x0f,0x91 };
    const uint8_t IV[] = { 0x5f,0x67,0xb8,0x0d,0x89,0xfd,0xca,0x88,0x99,0x67,0xcd,0xcb,0x33,0xf5,0xa5,0xfe };
    const uint8_t PLAINTEXT[] = { 0x97,0xcf,0xfb,0x0c,0x7d,0xdc,0x23,0x98,0x68,0x82,0x46,0x95,0x4e,0x92,0x73,0xdf };
    const uint8_t CIPHERTEXT[] = { 0x31,0xf2,0xdc,0xed,0x75,0xe0,0x22,0xcb,0x20,0x59,0x4f,0x09,0x0a,0x97,0xa8,0x95 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-44", "[OFB][MCT][128][DECRYPT][n44]") {
    const uint8_t KEY[] = { 0x21,0xc2,0x58,0x21,0xef,0x3b,0xce,0x28,0xad,0x31,0x3c,0x62,0x6a,0x41,0x7c,0x4e };
    const uint8_t IV[] = { 0x97,0xcf,0xfb,0x0c,0x7d,0xdc,0x23,0x98,0x68,0x82,0x46,0x95,0x4e,0x92,0x73,0xdf };
    const uint8_t PLAINTEXT[] = { 0x06,0x48,0x30,0xbb,0x6b,0x5a,0xdc,0x67,0xd3,0xc2,0x13,0xa0,0xee,0xb3,0x6a,0x91 };
    const uint8_t CIPHERTEXT[] = { 0x75,0x96,0x0b,0xa1,0x17,0x31,0x00,0xa9,0xb1,0x1c,0xe2,0xa3,0x15,0x36,0x24,0x89 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-45", "[OFB][MCT][128][DECRYPT][n45]") {
    const uint8_t KEY[] = { 0x27,0x8a,0x68,0x9a,0x84,0x61,0x12,0x4f,0x7e,0xf3,0x2f,0xc2,0x84,0xf2,0x16,0xdf };
    const uint8_t IV[] = { 0x06,0x48,0x30,0xbb,0x6b,0x5a,0xdc,0x67,0xd3,0xc2,0x13,0xa0,0xee,0xb3,0x6a,0x91 };
    const uint8_t PLAINTEXT[] = { 0x80,0x9b,0x1d,0xd5,0x28,0x33,0x9f,0xf4,0x6b,0x61,0xb6,0xdb,0x7b,0x67,0x69,0x3b };
    const uint8_t CIPHERTEXT[] = { 0x37,0xcb,0xe9,0x71,0x1e,0xa3,0xbb,0xc5,0xd6,0x8d,0x0a,0xbc,0x1a,0x77,0x2a,0xcf };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-46", "[OFB][MCT][128][DECRYPT][n46]") {
    const uint8_t KEY[] = { 0xa7,0x11,0x75,0x4f,0xac,0x52,0x8d,0xbb,0x15,0x92,0x99,0x19,0xff,0x95,0x7f,0xe4 };
    const uint8_t IV[] = { 0x80,0x9b,0x1d,0xd5,0x28,0x33,0x9f,0xf4,0x6b,0x61,0xb6,0xdb,0x7b,0x67,0x69,0x3b };
    const uint8_t PLAINTEXT[] = { 0xa4,0xe5,0x54,0xd1,0x37,0x3b,0x0e,0x6d,0x8a,0x4e,0x47,0xdf,0x8a,0xfc,0x9a,0x51 };
    const uint8_t CIPHERTEXT[] = { 0x68,0x26,0x68,0x13,0x35,0x05,0xd2,0xa0,0x84,0x82,0x11,0x7d,0xcd,0xf7,0x69,0xc6 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-47", "[OFB][MCT][128][DECRYPT][n47]") {
    const uint8_t KEY[] = { 0x03,0xf4,0x21,0x9e,0x9b,0x69,0x83,0xd6,0x9f,0xdc,0xde,0xc6,0x75,0x69,0xe5,0xb5 };
    const uint8_t IV[] = { 0xa4,0xe5,0x54,0xd1,0x37,0x3b,0x0e,0x6d,0x8a,0x4e,0x47,0xdf,0x8a,0xfc,0x9a,0x51 };
    const uint8_t PLAINTEXT[] = { 0x47,0xa5,0xf9,0x54,0x04,0x81,0x52,0x04,0x41,0xd2,0x44,0x74,0x96,0x5c,0x75,0x43 };
    const uint8_t CIPHERTEXT[] = { 0xba,0xbf,0xfa,0x64,0x98,0x2d,0xe3,0xf3,0x1f,0xed,0xdb,0x1b,0x5c,0xa1,0x69,0xed };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-48", "[OFB][MCT][128][DECRYPT][n48]") {
    const uint8_t KEY[] = { 0x44,0x51,0xd8,0xca,0x9f,0xe8,0xd1,0xd2,0xde,0x0e,0x9a,0xb2,0xe3,0x35,0x90,0xf6 };
    const uint8_t IV[] = { 0x47,0xa5,0xf9,0x54,0x04,0x81,0x52,0x04,0x41,0xd2,0x44,0x74,0x96,0x5c,0x75,0x43 };
    const uint8_t PLAINTEXT[] = { 0xb5,0xc8,0x3e,0x5d,0x4c,0xf1,0xed,0x2b,0xcc,0xef,0x3a,0xd3,0x0a,0x29,0xd5,0xf8 };
    const uint8_t CIPHERTEXT[] = { 0x80,0xe1,0x4b,0x3e,0x7c,0xae,0x74,0x86,0x74,0xca,0x4d,0x17,0xb9,0x30,0xde,0x08 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-49", "[OFB][MCT][128][DECRYPT][n49]") {
    const uint8_t KEY[] = { 0xf1,0x99,0xe6,0x97,0xd3,0x19,0x3c,0xf9,0x12,0xe1,0xa0,0x61,0xe9,0x1c,0x45,0x0e };
    const uint8_t IV[] = { 0xb5,0xc8,0x3e,0x5d,0x4c,0xf1,0xed,0x2b,0xcc,0xef,0x3a,0xd3,0x0a,0x29,0xd5,0xf8 };
    const uint8_t PLAINTEXT[] = { 0xc1,0x63,0x55,0x33,0xb0,0x32,0x94,0x74,0x54,0x7a,0x02,0x4f,0x70,0x89,0x1b,0xab };
    const uint8_t CIPHERTEXT[] = { 0xc2,0xaa,0xd6,0xaa,0x50,0x05,0xc3,0xa0,0xe8,0x09,0x61,0xf4,0x62,0xcb,0xa9,0x10 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-50", "[OFB][MCT][128][DECRYPT][n50]") {
    const uint8_t KEY[] = { 0x30,0xfa,0xb3,0xa4,0x63,0x2b,0xa8,0x8d,0x46,0x9b,0xa2,0x2e,0x99,0x95,0x5e,0xa5 };
    const uint8_t IV[] = { 0xc1,0x63,0x55,0x33,0xb0,0x32,0x94,0x74,0x54,0x7a,0x02,0x4f,0x70,0x89,0x1b,0xab };
    const uint8_t PLAINTEXT[] = { 0xdd,0xb9,0xb4,0xc9,0x76,0x45,0x4c,0x6d,0x49,0xf1,0x5a,0xec,0x8e,0x1a,0xb5,0x3e };
    const uint8_t CIPHERTEXT[] = { 0xd9,0xea,0x69,0x8c,0x67,0xa3,0xff,0xc5,0x74,0x65,0x17,0x87,0x4d,0xf5,0xd8,0x82 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-51", "[OFB][MCT][128][DECRYPT][n51]") {
    const uint8_t KEY[] = { 0xed,0x43,0x07,0x6d,0x15,0x6e,0xe4,0xe0,0x0f,0x6a,0xf8,0xc2,0x17,0x8f,0xeb,0x9b };
    const uint8_t IV[] = { 0xdd,0xb9,0xb4,0xc9,0x76,0x45,0x4c,0x6d,0x49,0xf1,0x5a,0xec,0x8e,0x1a,0xb5,0x3e };
    const uint8_t PLAINTEXT[] = { 0xa6,0x7f,0x13,0x65,0x6c,0x5a,0xde,0xbc,0xb6,0xcc,0x2b,0x92,0x38,0x92,0x4d,0xe8 };
    const uint8_t CIPHERTEXT[] = { 0x6b,0x10,0x91,0x3e,0x6c,0x6b,0xb4,0xba,0xe4,0xfe,0xbd,0xe5,0x3a,0x4a,0x28,0x2b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-52", "[OFB][MCT][128][DECRYPT][n52]") {
    const uint8_t KEY[] = { 0x4b,0x3c,0x14,0x08,0x79,0x34,0x3a,0x5c,0xb9,0xa6,0xd3,0x50,0x2f,0x1d,0xa6,0x73 };
    const uint8_t IV[] = { 0xa6,0x7f,0x13,0x65,0x6c,0x5a,0xde,0xbc,0xb6,0xcc,0x2b,0x92,0x38,0x92,0x4d,0xe8 };
    const uint8_t PLAINTEXT[] = { 0xc7,0xfe,0x4e,0xa8,0x07,0x7c,0x4e,0x04,0x91,0xf2,0x6b,0x20,0xa2,0x06,0x91,0xab };
    const uint8_t CIPHERTEXT[] = { 0x5c,0x24,0x8c,0x54,0xe9,0xf4,0x9b,0x72,0x3f,0x7b,0xa6,0xd8,0xac,0x2e,0x70,0x9f };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-53", "[OFB][MCT][128][DECRYPT][n53]") {
    const uint8_t KEY[] = { 0x8c,0xc2,0x5a,0xa0,0x7e,0x48,0x74,0x58,0x28,0x54,0xb8,0x70,0x8d,0x1b,0x37,0xd8 };
    const uint8_t IV[] = { 0xc7,0xfe,0x4e,0xa8,0x07,0x7c,0x4e,0x04,0x91,0xf2,0x6b,0x20,0xa2,0x06,0x91,0xab };
    const uint8_t PLAINTEXT[] = { 0xb2,0x5c,0xc6,0x4e,0xc8,0xd4,0xb5,0xc7,0x63,0x82,0xb3,0x63,0xef,0x1d,0x76,0x2a };
    const uint8_t CIPHERTEXT[] = { 0x39,0x8d,0x05,0x9a,0x29,0xe5,0xc8,0x4d,0x2e,0x68,0x03,0x5b,0x14,0xa0,0x7b,0xfc };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-54", "[OFB][MCT][128][DECRYPT][n54]") {
    const uint8_t KEY[] = { 0x3e,0x9e,0x9c,0xee,0xb6,0x9c,0xc1,0x9f,0x4b,0xd6,0x0b,0x13,0x62,0x06,0x41,0xf2 };
    const uint8_t IV[] = { 0xb2,0x5c,0xc6,0x4e,0xc8,0xd4,0xb5,0xc7,0x63,0x82,0xb3,0x63,0xef,0x1d,0x76,0x2a };
    const uint8_t PLAINTEXT[] = { 0xc7,0x30,0x50,0x4b,0x6e,0x4a,0xa5,0x54,0xce,0x7c,0x84,0x6b,0xb1,0x17,0x16,0x9c };
    const uint8_t CIPHERTEXT[] = { 0xe5,0x31,0x03,0x00,0x29,0x92,0x50,0xa5,0x98,0x08,0x0e,0xe8,0x96,0x73,0xf6,0x47 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-55", "[OFB][MCT][128][DECRYPT][n55]") {
    const uint8_t KEY[] = { 0xf9,0xae,0xcc,0xa5,0xd8,0xd6,0x64,0xcb,0x85,0xaa,0x8f,0x78,0xd3,0x11,0x57,0x6e };
    const uint8_t IV[] = { 0xc7,0x30,0x50,0x4b,0x6e,0x4a,0xa5,0x54,0xce,0x7c,0x84,0x6b,0xb1,0x17,0x16,0x9c };
    const uint8_t PLAINTEXT[] = { 0xa0,0x19,0x70,0xb5,0xc0,0xf4,0x93,0x91,0x83,0x2a,0x13,0xce,0x45,0x41,0x1a,0xec };
    const uint8_t CIPHERTEXT[] = { 0x55,0xd0,0x28,0x6d,0x2e,0x00,0x27,0xf7,0x4f,0xd7,0x92,0x66,0x06,0x37,0x90,0xb7 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-56", "[OFB][MCT][128][DECRYPT][n56]") {
    const uint8_t KEY[] = { 0x59,0xb7,0xbc,0x10,0x18,0x22,0xf7,0x5a,0x06,0x80,0x9c,0xb6,0x96,0x50,0x4d,0x82 };
    const uint8_t IV[] = { 0xa0,0x19,0x70,0xb5,0xc0,0xf4,0x93,0x91,0x83,0x2a,0x13,0xce,0x45,0x41,0x1a,0xec };
    const uint8_t PLAINTEXT[] = { 0xc8,0xe0,0xf8,0x57,0x83,0x46,0xae,0x69,0x65,0x62,0x3c,0x8a,0xa9,0x68,0x26,0xc2 };
    const uint8_t CIPHERTEXT[] = { 0xeb,0xc1,0x96,0xe7,0x01,0xd5,0xc9,0x33,0x44,0x15,0x0e,0x60,0xd8,0x3a,0x67,0xfb };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-57", "[OFB][MCT][128][DECRYPT][n57]") {
    const uint8_t KEY[] = { 0x91,0x57,0x44,0x47,0x9b,0x64,0x59,0x33,0x63,0xe2,0xa0,0x3c,0x3f,0x38,0x6b,0x40 };
    const uint8_t IV[] = { 0xc8,0xe0,0xf8,0x57,0x83,0x46,0xae,0x69,0x65,0x62,0x3c,0x8a,0xa9,0x68,0x26,0xc2 };
    const uint8_t PLAINTEXT[] = { 0xb6,0x93,0x6c,0x5c,0x84,0x3d,0x7b,0xe4,0x07,0x03,0x2f,0xb0,0xd9,0x7d,0x43,0x97 };
    const uint8_t CIPHERTEXT[] = { 0x84,0x3b,0x6d,0x16,0x25,0x7d,0xdb,0x45,0x6b,0x3f,0xba,0x06,0x45,0x86,0xa8,0x4c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-58", "[OFB][MCT][128][DECRYPT][n58]") {
    const uint8_t KEY[] = { 0x27,0xc4,0x28,0x1b,0x1f,0x59,0x22,0xd7,0x64,0xe1,0x8f,0x8c,0xe6,0x45,0x28,0xd7 };
    const uint8_t IV[] = { 0xb6,0x93,0x6c,0x5c,0x84,0x3d,0x7b,0xe4,0x07,0x03,0x2f,0xb0,0xd9,0x7d,0x43,0x97 };
    const uint8_t PLAINTEXT[] = { 0x1e,0xba,0x6e,0x56,0x6b,0x60,0x2b,0x98,0x1a,0xa4,0x43,0x9c,0xbf,0x0f,0xa1,0xcb };
    const uint8_t CIPHERTEXT[] = { 0x9f,0x17,0x43,0xb5,0xc8,0x56,0xb9,0xbf,0x23,0x59,0x38,0xe1,0x2b,0x7c,0x4e,0x79 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-59", "[OFB][MCT][128][DECRYPT][n59]") {
    const uint8_t KEY[] = { 0x39,0x7e,0x46,0x4d,0x74,0x39,0x09,0x4f,0x7e,0x45,0xcc,0x10,0x59,0x4a,0x89,0x1c };
    const uint8_t IV[] = { 0x1e,0xba,0x6e,0x56,0x6b,0x60,0x2b,0x98,0x1a,0xa4,0x43,0x9c,0xbf,0x0f,0xa1,0xcb };
    const uint8_t PLAINTEXT[] = { 0xe8,0xf7,0xaf,0x61,0xdd,0xfe,0x11,0x3c,0x93,0x35,0x0f,0x74,0x60,0x68,0x96,0xf5 };
    const uint8_t CIPHERTEXT[] = { 0x81,0xeb,0xd0,0x31,0x44,0x77,0x9a,0xce,0x93,0x0f,0x98,0xf5,0xc6,0xa3,0xf9,0xc5 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-60", "[OFB][MCT][128][DECRYPT][n60]") {
    const uint8_t KEY[] = { 0xd1,0x89,0xe9,0x2c,0xa9,0xc7,0x18,0x73,0xed,0x70,0xc3,0x64,0x39,0x22,0x1f,0xe9 };
    const uint8_t IV[] = { 0xe8,0xf7,0xaf,0x61,0xdd,0xfe,0x11,0x3c,0x93,0x35,0x0f,0x74,0x60,0x68,0x96,0xf5 };
    const uint8_t PLAINTEXT[] = { 0x09,0xfc,0x8e,0x9d,0x1b,0x33,0x6d,0x33,0x7c,0x40,0x47,0x25,0x2b,0xc5,0xce,0xc0 };
    const uint8_t CIPHERTEXT[] = { 0xc4,0x03,0x75,0x31,0xf2,0x67,0xd3,0x2a,0x92,0xab,0xdd,0x8c,0x22,0x3c,0x6c,0x83 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-61", "[OFB][MCT][128][DECRYPT][n61]") {
    const uint8_t KEY[] = { 0xd8,0x75,0x67,0xb1,0xb2,0xf4,0x75,0x40,0x91,0x30,0x84,0x41,0x12,0xe7,0xd1,0x29 };
    const uint8_t IV[] = { 0x09,0xfc,0x8e,0x9d,0x1b,0x33,0x6d,0x33,0x7c,0x40,0x47,0x25,0x2b,0xc5,0xce,0xc0 };
    const uint8_t PLAINTEXT[] = { 0x0f,0xc0,0x31,0xbf,0xb4,0xc1,0xa4,0x1d,0xd2,0x0c,0x71,0x10,0xb9,0x15,0x0e,0x05 };
    const uint8_t CIPHERTEXT[] = { 0xb6,0x5e,0xfb,0x74,0x59,0xa1,0x4f,0x3b,0xf2,0x0b,0x15,0x3d,0x9a,0x76,0xfb,0x50 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-62", "[OFB][MCT][128][DECRYPT][n62]") {
    const uint8_t KEY[] = { 0xd7,0xb5,0x56,0x0e,0x06,0x35,0xd1,0x5d,0x43,0x3c,0xf5,0x51,0xab,0xf2,0xdf,0x2c };
    const uint8_t IV[] = { 0x0f,0xc0,0x31,0xbf,0xb4,0xc1,0xa4,0x1d,0xd2,0x0c,0x71,0x10,0xb9,0x15,0x0e,0x05 };
    const uint8_t PLAINTEXT[] = { 0x6c,0x77,0x9d,0x87,0x01,0x18,0x86,0x9d,0x80,0xf0,0x3f,0xe8,0x7c,0xef,0xe4,0xac };
    const uint8_t CIPHERTEXT[] = { 0xe0,0x03,0xa0,0x11,0x49,0x49,0x5a,0x7e,0x93,0x2b,0x89,0xb3,0x0f,0x7a,0x70,0xda };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-63", "[OFB][MCT][128][DECRYPT][n63]") {
    const uint8_t KEY[] = { 0xbb,0xc2,0xcb,0x89,0x07,0x2d,0x57,0xc0,0xc3,0xcc,0xca,0xb9,0xd7,0x1d,0x3b,0x80 };
    const uint8_t IV[] = { 0x6c,0x77,0x9d,0x87,0x01,0x18,0x86,0x9d,0x80,0xf0,0x3f,0xe8,0x7c,0xef,0xe4,0xac };
    const uint8_t PLAINTEXT[] = { 0xb3,0x9b,0xfb,0x0a,0xe2,0x2e,0x39,0x46,0x10,0x8e,0x1b,0x17,0xf5,0xdd,0x3a,0xde };
    const uint8_t CIPHERTEXT[] = { 0x2d,0x49,0x4c,0x2e,0x0c,0xbc,0x51,0x83,0xfe,0xe5,0xe8,0x3b,0x28,0x06,0x06,0xc4 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-64", "[OFB][MCT][128][DECRYPT][n64]") {
    const uint8_t KEY[] = { 0x08,0x59,0x30,0x83,0xe5,0x03,0x6e,0x86,0xd3,0x42,0xd1,0xae,0x22,0xc0,0x01,0x5e };
    const uint8_t IV[] = { 0xb3,0x9b,0xfb,0x0a,0xe2,0x2e,0x39,0x46,0x10,0x8e,0x1b,0x17,0xf5,0xdd,0x3a,0xde };
    const uint8_t PLAINTEXT[] = { 0x52,0xa1,0x1f,0x72,0xba,0x8d,0x70,0x2e,0x3a,0x30,0x56,0x1b,0x99,0xc2,0x7c,0xd4 };
    const uint8_t CIPHERTEXT[] = { 0x94,0x43,0xf2,0x5b,0x83,0x6f,0x1c,0x8f,0xfc,0x67,0xa4,0x13,0xf5,0xd4,0x3b,0x4f };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-65", "[OFB][MCT][128][DECRYPT][n65]") {
    const uint8_t KEY[] = { 0x5a,0xf8,0x2f,0xf1,0x5f,0x8e,0x1e,0xa8,0xe9,0x72,0x87,0xb5,0xbb,0x02,0x7d,0x8a };
    const uint8_t IV[] = { 0x52,0xa1,0x1f,0x72,0xba,0x8d,0x70,0x2e,0x3a,0x30,0x56,0x1b,0x99,0xc2,0x7c,0xd4 };
    const uint8_t PLAINTEXT[] = { 0x06,0x2b,0xb7,0x22,0x33,0x8b,0x1b,0x04,0x8c,0xec,0xc6,0x1b,0x38,0x65,0xab,0x6f };
    const uint8_t CIPHERTEXT[] = { 0x6f,0x3f,0x62,0x8b,0x07,0x98,0xfd,0x7d,0x71,0x6a,0x1b,0x11,0xc9,0x8c,0xdf,0xf4 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-66", "[OFB][MCT][128][DECRYPT][n66]") {
    const uint8_t KEY[] = { 0x5c,0xd3,0x98,0xd3,0x6c,0x05,0x05,0xac,0x65,0x9e,0x41,0xae,0x83,0x67,0xd6,0xe5 };
    const uint8_t IV[] = { 0x06,0x2b,0xb7,0x22,0x33,0x8b,0x1b,0x04,0x8c,0xec,0xc6,0x1b,0x38,0x65,0xab,0x6f };
    const uint8_t PLAINTEXT[] = { 0x74,0xeb,0x24,0x69,0xcf,0xa3,0xd2,0x89,0xd0,0xde,0x29,0x3d,0x2d,0x19,0x48,0x17 };
    const uint8_t CIPHERTEXT[] = { 0xb0,0x95,0x2a,0x33,0x34,0x56,0xda,0x2f,0xb4,0x6c,0x0a,0x42,0x6e,0xdb,0x63,0x33 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-67", "[OFB][MCT][128][DECRYPT][n67]") {
    const uint8_t KEY[] = { 0x28,0x38,0xbc,0xba,0xa3,0xa6,0xd7,0x25,0xb5,0x40,0x68,0x93,0xae,0x7e,0x9e,0xf2 };
    const uint8_t IV[] = { 0x74,0xeb,0x24,0x69,0xcf,0xa3,0xd2,0x89,0xd0,0xde,0x29,0x3d,0x2d,0x19,0x48,0x17 };
    const uint8_t PLAINTEXT[] = { 0xbc,0x60,0x5a,0x94,0x54,0xc4,0x2d,0xb7,0x5e,0x9c,0xe8,0x16,0xdc,0x5a,0xff,0x6f };
    const uint8_t CIPHERTEXT[] = { 0x05,0x1a,0x7b,0x1f,0xd2,0x80,0xb7,0xcd,0x93,0x5e,0x91,0x7d,0x7d,0x09,0x8b,0xd7 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-68", "[OFB][MCT][128][DECRYPT][n68]") {
    const uint8_t KEY[] = { 0x94,0x58,0xe6,0x2e,0xf7,0x62,0xfa,0x92,0xeb,0xdc,0x80,0x85,0x72,0x24,0x61,0x9d };
    const uint8_t IV[] = { 0xbc,0x60,0x5a,0x94,0x54,0xc4,0x2d,0xb7,0x5e,0x9c,0xe8,0x16,0xdc,0x5a,0xff,0x6f };
    const uint8_t PLAINTEXT[] = { 0x82,0xf3,0xe4,0x74,0x12,0x8b,0xf7,0x2e,0xcd,0xe4,0x25,0xb7,0x7c,0x61,0x01,0xd7 };
    const uint8_t CIPHERTEXT[] = { 0x82,0x51,0x70,0xf1,0x0b,0x9f,0x60,0x48,0x21,0xb8,0x71,0x02,0x51,0x0a,0xaf,0x0d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-69", "[OFB][MCT][128][DECRYPT][n69]") {
    const uint8_t KEY[] = { 0x16,0xab,0x02,0x5a,0xe5,0xe9,0x0d,0xbc,0x26,0x38,0xa5,0x32,0x0e,0x45,0x60,0x4a };
    const uint8_t IV[] = { 0x82,0xf3,0xe4,0x74,0x12,0x8b,0xf7,0x2e,0xcd,0xe4,0x25,0xb7,0x7c,0x61,0x01,0xd7 };
    const uint8_t PLAINTEXT[] = { 0x16,0x90,0x35,0xa6,0x02,0xdb,0x75,0xb9,0x0e,0x85,0x1e,0xf4,0xa8,0xea,0xe4,0x30 };
    const uint8_t CIPHERTEXT[] = { 0x23,0xe5,0x15,0x5a,0x9e,0x2f,0xd9,0xe7,0x60,0x59,0xa4,0x45,0xc1,0xc5,0x41,0x69 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-70", "[OFB][MCT][128][DECRYPT][n70]") {
    const uint8_t KEY[] = { 0x00,0x3b,0x37,0xfc,0xe7,0x32,0x78,0x05,0x28,0xbd,0xbb,0xc6,0xa6,0xaf,0x84,0x7a };
    const uint8_t IV[] = { 0x16,0x90,0x35,0xa6,0x02,0xdb,0x75,0xb9,0x0e,0x85,0x1e,0xf4,0xa8,0xea,0xe4,0x30 };
    const uint8_t PLAINTEXT[] = { 0x2a,0xba,0xb2,0x88,0x32,0x8b,0x46,0x72,0x6d,0x5d,0xf7,0xb3,0x30,0x1e,0xcc,0x94 };
    const uint8_t CIPHERTEXT[] = { 0xf1,0x45,0x35,0x02,0x38,0xb0,0x2f,0x5d,0xaf,0xc4,0x41,0x72,0x4f,0x6c,0x6d,0xd2 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-71", "[OFB][MCT][128][DECRYPT][n71]") {
    const uint8_t KEY[] = { 0x2a,0x81,0x85,0x74,0xd5,0xb9,0x3e,0x77,0x45,0xe0,0x4c,0x75,0x96,0xb1,0x48,0xee };
    const uint8_t IV[] = { 0x2a,0xba,0xb2,0x88,0x32,0x8b,0x46,0x72,0x6d,0x5d,0xf7,0xb3,0x30,0x1e,0xcc,0x94 };
    const uint8_t PLAINTEXT[] = { 0xc3,0x55,0x58,0x2f,0x18,0xe5,0x56,0xcf,0x34,0x85,0xc2,0x18,0x10,0x20,0xb6,0x5d };
    const uint8_t CIPHERTEXT[] = { 0x29,0xbb,0xad,0x96,0x0f,0xde,0xdd,0xfa,0xcf,0x0c,0x4a,0x63,0x2c,0xf3,0xd6,0xc7 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-72", "[OFB][MCT][128][DECRYPT][n72]") {
    const uint8_t KEY[] = { 0xe9,0xd4,0xdd,0x5b,0xcd,0x5c,0x68,0xb8,0x71,0x65,0x8e,0x6d,0x86,0x91,0xfe,0xb3 };
    const uint8_t IV[] = { 0xc3,0x55,0x58,0x2f,0x18,0xe5,0x56,0xcf,0x34,0x85,0xc2,0x18,0x10,0x20,0xb6,0x5d };
    const uint8_t PLAINTEXT[] = { 0x92,0xba,0x1f,0x88,0x55,0x9b,0x90,0x62,0xdf,0x75,0xbe,0xd0,0xa9,0x41,0x45,0xa0 };
    const uint8_t CIPHERTEXT[] = { 0x27,0x25,0x9f,0x27,0x9b,0x8e,0xd1,0x9f,0xf0,0x5d,0xc0,0x39,0xe7,0x67,0xb1,0xfe };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-73", "[OFB][MCT][128][DECRYPT][n73]") {
    const uint8_t KEY[] = { 0x7b,0x6e,0xc2,0xd3,0x98,0xc7,0xf8,0xda,0xae,0x10,0x30,0xbd,0x2f,0xd0,0xbb,0x13 };
    const uint8_t IV[] = { 0x92,0xba,0x1f,0x88,0x55,0x9b,0x90,0x62,0xdf,0x75,0xbe,0xd0,0xa9,0x41,0x45,0xa0 };
    const uint8_t PLAINTEXT[] = { 0xcf,0xe1,0x8a,0xa8,0x15,0x98,0x39,0xfb,0x75,0x3b,0x1c,0xaa,0xb8,0xe7,0x09,0xd4 };
    const uint8_t CIPHERTEXT[] = { 0x9c,0xa4,0x04,0x2a,0x25,0x74,0x96,0xe7,0xa5,0x67,0x3e,0xd5,0x72,0xfb,0x9b,0x4f };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-74", "[OFB][MCT][128][DECRYPT][n74]") {
    const uint8_t KEY[] = { 0xb4,0x8f,0x48,0x7b,0x8d,0x5f,0xc1,0x21,0xdb,0x2b,0x2c,0x17,0x97,0x37,0xb2,0xc7 };
    const uint8_t IV[] = { 0xcf,0xe1,0x8a,0xa8,0x15,0x98,0x39,0xfb,0x75,0x3b,0x1c,0xaa,0xb8,0xe7,0x09,0xd4 };
    const uint8_t PLAINTEXT[] = { 0xde,0xa0,0xaf,0xc6,0x61,0x06,0x83,0x77,0xae,0xe0,0x4f,0xdc,0x6f,0x47,0xd3,0xc4 };
    const uint8_t CIPHERTEXT[] = { 0x73,0x49,0x4a,0x19,0xe3,0x35,0xcc,0x1e,0xd1,0xf4,0x39,0x9a,0xed,0x9d,0xa3,0x69 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-75", "[OFB][MCT][128][DECRYPT][n75]") {
    const uint8_t KEY[] = { 0x6a,0x2f,0xe7,0xbd,0xec,0x59,0x42,0x56,0x75,0xcb,0x63,0xcb,0xf8,0x70,0x61,0x03 };
    const uint8_t IV[] = { 0xde,0xa0,0xaf,0xc6,0x61,0x06,0x83,0x77,0xae,0xe0,0x4f,0xdc,0x6f,0x47,0xd3,0xc4 };
    const uint8_t PLAINTEXT[] = { 0x23,0xf8,0x06,0x11,0x09,0x3c,0x72,0xe9,0xc0,0x32,0x1e,0xb8,0x4a,0xbe,0x5f,0x60 };
    const uint8_t CIPHERTEXT[] = { 0x64,0x94,0xed,0x2d,0x36,0xe5,0x94,0x58,0xca,0xd1,0x17,0x13,0x4d,0x46,0x84,0x31 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-76", "[OFB][MCT][128][DECRYPT][n76]") {
    const uint8_t KEY[] = { 0x49,0xd7,0xe1,0xac,0xe5,0x65,0x30,0xbf,0xb5,0xf9,0x7d,0x73,0xb2,0xce,0x3e,0x63 };
    const uint8_t IV[] = { 0x23,0xf8,0x06,0x11,0x09,0x3c,0x72,0xe9,0xc0,0x32,0x1e,0xb8,0x4a,0xbe,0x5f,0x60 };
    const uint8_t PLAINTEXT[] = { 0xb9,0xe8,0x3d,0x7c,0x46,0x91,0x38,0x92,0x67,0xda,0x04,0xbb,0x14,0x55,0x5d,0x7f };
    const uint8_t CIPHERTEXT[] = { 0x30,0xd2,0x47,0xa3,0x8a,0xca,0x33,0xdc,0xba,0x2a,0x5d,0x20,0x5e,0xaa,0xc7,0x01 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-77", "[OFB][MCT][128][DECRYPT][n77]") {
    const uint8_t KEY[] = { 0xf0,0x3f,0xdc,0xd0,0xa3,0xf4,0x08,0x2d,0xd2,0x23,0x79,0xc8,0xa6,0x9b,0x63,0x1c };
    const uint8_t IV[] = { 0xb9,0xe8,0x3d,0x7c,0x46,0x91,0x38,0x92,0x67,0xda,0x04,0xbb,0x14,0x55,0x5d,0x7f };
    const uint8_t PLAINTEXT[] = { 0x4f,0x45,0x92,0x86,0x40,0xb1,0x00,0x65,0xf1,0x8d,0xee,0xf4,0xc8,0x85,0xee,0x3c };
    const uint8_t CIPHERTEXT[] = { 0xda,0xb7,0x5e,0x7d,0xd7,0x61,0xa1,0x93,0x72,0x1b,0xee,0x40,0x26,0x6e,0xc0,0x86 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-78", "[OFB][MCT][128][DECRYPT][n78]") {
    const uint8_t KEY[] = { 0xbf,0x7a,0x4e,0x56,0xe3,0x45,0x08,0x48,0x23,0xae,0x97,0x3c,0x6e,0x1e,0x8d,0x20 };
    const uint8_t IV[] = { 0x4f,0x45,0x92,0x86,0x40,0xb1,0x00,0x65,0xf1,0x8d,0xee,0xf4,0xc8,0x85,0xee,0x3c };
    const uint8_t PLAINTEXT[] = { 0x6a,0xb8,0x81,0xda,0x44,0xce,0x7f,0x77,0xb2,0x78,0xca,0xa7,0x45,0x5b,0xf8,0x85 };
    const uint8_t CIPHERTEXT[] = { 0x18,0xdb,0xaa,0xe8,0x22,0x11,0x6a,0x12,0x28,0xde,0x3c,0x2c,0x53,0x26,0xf1,0x2a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-79", "[OFB][MCT][128][DECRYPT][n79]") {
    const uint8_t KEY[] = { 0xd5,0xc2,0xcf,0x8c,0xa7,0x8b,0x77,0x3f,0x91,0xd6,0x5d,0x9b,0x2b,0x45,0x75,0xa5 };
    const uint8_t IV[] = { 0x6a,0xb8,0x81,0xda,0x44,0xce,0x7f,0x77,0xb2,0x78,0xca,0xa7,0x45,0x5b,0xf8,0x85 };
    const uint8_t PLAINTEXT[] = { 0x98,0xb3,0xf3,0x9f,0xe2,0xb7,0x47,0x35,0xa4,0x0e,0x70,0x67,0x67,0x47,0xc0,0x69 };
    const uint8_t CIPHERTEXT[] = { 0x9f,0xaf,0x91,0xd5,0x90,0x2e,0xc7,0xc4,0x0d,0x5b,0xef,0xbf,0x6d,0xc4,0xf4,0xd2 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-80", "[OFB][MCT][128][DECRYPT][n80]") {
    const uint8_t KEY[] = { 0x4d,0x71,0x3c,0x13,0x45,0x3c,0x30,0x0a,0x35,0xd8,0x2d,0xfc,0x4c,0x02,0xb5,0xcc };
    const uint8_t IV[] = { 0x98,0xb3,0xf3,0x9f,0xe2,0xb7,0x47,0x35,0xa4,0x0e,0x70,0x67,0x67,0x47,0xc0,0x69 };
    const uint8_t PLAINTEXT[] = { 0x17,0x3c,0xf3,0x06,0xa7,0x5c,0xfc,0x14,0x11,0x90,0x76,0xc4,0x5a,0x4f,0xde,0x1f };
    const uint8_t CIPHERTEXT[] = { 0x70,0x71,0x92,0x80,0x22,0xab,0x24,0xb9,0xb9,0x2e,0xa2,0xfa,0xb7,0x61,0x2d,0x64 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-81", "[OFB][MCT][128][DECRYPT][n81]") {
    const uint8_t KEY[] = { 0x5a,0x4d,0xcf,0x15,0xe2,0x60,0xcc,0x1e,0x24,0x48,0x5b,0x38,0x16,0x4d,0x6b,0xd3 };
    const uint8_t IV[] = { 0x17,0x3c,0xf3,0x06,0xa7,0x5c,0xfc,0x14,0x11,0x90,0x76,0xc4,0x5a,0x4f,0xde,0x1f };
    const uint8_t PLAINTEXT[] = { 0x91,0xf9,0x9f,0xe5,0x43,0xaa,0xb6,0xcb,0xbc,0x90,0x4d,0xfa,0xb9,0xf6,0xe4,0xc4 };
    const uint8_t CIPHERTEXT[] = { 0x13,0x66,0xf7,0xf8,0xd0,0x7f,0x9f,0xc4,0xbb,0x49,0xf7,0x3e,0x7e,0xf0,0xe1,0x82 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-82", "[OFB][MCT][128][DECRYPT][n82]") {
    const uint8_t KEY[] = { 0xcb,0xb4,0x50,0xf0,0xa1,0xca,0x7a,0xd5,0x98,0xd8,0x16,0xc2,0xaf,0xbb,0x8f,0x17 };
    const uint8_t IV[] = { 0x91,0xf9,0x9f,0xe5,0x43,0xaa,0xb6,0xcb,0xbc,0x90,0x4d,0xfa,0xb9,0xf6,0xe4,0xc4 };
    const uint8_t PLAINTEXT[] = { 0x9d,0xed,0x95,0x53,0xa5,0x00,0x67,0x8b,0xf3,0x08,0x8f,0x87,0x67,0xdc,0x04,0x4e };
    const uint8_t CIPHERTEXT[] = { 0xf3,0x4f,0xfc,0xb7,0x64,0x3a,0x13,0xc4,0x10,0x48,0xae,0xe5,0x9b,0x71,0x4c,0x92 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-83", "[OFB][MCT][128][DECRYPT][n83]") {
    const uint8_t KEY[] = { 0x56,0x59,0xc5,0xa3,0x04,0xca,0x1d,0x5e,0x6b,0xd0,0x99,0x45,0xc8,0x67,0x8b,0x59 };
    const uint8_t IV[] = { 0x9d,0xed,0x95,0x53,0xa5,0x00,0x67,0x8b,0xf3,0x08,0x8f,0x87,0x67,0xdc,0x04,0x4e };
    const uint8_t PLAINTEXT[] = { 0x7c,0xfc,0x67,0x0f,0x93,0x12,0xcb,0x09,0x66,0x96,0x9f,0xf3,0x6b,0x05,0x20,0x55 };
    const uint8_t CIPHERTEXT[] = { 0xfc,0x6e,0x18,0x8b,0x87,0x01,0x12,0xdb,0x78,0x2a,0x3b,0x69,0xe6,0x6e,0x9b,0xcd };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-84", "[OFB][MCT][128][DECRYPT][n84]") {
    const uint8_t KEY[] = { 0x2a,0xa5,0xa2,0xac,0x97,0xd8,0xd6,0x57,0x0d,0x46,0x06,0xb6,0xa3,0x62,0xab,0x0c };
    const uint8_t IV[] = { 0x7c,0xfc,0x67,0x0f,0x93,0x12,0xcb,0x09,0x66,0x96,0x9f,0xf3,0x6b,0x05,0x20,0x55 };
    const uint8_t PLAINTEXT[] = { 0xc2,0xb5,0x16,0x3c,0xc4,0x3c,0x2d,0xf2,0xf9,0x57,0xa7,0xaf,0xd4,0xc5,0xda,0xa6 };
    const uint8_t CIPHERTEXT[] = { 0x85,0x31,0xdc,0x04,0xfd,0x4d,0x41,0x18,0x6a,0x2c,0x16,0x0e,0x3a,0xd7,0x56,0x5a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-85", "[OFB][MCT][128][DECRYPT][n85]") {
    const uint8_t KEY[] = { 0xe8,0x10,0xb4,0x90,0x53,0xe4,0xfb,0xa5,0xf4,0x11,0xa1,0x19,0x77,0xa7,0x71,0xaa };
    const uint8_t IV[] = { 0xc2,0xb5,0x16,0x3c,0xc4,0x3c,0x2d,0xf2,0xf9,0x57,0xa7,0xaf,0xd4,0xc5,0xda,0xa6 };
    const uint8_t PLAINTEXT[] = { 0xe5,0x92,0xa3,0xd1,0x68,0xd3,0x04,0x3e,0xff,0x77,0xe7,0x1e,0xc6,0x7f,0x13,0x48 };
    const uint8_t CIPHERTEXT[] = { 0x09,0xdc,0x64,0xd1,0xe2,0x1b,0x7d,0xbf,0x4d,0x0b,0x17,0x2d,0xe9,0xaa,0x22,0x61 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-86", "[OFB][MCT][128][DECRYPT][n86]") {
    const uint8_t KEY[] = { 0x0d,0x82,0x17,0x41,0x3b,0x37,0xff,0x9b,0x0b,0x66,0x46,0x07,0xb1,0xd8,0x62,0xe2 };
    const uint8_t IV[] = { 0xe5,0x92,0xa3,0xd1,0x68,0xd3,0x04,0x3e,0xff,0x77,0xe7,0x1e,0xc6,0x7f,0x13,0x48 };
    const uint8_t PLAINTEXT[] = { 0x00,0xf6,0xeb,0x85,0x7b,0x33,0xab,0x6b,0x5f,0x16,0x2f,0x4d,0xf7,0x65,0xf9,0xe8 };
    const uint8_t CIPHERTEXT[] = { 0xf1,0x2a,0xb0,0xce,0x13,0x64,0xea,0x05,0x60,0x96,0x43,0x0f,0x28,0x85,0x81,0xb5 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-87", "[OFB][MCT][128][DECRYPT][n87]") {
    const uint8_t KEY[] = { 0x0d,0x74,0xfc,0xc4,0x40,0x04,0x54,0xf0,0x54,0x70,0x69,0x4a,0x46,0xbd,0x9b,0x0a };
    const uint8_t IV[] = { 0x00,0xf6,0xeb,0x85,0x7b,0x33,0xab,0x6b,0x5f,0x16,0x2f,0x4d,0xf7,0x65,0xf9,0xe8 };
    const uint8_t PLAINTEXT[] = { 0xe3,0x60,0xd3,0x59,0xf9,0x70,0xee,0xd8,0x72,0x8b,0x26,0xb6,0x79,0x26,0xfd,0x05 };
    const uint8_t CIPHERTEXT[] = { 0x65,0x96,0xb2,0xe7,0xb1,0x24,0x31,0x26,0xe9,0xb3,0x18,0x83,0x02,0x10,0xa5,0xcd };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-88", "[OFB][MCT][128][DECRYPT][n88]") {
    const uint8_t KEY[] = { 0xee,0x14,0x2f,0x9d,0xb9,0x74,0xba,0x28,0x26,0xfb,0x4f,0xfc,0x3f,0x9b,0x66,0x0f };
    const uint8_t IV[] = { 0xe3,0x60,0xd3,0x59,0xf9,0x70,0xee,0xd8,0x72,0x8b,0x26,0xb6,0x79,0x26,0xfd,0x05 };
    const uint8_t PLAINTEXT[] = { 0xc3,0xaf,0xd8,0xd1,0x17,0x71,0x00,0x19,0x3f,0xe7,0x68,0x76,0xac,0x9d,0x1e,0x33 };
    const uint8_t CIPHERTEXT[] = { 0x68,0xf0,0xd4,0xc0,0x06,0x00,0x2b,0xbc,0x76,0x86,0x93,0x5d,0x4b,0x6f,0x3d,0xd1 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-89", "[OFB][MCT][128][DECRYPT][n89]") {
    const uint8_t KEY[] = { 0x2d,0xbb,0xf7,0x4c,0xae,0x05,0xba,0x31,0x19,0x1c,0x27,0x8a,0x93,0x06,0x78,0x3c };
    const uint8_t IV[] = { 0xc3,0xaf,0xd8,0xd1,0x17,0x71,0x00,0x19,0x3f,0xe7,0x68,0x76,0xac,0x9d,0x1e,0x33 };
    const uint8_t PLAINTEXT[] = { 0xa3,0x16,0xd8,0x58,0x6d,0xa6,0xd9,0xfe,0x52,0x62,0x3f,0xb7,0x61,0xc7,0xe9,0x7e };
    const uint8_t CIPHERTEXT[] = { 0x4a,0xea,0x56,0x90,0x0c,0xca,0x62,0xe1,0x2f,0x16,0x78,0x14,0xab,0x8a,0x32,0xd0 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-90", "[OFB][MCT][128][DECRYPT][n90]") {
    const uint8_t KEY[] = { 0x8e,0xad,0x2f,0x14,0xc3,0xa3,0x63,0xcf,0x4b,0x7e,0x18,0x3d,0xf2,0xc1,0x91,0x42 };
    const uint8_t IV[] = { 0xa3,0x16,0xd8,0x58,0x6d,0xa6,0xd9,0xfe,0x52,0x62,0x3f,0xb7,0x61,0xc7,0xe9,0x7e };
    const uint8_t PLAINTEXT[] = { 0x07,0x35,0x24,0x22,0xd2,0x23,0xe2,0x39,0x3c,0x6d,0x1b,0x71,0x2e,0x25,0xe8,0xdf };
    const uint8_t CIPHERTEXT[] = { 0x42,0x16,0xe3,0x13,0xc0,0x39,0x14,0x3a,0x40,0x06,0xd2,0xde,0x5f,0x38,0x8b,0x2b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-91", "[OFB][MCT][128][DECRYPT][n91]") {
    const uint8_t KEY[] = { 0x89,0x98,0x0b,0x36,0x11,0x80,0x81,0xf6,0x77,0x13,0x03,0x4c,0xdc,0xe4,0x79,0x9d };
    const uint8_t IV[] = { 0x07,0x35,0x24,0x22,0xd2,0x23,0xe2,0x39,0x3c,0x6d,0x1b,0x71,0x2e,0x25,0xe8,0xdf };
    const uint8_t PLAINTEXT[] = { 0xa0,0xda,0x48,0xb3,0xed,0x32,0x63,0x41,0x5c,0xff,0x4a,0xca,0xb9,0xc0,0x1c,0x80 };
    const uint8_t CIPHERTEXT[] = { 0x8c,0xbb,0x31,0xc9,0xff,0x2e,0xbc,0x88,0xe3,0x85,0x97,0xcc,0x10,0x3d,0x25,0x2b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-92", "[OFB][MCT][128][DECRYPT][n92]") {
    const uint8_t KEY[] = { 0x29,0x42,0x43,0x85,0xfc,0xb2,0xe2,0xb7,0x2b,0xec,0x49,0x86,0x65,0x24,0x65,0x1d };
    const uint8_t IV[] = { 0xa0,0xda,0x48,0xb3,0xed,0x32,0x63,0x41,0x5c,0xff,0x4a,0xca,0xb9,0xc0,0x1c,0x80 };
    const uint8_t PLAINTEXT[] = { 0xf2,0x81,0x26,0x0c,0xe2,0xd2,0x5e,0xd3,0x53,0x0f,0x20,0x10,0xc7,0x9f,0x3c,0xad };
    const uint8_t CIPHERTEXT[] = { 0xbd,0x55,0xff,0x9e,0x3a,0xd9,0x70,0x91,0x07,0x3c,0x87,0x0c,0xc5,0x4d,0x5b,0x19 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-93", "[OFB][MCT][128][DECRYPT][n93]") {
    const uint8_t KEY[] = { 0xdb,0xc3,0x65,0x89,0x1e,0x60,0xbc,0x64,0x78,0xe3,0x69,0x96,0xa2,0xbb,0x59,0xb0 };
    const uint8_t IV[] = { 0xf2,0x81,0x26,0x0c,0xe2,0xd2,0x5e,0xd3,0x53,0x0f,0x20,0x10,0xc7,0x9f,0x3c,0xad };
    const uint8_t PLAINTEXT[] = { 0xc8,0x3e,0x4e,0x38,0x58,0xab,0xc5,0xe6,0x7a,0xd4,0x6e,0x55,0x9d,0x4e,0xf2,0x74 };
    const uint8_t CIPHERTEXT[] = { 0x36,0xb0,0x03,0xec,0x32,0x6e,0x4f,0xd0,0xaa,0xfc,0x23,0x1d,0xe9,0x81,0xf8,0x24 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-94", "[OFB][MCT][128][DECRYPT][n94]") {
    const uint8_t KEY[] = { 0x13,0xfd,0x2b,0xb1,0x46,0xcb,0x79,0x82,0x02,0x37,0x07,0xc3,0x3f,0xf5,0xab,0xc4 };
    const uint8_t IV[] = { 0xc8,0x3e,0x4e,0x38,0x58,0xab,0xc5,0xe6,0x7a,0xd4,0x6e,0x55,0x9d,0x4e,0xf2,0x74 };
    const uint8_t PLAINTEXT[] = { 0x18,0x6f,0xff,0x62,0x04,0xd8,0x61,0xc9,0x0c,0x9f,0x7a,0x27,0xea,0x86,0x05,0xbf };
    const uint8_t CIPHERTEXT[] = { 0xb9,0x90,0x77,0xe7,0xac,0x83,0xaf,0x2b,0x35,0x5f,0x86,0xe6,0x17,0x81,0xc1,0xe4 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-95", "[OFB][MCT][128][DECRYPT][n95]") {
    const uint8_t KEY[] = { 0x0b,0x92,0xd4,0xd3,0x42,0x13,0x18,0x4b,0x0e,0xa8,0x7d,0xe4,0xd5,0x73,0xae,0x7b };
    const uint8_t IV[] = { 0x18,0x6f,0xff,0x62,0x04,0xd8,0x61,0xc9,0x0c,0x9f,0x7a,0x27,0xea,0x86,0x05,0xbf };
    const uint8_t PLAINTEXT[] = { 0xdd,0xa8,0x01,0x1a,0xf9,0xe6,0x55,0x7f,0xbf,0x69,0x39,0x1d,0x50,0x85,0x25,0x20 };
    const uint8_t CIPHERTEXT[] = { 0x48,0xc4,0x87,0x25,0x67,0x11,0x42,0x97,0x4c,0xb6,0x71,0xa2,0x44,0x17,0x43,0x4a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-96", "[OFB][MCT][128][DECRYPT][n96]") {
    const uint8_t KEY[] = { 0xd6,0x3a,0xd5,0xc9,0xbb,0xf5,0x4d,0x34,0xb1,0xc1,0x44,0xf9,0x85,0xf6,0x8b,0x5b };
    const uint8_t IV[] = { 0xdd,0xa8,0x01,0x1a,0xf9,0xe6,0x55,0x7f,0xbf,0x69,0x39,0x1d,0x50,0x85,0x25,0x20 };
    const uint8_t PLAINTEXT[] = { 0x73,0xca,0x2c,0x4a,0xe2,0x24,0xb3,0x81,0x04,0xe4,0x0c,0xb5,0x9c,0xe2,0xd5,0xb8 };
    const uint8_t CIPHERTEXT[] = { 0xe5,0x14,0xde,0x49,0xb0,0xd5,0xe1,0xdc,0x38,0x5b,0xd0,0xf8,0xe0,0x84,0x3d,0xcd };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-97", "[OFB][MCT][128][DECRYPT][n97]") {
    const uint8_t KEY[] = { 0xa5,0xf0,0xf9,0x83,0x59,0xd1,0xfe,0xb5,0xb5,0x25,0x48,0x4c,0x19,0x14,0x5e,0xe3 };
    const uint8_t IV[] = { 0x73,0xca,0x2c,0x4a,0xe2,0x24,0xb3,0x81,0x04,0xe4,0x0c,0xb5,0x9c,0xe2,0xd5,0xb8 };
    const uint8_t PLAINTEXT[] = { 0xb4,0x6d,0xfd,0x60,0xda,0xff,0x86,0xd8,0x58,0x1e,0x4c,0xc9,0x92,0x0c,0x69,0x56 };
    const uint8_t CIPHERTEXT[] = { 0x60,0x5c,0xb7,0x43,0x60,0xa8,0xaf,0xce,0xec,0xad,0x70,0xa4,0xb0,0x0f,0x4b,0xb6 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-98", "[OFB][MCT][128][DECRYPT][n98]") {
    const uint8_t KEY[] = { 0x11,0x9d,0x04,0xe3,0x83,0x2e,0x78,0x6d,0xed,0x3b,0x04,0x85,0x8b,0x18,0x37,0xb5 };
    const uint8_t IV[] = { 0xb4,0x6d,0xfd,0x60,0xda,0xff,0x86,0xd8,0x58,0x1e,0x4c,0xc9,0x92,0x0c,0x69,0x56 };
    const uint8_t PLAINTEXT[] = { 0x94,0xb8,0x94,0x82,0x1d,0xe9,0x3e,0xcb,0xbb,0x49,0x6b,0x34,0x3b,0x0a,0xd8,0x10 };
    const uint8_t CIPHERTEXT[] = { 0x37,0x2d,0xe5,0xd8,0x28,0x84,0x9d,0x50,0xd1,0x05,0x93,0x3c,0xed,0x57,0x41,0xfd };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT128-DECRYPT-99", "[OFB][MCT][128][DECRYPT][n99]") {
    const uint8_t KEY[] = { 0x85,0x25,0x90,0x61,0x9e,0xc7,0x46,0xa6,0x56,0x72,0x6f,0xb1,0xb0,0x12,0xef,0xa5 };
    const uint8_t IV[] = { 0x94,0xb8,0x94,0x82,0x1d,0xe9,0x3e,0xcb,0xbb,0x49,0x6b,0x34,0x3b,0x0a,0xd8,0x10 };
    const uint8_t PLAINTEXT[] = { 0x5b,0x78,0x3c,0xca,0x8e,0x40,0x91,0xa7,0xa6,0x3d,0xb0,0xef,0x8e,0xdc,0x73,0x81 };
    const uint8_t CIPHERTEXT[] = { 0x6f,0xd1,0xa2,0x03,0xf3,0x76,0x93,0x26,0x48,0x6f,0x35,0x90,0x71,0xb5,0xeb,0xdb };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

