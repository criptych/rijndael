#include "rijndael.h"
#include "catch.hpp"
#include <cstring>

static inline std::string buf2str(const uint8_t *buf, size_t len) {
    std::ostringstream ss; ss << std::hex << std::setfill('0');
    for (size_t i = 0; i < len; ++i) {
        ss << std::setw(2) << static_cast<int>(buf[i]) << ' ';
    }
    return ss.str();
}

TEST_CASE("OFBMMT128-ENCRYPT-0", "[OFB][MMT][128][ENCRYPT][n0]") {
    const uint8_t KEY[] = { 0xd7,0xd5,0x7b,0xd8,0x47,0x15,0x4a,0xf9,0x72,0x2a,0x8d,0xf0,0x96,0xe6,0x1a,0x42 };
    const uint8_t IV[] = { 0xfd,0xde,0x20,0x1c,0x91,0xe4,0x01,0xd9,0x72,0x38,0x68,0xc2,0xa6,0x12,0xb7,0x7a };
    const uint8_t PLAINTEXT[] = { 0x81,0x88,0x3f,0x22,0x16,0x52,0x82,0xba,0x6a,0x44,0x2a,0x8d,0xd2,0xa7,0x68,0xd4 };
    const uint8_t CIPHERTEXT[] = { 0x84,0xcc,0x13,0x0b,0x68,0x67,0x62,0x36,0x96,0xaa,0x8f,0x52,0x3d,0x96,0x8a,0xde };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMMT128-ENCRYPT-1", "[OFB][MMT][128][ENCRYPT][n1]") {
    const uint8_t KEY[] = { 0xc9,0xf4,0xce,0x21,0xb4,0xc7,0xda,0xaa,0x4f,0x93,0xe2,0x92,0xdc,0x60,0x5b,0xc5 };
    const uint8_t IV[] = { 0x5e,0x5a,0x8c,0xf2,0x80,0x8c,0x72,0x0e,0x01,0xc1,0xed,0x92,0xd4,0x70,0xa4,0x5d };
    const uint8_t PLAINTEXT[] = { 0x8e,0x19,0xc5,0xca,0xcd,0x01,0x5a,0x66,0x2e,0x7f,0x40,0xcd,0xec,0xad,0xbf,0x79,0xa6,0x80,0x81,0xc0,0x6d,0x95,0x44,0xb4,0x1c,0x2d,0xd2,0x48,0xe7,0x76,0x33,0xb4 };
    const uint8_t CIPHERTEXT[] = { 0x88,0x5d,0xc4,0x8a,0xdd,0x7e,0xe6,0xa1,0x83,0x9b,0xc5,0xc5,0xe0,0x3b,0xea,0xe0,0x71,0x30,0x1e,0xcf,0x91,0xa0,0x11,0x15,0x20,0xcd,0xe0,0xd3,0xa1,0x12,0xf5,0xd2 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMMT128-ENCRYPT-2", "[OFB][MMT][128][ENCRYPT][n2]") {
    const uint8_t KEY[] = { 0x7a,0x70,0xcc,0x6b,0x26,0x1e,0xec,0xcb,0x05,0xc5,0x71,0x17,0xd5,0x76,0x31,0x97 };
    const uint8_t IV[] = { 0xbb,0x7b,0x96,0x67,0xfb,0xd7,0x6d,0x5e,0xe2,0x04,0x82,0x87,0x69,0xa3,0x41,0xb1 };
    const uint8_t PLAINTEXT[] = { 0x82,0x3c,0xba,0xae,0x37,0x60,0xc8,0x55,0x12,0xa3,0xc8,0x3f,0xd6,0x0b,0xb5,0x4b,0x7c,0xfc,0x73,0x9b,0x29,0x5b,0x63,0xe0,0x5e,0xf4,0x35,0xd8,0x6e,0x19,0xfd,0x15,0x36,0x8c,0x89,0xff,0x08,0xa0,0xf2,0x1c,0xe8,0x9a,0x72,0x8f,0xfb,0x5d,0x75,0xdf };
    const uint8_t CIPHERTEXT[] = { 0xf5,0xc4,0x9a,0xae,0x8a,0x02,0x6b,0xf0,0x5e,0x52,0x5a,0x12,0xab,0x7e,0x19,0x5e,0xea,0x8a,0x1b,0x71,0xa8,0xd3,0x2a,0x51,0x13,0xaa,0x89,0x74,0x85,0x8f,0x2c,0xfc,0x03,0x39,0x80,0x50,0x03,0xa0,0xcb,0x1a,0x7b,0xe1,0x9f,0x37,0x6d,0x46,0x04,0xeb };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMMT128-ENCRYPT-3", "[OFB][MMT][128][ENCRYPT][n3]") {
    const uint8_t KEY[] = { 0x85,0xdb,0xd5,0xa6,0xe7,0x36,0x81,0xa5,0x1a,0x4a,0x7d,0x4e,0x93,0xca,0x7d,0x0c };
    const uint8_t IV[] = { 0x89,0xd8,0x97,0xc5,0xaa,0x9e,0x0a,0x5d,0x55,0x86,0xd4,0xb4,0x66,0x4f,0xc9,0x27 };
    const uint8_t PLAINTEXT[] = { 0xe3,0xdb,0xfc,0x6a,0xe1,0xa8,0x79,0x87,0x0f,0xd2,0x26,0x44,0xc8,0x13,0x5f,0xe0,0x63,0x35,0x5d,0xfc,0x0a,0x8d,0xad,0x45,0xc9,0xc6,0xe0,0x52,0xe6,0xe0,0x85,0xcf,0x71,0x77,0x54,0xdc,0x1b,0x49,0xac,0xb0,0x4c,0xf3,0x40,0x82,0x6f,0xfb,0x0d,0xa9,0x91,0x13,0x8f,0x02,0x2a,0x9c,0x34,0x92,0x3a,0x6a,0x11,0x6c,0x98,0xc7,0xd3,0xd5 };
    const uint8_t CIPHERTEXT[] = { 0x48,0xa3,0x4b,0xd8,0x14,0xdd,0x4e,0x1b,0x92,0xa5,0xaa,0x04,0x21,0x81,0x36,0xbc,0xd4,0x28,0xfd,0x34,0xca,0x15,0x1a,0x78,0xe0,0xeb,0x2c,0x8f,0x24,0xd4,0xf0,0x70,0x97,0x8a,0xac,0xd5,0xe1,0x35,0x1c,0x90,0x9c,0x81,0x8d,0xb4,0x5d,0x25,0xb3,0x4f,0xc2,0x1c,0xb0,0x6a,0x39,0x84,0xf9,0x69,0xab,0x82,0x5e,0xf7,0x95,0x88,0x8d,0xa9 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMMT128-ENCRYPT-4", "[OFB][MMT][128][ENCRYPT][n4]") {
    const uint8_t KEY[] = { 0x18,0xb9,0x88,0x7a,0x34,0x43,0x8f,0xb2,0xe7,0x59,0x02,0x7e,0x54,0xe3,0x34,0xb6 };
    const uint8_t IV[] = { 0xa5,0xbe,0x86,0x21,0xe5,0x8d,0xae,0x32,0x5c,0x6b,0x86,0x8f,0xd7,0x83,0xe2,0xcd };
    const uint8_t PLAINTEXT[] = { 0x8c,0xd6,0x59,0xdf,0x92,0x59,0x50,0xb5,0x16,0xf7,0x37,0xfc,0x92,0xd2,0xfa,0xfa,0x00,0x8c,0x00,0x8c,0x9d,0xfe,0x0e,0x75,0xed,0x2d,0x68,0xf6,0xff,0x79,0x39,0x9f,0xf2,0x18,0x34,0x64,0xb8,0xc3,0x7c,0xf3,0x1a,0xaf,0xc1,0x45,0xfc,0xbf,0xac,0x73,0xe3,0xf8,0x7e,0xcc,0xb4,0x35,0xf4,0x24,0xbf,0x1c,0x6d,0x6e,0xfb,0x50,0x4e,0x8e,0x93,0xe8,0xa6,0x68,0xa2,0x21,0x0e,0x3d,0x3b,0x4f,0xd4,0x37,0xad,0x1a,0x58,0x42 };
    const uint8_t CIPHERTEXT[] = { 0x82,0x73,0x6a,0x8f,0xd3,0xc0,0x79,0x41,0xb1,0x17,0x3c,0x9c,0x51,0xbf,0xe0,0xd8,0x59,0x0f,0x23,0x7a,0xe3,0x6e,0x7b,0x93,0x48,0x1b,0x7b,0x4a,0xd8,0x8d,0xa9,0xd6,0x8f,0x42,0x73,0x05,0xb9,0x5e,0x4b,0x90,0xf7,0x21,0x2d,0xba,0x00,0xf6,0xd6,0xbd,0xe7,0xe3,0x9a,0x74,0xda,0x70,0x20,0x12,0xf3,0x6c,0x4c,0xd0,0xa0,0xc2,0x77,0x56,0x05,0x2a,0xc1,0xbd,0x3b,0xf1,0x50,0x1c,0x86,0xc1,0x18,0x6a,0x69,0xa7,0x29,0x6c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMMT128-ENCRYPT-5", "[OFB][MMT][128][ENCRYPT][n5]") {
    const uint8_t KEY[] = { 0xda,0x52,0xc0,0xe4,0x60,0x9e,0x82,0xee,0x92,0x61,0x74,0xa9,0xea,0xf9,0x0b,0x08 };
    const uint8_t IV[] = { 0xf2,0xd0,0xc5,0xe8,0x6b,0x4d,0xdb,0x40,0xd3,0x07,0x13,0xaa,0xa5,0xa1,0x53,0xfe };
    const uint8_t PLAINTEXT[] = { 0x91,0xd6,0xc9,0x5a,0x61,0x4c,0xf8,0x5d,0xe1,0x6e,0xea,0xbe,0x59,0x76,0xc2,0xa2,0xa9,0xd3,0x07,0x04,0x2f,0x79,0xa7,0xaa,0xeb,0x7c,0x3c,0x57,0xe1,0xdd,0x8d,0x43,0xbf,0xa4,0x58,0xc8,0xc0,0x2e,0x4f,0x5e,0xd0,0xc9,0x60,0xc9,0xf1,0x7e,0x39,0x91,0xdd,0x2e,0x0c,0xb3,0xed,0xe1,0x8f,0x96,0x39,0x5a,0x48,0x40,0x01,0xef,0x07,0xca,0x4c,0x97,0xb4,0x11,0xce,0x45,0x4a,0xaf,0x0f,0x74,0x24,0x2a,0xca,0x03,0x78,0x6a,0x93,0x44,0x21,0x71,0xbd,0x50,0xa1,0x46,0x7b,0x9d,0x66,0x32,0x45,0xd2,0x4c,0x2f };
    const uint8_t CIPHERTEXT[] = { 0x41,0x6a,0xe1,0xe3,0xd8,0x35,0x0e,0x7c,0x29,0x1e,0xf4,0x19,0xc5,0xe3,0x46,0x5b,0x38,0x8e,0xe2,0xd2,0xf0,0x01,0x4c,0x04,0xa5,0x97,0x7e,0x56,0x17,0xa0,0x0d,0xfb,0xeb,0xa7,0x74,0x31,0x55,0x72,0x0f,0xd6,0x46,0xbb,0xe6,0x4d,0x8b,0xbf,0xd0,0x88,0x17,0xc4,0xc4,0xe9,0x7c,0x11,0x34,0x57,0x4b,0xc3,0x82,0x92,0x97,0x65,0x5c,0x08,0xe3,0x9d,0xe7,0x79,0x51,0xd3,0x99,0x6a,0x17,0x00,0xa2,0x6b,0xdc,0x42,0x92,0xd3,0xce,0x5c,0x42,0x94,0xfe,0xab,0x76,0x19,0x00,0x7b,0xf3,0xbd,0x03,0x1b,0xc7,0x63 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMMT128-ENCRYPT-6", "[OFB][MMT][128][ENCRYPT][n6]") {
    const uint8_t KEY[] = { 0x56,0xd6,0xf7,0xe2,0xa8,0x70,0xb9,0x2d,0x55,0xff,0x8d,0x6e,0x9c,0x55,0x4d,0x2a };
    const uint8_t IV[] = { 0xb5,0x12,0xf0,0xe1,0x1e,0x27,0xfd,0x1a,0x94,0xaa,0x0c,0x69,0x7b,0xb6,0xda,0x5e };
    const uint8_t PLAINTEXT[] = { 0xe6,0x2c,0xde,0xac,0x43,0x66,0x77,0x49,0x70,0x13,0x14,0xc5,0x46,0xf7,0x78,0xa4,0xc7,0x58,0xe4,0xf5,0x57,0x60,0xe7,0xd7,0x29,0xc3,0x78,0x3c,0xf7,0xa2,0x42,0xed,0xf6,0xae,0x3f,0xcf,0x09,0x90,0x88,0x64,0x34,0x89,0x6c,0x94,0x54,0x55,0xbf,0xae,0x0e,0x56,0x74,0xaa,0x06,0xee,0x6f,0xb1,0x51,0x2d,0x94,0xdf,0x2c,0xac,0x24,0x47,0xee,0xb8,0x49,0x37,0x3b,0xb3,0xef,0xbe,0x7b,0xb8,0xd6,0x6c,0x8a,0x7e,0xe5,0x59,0xb1,0x7f,0xc2,0x68,0xd6,0x59,0x9f,0xcd,0xef,0x74,0x57,0xcd,0xbd,0xe5,0xb9,0xc5,0xb6,0x92,0x23,0x6e,0x43,0x97,0x54,0x5f,0x2b,0xe9,0x7b,0xd4,0x4f,0x39,0x93,0xad };
    const uint8_t CIPHERTEXT[] = { 0x3a,0xba,0xe7,0x17,0xe8,0x37,0x0f,0x53,0xc3,0xee,0x55,0x71,0x73,0x9d,0xce,0x8a,0x61,0x1b,0xb5,0x15,0x38,0x56,0x9f,0xdd,0x17,0xf3,0xc0,0x11,0x64,0x2c,0xd7,0x81,0x11,0xdc,0x95,0x20,0xf9,0xd3,0x57,0x35,0x1f,0xfb,0x8a,0xb7,0x7b,0x38,0xbb,0x5c,0x34,0xf2,0xdd,0x02,0xe4,0x97,0xff,0x87,0x68,0x87,0xf2,0xa3,0xb2,0x6f,0xbf,0xca,0xb7,0x95,0x58,0x17,0x78,0x0f,0xca,0x75,0x1b,0x9e,0xf7,0x4e,0xed,0xd3,0x8e,0xe0,0xab,0x4b,0xc1,0xec,0xe4,0x53,0xe6,0x76,0x59,0x16,0xd3,0x45,0xe1,0xbd,0xbd,0x42,0xad,0x6d,0x50,0x8c,0x5f,0xf3,0x75,0xdf,0x20,0xfc,0x89,0x48,0xb6,0x31,0x0f,0x2d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMMT128-ENCRYPT-7", "[OFB][MMT][128][ENCRYPT][n7]") {
    const uint8_t KEY[] = { 0x09,0xf2,0x16,0xff,0x78,0xdf,0xe4,0x19,0xdf,0xce,0xf1,0xa8,0x55,0x47,0x34,0x14 };
    const uint8_t IV[] = { 0x72,0x21,0x74,0xc8,0x92,0xd2,0x65,0x29,0x19,0x82,0xc6,0xf0,0x42,0xce,0xd1,0x45 };
    const uint8_t PLAINTEXT[] = { 0x11,0xf4,0x35,0xe7,0xe3,0x65,0x6f,0xcf,0xa8,0xe0,0xdf,0x23,0x03,0x11,0xca,0x21,0x05,0x4e,0x84,0xe1,0x3c,0x85,0x90,0xe7,0xec,0x73,0x09,0xf5,0x9c,0x17,0x40,0x22,0xd4,0x67,0xa7,0x30,0x26,0x41,0xee,0x1b,0x6b,0xa4,0x6b,0xee,0x4f,0x20,0xbf,0xda,0x10,0x8b,0xb7,0x89,0x82,0xf6,0x70,0xb0,0x57,0xdf,0xbf,0xe4,0x9d,0xa9,0xcf,0xae,0x88,0x49,0x0c,0xe1,0x72,0x41,0x40,0x2b,0x20,0xd2,0xfc,0xeb,0x47,0x6d,0x3a,0x42,0x4e,0x6c,0x40,0x6d,0x56,0xff,0xc8,0x52,0x78,0x69,0x5d,0x58,0x4d,0x6c,0x08,0x7c,0xb4,0x01,0x2c,0xa2,0xcf,0x4d,0xaf,0x28,0x4f,0xd1,0x5a,0xc1,0xf2,0xe1,0x83,0x81,0x49,0x57,0xe9,0x34,0xbf,0x88,0xdf,0xf4,0xd7,0x77,0xad,0xfb,0xb5,0x49,0x33,0xb5 };
    const uint8_t CIPHERTEXT[] = { 0xe0,0xe5,0x18,0xe2,0xd3,0x39,0xb2,0xe8,0x78,0x93,0x7c,0xd4,0x4d,0x4e,0x5b,0xac,0x40,0x31,0x5e,0xb2,0x26,0x94,0x9a,0x8b,0x0e,0x58,0x63,0xd9,0xe5,0x43,0xbc,0x09,0x93,0x64,0x40,0xc6,0x54,0x76,0x4f,0x03,0xe5,0xad,0xab,0x5b,0x76,0xb6,0x12,0x18,0x49,0x2e,0x9f,0x0e,0x45,0x78,0xde,0x99,0x0f,0x1a,0x48,0x65,0x06,0xc2,0x6e,0xea,0x4a,0x3e,0xa9,0x68,0x29,0x46,0xae,0x4a,0x46,0x2f,0x90,0x48,0x2a,0x2c,0xff,0x19,0xac,0x78,0x46,0x58,0x7d,0xae,0x80,0xa3,0xf1,0xd3,0x40,0x85,0x83,0xd0,0x65,0x59,0x48,0x69,0xb0,0x0d,0xdd,0x17,0xae,0x19,0xd8,0xe0,0x9d,0x8d,0x31,0xeb,0x7f,0x75,0x79,0x32,0x0c,0x9f,0x26,0x46,0x7f,0xf0,0xc5,0x8c,0x86,0xf2,0x2a,0x3a,0x21,0x7e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMMT128-ENCRYPT-8", "[OFB][MMT][128][ENCRYPT][n8]") {
    const uint8_t KEY[] = { 0xcd,0xe9,0xb6,0x9e,0xea,0x2b,0x6a,0x55,0x88,0x45,0x7e,0x35,0xe0,0xa0,0x88,0x03 };
    const uint8_t IV[] = { 0x52,0x32,0x3b,0x54,0xd6,0x9a,0x62,0xfe,0xc0,0x68,0x9b,0xae,0xe1,0xb3,0xec,0x63 };
    const uint8_t PLAINTEXT[] = { 0x96,0x77,0x98,0x99,0x5a,0xf6,0xf4,0x35,0xb3,0xa6,0xf9,0x2b,0xff,0x77,0xa1,0x1f,0xa4,0x4d,0x14,0x26,0xae,0x0f,0x6e,0x7d,0xba,0xfa,0xc2,0x7b,0x12,0x3c,0x5f,0xc4,0x19,0xbe,0x52,0xc0,0xea,0x41,0x2c,0x4b,0x3c,0xac,0x05,0xae,0x89,0xa4,0xc0,0xce,0x6f,0x5e,0x91,0xa4,0x56,0xb1,0xbd,0xed,0x53,0x70,0xa1,0x23,0x4c,0xf6,0xf6,0xab,0x5d,0x02,0x53,0x50,0x7b,0xc6,0xf3,0xf0,0x57,0x3a,0xb9,0x75,0x85,0xb6,0x71,0x07,0xde,0xc0,0x59,0x81,0x23,0x23,0xe0,0x21,0xe3,0x41,0xad,0x83,0x9e,0xa9,0xe3,0xd0,0x2a,0xec,0xa4,0x33,0x56,0xad,0xd4,0x8c,0xce,0xf8,0x1f,0x69,0x3e,0xd5,0x3d,0x32,0xba,0x1c,0x74,0xa3,0x5e,0x8a,0x5f,0x7f,0x31,0x15,0xef,0x83,0x4f,0x7d,0xaf,0x99,0x48,0x24,0x4c,0x4f,0xc3,0x1f,0x54,0x87,0x67,0x8d,0x3e,0x70,0xfb,0x27,0xab,0xb5 };
    const uint8_t CIPHERTEXT[] = { 0x6a,0x57,0x47,0x27,0x60,0x37,0x64,0x3b,0xbd,0x00,0x13,0xc2,0x65,0xd8,0xd9,0xa8,0x0b,0x02,0x99,0xb2,0x83,0x51,0x4d,0x52,0x56,0xfe,0xcb,0x5c,0x78,0x70,0x02,0xa2,0x91,0xa1,0x8a,0x76,0x5f,0xa0,0x46,0xc3,0x24,0x34,0x18,0xb0,0x2e,0xeb,0xfc,0x0c,0x59,0x95,0x76,0xe5,0x2d,0xd8,0xc3,0x02,0x91,0xc9,0x7c,0xea,0xa8,0xbd,0x2d,0x7d,0xbe,0xe3,0xe6,0x6d,0xb7,0xb5,0x85,0xea,0x2b,0x67,0xf4,0x6f,0x67,0x11,0xdf,0x28,0x45,0x6b,0x80,0x15,0x56,0xe2,0x33,0xa9,0x6d,0xa1,0xa8,0xc3,0x4c,0xd4,0xd6,0x15,0x4b,0x20,0xf4,0x3a,0xe2,0x7b,0x8a,0xe8,0x3d,0x90,0x7f,0x93,0x55,0xc8,0x7a,0xa0,0x21,0xa2,0x80,0x23,0x22,0x65,0xe9,0x9b,0x4e,0x18,0x9f,0x4a,0x3c,0xca,0xa6,0xb5,0xe0,0x41,0x53,0x96,0x1e,0x8e,0x42,0x7a,0x2d,0xd5,0x3e,0x5e,0xc6,0xf5,0x11,0x2a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMMT128-ENCRYPT-9", "[OFB][MMT][128][ENCRYPT][n9]") {
    const uint8_t KEY[] = { 0x93,0x9a,0xac,0x71,0xe3,0x37,0x70,0x98,0x55,0x71,0x5a,0x57,0xe3,0xa4,0x64,0x8f };
    const uint8_t IV[] = { 0x49,0x35,0x09,0xb5,0x6a,0x92,0xf1,0x40,0x40,0xeb,0x9b,0x66,0xa1,0x88,0xbc,0x57 };
    const uint8_t PLAINTEXT[] = { 0x9c,0x22,0xef,0xdd,0xc7,0xde,0x49,0x6a,0x91,0x6d,0x15,0xd7,0x10,0xde,0x37,0x4d,0x57,0x47,0x81,0x26,0xed,0x64,0xc9,0xad,0x7e,0x82,0x3e,0x24,0xd1,0x9b,0xfc,0x0c,0xfa,0xc3,0xdd,0xa0,0xd1,0xc2,0x92,0xa3,0xa2,0x03,0xf3,0x5b,0x26,0xad,0x94,0xde,0xb2,0x0f,0x99,0x8c,0xaf,0x41,0xcb,0xdd,0x4a,0x08,0xeb,0x5d,0x6c,0xfb,0x46,0xf4,0xed,0xe4,0x89,0x6b,0x05,0x69,0xd7,0x2c,0x03,0xec,0x19,0x49,0x41,0xaf,0x95,0xc0,0x57,0x3c,0xc3,0xfe,0x8f,0x04,0x5b,0xa1,0x99,0x46,0xb3,0x82,0x80,0x32,0x48,0xf3,0xdd,0x4f,0x9a,0x45,0x4b,0x1a,0x3e,0x8e,0x1a,0xf0,0x2e,0xa8,0x48,0x2d,0x63,0x7d,0xac,0x96,0xa6,0x82,0x75,0xf4,0xa3,0x82,0xd3,0x02,0x3f,0x9d,0xf4,0x89,0x2b,0x90,0x32,0xca,0xb9,0x37,0x8b,0x1c,0xef,0x50,0x51,0xd6,0xdb,0x81,0x22,0x6f,0x25,0x9d,0x1b,0xe4,0xeb,0x23,0x49,0x5a,0xc8,0x07,0x60,0x05,0x36,0xb5,0xb0,0x48,0x17,0x54 };
    const uint8_t CIPHERTEXT[] = { 0x7c,0x02,0x17,0xd4,0xf9,0x90,0x34,0x2b,0xe5,0xa3,0x5e,0x2b,0xdd,0x47,0x56,0xae,0x7f,0x46,0x1a,0xdd,0x63,0x3a,0x7b,0x0f,0x51,0x74,0xee,0x10,0x7a,0x7c,0x0c,0x53,0xb1,0xc7,0x87,0xcb,0x83,0xe5,0xdd,0xb8,0x76,0xe2,0x51,0xa2,0x3c,0xaf,0x79,0x59,0xd9,0x52,0x63,0x8c,0x2a,0xa2,0x8b,0x2b,0x08,0x92,0x8c,0x9b,0x88,0xe4,0xc0,0xe0,0xfd,0x0d,0x81,0x54,0x69,0x0c,0x36,0x38,0xce,0x69,0x2f,0x20,0x90,0x5e,0x72,0x63,0xff,0x35,0x9b,0xcc,0x17,0xe3,0xb4,0x3d,0x22,0x76,0xef,0x1f,0xc4,0xc8,0x82,0x28,0x2f,0x9a,0x45,0x3b,0xc0,0x3e,0xb2,0x9e,0x9c,0x95,0x98,0x63,0x18,0xc1,0x91,0x50,0xac,0xf1,0xbf,0x33,0x27,0x07,0x52,0xd3,0x24,0x88,0x54,0x3f,0x59,0x8f,0x8e,0xd4,0xdb,0x3c,0xcb,0x99,0x0c,0x8b,0xfd,0xf6,0x4c,0xae,0x0d,0x1c,0x60,0x11,0x04,0x2a,0xcd,0xa8,0xc2,0x68,0x7a,0x75,0x8c,0x2b,0xa8,0x08,0x07,0x20,0x99,0x0b,0xe8,0x8d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMMT128-DECRYPT-0", "[OFB][MMT][128][DECRYPT][n0]") {
    const uint8_t KEY[] = { 0x83,0x68,0x18,0x9d,0x41,0xea,0xa2,0x0d,0x06,0xa3,0xa2,0xd2,0xa9,0x1e,0x43,0xf7 };
    const uint8_t IV[] = { 0xcf,0x04,0xac,0x0e,0x47,0x33,0x95,0x2b,0xa5,0x38,0x71,0x1f,0x79,0xee,0xf8,0xca };
    const uint8_t PLAINTEXT[] = { 0x69,0x6c,0xa5,0x73,0x39,0x84,0x0f,0xb3,0xc1,0x50,0xe0,0xc1,0x11,0xd9,0xe1,0x3e };
    const uint8_t CIPHERTEXT[] = { 0x7d,0xdd,0xa3,0x12,0x30,0x89,0x93,0xa5,0x8e,0x63,0x67,0x44,0xa0,0xa3,0x84,0x91 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMMT128-DECRYPT-1", "[OFB][MMT][128][DECRYPT][n1]") {
    const uint8_t KEY[] = { 0x51,0x24,0xc6,0xfd,0xb0,0x85,0x6d,0xed,0x76,0xaf,0xb6,0xfe,0xbd,0xaa,0x98,0x1e };
    const uint8_t IV[] = { 0x93,0x7e,0xbd,0xee,0xc3,0x79,0x68,0x5a,0x71,0xd4,0x66,0x70,0x3f,0x78,0x8f,0xf7 };
    const uint8_t PLAINTEXT[] = { 0x5a,0x59,0x28,0xdd,0x09,0xe7,0x8a,0x21,0x25,0x6e,0xad,0xb0,0x62,0x63,0x0a,0x3f,0x0b,0x47,0xca,0x23,0x76,0xcc,0xae,0x31,0x49,0x48,0x14,0x3f,0xff,0x25,0x12,0xd4 };
    const uint8_t CIPHERTEXT[] = { 0xb0,0x1c,0x0e,0x44,0x70,0xb2,0x0d,0x48,0x9f,0xb8,0x84,0x8b,0x20,0x93,0x12,0xbf,0x30,0x9f,0x79,0x2b,0x4a,0x7d,0xa4,0xa0,0x47,0xaa,0xe8,0xaf,0xca,0x56,0x8a,0x19 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMMT128-DECRYPT-2", "[OFB][MMT][128][DECRYPT][n2]") {
    const uint8_t KEY[] = { 0x6a,0x8f,0x64,0x87,0xe7,0x60,0x58,0xbc,0x5a,0x12,0x62,0x76,0xe4,0x8f,0xdd,0x77 };
    const uint8_t IV[] = { 0x6e,0x75,0xd8,0xb8,0xac,0x09,0x76,0x14,0x3e,0xa1,0x03,0xa7,0x10,0xca,0xec,0x02 };
    const uint8_t PLAINTEXT[] = { 0x42,0x4d,0xdc,0x34,0x30,0x67,0x61,0x2f,0xdb,0x42,0x69,0x20,0xf4,0x0a,0xb4,0xd8,0x2e,0x3d,0x4f,0x94,0x85,0xb0,0x7f,0xef,0x91,0x61,0x75,0x56,0xd3,0x09,0x38,0x74,0x84,0x0e,0x81,0x10,0xff,0x37,0x5b,0x7a,0x68,0xf9,0x8c,0x47,0x1c,0xa1,0x0a,0xcc };
    const uint8_t CIPHERTEXT[] = { 0x29,0xc3,0x60,0xfa,0xc9,0xb3,0x61,0xc4,0x49,0xe1,0x12,0x41,0x5e,0x3a,0x7a,0xef,0xe1,0x49,0xca,0xcb,0x2d,0x08,0xe2,0xc2,0xc9,0xf6,0x17,0x68,0x47,0x69,0x34,0xec,0x6b,0x26,0xbe,0x4c,0x90,0x2f,0x7d,0xc5,0x48,0xdc,0x37,0x8e,0x43,0x2d,0xbf,0xc5 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMMT128-DECRYPT-3", "[OFB][MMT][128][DECRYPT][n3]") {
    const uint8_t KEY[] = { 0x01,0x96,0x3d,0x44,0xae,0xa0,0x26,0xb2,0x20,0x52,0x38,0x45,0x4d,0x5b,0xb7,0x3f };
    const uint8_t IV[] = { 0x94,0x42,0xa6,0xe0,0xf3,0xa5,0x3f,0x10,0xb0,0xcc,0xf5,0xb0,0xcc,0xc1,0x79,0x3a };
    const uint8_t PLAINTEXT[] = { 0xc5,0x4c,0xfa,0xcd,0x95,0x37,0x36,0xa2,0xd8,0xdb,0x0b,0x8b,0x63,0xb5,0x55,0x25,0x3a,0x0c,0xa6,0xf6,0xe0,0x5f,0x2e,0x91,0x8d,0x18,0xbe,0x95,0x66,0x9f,0xa8,0x56,0x09,0xf8,0x27,0xd6,0xda,0x01,0x4a,0xdd,0x29,0x64,0x62,0x66,0x70,0xc2,0x02,0xb1,0x95,0x24,0x8f,0xc9,0x86,0x37,0x2c,0x92,0xad,0xbb,0x10,0xc0,0xe7,0xc3,0x6e,0x04 };
    const uint8_t CIPHERTEXT[] = { 0xa1,0x45,0x2e,0x63,0xa5,0x2f,0xd2,0x94,0x00,0x94,0x82,0x28,0x98,0x12,0x73,0x51,0x66,0x11,0x7f,0x54,0x27,0xa6,0x75,0x91,0x54,0xb8,0xb4,0xbe,0x55,0x61,0xf8,0x73,0xf2,0x96,0x73,0xeb,0x0a,0x0b,0x20,0x09,0x87,0x51,0x54,0x99,0x91,0x41,0x96,0xd9,0x02,0x9e,0xb0,0x37,0x1a,0xf6,0x06,0x5d,0x75,0xc9,0x27,0x6b,0x39,0xee,0xa2,0x83 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMMT128-DECRYPT-4", "[OFB][MMT][128][DECRYPT][n4]") {
    const uint8_t KEY[] = { 0x4e,0xa8,0x7b,0x0b,0x34,0x60,0x54,0xc0,0x97,0xed,0xc5,0x60,0x1b,0x78,0x28,0x70 };
    const uint8_t IV[] = { 0x9a,0x3e,0x23,0x33,0x3b,0x2b,0x2d,0xe7,0xec,0xee,0xa6,0x7a,0x7c,0xa9,0x76,0x41 };
    const uint8_t PLAINTEXT[] = { 0x0c,0x77,0x34,0x31,0x0c,0x5c,0xa8,0x2b,0x52,0x0b,0xf1,0xe0,0xa1,0x61,0x4c,0x7d,0xdd,0x0c,0x00,0x27,0x11,0xef,0x0b,0x23,0x9d,0xe8,0xfa,0x25,0x6e,0x15,0xb3,0x20,0x56,0xb9,0x92,0x74,0x7f,0xf3,0xa3,0xa3,0x10,0xd5,0x2e,0x9d,0xf3,0x62,0x75,0xd9,0x19,0x2d,0xad,0x61,0xca,0xa1,0x67,0x15,0x74,0x45,0x52,0xc8,0x65,0xc5,0xae,0x94,0x77,0xa7,0x0a,0x2c,0x3a,0x02,0xa0,0x1b,0xa1,0x76,0xb9,0x27,0x44,0x50,0x94,0xd2 };
    const uint8_t CIPHERTEXT[] = { 0x32,0x3d,0x22,0x53,0x51,0x15,0x45,0x30,0x2c,0x6f,0xb5,0xa5,0xbc,0x32,0x4d,0x74,0xca,0xd7,0x38,0x6a,0x02,0x25,0xaa,0x3f,0x49,0x3f,0xcd,0xbd,0x50,0xe1,0xff,0x24,0x69,0xe7,0x3a,0xce,0x9a,0x0f,0xd3,0x0f,0xf0,0xff,0x68,0x5f,0x16,0x8a,0x14,0xbb,0x26,0x2f,0xe4,0x48,0xbf,0xe2,0x8f,0x3a,0x58,0x10,0x61,0xf4,0xd4,0xdd,0x79,0x70,0x56,0xb0,0x34,0xe2,0x56,0xf1,0xe9,0x98,0xf5,0x11,0xd7,0x25,0x8d,0xcb,0x5b,0xbe };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMMT128-DECRYPT-5", "[OFB][MMT][128][DECRYPT][n5]") {
    const uint8_t KEY[] = { 0x19,0x56,0xf4,0x0b,0x23,0x34,0xa6,0x54,0x6b,0x30,0x71,0xf2,0xd1,0x7f,0x4a,0x59 };
    const uint8_t IV[] = { 0x76,0x5c,0xfb,0x56,0x0c,0x46,0x77,0x7a,0x20,0xcc,0xe0,0x91,0x23,0x2c,0xca,0xf2 };
    const uint8_t PLAINTEXT[] = { 0x04,0x5a,0xd6,0x6c,0x51,0x5d,0x40,0x7a,0xb7,0x3e,0xa0,0xc6,0xf6,0xae,0x86,0x98,0x72,0x34,0x2f,0xc7,0x29,0x56,0xa6,0x59,0x94,0x54,0x54,0x00,0x5e,0x37,0xc7,0x6e,0xd0,0x7d,0xf9,0x96,0xff,0xe1,0x32,0x28,0x40,0xcf,0x23,0x84,0x3b,0x34,0x34,0x6a,0x1e,0x73,0x0a,0xb7,0x21,0xdd,0xce,0xaf,0x36,0x2e,0xd2,0x56,0x05,0x4c,0x10,0x5e,0xd5,0x81,0xa8,0x0c,0x04,0xef,0x22,0xae,0x1b,0x5e,0xb8,0x74,0x2c,0x6e,0x3c,0x9c,0x0e,0x0e,0x29,0xfa,0xd2,0x11,0xb4,0xf4,0x0a,0xdc,0x15,0x20,0xf7,0xc6,0x82,0x1e };
    const uint8_t CIPHERTEXT[] = { 0xbd,0x21,0x90,0xe1,0xbf,0xa0,0xbe,0x94,0x30,0xf5,0x08,0x1e,0x9e,0xc5,0x8d,0xee,0x51,0x86,0xfb,0xcb,0x80,0xe5,0x60,0x5e,0xc4,0x64,0x3d,0xf1,0xcc,0x48,0xdd,0x76,0x53,0xb2,0xe4,0xcb,0x4f,0x0c,0x2b,0x3c,0x6b,0xa6,0xcb,0x4a,0xb8,0xa1,0x78,0xaa,0x9f,0x0d,0x11,0x91,0x1b,0x4e,0x74,0x2f,0x25,0xc4,0x97,0x79,0x6f,0xab,0xd5,0x2c,0x54,0x3f,0x85,0x0f,0x0f,0x24,0xd1,0x78,0x2c,0x06,0xc6,0x11,0x3d,0x7d,0xa7,0xdc,0xce,0x33,0x87,0x75,0x9b,0x48,0x16,0x98,0x00,0xf5,0xbc,0xe2,0xb0,0x70,0xe4,0xdc };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMMT128-DECRYPT-6", "[OFB][MMT][128][DECRYPT][n6]") {
    const uint8_t KEY[] = { 0x4e,0x47,0xe1,0xb5,0xc1,0xb4,0x89,0x29,0x5d,0x3a,0x2b,0xf0,0x49,0xf4,0xbe,0x2d };
    const uint8_t IV[] = { 0x83,0xfd,0xf0,0x64,0xd2,0x13,0xdf,0x41,0x7b,0xa0,0xe7,0x5e,0xc5,0x17,0xbf,0x63 };
    const uint8_t PLAINTEXT[] = { 0x94,0xa7,0xbe,0xd3,0xb5,0xa1,0x58,0xe8,0x5f,0x9e,0x47,0x78,0xa7,0xde,0x10,0x5f,0xf4,0xf3,0xb2,0xa6,0x1c,0x2f,0xea,0xd8,0x2c,0xbe,0x94,0x9d,0x7a,0x4e,0xe9,0x61,0xa6,0xc6,0x29,0x49,0xba,0x2c,0x69,0xd5,0x13,0xd8,0x36,0xa4,0x55,0xb6,0x12,0xc2,0xfb,0xb6,0xca,0x24,0x3a,0x0a,0x18,0xa8,0x53,0xca,0xdb,0x6b,0x73,0xb6,0x00,0x19,0x2d,0xe1,0xd5,0x1d,0xdf,0x80,0x03,0x07,0x18,0xb0,0x79,0xfb,0xb5,0x81,0x07,0x3a,0x06,0xb6,0x6b,0xa4,0xad,0x52,0x4d,0x3d,0x09,0xef,0xaa,0x59,0xe6,0x91,0x9b,0xca,0x15,0xb2,0xb9,0x2b,0xd9,0xf8,0xc1,0x7d,0x6e,0x46,0x3f,0x4e,0xa5,0xfd,0x5f,0x5e };
    const uint8_t CIPHERTEXT[] = { 0xaf,0xaf,0xf2,0xd1,0xec,0x65,0xcc,0x8e,0x17,0x00,0xe7,0xc1,0x33,0xc9,0x70,0xb1,0x00,0xd3,0x47,0x91,0x6f,0x96,0x0e,0x4a,0x58,0xda,0x81,0x7b,0x6f,0xd7,0x05,0xbe,0x75,0x9a,0x83,0x2e,0xab,0xaa,0x76,0x26,0x8c,0xec,0x43,0x4b,0xbb,0xc4,0xca,0xcc,0x3b,0x7d,0x3a,0xe8,0xde,0xeb,0x29,0xb1,0x00,0x4e,0xe4,0x10,0x74,0x7a,0x03,0x0a,0xbf,0x35,0x41,0x41,0x84,0xe1,0x8b,0xbe,0x40,0x5b,0x57,0xed,0x38,0x22,0x37,0xe9,0xaf,0xbc,0xae,0xfa,0x5b,0x55,0x42,0x5d,0x1a,0xaa,0xd2,0x43,0xe2,0x25,0x2a,0x1b,0xf6,0x49,0xd5,0x14,0x60,0x51,0x32,0xde,0x9b,0x14,0xcb,0xb1,0x90,0x2c,0xe1,0x91 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMMT128-DECRYPT-7", "[OFB][MMT][128][DECRYPT][n7]") {
    const uint8_t KEY[] = { 0x61,0x34,0x85,0xe5,0xbb,0x84,0xb9,0x1c,0xdd,0x0c,0xa0,0x2f,0x8d,0x83,0xe0,0xbb };
    const uint8_t IV[] = { 0xad,0x8a,0x75,0x64,0xf6,0xce,0x8a,0xbb,0x69,0x49,0xdd,0xb7,0xd7,0x18,0x65,0x80 };
    const uint8_t PLAINTEXT[] = { 0xed,0x50,0x68,0x00,0x31,0x63,0xc4,0x24,0xae,0x9a,0x8e,0x51,0xe3,0xd7,0x76,0x84,0xc6,0x90,0x73,0xa8,0x24,0xdc,0x47,0x21,0x56,0x8f,0x75,0x28,0x65,0x7c,0x3d,0xd2,0x8d,0x66,0x21,0x9f,0x39,0x8e,0xd5,0x71,0x05,0xaa,0x35,0xcf,0xef,0x3a,0xc0,0x78,0xea,0xb3,0x0a,0xe0,0xf3,0xed,0x75,0x2b,0x0e,0x32,0x0b,0x09,0x9e,0xa4,0x2b,0x15,0x6f,0x81,0x89,0x04,0xc4,0xb6,0xc5,0x34,0xca,0xbd,0xe5,0x3d,0xfa,0x62,0xe7,0xb7,0x45,0x18,0xa8,0xbc,0xa3,0xf3,0x6e,0xe8,0x5b,0x13,0x0e,0x85,0x20,0xd3,0x8c,0x00,0x6e,0x6a,0xde,0xf3,0x4b,0xbc,0x8d,0xf5,0x6b,0x75,0x7b,0x50,0x0d,0x70,0x3e,0x57,0x77,0xaa,0x54,0x5c,0x41,0x70,0x40,0x47,0x54,0xf0,0x3d,0xbf,0x22,0xc9,0xf0,0xd7 };
    const uint8_t CIPHERTEXT[] = { 0xa3,0x5e,0x2b,0xb8,0x64,0xd4,0xde,0xa2,0xdb,0x11,0x7e,0xf7,0x7f,0x7f,0x63,0xff,0x86,0x51,0x82,0x29,0xb2,0x08,0xe3,0xad,0x6e,0x3c,0x55,0x71,0x19,0x99,0x60,0x2a,0xa2,0x28,0x7b,0xc3,0x55,0xcf,0x7f,0x02,0xf4,0x1c,0x5c,0x69,0x0a,0x3e,0x0a,0x5a,0x7c,0x54,0xc3,0x7f,0x61,0xeb,0x70,0x69,0x13,0xc1,0x61,0x77,0x86,0xcf,0x40,0xfa,0xd9,0x87,0x48,0x96,0x2b,0x5b,0xb2,0xec,0xb0,0x7e,0x70,0x75,0x04,0xee,0x1e,0xb1,0xbf,0xb2,0x36,0x82,0x49,0x60,0x83,0xd2,0xf0,0xe3,0xd8,0x7c,0x37,0x7b,0x01,0x6a,0x71,0x05,0xfa,0xfb,0x8f,0x7d,0x5f,0xa7,0x37,0xc1,0x24,0xe5,0x16,0x98,0x86,0x4c,0x76,0xf2,0x41,0xf9,0x13,0x72,0x04,0x32,0x2a,0x29,0x22,0x48,0xd4,0xa5,0x8a,0xc2 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMMT128-DECRYPT-8", "[OFB][MMT][128][DECRYPT][n8]") {
    const uint8_t KEY[] = { 0x81,0x98,0xb3,0x6e,0x88,0x0c,0xf5,0x0d,0xbf,0x67,0x24,0xfe,0xaa,0xac,0x86,0x88 };
    const uint8_t IV[] = { 0xfb,0xaa,0x28,0x82,0xa2,0xa4,0xac,0xdb,0x29,0x9e,0x4f,0x82,0xc9,0x3f,0x2a,0xf7 };
    const uint8_t PLAINTEXT[] = { 0xb2,0x51,0x6a,0x35,0x6e,0x43,0x75,0x13,0xf0,0xdf,0x83,0x93,0x8a,0xfe,0xfb,0xe9,0xf9,0xef,0x1e,0xc8,0x79,0x79,0x79,0x97,0xf3,0x1d,0xa9,0x6a,0x1e,0xa7,0xa1,0x5d,0x39,0x5e,0xcd,0xb9,0x4b,0x7f,0xda,0x14,0xcd,0xc0,0xb7,0x5c,0x17,0x17,0x84,0xfa,0x88,0x32,0xd5,0x74,0xb6,0x4f,0x94,0x50,0xc6,0xbe,0x25,0xdc,0x83,0xb9,0x3d,0x3b,0xbf,0x01,0x45,0xa6,0x61,0xbf,0x4d,0xb7,0x75,0x28,0x2b,0x98,0x64,0x9b,0x64,0x61,0x3a,0xee,0xdb,0x8b,0xb7,0x70,0xf6,0x7c,0xc3,0x42,0x1a,0xc6,0x76,0x1e,0x5d,0x76,0x3c,0x21,0xac,0x2d,0x1e,0x72,0x9e,0x45,0x97,0xad,0x7f,0xca,0x9f,0xdc,0x70,0x87,0x8b,0x26,0x63,0x4d,0xf7,0x8c,0xd0,0xf3,0x6f,0xb3,0xb1,0x38,0xa1,0x35,0x79,0x15,0xab,0xba,0x4f,0xf5,0xf8,0xdf,0xae,0xf2,0x68,0x30,0x70,0x22,0xf2,0xe2,0x35,0x28 };
    const uint8_t CIPHERTEXT[] = { 0xaf,0x52,0x45,0xca,0x51,0xe5,0x5d,0x4d,0xa0,0xab,0x30,0xa3,0x76,0xe7,0x89,0xb7,0x1d,0x88,0x26,0xa0,0x63,0xf2,0x6b,0x80,0xf1,0x01,0x58,0xac,0xd8,0x4b,0xb9,0x0d,0x6d,0xa6,0x9c,0xc6,0x57,0xeb,0x08,0x16,0xe6,0xf9,0xec,0x80,0xa7,0xfc,0x56,0x2a,0x35,0xef,0xe5,0x84,0x51,0x5f,0x81,0x29,0x35,0x72,0x49,0x0a,0x26,0x29,0xcd,0xc9,0x49,0xe2,0x7e,0x63,0xb7,0x21,0x63,0x12,0xd3,0x8f,0x0d,0x72,0xdc,0x43,0xcc,0xe2,0xbe,0x41,0x23,0x2d,0x2e,0x40,0x7a,0x6a,0xf5,0xb1,0x13,0x20,0x8c,0xfc,0x3f,0xae,0xea,0x0d,0xd2,0xea,0x9a,0x0f,0xd4,0x09,0x10,0x77,0x79,0xbf,0x3d,0x45,0x53,0xa6,0x61,0x86,0xc7,0xe4,0x21,0x1e,0xbe,0x09,0xd9,0xc4,0x9c,0x36,0x33,0x4e,0x76,0x84,0xf9,0x2f,0x80,0xa3,0x27,0x3e,0xc4,0xc2,0x45,0xb9,0x1a,0xaf,0xf3,0x89,0x54,0x40 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMMT128-DECRYPT-9", "[OFB][MMT][128][DECRYPT][n9]") {
    const uint8_t KEY[] = { 0xe3,0x0b,0x4c,0x87,0x4c,0x4c,0x4f,0x6e,0x0c,0xf1,0xf8,0xef,0x58,0xe5,0xd3,0x75 };
    const uint8_t IV[] = { 0x7e,0x26,0xf0,0x7f,0x80,0x24,0x34,0x3c,0xec,0x35,0x40,0x9e,0x71,0xe0,0xcd,0x8c };
    const uint8_t PLAINTEXT[] = { 0x8c,0xec,0xa4,0xdc,0x34,0x6c,0xfd,0x6b,0x15,0x77,0x4e,0x08,0x2d,0xb1,0xa8,0x94,0x97,0xb7,0xd8,0x5d,0x6b,0x5b,0x71,0x02,0xe7,0x74,0x17,0xf7,0xa2,0x43,0xfa,0xfe,0x17,0x11,0x8b,0x7a,0x3b,0xb4,0x9d,0x16,0x57,0xcf,0x61,0xb8,0x66,0xda,0x39,0x5a,0x5b,0x3f,0x34,0x91,0x83,0xa5,0x3d,0xfa,0x11,0xfc,0x0a,0xc0,0x53,0xbd,0xdf,0xf4,0x9d,0xd4,0x72,0xee,0x55,0xf5,0xe4,0x3a,0x2f,0x8b,0xc7,0x85,0xe2,0xbc,0x42,0x03,0x00,0x69,0x49,0x19,0xff,0x7b,0xb4,0x3f,0xeb,0x75,0xa9,0xca,0xc4,0x4e,0xce,0x96,0xf6,0x79,0xe6,0x18,0xdb,0x5d,0x74,0x33,0xaf,0x12,0xdc,0xc7,0xe0,0x96,0x3f,0xf1,0x0b,0x45,0xd8,0x35,0xf9,0xa8,0xf4,0x26,0x27,0xe7,0xf3,0xfd,0x50,0x38,0x93,0x26,0x85,0x96,0x5a,0xd0,0xe1,0x83,0xf5,0x95,0x5e,0x67,0x1f,0xc2,0xb8,0x78,0xdd,0x51,0x05,0x1e,0xed,0xaf,0x85,0x31,0x0d,0x1e,0x4e,0x8f,0x75,0xf2,0xde,0xcf,0x36,0xc7 };
    const uint8_t CIPHERTEXT[] = { 0x5d,0xca,0xa1,0x73,0xed,0xe1,0x4f,0xd2,0xd6,0x58,0x97,0x39,0x26,0x16,0x8f,0xf3,0x4f,0xd6,0xdf,0x9b,0xce,0x32,0x80,0xd4,0x0b,0x00,0xc4,0x3b,0x80,0xe2,0x97,0x9a,0x1e,0x19,0x04,0x5f,0xec,0x9a,0xfb,0x4c,0xf2,0x64,0x51,0x6f,0x55,0x10,0x08,0x55,0xc3,0xaa,0xd1,0x7b,0x11,0xbf,0xcf,0x05,0x23,0xb7,0x9e,0xb2,0x0d,0x65,0x94,0x10,0x77,0xdd,0x46,0xec,0x46,0x86,0x4e,0x0d,0x79,0x70,0x4c,0x22,0x50,0xe7,0x2b,0xf8,0xb4,0x48,0xa6,0xf0,0xd3,0x13,0x0a,0xb1,0x0b,0x42,0x3d,0x1a,0x09,0xd9,0xff,0x7a,0x32,0xbf,0x70,0x04,0x41,0xcc,0xd2,0x7d,0x32,0x23,0x91,0x38,0x60,0xc2,0x80,0x44,0xea,0x57,0x66,0xe4,0x5a,0x55,0xb9,0x3f,0x89,0x48,0xa9,0x59,0xbd,0x66,0x61,0x42,0x15,0x66,0x89,0x8e,0x27,0x95,0x0f,0x04,0xe7,0x26,0x27,0x9b,0xcb,0xc9,0x90,0xa2,0x2c,0x80,0x19,0x3e,0xf0,0xae,0x65,0x19,0x66,0x71,0xeb,0x59,0x71,0x32,0x40,0xcf };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

