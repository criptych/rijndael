#include "rijndael.h"
#include "catch.hpp"
#include <cstring>

static inline std::string buf2str(const uint8_t *buf, size_t len) {
    std::ostringstream ss; ss << std::hex << std::setfill('0');
    for (size_t i = 0; i < len; ++i) {
        ss << std::setw(2) << static_cast<int>(buf[i]) << ' ';
    }
    return ss.str();
}

TEST_CASE("CFB128MMT128-ENCRYPT-0", "[CFB128][MMT][128][ENCRYPT][n0]") {
    const uint8_t KEY[] = { 0x08,0x5b,0x8a,0xf6,0x78,0x8f,0xa6,0xbc,0x1a,0x0b,0x47,0xdc,0xf5,0x0f,0xbd,0x35 };
    const uint8_t IV[] = { 0x58,0xcb,0x2b,0x12,0xbb,0x52,0xc6,0xf1,0x4b,0x56,0xda,0x92,0x10,0x52,0x48,0x64 };
    const uint8_t PLAINTEXT[] = { 0x4b,0x5a,0x87,0x22,0x60,0x29,0x33,0x12,0xee,0xa1,0xa5,0x70,0xfd,0x39,0xc7,0x88 };
    const uint8_t CIPHERTEXT[] = { 0xe9,0x2c,0x80,0xe0,0xcf,0xb6,0xd8,0xb1,0xc2,0x7f,0xd5,0x8b,0xc3,0x70,0x8b,0x16 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MMT128-ENCRYPT-1", "[CFB128][MMT][128][ENCRYPT][n1]") {
    const uint8_t KEY[] = { 0x70,0x1c,0xcc,0x4c,0x0e,0x36,0xe5,0x12,0xce,0x07,0x7f,0x5a,0xf6,0xcc,0xb9,0x57 };
    const uint8_t IV[] = { 0x53,0x37,0xdd,0xea,0xf8,0x9a,0x00,0xdd,0x4d,0x58,0xd8,0x60,0xde,0x96,0x84,0x69 };
    const uint8_t PLAINTEXT[] = { 0xcc,0x11,0x72,0xf2,0xf8,0x08,0x66,0xd0,0x76,0x8b,0x25,0xf7,0x0f,0xcf,0x63,0x61,0xaa,0xb7,0xc6,0x27,0xc8,0x48,0x8f,0x97,0x52,0x5d,0x7d,0x88,0x94,0x9b,0xee,0xea };
    const uint8_t CIPHERTEXT[] = { 0xcd,0xcf,0x09,0x3b,0xb7,0x84,0x0d,0xf2,0x25,0x68,0x3b,0x58,0xa4,0x79,0xb0,0x0d,0x5d,0xe5,0x55,0x3a,0x7e,0x85,0xea,0xe4,0xb7,0x0b,0xf4,0x6d,0xc7,0x29,0xdd,0x31 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MMT128-ENCRYPT-2", "[CFB128][MMT][128][ENCRYPT][n2]") {
    const uint8_t KEY[] = { 0x0a,0x8e,0x88,0x76,0xc9,0x6c,0xdd,0xf3,0x22,0x30,0x69,0x00,0x20,0x02,0xc9,0x9f };
    const uint8_t IV[] = { 0xb1,0x25,0xa2,0x0e,0xcd,0x79,0xe8,0xb5,0xae,0x91,0xaf,0x73,0x80,0x37,0xac,0xf7 };
    const uint8_t PLAINTEXT[] = { 0x4f,0xd0,0xec,0xac,0x65,0xbf,0xd3,0x21,0xc8,0x8e,0xbc,0xa0,0xda,0xea,0x35,0xd2,0xb0,0x61,0x20,0x5d,0x69,0x6a,0xab,0x08,0xbe,0xa6,0x83,0x20,0xdb,0x65,0x45,0x1a,0x6d,0x6c,0x36,0x79,0xfd,0xf6,0x33,0xf3,0x7c,0xf8,0xeb,0xcf,0x1f,0xa9,0x4b,0x91 };
    const uint8_t CIPHERTEXT[] = { 0xcd,0xd1,0xba,0x25,0x2b,0x2c,0x00,0x9f,0x34,0x55,0x1a,0x6a,0x20,0x06,0x02,0xd7,0x1f,0xfb,0xf1,0x3e,0x68,0x4a,0x5e,0x60,0x47,0x8c,0xdf,0x74,0xff,0xe6,0x1d,0xfd,0xed,0x34,0x4b,0xdc,0x7e,0x80,0x00,0xc3,0xb0,0xb6,0x75,0x52,0x91,0x7f,0x3e,0x4c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MMT128-ENCRYPT-3", "[CFB128][MMT][128][ENCRYPT][n3]") {
    const uint8_t KEY[] = { 0xb9,0xba,0x9f,0xa3,0x2c,0xc4,0x91,0xd8,0xac,0x2b,0xeb,0x5f,0x99,0x19,0x3d,0x57 };
    const uint8_t IV[] = { 0x95,0x51,0x14,0x52,0xb7,0x1e,0x53,0xe9,0x3a,0xfa,0xd0,0x7b,0xa1,0xaa,0x4d,0x98 };
    const uint8_t PLAINTEXT[] = { 0xb4,0x03,0x82,0x70,0x5a,0xae,0xea,0x41,0x09,0x7c,0x30,0x9d,0xa6,0xcd,0x06,0x01,0x0f,0x15,0xe0,0x9c,0x01,0x30,0xfa,0x4b,0x3a,0xf6,0x9c,0xc8,0xda,0x10,0x9d,0x1f,0x0f,0x0a,0x26,0x61,0xf1,0xa8,0xb8,0x9b,0xab,0x7e,0x70,0x09,0xdc,0xbb,0x8a,0x88,0x3d,0x46,0x25,0x4a,0x83,0x0c,0x45,0xcd,0x87,0x98,0x1e,0x0e,0xa4,0xe4,0x90,0xfa };
    const uint8_t CIPHERTEXT[] = { 0x80,0x0b,0xf8,0x84,0x0a,0x73,0xc9,0x27,0x9a,0x9c,0xdb,0x61,0x43,0x6f,0x8a,0xf2,0x0a,0xe1,0x7c,0x5a,0x9b,0x95,0xbf,0x25,0xe4,0x56,0xf4,0x8c,0xc3,0xcc,0x2f,0x9d,0xff,0xd8,0x6c,0x48,0x64,0x5f,0xa1,0x87,0xca,0xc5,0xbe,0xcd,0x05,0x8e,0x46,0x55,0x4a,0xe3,0xb4,0x82,0x5a,0x1e,0xf4,0x46,0x78,0x49,0xc9,0xd1,0x35,0x36,0xad,0xfc };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MMT128-ENCRYPT-4", "[CFB128][MMT][128][ENCRYPT][n4]") {
    const uint8_t KEY[] = { 0x59,0x47,0xbb,0xd7,0x8b,0x06,0xbb,0x5e,0xa2,0xfc,0x67,0xed,0x7b,0x24,0x21,0x6e };
    const uint8_t IV[] = { 0x8e,0x47,0x22,0xad,0x22,0x30,0xb1,0x5f,0x2e,0xea,0x30,0x21,0x73,0xbc,0x17,0x95 };
    const uint8_t PLAINTEXT[] = { 0x9e,0x69,0x42,0x36,0x53,0xc2,0x0c,0x98,0x27,0x94,0xed,0x35,0xd6,0x3c,0x1a,0x78,0xe8,0xac,0x14,0xf3,0x7e,0x18,0x88,0xae,0x4b,0xf2,0x73,0xbf,0xe1,0x19,0x89,0x1b,0x2e,0x4e,0xd8,0xac,0x46,0xe7,0xa9,0xa4,0x63,0xc7,0xa7,0x10,0x29,0x8d,0x43,0xb0,0x2f,0x0c,0x56,0x06,0xbc,0xfc,0x08,0xad,0xce,0xee,0xf2,0xec,0x61,0x86,0x7f,0x8b,0xed,0xe4,0x98,0xe5,0x31,0x63,0x80,0x3f,0x2f,0x86,0xfc,0x58,0x78,0x2f,0xb8,0x41 };
    const uint8_t CIPHERTEXT[] = { 0xb2,0x3f,0x0f,0xdf,0xc1,0x51,0x9c,0x40,0x8e,0xe7,0xa8,0xba,0x46,0xea,0x79,0xf2,0xcb,0xea,0x00,0x32,0x68,0x5a,0xf8,0x2f,0x76,0xa7,0xe2,0xb3,0x77,0x74,0x1a,0xaa,0x61,0x8e,0xf3,0x95,0x3e,0xdb,0xe3,0x9e,0x8d,0xf1,0xdd,0x28,0x3b,0x2e,0x54,0xa0,0xf1,0x32,0x7c,0xe3,0x32,0x18,0x8f,0x65,0x72,0x57,0x4c,0xe5,0x94,0x28,0x63,0x6f,0x3b,0x6e,0x37,0x05,0x4a,0x47,0x05,0xb0,0x2b,0xed,0xf3,0x77,0xe4,0x65,0xe5,0xf6 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MMT128-ENCRYPT-5", "[CFB128][MMT][128][ENCRYPT][n5]") {
    const uint8_t KEY[] = { 0xab,0xce,0x65,0x0e,0x78,0xf9,0x69,0xb3,0xb2,0x10,0x15,0x1c,0x74,0x11,0x7f,0xd2 };
    const uint8_t IV[] = { 0xbc,0x46,0x59,0xfb,0xb7,0x07,0x3c,0x1f,0x21,0x85,0xcd,0x8a,0xc5,0x31,0x4b,0xd1 };
    const uint8_t PLAINTEXT[] = { 0x32,0x2e,0xae,0x07,0xdf,0x5a,0xd2,0xdd,0xd6,0x4b,0xba,0x34,0xe4,0x2d,0x30,0xc1,0xb8,0x84,0xf8,0x42,0xe7,0x1e,0xfa,0x12,0x33,0x45,0xa3,0xfb,0x0c,0x39,0x88,0x4c,0x57,0xdd,0x4c,0x2c,0x6f,0xb0,0xc4,0x2e,0x69,0xff,0x5a,0x26,0x9d,0x59,0xaf,0x3a,0x61,0x44,0x85,0x3c,0x18,0x2e,0xdb,0x37,0x6c,0xa6,0x59,0x47,0xd7,0xcc,0xef,0xae,0x68,0x06,0xba,0x25,0xc4,0xf5,0x27,0x70,0x6b,0xa8,0x5a,0x35,0x3c,0x0f,0xd1,0x0e,0x3c,0xb2,0x44,0xdd,0x93,0xa2,0xd0,0x60,0xd7,0xb0,0x55,0x05,0x8d,0xde,0x1d,0xff };
    const uint8_t CIPHERTEXT[] = { 0x40,0xec,0x09,0x9d,0x74,0xb8,0x04,0xfe,0x5f,0xc3,0x81,0x0a,0xaa,0x6a,0x1f,0x66,0xc5,0xdd,0x88,0x27,0x11,0xb1,0xc9,0x5f,0x94,0x05,0xe4,0x3c,0xec,0xfe,0x14,0xa4,0x85,0x18,0xf1,0x07,0x7c,0x97,0xdb,0x0b,0x3f,0x69,0xd4,0xed,0x7a,0x6d,0x28,0x7f,0x2b,0x71,0xb1,0xcb,0xfe,0x62,0xb8,0x51,0xa3,0x43,0xd9,0x2f,0x50,0xb9,0x4e,0xaf,0x16,0xa6,0xc3,0x9d,0xf9,0x72,0xaf,0xa4,0xc2,0xe9,0xcd,0x3d,0x17,0x1f,0x62,0xb3,0xa2,0xca,0x69,0x9c,0x02,0x19,0xdb,0x8f,0xb4,0xae,0xfc,0x9a,0xea,0xfd,0x48,0x8c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MMT128-ENCRYPT-6", "[CFB128][MMT][128][ENCRYPT][n6]") {
    const uint8_t KEY[] = { 0x9f,0x56,0xe1,0x9b,0x09,0xdd,0x3f,0xee,0x0e,0x11,0x0f,0x71,0xe9,0x96,0x7b,0x7a };
    const uint8_t IV[] = { 0x11,0x55,0xcf,0x42,0x31,0xbf,0x7a,0xc5,0x5d,0x5e,0x6e,0xb2,0x7a,0x97,0x4f,0xad };
    const uint8_t PLAINTEXT[] = { 0xad,0x1e,0x4d,0x31,0x62,0xa5,0x08,0x4f,0x58,0x11,0x17,0x63,0x9a,0x13,0xfc,0x35,0xdf,0x54,0x49,0x62,0x5f,0xfe,0x0f,0x01,0xe5,0x7d,0x9a,0x87,0x26,0x87,0x5b,0xe8,0x51,0x59,0x26,0xff,0xe7,0x44,0x9e,0x30,0xcd,0x69,0xed,0x4c,0xa0,0xc1,0xb8,0xb4,0x48,0x60,0x51,0xc2,0xd0,0xfa,0x2f,0x64,0x74,0xa6,0x9c,0x0a,0xfc,0xe2,0xae,0xc3,0x49,0xd7,0x78,0xa2,0x2e,0xdf,0x81,0x67,0x81,0x45,0x76,0x5b,0x71,0x4c,0x1b,0x7c,0x19,0x72,0x87,0xda,0x56,0xf5,0x91,0x41,0xd6,0x97,0x86,0x18,0x72,0x9e,0x1d,0x89,0xbe,0x20,0xac,0xe3,0xde,0x7d,0x9b,0x3c,0x9b,0x2d,0x19,0x5a,0xb6,0xbc,0x0f,0xd4 };
    const uint8_t CIPHERTEXT[] = { 0xd9,0xf0,0xe1,0x25,0xfe,0x7f,0x82,0xb2,0x2d,0x8f,0x60,0x84,0x36,0x43,0x88,0xfb,0xa9,0x08,0x09,0x64,0x0b,0xd6,0xcb,0x63,0x31,0xfe,0x6e,0xb2,0xe4,0x58,0x6b,0x18,0xaf,0x5f,0x6b,0x58,0x9a,0xae,0xcc,0xd4,0x8e,0x66,0x39,0x2e,0x1b,0xdc,0xc7,0x33,0xe4,0xf2,0xec,0x3c,0x78,0x24,0xa7,0x73,0x23,0xc7,0x57,0xa1,0x47,0x50,0x0d,0x8a,0xac,0x31,0xd7,0xce,0xe4,0xbe,0x2d,0x06,0x3d,0xb7,0xf7,0x09,0xbd,0xb0,0xab,0xf6,0x3b,0x18,0x4b,0xaa,0x7f,0xf3,0x28,0x0e,0x28,0xfd,0x37,0x8e,0x4d,0x2f,0xa2,0x46,0x88,0xbf,0x3b,0xc4,0xab,0x5d,0x97,0x0c,0x88,0x72,0x8d,0xfb,0x2d,0x4d,0x61,0xc2 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MMT128-ENCRYPT-7", "[CFB128][MMT][128][ENCRYPT][n7]") {
    const uint8_t KEY[] = { 0x31,0xc4,0x85,0xc9,0x96,0xd6,0xce,0xb2,0xd1,0x7e,0x0a,0xa0,0x5b,0x24,0x90,0xe4 };
    const uint8_t IV[] = { 0x8c,0x37,0xf3,0x34,0x05,0x05,0x1b,0x4c,0x50,0xab,0xd1,0x6c,0x64,0x56,0x64,0x3e };
    const uint8_t PLAINTEXT[] = { 0xac,0x68,0xde,0x6a,0x2c,0x21,0x44,0xc6,0xb4,0xfd,0x97,0x5a,0x8d,0xec,0x93,0x44,0x73,0x91,0xe7,0xc9,0xa4,0xfd,0xe6,0x3d,0x36,0xbe,0x7f,0x23,0xad,0x18,0x6f,0x96,0xcd,0x92,0xb5,0xe8,0xad,0xb5,0x46,0x88,0x0d,0x10,0x03,0x29,0xe9,0x7f,0xe8,0x20,0x4f,0xad,0x86,0x0e,0x6d,0xd8,0xb3,0xc0,0xee,0xd4,0x80,0x53,0x87,0x53,0x6b,0x9c,0xcc,0x63,0xd6,0xc7,0x49,0x38,0xb8,0x3d,0xce,0x2c,0x93,0xcc,0x0a,0x04,0xa6,0x02,0x5b,0x75,0x63,0xd9,0xe5,0xe7,0x23,0x9a,0xe2,0x78,0x19,0xfb,0x38,0x44,0x84,0x8a,0x51,0xe4,0x29,0x4f,0x27,0x34,0x01,0xad,0x9e,0x59,0x2f,0x8a,0x17,0x03,0x34,0xb0,0x42,0xf0,0x66,0x72,0x33,0xb2,0x9f,0x92,0xb9,0xb1,0x32,0x62,0xeb,0x73,0x23,0x2a };
    const uint8_t CIPHERTEXT[] = { 0xbc,0xb3,0x70,0x30,0x07,0x5a,0xbb,0xc9,0x1a,0x75,0xa3,0x02,0xe5,0xaf,0xe7,0x28,0x1f,0x7f,0xd5,0x94,0xc7,0x4a,0x09,0x73,0x7a,0xe8,0x1f,0x50,0x57,0x3e,0xb1,0x44,0xc1,0xd6,0xc5,0x19,0x0e,0x10,0xa6,0x15,0x87,0x84,0x8f,0xef,0xe2,0xd3,0xb0,0xb3,0xc0,0x56,0x29,0xf7,0x8a,0x16,0x75,0x8e,0xaf,0x40,0x25,0x33,0x22,0xf3,0xf7,0xa8,0xd7,0x55,0x03,0x4b,0xe4,0x07,0xb2,0xaf,0x37,0x61,0xc3,0xe7,0x04,0x41,0x96,0x86,0x61,0x61,0x94,0x48,0x2c,0xca,0x5f,0x60,0x3b,0xe8,0x9a,0x1f,0x06,0xc7,0xa1,0x90,0x58,0x7c,0x2f,0x93,0x38,0xd4,0x8b,0xcd,0xa1,0x61,0x5c,0x42,0x57,0x72,0x8e,0xc3,0x4f,0x2c,0xe6,0xad,0x0b,0x58,0xa1,0x97,0x14,0x8e,0xd1,0x0e,0xde,0x6a,0x65,0x61 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MMT128-ENCRYPT-8", "[CFB128][MMT][128][ENCRYPT][n8]") {
    const uint8_t KEY[] = { 0x55,0x6c,0xcf,0xa3,0x60,0xec,0xb5,0x02,0x50,0x32,0xdd,0xdb,0x12,0x4c,0xad,0x4d };
    const uint8_t IV[] = { 0xd5,0x4c,0x6f,0xdc,0xc8,0x5d,0xc0,0xa2,0x8c,0x0b,0x06,0x20,0x5f,0xee,0x88,0x54 };
    const uint8_t PLAINTEXT[] = { 0x71,0xfb,0xf1,0x80,0xef,0xfa,0xc3,0xdc,0xa0,0xd6,0x9d,0x40,0xe4,0x01,0x7d,0xbe,0x50,0x45,0x53,0x96,0xf9,0xfb,0x65,0x07,0xef,0x7d,0xf2,0x65,0x07,0xde,0x15,0x6c,0xde,0xd8,0xed,0xd4,0x1a,0x05,0xfb,0x25,0xf3,0x52,0xcb,0xcd,0xf3,0xb2,0xd7,0x70,0xf9,0x0f,0xa8,0x7f,0x84,0x86,0x3e,0x0c,0x2e,0xd3,0xb2,0xdd,0x77,0x0a,0x1a,0xbf,0xc4,0x89,0xad,0x1c,0xa8,0x2a,0x28,0xd0,0x61,0xbd,0x70,0x39,0xa6,0xb5,0x78,0x8d,0xa0,0x21,0x65,0x71,0x36,0xde,0xf0,0xc7,0x8d,0x0b,0x0c,0xc7,0xcf,0xbe,0xc9,0x51,0x2c,0xf5,0x79,0x81,0x1f,0xd0,0x11,0x85,0xf3,0xfd,0xd2,0xab,0x85,0x73,0x28,0xbe,0x4b,0x63,0xd2,0x93,0x95,0x6b,0x43,0xdf,0x13,0x0e,0x48,0x4b,0x98,0x61,0xec,0xcb,0x1d,0x06,0x99,0x2b,0x09,0x5e,0x7f,0xeb,0xb0,0xfb,0x39,0x4c,0x19,0x54,0xae,0xab };
    const uint8_t CIPHERTEXT[] = { 0xe5,0x9b,0x83,0x1c,0xcc,0xd4,0xac,0xd9,0x4b,0xe7,0xa9,0xff,0xd3,0xcc,0x31,0x67,0xa9,0xb6,0xe0,0x85,0xbf,0xb9,0x76,0x50,0x0d,0x25,0xfd,0xfa,0x27,0x82,0xf8,0x9c,0x42,0x02,0x41,0x25,0x3f,0x1b,0x8e,0xbd,0xbb,0xcc,0xd1,0x84,0xd8,0x8a,0x9d,0xb0,0xda,0x2a,0xe1,0x92,0x71,0x37,0xd1,0xc2,0xb0,0x86,0x46,0xad,0x50,0x79,0x1a,0xb6,0x6f,0x7f,0x88,0xc3,0x65,0xd5,0x67,0xe8,0xa8,0xcb,0xdf,0x9a,0xaa,0xe5,0x3d,0x4e,0x4c,0xe9,0x64,0xf9,0xa1,0x4b,0xd3,0x0a,0x3c,0x7c,0xac,0x53,0xb2,0x45,0x44,0x3d,0xc1,0x66,0x28,0xd6,0x97,0xaf,0xe6,0x2e,0x0e,0xd8,0x3b,0xad,0x70,0x7a,0xd5,0x3f,0x64,0xa6,0x27,0xb5,0x2b,0xd6,0x6f,0xb2,0x94,0x84,0x87,0x69,0x19,0xe4,0x1f,0x87,0x76,0xe5,0x4c,0xc9,0x78,0x08,0x41,0x50,0x4f,0x8c,0x6b,0x48,0x1c,0xf1,0x12,0xb2 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MMT128-ENCRYPT-9", "[CFB128][MMT][128][ENCRYPT][n9]") {
    const uint8_t KEY[] = { 0x7c,0xb8,0x1f,0xc4,0xb2,0x03,0xb0,0xfa,0x9b,0xec,0x49,0x75,0x9b,0xd5,0x15,0xc2 };
    const uint8_t IV[] = { 0x4d,0x5e,0x2f,0xa3,0xbf,0x73,0xf4,0x88,0xb3,0xe7,0xe1,0x25,0xf0,0x3d,0xfb,0xbe };
    const uint8_t PLAINTEXT[] = { 0x36,0x27,0x89,0xb3,0x76,0xd8,0x5e,0xb8,0x18,0x1d,0x4e,0xee,0xa5,0x2d,0x42,0xe8,0x73,0xce,0x77,0x41,0xc1,0x1a,0x2f,0x82,0x03,0x83,0xa7,0x45,0x7b,0x15,0x48,0x9b,0x09,0xfb,0x21,0xac,0x44,0x45,0x95,0x9d,0xc9,0xe8,0x51,0xb7,0xd4,0x06,0x82,0xc5,0x0d,0x70,0x44,0xbd,0xa4,0x6a,0x5d,0xa3,0x9f,0xae,0x2b,0xab,0x73,0xb3,0xdb,0x9e,0xd2,0x2e,0xdc,0x7e,0xc5,0xda,0x93,0x6d,0xfa,0x74,0x51,0xcb,0x5f,0x0a,0x82,0x9f,0xf0,0x76,0x27,0x38,0xcc,0x26,0x86,0x14,0x8f,0x1e,0x1f,0x00,0xdc,0x3f,0xe3,0x81,0x39,0xc9,0xa1,0x73,0x20,0x1f,0xc1,0xf0,0x52,0xca,0x34,0x73,0x6f,0xc1,0xab,0x3d,0xc4,0xe7,0x07,0xf8,0x64,0xd6,0x11,0x9b,0x7a,0xdb,0x6c,0x8d,0xdd,0x41,0xc8,0x0d,0xe5,0xd3,0x57,0xd1,0x7e,0x9c,0x85,0xed,0x7a,0xf1,0xe4,0xf7,0x2c,0xb2,0x65,0x69,0x32,0xcc,0xce,0x46,0x92,0x02,0x68,0x01,0x09,0xee,0xf8,0x9a,0x9f,0x42,0xf1,0x0a };
    const uint8_t CIPHERTEXT[] = { 0xac,0x23,0x25,0x9f,0x68,0xd4,0xf8,0x26,0x04,0xca,0xbd,0x2e,0x42,0x37,0x82,0x1c,0x8b,0x6c,0x0a,0xad,0x0d,0xfb,0x11,0x20,0xb6,0xb0,0x57,0x22,0x3c,0x99,0x4d,0x62,0xb5,0xc6,0xf6,0x3a,0x25,0xed,0xbb,0x79,0x7c,0xd2,0x99,0xf8,0x1c,0xcb,0x86,0xd5,0x01,0x34,0xad,0x26,0x10,0x78,0x65,0x14,0x20,0x04,0xc2,0xd9,0xd5,0x2f,0xe3,0xf9,0x1a,0xcf,0x7b,0x9b,0x81,0x11,0xc8,0xb4,0xe1,0x4b,0x05,0xb1,0x73,0x73,0x0e,0x7b,0x81,0x20,0x36,0x02,0x98,0x46,0xf1,0xc1,0xc6,0xff,0xb3,0x0f,0x6a,0xbc,0xfc,0x3e,0x1e,0xa6,0x31,0x48,0x0e,0x0d,0x0b,0xda,0x10,0x6b,0xb8,0x73,0x19,0xfd,0xae,0x09,0xa1,0x1b,0x89,0xe8,0xdd,0xe6,0x25,0xd5,0x3a,0x19,0xc6,0x5a,0xe5,0x8f,0xbe,0x3f,0x4b,0xcb,0xc3,0xc9,0x9a,0xf0,0x5c,0xb0,0xa7,0xcc,0x4b,0x79,0x3d,0x8c,0xdb,0x1c,0xfa,0x31,0x73,0xed,0xe5,0x95,0xc8,0xc5,0x61,0xf9,0x2c,0x3f,0xe3,0x63,0x8b,0x8d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MMT128-DECRYPT-0", "[CFB128][MMT][128][DECRYPT][n0]") {
    const uint8_t KEY[] = { 0xbe,0xb6,0x22,0xd0,0x22,0x8c,0xde,0x29,0xb3,0x42,0xbb,0xcf,0x4c,0x1c,0x83,0xb4 };
    const uint8_t IV[] = { 0x75,0xc2,0x82,0xfa,0x58,0x1d,0x9c,0x67,0x1e,0xdf,0x5d,0x54,0x09,0x51,0xb6,0x80 };
    const uint8_t PLAINTEXT[] = { 0x86,0x04,0x76,0xc8,0x16,0x85,0xb5,0x8e,0x71,0xe2,0x59,0x9e,0xfe,0x08,0x3c,0xe5 };
    const uint8_t CIPHERTEXT[] = { 0xa5,0xdd,0x69,0xd9,0x41,0x12,0xf3,0xff,0xc2,0xf2,0x67,0xad,0xde,0x70,0xb9,0x96 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MMT128-DECRYPT-1", "[CFB128][MMT][128][DECRYPT][n1]") {
    const uint8_t KEY[] = { 0xc4,0x66,0x60,0x81,0xe0,0xb0,0xed,0xdb,0x10,0xa9,0xa6,0x07,0xc8,0x07,0x37,0x8f };
    const uint8_t IV[] = { 0x5f,0x23,0x62,0x32,0x88,0xe4,0xa4,0x1b,0x03,0x18,0x60,0x24,0x75,0x5a,0x10,0xea };
    const uint8_t PLAINTEXT[] = { 0x2f,0xd0,0x2d,0xab,0x90,0x54,0x24,0x80,0x73,0xeb,0xc0,0xb0,0x7a,0xed,0x38,0x37,0x56,0xcc,0xfa,0x4f,0xa6,0x29,0x87,0x22,0x77,0x5b,0xe6,0xa9,0xb4,0xed,0x27,0xa5 };
    const uint8_t CIPHERTEXT[] = { 0x71,0x38,0xc2,0xb6,0x91,0x91,0xcf,0x88,0x70,0x2f,0x7d,0x25,0xe9,0x17,0x0d,0xd6,0xef,0xfd,0xb8,0x04,0x16,0xb4,0x4f,0x4d,0x54,0xe8,0x1f,0xd7,0x09,0x0f,0x17,0xe4 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MMT128-DECRYPT-2", "[CFB128][MMT][128][DECRYPT][n2]") {
    const uint8_t KEY[] = { 0xdf,0x01,0x03,0x76,0xa6,0xb0,0x32,0x79,0x33,0x87,0x73,0xa7,0x0e,0x01,0x23,0x82 };
    const uint8_t IV[] = { 0x67,0x45,0x5d,0xec,0xec,0x54,0x93,0x65,0x74,0x25,0x25,0xd8,0xdb,0xf1,0xfe,0xd9 };
    const uint8_t PLAINTEXT[] = { 0x9b,0x9c,0x3d,0xea,0x55,0x3e,0xc2,0x35,0xdb,0x00,0x11,0xb2,0x71,0x91,0x54,0x41,0x71,0x84,0x5b,0x7b,0xdd,0xa0,0xdc,0x04,0xa0,0x89,0x58,0x39,0x59,0xbb,0xa5,0xab,0x70,0x48,0xf8,0xca,0x87,0xea,0xb0,0x73,0xa8,0xb8,0x24,0xfd,0xd4,0xe8,0x2e,0x40 };
    const uint8_t CIPHERTEXT[] = { 0xc8,0xbe,0xdc,0x6e,0x27,0x23,0x66,0xe4,0xc5,0x84,0xd2,0x36,0x4f,0xac,0x4e,0x29,0x80,0x35,0x9a,0xce,0x3a,0x4e,0xbc,0x62,0xd5,0xbc,0xf4,0x72,0xb7,0x1f,0xf2,0x42,0x24,0x77,0x47,0x70,0x58,0xe6,0x1a,0xd5,0xd3,0xb8,0x1c,0xac,0xf5,0xa0,0xbe,0xf6 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MMT128-DECRYPT-3", "[CFB128][MMT][128][DECRYPT][n3]") {
    const uint8_t KEY[] = { 0xff,0x01,0xaa,0x4f,0x71,0x06,0xc6,0xbd,0x24,0x39,0x90,0x76,0xf9,0x01,0xa5,0x30 };
    const uint8_t IV[] = { 0x08,0x9b,0x4f,0x60,0x54,0xee,0xee,0xf7,0x6d,0x4e,0x13,0xf7,0x5d,0xe6,0x4f,0x7e };
    const uint8_t PLAINTEXT[] = { 0xae,0x9c,0xb9,0xdf,0xa3,0x05,0xaf,0x83,0xe9,0x5a,0x3b,0x20,0x99,0xf7,0x09,0x07,0xed,0xcd,0x49,0xfb,0xc6,0xef,0xc5,0xeb,0xe7,0x44,0x18,0x4c,0x76,0xb4,0xf5,0x6b,0xf3,0x57,0x74,0xf3,0xfe,0x21,0x5e,0x1c,0x8e,0xe4,0x21,0x72,0xa2,0xdd,0x3e,0x6f,0x9c,0xcd,0x3d,0x9b,0xb0,0x44,0x32,0x5e,0x61,0xa6,0xbb,0x97,0xe4,0x8e,0x99,0x86 };
    const uint8_t CIPHERTEXT[] = { 0x22,0x83,0x77,0xc8,0xfa,0xe0,0xed,0xfa,0xe8,0xcc,0x43,0xe5,0xa0,0x7c,0xee,0xfa,0x5d,0x8f,0x1b,0x84,0xd3,0x38,0x42,0xe5,0x64,0x9e,0xfe,0x23,0x96,0x83,0x1c,0xa4,0xc5,0x24,0xf1,0x36,0x15,0x61,0xf1,0x53,0xab,0x1e,0x7e,0xa2,0x1d,0xe9,0xfe,0xc0,0x26,0xdd,0x30,0x41,0x9f,0xc6,0xc0,0xf2,0xaa,0x86,0x19,0x61,0x31,0xb7,0x7a,0xa0 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MMT128-DECRYPT-4", "[CFB128][MMT][128][DECRYPT][n4]") {
    const uint8_t KEY[] = { 0xd3,0x3d,0x40,0x62,0xab,0x32,0x29,0x8e,0xaf,0xcc,0xa8,0x6b,0x50,0x88,0xd5,0xfd };
    const uint8_t IV[] = { 0xfc,0xff,0xfc,0xe8,0xb0,0x20,0x24,0x0f,0x9f,0x69,0x4a,0xdc,0xb8,0xdd,0xf2,0x13 };
    const uint8_t PLAINTEXT[] = { 0x1f,0xe1,0x31,0x8a,0xdb,0x99,0xe6,0xd4,0xfc,0xed,0x29,0x29,0x02,0xfe,0x8c,0x83,0x1b,0xa4,0x88,0xa4,0x3f,0x85,0x96,0x4d,0x6f,0xf5,0x4b,0x32,0x26,0x63,0xb3,0x80,0xbc,0x99,0xfe,0xd1,0x55,0x68,0x27,0x8c,0xfe,0x1d,0x0a,0xf7,0x95,0xc7,0x13,0x55,0xbf,0x65,0xe8,0x76,0x85,0x57,0x63,0x65,0x5e,0xec,0x3a,0xbf,0x3d,0x4b,0x27,0xa0,0x34,0x1d,0x60,0x7f,0x4b,0xfb,0xd8,0x2c,0x89,0x00,0xfd,0x43,0x6f,0x7c,0x41,0x86 };
    const uint8_t CIPHERTEXT[] = { 0x20,0x8d,0x49,0x79,0x6f,0xed,0x81,0x0f,0x37,0x35,0x0b,0x85,0xd4,0x9c,0x57,0x5f,0x4d,0x64,0xac,0x97,0x3e,0x02,0xbd,0xe5,0x15,0x7f,0x7e,0x3d,0x81,0x1e,0x35,0x98,0x28,0x3f,0xd4,0xf7,0x99,0x83,0x86,0xa5,0x81,0x31,0x88,0xbd,0x21,0xd9,0x3a,0xed,0xff,0x37,0x76,0x79,0xdc,0x59,0x20,0x83,0xe7,0x04,0xfe,0x89,0x30,0x55,0xca,0x2f,0x5f,0xa4,0x86,0x3f,0xa6,0xad,0x10,0xee,0xf4,0xf2,0xf6,0x61,0x6c,0x5b,0x8b,0x6f };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MMT128-DECRYPT-5", "[CFB128][MMT][128][DECRYPT][n5]") {
    const uint8_t KEY[] = { 0x47,0xe1,0x35,0x44,0xa7,0xbb,0xf7,0x4d,0xd6,0x8a,0xb5,0xce,0x66,0xe5,0xbd,0xaa };
    const uint8_t IV[] = { 0x69,0x48,0x0b,0x4d,0xd3,0x8c,0xf3,0xb4,0x7e,0x2b,0x76,0x52,0x75,0x13,0x95,0xae };
    const uint8_t PLAINTEXT[] = { 0x3e,0x2e,0x58,0x3a,0x3a,0x03,0x89,0xca,0x32,0x4f,0x2a,0xaa,0x52,0xb7,0x82,0x39,0x04,0xab,0x28,0x8d,0xae,0x56,0x29,0x95,0xcf,0x1d,0x70,0xc7,0x96,0xd7,0x85,0xfd,0x36,0x12,0x61,0x43,0x4e,0xea,0x48,0x0c,0xeb,0x3d,0x36,0x9d,0x96,0x96,0x52,0xc7,0xff,0x19,0x49,0x31,0xc0,0xa9,0xbd,0x97,0x8f,0x5a,0xe4,0x09,0x4d,0x6e,0xf3,0x2d,0x98,0x6a,0x09,0x2c,0x58,0x0c,0xcb,0xf8,0x65,0xe5,0x09,0x5a,0x7b,0x80,0x55,0x9b,0xe1,0x3f,0x84,0x2f,0x9b,0xea,0x9e,0x42,0xa3,0xa0,0x1e,0xf8,0xa2,0x4a,0x65,0x26 };
    const uint8_t CIPHERTEXT[] = { 0x26,0xa7,0xb6,0x49,0xfd,0x84,0x35,0xc5,0xdd,0x29,0xba,0x16,0x83,0xae,0x0f,0xb5,0x15,0xeb,0xb6,0xe4,0x5c,0xdf,0xc4,0x36,0x2d,0x53,0xf3,0x51,0x28,0xba,0xf2,0xf3,0xa6,0x5c,0xff,0x33,0xec,0xb3,0xb8,0x0a,0xa5,0x15,0x2e,0x11,0x8f,0x94,0x3c,0x8c,0x74,0x23,0x17,0xa8,0x5c,0xfa,0x25,0x01,0x01,0x3b,0x13,0x67,0x83,0xd5,0x22,0xe2,0x5d,0xa8,0xc1,0xf3,0x98,0xeb,0x61,0x1d,0x3e,0xcb,0x85,0xa4,0x12,0x55,0x18,0x95,0x7e,0x96,0x04,0x06,0xcd,0x01,0x00,0x9f,0x9a,0x11,0xa9,0x5a,0x88,0x2f,0xd5,0x86 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MMT128-DECRYPT-6", "[CFB128][MMT][128][DECRYPT][n6]") {
    const uint8_t KEY[] = { 0xae,0x86,0x82,0x36,0x95,0xb4,0x8e,0x8c,0x61,0x2a,0xe5,0xa0,0x1b,0x59,0x7f,0x97 };
    const uint8_t IV[] = { 0xb2,0x6e,0xef,0x7b,0x1d,0x14,0x89,0x4c,0x0c,0x63,0x88,0xce,0x52,0x73,0xf4,0xf2 };
    const uint8_t PLAINTEXT[] = { 0x56,0x9a,0x91,0x0b,0xc6,0xaa,0x97,0xb8,0x93,0x9c,0xa7,0x03,0xfc,0x10,0xce,0x0d,0x17,0x16,0x25,0xbc,0x73,0x5a,0x1f,0xea,0x71,0x48,0x65,0x05,0x41,0x10,0x9d,0x95,0x5b,0x1b,0x68,0x6c,0x6c,0xc4,0x04,0xb2,0xd3,0xd9,0x2a,0xd9,0xfa,0xaf,0xf2,0x17,0xdc,0x7b,0x31,0xb0,0x38,0xb7,0x70,0x95,0x9a,0xec,0xcd,0x1c,0xa5,0x5d,0x65,0x03,0x64,0xfd,0xe5,0x1d,0xf8,0xd4,0xf0,0xae,0xb0,0x5f,0xa3,0x64,0xf5,0x02,0x8f,0x70,0x9c,0x17,0x9c,0xa6,0xdf,0x0b,0xdf,0xc1,0xcb,0x85,0x0f,0x23,0x8d,0x75,0x5a,0xc4,0x4a,0x73,0x3f,0xce,0x55,0x84,0x02,0xbe,0x0c,0x70,0xbc,0x08,0x71,0xb8,0xe6,0x2f };
    const uint8_t CIPHERTEXT[] = { 0x34,0xa2,0x64,0x2a,0x23,0x0a,0xd0,0x3d,0x2c,0x68,0x8c,0xca,0x80,0xba,0xea,0xee,0x9a,0x20,0xe1,0xd4,0xc5,0x48,0xb1,0xce,0xde,0x29,0xc6,0xa4,0x5b,0xf4,0xdf,0x2c,0x8c,0x47,0x6f,0x1a,0x21,0xa4,0x43,0x1a,0xed,0x23,0x66,0x1c,0xe9,0x63,0x42,0xef,0x7c,0xc6,0x07,0x12,0xf9,0xde,0x51,0xc7,0x6a,0x22,0x05,0x68,0x8c,0xe6,0x7b,0xfe,0x1a,0x8a,0xe3,0x10,0x4e,0xf1,0xe1,0xb9,0xa6,0x34,0x7b,0xfd,0xe4,0x98,0x35,0x5d,0x58,0xbe,0x7a,0xa9,0x61,0x1a,0x3e,0x16,0x32,0xa6,0xe2,0x91,0xd2,0xd8,0x58,0x52,0x66,0xd1,0x87,0xb3,0xb3,0xd7,0xf1,0x43,0xdf,0x05,0x93,0x16,0x77,0x41,0x0c,0x60 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MMT128-DECRYPT-7", "[CFB128][MMT][128][DECRYPT][n7]") {
    const uint8_t KEY[] = { 0xb8,0x5d,0xf2,0x9c,0x92,0x44,0x22,0x98,0x35,0xd7,0x34,0x41,0xdc,0x37,0x55,0x5e };
    const uint8_t IV[] = { 0xc1,0x37,0x54,0x30,0xef,0xed,0xb2,0xd3,0x11,0xa3,0x7b,0xfa,0x5a,0xd2,0x11,0x0e };
    const uint8_t PLAINTEXT[] = { 0xc2,0x32,0xa0,0xbb,0xf9,0x67,0xef,0x28,0xb7,0x4e,0x7b,0x80,0x9c,0x62,0xbc,0x8c,0x1c,0xf2,0xd5,0x2a,0x27,0x3a,0x84,0x16,0x29,0x00,0xda,0x83,0x44,0x48,0xfd,0x56,0x78,0x70,0x47,0x14,0x98,0xf2,0x97,0x70,0x61,0x9d,0xec,0x50,0x49,0x22,0xe3,0x79,0xea,0xba,0x0d,0x3a,0x71,0x26,0x02,0x58,0x3d,0x00,0x27,0x9d,0x8f,0xc6,0xa6,0xd5,0x68,0xcb,0x94,0xa3,0x30,0x03,0x9a,0x18,0x9e,0xd5,0x80,0x2a,0xbb,0x7a,0x28,0x98,0xc1,0x3e,0xf8,0x9c,0x00,0xd7,0x3f,0xca,0x9a,0x2f,0x2f,0xfc,0x21,0x07,0xab,0x49,0x82,0x12,0xc5,0x68,0x35,0xc0,0xfc,0x26,0xf8,0x35,0xa6,0x9c,0x00,0xbb,0x3e,0xaa,0x69,0x5a,0xc2,0x0e,0x8b,0xdb,0x0f,0x5b,0x5b,0x66,0x84,0xd0,0x2b,0xee,0x8f,0xb2 };
    const uint8_t CIPHERTEXT[] = { 0x2a,0x0e,0xa6,0x82,0xb6,0xb2,0x21,0x22,0xe8,0x28,0xe2,0xb6,0xe1,0x57,0x43,0x03,0xe7,0xc1,0xd3,0x2f,0x15,0x63,0xa6,0xc7,0x51,0xdc,0xf0,0x07,0x7f,0xd2,0xd2,0x55,0xf4,0x92,0x74,0x0e,0x2e,0xf6,0x54,0x85,0xc2,0x8c,0xde,0x49,0x95,0xf4,0x3c,0xa7,0x4f,0x8a,0x6f,0x70,0x0d,0x46,0x9f,0xfd,0x57,0xe0,0xaf,0x6f,0x51,0x37,0x15,0x3b,0x35,0xf3,0xe9,0xe7,0x00,0x69,0x3b,0x0e,0x6c,0xc0,0xaa,0xaa,0x1f,0x52,0x32,0x93,0x22,0x55,0x46,0x42,0x94,0xbb,0x1f,0xdb,0xa0,0x56,0x53,0x6b,0xac,0x40,0xa9,0x6d,0xd3,0x7a,0x2c,0x94,0x96,0xd3,0x7e,0xc4,0xce,0x0c,0x6f,0x61,0xe5,0x39,0xce,0xcd,0x46,0x6a,0x80,0x2c,0x12,0x8b,0xce,0x6b,0x15,0x89,0x03,0x80,0xf8,0xb7,0x37,0xf3 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MMT128-DECRYPT-8", "[CFB128][MMT][128][DECRYPT][n8]") {
    const uint8_t KEY[] = { 0xe9,0x67,0x71,0xf5,0xf2,0x0a,0x89,0xee,0x87,0x12,0x61,0xd2,0xd1,0x8e,0x1e,0x46 };
    const uint8_t IV[] = { 0x8c,0x66,0x4a,0x37,0xd2,0x45,0xd2,0x6c,0x0c,0x55,0xad,0xfb,0x42,0x47,0x58,0xba };
    const uint8_t PLAINTEXT[] = { 0x8a,0xaa,0xfd,0x56,0xc5,0xd5,0xd5,0x4f,0xbe,0x16,0xf1,0x15,0xc3,0x21,0x6b,0xd1,0xf4,0x37,0x66,0x66,0x93,0x1a,0x2e,0xf1,0xff,0xc5,0x46,0x8a,0xd1,0x21,0x50,0xc3,0x92,0x50,0xdc,0xa2,0xd6,0x3c,0x6e,0xa1,0x66,0xbb,0x0e,0xf4,0xaa,0xa3,0xd5,0x84,0x9c,0x1f,0x9c,0x62,0x1c,0x55,0x82,0x6a,0x1c,0xa3,0x62,0xf0,0x3b,0xcb,0xa4,0xdc,0xbd,0x65,0x4b,0x30,0x0d,0x16,0x51,0x97,0x10,0x13,0x0e,0x53,0x60,0xbd,0x94,0x9a,0xad,0xed,0x6a,0x64,0x8f,0x96,0xdd,0x89,0x37,0xa7,0x72,0x87,0xd4,0xa4,0xac,0x29,0x41,0x72,0x94,0x75,0xb6,0x35,0xb9,0x79,0x74,0x76,0xb4,0xdc,0xa4,0x17,0x17,0x87,0xff,0x15,0x88,0x2d,0x3b,0x48,0x72,0xed,0x09,0x99,0xa7,0x54,0x6d,0xbb,0x61,0x69,0x8e,0x83,0x48,0xf7,0x0e,0x4a,0x14,0x98,0x1a,0x78,0x15,0x61,0x50,0x48,0x45,0x32 };
    const uint8_t CIPHERTEXT[] = { 0x40,0x0c,0x6d,0x6b,0xbf,0xd0,0xa6,0x76,0xbc,0xb8,0x8d,0x20,0xe4,0x11,0x51,0xab,0xfe,0xd5,0x0e,0x95,0x1e,0x18,0x9e,0x1d,0x1b,0xa2,0xb3,0x02,0x44,0xde,0x22,0x8e,0x4f,0xf3,0x82,0xd3,0x92,0x30,0xf6,0x35,0x76,0xad,0x47,0x28,0x28,0x2f,0x36,0x3b,0x91,0x4d,0x10,0x56,0x89,0xd1,0x82,0x3f,0x47,0x61,0xaf,0x63,0x1c,0x5f,0x80,0xd4,0x62,0x0d,0x3b,0x8e,0xaf,0xf5,0x58,0xfe,0x4e,0x88,0x90,0xc5,0xef,0x05,0x36,0xb9,0x9d,0x9c,0xca,0x2c,0xf1,0xd4,0xcc,0x72,0x85,0x2a,0xce,0x9d,0xac,0xfa,0xcd,0x8b,0x60,0xa3,0xc1,0x23,0x7c,0xe7,0x73,0xdb,0x2c,0x90,0x8f,0x7d,0xa1,0x59,0xfa,0x2c,0x09,0x0b,0x65,0xa2,0xbe,0xe7,0x23,0xbb,0xbd,0x44,0x37,0x37,0x5b,0x79,0xb2,0xbb,0x33,0xfd,0x3c,0x1a,0x63,0xcd,0xf0,0xd3,0xf8,0x0e,0x6d,0xdb,0xa6,0xf4,0x29,0x9c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MMT128-DECRYPT-9", "[CFB128][MMT][128][DECRYPT][n9]") {
    const uint8_t KEY[] = { 0xae,0xf4,0x9d,0xa3,0x3f,0x53,0x8e,0xe6,0x6e,0x17,0x8d,0x4b,0x61,0x21,0x05,0x5d };
    const uint8_t IV[] = { 0x84,0x25,0x66,0xe6,0x8b,0x61,0xff,0x7b,0xf0,0x01,0xf2,0x64,0x2d,0xa6,0x2f,0x64 };
    const uint8_t PLAINTEXT[] = { 0x41,0x59,0x91,0xf6,0x5e,0x1a,0x95,0x04,0x0c,0xef,0x99,0x60,0x55,0x6f,0x61,0xe6,0x17,0x82,0x7c,0x30,0xc7,0x4b,0xf3,0x53,0xcd,0xd8,0x61,0x73,0xdb,0xe4,0xcc,0x98,0x3a,0x2e,0xe6,0xbc,0x8c,0xa6,0xcf,0xb7,0x11,0x21,0xe7,0xb0,0xd0,0x17,0x8f,0x2e,0x13,0x44,0x5c,0x71,0x0d,0xcc,0x17,0x6b,0x78,0x12,0x01,0x97,0x11,0x71,0xf7,0x48,0x9f,0x18,0xfa,0xf1,0x10,0xf3,0x9a,0xcc,0xd1,0xcf,0x08,0xc8,0x5a,0x95,0x8d,0x76,0x98,0xb1,0x16,0xf1,0xc0,0xd7,0x58,0x12,0xac,0x9b,0x0b,0x39,0xae,0xe7,0xf7,0x15,0x9c,0xca,0xd8,0xfd,0xae,0x9b,0x99,0xf2,0xd6,0x95,0xea,0xcf,0x12,0xc6,0x46,0x9d,0x5b,0x51,0xa3,0x4d,0xe2,0x6e,0xac,0x73,0x61,0x3d,0xcb,0x2f,0x77,0x12,0x2c,0xb1,0xf8,0xdd,0x51,0x62,0x78,0x6a,0x12,0x05,0x2d,0xc7,0xb6,0xde,0xa6,0xac,0xc4,0x98,0x9d,0xcc,0x7e,0xaf,0xd9,0x37,0x4f,0x6c,0x29,0x69,0x7c,0x74,0x74,0x9e,0xf1,0x6d };
    const uint8_t CIPHERTEXT[] = { 0x66,0x25,0x81,0x14,0x19,0xbd,0xee,0x71,0x53,0x5f,0x59,0x7f,0x7c,0x22,0x8b,0xaf,0xd8,0x90,0xfd,0x69,0xb8,0x05,0xa6,0x99,0xed,0x58,0x11,0x6a,0x82,0xbd,0xb2,0x51,0xab,0xea,0x7a,0x4e,0xf8,0x79,0xa9,0x6f,0xce,0x8e,0xe4,0x95,0x18,0xb9,0x87,0x7a,0x3a,0x1e,0x3c,0xf3,0x46,0xd3,0xcd,0x73,0x73,0x89,0x36,0xd1,0xcb,0x6f,0xff,0x4b,0x23,0x53,0xc8,0xca,0x50,0x0a,0x26,0x68,0x98,0x13,0xad,0x2f,0x67,0x77,0x4e,0x23,0x43,0xf3,0xe4,0x83,0x02,0x59,0x09,0x4d,0x3b,0x34,0x2e,0x00,0xfa,0xab,0xeb,0xa5,0xb8,0xa8,0x93,0x10,0x8a,0x39,0x0c,0x64,0x98,0x36,0xdd,0xd5,0xd1,0x24,0x89,0xb2,0xdd,0x59,0x1c,0xa2,0x53,0x61,0x03,0x2e,0x2d,0xa1,0x20,0x7f,0x79,0x3a,0x1e,0x69,0x51,0x30,0x02,0xa9,0x0c,0xcc,0x03,0x6b,0xb6,0x3e,0x9c,0x10,0xbe,0x87,0xdf,0x2d,0xef,0x96,0x0c,0xd7,0xa1,0xb1,0x62,0x1e,0x31,0x17,0x35,0xd7,0xae,0xe4,0x41,0x9f };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

