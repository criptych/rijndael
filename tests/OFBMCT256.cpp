#include "rijndael.h"
#include "catch.hpp"
#include <cstring>

static inline std::string buf2str(const uint8_t *buf, size_t len) {
    std::ostringstream ss; ss << std::hex << std::setfill('0');
    for (size_t i = 0; i < len; ++i) {
        ss << std::setw(2) << static_cast<int>(buf[i]) << ' ';
    }
    return ss.str();
}

TEST_CASE("OFBMCT256-ENCRYPT-0", "[OFB][MCT][256][ENCRYPT][n0]") {
    const uint8_t KEY[] = { 0xb4,0x61,0x29,0x97,0x6d,0x3f,0xb9,0xa8,0x3b,0x10,0xd3,0xf6,0xbb,0x92,0x8a,0x5b,0x2e,0x8f,0xd0,0x0e,0xc1,0x0f,0xdf,0x75,0x13,0xcc,0xd8,0x3a,0xf1,0xe6,0xaa,0xa1 };
    const uint8_t IV[] = { 0x39,0xc6,0xa3,0xab,0x26,0xae,0x17,0x09,0x21,0xc5,0x03,0xfc,0x62,0xec,0x0b,0xa9 };
    const uint8_t PLAINTEXT[] = { 0x7a,0x64,0x4b,0x53,0xef,0x2c,0xb6,0x07,0x32,0x8c,0x63,0xdd,0x61,0x32,0x15,0x15 };
    const uint8_t CIPHERTEXT[] = { 0x0e,0x86,0x52,0x52,0x91,0x7d,0x7a,0x10,0x54,0x74,0x80,0x98,0x8f,0xe3,0xf8,0x0e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-1", "[OFB][MCT][256][ENCRYPT][n1]") {
    const uint8_t KEY[] = { 0x93,0x36,0xd1,0xd8,0x4a,0x26,0xbf,0x77,0xc8,0x66,0xb7,0x52,0x6f,0xd3,0x60,0x7a,0x20,0x09,0x82,0x5c,0x50,0x72,0xa5,0x65,0x47,0xb8,0x58,0xa2,0x7e,0x05,0x52,0xaf };
    const uint8_t IV[] = { 0x0e,0x86,0x52,0x52,0x91,0x7d,0x7a,0x10,0x54,0x74,0x80,0x98,0x8f,0xe3,0xf8,0x0e };
    const uint8_t PLAINTEXT[] = { 0x27,0x57,0xf8,0x4f,0x27,0x19,0x06,0xdf,0xf3,0x76,0x64,0xa4,0xd4,0x41,0xea,0x21 };
    const uint8_t CIPHERTEXT[] = { 0xc4,0xc1,0x3f,0x49,0x86,0x0e,0x42,0x7b,0xd1,0x2a,0xf7,0xf2,0x27,0x1a,0x0f,0x20 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-2", "[OFB][MCT][256][ENCRYPT][n2]") {
    const uint8_t KEY[] = { 0x8f,0x5b,0xca,0x03,0xaa,0x76,0x72,0xbd,0xa8,0x13,0x18,0x7e,0x66,0xb1,0x3f,0x79,0xe4,0xc8,0xbd,0x15,0xd6,0x7c,0xe7,0x1e,0x96,0x92,0xaf,0x50,0x59,0x1f,0x5d,0x8f };
    const uint8_t IV[] = { 0xc4,0xc1,0x3f,0x49,0x86,0x0e,0x42,0x7b,0xd1,0x2a,0xf7,0xf2,0x27,0x1a,0x0f,0x20 };
    const uint8_t PLAINTEXT[] = { 0x1c,0x6d,0x1b,0xdb,0xe0,0x50,0xcd,0xca,0x60,0x75,0xaf,0x2c,0x09,0x62,0x5f,0x03 };
    const uint8_t CIPHERTEXT[] = { 0x27,0x9b,0xb2,0x8c,0x13,0x91,0x20,0x3d,0xd1,0xd0,0x5e,0x7c,0xd9,0x28,0x00,0x15 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-3", "[OFB][MCT][256][ENCRYPT][n3]") {
    const uint8_t KEY[] = { 0xef,0x39,0xeb,0x2f,0xe7,0x8d,0xed,0xae,0xf0,0x95,0x0f,0xb8,0x51,0xc1,0x03,0xef,0xc3,0x53,0x0f,0x99,0xc5,0xed,0xc7,0x23,0x47,0x42,0xf1,0x2c,0x80,0x37,0x5d,0x9a };
    const uint8_t IV[] = { 0x27,0x9b,0xb2,0x8c,0x13,0x91,0x20,0x3d,0xd1,0xd0,0x5e,0x7c,0xd9,0x28,0x00,0x15 };
    const uint8_t PLAINTEXT[] = { 0x60,0x62,0x21,0x2c,0x4d,0xfb,0x9f,0x13,0x58,0x86,0x17,0xc6,0x37,0x70,0x3c,0x96 };
    const uint8_t CIPHERTEXT[] = { 0x2c,0xc5,0x0d,0x62,0xe9,0xde,0x13,0x1a,0x43,0x08,0x0b,0x88,0xb0,0x28,0x9d,0xa8 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-4", "[OFB][MCT][256][ENCRYPT][n4]") {
    const uint8_t KEY[] = { 0xf6,0x5b,0x44,0x9a,0xc1,0xb7,0x86,0xb2,0x55,0xfb,0xb7,0x8a,0x75,0xba,0x3a,0xcc,0xef,0x96,0x02,0xfb,0x2c,0x33,0xd4,0x39,0x04,0x4a,0xfa,0xa4,0x30,0x1f,0xc0,0x32 };
    const uint8_t IV[] = { 0x2c,0xc5,0x0d,0x62,0xe9,0xde,0x13,0x1a,0x43,0x08,0x0b,0x88,0xb0,0x28,0x9d,0xa8 };
    const uint8_t PLAINTEXT[] = { 0x19,0x62,0xaf,0xb5,0x26,0x3a,0x6b,0x1c,0xa5,0x6e,0xb8,0x32,0x24,0x7b,0x39,0x23 };
    const uint8_t CIPHERTEXT[] = { 0x72,0xd4,0xae,0x84,0xc5,0xbd,0x29,0x00,0x7b,0x19,0x03,0x64,0x6d,0x79,0xcb,0xe2 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-5", "[OFB][MCT][256][ENCRYPT][n5]") {
    const uint8_t KEY[] = { 0x76,0xdf,0x20,0x7b,0x7a,0xf7,0xf6,0xbc,0x47,0x3e,0xba,0xd8,0x85,0xdf,0x28,0x9e,0x9d,0x42,0xac,0x7f,0xe9,0x8e,0xfd,0x39,0x7f,0x53,0xf9,0xc0,0x5d,0x66,0x0b,0xd0 };
    const uint8_t IV[] = { 0x72,0xd4,0xae,0x84,0xc5,0xbd,0x29,0x00,0x7b,0x19,0x03,0x64,0x6d,0x79,0xcb,0xe2 };
    const uint8_t PLAINTEXT[] = { 0x80,0x84,0x64,0xe1,0xbb,0x40,0x70,0x0e,0x12,0xc5,0x0d,0x52,0xf0,0x65,0x12,0x52 };
    const uint8_t CIPHERTEXT[] = { 0x1c,0xaa,0x92,0x8b,0x78,0x38,0x3e,0xde,0xaf,0x66,0xdc,0x25,0x9d,0x65,0x87,0x32 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-6", "[OFB][MCT][256][ENCRYPT][n6]") {
    const uint8_t KEY[] = { 0xc8,0xae,0x2a,0x52,0x28,0x4c,0xb2,0xbc,0x2c,0xfc,0xa7,0xb6,0xf3,0x75,0x41,0x65,0x81,0xe8,0x3e,0xf4,0x91,0xb6,0xc3,0xe7,0xd0,0x35,0x25,0xe5,0xc0,0x03,0x8c,0xe2 };
    const uint8_t IV[] = { 0x1c,0xaa,0x92,0x8b,0x78,0x38,0x3e,0xde,0xaf,0x66,0xdc,0x25,0x9d,0x65,0x87,0x32 };
    const uint8_t PLAINTEXT[] = { 0xbe,0x71,0x0a,0x29,0x52,0xbb,0x44,0x00,0x6b,0xc2,0x1d,0x6e,0x76,0xaa,0x69,0xfb };
    const uint8_t CIPHERTEXT[] = { 0x38,0x61,0x09,0xad,0x35,0x8a,0x96,0xce,0x54,0xb0,0x2d,0x96,0x40,0x17,0xef,0x03 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-7", "[OFB][MCT][256][ENCRYPT][n7]") {
    const uint8_t KEY[] = { 0xcc,0xc4,0xe3,0x12,0x32,0xfa,0x2e,0x07,0x69,0x89,0x52,0x6c,0x5e,0xb8,0x13,0x98,0xb9,0x89,0x37,0x59,0xa4,0x3c,0x55,0x29,0x84,0x85,0x08,0x73,0x80,0x14,0x63,0xe1 };
    const uint8_t IV[] = { 0x38,0x61,0x09,0xad,0x35,0x8a,0x96,0xce,0x54,0xb0,0x2d,0x96,0x40,0x17,0xef,0x03 };
    const uint8_t PLAINTEXT[] = { 0x04,0x6a,0xc9,0x40,0x1a,0xb6,0x9c,0xbb,0x45,0x75,0xf5,0xda,0xad,0xcd,0x52,0xfd };
    const uint8_t CIPHERTEXT[] = { 0x9b,0x1c,0x64,0xdc,0x5e,0x06,0xf6,0x48,0x9d,0xd6,0xe8,0xae,0xce,0xb4,0x63,0x34 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-8", "[OFB][MCT][256][ENCRYPT][n8]") {
    const uint8_t KEY[] = { 0x2d,0x23,0x1f,0x53,0x38,0x6b,0xc8,0x2a,0x3a,0xc9,0x07,0x7a,0x3d,0xae,0xc7,0xca,0x22,0x95,0x53,0x85,0xfa,0x3a,0xa3,0x61,0x19,0x53,0xe0,0xdd,0x4e,0xa0,0x00,0xd5 };
    const uint8_t IV[] = { 0x9b,0x1c,0x64,0xdc,0x5e,0x06,0xf6,0x48,0x9d,0xd6,0xe8,0xae,0xce,0xb4,0x63,0x34 };
    const uint8_t PLAINTEXT[] = { 0xe1,0xe7,0xfc,0x41,0x0a,0x91,0xe6,0x2d,0x53,0x40,0x55,0x16,0x63,0x16,0xd4,0x52 };
    const uint8_t CIPHERTEXT[] = { 0x93,0xa4,0xec,0xff,0xb4,0xdf,0x4f,0xc2,0xd5,0x9c,0x47,0xe2,0xcf,0xd9,0x3e,0x15 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-9", "[OFB][MCT][256][ENCRYPT][n9]") {
    const uint8_t KEY[] = { 0x81,0x97,0x77,0x33,0xef,0xc3,0xdc,0xeb,0x6a,0x49,0x5b,0x8e,0xa3,0x60,0xfe,0x66,0xb1,0x31,0xbf,0x7a,0x4e,0xe5,0xec,0xa3,0xcc,0xcf,0xa7,0x3f,0x81,0x79,0x3e,0xc0 };
    const uint8_t IV[] = { 0x93,0xa4,0xec,0xff,0xb4,0xdf,0x4f,0xc2,0xd5,0x9c,0x47,0xe2,0xcf,0xd9,0x3e,0x15 };
    const uint8_t PLAINTEXT[] = { 0xac,0xb4,0x68,0x60,0xd7,0xa8,0x14,0xc1,0x50,0x80,0x5c,0xf4,0x9e,0xce,0x39,0xac };
    const uint8_t CIPHERTEXT[] = { 0x44,0x40,0xe7,0xab,0x52,0xb0,0x79,0x2d,0x7e,0x58,0xb2,0x92,0x4e,0x9d,0xd0,0xff };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-10", "[OFB][MCT][256][ENCRYPT][n10]") {
    const uint8_t KEY[] = { 0x12,0xa6,0x5f,0x8a,0x89,0x7a,0x5d,0x9c,0xc7,0x9a,0x4c,0xa0,0x36,0x0e,0x24,0x60,0xf5,0x71,0x58,0xd1,0x1c,0x55,0x95,0x8e,0xb2,0x97,0x15,0xad,0xcf,0xe4,0xee,0x3f };
    const uint8_t IV[] = { 0x44,0x40,0xe7,0xab,0x52,0xb0,0x79,0x2d,0x7e,0x58,0xb2,0x92,0x4e,0x9d,0xd0,0xff };
    const uint8_t PLAINTEXT[] = { 0x93,0x31,0x28,0xb9,0x66,0xb9,0x81,0x77,0xad,0xd3,0x17,0x2e,0x95,0x6e,0xda,0x06 };
    const uint8_t CIPHERTEXT[] = { 0x47,0xdc,0x81,0x7d,0x9d,0xb4,0xec,0x0b,0xe9,0xcf,0xa7,0xf3,0x5d,0xfb,0x70,0x3e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-11", "[OFB][MCT][256][ENCRYPT][n11]") {
    const uint8_t KEY[] = { 0x85,0xe1,0xda,0x07,0x55,0xe1,0x6d,0x98,0x9d,0x56,0xaa,0xff,0x3a,0x67,0x59,0xcc,0xb2,0xad,0xd9,0xac,0x81,0xe1,0x79,0x85,0x5b,0x58,0xb2,0x5e,0x92,0x1f,0x9e,0x01 };
    const uint8_t IV[] = { 0x47,0xdc,0x81,0x7d,0x9d,0xb4,0xec,0x0b,0xe9,0xcf,0xa7,0xf3,0x5d,0xfb,0x70,0x3e };
    const uint8_t PLAINTEXT[] = { 0x97,0x47,0x85,0x8d,0xdc,0x9b,0x30,0x04,0x5a,0xcc,0xe6,0x5f,0x0c,0x69,0x7d,0xac };
    const uint8_t CIPHERTEXT[] = { 0xb0,0xe6,0x02,0xa8,0x81,0x2a,0xe1,0x42,0xa6,0x05,0xc7,0xab,0x90,0xc7,0x33,0x06 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-12", "[OFB][MCT][256][ENCRYPT][n12]") {
    const uint8_t KEY[] = { 0x96,0x56,0x91,0x7e,0x65,0xbb,0x40,0x05,0x29,0xb7,0x35,0xb3,0x4f,0xc5,0x51,0x30,0x02,0x4b,0xdb,0x04,0x00,0xcb,0x98,0xc7,0xfd,0x5d,0x75,0xf5,0x02,0xd8,0xad,0x07 };
    const uint8_t IV[] = { 0xb0,0xe6,0x02,0xa8,0x81,0x2a,0xe1,0x42,0xa6,0x05,0xc7,0xab,0x90,0xc7,0x33,0x06 };
    const uint8_t PLAINTEXT[] = { 0x13,0xb7,0x4b,0x79,0x30,0x5a,0x2d,0x9d,0xb4,0xe1,0x9f,0x4c,0x75,0xa2,0x08,0xfc };
    const uint8_t CIPHERTEXT[] = { 0xd3,0xbe,0xf9,0xc7,0xbc,0x9d,0xe0,0xc5,0x13,0x62,0x42,0xed,0x49,0x29,0x50,0x95 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-13", "[OFB][MCT][256][ENCRYPT][n13]") {
    const uint8_t KEY[] = { 0x77,0x7e,0x68,0xc1,0xa0,0x4a,0xc4,0x46,0xf6,0xbb,0xe6,0xc1,0xb8,0xaf,0x43,0xd6,0xd1,0xf5,0x22,0xc3,0xbc,0x56,0x78,0x02,0xee,0x3f,0x37,0x18,0x4b,0xf1,0xfd,0x92 };
    const uint8_t IV[] = { 0xd3,0xbe,0xf9,0xc7,0xbc,0x9d,0xe0,0xc5,0x13,0x62,0x42,0xed,0x49,0x29,0x50,0x95 };
    const uint8_t PLAINTEXT[] = { 0xe1,0x28,0xf9,0xbf,0xc5,0xf1,0x84,0x43,0xdf,0x0c,0xd3,0x72,0xf7,0x6a,0x12,0xe6 };
    const uint8_t CIPHERTEXT[] = { 0x41,0x26,0xec,0x33,0xe8,0xe4,0xe9,0x92,0xc2,0xf7,0xcf,0x34,0x9b,0x3a,0xe3,0xa7 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-14", "[OFB][MCT][256][ENCRYPT][n14]") {
    const uint8_t KEY[] = { 0xb0,0x72,0x42,0x3d,0x20,0x01,0xb8,0x60,0xc2,0xa7,0xf1,0xd1,0xbc,0x48,0x3a,0xfd,0x90,0xd3,0xce,0xf0,0x54,0xb2,0x91,0x90,0x2c,0xc8,0xf8,0x2c,0xd0,0xcb,0x1e,0x35 };
    const uint8_t IV[] = { 0x41,0x26,0xec,0x33,0xe8,0xe4,0xe9,0x92,0xc2,0xf7,0xcf,0x34,0x9b,0x3a,0xe3,0xa7 };
    const uint8_t PLAINTEXT[] = { 0xc7,0x0c,0x2a,0xfc,0x80,0x4b,0x7c,0x26,0x34,0x1c,0x17,0x10,0x04,0xe7,0x79,0x2b };
    const uint8_t CIPHERTEXT[] = { 0x65,0x8c,0x9e,0xdc,0x78,0x0d,0x4c,0x95,0xff,0x3d,0xde,0x95,0xb3,0x96,0x6b,0xbd };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-15", "[OFB][MCT][256][ENCRYPT][n15]") {
    const uint8_t KEY[] = { 0x0f,0x8b,0xd2,0x44,0x58,0xf2,0x13,0x06,0x67,0x69,0x53,0xb2,0x3f,0xd0,0x2b,0x2c,0xf5,0x5f,0x50,0x2c,0x2c,0xbf,0xdd,0x05,0xd3,0xf5,0x26,0xb9,0x63,0x5d,0x75,0x88 };
    const uint8_t IV[] = { 0x65,0x8c,0x9e,0xdc,0x78,0x0d,0x4c,0x95,0xff,0x3d,0xde,0x95,0xb3,0x96,0x6b,0xbd };
    const uint8_t PLAINTEXT[] = { 0xbf,0xf9,0x90,0x79,0x78,0xf3,0xab,0x66,0xa5,0xce,0xa2,0x63,0x83,0x98,0x11,0xd1 };
    const uint8_t CIPHERTEXT[] = { 0x3d,0x52,0xcf,0x29,0x7d,0x70,0xec,0x8b,0x86,0x64,0xb3,0x99,0x71,0xc5,0x9f,0x29 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-16", "[OFB][MCT][256][ENCRYPT][n16]") {
    const uint8_t KEY[] = { 0xb4,0x89,0x08,0xe6,0x84,0x54,0x67,0x6b,0xee,0xce,0x16,0x31,0xef,0x08,0xbb,0xc1,0xc8,0x0d,0x9f,0x05,0x51,0xcf,0x31,0x8e,0x55,0x91,0x95,0x20,0x12,0x98,0xea,0xa1 };
    const uint8_t IV[] = { 0x3d,0x52,0xcf,0x29,0x7d,0x70,0xec,0x8b,0x86,0x64,0xb3,0x99,0x71,0xc5,0x9f,0x29 };
    const uint8_t PLAINTEXT[] = { 0xbb,0x02,0xda,0xa2,0xdc,0xa6,0x74,0x6d,0x89,0xa7,0x45,0x83,0xd0,0xd8,0x90,0xed };
    const uint8_t CIPHERTEXT[] = { 0xbe,0xe9,0x7c,0xfb,0x54,0x3a,0xa8,0x8f,0xa5,0x29,0x33,0x3a,0x91,0x9d,0x17,0xa6 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-17", "[OFB][MCT][256][ENCRYPT][n17]") {
    const uint8_t KEY[] = { 0x44,0xec,0x55,0xb2,0xd6,0x9a,0xd3,0xd2,0xfc,0xf7,0xad,0x7f,0x50,0xd2,0xa7,0xef,0x76,0xe4,0xe3,0xfe,0x05,0xf5,0x99,0x01,0xf0,0xb8,0xa6,0x1a,0x83,0x05,0xfd,0x07 };
    const uint8_t IV[] = { 0xbe,0xe9,0x7c,0xfb,0x54,0x3a,0xa8,0x8f,0xa5,0x29,0x33,0x3a,0x91,0x9d,0x17,0xa6 };
    const uint8_t PLAINTEXT[] = { 0xf0,0x65,0x5d,0x54,0x52,0xce,0xb4,0xb9,0x12,0x39,0xbb,0x4e,0xbf,0xda,0x1c,0x2e };
    const uint8_t CIPHERTEXT[] = { 0x01,0x8e,0xa2,0x54,0x88,0x25,0x0c,0xe3,0xe6,0x36,0x41,0xfe,0xdf,0x4b,0xc6,0x1d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-18", "[OFB][MCT][256][ENCRYPT][n18]") {
    const uint8_t KEY[] = { 0x53,0xde,0x14,0xec,0x43,0x92,0x44,0xab,0x0e,0xe4,0x71,0x6c,0x13,0x48,0xc7,0xb6,0x77,0x6a,0x41,0xaa,0x8d,0xd0,0x95,0xe2,0x16,0x8e,0xe7,0xe4,0x5c,0x4e,0x3b,0x1a };
    const uint8_t IV[] = { 0x01,0x8e,0xa2,0x54,0x88,0x25,0x0c,0xe3,0xe6,0x36,0x41,0xfe,0xdf,0x4b,0xc6,0x1d };
    const uint8_t PLAINTEXT[] = { 0x17,0x32,0x41,0x5e,0x95,0x08,0x97,0x79,0xf2,0x13,0xdc,0x13,0x43,0x9a,0x60,0x59 };
    const uint8_t CIPHERTEXT[] = { 0xe7,0x1b,0x6d,0x6a,0xe6,0x55,0x96,0x91,0xef,0x78,0xa6,0xe3,0x83,0x86,0x35,0xa6 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-19", "[OFB][MCT][256][ENCRYPT][n19]") {
    const uint8_t KEY[] = { 0xfc,0xcb,0x08,0xf9,0x3d,0xa3,0xb6,0x84,0x7c,0x30,0x07,0xcc,0xf9,0x63,0x0d,0xd8,0x90,0x71,0x2c,0xc0,0x6b,0x85,0x03,0x73,0xf9,0xf6,0x41,0x07,0xdf,0xc8,0x0e,0xbc };
    const uint8_t IV[] = { 0xe7,0x1b,0x6d,0x6a,0xe6,0x55,0x96,0x91,0xef,0x78,0xa6,0xe3,0x83,0x86,0x35,0xa6 };
    const uint8_t PLAINTEXT[] = { 0xaf,0x15,0x1c,0x15,0x7e,0x31,0xf2,0x2f,0x72,0xd4,0x76,0xa0,0xea,0x2b,0xca,0x6e };
    const uint8_t CIPHERTEXT[] = { 0xb2,0x9d,0xa4,0xdb,0x11,0xb8,0x3b,0x4f,0x67,0x91,0x5d,0x37,0xe7,0x08,0xd0,0x6d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-20", "[OFB][MCT][256][ENCRYPT][n20]") {
    const uint8_t KEY[] = { 0xf7,0x21,0xd7,0xa2,0xf3,0x39,0xac,0xa5,0x61,0x4a,0x7d,0x18,0x04,0xc3,0x53,0xae,0x22,0xec,0x88,0x1b,0x7a,0x3d,0x38,0x3c,0x9e,0x67,0x1c,0x30,0x38,0xc0,0xde,0xd1 };
    const uint8_t IV[] = { 0xb2,0x9d,0xa4,0xdb,0x11,0xb8,0x3b,0x4f,0x67,0x91,0x5d,0x37,0xe7,0x08,0xd0,0x6d };
    const uint8_t PLAINTEXT[] = { 0x0b,0xea,0xdf,0x5b,0xce,0x9a,0x1a,0x21,0x1d,0x7a,0x7a,0xd4,0xfd,0xa0,0x5e,0x76 };
    const uint8_t CIPHERTEXT[] = { 0x47,0xd2,0xf3,0x9c,0x44,0x7e,0xe5,0xfc,0x60,0x77,0xa0,0x34,0x9a,0xe5,0x45,0x30 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-21", "[OFB][MCT][256][ENCRYPT][n21]") {
    const uint8_t KEY[] = { 0x95,0xc5,0x1e,0x9a,0x40,0xc5,0x37,0x8e,0x81,0xd8,0xe1,0x23,0x57,0x7c,0x97,0xa6,0x65,0x3e,0x7b,0x87,0x3e,0x43,0xdd,0xc0,0xfe,0x10,0xbc,0x04,0xa2,0x25,0x9b,0xe1 };
    const uint8_t IV[] = { 0x47,0xd2,0xf3,0x9c,0x44,0x7e,0xe5,0xfc,0x60,0x77,0xa0,0x34,0x9a,0xe5,0x45,0x30 };
    const uint8_t PLAINTEXT[] = { 0x62,0xe4,0xc9,0x38,0xb3,0xfc,0x9b,0x2b,0xe0,0x92,0x9c,0x3b,0x53,0xbf,0xc4,0x08 };
    const uint8_t CIPHERTEXT[] = { 0xc7,0xa9,0x63,0x13,0xbd,0xef,0x86,0x84,0xce,0x01,0x61,0x0e,0x64,0x59,0x72,0x78 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-22", "[OFB][MCT][256][ENCRYPT][n22]") {
    const uint8_t KEY[] = { 0x7a,0x0b,0xd4,0x29,0xe2,0x45,0x30,0x40,0x9d,0x21,0x28,0x77,0xd1,0xed,0xad,0x5c,0xa2,0x97,0x18,0x94,0x83,0xac,0x5b,0x44,0x30,0x11,0xdd,0x0a,0xc6,0x7c,0xe9,0x99 };
    const uint8_t IV[] = { 0xc7,0xa9,0x63,0x13,0xbd,0xef,0x86,0x84,0xce,0x01,0x61,0x0e,0x64,0x59,0x72,0x78 };
    const uint8_t PLAINTEXT[] = { 0xef,0xce,0xca,0xb3,0xa2,0x80,0x07,0xce,0x1c,0xf9,0xc9,0x54,0x86,0x91,0x3a,0xfa };
    const uint8_t CIPHERTEXT[] = { 0x29,0xcc,0x20,0xc3,0x62,0x4b,0xcd,0x2b,0x2c,0xbb,0xa0,0xee,0x9d,0x4b,0x4f,0xa6 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-23", "[OFB][MCT][256][ENCRYPT][n23]") {
    const uint8_t KEY[] = { 0xac,0xde,0x3b,0xfb,0x0d,0xde,0x00,0x08,0x1a,0x91,0xce,0x4b,0x0a,0xc0,0xd2,0x8c,0x8b,0x5b,0x38,0x57,0xe1,0xe7,0x96,0x6f,0x1c,0xaa,0x7d,0xe4,0x5b,0x37,0xa6,0x3f };
    const uint8_t IV[] = { 0x29,0xcc,0x20,0xc3,0x62,0x4b,0xcd,0x2b,0x2c,0xbb,0xa0,0xee,0x9d,0x4b,0x4f,0xa6 };
    const uint8_t PLAINTEXT[] = { 0xd6,0xd5,0xef,0xd2,0xef,0x9b,0x30,0x48,0x87,0xb0,0xe6,0x3c,0xdb,0x2d,0x7f,0xd0 };
    const uint8_t CIPHERTEXT[] = { 0x9e,0x71,0x83,0x06,0xe7,0x34,0x48,0xd9,0x7f,0x4a,0xe2,0x97,0xbf,0x70,0xa6,0x67 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-24", "[OFB][MCT][256][ENCRYPT][n24]") {
    const uint8_t KEY[] = { 0xff,0x32,0xdc,0xbb,0xbe,0xf2,0xdf,0xe5,0x7d,0x75,0xcd,0x5b,0x9b,0xce,0xc1,0x17,0x15,0x2a,0xbb,0x51,0x06,0xd3,0xde,0xb6,0x63,0xe0,0x9f,0x73,0xe4,0x47,0x00,0x58 };
    const uint8_t IV[] = { 0x9e,0x71,0x83,0x06,0xe7,0x34,0x48,0xd9,0x7f,0x4a,0xe2,0x97,0xbf,0x70,0xa6,0x67 };
    const uint8_t PLAINTEXT[] = { 0x53,0xec,0xe7,0x40,0xb3,0x2c,0xdf,0xed,0x67,0xe4,0x03,0x10,0x91,0x0e,0x13,0x9b };
    const uint8_t CIPHERTEXT[] = { 0x55,0x3d,0xe3,0x28,0xa3,0xe6,0xa5,0x1d,0xd3,0x68,0x34,0x6a,0x29,0x47,0x6c,0x3d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-25", "[OFB][MCT][256][ENCRYPT][n25]") {
    const uint8_t KEY[] = { 0x5c,0x44,0xfd,0xd6,0x21,0xeb,0x00,0x56,0x35,0xfe,0xc4,0x19,0x18,0xff,0xcd,0x57,0x40,0x17,0x58,0x79,0xa5,0x35,0x7b,0xab,0xb0,0x88,0xab,0x19,0xcd,0x00,0x6c,0x65 };
    const uint8_t IV[] = { 0x55,0x3d,0xe3,0x28,0xa3,0xe6,0xa5,0x1d,0xd3,0x68,0x34,0x6a,0x29,0x47,0x6c,0x3d };
    const uint8_t PLAINTEXT[] = { 0xa3,0x76,0x21,0x6d,0x9f,0x19,0xdf,0xb3,0x48,0x8b,0x09,0x42,0x83,0x31,0x0c,0x40 };
    const uint8_t CIPHERTEXT[] = { 0xee,0x1c,0x85,0xbe,0x6e,0x38,0x3f,0x41,0xcd,0x8c,0x5b,0xb9,0xc6,0xde,0x65,0x0b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-26", "[OFB][MCT][256][ENCRYPT][n26]") {
    const uint8_t KEY[] = { 0x37,0x78,0x3c,0x8d,0x9c,0xab,0xc5,0x41,0x44,0xeb,0x99,0xb4,0x80,0x57,0xfe,0x38,0xae,0x0b,0xdd,0xc7,0xcb,0x0d,0x44,0xea,0x7d,0x04,0xf0,0xa0,0x0b,0xde,0x09,0x6e };
    const uint8_t IV[] = { 0xee,0x1c,0x85,0xbe,0x6e,0x38,0x3f,0x41,0xcd,0x8c,0x5b,0xb9,0xc6,0xde,0x65,0x0b };
    const uint8_t PLAINTEXT[] = { 0x6b,0x3c,0xc1,0x5b,0xbd,0x40,0xc5,0x17,0x71,0x15,0x5d,0xad,0x98,0xa8,0x33,0x6f };
    const uint8_t CIPHERTEXT[] = { 0xa0,0x06,0xab,0x97,0xac,0x3d,0x79,0x49,0x66,0x4b,0x60,0x52,0xc6,0x0f,0x36,0x8b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-27", "[OFB][MCT][256][ENCRYPT][n27]") {
    const uint8_t KEY[] = { 0x67,0x36,0x6b,0x0e,0x82,0x45,0x0b,0x0d,0x42,0x6a,0x4d,0xbb,0xa8,0x29,0xd7,0xef,0x0e,0x0d,0x76,0x50,0x67,0x30,0x3d,0xa3,0x1b,0x4f,0x90,0xf2,0xcd,0xd1,0x3f,0xe5 };
    const uint8_t IV[] = { 0xa0,0x06,0xab,0x97,0xac,0x3d,0x79,0x49,0x66,0x4b,0x60,0x52,0xc6,0x0f,0x36,0x8b };
    const uint8_t PLAINTEXT[] = { 0x50,0x4e,0x57,0x83,0x1e,0xee,0xce,0x4c,0x06,0x81,0xd4,0x0f,0x28,0x7e,0x29,0xd7 };
    const uint8_t CIPHERTEXT[] = { 0xcb,0xfd,0x93,0xff,0xbd,0x52,0xf1,0xec,0xab,0xed,0x91,0x99,0x71,0x92,0x03,0x6c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-28", "[OFB][MCT][256][ENCRYPT][n28]") {
    const uint8_t KEY[] = { 0xe4,0x26,0xf3,0x85,0xc9,0x4f,0xba,0x8a,0x7a,0xf8,0x33,0x25,0x2d,0xc5,0x22,0xaa,0xc5,0xf0,0xe5,0xaf,0xda,0x62,0xcc,0x4f,0xb0,0xa2,0x01,0x6b,0xbc,0x43,0x3c,0x89 };
    const uint8_t IV[] = { 0xcb,0xfd,0x93,0xff,0xbd,0x52,0xf1,0xec,0xab,0xed,0x91,0x99,0x71,0x92,0x03,0x6c };
    const uint8_t PLAINTEXT[] = { 0x83,0x10,0x98,0x8b,0x4b,0x0a,0xb1,0x87,0x38,0x92,0x7e,0x9e,0x85,0xec,0xf5,0x45 };
    const uint8_t CIPHERTEXT[] = { 0x8b,0x46,0x15,0x84,0xcc,0xaf,0x16,0x2b,0x2b,0x40,0x06,0x4d,0x73,0x3e,0x98,0x6c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-29", "[OFB][MCT][256][ENCRYPT][n29]") {
    const uint8_t KEY[] = { 0x62,0xf0,0x14,0xa7,0x6a,0x79,0x92,0x35,0x2a,0x70,0xeb,0x8b,0x3b,0xc7,0x31,0x44,0x4e,0xb6,0xf0,0x2b,0x16,0xcd,0xda,0x64,0x9b,0xe2,0x07,0x26,0xcf,0x7d,0xa4,0xe5 };
    const uint8_t IV[] = { 0x8b,0x46,0x15,0x84,0xcc,0xaf,0x16,0x2b,0x2b,0x40,0x06,0x4d,0x73,0x3e,0x98,0x6c };
    const uint8_t PLAINTEXT[] = { 0x86,0xd6,0xe7,0x22,0xa3,0x36,0x28,0xbf,0x50,0x88,0xd8,0xae,0x16,0x02,0x13,0xee };
    const uint8_t CIPHERTEXT[] = { 0x06,0xea,0x10,0xb4,0x2a,0x81,0xe0,0x42,0x1a,0x83,0xb1,0xfe,0x63,0xaf,0xbf,0xed };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-30", "[OFB][MCT][256][ENCRYPT][n30]") {
    const uint8_t KEY[] = { 0xb7,0x61,0x1d,0x35,0x80,0x57,0x0d,0x5b,0x29,0x78,0x81,0xe3,0xdc,0x2d,0x3c,0xd3,0x48,0x5c,0xe0,0x9f,0x3c,0x4c,0x3a,0x26,0x81,0x61,0xb6,0xd8,0xac,0xd2,0x1b,0x08 };
    const uint8_t IV[] = { 0x06,0xea,0x10,0xb4,0x2a,0x81,0xe0,0x42,0x1a,0x83,0xb1,0xfe,0x63,0xaf,0xbf,0xed };
    const uint8_t PLAINTEXT[] = { 0xd5,0x91,0x09,0x92,0xea,0x2e,0x9f,0x6e,0x03,0x08,0x6a,0x68,0xe7,0xea,0x0d,0x97 };
    const uint8_t CIPHERTEXT[] = { 0xce,0x80,0x6a,0xf2,0x9e,0x77,0xf4,0x55,0x72,0x0e,0x22,0xe2,0x0d,0x37,0xc6,0xa1 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-31", "[OFB][MCT][256][ENCRYPT][n31]") {
    const uint8_t KEY[] = { 0x16,0x60,0x9d,0xff,0x64,0xb6,0x80,0xc4,0x9a,0xc8,0x2b,0x27,0xff,0xa0,0x23,0xf4,0x86,0xdc,0x8a,0x6d,0xa2,0x3b,0xce,0x73,0xf3,0x6f,0x94,0x3a,0xa1,0xe5,0xdd,0xa9 };
    const uint8_t IV[] = { 0xce,0x80,0x6a,0xf2,0x9e,0x77,0xf4,0x55,0x72,0x0e,0x22,0xe2,0x0d,0x37,0xc6,0xa1 };
    const uint8_t PLAINTEXT[] = { 0xa1,0x01,0x80,0xca,0xe4,0xe1,0x8d,0x9f,0xb3,0xb0,0xaa,0xc4,0x23,0x8d,0x1f,0x27 };
    const uint8_t CIPHERTEXT[] = { 0x18,0xe6,0x22,0xd4,0xf6,0x4a,0xdf,0x74,0x6d,0xf2,0x34,0x7b,0x37,0x1f,0xa6,0xd8 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-32", "[OFB][MCT][256][ENCRYPT][n32]") {
    const uint8_t KEY[] = { 0x9f,0x04,0xcf,0xdd,0xbe,0x29,0x72,0xe5,0xcb,0xe7,0x80,0xb0,0x11,0xd4,0x57,0x94,0x9e,0x3a,0xa8,0xb9,0x54,0x71,0x11,0x07,0x9e,0x9d,0xa0,0x41,0x96,0xfa,0x7b,0x71 };
    const uint8_t IV[] = { 0x18,0xe6,0x22,0xd4,0xf6,0x4a,0xdf,0x74,0x6d,0xf2,0x34,0x7b,0x37,0x1f,0xa6,0xd8 };
    const uint8_t PLAINTEXT[] = { 0x89,0x64,0x52,0x22,0xda,0x9f,0xf2,0x21,0x51,0x2f,0xab,0x97,0xee,0x74,0x74,0x60 };
    const uint8_t CIPHERTEXT[] = { 0x0e,0x3e,0x3c,0x03,0x7f,0x75,0x09,0x90,0xbe,0x7e,0x89,0xef,0x11,0x3a,0xf1,0xa1 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-33", "[OFB][MCT][256][ENCRYPT][n33]") {
    const uint8_t KEY[] = { 0xf5,0x4b,0xa6,0x79,0xad,0x25,0x03,0x8b,0x58,0x92,0x6a,0x1e,0x7f,0x42,0x33,0xd4,0x90,0x04,0x94,0xba,0x2b,0x04,0x18,0x97,0x20,0xe3,0x29,0xae,0x87,0xc0,0x8a,0xd0 };
    const uint8_t IV[] = { 0x0e,0x3e,0x3c,0x03,0x7f,0x75,0x09,0x90,0xbe,0x7e,0x89,0xef,0x11,0x3a,0xf1,0xa1 };
    const uint8_t PLAINTEXT[] = { 0x6a,0x4f,0x69,0xa4,0x13,0x0c,0x71,0x6e,0x93,0x75,0xea,0xae,0x6e,0x96,0x64,0x40 };
    const uint8_t CIPHERTEXT[] = { 0x21,0xb1,0xcc,0x7a,0x88,0xa4,0xf1,0x88,0x5e,0xe0,0x00,0xb6,0xb6,0x79,0xe6,0xb1 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-34", "[OFB][MCT][256][ENCRYPT][n34]") {
    const uint8_t KEY[] = { 0x78,0x8f,0xbf,0xf8,0xd5,0x89,0xdc,0xd1,0x99,0x2c,0x8d,0xef,0x86,0x21,0x2d,0xf5,0xb1,0xb5,0x58,0xc0,0xa3,0xa0,0xe9,0x1f,0x7e,0x03,0x29,0x18,0x31,0xb9,0x6c,0x61 };
    const uint8_t IV[] = { 0x21,0xb1,0xcc,0x7a,0x88,0xa4,0xf1,0x88,0x5e,0xe0,0x00,0xb6,0xb6,0x79,0xe6,0xb1 };
    const uint8_t PLAINTEXT[] = { 0x8d,0xc4,0x19,0x81,0x78,0xac,0xdf,0x5a,0xc1,0xbe,0xe7,0xf1,0xf9,0x63,0x1e,0x21 };
    const uint8_t CIPHERTEXT[] = { 0xcb,0x54,0x30,0x13,0x36,0x2e,0xf5,0x0f,0xe1,0x56,0x42,0x56,0xa7,0xff,0x3f,0x12 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-35", "[OFB][MCT][256][ENCRYPT][n35]") {
    const uint8_t KEY[] = { 0xcd,0x64,0x07,0x3c,0xd4,0x30,0xc7,0x02,0x4a,0x6b,0x61,0x36,0x1d,0xbb,0xd1,0x07,0x7a,0xe1,0x68,0xd3,0x95,0x8e,0x1c,0x10,0x9f,0x55,0x6b,0x4e,0x96,0x46,0x53,0x73 };
    const uint8_t IV[] = { 0xcb,0x54,0x30,0x13,0x36,0x2e,0xf5,0x0f,0xe1,0x56,0x42,0x56,0xa7,0xff,0x3f,0x12 };
    const uint8_t PLAINTEXT[] = { 0xb5,0xeb,0xb8,0xc4,0x01,0xb9,0x1b,0xd3,0xd3,0x47,0xec,0xd9,0x9b,0x9a,0xfc,0xf2 };
    const uint8_t CIPHERTEXT[] = { 0x2e,0x94,0x64,0x0d,0x18,0x88,0x6d,0x5e,0x45,0x26,0x22,0x39,0xd7,0x37,0x58,0xae };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-36", "[OFB][MCT][256][ENCRYPT][n36]") {
    const uint8_t KEY[] = { 0x5a,0xd9,0x7f,0x2f,0x7f,0xea,0xaa,0x07,0xe0,0xc4,0xdf,0xae,0x27,0x85,0x2e,0xba,0x54,0x75,0x0c,0xde,0x8d,0x06,0x71,0x4e,0xda,0x73,0x49,0x77,0x41,0x71,0x0b,0xdd };
    const uint8_t IV[] = { 0x2e,0x94,0x64,0x0d,0x18,0x88,0x6d,0x5e,0x45,0x26,0x22,0x39,0xd7,0x37,0x58,0xae };
    const uint8_t PLAINTEXT[] = { 0x97,0xbd,0x78,0x13,0xab,0xda,0x6d,0x05,0xaa,0xaf,0xbe,0x98,0x3a,0x3e,0xff,0xbd };
    const uint8_t CIPHERTEXT[] = { 0xfe,0xa2,0x3b,0xd0,0x1a,0x31,0x2e,0xe2,0xcd,0x4f,0xa0,0x0b,0xa8,0x5d,0x44,0x06 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-37", "[OFB][MCT][256][ENCRYPT][n37]") {
    const uint8_t KEY[] = { 0x22,0xa4,0x38,0x5b,0x7e,0xc3,0xf5,0x41,0x55,0xf6,0x22,0x3b,0x6d,0xec,0x29,0x2f,0xaa,0xd7,0x37,0x0e,0x97,0x37,0x5f,0xac,0x17,0x3c,0xe9,0x7c,0xe9,0x2c,0x4f,0xdb };
    const uint8_t IV[] = { 0xfe,0xa2,0x3b,0xd0,0x1a,0x31,0x2e,0xe2,0xcd,0x4f,0xa0,0x0b,0xa8,0x5d,0x44,0x06 };
    const uint8_t PLAINTEXT[] = { 0x78,0x7d,0x47,0x74,0x01,0x29,0x5f,0x46,0xb5,0x32,0xfd,0x95,0x4a,0x69,0x07,0x95 };
    const uint8_t CIPHERTEXT[] = { 0x16,0x87,0x09,0x21,0x08,0x39,0x04,0x87,0x8a,0xee,0xb5,0x23,0x44,0x1e,0x5b,0x1e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-38", "[OFB][MCT][256][ENCRYPT][n38]") {
    const uint8_t KEY[] = { 0xa5,0x5f,0xb9,0x65,0x50,0x4d,0xaf,0x41,0xff,0x4c,0xc1,0x86,0xd0,0x83,0xc9,0xd9,0xbc,0x50,0x3e,0x2f,0x9f,0x0e,0x5b,0x2b,0x9d,0xd2,0x5c,0x5f,0xad,0x32,0x14,0xc5 };
    const uint8_t IV[] = { 0x16,0x87,0x09,0x21,0x08,0x39,0x04,0x87,0x8a,0xee,0xb5,0x23,0x44,0x1e,0x5b,0x1e };
    const uint8_t PLAINTEXT[] = { 0x87,0xfb,0x81,0x3e,0x2e,0x8e,0x5a,0x00,0xaa,0xba,0xe3,0xbd,0xbd,0x6f,0xe0,0xf6 };
    const uint8_t CIPHERTEXT[] = { 0xf2,0x38,0x8c,0x3c,0x06,0x7c,0xf5,0x98,0x5e,0x2c,0xab,0x93,0xeb,0x06,0xa2,0xd3 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-39", "[OFB][MCT][256][ENCRYPT][n39]") {
    const uint8_t KEY[] = { 0x9b,0x9d,0xd1,0x8a,0xe4,0x55,0x9f,0x67,0x85,0x72,0x99,0x04,0x7c,0x24,0xdc,0x7e,0x4e,0x68,0xb2,0x13,0x99,0x72,0xae,0xb3,0xc3,0xfe,0xf7,0xcc,0x46,0x34,0xb6,0x16 };
    const uint8_t IV[] = { 0xf2,0x38,0x8c,0x3c,0x06,0x7c,0xf5,0x98,0x5e,0x2c,0xab,0x93,0xeb,0x06,0xa2,0xd3 };
    const uint8_t PLAINTEXT[] = { 0x3e,0xc2,0x68,0xef,0xb4,0x18,0x30,0x26,0x7a,0x3e,0x58,0x82,0xac,0xa7,0x15,0xa7 };
    const uint8_t CIPHERTEXT[] = { 0xdb,0x56,0x42,0x9b,0x6c,0x88,0xe1,0xe3,0x32,0xa7,0x62,0x2f,0xac,0x5f,0xb8,0x56 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-40", "[OFB][MCT][256][ENCRYPT][n40]") {
    const uint8_t KEY[] = { 0xf8,0x68,0x14,0xb4,0x4a,0xda,0x2a,0x88,0xee,0x6a,0x68,0x53,0xdc,0x8e,0x73,0x41,0x95,0x3e,0xf0,0x88,0xf5,0xfa,0x4f,0x50,0xf1,0x59,0x95,0xe3,0xea,0x6b,0x0e,0x40 };
    const uint8_t IV[] = { 0xdb,0x56,0x42,0x9b,0x6c,0x88,0xe1,0xe3,0x32,0xa7,0x62,0x2f,0xac,0x5f,0xb8,0x56 };
    const uint8_t PLAINTEXT[] = { 0x63,0xf5,0xc5,0x3e,0xae,0x8f,0xb5,0xef,0x6b,0x18,0xf1,0x57,0xa0,0xaa,0xaf,0x3f };
    const uint8_t CIPHERTEXT[] = { 0xcd,0x06,0x49,0xda,0x4c,0x54,0xff,0x31,0x1f,0xa1,0x62,0xd3,0x4f,0x9a,0x66,0x24 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-41", "[OFB][MCT][256][ENCRYPT][n41]") {
    const uint8_t KEY[] = { 0x51,0x39,0x60,0x9a,0xa9,0xcd,0xbd,0x54,0xf6,0x64,0xb0,0xa9,0xec,0x31,0x41,0xb3,0x58,0x38,0xb9,0x52,0xb9,0xae,0xb0,0x61,0xee,0xf8,0xf7,0x30,0xa5,0xf1,0x68,0x64 };
    const uint8_t IV[] = { 0xcd,0x06,0x49,0xda,0x4c,0x54,0xff,0x31,0x1f,0xa1,0x62,0xd3,0x4f,0x9a,0x66,0x24 };
    const uint8_t PLAINTEXT[] = { 0xa9,0x51,0x74,0x2e,0xe3,0x17,0x97,0xdc,0x18,0x0e,0xd8,0xfa,0x30,0xbf,0x32,0xf2 };
    const uint8_t CIPHERTEXT[] = { 0xa3,0x56,0x5f,0xb8,0x50,0xad,0xb3,0xda,0x72,0x82,0xb7,0x2b,0xf9,0xc3,0xf7,0x5a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-42", "[OFB][MCT][256][ENCRYPT][n42]") {
    const uint8_t KEY[] = { 0xdf,0x78,0xbc,0x69,0x4d,0xc3,0x7d,0x52,0x96,0x46,0x3c,0x02,0xe4,0xbc,0x1d,0x08,0xfb,0x6e,0xe6,0xea,0xe9,0x03,0x03,0xbb,0x9c,0x7a,0x40,0x1b,0x5c,0x32,0x9f,0x3e };
    const uint8_t IV[] = { 0xa3,0x56,0x5f,0xb8,0x50,0xad,0xb3,0xda,0x72,0x82,0xb7,0x2b,0xf9,0xc3,0xf7,0x5a };
    const uint8_t PLAINTEXT[] = { 0x8e,0x41,0xdc,0xf3,0xe4,0x0e,0xc0,0x06,0x60,0x22,0x8c,0xab,0x08,0x8d,0x5c,0xbb };
    const uint8_t CIPHERTEXT[] = { 0x15,0x33,0x08,0x77,0xdf,0xb1,0x97,0xbd,0xd8,0x34,0xe3,0xa7,0x39,0x92,0x84,0x07 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-43", "[OFB][MCT][256][ENCRYPT][n43]") {
    const uint8_t KEY[] = { 0x76,0xaa,0xf1,0x30,0x3d,0xd6,0x7a,0x38,0xf5,0x1b,0x8a,0x73,0x75,0x97,0xb6,0x58,0xee,0x5d,0xee,0x9d,0x36,0xb2,0x94,0x06,0x44,0x4e,0xa3,0xbc,0x65,0xa0,0x1b,0x39 };
    const uint8_t IV[] = { 0x15,0x33,0x08,0x77,0xdf,0xb1,0x97,0xbd,0xd8,0x34,0xe3,0xa7,0x39,0x92,0x84,0x07 };
    const uint8_t PLAINTEXT[] = { 0xa9,0xd2,0x4d,0x59,0x70,0x15,0x07,0x6a,0x63,0x5d,0xb6,0x71,0x91,0x2b,0xab,0x50 };
    const uint8_t CIPHERTEXT[] = { 0x4d,0x58,0x98,0x08,0xca,0x67,0x1d,0x54,0xdc,0x5d,0xbc,0xf7,0x11,0x62,0x04,0x9e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-44", "[OFB][MCT][256][ENCRYPT][n44]") {
    const uint8_t KEY[] = { 0x0b,0x16,0xca,0x4b,0x54,0x8f,0x4f,0xa5,0xce,0x22,0x6e,0x3b,0xdb,0x4a,0xca,0x51,0xa3,0x05,0x76,0x95,0xfc,0xd5,0x89,0x52,0x98,0x13,0x1f,0x4b,0x74,0xc2,0x1f,0xa7 };
    const uint8_t IV[] = { 0x4d,0x58,0x98,0x08,0xca,0x67,0x1d,0x54,0xdc,0x5d,0xbc,0xf7,0x11,0x62,0x04,0x9e };
    const uint8_t PLAINTEXT[] = { 0x7d,0xbc,0x3b,0x7b,0x69,0x59,0x35,0x9d,0x3b,0x39,0xe4,0x48,0xae,0xdd,0x7c,0x09 };
    const uint8_t CIPHERTEXT[] = { 0x48,0x03,0xdc,0xd5,0x01,0x48,0x10,0x22,0xba,0x77,0x54,0x39,0x9f,0x21,0xe8,0x1c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-45", "[OFB][MCT][256][ENCRYPT][n45]") {
    const uint8_t KEY[] = { 0x55,0x61,0x40,0xfd,0x04,0x6d,0x96,0xec,0x0e,0x43,0xb3,0xbf,0x23,0x24,0x29,0x23,0xeb,0x06,0xaa,0x40,0xfd,0x9d,0x99,0x70,0x22,0x64,0x4b,0x72,0xeb,0xe3,0xf7,0xbb };
    const uint8_t IV[] = { 0x48,0x03,0xdc,0xd5,0x01,0x48,0x10,0x22,0xba,0x77,0x54,0x39,0x9f,0x21,0xe8,0x1c };
    const uint8_t PLAINTEXT[] = { 0x5e,0x77,0x8a,0xb6,0x50,0xe2,0xd9,0x49,0xc0,0x61,0xdd,0x84,0xf8,0x6e,0xe3,0x72 };
    const uint8_t CIPHERTEXT[] = { 0x79,0x1b,0xa0,0xc8,0x94,0xb4,0xf7,0xae,0xc7,0x8b,0x5a,0x39,0xb9,0xb3,0xfc,0x8a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-46", "[OFB][MCT][256][ENCRYPT][n46]") {
    const uint8_t KEY[] = { 0x57,0x4b,0x58,0x5b,0x83,0x5f,0xaf,0xdb,0xd3,0x65,0xe4,0x48,0x29,0xec,0xec,0xcf,0x92,0x1d,0x0a,0x88,0x69,0x29,0x6e,0xde,0xe5,0xef,0x11,0x4b,0x52,0x50,0x0b,0x31 };
    const uint8_t IV[] = { 0x79,0x1b,0xa0,0xc8,0x94,0xb4,0xf7,0xae,0xc7,0x8b,0x5a,0x39,0xb9,0xb3,0xfc,0x8a };
    const uint8_t PLAINTEXT[] = { 0x02,0x2a,0x18,0xa6,0x87,0x32,0x39,0x37,0xdd,0x26,0x57,0xf7,0x0a,0xc8,0xc5,0xec };
    const uint8_t CIPHERTEXT[] = { 0x69,0xc1,0x4d,0x39,0xbe,0xde,0xf0,0xbd,0xe1,0x89,0x4d,0x03,0x15,0x15,0xf1,0xee };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-47", "[OFB][MCT][256][ENCRYPT][n47]") {
    const uint8_t KEY[] = { 0x90,0x38,0x09,0x63,0xfb,0x11,0xe9,0x4d,0x74,0x03,0x87,0x82,0xfb,0xc6,0xb2,0x24,0xfb,0xdc,0x47,0xb1,0xd7,0xf7,0x9e,0x63,0x04,0x66,0x5c,0x48,0x47,0x45,0xfa,0xdf };
    const uint8_t IV[] = { 0x69,0xc1,0x4d,0x39,0xbe,0xde,0xf0,0xbd,0xe1,0x89,0x4d,0x03,0x15,0x15,0xf1,0xee };
    const uint8_t PLAINTEXT[] = { 0xc7,0x73,0x51,0x38,0x78,0x4e,0x46,0x96,0xa7,0x66,0x63,0xca,0xd2,0x2a,0x5e,0xeb };
    const uint8_t CIPHERTEXT[] = { 0xcf,0x5d,0x78,0x6b,0xae,0x85,0x80,0xf9,0xbb,0x87,0x06,0x6a,0x6c,0xf1,0x43,0x0f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-48", "[OFB][MCT][256][ENCRYPT][n48]") {
    const uint8_t KEY[] = { 0x8c,0xef,0x32,0xb8,0xdf,0x02,0xff,0xfd,0x03,0x1e,0xeb,0x0c,0x74,0x1e,0xb2,0x38,0x34,0x81,0x3f,0xda,0x79,0x72,0x1e,0x9a,0xbf,0xe1,0x5a,0x22,0x2b,0xb4,0xb9,0xd0 };
    const uint8_t IV[] = { 0xcf,0x5d,0x78,0x6b,0xae,0x85,0x80,0xf9,0xbb,0x87,0x06,0x6a,0x6c,0xf1,0x43,0x0f };
    const uint8_t PLAINTEXT[] = { 0x1c,0xd7,0x3b,0xdb,0x24,0x13,0x16,0xb0,0x77,0x1d,0x6c,0x8e,0x8f,0xd8,0x00,0x1c };
    const uint8_t CIPHERTEXT[] = { 0x30,0x67,0x6e,0x7a,0x02,0xf6,0x44,0x6c,0x2b,0x06,0xab,0xe6,0xf1,0xa9,0xee,0xf7 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-49", "[OFB][MCT][256][ENCRYPT][n49]") {
    const uint8_t KEY[] = { 0x1a,0xd6,0x82,0xa8,0x09,0xcc,0x7f,0xff,0xac,0x24,0x5c,0x5b,0x15,0x6d,0x69,0xc7,0x04,0xe6,0x51,0xa0,0x7b,0x84,0x5a,0xf6,0x94,0xe7,0xf1,0xc4,0xda,0x1d,0x57,0x27 };
    const uint8_t IV[] = { 0x30,0x67,0x6e,0x7a,0x02,0xf6,0x44,0x6c,0x2b,0x06,0xab,0xe6,0xf1,0xa9,0xee,0xf7 };
    const uint8_t PLAINTEXT[] = { 0x96,0x39,0xb0,0x10,0xd6,0xce,0x80,0x02,0xaf,0x3a,0xb7,0x57,0x61,0x73,0xdb,0xff };
    const uint8_t CIPHERTEXT[] = { 0x9a,0x4a,0xf6,0x59,0xa4,0xc1,0x6b,0xba,0xdd,0x5c,0xc5,0x16,0x6f,0x98,0x53,0x31 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-50", "[OFB][MCT][256][ENCRYPT][n50]") {
    const uint8_t KEY[] = { 0x67,0x1d,0x56,0x4d,0x5a,0x6b,0x7d,0x61,0x23,0xa7,0x3d,0x74,0x56,0xa9,0xda,0xe9,0x9e,0xac,0xa7,0xf9,0xdf,0x45,0x31,0x4c,0x49,0xbb,0x34,0xd2,0xb5,0x85,0x04,0x16 };
    const uint8_t IV[] = { 0x9a,0x4a,0xf6,0x59,0xa4,0xc1,0x6b,0xba,0xdd,0x5c,0xc5,0x16,0x6f,0x98,0x53,0x31 };
    const uint8_t PLAINTEXT[] = { 0x7d,0xcb,0xd4,0xe5,0x53,0xa7,0x02,0x9e,0x8f,0x83,0x61,0x2f,0x43,0xc4,0xb3,0x2e };
    const uint8_t CIPHERTEXT[] = { 0xfd,0x1b,0x93,0xea,0x3f,0xc4,0xf1,0xd4,0x7d,0x5c,0xbc,0xe6,0x7d,0x43,0x6d,0x5c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-51", "[OFB][MCT][256][ENCRYPT][n51]") {
    const uint8_t KEY[] = { 0x31,0xec,0x44,0xb2,0x83,0xee,0x42,0x0e,0x03,0xfd,0xf5,0x19,0x54,0x1b,0x85,0x8a,0x63,0xb7,0x34,0x13,0xe0,0x81,0xc0,0x98,0x34,0xe7,0x88,0x34,0xc8,0xc6,0x69,0x4a };
    const uint8_t IV[] = { 0xfd,0x1b,0x93,0xea,0x3f,0xc4,0xf1,0xd4,0x7d,0x5c,0xbc,0xe6,0x7d,0x43,0x6d,0x5c };
    const uint8_t PLAINTEXT[] = { 0x56,0xf1,0x12,0xff,0xd9,0x85,0x3f,0x6f,0x20,0x5a,0xc8,0x6d,0x02,0xb2,0x5f,0x63 };
    const uint8_t CIPHERTEXT[] = { 0x1f,0x8e,0x26,0x07,0x6b,0x45,0x5b,0x8d,0xa6,0x8d,0x94,0x04,0x8d,0x6a,0xd0,0x50 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-52", "[OFB][MCT][256][ENCRYPT][n52]") {
    const uint8_t KEY[] = { 0x79,0xfd,0xb4,0x5f,0xe3,0x42,0xbc,0x27,0x37,0x63,0xcf,0x35,0xa1,0x93,0xcf,0xe4,0x7c,0x39,0x12,0x14,0x8b,0xc4,0x9b,0x15,0x92,0x6a,0x1c,0x30,0x45,0xac,0xb9,0x1a };
    const uint8_t IV[] = { 0x1f,0x8e,0x26,0x07,0x6b,0x45,0x5b,0x8d,0xa6,0x8d,0x94,0x04,0x8d,0x6a,0xd0,0x50 };
    const uint8_t PLAINTEXT[] = { 0x48,0x11,0xf0,0xed,0x60,0xac,0xfe,0x29,0x34,0x9e,0x3a,0x2c,0xf5,0x88,0x4a,0x6e };
    const uint8_t CIPHERTEXT[] = { 0x19,0x21,0x93,0x19,0x99,0x76,0x12,0xa4,0xc6,0x86,0x26,0x89,0xc9,0x52,0x01,0xcf };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-53", "[OFB][MCT][256][ENCRYPT][n53]") {
    const uint8_t KEY[] = { 0x3c,0xba,0x4d,0x5a,0xeb,0x35,0x55,0x75,0xd3,0xa6,0x0a,0x77,0x73,0xfe,0x76,0xf7,0x65,0x18,0x81,0x0d,0x12,0xb2,0x89,0xb1,0x54,0xec,0x3a,0xb9,0x8c,0xfe,0xb8,0xd5 };
    const uint8_t IV[] = { 0x19,0x21,0x93,0x19,0x99,0x76,0x12,0xa4,0xc6,0x86,0x26,0x89,0xc9,0x52,0x01,0xcf };
    const uint8_t PLAINTEXT[] = { 0x45,0x47,0xf9,0x05,0x08,0x77,0xe9,0x52,0xe4,0xc5,0xc5,0x42,0xd2,0x6d,0xb9,0x13 };
    const uint8_t CIPHERTEXT[] = { 0x99,0x6a,0x1b,0x7e,0x07,0xd3,0x24,0xf7,0xa6,0x95,0x8d,0x81,0x16,0x73,0xa3,0xaa };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-54", "[OFB][MCT][256][ENCRYPT][n54]") {
    const uint8_t KEY[] = { 0x0b,0x32,0x1c,0x99,0x8d,0x72,0x30,0x14,0x8e,0x6e,0x61,0x6f,0x58,0xc2,0x6f,0xeb,0xfc,0x72,0x9a,0x73,0x15,0x61,0xad,0x46,0xf2,0x79,0xb7,0x38,0x9a,0x8d,0x1b,0x7f };
    const uint8_t IV[] = { 0x99,0x6a,0x1b,0x7e,0x07,0xd3,0x24,0xf7,0xa6,0x95,0x8d,0x81,0x16,0x73,0xa3,0xaa };
    const uint8_t PLAINTEXT[] = { 0x37,0x88,0x51,0xc3,0x66,0x47,0x65,0x61,0x5d,0xc8,0x6b,0x18,0x2b,0x3c,0x19,0x1c };
    const uint8_t CIPHERTEXT[] = { 0x5d,0x2f,0x9d,0xf9,0x9d,0x59,0xd8,0x66,0x6a,0xd2,0x16,0xa0,0x11,0xb2,0x54,0xee };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-55", "[OFB][MCT][256][ENCRYPT][n55]") {
    const uint8_t KEY[] = { 0x80,0x8a,0x29,0x4b,0x2b,0xcf,0x20,0x91,0xe2,0x7a,0x82,0x75,0x9c,0xa4,0x1f,0x36,0xa1,0x5d,0x07,0x8a,0x88,0x38,0x75,0x20,0x98,0xab,0xa1,0x98,0x8b,0x3f,0x4f,0x91 };
    const uint8_t IV[] = { 0x5d,0x2f,0x9d,0xf9,0x9d,0x59,0xd8,0x66,0x6a,0xd2,0x16,0xa0,0x11,0xb2,0x54,0xee };
    const uint8_t PLAINTEXT[] = { 0x8b,0xb8,0x35,0xd2,0xa6,0xbd,0x10,0x85,0x6c,0x14,0xe3,0x1a,0xc4,0x66,0x70,0xdd };
    const uint8_t CIPHERTEXT[] = { 0xcf,0x0e,0x85,0x4d,0xb3,0x8f,0x32,0x17,0x0b,0x6b,0x94,0x0a,0x81,0x62,0xee,0x1d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-56", "[OFB][MCT][256][ENCRYPT][n56]") {
    const uint8_t KEY[] = { 0xb2,0xb8,0x43,0xb1,0x87,0x83,0xd1,0xb8,0xf7,0x34,0x18,0x68,0x20,0x78,0x51,0x51,0x6e,0x53,0x82,0xc7,0x3b,0xb7,0x47,0x37,0x93,0xc0,0x35,0x92,0x0a,0x5d,0xa1,0x8c };
    const uint8_t IV[] = { 0xcf,0x0e,0x85,0x4d,0xb3,0x8f,0x32,0x17,0x0b,0x6b,0x94,0x0a,0x81,0x62,0xee,0x1d };
    const uint8_t PLAINTEXT[] = { 0x32,0x32,0x6a,0xfa,0xac,0x4c,0xf1,0x29,0x15,0x4e,0x9a,0x1d,0xbc,0xdc,0x4e,0x67 };
    const uint8_t CIPHERTEXT[] = { 0xab,0x9c,0xca,0x58,0xd7,0x5a,0x68,0x7b,0x5f,0x07,0xde,0x79,0xe4,0x08,0x65,0xfe };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-57", "[OFB][MCT][256][ENCRYPT][n57]") {
    const uint8_t KEY[] = { 0x44,0x50,0x82,0x00,0x22,0x4a,0x9f,0x75,0xdc,0x70,0x73,0x17,0x20,0xb1,0x98,0xc2,0xc5,0xcf,0x48,0x9f,0xec,0xed,0x2f,0x4c,0xcc,0xc7,0xeb,0xeb,0xee,0x55,0xc4,0x72 };
    const uint8_t IV[] = { 0xab,0x9c,0xca,0x58,0xd7,0x5a,0x68,0x7b,0x5f,0x07,0xde,0x79,0xe4,0x08,0x65,0xfe };
    const uint8_t PLAINTEXT[] = { 0xf6,0xe8,0xc1,0xb1,0xa5,0xc9,0x4e,0xcd,0x2b,0x44,0x6b,0x7f,0x00,0xc9,0xc9,0x93 };
    const uint8_t CIPHERTEXT[] = { 0xb0,0x3b,0x73,0x4f,0xdd,0xdd,0x11,0x88,0x3a,0xc3,0x96,0xc4,0x42,0x57,0xe1,0x3e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-58", "[OFB][MCT][256][ENCRYPT][n58]") {
    const uint8_t KEY[] = { 0x42,0x49,0x65,0x64,0x5a,0x51,0xcc,0x91,0xa2,0x86,0x74,0xcc,0x30,0xfc,0xfe,0x1e,0x75,0xf4,0x3b,0xd0,0x31,0x30,0x3e,0xc4,0xf6,0x04,0x7d,0x2f,0xac,0x02,0x25,0x4c };
    const uint8_t IV[] = { 0xb0,0x3b,0x73,0x4f,0xdd,0xdd,0x11,0x88,0x3a,0xc3,0x96,0xc4,0x42,0x57,0xe1,0x3e };
    const uint8_t PLAINTEXT[] = { 0x06,0x19,0xe7,0x64,0x78,0x1b,0x53,0xe4,0x7e,0xf6,0x07,0xdb,0x10,0x4d,0x66,0xdc };
    const uint8_t CIPHERTEXT[] = { 0x02,0xef,0x7b,0x42,0xee,0x83,0x0c,0xe6,0xe3,0x83,0xc0,0x41,0x55,0x65,0x68,0xe9 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-59", "[OFB][MCT][256][ENCRYPT][n59]") {
    const uint8_t KEY[] = { 0x0e,0xee,0x44,0x8d,0x9a,0x73,0x07,0x61,0x3e,0x66,0x81,0x30,0xe0,0x31,0x9d,0x8e,0x77,0x1b,0x40,0x92,0xdf,0xb3,0x32,0x22,0x15,0x87,0xbd,0x6e,0xf9,0x67,0x4d,0xa5 };
    const uint8_t IV[] = { 0x02,0xef,0x7b,0x42,0xee,0x83,0x0c,0xe6,0xe3,0x83,0xc0,0x41,0x55,0x65,0x68,0xe9 };
    const uint8_t PLAINTEXT[] = { 0x4c,0xa7,0x21,0xe9,0xc0,0x22,0xcb,0xf0,0x9c,0xe0,0xf5,0xfc,0xd0,0xcd,0x63,0x90 };
    const uint8_t CIPHERTEXT[] = { 0x4f,0xde,0xf5,0xf9,0xe6,0xdd,0xd8,0x7f,0xf9,0x1f,0xd7,0xd2,0x49,0x49,0xeb,0x98 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-60", "[OFB][MCT][256][ENCRYPT][n60]") {
    const uint8_t KEY[] = { 0x35,0x6a,0xec,0x4c,0xc5,0x74,0x0d,0x59,0xe6,0xaf,0x46,0xe2,0xf0,0x42,0x23,0x28,0x38,0xc5,0xb5,0x6b,0x39,0x6e,0xea,0x5d,0xec,0x98,0x6a,0xbc,0xb0,0x2e,0xa6,0x3d };
    const uint8_t IV[] = { 0x4f,0xde,0xf5,0xf9,0xe6,0xdd,0xd8,0x7f,0xf9,0x1f,0xd7,0xd2,0x49,0x49,0xeb,0x98 };
    const uint8_t PLAINTEXT[] = { 0x3b,0x84,0xa8,0xc1,0x5f,0x07,0x0a,0x38,0xd8,0xc9,0xc7,0xd2,0x10,0x73,0xbe,0xa6 };
    const uint8_t CIPHERTEXT[] = { 0x6d,0x4c,0x89,0xc5,0x08,0x4c,0x8f,0x6a,0x47,0x85,0x1e,0x3c,0x7b,0xa4,0xaa,0xac };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-61", "[OFB][MCT][256][ENCRYPT][n61]") {
    const uint8_t KEY[] = { 0x6a,0xc0,0x10,0xfe,0x68,0x3c,0xcd,0x8b,0xb6,0x1b,0x66,0xfc,0x2e,0x30,0x2f,0xa9,0x55,0x89,0x3c,0xae,0x31,0x22,0x65,0x37,0xab,0x1d,0x74,0x80,0xcb,0x8a,0x0c,0x91 };
    const uint8_t IV[] = { 0x6d,0x4c,0x89,0xc5,0x08,0x4c,0x8f,0x6a,0x47,0x85,0x1e,0x3c,0x7b,0xa4,0xaa,0xac };
    const uint8_t PLAINTEXT[] = { 0x5f,0xaa,0xfc,0xb2,0xad,0x48,0xc0,0xd2,0x50,0xb4,0x20,0x1e,0xde,0x72,0x0c,0x81 };
    const uint8_t CIPHERTEXT[] = { 0x9a,0xcb,0xa2,0xea,0x6c,0x26,0xb7,0x35,0xe6,0xf0,0x14,0x65,0x06,0x91,0x70,0x7b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-62", "[OFB][MCT][256][ENCRYPT][n62]") {
    const uint8_t KEY[] = { 0x11,0xc7,0xa2,0x1e,0xec,0x5d,0xde,0xc4,0x58,0x88,0x10,0xba,0xe2,0xc0,0x5f,0x3c,0xcf,0x42,0x9e,0x44,0x5d,0x04,0xd2,0x02,0x4d,0xed,0x60,0xe5,0xcd,0x1b,0x7c,0xea };
    const uint8_t IV[] = { 0x9a,0xcb,0xa2,0xea,0x6c,0x26,0xb7,0x35,0xe6,0xf0,0x14,0x65,0x06,0x91,0x70,0x7b };
    const uint8_t PLAINTEXT[] = { 0x7b,0x07,0xb2,0xe0,0x84,0x61,0x13,0x4f,0xee,0x93,0x76,0x46,0xcc,0xf0,0x70,0x95 };
    const uint8_t CIPHERTEXT[] = { 0x96,0x0f,0xd5,0xe1,0x1b,0xd7,0x3e,0x2a,0x27,0xc4,0x6f,0xee,0xdd,0x97,0xa8,0x4a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-63", "[OFB][MCT][256][ENCRYPT][n63]") {
    const uint8_t KEY[] = { 0xe9,0x0c,0xf4,0x76,0x52,0x86,0xee,0x28,0xc7,0xa7,0x7f,0x41,0xa5,0xaa,0x13,0x4b,0x59,0x4d,0x4b,0xa5,0x46,0xd3,0xec,0x28,0x6a,0x29,0x0f,0x0b,0x10,0x8c,0xd4,0xa0 };
    const uint8_t IV[] = { 0x96,0x0f,0xd5,0xe1,0x1b,0xd7,0x3e,0x2a,0x27,0xc4,0x6f,0xee,0xdd,0x97,0xa8,0x4a };
    const uint8_t PLAINTEXT[] = { 0xf8,0xcb,0x56,0x68,0xbe,0xdb,0x30,0xec,0x9f,0x2f,0x6f,0xfb,0x47,0x6a,0x4c,0x77 };
    const uint8_t CIPHERTEXT[] = { 0x8e,0x3c,0xb0,0xb7,0x86,0xa6,0xef,0xe1,0x78,0x4d,0x17,0xf6,0x05,0xac,0xe4,0x00 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-64", "[OFB][MCT][256][ENCRYPT][n64]") {
    const uint8_t KEY[] = { 0x56,0xef,0x5f,0xd0,0x88,0xa3,0x0a,0x28,0x36,0x99,0xb1,0x5a,0x34,0x08,0xa7,0xe9,0xd7,0x71,0xfb,0x12,0xc0,0x75,0x03,0xc9,0x12,0x64,0x18,0xfd,0x15,0x20,0x30,0xa0 };
    const uint8_t IV[] = { 0x8e,0x3c,0xb0,0xb7,0x86,0xa6,0xef,0xe1,0x78,0x4d,0x17,0xf6,0x05,0xac,0xe4,0x00 };
    const uint8_t PLAINTEXT[] = { 0xbf,0xe3,0xab,0xa6,0xda,0x25,0xe4,0x00,0xf1,0x3e,0xce,0x1b,0x91,0xa2,0xb4,0xa2 };
    const uint8_t CIPHERTEXT[] = { 0x6e,0x09,0x15,0xe7,0xe5,0x0e,0x69,0x5c,0x7a,0x7e,0xae,0x1a,0x1a,0xfc,0x83,0x5b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-65", "[OFB][MCT][256][ENCRYPT][n65]") {
    const uint8_t KEY[] = { 0x97,0xed,0x0e,0xd4,0x36,0x0d,0xf7,0x0b,0x5d,0x3d,0x40,0xe2,0x6a,0xf6,0x95,0x4b,0xb9,0x78,0xee,0xf5,0x25,0x7b,0x6a,0x95,0x68,0x1a,0xb6,0xe7,0x0f,0xdc,0xb3,0xfb };
    const uint8_t IV[] = { 0x6e,0x09,0x15,0xe7,0xe5,0x0e,0x69,0x5c,0x7a,0x7e,0xae,0x1a,0x1a,0xfc,0x83,0x5b };
    const uint8_t PLAINTEXT[] = { 0xc1,0x02,0x51,0x04,0xbe,0xae,0xfd,0x23,0x6b,0xa4,0xf1,0xb8,0x5e,0xfe,0x32,0xa2 };
    const uint8_t CIPHERTEXT[] = { 0xfe,0x90,0xec,0xc6,0x3f,0xf2,0x91,0x47,0x58,0x8c,0xa1,0xff,0xa3,0x15,0x9f,0xaf };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-66", "[OFB][MCT][256][ENCRYPT][n66]") {
    const uint8_t KEY[] = { 0xf6,0xbb,0x17,0x19,0x96,0xec,0x91,0x1c,0xd7,0x3f,0x9d,0xb8,0xa1,0x89,0xd4,0xd4,0x47,0xe8,0x02,0x33,0x1a,0x89,0xfb,0xd2,0x30,0x96,0x17,0x18,0xac,0xc9,0x2c,0x54 };
    const uint8_t IV[] = { 0xfe,0x90,0xec,0xc6,0x3f,0xf2,0x91,0x47,0x58,0x8c,0xa1,0xff,0xa3,0x15,0x9f,0xaf };
    const uint8_t PLAINTEXT[] = { 0x61,0x56,0x19,0xcd,0xa0,0xe1,0x66,0x17,0x8a,0x02,0xdd,0x5a,0xcb,0x7f,0x41,0x9f };
    const uint8_t CIPHERTEXT[] = { 0x06,0x41,0xfb,0xde,0x40,0x95,0xb7,0xee,0xe7,0xf9,0x2d,0x41,0xfa,0x55,0x67,0xb9 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-67", "[OFB][MCT][256][ENCRYPT][n67]") {
    const uint8_t KEY[] = { 0x4a,0xa7,0xd8,0x18,0x39,0xbe,0xbd,0x70,0xbb,0xa0,0xf9,0x97,0x17,0x8d,0xb3,0xaf,0x41,0xa9,0xf9,0xed,0x5a,0x1c,0x4c,0x3c,0xd7,0x6f,0x3a,0x59,0x56,0x9c,0x4b,0xed };
    const uint8_t IV[] = { 0x06,0x41,0xfb,0xde,0x40,0x95,0xb7,0xee,0xe7,0xf9,0x2d,0x41,0xfa,0x55,0x67,0xb9 };
    const uint8_t PLAINTEXT[] = { 0xbc,0x1c,0xcf,0x01,0xaf,0x52,0x2c,0x6c,0x6c,0x9f,0x64,0x2f,0xb6,0x04,0x67,0x7b };
    const uint8_t CIPHERTEXT[] = { 0x26,0xc1,0x85,0xa8,0x5f,0xd2,0x17,0xaa,0xc7,0x00,0x56,0x27,0xfa,0xdb,0xf1,0x33 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-68", "[OFB][MCT][256][ENCRYPT][n68]") {
    const uint8_t KEY[] = { 0x2e,0x90,0xbe,0x4f,0x82,0x9d,0xdc,0xe2,0x0e,0x3e,0xc5,0x2f,0x97,0xe8,0xa1,0x22,0x67,0x68,0x7c,0x45,0x05,0xce,0x5b,0x96,0x10,0x6f,0x6c,0x7e,0xac,0x47,0xba,0xde };
    const uint8_t IV[] = { 0x26,0xc1,0x85,0xa8,0x5f,0xd2,0x17,0xaa,0xc7,0x00,0x56,0x27,0xfa,0xdb,0xf1,0x33 };
    const uint8_t PLAINTEXT[] = { 0x64,0x37,0x66,0x57,0xbb,0x23,0x61,0x92,0xb5,0x9e,0x3c,0xb8,0x80,0x65,0x12,0x8d };
    const uint8_t CIPHERTEXT[] = { 0x6d,0xb4,0x6e,0x48,0x0b,0x65,0xca,0x4e,0x57,0x74,0xb4,0x84,0xda,0xf3,0x2e,0xd6 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-69", "[OFB][MCT][256][ENCRYPT][n69]") {
    const uint8_t KEY[] = { 0x61,0x15,0x3c,0x5e,0x27,0x68,0x1e,0xff,0xf4,0x93,0xc9,0x16,0xcb,0x9e,0x0f,0x49,0x0a,0xdc,0x12,0x0d,0x0e,0xab,0x91,0xd8,0x47,0x1b,0xd8,0xfa,0x76,0xb4,0x94,0x08 };
    const uint8_t IV[] = { 0x6d,0xb4,0x6e,0x48,0x0b,0x65,0xca,0x4e,0x57,0x74,0xb4,0x84,0xda,0xf3,0x2e,0xd6 };
    const uint8_t PLAINTEXT[] = { 0x4f,0x85,0x82,0x11,0xa5,0xf5,0xc2,0x1d,0xfa,0xad,0x0c,0x39,0x5c,0x76,0xae,0x6b };
    const uint8_t CIPHERTEXT[] = { 0xf3,0x4d,0x2a,0xbb,0x15,0x58,0x8d,0x93,0xf2,0x14,0x55,0x7b,0x46,0xa8,0x0c,0xd6 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-70", "[OFB][MCT][256][ENCRYPT][n70]") {
    const uint8_t KEY[] = { 0xa4,0x09,0xf6,0xc9,0x6f,0x8c,0xd6,0x38,0x99,0x7c,0xfd,0xc1,0xff,0x2e,0x40,0xd4,0xf9,0x91,0x38,0xb6,0x1b,0xf3,0x1c,0x4b,0xb5,0x0f,0x8d,0x81,0x30,0x1c,0x98,0xde };
    const uint8_t IV[] = { 0xf3,0x4d,0x2a,0xbb,0x15,0x58,0x8d,0x93,0xf2,0x14,0x55,0x7b,0x46,0xa8,0x0c,0xd6 };
    const uint8_t PLAINTEXT[] = { 0xc5,0x1c,0xca,0x97,0x48,0xe4,0xc8,0xc7,0x6d,0xef,0x34,0xd7,0x34,0xb0,0x4f,0x9d };
    const uint8_t CIPHERTEXT[] = { 0xf6,0xe7,0x02,0xfb,0xc7,0x50,0xc6,0x9c,0xe2,0xc7,0xc5,0x4e,0x44,0x8b,0xdf,0x7c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-71", "[OFB][MCT][256][ENCRYPT][n71]") {
    const uint8_t KEY[] = { 0x15,0xe9,0x63,0x98,0x5d,0x34,0xc5,0x9f,0xd2,0x07,0xad,0x7a,0xec,0xfc,0x0e,0x45,0x0f,0x76,0x3a,0x4d,0xdc,0xa3,0xda,0xd7,0x57,0xc8,0x48,0xcf,0x74,0x97,0x47,0xa2 };
    const uint8_t IV[] = { 0xf6,0xe7,0x02,0xfb,0xc7,0x50,0xc6,0x9c,0xe2,0xc7,0xc5,0x4e,0x44,0x8b,0xdf,0x7c };
    const uint8_t PLAINTEXT[] = { 0xb1,0xe0,0x95,0x51,0x32,0xb8,0x13,0xa7,0x4b,0x7b,0x50,0xbb,0x13,0xd2,0x4e,0x91 };
    const uint8_t CIPHERTEXT[] = { 0xa7,0x5e,0xd2,0x6a,0x81,0xe4,0x72,0x46,0xc6,0xd3,0x16,0xb5,0x4d,0x17,0xcb,0x86 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-72", "[OFB][MCT][256][ENCRYPT][n72]") {
    const uint8_t KEY[] = { 0xd4,0x02,0xe6,0x19,0x49,0xfa,0x0a,0x3f,0x7f,0x74,0x9f,0x22,0x02,0x04,0xdc,0x91,0xa8,0x28,0xe8,0x27,0x5d,0x47,0xa8,0x91,0x91,0x1b,0x5e,0x7a,0x39,0x80,0x8c,0x24 };
    const uint8_t IV[] = { 0xa7,0x5e,0xd2,0x6a,0x81,0xe4,0x72,0x46,0xc6,0xd3,0x16,0xb5,0x4d,0x17,0xcb,0x86 };
    const uint8_t PLAINTEXT[] = { 0xc1,0xeb,0x85,0x81,0x14,0xce,0xcf,0xa0,0xad,0x73,0x32,0x58,0xee,0xf8,0xd2,0xd4 };
    const uint8_t CIPHERTEXT[] = { 0x7b,0xe5,0x00,0x7f,0x73,0xe5,0xd8,0xa0,0xa2,0x6b,0xa4,0x04,0xfd,0xd1,0xce,0xdb };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-73", "[OFB][MCT][256][ENCRYPT][n73]") {
    const uint8_t KEY[] = { 0x53,0xd0,0xbf,0x56,0x61,0xcd,0xcf,0x0a,0x86,0x54,0x9f,0x40,0xee,0xa8,0xde,0xe9,0xd3,0xcd,0xe8,0x58,0x2e,0xa2,0x70,0x31,0x33,0x70,0xfa,0x7e,0xc4,0x51,0x42,0xff };
    const uint8_t IV[] = { 0x7b,0xe5,0x00,0x7f,0x73,0xe5,0xd8,0xa0,0xa2,0x6b,0xa4,0x04,0xfd,0xd1,0xce,0xdb };
    const uint8_t PLAINTEXT[] = { 0x87,0xd2,0x59,0x4f,0x28,0x37,0xc5,0x35,0xf9,0x20,0x00,0x62,0xec,0xac,0x02,0x78 };
    const uint8_t CIPHERTEXT[] = { 0x5c,0xed,0xf9,0x41,0x1f,0x76,0x55,0x52,0x9a,0x8d,0x1b,0x75,0xd5,0x84,0x9f,0x56 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-74", "[OFB][MCT][256][ENCRYPT][n74]") {
    const uint8_t KEY[] = { 0xaa,0x9a,0x57,0x8b,0x9d,0xb0,0xc3,0xb7,0x29,0x63,0xea,0x2f,0x00,0x25,0x8c,0xa3,0x8f,0x20,0x11,0x19,0x31,0xd4,0x25,0x63,0xa9,0xfd,0xe1,0x0b,0x11,0xd5,0xdd,0xa9 };
    const uint8_t IV[] = { 0x5c,0xed,0xf9,0x41,0x1f,0x76,0x55,0x52,0x9a,0x8d,0x1b,0x75,0xd5,0x84,0x9f,0x56 };
    const uint8_t PLAINTEXT[] = { 0xf9,0x4a,0xe8,0xdd,0xfc,0x7d,0x0c,0xbd,0xaf,0x37,0x75,0x6f,0xee,0x8d,0x52,0x4a };
    const uint8_t CIPHERTEXT[] = { 0xf0,0x24,0xce,0x21,0xa0,0x0f,0xa9,0xe9,0x20,0xf5,0xe6,0xe6,0x92,0x65,0x6a,0x91 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-75", "[OFB][MCT][256][ENCRYPT][n75]") {
    const uint8_t KEY[] = { 0xa1,0xce,0x98,0x80,0xd2,0x9c,0x35,0x5d,0x8a,0xa4,0x74,0xd2,0xca,0x35,0x46,0x95,0x7f,0x04,0xdf,0x38,0x91,0xdb,0x8c,0x8a,0x89,0x08,0x07,0xed,0x83,0xb0,0xb7,0x38 };
    const uint8_t IV[] = { 0xf0,0x24,0xce,0x21,0xa0,0x0f,0xa9,0xe9,0x20,0xf5,0xe6,0xe6,0x92,0x65,0x6a,0x91 };
    const uint8_t PLAINTEXT[] = { 0x0b,0x54,0xcf,0x0b,0x4f,0x2c,0xf6,0xea,0xa3,0xc7,0x9e,0xfd,0xca,0x10,0xca,0x36 };
    const uint8_t CIPHERTEXT[] = { 0xbf,0xfd,0xf3,0xcc,0x00,0x46,0xe1,0xb4,0x82,0xc9,0x55,0x5f,0x73,0xc1,0x36,0x61 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-76", "[OFB][MCT][256][ENCRYPT][n76]") {
    const uint8_t KEY[] = { 0x06,0x21,0x8b,0xdb,0x46,0xfb,0xd7,0xdf,0x65,0x74,0x0b,0x97,0x64,0xd8,0x4f,0x88,0xc0,0xf9,0x2c,0xf4,0x91,0x9d,0x6d,0x3e,0x0b,0xc1,0x52,0xb2,0xf0,0x71,0x81,0x59 };
    const uint8_t IV[] = { 0xbf,0xfd,0xf3,0xcc,0x00,0x46,0xe1,0xb4,0x82,0xc9,0x55,0x5f,0x73,0xc1,0x36,0x61 };
    const uint8_t PLAINTEXT[] = { 0xa7,0xef,0x13,0x5b,0x94,0x67,0xe2,0x82,0xef,0xd0,0x7f,0x45,0xae,0xed,0x09,0x1d };
    const uint8_t CIPHERTEXT[] = { 0x84,0x72,0x30,0x11,0xf5,0x32,0x9e,0x7c,0xea,0x3a,0x96,0x09,0x11,0xba,0x8c,0x11 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-77", "[OFB][MCT][256][ENCRYPT][n77]") {
    const uint8_t KEY[] = { 0xea,0x15,0x8a,0x10,0x9e,0x91,0x92,0x83,0xb5,0x8e,0x01,0x2f,0x31,0x84,0x89,0x4c,0x44,0x8b,0x1c,0xe5,0x64,0xaf,0xf3,0x42,0xe1,0xfb,0xc4,0xbb,0xe1,0xcb,0x0d,0x48 };
    const uint8_t IV[] = { 0x84,0x72,0x30,0x11,0xf5,0x32,0x9e,0x7c,0xea,0x3a,0x96,0x09,0x11,0xba,0x8c,0x11 };
    const uint8_t PLAINTEXT[] = { 0xec,0x34,0x01,0xcb,0xd8,0x6a,0x45,0x5c,0xd0,0xfa,0x0a,0xb8,0x55,0x5c,0xc6,0xc4 };
    const uint8_t CIPHERTEXT[] = { 0x4e,0x07,0x72,0x62,0x5d,0xa7,0x88,0xe2,0x88,0xb7,0x9d,0xb6,0x61,0xc4,0xc8,0x49 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-78", "[OFB][MCT][256][ENCRYPT][n78]") {
    const uint8_t KEY[] = { 0xed,0xb8,0x12,0x4f,0x90,0x9f,0x0c,0x02,0xb0,0x0f,0xaf,0xda,0xf4,0x46,0xeb,0x18,0x0a,0x8c,0x6e,0x87,0x39,0x08,0x7b,0xa0,0x69,0x4c,0x59,0x0d,0x80,0x0f,0xc5,0x01 };
    const uint8_t IV[] = { 0x4e,0x07,0x72,0x62,0x5d,0xa7,0x88,0xe2,0x88,0xb7,0x9d,0xb6,0x61,0xc4,0xc8,0x49 };
    const uint8_t PLAINTEXT[] = { 0x07,0xad,0x98,0x5f,0x0e,0x0e,0x9e,0x81,0x05,0x81,0xae,0xf5,0xc5,0xc2,0x62,0x54 };
    const uint8_t CIPHERTEXT[] = { 0xb1,0x5d,0xb5,0x93,0x14,0x7f,0x44,0xdf,0x29,0x1b,0x42,0xcc,0xa2,0xc8,0xb4,0x8b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-79", "[OFB][MCT][256][ENCRYPT][n79]") {
    const uint8_t KEY[] = { 0xe5,0x4b,0x82,0x32,0xe0,0x17,0x85,0xc9,0x61,0x5f,0x8a,0x3a,0x72,0xba,0x41,0x38,0xbb,0xd1,0xdb,0x14,0x2d,0x77,0x3f,0x7f,0x40,0x57,0x1b,0xc1,0x22,0xc7,0x71,0x8a };
    const uint8_t IV[] = { 0xb1,0x5d,0xb5,0x93,0x14,0x7f,0x44,0xdf,0x29,0x1b,0x42,0xcc,0xa2,0xc8,0xb4,0x8b };
    const uint8_t PLAINTEXT[] = { 0x08,0xf3,0x90,0x7d,0x70,0x88,0x89,0xcb,0xd1,0x50,0x25,0xe0,0x86,0xfc,0xaa,0x20 };
    const uint8_t CIPHERTEXT[] = { 0x63,0x16,0xff,0xe1,0xad,0x23,0x41,0x9e,0xc9,0xea,0x34,0x36,0x25,0x13,0x33,0xbc };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-80", "[OFB][MCT][256][ENCRYPT][n80]") {
    const uint8_t KEY[] = { 0x31,0xd3,0x0d,0xcb,0x12,0x58,0xdb,0x4c,0x3c,0x14,0x50,0x68,0x25,0x7c,0x7e,0x82,0xd8,0xc7,0x24,0xf5,0x80,0x54,0x7e,0xe1,0x89,0xbd,0x2f,0xf7,0x07,0xd4,0x42,0x36 };
    const uint8_t IV[] = { 0x63,0x16,0xff,0xe1,0xad,0x23,0x41,0x9e,0xc9,0xea,0x34,0x36,0x25,0x13,0x33,0xbc };
    const uint8_t PLAINTEXT[] = { 0xd4,0x98,0x8f,0xf9,0xf2,0x4f,0x5e,0x85,0x5d,0x4b,0xda,0x52,0x57,0xc6,0x3f,0xba };
    const uint8_t CIPHERTEXT[] = { 0x8b,0x87,0xee,0xba,0x31,0x12,0xc3,0x1a,0x5c,0x2a,0xb9,0x0c,0x25,0xa5,0x43,0x1a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-81", "[OFB][MCT][256][ENCRYPT][n81]") {
    const uint8_t KEY[] = { 0x6e,0x28,0x48,0xfd,0xc3,0xbd,0x6a,0x60,0x81,0x35,0x52,0x62,0x83,0x43,0xd9,0xb6,0x53,0x40,0xca,0x4f,0xb1,0x46,0xbd,0xfb,0xd5,0x97,0x96,0xfb,0x22,0x71,0x01,0x2c };
    const uint8_t IV[] = { 0x8b,0x87,0xee,0xba,0x31,0x12,0xc3,0x1a,0x5c,0x2a,0xb9,0x0c,0x25,0xa5,0x43,0x1a };
    const uint8_t PLAINTEXT[] = { 0x5f,0xfb,0x45,0x36,0xd1,0xe5,0xb1,0x2c,0xbd,0x21,0x02,0x0a,0xa6,0x3f,0xa7,0x34 };
    const uint8_t CIPHERTEXT[] = { 0x64,0x67,0x70,0x85,0x90,0x6e,0xc7,0xa8,0xcd,0x70,0x33,0xb0,0x41,0x89,0xc7,0xdd };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-82", "[OFB][MCT][256][ENCRYPT][n82]") {
    const uint8_t KEY[] = { 0xb2,0xc9,0x07,0xf7,0xe4,0xa7,0x5d,0x0c,0xb8,0x00,0xb9,0x74,0x60,0xef,0x79,0xfc,0x37,0x27,0xba,0xca,0x21,0x28,0x7a,0x53,0x18,0xe7,0xa5,0x4b,0x63,0xf8,0xc6,0xf1 };
    const uint8_t IV[] = { 0x64,0x67,0x70,0x85,0x90,0x6e,0xc7,0xa8,0xcd,0x70,0x33,0xb0,0x41,0x89,0xc7,0xdd };
    const uint8_t PLAINTEXT[] = { 0xdc,0xe1,0x4f,0x0a,0x27,0x1a,0x37,0x6c,0x39,0x35,0xeb,0x16,0xe3,0xac,0xa0,0x4a };
    const uint8_t CIPHERTEXT[] = { 0x43,0x73,0x3f,0xac,0xf2,0x12,0x1c,0x7a,0xd9,0x2e,0x00,0x35,0x74,0x18,0xf8,0xc2 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-83", "[OFB][MCT][256][ENCRYPT][n83]") {
    const uint8_t KEY[] = { 0x77,0x34,0xbb,0x14,0x9b,0x76,0x79,0xaf,0x9c,0x9e,0x6f,0xff,0x9c,0xed,0x85,0xb7,0x74,0x54,0x85,0x66,0xd3,0x3a,0x66,0x29,0xc1,0xc9,0xa5,0x7e,0x17,0xe0,0x3e,0x33 };
    const uint8_t IV[] = { 0x43,0x73,0x3f,0xac,0xf2,0x12,0x1c,0x7a,0xd9,0x2e,0x00,0x35,0x74,0x18,0xf8,0xc2 };
    const uint8_t PLAINTEXT[] = { 0xc5,0xfd,0xbc,0xe3,0x7f,0xd1,0x24,0xa3,0x24,0x9e,0xd6,0x8b,0xfc,0x02,0xfc,0x4b };
    const uint8_t CIPHERTEXT[] = { 0x6e,0x76,0x23,0xc1,0x5f,0x23,0x7e,0xb2,0x8b,0x9b,0xf3,0xde,0xa9,0xfe,0x96,0x37 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-84", "[OFB][MCT][256][ENCRYPT][n84]") {
    const uint8_t KEY[] = { 0x21,0xea,0x14,0xcd,0xa0,0x62,0xf2,0x88,0x29,0xa7,0xbb,0x58,0xd0,0x4b,0xe9,0x89,0x1a,0x22,0xa6,0xa7,0x8c,0x19,0x18,0x9b,0x4a,0x52,0x56,0xa0,0xbe,0x1e,0xa8,0x04 };
    const uint8_t IV[] = { 0x6e,0x76,0x23,0xc1,0x5f,0x23,0x7e,0xb2,0x8b,0x9b,0xf3,0xde,0xa9,0xfe,0x96,0x37 };
    const uint8_t PLAINTEXT[] = { 0x56,0xde,0xaf,0xd9,0x3b,0x14,0x8b,0x27,0xb5,0x39,0xd4,0xa7,0x4c,0xa6,0x6c,0x3e };
    const uint8_t CIPHERTEXT[] = { 0x3e,0x71,0x8a,0x8d,0x49,0x42,0x0c,0x25,0xdd,0xbf,0x60,0x34,0xf2,0x0c,0xa8,0xd1 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-85", "[OFB][MCT][256][ENCRYPT][n85]") {
    const uint8_t KEY[] = { 0x09,0x1b,0xc8,0xfa,0x03,0xc8,0xfa,0x8f,0xe2,0x6b,0xad,0xd8,0xec,0xca,0x71,0x58,0x24,0x53,0x2c,0x2a,0xc5,0x5b,0x14,0xbe,0x97,0xed,0x36,0x94,0x4c,0x12,0x00,0xd5 };
    const uint8_t IV[] = { 0x3e,0x71,0x8a,0x8d,0x49,0x42,0x0c,0x25,0xdd,0xbf,0x60,0x34,0xf2,0x0c,0xa8,0xd1 };
    const uint8_t PLAINTEXT[] = { 0x28,0xf1,0xdc,0x37,0xa3,0xaa,0x08,0x07,0xcb,0xcc,0x16,0x80,0x3c,0x81,0x98,0xd1 };
    const uint8_t CIPHERTEXT[] = { 0xa0,0x63,0x36,0x13,0x45,0x90,0xb5,0x69,0xe0,0x4e,0xda,0xa2,0xeb,0x2b,0x41,0x19 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-86", "[OFB][MCT][256][ENCRYPT][n86]") {
    const uint8_t KEY[] = { 0x20,0x41,0x98,0x90,0x31,0x13,0x15,0x97,0xcc,0x3f,0xb8,0x45,0x26,0x7a,0x75,0xc6,0x84,0x30,0x1a,0x39,0x80,0xcb,0xa1,0xd7,0x77,0xa3,0xec,0x36,0xa7,0x39,0x41,0xcc };
    const uint8_t IV[] = { 0xa0,0x63,0x36,0x13,0x45,0x90,0xb5,0x69,0xe0,0x4e,0xda,0xa2,0xeb,0x2b,0x41,0x19 };
    const uint8_t PLAINTEXT[] = { 0x29,0x5a,0x50,0x6a,0x32,0xdb,0xef,0x18,0x2e,0x54,0x15,0x9d,0xca,0xb0,0x04,0x9e };
    const uint8_t CIPHERTEXT[] = { 0x76,0xb6,0xee,0xd4,0x45,0x9d,0x22,0xdd,0xcb,0x71,0x2d,0x36,0x7d,0xba,0x9e,0x57 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-87", "[OFB][MCT][256][ENCRYPT][n87]") {
    const uint8_t KEY[] = { 0x79,0x80,0x63,0xca,0xa2,0x40,0x7b,0x6b,0x24,0xf2,0x48,0xcf,0x9b,0x9d,0x4d,0x18,0xf2,0x86,0xf4,0xed,0xc5,0x56,0x83,0x0a,0xbc,0xd2,0xc1,0x00,0xda,0x83,0xdf,0x9b };
    const uint8_t IV[] = { 0x76,0xb6,0xee,0xd4,0x45,0x9d,0x22,0xdd,0xcb,0x71,0x2d,0x36,0x7d,0xba,0x9e,0x57 };
    const uint8_t PLAINTEXT[] = { 0x59,0xc1,0xfb,0x5a,0x93,0x53,0x6e,0xfc,0xe8,0xcd,0xf0,0x8a,0xbd,0xe7,0x38,0xde };
    const uint8_t CIPHERTEXT[] = { 0xa3,0xfe,0xf4,0xb3,0x71,0x1a,0xd0,0x64,0xe6,0xa2,0x82,0xd4,0x5c,0xd8,0x1d,0x7d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-88", "[OFB][MCT][256][ENCRYPT][n88]") {
    const uint8_t KEY[] = { 0xb8,0xd6,0xe9,0xf6,0x0f,0x7d,0x2f,0xc3,0xa8,0x43,0xc8,0xe2,0x43,0xc4,0xbd,0xd8,0x51,0x78,0x00,0x5e,0xb4,0x4c,0x53,0x6e,0x5a,0x70,0x43,0xd4,0x86,0x5b,0xc2,0xe6 };
    const uint8_t IV[] = { 0xa3,0xfe,0xf4,0xb3,0x71,0x1a,0xd0,0x64,0xe6,0xa2,0x82,0xd4,0x5c,0xd8,0x1d,0x7d };
    const uint8_t PLAINTEXT[] = { 0xc1,0x56,0x8a,0x3c,0xad,0x3d,0x54,0xa8,0x8c,0xb1,0x80,0x2d,0xd8,0x59,0xf0,0xc0 };
    const uint8_t CIPHERTEXT[] = { 0x68,0x5d,0x79,0x24,0xa0,0x1b,0x09,0x77,0x5a,0xd1,0x93,0x35,0x05,0x58,0xe5,0x32 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-89", "[OFB][MCT][256][ENCRYPT][n89]") {
    const uint8_t KEY[] = { 0x63,0x1a,0xc9,0x91,0xe7,0x63,0xe2,0xad,0x05,0x22,0x92,0xc9,0x94,0xc6,0xd1,0x3d,0x39,0x25,0x79,0x7a,0x14,0x57,0x5a,0x19,0x00,0xa1,0xd0,0xe1,0x83,0x03,0x27,0xd4 };
    const uint8_t IV[] = { 0x68,0x5d,0x79,0x24,0xa0,0x1b,0x09,0x77,0x5a,0xd1,0x93,0x35,0x05,0x58,0xe5,0x32 };
    const uint8_t PLAINTEXT[] = { 0xdb,0xcc,0x20,0x67,0xe8,0x1e,0xcd,0x6e,0xad,0x61,0x5a,0x2b,0xd7,0x02,0x6c,0xe5 };
    const uint8_t CIPHERTEXT[] = { 0xef,0xd3,0x9a,0x52,0x2a,0xc0,0x70,0x90,0x23,0x9d,0xcb,0x8e,0xd5,0xb9,0x8b,0xc2 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-90", "[OFB][MCT][256][ENCRYPT][n90]") {
    const uint8_t KEY[] = { 0xe1,0xa3,0x54,0x60,0x57,0x30,0x89,0x42,0x56,0x10,0x6e,0x01,0xfb,0xb6,0x8a,0x4b,0xd6,0xf6,0xe3,0x28,0x3e,0x97,0x2a,0x89,0x23,0x3c,0x1b,0x6f,0x56,0xba,0xac,0x16 };
    const uint8_t IV[] = { 0xef,0xd3,0x9a,0x52,0x2a,0xc0,0x70,0x90,0x23,0x9d,0xcb,0x8e,0xd5,0xb9,0x8b,0xc2 };
    const uint8_t PLAINTEXT[] = { 0x82,0xb9,0x9d,0xf1,0xb0,0x53,0x6b,0xef,0x53,0x32,0xfc,0xc8,0x6f,0x70,0x5b,0x76 };
    const uint8_t CIPHERTEXT[] = { 0xda,0xad,0x7a,0x04,0x11,0xbf,0xb6,0xed,0x1d,0x1d,0xec,0xd3,0xcd,0xaf,0x10,0xca };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-91", "[OFB][MCT][256][ENCRYPT][n91]") {
    const uint8_t KEY[] = { 0x4a,0x2f,0x95,0xdd,0xe1,0x87,0x1c,0xa6,0x28,0xd3,0xff,0x0e,0x38,0x8d,0xb7,0x0d,0x0c,0x5b,0x99,0x2c,0x2f,0x28,0x9c,0x64,0x3e,0x21,0xf7,0xbc,0x9b,0x15,0xbc,0xdc };
    const uint8_t IV[] = { 0xda,0xad,0x7a,0x04,0x11,0xbf,0xb6,0xed,0x1d,0x1d,0xec,0xd3,0xcd,0xaf,0x10,0xca };
    const uint8_t PLAINTEXT[] = { 0xab,0x8c,0xc1,0xbd,0xb6,0xb7,0x95,0xe4,0x7e,0xc3,0x91,0x0f,0xc3,0x3b,0x3d,0x46 };
    const uint8_t CIPHERTEXT[] = { 0xf3,0x55,0xaa,0x26,0xa5,0x9f,0x90,0xe5,0x2f,0x09,0xa1,0xe4,0x23,0xef,0xb4,0x64 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-92", "[OFB][MCT][256][ENCRYPT][n92]") {
    const uint8_t KEY[] = { 0x50,0x9b,0x76,0xb8,0xfb,0xb8,0x76,0xed,0x69,0xe2,0x23,0x46,0x65,0x44,0x7b,0xf9,0xff,0x0e,0x33,0x0a,0x8a,0xb7,0x0c,0x81,0x11,0x28,0x56,0x58,0xb8,0xfa,0x08,0xb8 };
    const uint8_t IV[] = { 0xf3,0x55,0xaa,0x26,0xa5,0x9f,0x90,0xe5,0x2f,0x09,0xa1,0xe4,0x23,0xef,0xb4,0x64 };
    const uint8_t PLAINTEXT[] = { 0x1a,0xb4,0xe3,0x65,0x1a,0x3f,0x6a,0x4b,0x41,0x31,0xdc,0x48,0x5d,0xc9,0xcc,0xf4 };
    const uint8_t CIPHERTEXT[] = { 0xd1,0xb0,0xc4,0xe6,0x29,0xe9,0x55,0x16,0x0c,0x80,0x7e,0xa6,0xee,0x1b,0x9d,0xc8 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-93", "[OFB][MCT][256][ENCRYPT][n93]") {
    const uint8_t KEY[] = { 0x57,0x50,0x30,0x17,0xe8,0x1b,0xdd,0xa3,0xc9,0x31,0x5b,0x18,0xad,0xd9,0xea,0x21,0x2e,0xbe,0xf7,0xec,0xa3,0x5e,0x59,0x97,0x1d,0xa8,0x28,0xfe,0x56,0xe1,0x95,0x70 };
    const uint8_t IV[] = { 0xd1,0xb0,0xc4,0xe6,0x29,0xe9,0x55,0x16,0x0c,0x80,0x7e,0xa6,0xee,0x1b,0x9d,0xc8 };
    const uint8_t PLAINTEXT[] = { 0x07,0xcb,0x46,0xaf,0x13,0xa3,0xab,0x4e,0xa0,0xd3,0x78,0x5e,0xc8,0x9d,0x91,0xd8 };
    const uint8_t CIPHERTEXT[] = { 0xab,0x7f,0xff,0x36,0xe5,0xaa,0xa2,0x7f,0xaf,0x56,0x50,0x86,0x9e,0x9b,0x9e,0x3c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-94", "[OFB][MCT][256][ENCRYPT][n94]") {
    const uint8_t KEY[] = { 0x28,0xa0,0xc1,0x74,0x0b,0x33,0x8d,0xfe,0x01,0x9e,0x06,0xda,0x20,0x13,0x39,0xea,0x85,0xc1,0x08,0xda,0x46,0xf4,0xfb,0xe8,0xb2,0xfe,0x78,0x78,0xc8,0x7a,0x0b,0x4c };
    const uint8_t IV[] = { 0xab,0x7f,0xff,0x36,0xe5,0xaa,0xa2,0x7f,0xaf,0x56,0x50,0x86,0x9e,0x9b,0x9e,0x3c };
    const uint8_t PLAINTEXT[] = { 0x7f,0xf0,0xf1,0x63,0xe3,0x28,0x50,0x5d,0xc8,0xaf,0x5d,0xc2,0x8d,0xca,0xd3,0xcb };
    const uint8_t CIPHERTEXT[] = { 0xfd,0x53,0x83,0xb5,0xc1,0x80,0xdb,0x75,0xa5,0x8a,0xa6,0x64,0x89,0x3c,0x8b,0xff };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-95", "[OFB][MCT][256][ENCRYPT][n95]") {
    const uint8_t KEY[] = { 0x1c,0x9d,0xb4,0x7e,0x9b,0x59,0xb5,0x6b,0x05,0x5e,0x47,0xf3,0x4d,0xdd,0x7c,0x01,0x78,0x92,0x8b,0x6f,0x87,0x74,0x20,0x9d,0x17,0x74,0xde,0x1c,0x41,0x46,0x80,0xb3 };
    const uint8_t IV[] = { 0xfd,0x53,0x83,0xb5,0xc1,0x80,0xdb,0x75,0xa5,0x8a,0xa6,0x64,0x89,0x3c,0x8b,0xff };
    const uint8_t PLAINTEXT[] = { 0x34,0x3d,0x75,0x0a,0x90,0x6a,0x38,0x95,0x04,0xc0,0x41,0x29,0x6d,0xce,0x45,0xeb };
    const uint8_t CIPHERTEXT[] = { 0xfb,0x99,0x06,0x0d,0x66,0x5e,0xa8,0xc0,0x06,0x60,0x0a,0x14,0x64,0xb7,0x3c,0x99 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-96", "[OFB][MCT][256][ENCRYPT][n96]") {
    const uint8_t KEY[] = { 0xe4,0x49,0x99,0x39,0x71,0xb8,0x98,0x15,0xba,0x17,0xb6,0x25,0x7f,0x28,0x72,0x59,0x83,0x0b,0x8d,0x62,0xe1,0x2a,0x88,0x5d,0x11,0x14,0xd4,0x08,0x25,0xf1,0xbc,0x2a };
    const uint8_t IV[] = { 0xfb,0x99,0x06,0x0d,0x66,0x5e,0xa8,0xc0,0x06,0x60,0x0a,0x14,0x64,0xb7,0x3c,0x99 };
    const uint8_t PLAINTEXT[] = { 0xf8,0xd4,0x2d,0x47,0xea,0xe1,0x2d,0x7e,0xbf,0x49,0xf1,0xd6,0x32,0xf5,0x0e,0x58 };
    const uint8_t CIPHERTEXT[] = { 0x1e,0x39,0x1e,0x0f,0x0e,0xbf,0x26,0x7e,0x76,0x78,0xb0,0x6d,0x28,0x6a,0x0d,0x08 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-97", "[OFB][MCT][256][ENCRYPT][n97]") {
    const uint8_t KEY[] = { 0x43,0x33,0xb9,0x87,0x98,0x80,0x92,0x33,0x9e,0xa9,0x5f,0x16,0xfd,0xf0,0xbb,0x56,0x9d,0x32,0x93,0x6d,0xef,0x95,0xae,0x23,0x67,0x6c,0x64,0x65,0x0d,0x9b,0xb1,0x22 };
    const uint8_t IV[] = { 0x1e,0x39,0x1e,0x0f,0x0e,0xbf,0x26,0x7e,0x76,0x78,0xb0,0x6d,0x28,0x6a,0x0d,0x08 };
    const uint8_t PLAINTEXT[] = { 0xa7,0x7a,0x20,0xbe,0xe9,0x38,0x0a,0x26,0x24,0xbe,0xe9,0x33,0x82,0xd8,0xc9,0x0f };
    const uint8_t CIPHERTEXT[] = { 0x4d,0x61,0x96,0x9f,0x35,0xef,0x19,0x6b,0xfe,0x19,0xec,0x95,0x7f,0xd8,0x8f,0x22 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-98", "[OFB][MCT][256][ENCRYPT][n98]") {
    const uint8_t KEY[] = { 0x26,0x7a,0xa4,0xc0,0x4f,0x61,0x73,0x33,0xc3,0xf9,0x5b,0xa6,0xf3,0xf4,0x38,0x12,0xd0,0x53,0x05,0xf2,0xda,0x7a,0xb7,0x48,0x99,0x75,0x88,0xf0,0x72,0x43,0x3e,0x00 };
    const uint8_t IV[] = { 0x4d,0x61,0x96,0x9f,0x35,0xef,0x19,0x6b,0xfe,0x19,0xec,0x95,0x7f,0xd8,0x8f,0x22 };
    const uint8_t PLAINTEXT[] = { 0x65,0x49,0x1d,0x47,0xd7,0xe1,0xe1,0x00,0x5d,0x50,0x04,0xb0,0x0e,0x04,0x83,0x44 };
    const uint8_t CIPHERTEXT[] = { 0x77,0x0a,0xee,0x31,0x70,0xca,0x16,0xd7,0xd0,0xcf,0xe3,0xb5,0x08,0x27,0x00,0xfd };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-ENCRYPT-99", "[OFB][MCT][256][ENCRYPT][n99]") {
    const uint8_t KEY[] = { 0xd3,0x87,0x49,0x31,0x79,0xcf,0x7b,0xc1,0xb5,0x50,0xc0,0xf8,0x94,0x53,0x21,0xe5,0xa7,0x59,0xeb,0xc3,0xaa,0xb0,0xa1,0x9f,0x49,0xba,0x6b,0x45,0x7a,0x64,0x3e,0xfd };
    const uint8_t IV[] = { 0x77,0x0a,0xee,0x31,0x70,0xca,0x16,0xd7,0xd0,0xcf,0xe3,0xb5,0x08,0x27,0x00,0xfd };
    const uint8_t PLAINTEXT[] = { 0xf5,0xfd,0xed,0xf1,0x36,0xae,0x08,0xf2,0x76,0xa9,0x9b,0x5e,0x67,0xa7,0x19,0xf7 };
    const uint8_t CIPHERTEXT[] = { 0x5f,0xe7,0x77,0x2b,0xc8,0x80,0x7a,0x9f,0xcb,0x5f,0x35,0xcf,0x23,0xef,0x3c,0x73 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-0", "[OFB][MCT][256][DECRYPT][n0]") {
    const uint8_t KEY[] = { 0x8e,0xda,0x00,0x5a,0x16,0xf5,0xd0,0xcc,0x62,0x72,0x7e,0x92,0xde,0xd4,0x12,0xe8,0xe7,0xd9,0xe0,0x1f,0x98,0x00,0x00,0x43,0xe0,0x49,0xff,0xfc,0xd8,0x3c,0xd4,0xb2 };
    const uint8_t IV[] = { 0x57,0xd4,0x04,0xae,0x6d,0xa9,0x7c,0x9e,0xd3,0x15,0xa1,0x37,0x39,0x95,0x4c,0xf9 };
    const uint8_t PLAINTEXT[] = { 0xe6,0x8e,0xe3,0xc8,0xca,0xbb,0x00,0xe4,0x1b,0xe4,0x36,0x49,0x9a,0xc4,0x7d,0x5c };
    const uint8_t CIPHERTEXT[] = { 0x53,0xde,0x1c,0x31,0x37,0x45,0xec,0xf3,0x99,0x63,0x05,0x94,0x35,0x54,0x1f,0xba };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-1", "[OFB][MCT][256][DECRYPT][n1]") {
    const uint8_t KEY[] = { 0xf5,0x3e,0x8b,0x66,0xb8,0x42,0xc9,0x65,0xaf,0xf7,0x98,0xcc,0xc5,0xdc,0x2b,0x1d,0x01,0x57,0x03,0xd7,0x52,0xbb,0x00,0xa7,0xfb,0xad,0xc9,0xb5,0x42,0xf8,0xa9,0xee };
    const uint8_t IV[] = { 0xe6,0x8e,0xe3,0xc8,0xca,0xbb,0x00,0xe4,0x1b,0xe4,0x36,0x49,0x9a,0xc4,0x7d,0x5c };
    const uint8_t PLAINTEXT[] = { 0x4e,0x30,0x8f,0x73,0x65,0x0d,0x6b,0xd4,0x3d,0xbe,0xfc,0x85,0x6c,0x9b,0x1d,0x79 };
    const uint8_t CIPHERTEXT[] = { 0x7b,0xe4,0x8b,0x3c,0xae,0xb7,0x19,0xa9,0xcd,0x85,0xe6,0x5e,0x1b,0x08,0x39,0xf5 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-2", "[OFB][MCT][256][DECRYPT][n2]") {
    const uint8_t KEY[] = { 0xc5,0xd0,0xaf,0xd4,0xc6,0x84,0xc6,0x23,0x30,0x0a,0x29,0xad,0x1d,0x53,0xbf,0xdc,0x4f,0x67,0x8c,0xa4,0x37,0xb6,0x6b,0x73,0xc6,0x13,0x35,0x30,0x2e,0x63,0xb4,0x97 };
    const uint8_t IV[] = { 0x4e,0x30,0x8f,0x73,0x65,0x0d,0x6b,0xd4,0x3d,0xbe,0xfc,0x85,0x6c,0x9b,0x1d,0x79 };
    const uint8_t PLAINTEXT[] = { 0xac,0x6e,0x3b,0xde,0x5b,0x6b,0xc6,0xfb,0x03,0x5e,0x50,0x0f,0x0c,0xbc,0x73,0x72 };
    const uint8_t CIPHERTEXT[] = { 0x30,0xee,0x24,0xb2,0x7e,0xc6,0x0f,0x46,0x9f,0xfd,0xb1,0x61,0xd8,0x8f,0x94,0xc1 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-3", "[OFB][MCT][256][DECRYPT][n3]") {
    const uint8_t KEY[] = { 0x2e,0x9b,0x8e,0xc2,0x86,0x4e,0x5e,0xbf,0xe0,0xa1,0x3c,0xbc,0x17,0xbf,0x4e,0x50,0xe3,0x09,0xb7,0x7a,0x6c,0xdd,0xad,0x88,0xc5,0x4d,0x65,0x3f,0x22,0xdf,0xc7,0xe5 };
    const uint8_t IV[] = { 0xac,0x6e,0x3b,0xde,0x5b,0x6b,0xc6,0xfb,0x03,0x5e,0x50,0x0f,0x0c,0xbc,0x73,0x72 };
    const uint8_t PLAINTEXT[] = { 0x65,0x15,0x6e,0x82,0xc4,0x8f,0x01,0x6a,0x8f,0x48,0x5e,0xdc,0x48,0xf1,0x11,0x93 };
    const uint8_t CIPHERTEXT[] = { 0xeb,0x4b,0x21,0x16,0x40,0xca,0x98,0x9c,0xd0,0xab,0x15,0x11,0x0a,0xec,0xf1,0x8c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-4", "[OFB][MCT][256][DECRYPT][n4]") {
    const uint8_t KEY[] = { 0x30,0x31,0x6c,0x62,0x35,0xbc,0x65,0x81,0x4e,0x0c,0x10,0x07,0x3d,0x6f,0x4e,0x6a,0x86,0x1c,0xd9,0xf8,0xa8,0x52,0xac,0xe2,0x4a,0x05,0x3b,0xe3,0x6a,0x2e,0xd6,0x76 };
    const uint8_t IV[] = { 0x65,0x15,0x6e,0x82,0xc4,0x8f,0x01,0x6a,0x8f,0x48,0x5e,0xdc,0x48,0xf1,0x11,0x93 };
    const uint8_t PLAINTEXT[] = { 0x92,0x8e,0x8a,0x6b,0x2d,0x1d,0x1a,0x60,0x4c,0x9a,0xe5,0xc5,0x74,0x3a,0xb0,0xb3 };
    const uint8_t CIPHERTEXT[] = { 0x1e,0xaa,0xe2,0xa0,0xb3,0xf2,0x3b,0x3e,0xae,0xad,0x2c,0xbb,0x2a,0xd0,0x00,0x3a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-5", "[OFB][MCT][256][DECRYPT][n5]") {
    const uint8_t KEY[] = { 0x5b,0xd4,0x86,0xa4,0x14,0x77,0x73,0xce,0xc6,0x92,0x66,0x27,0xee,0xb9,0x51,0x7a,0x14,0x92,0x53,0x93,0x85,0x4f,0xb6,0x82,0x06,0x9f,0xde,0x26,0x1e,0x14,0x66,0xc5 };
    const uint8_t IV[] = { 0x92,0x8e,0x8a,0x6b,0x2d,0x1d,0x1a,0x60,0x4c,0x9a,0xe5,0xc5,0x74,0x3a,0xb0,0xb3 };
    const uint8_t PLAINTEXT[] = { 0x60,0x85,0xc9,0x57,0x40,0x1c,0x30,0x83,0xbe,0x78,0xb2,0xbb,0x60,0x07,0xbc,0x57 };
    const uint8_t CIPHERTEXT[] = { 0x6b,0xe5,0xea,0xc6,0x21,0xcb,0x16,0x4f,0x88,0x9e,0x76,0x20,0xd3,0xd6,0x1f,0x10 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-6", "[OFB][MCT][256][DECRYPT][n6]") {
    const uint8_t KEY[] = { 0x3c,0x8e,0xe7,0xed,0x9a,0x59,0x62,0x24,0xdc,0x9f,0x66,0x81,0x9f,0x45,0xd4,0x39,0x74,0x17,0x9a,0xc4,0xc5,0x53,0x86,0x01,0xb8,0xe7,0x6c,0x9d,0x7e,0x13,0xda,0x92 };
    const uint8_t IV[] = { 0x60,0x85,0xc9,0x57,0x40,0x1c,0x30,0x83,0xbe,0x78,0xb2,0xbb,0x60,0x07,0xbc,0x57 };
    const uint8_t PLAINTEXT[] = { 0xf7,0xfc,0x7b,0x9f,0xdd,0x0e,0x37,0x8e,0xd8,0x79,0x66,0xf3,0x9a,0x91,0xa6,0xee };
    const uint8_t CIPHERTEXT[] = { 0x67,0x5a,0x61,0x49,0x8e,0x2e,0x11,0xea,0x1a,0x0d,0x00,0xa6,0x71,0xfc,0x85,0x43 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-7", "[OFB][MCT][256][DECRYPT][n7]") {
    const uint8_t KEY[] = { 0x2c,0xdf,0x1b,0xb5,0x6d,0xef,0xc2,0x8b,0x61,0x26,0x99,0x3f,0x56,0x68,0xb0,0x91,0x83,0xeb,0xe1,0x5b,0x18,0x5d,0xb1,0x8f,0x60,0x9e,0x0a,0x6e,0xe4,0x82,0x7c,0x7c };
    const uint8_t IV[] = { 0xf7,0xfc,0x7b,0x9f,0xdd,0x0e,0x37,0x8e,0xd8,0x79,0x66,0xf3,0x9a,0x91,0xa6,0xee };
    const uint8_t PLAINTEXT[] = { 0x60,0x90,0xe4,0x51,0xae,0x6d,0xa5,0xf5,0xcf,0x87,0x25,0x06,0xc9,0x8c,0x75,0x64 };
    const uint8_t CIPHERTEXT[] = { 0x10,0x51,0xfc,0x58,0xf7,0xb6,0xa0,0xaf,0xbd,0xb9,0xff,0xbe,0xc9,0x2d,0x64,0xa8 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-8", "[OFB][MCT][256][DECRYPT][n8]") {
    const uint8_t KEY[] = { 0x77,0x6e,0xe9,0x9e,0x64,0x5a,0x38,0xb8,0x09,0x73,0x59,0x4b,0xba,0x94,0x26,0xfb,0xe3,0x7b,0x05,0x0a,0xb6,0x30,0x14,0x7a,0xaf,0x19,0x2f,0x68,0x2d,0x0e,0x09,0x18 };
    const uint8_t IV[] = { 0x60,0x90,0xe4,0x51,0xae,0x6d,0xa5,0xf5,0xcf,0x87,0x25,0x06,0xc9,0x8c,0x75,0x64 };
    const uint8_t PLAINTEXT[] = { 0xed,0x13,0xf3,0xce,0x0c,0x58,0x36,0xef,0x66,0x0c,0xda,0xd0,0xff,0xbf,0x7b,0x60 };
    const uint8_t CIPHERTEXT[] = { 0x5b,0xb1,0xf2,0x2b,0x09,0xb5,0xfa,0x33,0x68,0x55,0xc0,0x74,0xec,0xfc,0x96,0x6a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-9", "[OFB][MCT][256][DECRYPT][n9]") {
    const uint8_t KEY[] = { 0xe6,0x72,0x40,0x2d,0x1c,0x11,0x77,0x65,0x4d,0x64,0x73,0xd0,0x7d,0x6e,0x60,0x1a,0x0e,0x68,0xf6,0xc4,0xba,0x68,0x22,0x95,0xc9,0x15,0xf5,0xb8,0xd2,0xb1,0x72,0x78 };
    const uint8_t IV[] = { 0xed,0x13,0xf3,0xce,0x0c,0x58,0x36,0xef,0x66,0x0c,0xda,0xd0,0xff,0xbf,0x7b,0x60 };
    const uint8_t PLAINTEXT[] = { 0xce,0x83,0x63,0x94,0x98,0xd7,0xa1,0x35,0x9f,0x97,0x43,0xe2,0x8c,0x3a,0x95,0x00 };
    const uint8_t CIPHERTEXT[] = { 0x91,0x1c,0xa9,0xb3,0x78,0x4b,0x4f,0xdd,0x44,0x17,0x2a,0x9b,0xc7,0xfa,0x46,0xe1 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-10", "[OFB][MCT][256][DECRYPT][n10]") {
    const uint8_t KEY[] = { 0xfe,0x79,0x63,0xd1,0xb2,0x2e,0x58,0xf6,0x58,0xfc,0xdf,0xf0,0x46,0xdc,0xcc,0x31,0xc0,0xeb,0x95,0x50,0x22,0xbf,0x83,0xa0,0x56,0x82,0xb6,0x5a,0x5e,0x8b,0xe7,0x78 };
    const uint8_t IV[] = { 0xce,0x83,0x63,0x94,0x98,0xd7,0xa1,0x35,0x9f,0x97,0x43,0xe2,0x8c,0x3a,0x95,0x00 };
    const uint8_t PLAINTEXT[] = { 0xc7,0x9f,0x1d,0x05,0x00,0xc8,0xb2,0x22,0x2b,0xc4,0x2f,0x64,0xdf,0x79,0xf9,0xa0 };
    const uint8_t CIPHERTEXT[] = { 0x18,0x0b,0x23,0xfc,0xae,0x3f,0x2f,0x93,0x15,0x98,0xac,0x20,0x3b,0xb2,0xac,0x2b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-11", "[OFB][MCT][256][DECRYPT][n11]") {
    const uint8_t KEY[] = { 0x41,0x75,0x86,0xa1,0x3c,0x11,0x8c,0xcd,0x79,0x07,0xaf,0xc5,0xcb,0x76,0x4d,0x1e,0x07,0x74,0x88,0x55,0x22,0x77,0x31,0x82,0x7d,0x46,0x99,0x3e,0x81,0xf2,0x1e,0xd8 };
    const uint8_t IV[] = { 0xc7,0x9f,0x1d,0x05,0x00,0xc8,0xb2,0x22,0x2b,0xc4,0x2f,0x64,0xdf,0x79,0xf9,0xa0 };
    const uint8_t PLAINTEXT[] = { 0x4b,0x1b,0xcb,0xce,0x90,0x67,0xdc,0xdb,0xe7,0x90,0x2a,0x73,0x01,0x31,0xe7,0x8e };
    const uint8_t CIPHERTEXT[] = { 0xbf,0x0c,0xe5,0x70,0x8e,0x3f,0xd4,0x3b,0x21,0xfb,0x70,0x35,0x8d,0xaa,0x81,0x2f };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-12", "[OFB][MCT][256][DECRYPT][n12]") {
    const uint8_t KEY[] = { 0xd2,0x51,0xac,0x19,0xb6,0xaf,0xa6,0x74,0xcc,0xf7,0xda,0x38,0x1d,0x8d,0x7b,0x9c,0x4c,0x6f,0x43,0x9b,0xb2,0x10,0xed,0x59,0x9a,0xd6,0xb3,0x4d,0x80,0xc3,0xf9,0x56 };
    const uint8_t IV[] = { 0x4b,0x1b,0xcb,0xce,0x90,0x67,0xdc,0xdb,0xe7,0x90,0x2a,0x73,0x01,0x31,0xe7,0x8e };
    const uint8_t PLAINTEXT[] = { 0x1e,0xd8,0x44,0xdd,0xd0,0x1d,0xf2,0x0d,0x03,0x22,0xd9,0x4d,0xd0,0xff,0x62,0x0d };
    const uint8_t CIPHERTEXT[] = { 0x93,0x24,0x2a,0xb8,0x8a,0xbe,0x2a,0xb9,0xb5,0xf0,0x75,0xfd,0xd6,0xfb,0x36,0x82 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-13", "[OFB][MCT][256][DECRYPT][n13]") {
    const uint8_t KEY[] = { 0x83,0xec,0xbc,0x95,0x1c,0xb8,0x60,0x46,0xa8,0x7d,0xfe,0xd5,0x4b,0xdb,0x23,0x3a,0x52,0xb7,0x07,0x46,0x62,0x0d,0x1f,0x54,0x99,0xf4,0x6a,0x00,0x50,0x3c,0x9b,0x5b };
    const uint8_t IV[] = { 0x1e,0xd8,0x44,0xdd,0xd0,0x1d,0xf2,0x0d,0x03,0x22,0xd9,0x4d,0xd0,0xff,0x62,0x0d };
    const uint8_t PLAINTEXT[] = { 0x69,0xda,0x68,0x32,0xcc,0x97,0xd6,0x78,0xee,0x73,0x32,0x75,0x42,0xa4,0xe8,0xaa };
    const uint8_t CIPHERTEXT[] = { 0x51,0xbd,0x10,0x8c,0xaa,0x17,0xc6,0x32,0x64,0x8a,0x24,0xed,0x56,0x56,0x58,0xa6 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-14", "[OFB][MCT][256][DECRYPT][n14]") {
    const uint8_t KEY[] = { 0x63,0xc0,0xac,0x5d,0x9a,0xea,0x31,0x27,0x93,0xda,0x4c,0x74,0x87,0x13,0x26,0x6f,0x3b,0x6d,0x6f,0x74,0xae,0x9a,0xc9,0x2c,0x77,0x87,0x58,0x75,0x12,0x98,0x73,0xf1 };
    const uint8_t IV[] = { 0x69,0xda,0x68,0x32,0xcc,0x97,0xd6,0x78,0xee,0x73,0x32,0x75,0x42,0xa4,0xe8,0xaa };
    const uint8_t PLAINTEXT[] = { 0x1d,0x64,0x76,0x3d,0x70,0xa7,0xdf,0xd2,0xf1,0x85,0xae,0x3a,0x8d,0x4b,0x13,0xee };
    const uint8_t CIPHERTEXT[] = { 0xe0,0x2c,0x10,0xc8,0x86,0x52,0x51,0x61,0x3b,0xa7,0xb2,0xa1,0xcc,0xc8,0x05,0x55 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-15", "[OFB][MCT][256][DECRYPT][n15]") {
    const uint8_t KEY[] = { 0x97,0x52,0x36,0xe9,0xa4,0xa1,0xdf,0xa1,0x8b,0x34,0xc3,0x6b,0x50,0x5b,0x71,0x4c,0x26,0x09,0x19,0x49,0xde,0x3d,0x16,0xfe,0x86,0x02,0xf6,0x4f,0x9f,0xd3,0x60,0x1f };
    const uint8_t IV[] = { 0x1d,0x64,0x76,0x3d,0x70,0xa7,0xdf,0xd2,0xf1,0x85,0xae,0x3a,0x8d,0x4b,0x13,0xee };
    const uint8_t PLAINTEXT[] = { 0xc6,0x71,0x99,0x9e,0xee,0xd1,0x10,0x40,0xbc,0x51,0x98,0xaa,0x20,0x57,0xf6,0xf3 };
    const uint8_t CIPHERTEXT[] = { 0xf4,0x92,0x9a,0xb4,0x3e,0x4b,0xee,0x86,0x18,0xee,0x8f,0x1f,0xd7,0x48,0x57,0x23 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-16", "[OFB][MCT][256][DECRYPT][n16]") {
    const uint8_t KEY[] = { 0x36,0x57,0xa9,0x52,0x58,0xd3,0xf9,0xba,0x83,0x9a,0x94,0x54,0x4e,0xee,0x08,0xa0,0xe0,0x78,0x80,0xd7,0x30,0xec,0x06,0xbe,0x3a,0x53,0x6e,0xe5,0xbf,0x84,0x96,0xec };
    const uint8_t IV[] = { 0xc6,0x71,0x99,0x9e,0xee,0xd1,0x10,0x40,0xbc,0x51,0x98,0xaa,0x20,0x57,0xf6,0xf3 };
    const uint8_t PLAINTEXT[] = { 0xfe,0x0d,0x5e,0xff,0xe9,0x2c,0x81,0x72,0x88,0x1e,0xf8,0x49,0xba,0xa8,0x99,0xa0 };
    const uint8_t CIPHERTEXT[] = { 0xa1,0x05,0x9f,0xbb,0xfc,0x72,0x26,0x1b,0x08,0xae,0x57,0x3f,0x1e,0xb5,0x79,0xec };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-17", "[OFB][MCT][256][DECRYPT][n17]") {
    const uint8_t KEY[] = { 0xdf,0x44,0x0f,0xbc,0x22,0x60,0xd2,0xfe,0x61,0x18,0x78,0x0f,0x38,0x0d,0x2f,0x1a,0x1e,0x75,0xde,0x28,0xd9,0xc0,0x87,0xcc,0xb2,0x4d,0x96,0xac,0x05,0x2c,0x0f,0x4c };
    const uint8_t IV[] = { 0xfe,0x0d,0x5e,0xff,0xe9,0x2c,0x81,0x72,0x88,0x1e,0xf8,0x49,0xba,0xa8,0x99,0xa0 };
    const uint8_t PLAINTEXT[] = { 0xfa,0x06,0x01,0x3d,0xf4,0xb9,0x26,0x4b,0xcc,0x65,0xe2,0xc3,0x0b,0x8b,0x90,0x9a };
    const uint8_t CIPHERTEXT[] = { 0xe9,0x13,0xa6,0xee,0x7a,0xb3,0x2b,0x44,0xe2,0x82,0xec,0x5b,0x76,0xe3,0x27,0xba };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-18", "[OFB][MCT][256][DECRYPT][n18]") {
    const uint8_t KEY[] = { 0x89,0x18,0x4b,0x5a,0xc9,0x96,0xf9,0xdc,0x1e,0x42,0x57,0x5d,0xbf,0xae,0x07,0x71,0xe4,0x73,0xdf,0x15,0x2d,0x79,0xa1,0x87,0x7e,0x28,0x74,0x6f,0x0e,0xa7,0x9f,0xd6 };
    const uint8_t IV[] = { 0xfa,0x06,0x01,0x3d,0xf4,0xb9,0x26,0x4b,0xcc,0x65,0xe2,0xc3,0x0b,0x8b,0x90,0x9a };
    const uint8_t PLAINTEXT[] = { 0x76,0x95,0x31,0xaf,0xed,0x95,0x54,0x83,0x68,0xfa,0xa8,0xb3,0xce,0xf7,0x15,0xb1 };
    const uint8_t CIPHERTEXT[] = { 0x56,0x5c,0x44,0xe6,0xeb,0xf6,0x2b,0x22,0x7f,0x5a,0x2f,0x52,0x87,0xa3,0x28,0x6b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-19", "[OFB][MCT][256][DECRYPT][n19]") {
    const uint8_t KEY[] = { 0x55,0x53,0x72,0x97,0x87,0xc4,0x18,0x8f,0xdb,0x98,0x66,0xd5,0xb2,0x15,0x66,0xe3,0x92,0xe6,0xee,0xba,0xc0,0xec,0xf5,0x04,0x16,0xd2,0xdc,0xdc,0xc0,0x50,0x8a,0x67 };
    const uint8_t IV[] = { 0x76,0x95,0x31,0xaf,0xed,0x95,0x54,0x83,0x68,0xfa,0xa8,0xb3,0xce,0xf7,0x15,0xb1 };
    const uint8_t PLAINTEXT[] = { 0xb7,0x3b,0xa8,0xd7,0x2d,0xab,0xaa,0x67,0xcf,0x07,0x50,0x15,0x23,0x08,0x84,0xd6 };
    const uint8_t CIPHERTEXT[] = { 0xdc,0x4b,0x39,0xcd,0x4e,0x52,0xe1,0x53,0xc5,0xda,0x31,0x88,0x0d,0xbb,0x61,0x92 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-20", "[OFB][MCT][256][DECRYPT][n20]") {
    const uint8_t KEY[] = { 0x4c,0x7a,0xf1,0x2f,0x84,0x25,0xb9,0x25,0x72,0x3b,0xe1,0x09,0x55,0x60,0xb6,0xef,0x25,0xdd,0x46,0x6d,0xed,0x47,0x5f,0x63,0xd9,0xd5,0x8c,0xc9,0xe3,0x58,0x0e,0xb1 };
    const uint8_t IV[] = { 0xb7,0x3b,0xa8,0xd7,0x2d,0xab,0xaa,0x67,0xcf,0x07,0x50,0x15,0x23,0x08,0x84,0xd6 };
    const uint8_t PLAINTEXT[] = { 0x73,0x18,0xc5,0x13,0x36,0xbf,0xbd,0xe1,0xef,0x75,0x68,0x0f,0x63,0x3e,0xda,0xd4 };
    const uint8_t CIPHERTEXT[] = { 0x19,0x29,0x83,0xb8,0x03,0xe1,0xa1,0xaa,0xa9,0xa3,0x87,0xdc,0xe7,0x75,0xd0,0x0c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-21", "[OFB][MCT][256][DECRYPT][n21]") {
    const uint8_t KEY[] = { 0x6b,0xc2,0x69,0xf0,0x8e,0xdf,0x32,0x50,0x36,0xa6,0xb6,0xc5,0x68,0x60,0x17,0x62,0x56,0xc5,0x83,0x7e,0xdb,0xf8,0xe2,0x82,0x36,0xa0,0xe4,0xc6,0x80,0x66,0xd4,0x65 };
    const uint8_t IV[] = { 0x73,0x18,0xc5,0x13,0x36,0xbf,0xbd,0xe1,0xef,0x75,0x68,0x0f,0x63,0x3e,0xda,0xd4 };
    const uint8_t PLAINTEXT[] = { 0xb7,0x3a,0xa5,0xa4,0x76,0x43,0xb2,0x51,0xa0,0x37,0x52,0x9c,0x7a,0x79,0xa7,0xac };
    const uint8_t CIPHERTEXT[] = { 0x27,0xb8,0x98,0xdf,0x0a,0xfa,0x8b,0x75,0x44,0x9d,0x57,0xcc,0x3d,0x00,0xa1,0x8d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-22", "[OFB][MCT][256][DECRYPT][n22]") {
    const uint8_t KEY[] = { 0xdc,0x65,0x8e,0x32,0x51,0x89,0x03,0x22,0xef,0x31,0x2f,0xa9,0x6c,0x0c,0x33,0x03,0xe1,0xff,0x26,0xda,0xad,0xbb,0x50,0xd3,0x96,0x97,0xb6,0x5a,0xfa,0x1f,0x73,0xc9 };
    const uint8_t IV[] = { 0xb7,0x3a,0xa5,0xa4,0x76,0x43,0xb2,0x51,0xa0,0x37,0x52,0x9c,0x7a,0x79,0xa7,0xac };
    const uint8_t PLAINTEXT[] = { 0xf8,0x76,0xc4,0xbd,0xad,0xf7,0x29,0x1d,0xb9,0xa2,0x8e,0x34,0xaf,0x26,0xaf,0x4a };
    const uint8_t CIPHERTEXT[] = { 0xb7,0xa7,0xe7,0xc2,0xdf,0x56,0x31,0x72,0xd9,0x97,0x99,0x6c,0x04,0x6c,0x24,0x61 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-23", "[OFB][MCT][256][DECRYPT][n23]") {
    const uint8_t KEY[] = { 0xfe,0x30,0x77,0xdb,0xe0,0xd5,0x35,0x8a,0xf4,0xc4,0x05,0x6a,0x6e,0x1c,0xa6,0xd4,0x19,0x89,0xe2,0x67,0x00,0x4c,0x79,0xce,0x2f,0x35,0x38,0x6e,0x55,0x39,0xdc,0x83 };
    const uint8_t IV[] = { 0xf8,0x76,0xc4,0xbd,0xad,0xf7,0x29,0x1d,0xb9,0xa2,0x8e,0x34,0xaf,0x26,0xaf,0x4a };
    const uint8_t PLAINTEXT[] = { 0x3c,0xc4,0x72,0xaf,0x77,0x40,0xec,0x2b,0x3a,0x87,0x7e,0x11,0x25,0x6f,0x13,0x4b };
    const uint8_t CIPHERTEXT[] = { 0x22,0x55,0xf9,0xe9,0xb1,0x5c,0x36,0xa8,0x1b,0xf5,0x2a,0xc3,0x02,0x10,0x95,0xd7 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-24", "[OFB][MCT][256][DECRYPT][n24]") {
    const uint8_t KEY[] = { 0x47,0x8d,0x14,0x37,0xa5,0x40,0xeb,0x67,0x88,0x58,0x19,0xa4,0x11,0xc8,0x20,0x65,0x25,0x4d,0x90,0xc8,0x77,0x0c,0x95,0xe5,0x15,0xb2,0x46,0x7f,0x70,0x56,0xcf,0xc8 };
    const uint8_t IV[] = { 0x3c,0xc4,0x72,0xaf,0x77,0x40,0xec,0x2b,0x3a,0x87,0x7e,0x11,0x25,0x6f,0x13,0x4b };
    const uint8_t PLAINTEXT[] = { 0x82,0xdc,0xe4,0xc0,0xa5,0x55,0x91,0x3b,0xf6,0x1d,0x6d,0x33,0xf5,0x52,0x41,0x2b };
    const uint8_t CIPHERTEXT[] = { 0xb9,0xbd,0x63,0xec,0x45,0x95,0xde,0xed,0x7c,0x9c,0x1c,0xce,0x7f,0xd4,0x86,0xb1 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-25", "[OFB][MCT][256][DECRYPT][n25]") {
    const uint8_t KEY[] = { 0x6e,0x85,0xe7,0x5e,0xc6,0xcf,0x27,0x96,0xc9,0x82,0x24,0xb2,0x7d,0x5d,0xb7,0x01,0xa7,0x91,0x74,0x08,0xd2,0x59,0x04,0xde,0xe3,0xaf,0x2b,0x4c,0x85,0x04,0x8e,0xe3 };
    const uint8_t IV[] = { 0x82,0xdc,0xe4,0xc0,0xa5,0x55,0x91,0x3b,0xf6,0x1d,0x6d,0x33,0xf5,0x52,0x41,0x2b };
    const uint8_t PLAINTEXT[] = { 0xfc,0x03,0x64,0x6d,0xaa,0x34,0xe6,0x51,0x5d,0x77,0xda,0x9f,0x2a,0xc4,0x5a,0x58 };
    const uint8_t CIPHERTEXT[] = { 0x29,0x08,0xf3,0x69,0x63,0x8f,0xcc,0xf1,0x41,0xda,0x3d,0x16,0x6c,0x95,0x97,0x64 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-26", "[OFB][MCT][256][DECRYPT][n26]") {
    const uint8_t KEY[] = { 0x47,0xc6,0xa9,0x53,0xdf,0x8c,0xf7,0x89,0xdb,0x7e,0x5d,0x73,0x2e,0xee,0xd0,0xc1,0x5b,0x92,0x10,0x65,0x78,0x6d,0xe2,0x8f,0xbe,0xd8,0xf1,0xd3,0xaf,0xc0,0xd4,0xbb };
    const uint8_t IV[] = { 0xfc,0x03,0x64,0x6d,0xaa,0x34,0xe6,0x51,0x5d,0x77,0xda,0x9f,0x2a,0xc4,0x5a,0x58 };
    const uint8_t PLAINTEXT[] = { 0x0a,0xd9,0xad,0x05,0xde,0xf4,0x69,0x90,0x67,0x8d,0xb8,0x55,0x8b,0x99,0x92,0x80 };
    const uint8_t CIPHERTEXT[] = { 0x29,0x43,0x4e,0x0d,0x19,0x43,0xd0,0x1f,0x12,0xfc,0x79,0xc1,0x53,0xb3,0x67,0xc0 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-27", "[OFB][MCT][256][DECRYPT][n27]") {
    const uint8_t KEY[] = { 0x1a,0xd7,0xd5,0x2b,0xc6,0xbb,0x4b,0x0e,0xa2,0xf3,0x60,0x08,0xed,0x88,0x51,0x97,0x51,0x4b,0xbd,0x60,0xa6,0x99,0x8b,0x1f,0xd9,0x55,0x49,0x86,0x24,0x59,0x46,0x3b };
    const uint8_t IV[] = { 0x0a,0xd9,0xad,0x05,0xde,0xf4,0x69,0x90,0x67,0x8d,0xb8,0x55,0x8b,0x99,0x92,0x80 };
    const uint8_t PLAINTEXT[] = { 0x98,0x00,0x77,0x7c,0x7e,0xe5,0x1a,0x49,0x99,0xa9,0xf9,0x83,0x90,0x44,0xb8,0x4a };
    const uint8_t CIPHERTEXT[] = { 0x5d,0x11,0x7c,0x78,0x19,0x37,0xbc,0x87,0x79,0x8d,0x3d,0x7b,0xc3,0x66,0x81,0x56 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-28", "[OFB][MCT][256][DECRYPT][n28]") {
    const uint8_t KEY[] = { 0x00,0x12,0xcb,0x05,0x48,0xdf,0x98,0x81,0x45,0x3e,0x25,0x39,0x5f,0x43,0x50,0x9a,0xc9,0x4b,0xca,0x1c,0xd8,0x7c,0x91,0x56,0x40,0xfc,0xb0,0x05,0xb4,0x1d,0xfe,0x71 };
    const uint8_t IV[] = { 0x98,0x00,0x77,0x7c,0x7e,0xe5,0x1a,0x49,0x99,0xa9,0xf9,0x83,0x90,0x44,0xb8,0x4a };
    const uint8_t PLAINTEXT[] = { 0x9e,0xd2,0x15,0x77,0x01,0x44,0x67,0x89,0x36,0x62,0x17,0xe0,0xf0,0x08,0x7d,0xe8 };
    const uint8_t CIPHERTEXT[] = { 0x1a,0xc5,0x1e,0x2e,0x8e,0x64,0xd3,0x8f,0xe7,0xcd,0x45,0x31,0xb2,0xcb,0x01,0x0d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-29", "[OFB][MCT][256][DECRYPT][n29]") {
    const uint8_t KEY[] = { 0x87,0x34,0xe5,0x95,0xb2,0xff,0xe9,0x8a,0x9f,0x23,0x13,0x1c,0x09,0x6b,0x7f,0x18,0x57,0x99,0xdf,0x6b,0xd9,0x38,0xf6,0xdf,0x76,0x9e,0xa7,0xe5,0x44,0x15,0x83,0x99 };
    const uint8_t IV[] = { 0x9e,0xd2,0x15,0x77,0x01,0x44,0x67,0x89,0x36,0x62,0x17,0xe0,0xf0,0x08,0x7d,0xe8 };
    const uint8_t PLAINTEXT[] = { 0xa7,0xd8,0x1d,0x45,0xa5,0x59,0x7e,0x65,0x53,0xa8,0x94,0x39,0xa2,0xa7,0xcb,0x43 };
    const uint8_t CIPHERTEXT[] = { 0x87,0x26,0x2e,0x90,0xfa,0x20,0x71,0x0b,0xda,0x1d,0x36,0x25,0x56,0x28,0x2f,0x82 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-30", "[OFB][MCT][256][DECRYPT][n30]") {
    const uint8_t KEY[] = { 0x61,0xe7,0x1a,0xd2,0xa0,0x71,0x48,0xb5,0xab,0x3e,0xa1,0x13,0xc8,0xdb,0x69,0xeb,0xf0,0x41,0xc2,0x2e,0x7c,0x61,0x88,0xba,0x25,0x36,0x33,0xdc,0xe6,0xb2,0x48,0xda };
    const uint8_t IV[] = { 0xa7,0xd8,0x1d,0x45,0xa5,0x59,0x7e,0x65,0x53,0xa8,0x94,0x39,0xa2,0xa7,0xcb,0x43 };
    const uint8_t PLAINTEXT[] = { 0xba,0xf3,0x89,0x20,0xe6,0xac,0x8e,0xd1,0x0d,0xad,0x19,0x40,0xd2,0xfd,0x50,0x06 };
    const uint8_t CIPHERTEXT[] = { 0xe6,0xd3,0xff,0x47,0x12,0x8e,0xa1,0x3f,0x34,0x1d,0xb2,0x0f,0xc1,0xb0,0x16,0xf3 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-31", "[OFB][MCT][256][DECRYPT][n31]") {
    const uint8_t KEY[] = { 0x08,0x36,0x0a,0xc7,0x4b,0x63,0xd3,0x43,0x6e,0xaa,0xf2,0xc9,0x6d,0x59,0xf0,0x09,0x4a,0xb2,0x4b,0x0e,0x9a,0xcd,0x06,0x6b,0x28,0x9b,0x2a,0x9c,0x34,0x4f,0x18,0xdc };
    const uint8_t IV[] = { 0xba,0xf3,0x89,0x20,0xe6,0xac,0x8e,0xd1,0x0d,0xad,0x19,0x40,0xd2,0xfd,0x50,0x06 };
    const uint8_t PLAINTEXT[] = { 0x60,0x7a,0x55,0xfe,0xe8,0x6b,0x21,0xf4,0xe5,0x11,0xb4,0x84,0x16,0x1a,0xec,0x75 };
    const uint8_t CIPHERTEXT[] = { 0x69,0xd1,0x10,0x15,0xeb,0x12,0x9b,0xf6,0xc5,0x94,0x53,0xda,0xa5,0x82,0x99,0xe2 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-32", "[OFB][MCT][256][DECRYPT][n32]") {
    const uint8_t KEY[] = { 0xb0,0x5b,0xbe,0xd7,0xad,0xa5,0xd9,0x14,0x64,0x88,0x7a,0x61,0x28,0x2f,0x20,0xe0,0x2a,0xc8,0x1e,0xf0,0x72,0xa6,0x27,0x9f,0xcd,0x8a,0x9e,0x18,0x22,0x55,0xf4,0xa9 };
    const uint8_t IV[] = { 0x60,0x7a,0x55,0xfe,0xe8,0x6b,0x21,0xf4,0xe5,0x11,0xb4,0x84,0x16,0x1a,0xec,0x75 };
    const uint8_t PLAINTEXT[] = { 0x71,0x85,0xb7,0x8e,0x56,0xbb,0x43,0xed,0x09,0x78,0xd9,0x7c,0x99,0x99,0x34,0x77 };
    const uint8_t CIPHERTEXT[] = { 0xb8,0x6d,0xb4,0x10,0xe6,0xc6,0x0a,0x57,0x0a,0x22,0x88,0xa8,0x45,0x76,0xd0,0xe9 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-33", "[OFB][MCT][256][DECRYPT][n33]") {
    const uint8_t KEY[] = { 0xd9,0x5b,0x66,0x55,0x3c,0xe1,0x56,0x06,0xde,0x3e,0xdf,0x77,0xbb,0x61,0x76,0xb2,0x5b,0x4d,0xa9,0x7e,0x24,0x1d,0x64,0x72,0xc4,0xf2,0x47,0x64,0xbb,0xcc,0xc0,0xde };
    const uint8_t IV[] = { 0x71,0x85,0xb7,0x8e,0x56,0xbb,0x43,0xed,0x09,0x78,0xd9,0x7c,0x99,0x99,0x34,0x77 };
    const uint8_t PLAINTEXT[] = { 0xe3,0x19,0x1c,0x91,0x06,0x6c,0x1d,0xa3,0x8c,0xea,0xe1,0xd5,0x59,0xfe,0x5c,0x06 };
    const uint8_t CIPHERTEXT[] = { 0x69,0x00,0xd8,0x82,0x91,0x44,0x8f,0x12,0xba,0xb6,0xa5,0x16,0x93,0x4e,0x56,0x52 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-34", "[OFB][MCT][256][DECRYPT][n34]") {
    const uint8_t KEY[] = { 0xb7,0x11,0x0a,0x48,0xf5,0xb0,0xfc,0x88,0xbd,0xef,0xba,0x63,0x48,0x11,0x92,0x41,0xb8,0x54,0xb5,0xef,0x22,0x71,0x79,0xd1,0x48,0x18,0xa6,0xb1,0xe2,0x32,0x9c,0xd8 };
    const uint8_t IV[] = { 0xe3,0x19,0x1c,0x91,0x06,0x6c,0x1d,0xa3,0x8c,0xea,0xe1,0xd5,0x59,0xfe,0x5c,0x06 };
    const uint8_t PLAINTEXT[] = { 0xb4,0xdf,0x17,0xba,0x93,0xbb,0xcb,0x26,0x2e,0xd7,0x65,0x9a,0x27,0x6a,0xab,0x98 };
    const uint8_t CIPHERTEXT[] = { 0x6e,0x4a,0x6c,0x1d,0xc9,0x51,0xaa,0x8e,0x63,0xd1,0x65,0x14,0xf3,0x70,0xe4,0xf3 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-35", "[OFB][MCT][256][DECRYPT][n35]") {
    const uint8_t KEY[] = { 0x73,0x33,0xaf,0x86,0x62,0x32,0xc9,0xb6,0x27,0x8f,0x70,0xbb,0x34,0x82,0x55,0xce,0x0c,0x8b,0xa2,0x55,0xb1,0xca,0xb2,0xf7,0x66,0xcf,0xc3,0x2b,0xc5,0x58,0x37,0x40 };
    const uint8_t IV[] = { 0xb4,0xdf,0x17,0xba,0x93,0xbb,0xcb,0x26,0x2e,0xd7,0x65,0x9a,0x27,0x6a,0xab,0x98 };
    const uint8_t PLAINTEXT[] = { 0x72,0x77,0x8d,0xf1,0x1d,0x35,0x1a,0x7f,0x48,0xc4,0x27,0xa3,0x9f,0x83,0x73,0x91 };
    const uint8_t CIPHERTEXT[] = { 0xc4,0x22,0xa5,0xce,0x97,0x82,0x35,0x3e,0x9a,0x60,0xca,0xd8,0x7c,0x93,0xc7,0x8f };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-36", "[OFB][MCT][256][DECRYPT][n36]") {
    const uint8_t KEY[] = { 0xa8,0x8e,0xe3,0x58,0x63,0x51,0xe6,0x2f,0xd9,0xf8,0xe1,0x70,0xdc,0xda,0xe8,0xc2,0x7e,0xfc,0x2f,0xa4,0xac,0xff,0xa8,0x88,0x2e,0x0b,0xe4,0x88,0x5a,0xdb,0x44,0xd1 };
    const uint8_t IV[] = { 0x72,0x77,0x8d,0xf1,0x1d,0x35,0x1a,0x7f,0x48,0xc4,0x27,0xa3,0x9f,0x83,0x73,0x91 };
    const uint8_t PLAINTEXT[] = { 0x7d,0xaa,0x91,0x5f,0x55,0x0a,0x4b,0x9a,0xae,0xd0,0xf0,0x75,0x34,0x9a,0x01,0x81 };
    const uint8_t CIPHERTEXT[] = { 0xdb,0xbd,0x4c,0xde,0x01,0x63,0x2f,0x99,0xfe,0x77,0x91,0xcb,0xe8,0x58,0xbd,0x0c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-37", "[OFB][MCT][256][DECRYPT][n37]") {
    const uint8_t KEY[] = { 0x62,0xa6,0xa6,0x31,0x78,0x5d,0x50,0xc7,0xf2,0x55,0x7a,0xe7,0xe2,0x7e,0x01,0x3f,0x03,0x56,0xbe,0xfb,0xf9,0xf5,0xe3,0x12,0x80,0xdb,0x14,0xfd,0x6e,0x41,0x45,0x50 };
    const uint8_t IV[] = { 0x7d,0xaa,0x91,0x5f,0x55,0x0a,0x4b,0x9a,0xae,0xd0,0xf0,0x75,0x34,0x9a,0x01,0x81 };
    const uint8_t PLAINTEXT[] = { 0x5a,0xd4,0x55,0xff,0xaa,0x34,0x4c,0xba,0xca,0x9c,0xb6,0x98,0x26,0x04,0x0f,0x6e };
    const uint8_t CIPHERTEXT[] = { 0xca,0x28,0x45,0x69,0x1b,0x0c,0xb6,0xe8,0x2b,0xad,0x9b,0x97,0x3e,0xa4,0xe9,0xfd };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-38", "[OFB][MCT][256][DECRYPT][n38]") {
    const uint8_t KEY[] = { 0x3b,0x03,0xe4,0xec,0xf0,0x2d,0xaa,0xaa,0xf0,0xf4,0xac,0x4a,0x42,0x4a,0x24,0xc1,0x59,0x82,0xeb,0x04,0x53,0xc1,0xaf,0xa8,0x4a,0x47,0xa2,0x65,0x48,0x45,0x4a,0x3e };
    const uint8_t IV[] = { 0x5a,0xd4,0x55,0xff,0xaa,0x34,0x4c,0xba,0xca,0x9c,0xb6,0x98,0x26,0x04,0x0f,0x6e };
    const uint8_t PLAINTEXT[] = { 0xd8,0x4f,0x86,0xee,0x15,0xea,0x50,0x13,0xfb,0x21,0x2b,0x66,0x56,0xe6,0xca,0xcf };
    const uint8_t CIPHERTEXT[] = { 0x59,0xa5,0x42,0xdd,0x88,0x70,0xfa,0x6d,0x02,0xa1,0xd6,0xad,0xa0,0x34,0x25,0xfe };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-39", "[OFB][MCT][256][DECRYPT][n39]") {
    const uint8_t KEY[] = { 0x0a,0x11,0xea,0xf0,0x3d,0x70,0x6d,0xb1,0xc7,0x68,0x88,0xd1,0x2f,0x87,0xa9,0x4e,0x81,0xcd,0x6d,0xea,0x46,0x2b,0xff,0xbb,0xb1,0x66,0x89,0x03,0x1e,0xa3,0x80,0xf1 };
    const uint8_t IV[] = { 0xd8,0x4f,0x86,0xee,0x15,0xea,0x50,0x13,0xfb,0x21,0x2b,0x66,0x56,0xe6,0xca,0xcf };
    const uint8_t PLAINTEXT[] = { 0xbf,0x38,0x9d,0xda,0xc4,0x57,0x56,0x21,0xbe,0x77,0x53,0xb3,0x72,0x0e,0xb5,0xe6 };
    const uint8_t CIPHERTEXT[] = { 0x31,0x12,0x0e,0x1c,0xcd,0x5d,0xc7,0x1b,0x37,0x9c,0x24,0x9b,0x6d,0xcd,0x8d,0x8f };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-40", "[OFB][MCT][256][DECRYPT][n40]") {
    const uint8_t KEY[] = { 0x35,0x83,0xb1,0xca,0xda,0x97,0x90,0x4b,0x10,0xe6,0x9b,0xdb,0x0d,0xbe,0xc9,0xe8,0x3e,0xf5,0xf0,0x30,0x82,0x7c,0xa9,0x9a,0x0f,0x11,0xda,0xb0,0x6c,0xad,0x35,0x17 };
    const uint8_t IV[] = { 0xbf,0x38,0x9d,0xda,0xc4,0x57,0x56,0x21,0xbe,0x77,0x53,0xb3,0x72,0x0e,0xb5,0xe6 };
    const uint8_t PLAINTEXT[] = { 0xee,0x18,0x62,0x5f,0xe4,0x53,0x1d,0xee,0x86,0xbf,0xa2,0x62,0x31,0xc2,0x35,0x24 };
    const uint8_t CIPHERTEXT[] = { 0x3f,0x92,0x5b,0x3a,0xe7,0xe7,0xfd,0xfa,0xd7,0x8e,0x13,0x0a,0x22,0x39,0x60,0xa6 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-41", "[OFB][MCT][256][DECRYPT][n41]") {
    const uint8_t KEY[] = { 0x49,0x4b,0xbc,0xde,0xed,0x51,0x47,0x92,0xb2,0xc0,0xbd,0x09,0x4c,0x5b,0x81,0x95,0xd0,0xed,0x92,0x6f,0x66,0x2f,0xb4,0x74,0x89,0xae,0x78,0xd2,0x5d,0x6f,0x00,0x33 };
    const uint8_t IV[] = { 0xee,0x18,0x62,0x5f,0xe4,0x53,0x1d,0xee,0x86,0xbf,0xa2,0x62,0x31,0xc2,0x35,0x24 };
    const uint8_t PLAINTEXT[] = { 0x13,0x11,0x5a,0xb2,0x0a,0xaf,0xaa,0x94,0x91,0x2b,0x1c,0x54,0x66,0x36,0x82,0xf9 };
    const uint8_t CIPHERTEXT[] = { 0x7c,0xc8,0x0d,0x14,0x37,0xc6,0xd7,0xd9,0xa2,0x26,0x26,0xd2,0x41,0xe5,0x48,0x7d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-42", "[OFB][MCT][256][DECRYPT][n42]") {
    const uint8_t KEY[] = { 0x89,0x17,0x7e,0x68,0x66,0xa7,0x46,0x77,0xfe,0xd6,0xaf,0xb8,0x52,0x42,0xae,0x2d,0xc3,0xfc,0xc8,0xdd,0x6c,0x80,0x1e,0xe0,0x18,0x85,0x64,0x86,0x3b,0x59,0x82,0xca };
    const uint8_t IV[] = { 0x13,0x11,0x5a,0xb2,0x0a,0xaf,0xaa,0x94,0x91,0x2b,0x1c,0x54,0x66,0x36,0x82,0xf9 };
    const uint8_t PLAINTEXT[] = { 0x9e,0x36,0x82,0xd2,0x6d,0xf8,0xbc,0x62,0x19,0x2f,0x55,0x0d,0x92,0x97,0x35,0x23 };
    const uint8_t CIPHERTEXT[] = { 0xc0,0x5c,0xc2,0xb6,0x8b,0xf6,0x01,0xe5,0x4c,0x16,0x12,0xb1,0x1e,0x19,0x2f,0xb8 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-43", "[OFB][MCT][256][DECRYPT][n43]") {
    const uint8_t KEY[] = { 0x51,0xb9,0x7b,0x3e,0x6a,0xaf,0x06,0xd3,0x5f,0x80,0xaf,0x5b,0xcd,0xbf,0x57,0x19,0x5d,0xca,0x4a,0x0f,0x01,0x78,0xa2,0x82,0x01,0xaa,0x31,0x8b,0xa9,0xce,0xb7,0xe9 };
    const uint8_t IV[] = { 0x9e,0x36,0x82,0xd2,0x6d,0xf8,0xbc,0x62,0x19,0x2f,0x55,0x0d,0x92,0x97,0x35,0x23 };
    const uint8_t PLAINTEXT[] = { 0xdb,0x42,0x11,0x9d,0xc0,0x1b,0xac,0x8b,0x3f,0x52,0xfc,0x0a,0x95,0x90,0x80,0x81 };
    const uint8_t CIPHERTEXT[] = { 0xd8,0xae,0x05,0x56,0x0c,0x08,0x40,0xa4,0xa1,0x56,0x00,0xe3,0x9f,0xfd,0xf9,0x34 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-44", "[OFB][MCT][256][DECRYPT][n44]") {
    const uint8_t KEY[] = { 0xae,0x6b,0x59,0x43,0x49,0x22,0x00,0xff,0xa2,0x72,0xab,0x88,0x36,0x4d,0x2e,0x85,0x86,0x88,0x5b,0x92,0xc1,0x63,0x0e,0x09,0x3e,0xf8,0xcd,0x81,0x3c,0x5e,0x37,0x68 };
    const uint8_t IV[] = { 0xdb,0x42,0x11,0x9d,0xc0,0x1b,0xac,0x8b,0x3f,0x52,0xfc,0x0a,0x95,0x90,0x80,0x81 };
    const uint8_t PLAINTEXT[] = { 0x82,0x05,0xd6,0xc6,0x88,0x2b,0x1b,0x2c,0x45,0x91,0xb2,0xf0,0x95,0x60,0x60,0x8c };
    const uint8_t CIPHERTEXT[] = { 0xff,0xd2,0x22,0x7d,0x23,0x8d,0x06,0x2c,0xfd,0xf2,0x04,0xd3,0xfb,0xf2,0x79,0x9c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-45", "[OFB][MCT][256][DECRYPT][n45]") {
    const uint8_t KEY[] = { 0xc9,0x15,0x9f,0x2b,0x80,0xc7,0xfb,0xcf,0xda,0xf0,0xff,0x51,0xe6,0xf0,0x59,0x40,0x04,0x8d,0x8d,0x54,0x49,0x48,0x15,0x25,0x7b,0x69,0x7f,0x71,0xa9,0x3e,0x57,0xe4 };
    const uint8_t IV[] = { 0x82,0x05,0xd6,0xc6,0x88,0x2b,0x1b,0x2c,0x45,0x91,0xb2,0xf0,0x95,0x60,0x60,0x8c };
    const uint8_t PLAINTEXT[] = { 0x72,0x34,0xca,0x27,0x12,0xc5,0x95,0x5d,0x79,0x3c,0xf9,0x93,0x1c,0xef,0xd1,0x78 };
    const uint8_t CIPHERTEXT[] = { 0x67,0x7e,0xc6,0x68,0xc9,0xe5,0xfb,0x30,0x78,0x82,0x54,0xd9,0xd0,0xbd,0x77,0xc5 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-46", "[OFB][MCT][256][DECRYPT][n46]") {
    const uint8_t KEY[] = { 0xfe,0x32,0x16,0xb8,0x20,0x38,0xc8,0x80,0xe5,0x9e,0x25,0x76,0x86,0xd7,0x2c,0xa0,0x76,0xb9,0x47,0x73,0x5b,0x8d,0x80,0x78,0x02,0x55,0x86,0xe2,0xb5,0xd1,0x86,0x9c };
    const uint8_t IV[] = { 0x72,0x34,0xca,0x27,0x12,0xc5,0x95,0x5d,0x79,0x3c,0xf9,0x93,0x1c,0xef,0xd1,0x78 };
    const uint8_t PLAINTEXT[] = { 0xa5,0xfd,0x77,0x21,0xc1,0x47,0x41,0x86,0x56,0x34,0xd6,0x76,0x5e,0x36,0xbd,0xdc };
    const uint8_t CIPHERTEXT[] = { 0x37,0x27,0x89,0x93,0xa0,0xff,0x33,0x4f,0x3f,0x6e,0xda,0x27,0x60,0x27,0x75,0xe0 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-47", "[OFB][MCT][256][DECRYPT][n47]") {
    const uint8_t KEY[] = { 0x90,0xc5,0x07,0x47,0xa1,0x87,0x75,0xdf,0xff,0xd0,0x69,0xec,0x20,0x7b,0x8a,0xb0,0xd3,0x44,0x30,0x52,0x9a,0xca,0xc1,0xfe,0x54,0x61,0x50,0x94,0xeb,0xe7,0x3b,0x40 };
    const uint8_t IV[] = { 0xa5,0xfd,0x77,0x21,0xc1,0x47,0x41,0x86,0x56,0x34,0xd6,0x76,0x5e,0x36,0xbd,0xdc };
    const uint8_t PLAINTEXT[] = { 0x3b,0x90,0x40,0xbb,0xa4,0x5f,0x5b,0xaa,0x16,0xe9,0xd0,0xbe,0x53,0xba,0x0b,0x94 };
    const uint8_t CIPHERTEXT[] = { 0x6e,0xf7,0x11,0xff,0x81,0xbf,0xbd,0x5f,0x1a,0x4e,0x4c,0x9a,0xa6,0xac,0xa6,0x10 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-48", "[OFB][MCT][256][DECRYPT][n48]") {
    const uint8_t KEY[] = { 0xfa,0xd7,0xd8,0x33,0x7b,0xc8,0x88,0xa4,0x1f,0x42,0xb0,0xba,0x77,0x7a,0x3c,0x49,0xe8,0xd4,0x70,0xe9,0x3e,0x95,0x9a,0x54,0x42,0x88,0x80,0x2a,0xb8,0x5d,0x30,0xd4 };
    const uint8_t IV[] = { 0x3b,0x90,0x40,0xbb,0xa4,0x5f,0x5b,0xaa,0x16,0xe9,0xd0,0xbe,0x53,0xba,0x0b,0x94 };
    const uint8_t PLAINTEXT[] = { 0x44,0x5b,0x13,0x56,0xb2,0x2b,0x16,0x52,0x26,0x16,0x35,0x1a,0xf8,0x9d,0x40,0x61 };
    const uint8_t CIPHERTEXT[] = { 0x6a,0x12,0xdf,0x74,0xda,0x4f,0xfd,0x7b,0xe0,0x92,0xd9,0x56,0x57,0x01,0xb6,0xf9 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-49", "[OFB][MCT][256][DECRYPT][n49]") {
    const uint8_t KEY[] = { 0x2a,0xa5,0x62,0x4e,0x73,0xed,0x38,0xf6,0x05,0x8e,0x27,0x32,0xff,0x26,0xde,0x39,0xac,0x8f,0x63,0xbf,0x8c,0xbe,0x8c,0x06,0x64,0x9e,0xb5,0x30,0x40,0xc0,0x70,0xb5 };
    const uint8_t IV[] = { 0x44,0x5b,0x13,0x56,0xb2,0x2b,0x16,0x52,0x26,0x16,0x35,0x1a,0xf8,0x9d,0x40,0x61 };
    const uint8_t PLAINTEXT[] = { 0x48,0x65,0xa1,0x51,0xb9,0x07,0x5b,0xc0,0x3f,0xcd,0x7f,0xc4,0xc7,0x91,0xe9,0xac };
    const uint8_t CIPHERTEXT[] = { 0xd0,0x72,0xba,0x7d,0x08,0x25,0xb0,0x52,0x1a,0xcc,0x97,0x88,0x88,0x5c,0xe2,0x70 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-50", "[OFB][MCT][256][DECRYPT][n50]") {
    const uint8_t KEY[] = { 0x22,0xac,0x24,0xb9,0x72,0x72,0xd5,0x3c,0xcb,0xe5,0x71,0x72,0x30,0x1c,0x00,0x94,0xe4,0xea,0xc2,0xee,0x35,0xb9,0xd7,0xc6,0x5b,0x53,0xca,0xf4,0x87,0x51,0x99,0x19 };
    const uint8_t IV[] = { 0x48,0x65,0xa1,0x51,0xb9,0x07,0x5b,0xc0,0x3f,0xcd,0x7f,0xc4,0xc7,0x91,0xe9,0xac };
    const uint8_t PLAINTEXT[] = { 0x33,0x0f,0x2c,0x7c,0x2c,0x9a,0xef,0x37,0x3d,0xca,0x87,0x9a,0x89,0x79,0x3d,0x52 };
    const uint8_t CIPHERTEXT[] = { 0x08,0x09,0x46,0xf7,0x01,0x9f,0xed,0xca,0xce,0x6b,0x56,0x40,0xcf,0x3a,0xde,0xad };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-51", "[OFB][MCT][256][DECRYPT][n51]") {
    const uint8_t KEY[] = { 0x4f,0x5b,0x05,0xc0,0x74,0xd9,0x50,0x96,0x16,0xc2,0x07,0x8b,0xaa,0x37,0xb0,0xdc,0xd7,0xe5,0xee,0x92,0x19,0x23,0x38,0xf1,0x66,0x99,0x4d,0x6e,0x0e,0x28,0xa4,0x4b };
    const uint8_t IV[] = { 0x33,0x0f,0x2c,0x7c,0x2c,0x9a,0xef,0x37,0x3d,0xca,0x87,0x9a,0x89,0x79,0x3d,0x52 };
    const uint8_t PLAINTEXT[] = { 0x5b,0x81,0x83,0x7d,0x89,0x45,0xca,0x91,0xda,0x79,0x66,0xa8,0x06,0xff,0xdf,0xfc };
    const uint8_t CIPHERTEXT[] = { 0x6d,0xf7,0x21,0x79,0x06,0xab,0x85,0xaa,0xdd,0x27,0x76,0xf9,0x9a,0x2b,0xb0,0x48 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-52", "[OFB][MCT][256][DECRYPT][n52]") {
    const uint8_t KEY[] = { 0xc5,0x29,0xe5,0x45,0xe1,0x8c,0xbc,0xaf,0xfa,0xd3,0xd0,0x60,0x77,0x56,0x18,0x55,0x8c,0x64,0x6d,0xef,0x90,0x66,0xf2,0x60,0xbc,0xe0,0x2b,0xc6,0x08,0xd7,0x7b,0xb7 };
    const uint8_t IV[] = { 0x5b,0x81,0x83,0x7d,0x89,0x45,0xca,0x91,0xda,0x79,0x66,0xa8,0x06,0xff,0xdf,0xfc };
    const uint8_t PLAINTEXT[] = { 0x72,0xb7,0x4a,0x0f,0x7e,0x34,0xa8,0x86,0x33,0xe2,0x72,0x05,0xfa,0x00,0xe0,0xbc };
    const uint8_t CIPHERTEXT[] = { 0x8a,0x72,0xe0,0x85,0x95,0x55,0xec,0x39,0xec,0x11,0xd7,0xeb,0xdd,0x61,0xa8,0x89 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-53", "[OFB][MCT][256][DECRYPT][n53]") {
    const uint8_t KEY[] = { 0x93,0x9b,0xb4,0x96,0x7d,0xaa,0x64,0x24,0x94,0x8a,0x0f,0x50,0x74,0xee,0x5c,0x25,0xfe,0xd3,0x27,0xe0,0xee,0x52,0x5a,0xe6,0x8f,0x02,0x59,0xc3,0xf2,0xd7,0x9b,0x0b };
    const uint8_t IV[] = { 0x72,0xb7,0x4a,0x0f,0x7e,0x34,0xa8,0x86,0x33,0xe2,0x72,0x05,0xfa,0x00,0xe0,0xbc };
    const uint8_t PLAINTEXT[] = { 0xc8,0xc1,0xaa,0xf8,0xa7,0x0f,0x7e,0xbe,0xed,0x81,0x79,0x11,0x50,0xe0,0x7d,0xb8 };
    const uint8_t CIPHERTEXT[] = { 0x56,0xb2,0x51,0xd3,0x9c,0x26,0xd8,0x8b,0x6e,0x59,0xdf,0x30,0x03,0xb8,0x44,0x70 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-54", "[OFB][MCT][256][DECRYPT][n54]") {
    const uint8_t KEY[] = { 0x27,0x17,0x6a,0x0e,0xe9,0xa8,0xce,0xdd,0x3d,0xa3,0xd1,0x34,0x5b,0xe2,0xc8,0xf2,0x36,0x12,0x8d,0x18,0x49,0x5d,0x24,0x58,0x62,0x83,0x20,0xd2,0xa2,0x37,0xe6,0xb3 };
    const uint8_t IV[] = { 0xc8,0xc1,0xaa,0xf8,0xa7,0x0f,0x7e,0xbe,0xed,0x81,0x79,0x11,0x50,0xe0,0x7d,0xb8 };
    const uint8_t PLAINTEXT[] = { 0x20,0x33,0xaa,0x10,0xb4,0xab,0xba,0xfe,0x5c,0x46,0x23,0xad,0x04,0xe4,0x99,0xdc };
    const uint8_t CIPHERTEXT[] = { 0xb4,0x8c,0xde,0x98,0x94,0x02,0xaa,0xf9,0xa9,0x29,0xde,0x64,0x2f,0x0c,0x94,0xd7 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-55", "[OFB][MCT][256][DECRYPT][n55]") {
    const uint8_t KEY[] = { 0x51,0x3e,0x1a,0x03,0x95,0x6c,0x10,0x56,0xf1,0xd4,0x12,0xc7,0xac,0x91,0x22,0xab,0x16,0x21,0x27,0x08,0xfd,0xf6,0x9e,0xa6,0x3e,0xc5,0x03,0x7f,0xa6,0xd3,0x7f,0x6f };
    const uint8_t IV[] = { 0x20,0x33,0xaa,0x10,0xb4,0xab,0xba,0xfe,0x5c,0x46,0x23,0xad,0x04,0xe4,0x99,0xdc };
    const uint8_t PLAINTEXT[] = { 0x24,0xea,0xb2,0x06,0x2a,0x5f,0x33,0xa8,0x34,0xbb,0x03,0x77,0x29,0x2f,0x25,0xda };
    const uint8_t CIPHERTEXT[] = { 0x76,0x29,0x70,0x0d,0x7c,0xc4,0xde,0x8b,0xcc,0x77,0xc3,0xf3,0xf7,0x73,0xea,0x59 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-56", "[OFB][MCT][256][DECRYPT][n56]") {
    const uint8_t KEY[] = { 0xf7,0x0c,0xef,0x76,0x83,0x52,0xae,0x02,0x36,0x54,0x40,0x52,0xd9,0x60,0xe5,0x33,0x32,0xcb,0x95,0x0e,0xd7,0xa9,0xad,0x0e,0x0a,0x7e,0x00,0x08,0x8f,0xfc,0x5a,0xb5 };
    const uint8_t IV[] = { 0x24,0xea,0xb2,0x06,0x2a,0x5f,0x33,0xa8,0x34,0xbb,0x03,0x77,0x29,0x2f,0x25,0xda };
    const uint8_t PLAINTEXT[] = { 0xfa,0x94,0x6c,0xac,0xee,0x44,0xf5,0xbe,0x0e,0x17,0xbd,0x52,0x79,0xe7,0x2d,0x93 };
    const uint8_t CIPHERTEXT[] = { 0xa6,0x32,0xf5,0x75,0x16,0x3e,0xbe,0x54,0xc7,0x80,0x52,0x95,0x75,0xf1,0xc7,0x98 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-57", "[OFB][MCT][256][DECRYPT][n57]") {
    const uint8_t KEY[] = { 0xb3,0x79,0x02,0x7f,0xe0,0xe3,0xb2,0x81,0x49,0x82,0xf8,0x8b,0xbc,0xca,0x12,0x79,0xc8,0x5f,0xf9,0xa2,0x39,0xed,0x58,0xb0,0x04,0x69,0xbd,0x5a,0xf6,0x1b,0x77,0x26 };
    const uint8_t IV[] = { 0xfa,0x94,0x6c,0xac,0xee,0x44,0xf5,0xbe,0x0e,0x17,0xbd,0x52,0x79,0xe7,0x2d,0x93 };
    const uint8_t PLAINTEXT[] = { 0xf5,0x7c,0xf0,0x63,0x3c,0x3c,0x47,0x67,0xce,0x17,0x48,0xbd,0x77,0xb5,0x40,0x30 };
    const uint8_t CIPHERTEXT[] = { 0x44,0x75,0xed,0x09,0x63,0xb1,0x1c,0x83,0x7f,0xd6,0xb8,0xd9,0x65,0xaa,0xf7,0x4a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-58", "[OFB][MCT][256][DECRYPT][n58]") {
    const uint8_t KEY[] = { 0x26,0x89,0x62,0x18,0x6b,0x30,0x1a,0xcf,0xea,0xae,0x4e,0xa8,0x4b,0x03,0x55,0xe9,0x3d,0x23,0x09,0xc1,0x05,0xd1,0x1f,0xd7,0xca,0x7e,0xf5,0xe7,0x81,0xae,0x37,0x16 };
    const uint8_t IV[] = { 0xf5,0x7c,0xf0,0x63,0x3c,0x3c,0x47,0x67,0xce,0x17,0x48,0xbd,0x77,0xb5,0x40,0x30 };
    const uint8_t PLAINTEXT[] = { 0x3c,0x66,0x5a,0x24,0x79,0x0e,0xf0,0xbc,0x6d,0x6b,0xca,0xc4,0xed,0xbe,0xd9,0x6b };
    const uint8_t CIPHERTEXT[] = { 0x95,0xf0,0x60,0x67,0x8b,0xd3,0xa8,0x4e,0xa3,0x2c,0xb6,0x23,0xf7,0xc9,0x47,0x90 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-59", "[OFB][MCT][256][DECRYPT][n59]") {
    const uint8_t KEY[] = { 0x8a,0xe8,0xfb,0xf9,0x4b,0xe0,0x0b,0x74,0x60,0x5d,0x3a,0x52,0x24,0x90,0x49,0xc9,0x01,0x45,0x53,0xe5,0x7c,0xdf,0xef,0x6b,0xa7,0x15,0x3f,0x23,0x6c,0x10,0xee,0x7d };
    const uint8_t IV[] = { 0x3c,0x66,0x5a,0x24,0x79,0x0e,0xf0,0xbc,0x6d,0x6b,0xca,0xc4,0xed,0xbe,0xd9,0x6b };
    const uint8_t PLAINTEXT[] = { 0xe2,0x41,0x1a,0x3f,0xd8,0x5a,0x44,0x32,0x81,0x0e,0x98,0x2a,0x08,0xc0,0x3d,0x9f };
    const uint8_t CIPHERTEXT[] = { 0xac,0x61,0x99,0xe1,0x20,0xd0,0x11,0xbb,0x8a,0xf3,0x74,0xfa,0x6f,0x93,0x1c,0x20 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-60", "[OFB][MCT][256][DECRYPT][n60]") {
    const uint8_t KEY[] = { 0x22,0x6f,0x95,0xd5,0x4b,0x47,0x06,0x3d,0xec,0x38,0xcd,0xbc,0xc7,0x6a,0xc3,0xee,0xe3,0x04,0x49,0xda,0xa4,0x85,0xab,0x59,0x26,0x1b,0xa7,0x09,0x64,0xd0,0xd3,0xe2 };
    const uint8_t IV[] = { 0xe2,0x41,0x1a,0x3f,0xd8,0x5a,0x44,0x32,0x81,0x0e,0x98,0x2a,0x08,0xc0,0x3d,0x9f };
    const uint8_t PLAINTEXT[] = { 0x06,0x95,0xca,0x6b,0x45,0x01,0x38,0x82,0x36,0x05,0x1c,0xa7,0xf9,0x65,0xbf,0x78 };
    const uint8_t CIPHERTEXT[] = { 0xa8,0x87,0x6e,0x2c,0x00,0xa7,0x0d,0x49,0x8c,0x65,0xf7,0xee,0xe3,0xfa,0x8a,0x27 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-61", "[OFB][MCT][256][DECRYPT][n61]") {
    const uint8_t KEY[] = { 0x20,0x91,0xf3,0x7a,0xb9,0x99,0x34,0x08,0xd4,0xed,0x63,0xaf,0x80,0xd5,0x89,0xec,0xe5,0x91,0x83,0xb1,0xe1,0x84,0x93,0xdb,0x10,0x1e,0xbb,0xae,0x9d,0xb5,0x6c,0x9a };
    const uint8_t IV[] = { 0x06,0x95,0xca,0x6b,0x45,0x01,0x38,0x82,0x36,0x05,0x1c,0xa7,0xf9,0x65,0xbf,0x78 };
    const uint8_t PLAINTEXT[] = { 0x97,0x5a,0x22,0xf4,0x8b,0x0f,0x5a,0xaf,0xeb,0xb5,0x64,0x27,0xd1,0x20,0xfb,0x8b };
    const uint8_t CIPHERTEXT[] = { 0x02,0xfe,0x66,0xaf,0xf2,0xde,0x32,0x35,0x38,0xd5,0xae,0x13,0x47,0xbf,0x4a,0x02 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-62", "[OFB][MCT][256][DECRYPT][n62]") {
    const uint8_t KEY[] = { 0xc4,0x3d,0xb8,0xd7,0x4b,0x2e,0x5f,0xd1,0xab,0xcb,0x5b,0x9b,0xeb,0x02,0x2a,0xcb,0x72,0xcb,0xa1,0x45,0x6a,0x8b,0xc9,0x74,0xfb,0xab,0xdf,0x89,0x4c,0x95,0x97,0x11 };
    const uint8_t IV[] = { 0x97,0x5a,0x22,0xf4,0x8b,0x0f,0x5a,0xaf,0xeb,0xb5,0x64,0x27,0xd1,0x20,0xfb,0x8b };
    const uint8_t PLAINTEXT[] = { 0xd2,0x68,0x29,0x2b,0x11,0x31,0xe1,0x86,0xf0,0xd2,0x28,0x6a,0xfc,0x50,0x6b,0x82 };
    const uint8_t CIPHERTEXT[] = { 0xe4,0xac,0x4b,0xad,0xf2,0xb7,0x6b,0xd9,0x7f,0x26,0x38,0x34,0x6b,0xd7,0xa3,0x27 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-63", "[OFB][MCT][256][DECRYPT][n63]") {
    const uint8_t KEY[] = { 0x62,0x75,0x07,0xfc,0xac,0x83,0xb6,0x25,0xeb,0x8f,0x32,0x4b,0x7b,0xb1,0xf5,0x6b,0xa0,0xa3,0x88,0x6e,0x7b,0xba,0x28,0xf2,0x0b,0x79,0xf7,0xe3,0xb0,0xc5,0xfc,0x93 };
    const uint8_t IV[] = { 0xd2,0x68,0x29,0x2b,0x11,0x31,0xe1,0x86,0xf0,0xd2,0x28,0x6a,0xfc,0x50,0x6b,0x82 };
    const uint8_t PLAINTEXT[] = { 0xb5,0x4d,0x56,0x0b,0x00,0x3c,0x15,0x8d,0x7d,0xe0,0xf3,0xa4,0xfe,0xfe,0xbe,0x08 };
    const uint8_t CIPHERTEXT[] = { 0xa6,0x48,0xbf,0x2b,0xe7,0xad,0xe9,0xf4,0x40,0x44,0x69,0xd0,0x90,0xb3,0xdf,0xa0 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-64", "[OFB][MCT][256][DECRYPT][n64]") {
    const uint8_t KEY[] = { 0x08,0xef,0x9d,0x8b,0x4b,0x61,0x41,0x13,0x0f,0xdd,0x5e,0x86,0x9a,0xff,0xb9,0x2a,0x15,0xee,0xde,0x65,0x7b,0x86,0x3d,0x7f,0x76,0x99,0x04,0x47,0x4e,0x3b,0x42,0x9b };
    const uint8_t IV[] = { 0xb5,0x4d,0x56,0x0b,0x00,0x3c,0x15,0x8d,0x7d,0xe0,0xf3,0xa4,0xfe,0xfe,0xbe,0x08 };
    const uint8_t PLAINTEXT[] = { 0x54,0x92,0xa9,0x14,0x61,0xb2,0x43,0x4c,0xb8,0x40,0xdc,0x29,0x9f,0x8e,0x04,0x82 };
    const uint8_t CIPHERTEXT[] = { 0x6a,0x9a,0x9a,0x77,0xe7,0xe2,0xf7,0x36,0xe4,0x52,0x6c,0xcd,0xe1,0x4e,0x4c,0x41 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-65", "[OFB][MCT][256][DECRYPT][n65]") {
    const uint8_t KEY[] = { 0xa2,0xbc,0xbc,0xe8,0xd4,0xab,0x3e,0xf7,0xcf,0xa8,0x97,0x80,0x1b,0xf2,0xe5,0x2b,0x41,0x7c,0x77,0x71,0x1a,0x34,0x7e,0x33,0xce,0xd9,0xd8,0x6e,0xd1,0xb5,0x46,0x19 };
    const uint8_t IV[] = { 0x54,0x92,0xa9,0x14,0x61,0xb2,0x43,0x4c,0xb8,0x40,0xdc,0x29,0x9f,0x8e,0x04,0x82 };
    const uint8_t PLAINTEXT[] = { 0x36,0xac,0xe2,0x81,0xd6,0x4f,0x80,0xb8,0xc5,0x95,0xc0,0x3b,0xa6,0x08,0xa5,0x03 };
    const uint8_t CIPHERTEXT[] = { 0xaa,0x53,0x21,0x63,0x9f,0xca,0x7f,0xe4,0xc0,0x75,0xc9,0x06,0x81,0x0d,0x5c,0x01 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-66", "[OFB][MCT][256][DECRYPT][n66]") {
    const uint8_t KEY[] = { 0x69,0xe5,0xdc,0xf0,0xa7,0x07,0x39,0xa4,0x72,0x70,0x86,0x3a,0x98,0xd3,0xf0,0xf6,0x77,0xd0,0x95,0xf0,0xcc,0x7b,0xfe,0x8b,0x0b,0x4c,0x18,0x55,0x77,0xbd,0xe3,0x1a };
    const uint8_t IV[] = { 0x36,0xac,0xe2,0x81,0xd6,0x4f,0x80,0xb8,0xc5,0x95,0xc0,0x3b,0xa6,0x08,0xa5,0x03 };
    const uint8_t PLAINTEXT[] = { 0xb0,0xc9,0x47,0x5c,0xd0,0xcf,0x4c,0xc5,0xd0,0xa5,0xfd,0x33,0x30,0x2b,0x34,0x18 };
    const uint8_t CIPHERTEXT[] = { 0xcb,0x59,0x60,0x18,0x73,0xac,0x07,0x53,0xbd,0xd8,0x11,0xba,0x83,0x21,0x15,0xdd };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-67", "[OFB][MCT][256][DECRYPT][n67]") {
    const uint8_t KEY[] = { 0x72,0xa6,0xc0,0x60,0xf0,0x87,0x2f,0x6a,0x41,0xe8,0xc9,0x62,0x07,0xb1,0x75,0xbf,0xc7,0x19,0xd2,0xac,0x1c,0xb4,0xb2,0x4e,0xdb,0xe9,0xe5,0x66,0x47,0x96,0xd7,0x02 };
    const uint8_t IV[] = { 0xb0,0xc9,0x47,0x5c,0xd0,0xcf,0x4c,0xc5,0xd0,0xa5,0xfd,0x33,0x30,0x2b,0x34,0x18 };
    const uint8_t PLAINTEXT[] = { 0x32,0xf8,0x69,0xfb,0x10,0x98,0x72,0x16,0x71,0xb2,0xef,0x30,0x66,0x8c,0xc2,0x13 };
    const uint8_t CIPHERTEXT[] = { 0x1b,0x43,0x1c,0x90,0x57,0x80,0x16,0xce,0x33,0x98,0x4f,0x58,0x9f,0x62,0x85,0x49 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-68", "[OFB][MCT][256][DECRYPT][n68]") {
    const uint8_t KEY[] = { 0x6a,0xeb,0x87,0x2d,0x0e,0xeb,0x4d,0x03,0x6d,0xa5,0xb9,0xfb,0xb0,0xb2,0x52,0xe7,0xf5,0xe1,0xbb,0x57,0x0c,0x2c,0xc0,0x58,0xaa,0x5b,0x0a,0x56,0x21,0x1a,0x15,0x11 };
    const uint8_t IV[] = { 0x32,0xf8,0x69,0xfb,0x10,0x98,0x72,0x16,0x71,0xb2,0xef,0x30,0x66,0x8c,0xc2,0x13 };
    const uint8_t PLAINTEXT[] = { 0xb2,0xf7,0xfb,0x0f,0x25,0x86,0x7b,0x63,0xf8,0xd2,0x5d,0x52,0x2c,0x5a,0x0e,0xfd };
    const uint8_t CIPHERTEXT[] = { 0x18,0x4d,0x47,0x4d,0xfe,0x6c,0x62,0x69,0x2c,0x4d,0x70,0x99,0xb7,0x03,0x27,0x58 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-69", "[OFB][MCT][256][DECRYPT][n69]") {
    const uint8_t KEY[] = { 0x58,0x6f,0x3c,0x99,0x43,0xe8,0x49,0x7a,0x21,0x53,0xac,0x32,0x4e,0x55,0x98,0x12,0x47,0x16,0x40,0x58,0x29,0xaa,0xbb,0x3b,0x52,0x89,0x57,0x04,0x0d,0x40,0x1b,0xec };
    const uint8_t IV[] = { 0xb2,0xf7,0xfb,0x0f,0x25,0x86,0x7b,0x63,0xf8,0xd2,0x5d,0x52,0x2c,0x5a,0x0e,0xfd };
    const uint8_t PLAINTEXT[] = { 0x49,0xd7,0xaf,0xb2,0x7c,0xd2,0x5a,0x61,0x04,0x97,0x2f,0xb3,0xb4,0xc8,0xec,0xf7 };
    const uint8_t CIPHERTEXT[] = { 0x32,0x84,0xbb,0xb4,0x4d,0x03,0x04,0x79,0x4c,0xf6,0x15,0xc9,0xfe,0xe7,0xca,0xf5 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-70", "[OFB][MCT][256][DECRYPT][n70]") {
    const uint8_t KEY[] = { 0xaa,0x9e,0xe3,0x8f,0x78,0x48,0x82,0x21,0x50,0x99,0x87,0x67,0x63,0x0e,0x84,0xe1,0x0e,0xc1,0xef,0xea,0x55,0x78,0xe1,0x5a,0x56,0x1e,0x78,0xb7,0xb9,0x88,0xf7,0x1b };
    const uint8_t IV[] = { 0x49,0xd7,0xaf,0xb2,0x7c,0xd2,0x5a,0x61,0x04,0x97,0x2f,0xb3,0xb4,0xc8,0xec,0xf7 };
    const uint8_t PLAINTEXT[] = { 0x34,0xd1,0xc8,0xc2,0x20,0xe1,0xe0,0xb6,0x14,0xba,0x88,0xca,0xd2,0x46,0x89,0xff };
    const uint8_t CIPHERTEXT[] = { 0xf2,0xf1,0xdf,0x16,0x3b,0xa0,0xcb,0x5b,0x71,0xca,0x2b,0x55,0x2d,0x5b,0x1c,0xf3 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-71", "[OFB][MCT][256][DECRYPT][n71]") {
    const uint8_t KEY[] = { 0x7a,0x5f,0x25,0x7f,0x24,0x25,0x22,0x3d,0xa0,0x3e,0x39,0x36,0x33,0x17,0xbb,0xa4,0x3a,0x10,0x27,0x28,0x75,0x99,0x01,0xec,0x42,0xa4,0xf0,0x7d,0x6b,0xce,0x7e,0xe4 };
    const uint8_t IV[] = { 0x34,0xd1,0xc8,0xc2,0x20,0xe1,0xe0,0xb6,0x14,0xba,0x88,0xca,0xd2,0x46,0x89,0xff };
    const uint8_t PLAINTEXT[] = { 0x44,0xc1,0x73,0x85,0x4b,0x0b,0xad,0x93,0x98,0x25,0x55,0xb8,0xbb,0x41,0x99,0x21 };
    const uint8_t CIPHERTEXT[] = { 0xd0,0xc1,0xc6,0xf0,0x5c,0x6d,0xa0,0x1c,0xf0,0xa7,0xbe,0x51,0x50,0x19,0x3f,0x45 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-72", "[OFB][MCT][256][DECRYPT][n72]") {
    const uint8_t KEY[] = { 0xde,0x48,0x17,0x7e,0x64,0x27,0xbd,0x43,0x3a,0x52,0x05,0xf2,0x35,0x06,0x4e,0x7d,0x7e,0xd1,0x54,0xad,0x3e,0x92,0xac,0x7f,0xda,0x81,0xa5,0xc5,0xd0,0x8f,0xe7,0xc5 };
    const uint8_t IV[] = { 0x44,0xc1,0x73,0x85,0x4b,0x0b,0xad,0x93,0x98,0x25,0x55,0xb8,0xbb,0x41,0x99,0x21 };
    const uint8_t PLAINTEXT[] = { 0xd4,0x13,0x9f,0xf4,0x65,0x9f,0x6c,0x98,0x51,0x31,0xa3,0x0c,0x86,0xa3,0xa9,0xc9 };
    const uint8_t CIPHERTEXT[] = { 0xa4,0x17,0x32,0x01,0x40,0x02,0x9f,0x7e,0x9a,0x6c,0x3c,0xc4,0x06,0x11,0xf5,0xd9 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-73", "[OFB][MCT][256][DECRYPT][n73]") {
    const uint8_t KEY[] = { 0x7d,0x19,0x57,0x0f,0xd6,0x3d,0x82,0x14,0x11,0x16,0x27,0xb5,0x19,0xf4,0x46,0x9d,0xaa,0xc2,0xcb,0x59,0x5b,0x0d,0xc0,0xe7,0x8b,0xb0,0x06,0xc9,0x56,0x2c,0x4e,0x0c };
    const uint8_t IV[] = { 0xd4,0x13,0x9f,0xf4,0x65,0x9f,0x6c,0x98,0x51,0x31,0xa3,0x0c,0x86,0xa3,0xa9,0xc9 };
    const uint8_t PLAINTEXT[] = { 0x27,0x19,0xef,0xdc,0x65,0xa8,0xeb,0x0e,0x6f,0x0f,0x29,0x75,0x3c,0x13,0x14,0x6c };
    const uint8_t CIPHERTEXT[] = { 0xa3,0x51,0x40,0x71,0xb2,0x1a,0x3f,0x57,0x2b,0x44,0x22,0x47,0x2c,0xf2,0x08,0xe0 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-74", "[OFB][MCT][256][DECRYPT][n74]") {
    const uint8_t KEY[] = { 0xcf,0x04,0x58,0x90,0x74,0x95,0xe4,0xce,0xad,0xd9,0x80,0x64,0xe4,0x73,0x4a,0x16,0x8d,0xdb,0x24,0x85,0x3e,0xa5,0x2b,0xe9,0xe4,0xbf,0x2f,0xbc,0x6a,0x3f,0x5a,0x60 };
    const uint8_t IV[] = { 0x27,0x19,0xef,0xdc,0x65,0xa8,0xeb,0x0e,0x6f,0x0f,0x29,0x75,0x3c,0x13,0x14,0x6c };
    const uint8_t PLAINTEXT[] = { 0xc1,0x7b,0x9b,0xc5,0x5f,0x10,0x93,0x51,0x50,0xfc,0xd6,0x53,0x56,0xd8,0x69,0x30 };
    const uint8_t CIPHERTEXT[] = { 0xb2,0x1d,0x0f,0x9f,0xa2,0xa8,0x66,0xda,0xbc,0xcf,0xa7,0xd1,0xfd,0x87,0x0c,0x8b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-75", "[OFB][MCT][256][DECRYPT][n75]") {
    const uint8_t KEY[] = { 0x9f,0xda,0x88,0x87,0xed,0x83,0x18,0x7d,0x17,0x24,0x79,0x2f,0xd1,0x0d,0x14,0x2d,0x4c,0xa0,0xbf,0x40,0x61,0xb5,0xb8,0xb8,0xb4,0x43,0xf9,0xef,0x3c,0xe7,0x33,0x50 };
    const uint8_t IV[] = { 0xc1,0x7b,0x9b,0xc5,0x5f,0x10,0x93,0x51,0x50,0xfc,0xd6,0x53,0x56,0xd8,0x69,0x30 };
    const uint8_t PLAINTEXT[] = { 0xfd,0x9c,0xc5,0xd9,0xc3,0x8a,0xed,0xed,0x12,0x4e,0xfe,0x81,0x62,0xdb,0x73,0xc3 };
    const uint8_t CIPHERTEXT[] = { 0x50,0xde,0xd0,0x17,0x99,0x16,0xfc,0xb3,0xba,0xfd,0xf9,0x4b,0x35,0x7e,0x5e,0x3b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-76", "[OFB][MCT][256][DECRYPT][n76]") {
    const uint8_t KEY[] = { 0x67,0x6b,0xf8,0x0d,0x94,0x4f,0xca,0x5a,0xa6,0xce,0xed,0xd5,0xcf,0x6b,0x7a,0x98,0xb1,0x3c,0x7a,0x99,0xa2,0x3f,0x55,0x55,0xa6,0x0d,0x07,0x6e,0x5e,0x3c,0x40,0x93 };
    const uint8_t IV[] = { 0xfd,0x9c,0xc5,0xd9,0xc3,0x8a,0xed,0xed,0x12,0x4e,0xfe,0x81,0x62,0xdb,0x73,0xc3 };
    const uint8_t PLAINTEXT[] = { 0xbc,0xa5,0x31,0x4c,0x1b,0x21,0x5c,0x31,0xd7,0xa9,0xcb,0x17,0x13,0x2b,0x3d,0x54 };
    const uint8_t CIPHERTEXT[] = { 0xf8,0xb1,0x70,0x8a,0x79,0xcc,0xd2,0x27,0xb1,0xea,0x94,0xfa,0x1e,0x66,0x6e,0xb5 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-77", "[OFB][MCT][256][DECRYPT][n77]") {
    const uint8_t KEY[] = { 0xbd,0x32,0xd3,0x30,0xb8,0x64,0x06,0x55,0x3d,0xc3,0x09,0xe9,0xb0,0xbd,0x9d,0x61,0x0d,0x99,0x4b,0xd5,0xb9,0x1e,0x09,0x64,0x71,0xa4,0xcc,0x79,0x4d,0x17,0x7d,0xc7 };
    const uint8_t IV[] = { 0xbc,0xa5,0x31,0x4c,0x1b,0x21,0x5c,0x31,0xd7,0xa9,0xcb,0x17,0x13,0x2b,0x3d,0x54 };
    const uint8_t PLAINTEXT[] = { 0xfe,0x6d,0x94,0x84,0x75,0xac,0xa2,0x22,0xb6,0xdc,0x3f,0x8f,0x90,0x9e,0x00,0x42 };
    const uint8_t CIPHERTEXT[] = { 0xda,0x59,0x2b,0x3d,0x2c,0x2b,0xcc,0x0f,0x9b,0x0d,0xe4,0x3c,0x7f,0xd6,0xe7,0xf9 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-78", "[OFB][MCT][256][DECRYPT][n78]") {
    const uint8_t KEY[] = { 0xb4,0x7f,0xe0,0xe8,0xbe,0x92,0x22,0x17,0xb0,0x3f,0x46,0x8a,0x8d,0xab,0xcf,0x9a,0xf3,0xf4,0xdf,0x51,0xcc,0xb2,0xab,0x46,0xc7,0x78,0xf3,0xf6,0xdd,0x89,0x7d,0x85 };
    const uint8_t IV[] = { 0xfe,0x6d,0x94,0x84,0x75,0xac,0xa2,0x22,0xb6,0xdc,0x3f,0x8f,0x90,0x9e,0x00,0x42 };
    const uint8_t PLAINTEXT[] = { 0xab,0xc1,0x8b,0xb7,0x89,0x0d,0x51,0x3d,0x88,0x78,0xa5,0xaa,0x03,0x5f,0xf8,0xcb };
    const uint8_t CIPHERTEXT[] = { 0x09,0x4d,0x33,0xd8,0x06,0xf6,0x24,0x42,0x8d,0xfc,0x4f,0x63,0x3d,0x16,0x52,0xfb };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-79", "[OFB][MCT][256][DECRYPT][n79]") {
    const uint8_t KEY[] = { 0xbd,0x0d,0x98,0xee,0x1f,0x21,0xd7,0xfb,0xf9,0x82,0x91,0x95,0xcb,0x1d,0x9d,0x63,0x58,0x35,0x54,0xe6,0x45,0xbf,0xfa,0x7b,0x4f,0x00,0x56,0x5c,0xde,0xd6,0x85,0x4e };
    const uint8_t IV[] = { 0xab,0xc1,0x8b,0xb7,0x89,0x0d,0x51,0x3d,0x88,0x78,0xa5,0xaa,0x03,0x5f,0xf8,0xcb };
    const uint8_t PLAINTEXT[] = { 0xc1,0x88,0xf9,0xbc,0xfa,0x9d,0xcf,0x41,0xfc,0xff,0xbe,0xf3,0xb4,0xad,0x9e,0x25 };
    const uint8_t CIPHERTEXT[] = { 0x09,0x72,0x78,0x06,0xa1,0xb3,0xf5,0xec,0x49,0xbd,0xd7,0x1f,0x46,0xb6,0x52,0xf9 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-80", "[OFB][MCT][256][DECRYPT][n80]") {
    const uint8_t KEY[] = { 0xb6,0x01,0x52,0x9e,0x9d,0x6d,0x46,0x5e,0xf5,0x46,0x6f,0x60,0x6c,0xd2,0x3f,0xc5,0x99,0xbd,0xad,0x5a,0xbf,0x22,0x35,0x3a,0xb3,0xff,0xe8,0xaf,0x6a,0x7b,0x1b,0x6b };
    const uint8_t IV[] = { 0xc1,0x88,0xf9,0xbc,0xfa,0x9d,0xcf,0x41,0xfc,0xff,0xbe,0xf3,0xb4,0xad,0x9e,0x25 };
    const uint8_t PLAINTEXT[] = { 0x38,0x69,0xd5,0x89,0x2a,0x3e,0x87,0x06,0x63,0x1b,0x8d,0x9c,0xae,0x5f,0x46,0xc1 };
    const uint8_t CIPHERTEXT[] = { 0x0b,0x0c,0xca,0x70,0x82,0x4c,0x91,0xa5,0x0c,0xc4,0xfe,0xf5,0xa7,0xcf,0xa2,0xa6 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-81", "[OFB][MCT][256][DECRYPT][n81]") {
    const uint8_t KEY[] = { 0xb1,0xa9,0xc9,0xe2,0x66,0xd7,0x47,0xd0,0x3e,0xab,0x9d,0x49,0x21,0x42,0x65,0xb4,0xa1,0xd4,0x78,0xd3,0x95,0x1c,0xb2,0x3c,0xd0,0xe4,0x65,0x33,0xc4,0x24,0x5d,0xaa };
    const uint8_t IV[] = { 0x38,0x69,0xd5,0x89,0x2a,0x3e,0x87,0x06,0x63,0x1b,0x8d,0x9c,0xae,0x5f,0x46,0xc1 };
    const uint8_t PLAINTEXT[] = { 0x8f,0x0d,0xc9,0xd2,0xe6,0x11,0xa5,0xb3,0x21,0x88,0xba,0x9f,0x5c,0xd8,0x89,0x5d };
    const uint8_t CIPHERTEXT[] = { 0x07,0xa8,0x9b,0x7c,0xfb,0xba,0x01,0x8e,0xcb,0xed,0xf2,0x29,0x4d,0x90,0x5a,0x71 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-82", "[OFB][MCT][256][DECRYPT][n82]") {
    const uint8_t KEY[] = { 0xf8,0x56,0x11,0x1b,0xbb,0x1f,0x81,0xb6,0x43,0x5b,0x8f,0xc2,0x48,0xd3,0x15,0xf3,0x2e,0xd9,0xb1,0x01,0x73,0x0d,0x17,0x8f,0xf1,0x6c,0xdf,0xac,0x98,0xfc,0xd4,0xf7 };
    const uint8_t IV[] = { 0x8f,0x0d,0xc9,0xd2,0xe6,0x11,0xa5,0xb3,0x21,0x88,0xba,0x9f,0x5c,0xd8,0x89,0x5d };
    const uint8_t PLAINTEXT[] = { 0x9b,0x1d,0xf8,0xd8,0xb6,0x1c,0x99,0x98,0xb9,0x6b,0xca,0x4a,0x62,0x11,0xde,0xa2 };
    const uint8_t CIPHERTEXT[] = { 0x49,0xff,0xd8,0xf9,0xdd,0xc8,0xc6,0x66,0x7d,0xf0,0x12,0x8b,0x69,0x91,0x70,0x47 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-83", "[OFB][MCT][256][DECRYPT][n83]") {
    const uint8_t KEY[] = { 0xad,0xd6,0x21,0x9e,0xe3,0x57,0xdc,0x1c,0xa8,0x29,0x56,0x54,0xde,0x2d,0x7a,0xc3,0xb5,0xc4,0x49,0xd9,0xc5,0x11,0x8e,0x17,0x48,0x07,0x15,0xe6,0xfa,0xed,0x0a,0x55 };
    const uint8_t IV[] = { 0x9b,0x1d,0xf8,0xd8,0xb6,0x1c,0x99,0x98,0xb9,0x6b,0xca,0x4a,0x62,0x11,0xde,0xa2 };
    const uint8_t PLAINTEXT[] = { 0x69,0x31,0xe6,0xab,0x27,0xd2,0x44,0x10,0xbc,0x1e,0x1b,0x06,0x37,0x90,0x88,0xfa };
    const uint8_t CIPHERTEXT[] = { 0x55,0x80,0x30,0x85,0x58,0x48,0x5d,0xaa,0xeb,0x72,0xd9,0x96,0x96,0xfe,0x6f,0x30 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-84", "[OFB][MCT][256][DECRYPT][n84]") {
    const uint8_t KEY[] = { 0x47,0x8f,0xd2,0xf8,0x5d,0xbb,0xde,0xe8,0xc3,0xcc,0x32,0xfa,0x39,0xa3,0x82,0xa0,0xdc,0xf5,0xaf,0x72,0xe2,0xc3,0xca,0x07,0xf4,0x19,0x0e,0xe0,0xcd,0x7d,0x82,0xaf };
    const uint8_t IV[] = { 0x69,0x31,0xe6,0xab,0x27,0xd2,0x44,0x10,0xbc,0x1e,0x1b,0x06,0x37,0x90,0x88,0xfa };
    const uint8_t PLAINTEXT[] = { 0x08,0xa5,0x71,0x23,0x51,0xce,0xa6,0xfd,0x4e,0xb9,0x4a,0x2e,0xb7,0x30,0xda,0x50 };
    const uint8_t CIPHERTEXT[] = { 0xea,0x59,0xf3,0x66,0xbe,0xec,0x02,0xf4,0x6b,0xe5,0x64,0xae,0xe7,0x8e,0xf8,0x63 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-85", "[OFB][MCT][256][DECRYPT][n85]") {
    const uint8_t KEY[] = { 0x73,0x80,0x54,0x7f,0x73,0xdb,0x52,0xbe,0x3b,0x42,0x90,0x35,0xbc,0xde,0x11,0x08,0xd4,0x50,0xde,0x51,0xb3,0x0d,0x6c,0xfa,0xba,0xa0,0x44,0xce,0x7a,0x4d,0x58,0xff };
    const uint8_t IV[] = { 0x08,0xa5,0x71,0x23,0x51,0xce,0xa6,0xfd,0x4e,0xb9,0x4a,0x2e,0xb7,0x30,0xda,0x50 };
    const uint8_t PLAINTEXT[] = { 0xa1,0x82,0x33,0x17,0x94,0x0d,0x29,0x90,0xac,0x80,0xab,0xa2,0xca,0x9d,0xf8,0xbe };
    const uint8_t CIPHERTEXT[] = { 0x34,0x0f,0x86,0x87,0x2e,0x60,0x8c,0x56,0xf8,0x8e,0xa2,0xcf,0x85,0x7d,0x93,0xa8 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-86", "[OFB][MCT][256][DECRYPT][n86]") {
    const uint8_t KEY[] = { 0x29,0xdc,0x1e,0xf3,0x50,0x18,0xbb,0xa3,0x57,0xaa,0xd2,0x4e,0x48,0x03,0x56,0x19,0x75,0xd2,0xed,0x46,0x27,0x00,0x45,0x6a,0x16,0x20,0xef,0x6c,0xb0,0xd0,0xa0,0x41 };
    const uint8_t IV[] = { 0xa1,0x82,0x33,0x17,0x94,0x0d,0x29,0x90,0xac,0x80,0xab,0xa2,0xca,0x9d,0xf8,0xbe };
    const uint8_t PLAINTEXT[] = { 0xe7,0x1a,0x56,0x8a,0x22,0xc7,0x3d,0x6d,0x5d,0x20,0x37,0xfd,0x82,0x82,0xff,0xe5 };
    const uint8_t CIPHERTEXT[] = { 0x5a,0x5c,0x4a,0x8c,0x23,0xc3,0xe9,0x1d,0x6c,0xe8,0x42,0x7b,0xf4,0xdd,0x47,0x11 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-87", "[OFB][MCT][256][DECRYPT][n87]") {
    const uint8_t KEY[] = { 0x92,0x71,0xd2,0x02,0xea,0x82,0xe1,0xc3,0x14,0x80,0x27,0x89,0x43,0xc4,0x59,0xc5,0x92,0xc8,0xbb,0xcc,0x05,0xc7,0x78,0x07,0x4b,0x00,0xd8,0x91,0x32,0x52,0x5f,0xa4 };
    const uint8_t IV[] = { 0xe7,0x1a,0x56,0x8a,0x22,0xc7,0x3d,0x6d,0x5d,0x20,0x37,0xfd,0x82,0x82,0xff,0xe5 };
    const uint8_t PLAINTEXT[] = { 0x90,0x65,0xaa,0x28,0xc4,0x70,0xa3,0x8e,0x46,0x94,0xdc,0x01,0x85,0x5a,0xb3,0x5a };
    const uint8_t CIPHERTEXT[] = { 0xbb,0xad,0xcc,0xf1,0xba,0x9a,0x5a,0x60,0x43,0x2a,0xf5,0xc7,0x0b,0xc7,0x0f,0xdc };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-88", "[OFB][MCT][256][DECRYPT][n88]") {
    const uint8_t KEY[] = { 0xc9,0x6c,0x8f,0x03,0x4d,0xb5,0x33,0x98,0x32,0x63,0xb8,0x2b,0xfe,0x36,0xbb,0xf9,0x02,0xad,0x11,0xe4,0xc1,0xb7,0xdb,0x89,0x0d,0x94,0x04,0x90,0xb7,0x08,0xec,0xfe };
    const uint8_t IV[] = { 0x90,0x65,0xaa,0x28,0xc4,0x70,0xa3,0x8e,0x46,0x94,0xdc,0x01,0x85,0x5a,0xb3,0x5a };
    const uint8_t PLAINTEXT[] = { 0xa4,0xf7,0x12,0x7b,0xde,0x32,0x4d,0x8c,0x76,0xb4,0xb4,0x40,0x1f,0xbf,0x74,0x49 };
    const uint8_t CIPHERTEXT[] = { 0x5b,0x1d,0x5d,0x01,0xa7,0x37,0xd2,0x5b,0x26,0xe3,0x9f,0xa2,0xbd,0xf2,0xe2,0x3c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-89", "[OFB][MCT][256][DECRYPT][n89]") {
    const uint8_t KEY[] = { 0x2e,0xad,0xfa,0xee,0x4d,0x81,0x23,0x4e,0xf9,0xfb,0x0a,0x35,0x6d,0x2d,0x3f,0x8f,0xa6,0x5a,0x03,0x9f,0x1f,0x85,0x96,0x05,0x7b,0x20,0xb0,0xd0,0xa8,0xb7,0x98,0xb7 };
    const uint8_t IV[] = { 0xa4,0xf7,0x12,0x7b,0xde,0x32,0x4d,0x8c,0x76,0xb4,0xb4,0x40,0x1f,0xbf,0x74,0x49 };
    const uint8_t PLAINTEXT[] = { 0x28,0x34,0x2d,0xe9,0xcb,0xbd,0xbb,0x7f,0x27,0x1c,0xd9,0xb7,0xc7,0x5e,0xa6,0x79 };
    const uint8_t CIPHERTEXT[] = { 0xe7,0xc1,0x75,0xed,0x00,0x34,0x10,0xd6,0xcb,0x98,0xb2,0x1e,0x93,0x1b,0x84,0x76 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-90", "[OFB][MCT][256][DECRYPT][n90]") {
    const uint8_t KEY[] = { 0xdc,0x08,0x7d,0x48,0x8d,0x83,0x9b,0x97,0x08,0xd1,0x8d,0xd1,0xb2,0x96,0x61,0xba,0x8e,0x6e,0x2e,0x76,0xd4,0x38,0x2d,0x7a,0x5c,0x3c,0x69,0x67,0x6f,0xe9,0x3e,0xce };
    const uint8_t IV[] = { 0x28,0x34,0x2d,0xe9,0xcb,0xbd,0xbb,0x7f,0x27,0x1c,0xd9,0xb7,0xc7,0x5e,0xa6,0x79 };
    const uint8_t PLAINTEXT[] = { 0x34,0x31,0x4c,0xe0,0x23,0xbe,0x1c,0x0d,0x48,0x1f,0xbc,0x15,0x5b,0xc2,0xee,0x0c };
    const uint8_t CIPHERTEXT[] = { 0xf2,0xa5,0x87,0xa6,0xc0,0x02,0xb8,0xd9,0xf1,0x2a,0x87,0xe4,0xdf,0xbb,0x5e,0x35 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-91", "[OFB][MCT][256][DECRYPT][n91]") {
    const uint8_t KEY[] = { 0x0b,0x8c,0x92,0xc3,0xdc,0x70,0x07,0x37,0x04,0x72,0xd3,0x90,0xde,0x5d,0x51,0x4b,0xba,0x5f,0x62,0x96,0xf7,0x86,0x31,0x77,0x14,0x23,0xd5,0x72,0x34,0x2b,0xd0,0xc2 };
    const uint8_t IV[] = { 0x34,0x31,0x4c,0xe0,0x23,0xbe,0x1c,0x0d,0x48,0x1f,0xbc,0x15,0x5b,0xc2,0xee,0x0c };
    const uint8_t PLAINTEXT[] = { 0xb5,0x30,0xcc,0xd4,0xde,0xd4,0x2c,0xfa,0x9a,0x38,0xd1,0x5d,0x47,0x16,0xfb,0x70 };
    const uint8_t CIPHERTEXT[] = { 0xd7,0x84,0xef,0x8b,0x51,0xf3,0x9c,0xa0,0x0c,0xa3,0x5e,0x41,0x6c,0xcb,0x30,0xf1 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-92", "[OFB][MCT][256][DECRYPT][n92]") {
    const uint8_t KEY[] = { 0x49,0x45,0xa1,0x9f,0x14,0x51,0xc7,0xea,0xd7,0x64,0xf5,0x16,0xba,0x28,0xc4,0xf3,0x0f,0x6f,0xae,0x42,0x29,0x52,0x1d,0x8d,0x8e,0x1b,0x04,0x2f,0x73,0x3d,0x2b,0xb2 };
    const uint8_t IV[] = { 0xb5,0x30,0xcc,0xd4,0xde,0xd4,0x2c,0xfa,0x9a,0x38,0xd1,0x5d,0x47,0x16,0xfb,0x70 };
    const uint8_t PLAINTEXT[] = { 0x67,0x2a,0xe0,0x0b,0x2d,0xf9,0xa7,0x8e,0x15,0xfe,0x28,0xf4,0x9f,0xf4,0xfd,0x13 };
    const uint8_t CIPHERTEXT[] = { 0x42,0xc9,0x33,0x5c,0xc8,0x21,0xc0,0xdd,0xd3,0x16,0x26,0x86,0x64,0x75,0x95,0xb8 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-93", "[OFB][MCT][256][DECRYPT][n93]") {
    const uint8_t KEY[] = { 0xfe,0x44,0xb2,0x97,0xf5,0x0b,0x46,0x75,0x1a,0x8e,0xbe,0xda,0x89,0x02,0x16,0x32,0x68,0x45,0x4e,0x49,0x04,0xab,0xba,0x03,0x9b,0xe5,0x2c,0xdb,0xec,0xc9,0xd6,0xa1 };
    const uint8_t IV[] = { 0x67,0x2a,0xe0,0x0b,0x2d,0xf9,0xa7,0x8e,0x15,0xfe,0x28,0xf4,0x9f,0xf4,0xfd,0x13 };
    const uint8_t PLAINTEXT[] = { 0x7a,0xde,0x2e,0x55,0xd4,0xaa,0xa1,0xaa,0x13,0x6e,0x6d,0x3c,0x7f,0x91,0x56,0x08 };
    const uint8_t CIPHERTEXT[] = { 0xb7,0x01,0x13,0x08,0xe1,0x5a,0x81,0x9f,0xcd,0xea,0x4b,0xcc,0x33,0x2a,0xd2,0xc1 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-94", "[OFB][MCT][256][DECRYPT][n94]") {
    const uint8_t KEY[] = { 0x83,0x5b,0x94,0xed,0xb2,0x98,0x6e,0x63,0x1d,0xf8,0x6d,0x27,0x34,0x2f,0x93,0x42,0x12,0x9b,0x60,0x1c,0xd0,0x01,0x1b,0xa9,0x88,0x8b,0x41,0xe7,0x93,0x58,0x80,0xa9 };
    const uint8_t IV[] = { 0x7a,0xde,0x2e,0x55,0xd4,0xaa,0xa1,0xaa,0x13,0x6e,0x6d,0x3c,0x7f,0x91,0x56,0x08 };
    const uint8_t PLAINTEXT[] = { 0x0d,0x5d,0x7b,0xdd,0xaa,0xe2,0xbd,0x96,0x98,0x9c,0xab,0xec,0x4e,0xe3,0x2a,0xa2 };
    const uint8_t CIPHERTEXT[] = { 0x7d,0x1f,0x26,0x7a,0x47,0x93,0x28,0x16,0x07,0x76,0xd3,0xfd,0xbd,0x2d,0x85,0x70 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-95", "[OFB][MCT][256][DECRYPT][n95]") {
    const uint8_t KEY[] = { 0xe9,0xa0,0x97,0xe7,0xc0,0xca,0xe0,0x60,0x1a,0x4c,0x1c,0xfb,0x1e,0xe4,0xb5,0xf9,0x1f,0xc6,0x1b,0xc1,0x7a,0xe3,0xa6,0x3f,0x10,0x17,0xea,0x0b,0xdd,0xbb,0xaa,0x0b };
    const uint8_t IV[] = { 0x0d,0x5d,0x7b,0xdd,0xaa,0xe2,0xbd,0x96,0x98,0x9c,0xab,0xec,0x4e,0xe3,0x2a,0xa2 };
    const uint8_t PLAINTEXT[] = { 0x38,0xc5,0xff,0xae,0x0d,0x91,0xb2,0xfe,0x82,0xde,0x31,0x2a,0x45,0x2b,0x99,0xf4 };
    const uint8_t CIPHERTEXT[] = { 0x6a,0xfb,0x03,0x0a,0x72,0x52,0x8e,0x03,0x07,0xb4,0x71,0xdc,0x2a,0xcb,0x26,0xbb };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-96", "[OFB][MCT][256][DECRYPT][n96]") {
    const uint8_t KEY[] = { 0xf9,0xdf,0xa0,0xa6,0x1c,0x4e,0xfb,0xd2,0xb7,0x88,0xb8,0x5c,0x02,0x42,0x9b,0x1d,0x27,0x03,0xe4,0x6f,0x77,0x72,0x14,0xc1,0x92,0xc9,0xdb,0x21,0x98,0x90,0x33,0xff };
    const uint8_t IV[] = { 0x38,0xc5,0xff,0xae,0x0d,0x91,0xb2,0xfe,0x82,0xde,0x31,0x2a,0x45,0x2b,0x99,0xf4 };
    const uint8_t PLAINTEXT[] = { 0x41,0x52,0x9f,0xb5,0x57,0xa7,0x19,0x97,0x92,0xdf,0x6f,0xab,0x66,0xfa,0xad,0xca };
    const uint8_t CIPHERTEXT[] = { 0x10,0x7f,0x37,0x41,0xdc,0x84,0x1b,0xb2,0xad,0xc4,0xa4,0xa7,0x1c,0xa6,0x2e,0xe4 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-97", "[OFB][MCT][256][DECRYPT][n97]") {
    const uint8_t KEY[] = { 0x53,0xea,0x3a,0xab,0xd7,0xb2,0x26,0xd4,0xbd,0x42,0xc0,0xb0,0x9d,0x5e,0x36,0x1a,0x66,0x51,0x7b,0xda,0x20,0xd5,0x0d,0x56,0x00,0x16,0xb4,0x8a,0xfe,0x6a,0x9e,0x35 };
    const uint8_t IV[] = { 0x41,0x52,0x9f,0xb5,0x57,0xa7,0x19,0x97,0x92,0xdf,0x6f,0xab,0x66,0xfa,0xad,0xca };
    const uint8_t PLAINTEXT[] = { 0x1a,0xc6,0xf9,0xd2,0xa0,0xb5,0xd9,0x88,0x1d,0x46,0xe2,0x40,0xde,0x96,0xea,0x81 };
    const uint8_t CIPHERTEXT[] = { 0xaa,0x35,0x9a,0x0d,0xcb,0xfc,0xdd,0x06,0x0a,0xca,0x78,0xec,0x9f,0x1c,0xad,0x07 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-98", "[OFB][MCT][256][DECRYPT][n98]") {
    const uint8_t KEY[] = { 0x52,0x23,0x0f,0x7b,0xf9,0xc8,0x92,0x60,0x44,0xf2,0x26,0x03,0xbc,0xdf,0x15,0x98,0x7c,0x97,0x82,0x08,0x80,0x60,0xd4,0xde,0x1d,0x50,0x56,0xca,0x20,0xfc,0x74,0xb4 };
    const uint8_t IV[] = { 0x1a,0xc6,0xf9,0xd2,0xa0,0xb5,0xd9,0x88,0x1d,0x46,0xe2,0x40,0xde,0x96,0xea,0x81 };
    const uint8_t PLAINTEXT[] = { 0x92,0xf6,0x1c,0xe6,0x7f,0xca,0xcd,0xc6,0x1c,0x19,0x75,0x81,0xc0,0x51,0xee,0xfe };
    const uint8_t CIPHERTEXT[] = { 0x01,0xc9,0x35,0xd0,0x2e,0x7a,0xb4,0xb4,0xf9,0xb0,0xe6,0xb3,0x21,0x81,0x23,0x82 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMCT256-DECRYPT-99", "[OFB][MCT][256][DECRYPT][n99]") {
    const uint8_t KEY[] = { 0x82,0x0c,0x11,0xc1,0x8c,0x36,0xf9,0x3b,0x0c,0xaf,0xe2,0xa4,0x3d,0x2d,0xc7,0x2b,0xee,0x61,0x9e,0xee,0xff,0xaa,0x19,0x18,0x01,0x49,0x23,0x4b,0xe0,0xad,0x9a,0x4a };
    const uint8_t IV[] = { 0x92,0xf6,0x1c,0xe6,0x7f,0xca,0xcd,0xc6,0x1c,0x19,0x75,0x81,0xc0,0x51,0xee,0xfe };
    const uint8_t PLAINTEXT[] = { 0xdc,0x77,0x7f,0x80,0x6e,0x2b,0xc4,0x5b,0x0b,0x93,0x48,0x68,0x9e,0x94,0x7c,0xa7 };
    const uint8_t CIPHERTEXT[] = { 0xd0,0x2f,0x1e,0xba,0x75,0xfe,0x6b,0x5b,0x48,0x5d,0xc4,0xa7,0x81,0xf2,0xd2,0xb3 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_ofb(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

