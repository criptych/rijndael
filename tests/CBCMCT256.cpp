#include "rijndael.h"
#include "catch.hpp"
#include <cstring>

static inline std::string buf2str(const uint8_t *buf, size_t len) {
    std::ostringstream ss; ss << std::hex << std::setfill('0');
    for (size_t i = 0; i < len; ++i) {
        ss << std::setw(2) << static_cast<int>(buf[i]) << ' ';
    }
    return ss.str();
}

TEST_CASE("CBCMCT256-ENCRYPT-0", "[CBC][MCT][256][ENCRYPT][n0]") {
    const uint8_t KEY[] = { 0x63,0x2b,0xac,0x4f,0xe4,0xdb,0x44,0xcf,0xcf,0x18,0xcf,0xa9,0x0b,0x43,0xf8,0x6f,0x37,0x86,0x11,0xb8,0xd9,0x68,0x59,0x5e,0xb8,0x9e,0x7a,0xe9,0x86,0x24,0x56,0x4a };
    const uint8_t IV[] = { 0xff,0x81,0x27,0x62,0x1b,0xe6,0x16,0x80,0x3e,0x3f,0x00,0x23,0x77,0x73,0x01,0x85 };
    const uint8_t PLAINTEXT[] = { 0x90,0xed,0x17,0x47,0x5f,0x0a,0x62,0xbc,0x38,0x1b,0xa1,0xf3,0xff,0xbf,0xff,0x33 };
    const uint8_t CIPHERTEXT[] = { 0x44,0x94,0x03,0x0b,0x1e,0x82,0x8f,0x57,0xe3,0x49,0xcb,0xde,0x64,0x99,0xab,0xf3 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-1", "[CBC][MCT][256][ENCRYPT][n1]") {
    const uint8_t KEY[] = { 0xc7,0xb8,0xfb,0x8a,0x3b,0xb2,0x98,0x51,0x43,0x90,0x9d,0x18,0x9b,0xfa,0x0c,0x0f,0x73,0x12,0x12,0xb3,0xc7,0xea,0xd6,0x09,0x5b,0xd7,0xb1,0x37,0xe2,0xbd,0xfd,0xb9 };
    const uint8_t IV[] = { 0x44,0x94,0x03,0x0b,0x1e,0x82,0x8f,0x57,0xe3,0x49,0xcb,0xde,0x64,0x99,0xab,0xf3 };
    const uint8_t PLAINTEXT[] = { 0xa4,0x93,0x57,0xc5,0xdf,0x69,0xdc,0x9e,0x8c,0x88,0x52,0xb1,0x90,0xb9,0xf4,0x60 };
    const uint8_t CIPHERTEXT[] = { 0x07,0x2f,0xd9,0xdf,0xa0,0xbc,0x87,0x49,0x3e,0x22,0x34,0x67,0xfa,0x25,0xa4,0x0b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-2", "[CBC][MCT][256][ENCRYPT][n2]") {
    const uint8_t KEY[] = { 0x8e,0xb0,0x46,0x15,0x67,0x7e,0xaa,0x05,0x7a,0xfe,0x24,0x08,0xbf,0x52,0x6f,0x77,0x74,0x3d,0xcb,0x6c,0x67,0x56,0x51,0x40,0x65,0xf5,0x85,0x50,0x18,0x98,0x59,0xb2 };
    const uint8_t IV[] = { 0x07,0x2f,0xd9,0xdf,0xa0,0xbc,0x87,0x49,0x3e,0x22,0x34,0x67,0xfa,0x25,0xa4,0x0b };
    const uint8_t PLAINTEXT[] = { 0x49,0x08,0xbd,0x9f,0x5c,0xcc,0x32,0x54,0x39,0x6e,0xb9,0x10,0x24,0xa8,0x63,0x78 };
    const uint8_t CIPHERTEXT[] = { 0x3b,0x4b,0x1b,0x1d,0x3e,0x69,0x07,0x42,0xf1,0xf7,0xc1,0x27,0xf9,0x10,0x9f,0x28 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-3", "[CBC][MCT][256][ENCRYPT][n3]") {
    const uint8_t KEY[] = { 0x03,0x0c,0x96,0xff,0xe6,0x45,0x93,0x14,0x98,0x77,0x4a,0x72,0x8b,0xfe,0xc4,0x63,0x4f,0x76,0xd0,0x71,0x59,0x3f,0x56,0x02,0x94,0x02,0x44,0x77,0xe1,0x88,0xc6,0x9a };
    const uint8_t IV[] = { 0x3b,0x4b,0x1b,0x1d,0x3e,0x69,0x07,0x42,0xf1,0xf7,0xc1,0x27,0xf9,0x10,0x9f,0x28 };
    const uint8_t PLAINTEXT[] = { 0x8d,0xbc,0xd0,0xea,0x81,0x3b,0x39,0x11,0xe2,0x89,0x6e,0x7a,0x34,0xac,0xab,0x14 };
    const uint8_t CIPHERTEXT[] = { 0xb5,0x70,0x23,0xab,0xed,0x7a,0xd2,0x69,0x45,0xd4,0xa3,0x46,0x08,0xf4,0x17,0x23 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-4", "[CBC][MCT][256][ENCRYPT][n4]") {
    const uint8_t KEY[] = { 0x56,0xe2,0x36,0xeb,0xad,0x1e,0x00,0x81,0xf8,0xff,0xe6,0x52,0x39,0x59,0x6d,0xca,0xfa,0x06,0xf3,0xda,0xb4,0x45,0x84,0x6b,0xd1,0xd6,0xe7,0x31,0xe9,0x7c,0xd1,0xb9 };
    const uint8_t IV[] = { 0xb5,0x70,0x23,0xab,0xed,0x7a,0xd2,0x69,0x45,0xd4,0xa3,0x46,0x08,0xf4,0x17,0x23 };
    const uint8_t PLAINTEXT[] = { 0x55,0xee,0xa0,0x14,0x4b,0x5b,0x93,0x95,0x60,0x88,0xac,0x20,0xb2,0xa7,0xa9,0xa9 };
    const uint8_t CIPHERTEXT[] = { 0x0c,0xbc,0xc3,0x09,0x30,0x36,0xdb,0x18,0x24,0x9a,0x5c,0x8c,0x6f,0x9f,0x90,0xf0 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-5", "[CBC][MCT][256][ENCRYPT][n5]") {
    const uint8_t KEY[] = { 0xd1,0xa3,0xaf,0xfe,0x7e,0x5c,0x3c,0xf9,0x71,0xa9,0x7d,0xed,0x54,0x08,0x59,0x3e,0xf6,0xba,0x30,0xd3,0x84,0x73,0x5f,0x73,0xf5,0x4c,0xbb,0xbd,0x86,0xe3,0x41,0x49 };
    const uint8_t IV[] = { 0x0c,0xbc,0xc3,0x09,0x30,0x36,0xdb,0x18,0x24,0x9a,0x5c,0x8c,0x6f,0x9f,0x90,0xf0 };
    const uint8_t PLAINTEXT[] = { 0x87,0x41,0x99,0x15,0xd3,0x42,0x3c,0x78,0x89,0x56,0x9b,0xbf,0x6d,0x51,0x34,0xf4 };
    const uint8_t CIPHERTEXT[] = { 0xd1,0x02,0x93,0xc3,0x11,0xea,0x97,0xea,0x94,0x2b,0xe0,0xbd,0xda,0x37,0x43,0xaf };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-6", "[CBC][MCT][256][ENCRYPT][n6]") {
    const uint8_t KEY[] = { 0x81,0x74,0xe7,0x09,0x3f,0xe5,0x3b,0x13,0x98,0x20,0xcf,0x76,0x48,0x17,0xe4,0x14,0x27,0xb8,0xa3,0x10,0x95,0x99,0xc8,0x99,0x61,0x67,0x5b,0x00,0x5c,0xd4,0x02,0xe6 };
    const uint8_t IV[] = { 0xd1,0x02,0x93,0xc3,0x11,0xea,0x97,0xea,0x94,0x2b,0xe0,0xbd,0xda,0x37,0x43,0xaf };
    const uint8_t PLAINTEXT[] = { 0x50,0xd7,0x48,0xf7,0x41,0xb9,0x07,0xea,0xe9,0x89,0xb2,0x9b,0x1c,0x1f,0xbd,0x2a };
    const uint8_t CIPHERTEXT[] = { 0x9c,0xfe,0x5e,0x8e,0xcc,0x0e,0x0a,0xa6,0x16,0x37,0x26,0xff,0xa0,0x30,0x31,0x99 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-7", "[CBC][MCT][256][ENCRYPT][n7]") {
    const uint8_t KEY[] = { 0x03,0xe4,0xde,0x7b,0x5b,0x1d,0x5b,0x78,0x21,0x64,0x34,0x44,0x46,0x82,0x84,0xa9,0xbb,0x46,0xfd,0x9e,0x59,0x97,0xc2,0x3f,0x77,0x50,0x7d,0xff,0xfc,0xe4,0x33,0x7f };
    const uint8_t IV[] = { 0x9c,0xfe,0x5e,0x8e,0xcc,0x0e,0x0a,0xa6,0x16,0x37,0x26,0xff,0xa0,0x30,0x31,0x99 };
    const uint8_t PLAINTEXT[] = { 0x82,0x90,0x39,0x72,0x64,0xf8,0x60,0x6b,0xb9,0x44,0xfb,0x32,0x0e,0x95,0x60,0xbd };
    const uint8_t CIPHERTEXT[] = { 0xae,0x17,0x5e,0xdc,0xd8,0xae,0x9e,0xae,0x37,0x16,0x7f,0x7e,0x32,0xd1,0xd6,0xbb };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-8", "[CBC][MCT][256][ENCRYPT][n8]") {
    const uint8_t KEY[] = { 0x7e,0x80,0x13,0x68,0xb3,0x09,0xa0,0x86,0x5d,0xa9,0xb9,0xa1,0xf8,0xa7,0x8e,0x8d,0x15,0x51,0xa3,0x42,0x81,0x39,0x5c,0x91,0x40,0x46,0x02,0x81,0xce,0x35,0xe5,0xc4 };
    const uint8_t IV[] = { 0xae,0x17,0x5e,0xdc,0xd8,0xae,0x9e,0xae,0x37,0x16,0x7f,0x7e,0x32,0xd1,0xd6,0xbb };
    const uint8_t PLAINTEXT[] = { 0x7d,0x64,0xcd,0x13,0xe8,0x14,0xfb,0xfe,0x7c,0xcd,0x8d,0xe5,0xbe,0x25,0x0a,0x24 };
    const uint8_t CIPHERTEXT[] = { 0x58,0x83,0xa4,0xbb,0x8f,0xfc,0xc9,0x2f,0x8b,0xfd,0x92,0x6c,0x81,0xb6,0x8b,0x7e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-9", "[CBC][MCT][256][ENCRYPT][n9]") {
    const uint8_t KEY[] = { 0xc2,0x15,0x4e,0x22,0x0d,0x57,0x22,0xa6,0x83,0xd6,0xcf,0x0c,0x70,0xe6,0x28,0x3f,0x4d,0xd2,0x07,0xf9,0x0e,0xc5,0x95,0xbe,0xcb,0xbb,0x90,0xed,0x4f,0x83,0x6e,0xba };
    const uint8_t IV[] = { 0x58,0x83,0xa4,0xbb,0x8f,0xfc,0xc9,0x2f,0x8b,0xfd,0x92,0x6c,0x81,0xb6,0x8b,0x7e };
    const uint8_t PLAINTEXT[] = { 0xbc,0x95,0x5d,0x4a,0xbe,0x5e,0x82,0x20,0xde,0x7f,0x76,0xad,0x88,0x41,0xa6,0xb2 };
    const uint8_t CIPHERTEXT[] = { 0xc8,0x50,0x51,0xf8,0x18,0x6f,0x8c,0x8e,0x41,0x90,0x70,0x68,0x1c,0x04,0xcb,0xfd };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-10", "[CBC][MCT][256][ENCRYPT][n10]") {
    const uint8_t KEY[] = { 0x6b,0xf6,0x6e,0xf9,0x24,0xf0,0x96,0x5d,0x33,0xe2,0x95,0x9b,0x34,0x91,0xb1,0x4b,0x85,0x82,0x56,0x01,0x16,0xaa,0x19,0x30,0x8a,0x2b,0xe0,0x85,0x53,0x87,0xa5,0x47 };
    const uint8_t IV[] = { 0xc8,0x50,0x51,0xf8,0x18,0x6f,0x8c,0x8e,0x41,0x90,0x70,0x68,0x1c,0x04,0xcb,0xfd };
    const uint8_t PLAINTEXT[] = { 0xa9,0xe3,0x20,0xdb,0x29,0xa7,0xb4,0xfb,0xb0,0x34,0x5a,0x97,0x44,0x77,0x99,0x74 };
    const uint8_t CIPHERTEXT[] = { 0x54,0x14,0x8e,0x9b,0x31,0x5b,0xce,0x21,0x8a,0x0f,0x51,0xb3,0xbc,0x96,0xe2,0x56 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-11", "[CBC][MCT][256][ENCRYPT][n11]") {
    const uint8_t KEY[] = { 0xfa,0x68,0xc1,0x01,0xbe,0x13,0xb1,0x7f,0x97,0xdc,0x59,0xe6,0x62,0x28,0x17,0x99,0xd1,0x96,0xd8,0x9a,0x27,0xf1,0xd7,0x11,0x00,0x24,0xb1,0x36,0xef,0x11,0x47,0x11 };
    const uint8_t IV[] = { 0x54,0x14,0x8e,0x9b,0x31,0x5b,0xce,0x21,0x8a,0x0f,0x51,0xb3,0xbc,0x96,0xe2,0x56 };
    const uint8_t PLAINTEXT[] = { 0x91,0x9e,0xaf,0xf8,0x9a,0xe3,0x27,0x22,0xa4,0x3e,0xcc,0x7d,0x56,0xb9,0xa6,0xd2 };
    const uint8_t CIPHERTEXT[] = { 0xf1,0xf2,0x8f,0xde,0xbe,0x59,0x4f,0x65,0x73,0x74,0x96,0xfd,0x88,0x19,0x38,0x3f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-12", "[CBC][MCT][256][ENCRYPT][n12]") {
    const uint8_t KEY[] = { 0x2f,0xcf,0x9f,0x16,0x12,0xdc,0xab,0xa7,0x7a,0x49,0xfc,0x9e,0xc7,0x76,0x53,0xac,0x20,0x64,0x57,0x44,0x99,0xa8,0x98,0x74,0x73,0x50,0x27,0xcb,0x67,0x08,0x7f,0x2e };
    const uint8_t IV[] = { 0xf1,0xf2,0x8f,0xde,0xbe,0x59,0x4f,0x65,0x73,0x74,0x96,0xfd,0x88,0x19,0x38,0x3f };
    const uint8_t PLAINTEXT[] = { 0xd5,0xa7,0x5e,0x17,0xac,0xcf,0x1a,0xd8,0xed,0x95,0xa5,0x78,0xa5,0x5e,0x44,0x35 };
    const uint8_t CIPHERTEXT[] = { 0x83,0x20,0xdf,0xe3,0xbb,0x08,0x43,0x83,0x11,0x8d,0x6c,0x82,0x09,0x4d,0xb3,0xa4 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-13", "[CBC][MCT][256][ENCRYPT][n13]") {
    const uint8_t KEY[] = { 0x35,0xfc,0x95,0x68,0x72,0x1c,0x37,0xe9,0x2b,0xa2,0xdc,0xe3,0x10,0xc7,0x45,0x8b,0xa3,0x44,0x88,0xa7,0x22,0xa0,0xdb,0xf7,0x62,0xdd,0x4b,0x49,0x6e,0x45,0xcc,0x8a };
    const uint8_t IV[] = { 0x83,0x20,0xdf,0xe3,0xbb,0x08,0x43,0x83,0x11,0x8d,0x6c,0x82,0x09,0x4d,0xb3,0xa4 };
    const uint8_t PLAINTEXT[] = { 0x1a,0x33,0x0a,0x7e,0x60,0xc0,0x9c,0x4e,0x51,0xeb,0x20,0x7d,0xd7,0xb1,0x16,0x27 };
    const uint8_t CIPHERTEXT[] = { 0x7f,0x0c,0x05,0xc3,0x69,0xa3,0x01,0xe9,0x32,0xbb,0xe5,0x7b,0x06,0x92,0xc2,0x31 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-14", "[CBC][MCT][256][ENCRYPT][n14]") {
    const uint8_t KEY[] = { 0x06,0x16,0xbe,0x57,0x85,0xaa,0x3e,0x2f,0x2a,0x16,0x7d,0x74,0xd0,0x5a,0x6b,0x54,0xdc,0x48,0x8d,0x64,0x4b,0x03,0xda,0x1e,0x50,0x66,0xae,0x32,0x68,0xd7,0x0e,0xbb };
    const uint8_t IV[] = { 0x7f,0x0c,0x05,0xc3,0x69,0xa3,0x01,0xe9,0x32,0xbb,0xe5,0x7b,0x06,0x92,0xc2,0x31 };
    const uint8_t PLAINTEXT[] = { 0x33,0xea,0x2b,0x3f,0xf7,0xb6,0x09,0xc6,0x01,0xb4,0xa1,0x97,0xc0,0x9d,0x2e,0xdf };
    const uint8_t CIPHERTEXT[] = { 0x44,0xf7,0x63,0x2a,0xa8,0x80,0x78,0xa1,0x69,0xb6,0x16,0xef,0x4e,0xb8,0x54,0x23 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-15", "[CBC][MCT][256][ENCRYPT][n15]") {
    const uint8_t KEY[] = { 0x96,0xd8,0x2d,0xd4,0xc2,0x5c,0x0c,0x00,0xb6,0xbd,0x4d,0xff,0x41,0x28,0xdc,0x32,0x98,0xbf,0xee,0x4e,0xe3,0x83,0xa2,0xbf,0x39,0xd0,0xb8,0xdd,0x26,0x6f,0x5a,0x98 };
    const uint8_t IV[] = { 0x44,0xf7,0x63,0x2a,0xa8,0x80,0x78,0xa1,0x69,0xb6,0x16,0xef,0x4e,0xb8,0x54,0x23 };
    const uint8_t PLAINTEXT[] = { 0x90,0xce,0x93,0x83,0x47,0xf6,0x32,0x2f,0x9c,0xab,0x30,0x8b,0x91,0x72,0xb7,0x66 };
    const uint8_t CIPHERTEXT[] = { 0x89,0xce,0x02,0xcb,0x50,0x94,0xf2,0xf2,0x8f,0x90,0x82,0x9a,0x40,0x5e,0x81,0xd8 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-16", "[CBC][MCT][256][ENCRYPT][n16]") {
    const uint8_t KEY[] = { 0x99,0xe8,0x22,0x2b,0x28,0xf7,0x6b,0x11,0x54,0x5a,0x37,0xef,0x64,0x8d,0xc8,0xfc,0x11,0x71,0xec,0x85,0xb3,0x17,0x50,0x4d,0xb6,0x40,0x3a,0x47,0x66,0x31,0xdb,0x40 };
    const uint8_t IV[] = { 0x89,0xce,0x02,0xcb,0x50,0x94,0xf2,0xf2,0x8f,0x90,0x82,0x9a,0x40,0x5e,0x81,0xd8 };
    const uint8_t PLAINTEXT[] = { 0x0f,0x30,0x0f,0xff,0xea,0xab,0x67,0x11,0xe2,0xe7,0x7a,0x10,0x25,0xa5,0x14,0xce };
    const uint8_t CIPHERTEXT[] = { 0xf1,0x75,0x21,0x7f,0xae,0x82,0xfe,0xfd,0x27,0x30,0xd7,0xaf,0x86,0xa1,0xa7,0x9d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-17", "[CBC][MCT][256][ENCRYPT][n17]") {
    const uint8_t KEY[] = { 0x5f,0x47,0x77,0x3b,0x7c,0x4e,0xb0,0xd8,0x9c,0xb0,0xc4,0x07,0xec,0xd7,0x91,0x1e,0xe0,0x04,0xcd,0xfa,0x1d,0x95,0xae,0xb0,0x91,0x70,0xed,0xe8,0xe0,0x90,0x7c,0xdd };
    const uint8_t IV[] = { 0xf1,0x75,0x21,0x7f,0xae,0x82,0xfe,0xfd,0x27,0x30,0xd7,0xaf,0x86,0xa1,0xa7,0x9d };
    const uint8_t PLAINTEXT[] = { 0xc6,0xaf,0x55,0x10,0x54,0xb9,0xdb,0xc9,0xc8,0xea,0xf3,0xe8,0x88,0x5a,0x59,0xe2 };
    const uint8_t CIPHERTEXT[] = { 0x82,0x0e,0xbd,0x96,0x1a,0x64,0x1c,0x0a,0xe9,0xbe,0x39,0x8a,0xf6,0x70,0xc8,0x76 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-18", "[CBC][MCT][256][ENCRYPT][n18]") {
    const uint8_t KEY[] = { 0x27,0xcc,0x42,0x7d,0x90,0xf0,0xd7,0x04,0xc4,0x0e,0x43,0xbf,0xec,0xa4,0xfc,0xd5,0x62,0x0a,0x70,0x6c,0x07,0xf1,0xb2,0xba,0x78,0xce,0xd4,0x62,0x16,0xe0,0xb4,0xab };
    const uint8_t IV[] = { 0x82,0x0e,0xbd,0x96,0x1a,0x64,0x1c,0x0a,0xe9,0xbe,0x39,0x8a,0xf6,0x70,0xc8,0x76 };
    const uint8_t PLAINTEXT[] = { 0x78,0x8b,0x35,0x46,0xec,0xbe,0x67,0xdc,0x58,0xbe,0x87,0xb8,0x00,0x73,0x6d,0xcb };
    const uint8_t CIPHERTEXT[] = { 0xd6,0xa5,0xdf,0xd2,0x7a,0xb6,0x48,0x92,0xc4,0x2c,0xa6,0x93,0xaf,0xdf,0x7b,0x78 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-19", "[CBC][MCT][256][ENCRYPT][n19]") {
    const uint8_t KEY[] = { 0x4e,0x20,0x24,0x88,0x23,0x84,0xcd,0xb7,0x90,0x60,0xa2,0x7a,0x1f,0x11,0xdf,0x88,0xb4,0xaf,0xaf,0xbe,0x7d,0x47,0xfa,0x28,0xbc,0xe2,0x72,0xf1,0xb9,0x3f,0xcf,0xd3 };
    const uint8_t IV[] = { 0xd6,0xa5,0xdf,0xd2,0x7a,0xb6,0x48,0x92,0xc4,0x2c,0xa6,0x93,0xaf,0xdf,0x7b,0x78 };
    const uint8_t PLAINTEXT[] = { 0x69,0xec,0x66,0xf5,0xb3,0x74,0x1a,0xb3,0x54,0x6e,0xe1,0xc5,0xf3,0xb5,0x23,0x5d };
    const uint8_t CIPHERTEXT[] = { 0x5e,0xc4,0xd7,0x0b,0x7a,0xfb,0xfe,0x37,0xdf,0xfe,0x2c,0xcf,0x97,0xa8,0x8a,0xbb };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-20", "[CBC][MCT][256][ENCRYPT][n20]") {
    const uint8_t KEY[] = { 0x7d,0xa3,0x98,0xab,0x70,0xc2,0x29,0x09,0x78,0xf5,0x92,0x42,0xfd,0x75,0x13,0x09,0xea,0x6b,0x78,0xb5,0x07,0xbc,0x04,0x1f,0x63,0x1c,0x5e,0x3e,0x2e,0x97,0x45,0x68 };
    const uint8_t IV[] = { 0x5e,0xc4,0xd7,0x0b,0x7a,0xfb,0xfe,0x37,0xdf,0xfe,0x2c,0xcf,0x97,0xa8,0x8a,0xbb };
    const uint8_t PLAINTEXT[] = { 0x33,0x83,0xbc,0x23,0x53,0x46,0xe4,0xbe,0xe8,0x95,0x30,0x38,0xe2,0x64,0xcc,0x81 };
    const uint8_t CIPHERTEXT[] = { 0x32,0xfd,0x06,0xa4,0xa4,0x7a,0xa1,0x51,0xbf,0xca,0x29,0xa5,0x22,0x45,0x02,0x4e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-21", "[CBC][MCT][256][ENCRYPT][n21]") {
    const uint8_t KEY[] = { 0x1b,0x69,0x97,0x5e,0x11,0x13,0xd4,0x60,0xcd,0x93,0x97,0x92,0xdb,0xeb,0x82,0x80,0xd8,0x96,0x7e,0x11,0xa3,0xc6,0xa5,0x4e,0xdc,0xd6,0x77,0x9b,0x0c,0xd2,0x47,0x26 };
    const uint8_t IV[] = { 0x32,0xfd,0x06,0xa4,0xa4,0x7a,0xa1,0x51,0xbf,0xca,0x29,0xa5,0x22,0x45,0x02,0x4e };
    const uint8_t PLAINTEXT[] = { 0x66,0xca,0x0f,0xf5,0x61,0xd1,0xfd,0x69,0xb5,0x66,0x05,0xd0,0x26,0x9e,0x91,0x89 };
    const uint8_t CIPHERTEXT[] = { 0xc2,0x4a,0x53,0x94,0x4e,0xb4,0xa9,0x2b,0xf4,0xf0,0x4c,0x8a,0xa2,0x87,0x05,0x2a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-22", "[CBC][MCT][256][ENCRYPT][n22]") {
    const uint8_t KEY[] = { 0xe2,0xd6,0xf5,0xd4,0xdc,0xb3,0x22,0x4f,0x66,0x29,0xc0,0xb7,0x11,0x25,0x8a,0x90,0x1a,0xdc,0x2d,0x85,0xed,0x72,0x0c,0x65,0x28,0x26,0x3b,0x11,0xae,0x55,0x42,0x0c };
    const uint8_t IV[] = { 0xc2,0x4a,0x53,0x94,0x4e,0xb4,0xa9,0x2b,0xf4,0xf0,0x4c,0x8a,0xa2,0x87,0x05,0x2a };
    const uint8_t PLAINTEXT[] = { 0xf9,0xbf,0x62,0x8a,0xcd,0xa0,0xf6,0x2f,0xab,0xba,0x57,0x25,0xca,0xce,0x08,0x10 };
    const uint8_t CIPHERTEXT[] = { 0xa5,0x12,0x96,0x0f,0x47,0x77,0x9d,0xe9,0xc2,0xcd,0x5d,0x8c,0x8b,0x73,0xd0,0x00 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-23", "[CBC][MCT][256][ENCRYPT][n23]") {
    const uint8_t KEY[] = { 0xec,0xa1,0x8f,0x5d,0x62,0x32,0xd2,0xbb,0x56,0xf3,0x4a,0xd4,0x3e,0x58,0xc2,0x25,0xbf,0xce,0xbb,0x8a,0xaa,0x05,0x91,0x8c,0xea,0xeb,0x66,0x9d,0x25,0x26,0x92,0x0c };
    const uint8_t IV[] = { 0xa5,0x12,0x96,0x0f,0x47,0x77,0x9d,0xe9,0xc2,0xcd,0x5d,0x8c,0x8b,0x73,0xd0,0x00 };
    const uint8_t PLAINTEXT[] = { 0x0e,0x77,0x7a,0x89,0xbe,0x81,0xf0,0xf4,0x30,0xda,0x8a,0x63,0x2f,0x7d,0x48,0xb5 };
    const uint8_t CIPHERTEXT[] = { 0x59,0xcf,0xd7,0x64,0xe9,0x2b,0x91,0x5b,0x54,0x06,0x75,0x14,0xb6,0x6f,0xc2,0xed };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-24", "[CBC][MCT][256][ENCRYPT][n24]") {
    const uint8_t KEY[] = { 0xfc,0x45,0xc6,0xd0,0x9c,0x52,0x64,0x74,0xec,0x72,0xf5,0x6b,0x1a,0x5e,0x19,0xfc,0xe6,0x01,0x6c,0xee,0x43,0x2e,0x00,0xd7,0xbe,0xed,0x13,0x89,0x93,0x49,0x50,0xe1 };
    const uint8_t IV[] = { 0x59,0xcf,0xd7,0x64,0xe9,0x2b,0x91,0x5b,0x54,0x06,0x75,0x14,0xb6,0x6f,0xc2,0xed };
    const uint8_t PLAINTEXT[] = { 0x10,0xe4,0x49,0x8d,0xfe,0x60,0xb6,0xcf,0xba,0x81,0xbf,0xbf,0x24,0x06,0xdb,0xd9 };
    const uint8_t CIPHERTEXT[] = { 0xbd,0x35,0xf3,0xf3,0x49,0x4e,0x6c,0xe8,0x25,0xd9,0x81,0xbb,0x9c,0x9a,0xd2,0xca };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-25", "[CBC][MCT][256][ENCRYPT][n25]") {
    const uint8_t KEY[] = { 0x2b,0xab,0x5b,0x5c,0x5b,0x7d,0x92,0x3e,0x39,0x5c,0xdd,0x51,0x71,0x7b,0x13,0xdd,0x5b,0x34,0x9f,0x1d,0x0a,0x60,0x6c,0x3f,0x9b,0x34,0x92,0x32,0x0f,0xd3,0x82,0x2b };
    const uint8_t IV[] = { 0xbd,0x35,0xf3,0xf3,0x49,0x4e,0x6c,0xe8,0x25,0xd9,0x81,0xbb,0x9c,0x9a,0xd2,0xca };
    const uint8_t PLAINTEXT[] = { 0xd7,0xee,0x9d,0x8c,0xc7,0x2f,0xf6,0x4a,0xd5,0x2e,0x28,0x3a,0x6b,0x25,0x0a,0x21 };
    const uint8_t CIPHERTEXT[] = { 0x5b,0x0e,0x76,0x2a,0x84,0x20,0xa1,0x2d,0x38,0x35,0x82,0x73,0x3b,0x36,0xcf,0xb5 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-26", "[CBC][MCT][256][ENCRYPT][n26]") {
    const uint8_t KEY[] = { 0x19,0x69,0x3e,0x98,0x67,0x72,0x91,0x1f,0x6f,0x2d,0x03,0xc6,0xaa,0x97,0x2f,0x7f,0x00,0x3a,0xe9,0x37,0x8e,0x40,0xcd,0x12,0xa3,0x01,0x10,0x41,0x34,0xe5,0x4d,0x9e };
    const uint8_t IV[] = { 0x5b,0x0e,0x76,0x2a,0x84,0x20,0xa1,0x2d,0x38,0x35,0x82,0x73,0x3b,0x36,0xcf,0xb5 };
    const uint8_t PLAINTEXT[] = { 0x32,0xc2,0x65,0xc4,0x3c,0x0f,0x03,0x21,0x56,0x71,0xde,0x97,0xdb,0xec,0x3c,0xa2 };
    const uint8_t CIPHERTEXT[] = { 0xec,0xf3,0x6d,0xb6,0xd4,0x2d,0x40,0x4c,0x8f,0x9d,0xba,0x5f,0x6a,0x00,0x9f,0xee };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-27", "[CBC][MCT][256][ENCRYPT][n27]") {
    const uint8_t KEY[] = { 0x4a,0xf7,0x92,0xf5,0x28,0x29,0x96,0x45,0x75,0x4c,0x6c,0x13,0xe5,0x28,0xcf,0x3c,0xec,0xc9,0x84,0x81,0x5a,0x6d,0x8d,0x5e,0x2c,0x9c,0xaa,0x1e,0x5e,0xe5,0xd2,0x70 };
    const uint8_t IV[] = { 0xec,0xf3,0x6d,0xb6,0xd4,0x2d,0x40,0x4c,0x8f,0x9d,0xba,0x5f,0x6a,0x00,0x9f,0xee };
    const uint8_t PLAINTEXT[] = { 0x53,0x9e,0xac,0x6d,0x4f,0x5b,0x07,0x5a,0x1a,0x61,0x6f,0xd5,0x4f,0xbf,0xe0,0x43 };
    const uint8_t CIPHERTEXT[] = { 0xea,0x16,0x8a,0x26,0xfb,0x00,0xe6,0x11,0x20,0x6c,0x21,0x86,0x49,0x7e,0x51,0x08 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-28", "[CBC][MCT][256][ENCRYPT][n28]") {
    const uint8_t KEY[] = { 0xda,0x3c,0x59,0xf5,0x7d,0xe7,0x9f,0x07,0x15,0x5d,0x2c,0x2f,0xe1,0xf8,0xd8,0x67,0x06,0xdf,0x0e,0xa7,0xa1,0x6d,0x6b,0x4f,0x0c,0xf0,0x8b,0x98,0x17,0x9b,0x83,0x78 };
    const uint8_t IV[] = { 0xea,0x16,0x8a,0x26,0xfb,0x00,0xe6,0x11,0x20,0x6c,0x21,0x86,0x49,0x7e,0x51,0x08 };
    const uint8_t PLAINTEXT[] = { 0x90,0xcb,0xcb,0x00,0x55,0xce,0x09,0x42,0x60,0x11,0x40,0x3c,0x04,0xd0,0x17,0x5b };
    const uint8_t CIPHERTEXT[] = { 0x01,0x90,0xae,0x0f,0x5a,0x72,0xf3,0x72,0xf6,0xc9,0x94,0xb4,0xe2,0xb9,0x96,0x8f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-29", "[CBC][MCT][256][ENCRYPT][n29]") {
    const uint8_t KEY[] = { 0x37,0xee,0xe5,0xef,0xbb,0xe7,0xd2,0x4f,0xd1,0x44,0xbb,0x15,0x22,0x24,0x19,0xbd,0x07,0x4f,0xa0,0xa8,0xfb,0x1f,0x98,0x3d,0xfa,0x39,0x1f,0x2c,0xf5,0x22,0x15,0xf7 };
    const uint8_t IV[] = { 0x01,0x90,0xae,0x0f,0x5a,0x72,0xf3,0x72,0xf6,0xc9,0x94,0xb4,0xe2,0xb9,0x96,0x8f };
    const uint8_t PLAINTEXT[] = { 0xed,0xd2,0xbc,0x1a,0xc6,0x00,0x4d,0x48,0xc4,0x19,0x97,0x3a,0xc3,0xdc,0xc1,0xda };
    const uint8_t CIPHERTEXT[] = { 0x86,0xf6,0x41,0x08,0x57,0xf4,0xc8,0xda,0x81,0xa2,0x26,0x95,0xde,0xe2,0x91,0x87 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-30", "[CBC][MCT][256][ENCRYPT][n30]") {
    const uint8_t KEY[] = { 0x65,0x42,0x51,0xf0,0xbe,0xd3,0x3e,0xa2,0x7f,0x23,0x58,0xcc,0xa3,0xe4,0x09,0x02,0x81,0xb9,0xe1,0xa0,0xac,0xeb,0x50,0xe7,0x7b,0x9b,0x39,0xb9,0x2b,0xc0,0x84,0x70 };
    const uint8_t IV[] = { 0x86,0xf6,0x41,0x08,0x57,0xf4,0xc8,0xda,0x81,0xa2,0x26,0x95,0xde,0xe2,0x91,0x87 };
    const uint8_t PLAINTEXT[] = { 0x52,0xac,0xb4,0x1f,0x05,0x34,0xec,0xed,0xae,0x67,0xe3,0xd9,0x81,0xc0,0x10,0xbf };
    const uint8_t CIPHERTEXT[] = { 0x40,0xb1,0x94,0x05,0xa2,0x31,0x13,0xb8,0xa7,0x91,0xea,0x30,0x6a,0x85,0xa4,0x45 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-31", "[CBC][MCT][256][ENCRYPT][n31]") {
    const uint8_t KEY[] = { 0x86,0x84,0x4c,0x74,0x74,0x7f,0x7f,0xd1,0xff,0x0d,0xca,0x3e,0x64,0xde,0x05,0x5f,0xc1,0x08,0x75,0xa5,0x0e,0xda,0x43,0x5f,0xdc,0x0a,0xd3,0x89,0x41,0x45,0x20,0x35 };
    const uint8_t IV[] = { 0x40,0xb1,0x94,0x05,0xa2,0x31,0x13,0xb8,0xa7,0x91,0xea,0x30,0x6a,0x85,0xa4,0x45 };
    const uint8_t PLAINTEXT[] = { 0xe3,0xc6,0x1d,0x84,0xca,0xac,0x41,0x73,0x80,0x2e,0x92,0xf2,0xc7,0x3a,0x0c,0x5d };
    const uint8_t CIPHERTEXT[] = { 0x24,0x3a,0xb5,0x16,0x7c,0xa2,0xd1,0x45,0x0d,0x09,0x22,0xbe,0x39,0x34,0xd9,0x21 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-32", "[CBC][MCT][256][ENCRYPT][n32]") {
    const uint8_t KEY[] = { 0x45,0xd9,0xee,0x11,0x8b,0x76,0x6d,0x98,0x60,0xb7,0x25,0x23,0x8c,0xed,0x81,0x28,0xe5,0x32,0xc0,0xb3,0x72,0x78,0x92,0x1a,0xd1,0x03,0xf1,0x37,0x78,0x71,0xf9,0x14 };
    const uint8_t IV[] = { 0x24,0x3a,0xb5,0x16,0x7c,0xa2,0xd1,0x45,0x0d,0x09,0x22,0xbe,0x39,0x34,0xd9,0x21 };
    const uint8_t PLAINTEXT[] = { 0xc3,0x5d,0xa2,0x65,0xff,0x09,0x12,0x49,0x9f,0xba,0xef,0x1d,0xe8,0x33,0x84,0x77 };
    const uint8_t CIPHERTEXT[] = { 0x2c,0x58,0x86,0x26,0x40,0x3d,0x81,0xdc,0x7c,0xb6,0x9e,0x14,0x37,0xcd,0xd6,0xe3 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-33", "[CBC][MCT][256][ENCRYPT][n33]") {
    const uint8_t KEY[] = { 0xa9,0xf2,0xa4,0x78,0x61,0xea,0x7c,0xcc,0x65,0x4a,0x2f,0xb0,0x46,0x35,0x31,0x04,0xc9,0x6a,0x46,0x95,0x32,0x45,0x13,0xc6,0xad,0xb5,0x6f,0x23,0x4f,0xbc,0x2f,0xf7 };
    const uint8_t IV[] = { 0x2c,0x58,0x86,0x26,0x40,0x3d,0x81,0xdc,0x7c,0xb6,0x9e,0x14,0x37,0xcd,0xd6,0xe3 };
    const uint8_t PLAINTEXT[] = { 0xec,0x2b,0x4a,0x69,0xea,0x9c,0x11,0x54,0x05,0xfd,0x0a,0x93,0xca,0xd8,0xb0,0x2c };
    const uint8_t CIPHERTEXT[] = { 0xb1,0x94,0xb8,0xf4,0x70,0x70,0x70,0x7f,0x87,0xee,0x29,0x5f,0x85,0xfd,0xa7,0x05 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-34", "[CBC][MCT][256][ENCRYPT][n34]") {
    const uint8_t KEY[] = { 0xc1,0x26,0x78,0xa3,0xe7,0xb9,0xea,0x69,0xb0,0x21,0xa6,0xec,0x28,0xd3,0xd3,0x41,0x78,0xfe,0xfe,0x61,0x42,0x35,0x63,0xb9,0x2a,0x5b,0x46,0x7c,0xca,0x41,0x88,0xf2 };
    const uint8_t IV[] = { 0xb1,0x94,0xb8,0xf4,0x70,0x70,0x70,0x7f,0x87,0xee,0x29,0x5f,0x85,0xfd,0xa7,0x05 };
    const uint8_t PLAINTEXT[] = { 0x68,0xd4,0xdc,0xdb,0x86,0x53,0x96,0xa5,0xd5,0x6b,0x89,0x5c,0x6e,0xe6,0xe2,0x45 };
    const uint8_t CIPHERTEXT[] = { 0xe1,0x27,0xcf,0x01,0x88,0x2b,0xe5,0xc9,0xf5,0x1e,0x0b,0xe9,0xfe,0x62,0x63,0x7a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-35", "[CBC][MCT][256][ENCRYPT][n35]") {
    const uint8_t KEY[] = { 0x50,0x3c,0x5f,0xdd,0xa9,0xa9,0xdc,0x1d,0x7a,0xad,0xb7,0x15,0x59,0x0a,0x83,0x34,0x99,0xd9,0x31,0x60,0xca,0x1e,0x86,0x70,0xdf,0x45,0x4d,0x95,0x34,0x23,0xeb,0x88 };
    const uint8_t IV[] = { 0xe1,0x27,0xcf,0x01,0x88,0x2b,0xe5,0xc9,0xf5,0x1e,0x0b,0xe9,0xfe,0x62,0x63,0x7a };
    const uint8_t PLAINTEXT[] = { 0x91,0x1a,0x27,0x7e,0x4e,0x10,0x36,0x74,0xca,0x8c,0x11,0xf9,0x71,0xd9,0x50,0x75 };
    const uint8_t CIPHERTEXT[] = { 0x9d,0x92,0x0c,0x2b,0x02,0xcf,0x1f,0x42,0x31,0x04,0x1a,0xd4,0xdf,0x15,0xfd,0xf9 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-36", "[CBC][MCT][256][ENCRYPT][n36]") {
    const uint8_t KEY[] = { 0x81,0x4a,0xe4,0xa1,0x09,0xe5,0xcf,0x89,0xed,0xf5,0xbe,0x23,0xa8,0xb5,0x9a,0xa2,0x04,0x4b,0x3d,0x4b,0xc8,0xd1,0x99,0x32,0xee,0x41,0x57,0x41,0xeb,0x36,0x16,0x71 };
    const uint8_t IV[] = { 0x9d,0x92,0x0c,0x2b,0x02,0xcf,0x1f,0x42,0x31,0x04,0x1a,0xd4,0xdf,0x15,0xfd,0xf9 };
    const uint8_t PLAINTEXT[] = { 0xd1,0x76,0xbb,0x7c,0xa0,0x4c,0x13,0x94,0x97,0x58,0x09,0x36,0xf1,0xbf,0x19,0x96 };
    const uint8_t CIPHERTEXT[] = { 0xaa,0x2e,0x6b,0x6b,0xf0,0xd8,0x51,0x2a,0x37,0x14,0x94,0x2c,0xf6,0xfd,0xb0,0x29 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-37", "[CBC][MCT][256][ENCRYPT][n37]") {
    const uint8_t KEY[] = { 0x1f,0x33,0xbd,0x4f,0x6d,0xff,0x0f,0x8b,0x48,0x01,0x5c,0x11,0x53,0x62,0x4b,0x49,0xae,0x65,0x56,0x20,0x38,0x09,0xc8,0x18,0xd9,0x55,0xc3,0x6d,0x1d,0xcb,0xa6,0x58 };
    const uint8_t IV[] = { 0xaa,0x2e,0x6b,0x6b,0xf0,0xd8,0x51,0x2a,0x37,0x14,0x94,0x2c,0xf6,0xfd,0xb0,0x29 };
    const uint8_t PLAINTEXT[] = { 0x9e,0x79,0x59,0xee,0x64,0x1a,0xc0,0x02,0xa5,0xf4,0xe2,0x32,0xfb,0xd7,0xd1,0xeb };
    const uint8_t CIPHERTEXT[] = { 0xf8,0x67,0x2a,0xea,0xae,0xc5,0x5c,0xf2,0x28,0x88,0xac,0xd6,0x1a,0x68,0x4a,0x95 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-38", "[CBC][MCT][256][ENCRYPT][n38]") {
    const uint8_t KEY[] = { 0x40,0xdc,0xf3,0x57,0x45,0x71,0x46,0xec,0xed,0xf9,0xef,0xef,0x93,0x44,0xf1,0x3b,0x56,0x02,0x7c,0xca,0x96,0xcc,0x94,0xea,0xf1,0xdd,0x6f,0xbb,0x07,0xa3,0xec,0xcd };
    const uint8_t IV[] = { 0xf8,0x67,0x2a,0xea,0xae,0xc5,0x5c,0xf2,0x28,0x88,0xac,0xd6,0x1a,0x68,0x4a,0x95 };
    const uint8_t PLAINTEXT[] = { 0x5f,0xef,0x4e,0x18,0x28,0x8e,0x49,0x67,0xa5,0xf8,0xb3,0xfe,0xc0,0x26,0xba,0x72 };
    const uint8_t CIPHERTEXT[] = { 0x42,0x11,0x01,0x5c,0x31,0x3a,0x19,0x45,0x5f,0x03,0x23,0x50,0xf2,0x42,0xf8,0x7b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-39", "[CBC][MCT][256][ENCRYPT][n39]") {
    const uint8_t KEY[] = { 0x92,0x61,0xa6,0x24,0x4c,0xe8,0xdb,0x5d,0xba,0xcc,0x24,0x54,0x59,0x45,0xb9,0x3c,0x14,0x13,0x7d,0x96,0xa7,0xf6,0x8d,0xaf,0xae,0xde,0x4c,0xeb,0xf5,0xe1,0x14,0xb6 };
    const uint8_t IV[] = { 0x42,0x11,0x01,0x5c,0x31,0x3a,0x19,0x45,0x5f,0x03,0x23,0x50,0xf2,0x42,0xf8,0x7b };
    const uint8_t PLAINTEXT[] = { 0xd2,0xbd,0x55,0x73,0x09,0x99,0x9d,0xb1,0x57,0x35,0xcb,0xbb,0xca,0x01,0x48,0x07 };
    const uint8_t CIPHERTEXT[] = { 0x01,0xf8,0x30,0x31,0xdb,0x90,0x85,0xf1,0x00,0x1e,0xcb,0x73,0x5d,0xe7,0x63,0x79 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-40", "[CBC][MCT][256][ENCRYPT][n40]") {
    const uint8_t KEY[] = { 0x43,0x34,0x3b,0xac,0xce,0x59,0xa8,0x2a,0x10,0xf1,0xdd,0x90,0xc2,0x39,0x2f,0x28,0x15,0xeb,0x4d,0xa7,0x7c,0x66,0x08,0x5e,0xae,0xc0,0x87,0x98,0xa8,0x06,0x77,0xcf };
    const uint8_t IV[] = { 0x01,0xf8,0x30,0x31,0xdb,0x90,0x85,0xf1,0x00,0x1e,0xcb,0x73,0x5d,0xe7,0x63,0x79 };
    const uint8_t PLAINTEXT[] = { 0xd1,0x55,0x9d,0x88,0x82,0xb1,0x73,0x77,0xaa,0x3d,0xf9,0xc4,0x9b,0x7c,0x96,0x14 };
    const uint8_t CIPHERTEXT[] = { 0xb8,0xc7,0x7e,0xa9,0x56,0x5c,0xd0,0xec,0x31,0xa5,0x31,0x2c,0x57,0x74,0x6a,0x45 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-41", "[CBC][MCT][256][ENCRYPT][n41]") {
    const uint8_t KEY[] = { 0x82,0x03,0x2e,0xeb,0xc5,0xc7,0x4a,0x33,0x5a,0x23,0x9b,0xe7,0x60,0x60,0x98,0xcf,0xad,0x2c,0x33,0x0e,0x2a,0x3a,0xd8,0xb2,0x9f,0x65,0xb6,0xb4,0xff,0x72,0x1d,0x8a };
    const uint8_t IV[] = { 0xb8,0xc7,0x7e,0xa9,0x56,0x5c,0xd0,0xec,0x31,0xa5,0x31,0x2c,0x57,0x74,0x6a,0x45 };
    const uint8_t PLAINTEXT[] = { 0xc1,0x37,0x15,0x47,0x0b,0x9e,0xe2,0x19,0x4a,0xd2,0x46,0x77,0xa2,0x59,0xb7,0xe7 };
    const uint8_t CIPHERTEXT[] = { 0xa6,0x56,0xf7,0x03,0x0a,0x17,0xc9,0x40,0x9f,0x56,0xde,0x36,0xd2,0xd6,0x89,0x50 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-42", "[CBC][MCT][256][ENCRYPT][n42]") {
    const uint8_t KEY[] = { 0x10,0x4a,0x0b,0x72,0x03,0xad,0x96,0xef,0xd1,0xb2,0xf9,0x52,0x8d,0x8e,0x0e,0xbb,0x0b,0x7a,0xc4,0x0d,0x20,0x2d,0x11,0xf2,0x00,0x33,0x68,0x82,0x2d,0xa4,0x94,0xda };
    const uint8_t IV[] = { 0xa6,0x56,0xf7,0x03,0x0a,0x17,0xc9,0x40,0x9f,0x56,0xde,0x36,0xd2,0xd6,0x89,0x50 };
    const uint8_t PLAINTEXT[] = { 0x92,0x49,0x25,0x99,0xc6,0x6a,0xdc,0xdc,0x8b,0x91,0x62,0xb5,0xed,0xee,0x96,0x74 };
    const uint8_t CIPHERTEXT[] = { 0x3a,0x25,0xf4,0x11,0x2b,0xd9,0x69,0x20,0x9f,0x15,0xfb,0x7b,0x68,0xf4,0xc2,0x43 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-43", "[CBC][MCT][256][ENCRYPT][n43]") {
    const uint8_t KEY[] = { 0x28,0x33,0xc9,0xe8,0x8c,0x43,0x1b,0xf5,0xf9,0x45,0x31,0xe8,0x9b,0x06,0x6a,0xa0,0x31,0x5f,0x30,0x1c,0x0b,0xf4,0x78,0xd2,0x9f,0x26,0x93,0xf9,0x45,0x50,0x56,0x99 };
    const uint8_t IV[] = { 0x3a,0x25,0xf4,0x11,0x2b,0xd9,0x69,0x20,0x9f,0x15,0xfb,0x7b,0x68,0xf4,0xc2,0x43 };
    const uint8_t PLAINTEXT[] = { 0x38,0x79,0xc2,0x9a,0x8f,0xee,0x8d,0x1a,0x28,0xf7,0xc8,0xba,0x16,0x88,0x64,0x1b };
    const uint8_t CIPHERTEXT[] = { 0x75,0x33,0x78,0xd7,0xee,0x4d,0x0e,0xc9,0x54,0xf2,0xb9,0xcd,0x72,0x14,0xea,0xc2 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-44", "[CBC][MCT][256][ENCRYPT][n44]") {
    const uint8_t KEY[] = { 0xc6,0xc7,0x37,0x8e,0xdf,0x6f,0xa4,0x8f,0xcd,0xa9,0xb9,0x6f,0xeb,0x68,0xb4,0xb9,0x44,0x6c,0x48,0xcb,0xe5,0xb9,0x76,0x1b,0xcb,0xd4,0x2a,0x34,0x37,0x44,0xbc,0x5b };
    const uint8_t IV[] = { 0x75,0x33,0x78,0xd7,0xee,0x4d,0x0e,0xc9,0x54,0xf2,0xb9,0xcd,0x72,0x14,0xea,0xc2 };
    const uint8_t PLAINTEXT[] = { 0xee,0xf4,0xfe,0x66,0x53,0x2c,0xbf,0x7a,0x34,0xec,0x88,0x87,0x70,0x6e,0xde,0x19 };
    const uint8_t CIPHERTEXT[] = { 0xba,0xc6,0xed,0x53,0x31,0x0e,0x15,0xf4,0xd9,0xc1,0x26,0x05,0x0b,0xf1,0x74,0xf9 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-45", "[CBC][MCT][256][ENCRYPT][n45]") {
    const uint8_t KEY[] = { 0xac,0xe4,0x46,0xd7,0x59,0x2a,0xbf,0x57,0x27,0x21,0x18,0x80,0xf6,0xe0,0x92,0x75,0xfe,0xaa,0xa5,0x98,0xd4,0xb7,0x63,0xef,0x12,0x15,0x0c,0x31,0x3c,0xb5,0xc8,0xa2 };
    const uint8_t IV[] = { 0xba,0xc6,0xed,0x53,0x31,0x0e,0x15,0xf4,0xd9,0xc1,0x26,0x05,0x0b,0xf1,0x74,0xf9 };
    const uint8_t PLAINTEXT[] = { 0x6a,0x23,0x71,0x59,0x86,0x45,0x1b,0xd8,0xea,0x88,0xa1,0xef,0x1d,0x88,0x26,0xcc };
    const uint8_t CIPHERTEXT[] = { 0x4d,0xde,0x25,0x9f,0xb8,0x88,0xd2,0x18,0xd0,0xa6,0x97,0x26,0x9b,0x50,0x8e,0x39 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-46", "[CBC][MCT][256][ENCRYPT][n46]") {
    const uint8_t KEY[] = { 0x40,0xf5,0x40,0xf0,0x4f,0x9e,0xd0,0x21,0x39,0xe0,0x83,0xd5,0x6c,0xf6,0xfb,0x6b,0xb3,0x74,0x80,0x07,0x6c,0x3f,0xb1,0xf7,0xc2,0xb3,0x9b,0x17,0xa7,0xe5,0x46,0x9b };
    const uint8_t IV[] = { 0x4d,0xde,0x25,0x9f,0xb8,0x88,0xd2,0x18,0xd0,0xa6,0x97,0x26,0x9b,0x50,0x8e,0x39 };
    const uint8_t PLAINTEXT[] = { 0xec,0x11,0x06,0x27,0x16,0xb4,0x6f,0x76,0x1e,0xc1,0x9b,0x55,0x9a,0x16,0x69,0x1e };
    const uint8_t CIPHERTEXT[] = { 0x28,0xad,0xaa,0xdc,0xad,0xb2,0x44,0x59,0x28,0xb8,0x62,0xde,0xeb,0x51,0x7a,0x6e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-47", "[CBC][MCT][256][ENCRYPT][n47]") {
    const uint8_t KEY[] = { 0x52,0x05,0xfc,0x49,0x5a,0xe0,0x7a,0x3b,0x3a,0x17,0x3e,0xb9,0x8c,0x96,0xcc,0xac,0x9b,0xd9,0x2a,0xdb,0xc1,0x8d,0xf5,0xae,0xea,0x0b,0xf9,0xc9,0x4c,0xb4,0x3c,0xf5 };
    const uint8_t IV[] = { 0x28,0xad,0xaa,0xdc,0xad,0xb2,0x44,0x59,0x28,0xb8,0x62,0xde,0xeb,0x51,0x7a,0x6e };
    const uint8_t PLAINTEXT[] = { 0x12,0xf0,0xbc,0xb9,0x15,0x7e,0xaa,0x1a,0x03,0xf7,0xbd,0x6c,0xe0,0x60,0x37,0xc7 };
    const uint8_t CIPHERTEXT[] = { 0x87,0x5d,0x2e,0xbf,0x79,0x6e,0xa9,0x6a,0xf5,0x6b,0x9c,0x3b,0x6f,0x9d,0x50,0x88 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-48", "[CBC][MCT][256][ENCRYPT][n48]") {
    const uint8_t KEY[] = { 0xcb,0xdc,0xce,0x0a,0xac,0x18,0xfa,0x7a,0x18,0x5b,0xf8,0xd7,0x28,0x93,0xb1,0xe7,0x1c,0x84,0x04,0x64,0xb8,0xe3,0x5c,0xc4,0x1f,0x60,0x65,0xf2,0x23,0x29,0x6c,0x7d };
    const uint8_t IV[] = { 0x87,0x5d,0x2e,0xbf,0x79,0x6e,0xa9,0x6a,0xf5,0x6b,0x9c,0x3b,0x6f,0x9d,0x50,0x88 };
    const uint8_t PLAINTEXT[] = { 0x99,0xd9,0x32,0x43,0xf6,0xf8,0x80,0x41,0x22,0x4c,0xc6,0x6e,0xa4,0x05,0x7d,0x4b };
    const uint8_t CIPHERTEXT[] = { 0x1f,0xc8,0x9d,0x40,0xbd,0x40,0x2a,0xd9,0xf1,0xf0,0x33,0x3d,0xd9,0x8a,0xa9,0x81 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-49", "[CBC][MCT][256][ENCRYPT][n49]") {
    const uint8_t KEY[] = { 0x5a,0xf6,0x36,0x14,0x28,0xb6,0x57,0x0f,0xfb,0xe3,0x5e,0x28,0x06,0x3c,0xcb,0x76,0x03,0x4c,0x99,0x24,0x05,0xa3,0x76,0x1d,0xee,0x90,0x56,0xcf,0xfa,0xa3,0xc5,0xfc };
    const uint8_t IV[] = { 0x1f,0xc8,0x9d,0x40,0xbd,0x40,0x2a,0xd9,0xf1,0xf0,0x33,0x3d,0xd9,0x8a,0xa9,0x81 };
    const uint8_t PLAINTEXT[] = { 0x91,0x2a,0xf8,0x1e,0x84,0xae,0xad,0x75,0xe3,0xb8,0xa6,0xff,0x2e,0xaf,0x7a,0x91 };
    const uint8_t CIPHERTEXT[] = { 0xeb,0x48,0xe0,0xb9,0x90,0x45,0x60,0x84,0xbd,0xdc,0xf9,0x46,0x65,0x51,0xbe,0x87 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-50", "[CBC][MCT][256][ENCRYPT][n50]") {
    const uint8_t KEY[] = { 0x13,0x59,0x2b,0xc0,0x76,0x91,0x55,0x01,0x80,0x6a,0x12,0x72,0xdc,0xee,0xf0,0x3d,0xe8,0x04,0x79,0x9d,0x95,0xe6,0x16,0x99,0x53,0x4c,0xaf,0x89,0x9f,0xf2,0x7b,0x7b };
    const uint8_t IV[] = { 0xeb,0x48,0xe0,0xb9,0x90,0x45,0x60,0x84,0xbd,0xdc,0xf9,0x46,0x65,0x51,0xbe,0x87 };
    const uint8_t PLAINTEXT[] = { 0x49,0xaf,0x1d,0xd4,0x5e,0x27,0x02,0x0e,0x7b,0x89,0x4c,0x5a,0xda,0xd2,0x3b,0x4b };
    const uint8_t CIPHERTEXT[] = { 0x3b,0xf7,0xdc,0xea,0x25,0x5b,0x69,0x44,0x11,0xca,0xec,0xfe,0x24,0xed,0x44,0x16 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-51", "[CBC][MCT][256][ENCRYPT][n51]") {
    const uint8_t KEY[] = { 0x36,0x43,0x96,0x0c,0x09,0x10,0x5e,0x21,0xb9,0xfc,0xbd,0x10,0xa1,0x0e,0xf6,0x51,0xd3,0xf3,0xa5,0x77,0xb0,0xbd,0x7f,0xdd,0x42,0x86,0x43,0x77,0xbb,0x1f,0x3f,0x6d };
    const uint8_t IV[] = { 0x3b,0xf7,0xdc,0xea,0x25,0x5b,0x69,0x44,0x11,0xca,0xec,0xfe,0x24,0xed,0x44,0x16 };
    const uint8_t PLAINTEXT[] = { 0x25,0x1a,0xbd,0xcc,0x7f,0x81,0x0b,0x20,0x39,0x96,0xaf,0x62,0x7d,0xe0,0x06,0x6c };
    const uint8_t CIPHERTEXT[] = { 0x43,0xb0,0x64,0xb1,0x81,0xb6,0xe5,0xc3,0xdc,0x3d,0xc3,0x11,0xec,0xe5,0x41,0x8d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-52", "[CBC][MCT][256][ENCRYPT][n52]") {
    const uint8_t KEY[] = { 0xd9,0x75,0x99,0x81,0x53,0x14,0x3b,0xa4,0x7d,0x73,0x64,0x11,0xbd,0xf4,0x85,0x64,0x90,0x43,0xc1,0xc6,0x31,0x0b,0x9a,0x1e,0x9e,0xbb,0x80,0x66,0x57,0xfa,0x7e,0xe0 };
    const uint8_t IV[] = { 0x43,0xb0,0x64,0xb1,0x81,0xb6,0xe5,0xc3,0xdc,0x3d,0xc3,0x11,0xec,0xe5,0x41,0x8d };
    const uint8_t PLAINTEXT[] = { 0xef,0x36,0x0f,0x8d,0x5a,0x04,0x65,0x85,0xc4,0x8f,0xd9,0x01,0x1c,0xfa,0x73,0x35 };
    const uint8_t CIPHERTEXT[] = { 0x2f,0x77,0x8c,0x3c,0xed,0x08,0x17,0x8c,0xc8,0x7f,0x6c,0xa9,0x3b,0x37,0xcc,0x2e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-53", "[CBC][MCT][256][ENCRYPT][n53]") {
    const uint8_t KEY[] = { 0x6a,0xa7,0x98,0x45,0xda,0xd4,0x05,0x41,0x40,0x17,0xe4,0x03,0xc4,0xc0,0x64,0xe8,0xbf,0x34,0x4d,0xfa,0xdc,0x03,0x8d,0x92,0x56,0xc4,0xec,0xcf,0x6c,0xcd,0xb2,0xce };
    const uint8_t IV[] = { 0x2f,0x77,0x8c,0x3c,0xed,0x08,0x17,0x8c,0xc8,0x7f,0x6c,0xa9,0x3b,0x37,0xcc,0x2e };
    const uint8_t PLAINTEXT[] = { 0xb3,0xd2,0x01,0xc4,0x89,0xc0,0x3e,0xe5,0x3d,0x64,0x80,0x12,0x79,0x34,0xe1,0x8c };
    const uint8_t CIPHERTEXT[] = { 0x8e,0xc9,0xfa,0xfb,0xe7,0x67,0x54,0x49,0xfe,0xfe,0x60,0x36,0x57,0x6d,0xdd,0xf3 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-54", "[CBC][MCT][256][ENCRYPT][n54]") {
    const uint8_t KEY[] = { 0x75,0x21,0xe7,0xc7,0x0c,0x3e,0xb7,0x0c,0x3e,0xfe,0x9f,0x52,0x40,0xc7,0x27,0x38,0x31,0xfd,0xb7,0x01,0x3b,0x64,0xd9,0xdb,0xa8,0x3a,0x8c,0xf9,0x3b,0xa0,0x6f,0x3d };
    const uint8_t IV[] = { 0x8e,0xc9,0xfa,0xfb,0xe7,0x67,0x54,0x49,0xfe,0xfe,0x60,0x36,0x57,0x6d,0xdd,0xf3 };
    const uint8_t PLAINTEXT[] = { 0x1f,0x86,0x7f,0x82,0xd6,0xea,0xb2,0x4d,0x7e,0xe9,0x7b,0x51,0x84,0x07,0x43,0xd0 };
    const uint8_t CIPHERTEXT[] = { 0xcf,0x2a,0xec,0xfe,0x19,0x3f,0x86,0x54,0xe2,0x7c,0xd1,0x5b,0x25,0x36,0xa1,0x36 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-55", "[CBC][MCT][256][ENCRYPT][n55]") {
    const uint8_t KEY[] = { 0xb4,0x49,0xc1,0x89,0x1a,0x51,0x7f,0x25,0xe8,0xc4,0xe0,0xfb,0x89,0x73,0x1f,0xd8,0xfe,0xd7,0x5b,0xff,0x22,0x5b,0x5f,0x8f,0x4a,0x46,0x5d,0xa2,0x1e,0x96,0xce,0x0b };
    const uint8_t IV[] = { 0xcf,0x2a,0xec,0xfe,0x19,0x3f,0x86,0x54,0xe2,0x7c,0xd1,0x5b,0x25,0x36,0xa1,0x36 };
    const uint8_t PLAINTEXT[] = { 0xc1,0x68,0x26,0x4e,0x16,0x6f,0xc8,0x29,0xd6,0x3a,0x7f,0xa9,0xc9,0xb4,0x38,0xe0 };
    const uint8_t CIPHERTEXT[] = { 0x93,0xa8,0xac,0x08,0x6f,0xda,0x98,0x2a,0x1a,0x2d,0x06,0x3d,0x0e,0xd7,0x33,0x02 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-56", "[CBC][MCT][256][ENCRYPT][n56]") {
    const uint8_t KEY[] = { 0xc6,0x29,0x21,0x4c,0x23,0xd2,0x84,0x7b,0x01,0x4e,0x3c,0x19,0xe8,0x51,0x80,0x25,0x6d,0x7f,0xf7,0xf7,0x4d,0x81,0xc7,0xa5,0x50,0x6b,0x5b,0x9f,0x10,0x41,0xfd,0x09 };
    const uint8_t IV[] = { 0x93,0xa8,0xac,0x08,0x6f,0xda,0x98,0x2a,0x1a,0x2d,0x06,0x3d,0x0e,0xd7,0x33,0x02 };
    const uint8_t PLAINTEXT[] = { 0x72,0x60,0xe0,0xc5,0x39,0x83,0xfb,0x5e,0xe9,0x8a,0xdc,0xe2,0x61,0x22,0x9f,0xfd };
    const uint8_t CIPHERTEXT[] = { 0x3e,0xf0,0xd5,0x3f,0x0e,0x1c,0x77,0x8f,0x4a,0x4a,0x64,0x6d,0x99,0x28,0x94,0x3c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-57", "[CBC][MCT][256][ENCRYPT][n57]") {
    const uint8_t KEY[] = { 0x61,0xcc,0xe4,0x1f,0x97,0x4a,0x80,0xd3,0xef,0x9a,0x36,0xa4,0x5a,0xc4,0xa7,0xd0,0x53,0x8f,0x22,0xc8,0x43,0x9d,0xb0,0x2a,0x1a,0x21,0x3f,0xf2,0x89,0x69,0x69,0x35 };
    const uint8_t IV[] = { 0x3e,0xf0,0xd5,0x3f,0x0e,0x1c,0x77,0x8f,0x4a,0x4a,0x64,0x6d,0x99,0x28,0x94,0x3c };
    const uint8_t PLAINTEXT[] = { 0xa7,0xe5,0xc5,0x53,0xb4,0x98,0x04,0xa8,0xee,0xd4,0x0a,0xbd,0xb2,0x95,0x27,0xf5 };
    const uint8_t CIPHERTEXT[] = { 0xb3,0x2c,0x0d,0xb0,0x3d,0xbd,0x9c,0xd8,0x7c,0xfa,0x3d,0x6f,0xb9,0x20,0xb4,0x9a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-58", "[CBC][MCT][256][ENCRYPT][n58]") {
    const uint8_t KEY[] = { 0xe5,0x4f,0x37,0x05,0x52,0x5a,0x5d,0xf3,0xa4,0x1e,0x98,0xfd,0xc6,0xd7,0x55,0xed,0xe0,0xa3,0x2f,0x78,0x7e,0x20,0x2c,0xf2,0x66,0xdb,0x02,0x9d,0x30,0x49,0xdd,0xaf };
    const uint8_t IV[] = { 0xb3,0x2c,0x0d,0xb0,0x3d,0xbd,0x9c,0xd8,0x7c,0xfa,0x3d,0x6f,0xb9,0x20,0xb4,0x9a };
    const uint8_t PLAINTEXT[] = { 0x84,0x83,0xd3,0x1a,0xc5,0x10,0xdd,0x20,0x4b,0x84,0xae,0x59,0x9c,0x13,0xf2,0x3d };
    const uint8_t CIPHERTEXT[] = { 0x4e,0x5b,0x7d,0xff,0x86,0xac,0x34,0xe7,0xb3,0x5a,0xe3,0x7b,0x69,0x55,0x12,0x6a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-59", "[CBC][MCT][256][ENCRYPT][n59]") {
    const uint8_t KEY[] = { 0xb1,0xaa,0x3c,0x3d,0x57,0x78,0x62,0x93,0xc4,0xfa,0x13,0xdb,0x70,0x93,0x8d,0x91,0xae,0xf8,0x52,0x87,0xf8,0x8c,0x18,0x15,0xd5,0x81,0xe1,0xe6,0x59,0x1c,0xcf,0xc5 };
    const uint8_t IV[] = { 0x4e,0x5b,0x7d,0xff,0x86,0xac,0x34,0xe7,0xb3,0x5a,0xe3,0x7b,0x69,0x55,0x12,0x6a };
    const uint8_t PLAINTEXT[] = { 0x54,0xe5,0x0b,0x38,0x05,0x22,0x3f,0x60,0x60,0xe4,0x8b,0x26,0xb6,0x44,0xd8,0x7c };
    const uint8_t CIPHERTEXT[] = { 0xfd,0xeb,0xa7,0xfe,0x33,0x56,0x9c,0x1e,0xb8,0x6d,0x80,0x19,0x22,0xba,0xeb,0xc4 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-60", "[CBC][MCT][256][ENCRYPT][n60]") {
    const uint8_t KEY[] = { 0x6d,0x08,0x2d,0xc6,0x96,0x76,0x9c,0x00,0xb7,0xe4,0x56,0x64,0x65,0xe1,0x17,0xf0,0x53,0x13,0xf5,0x79,0xcb,0xda,0x84,0x0b,0x6d,0xec,0x61,0xff,0x7b,0xa6,0x24,0x01 };
    const uint8_t IV[] = { 0xfd,0xeb,0xa7,0xfe,0x33,0x56,0x9c,0x1e,0xb8,0x6d,0x80,0x19,0x22,0xba,0xeb,0xc4 };
    const uint8_t PLAINTEXT[] = { 0xdc,0xa2,0x11,0xfb,0xc1,0x0e,0xfe,0x93,0x73,0x1e,0x45,0xbf,0x15,0x72,0x9a,0x61 };
    const uint8_t CIPHERTEXT[] = { 0x38,0x25,0xc9,0xc5,0x58,0xd2,0x0a,0x98,0x36,0x41,0x80,0xf3,0x0a,0x46,0x29,0x87 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-61", "[CBC][MCT][256][ENCRYPT][n61]") {
    const uint8_t KEY[] = { 0xb6,0xe7,0x0c,0x39,0x49,0xf0,0x57,0x8d,0x1d,0x35,0x9b,0xe3,0x4d,0xc2,0x76,0x99,0x6b,0x36,0x3c,0xbc,0x93,0x08,0x8e,0x93,0x5b,0xad,0xe1,0x0c,0x71,0xe0,0x0d,0x86 };
    const uint8_t IV[] = { 0x38,0x25,0xc9,0xc5,0x58,0xd2,0x0a,0x98,0x36,0x41,0x80,0xf3,0x0a,0x46,0x29,0x87 };
    const uint8_t PLAINTEXT[] = { 0xdb,0xef,0x21,0xff,0xdf,0x86,0xcb,0x8d,0xaa,0xd1,0xcd,0x87,0x28,0x23,0x61,0x69 };
    const uint8_t CIPHERTEXT[] = { 0x53,0x8f,0x82,0xdc,0x6c,0xdb,0xa8,0x97,0xeb,0xd1,0x7c,0x60,0x26,0xd1,0x0f,0xa4 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-62", "[CBC][MCT][256][ENCRYPT][n62]") {
    const uint8_t KEY[] = { 0xd0,0xb9,0x75,0xbf,0x21,0xa9,0xd1,0x34,0x31,0x7c,0x20,0x2d,0x84,0x57,0x45,0x44,0x38,0xb9,0xbe,0x60,0xff,0xd3,0x26,0x04,0xb0,0x7c,0x9d,0x6c,0x57,0x31,0x02,0x22 };
    const uint8_t IV[] = { 0x53,0x8f,0x82,0xdc,0x6c,0xdb,0xa8,0x97,0xeb,0xd1,0x7c,0x60,0x26,0xd1,0x0f,0xa4 };
    const uint8_t PLAINTEXT[] = { 0x66,0x5e,0x79,0x86,0x68,0x59,0x86,0xb9,0x2c,0x49,0xbb,0xce,0xc9,0x95,0x33,0xdd };
    const uint8_t CIPHERTEXT[] = { 0x9e,0x7c,0xfa,0x3e,0x50,0x9e,0x3f,0xb7,0x88,0xf3,0x8d,0x45,0xe2,0x0e,0x15,0x94 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-63", "[CBC][MCT][256][ENCRYPT][n63]") {
    const uint8_t KEY[] = { 0xed,0xc7,0x22,0xee,0xb9,0xfa,0x98,0xbd,0x99,0x8b,0x2a,0xba,0xfc,0x6c,0x23,0xa5,0xa6,0xc5,0x44,0x5e,0xaf,0x4d,0x19,0xb3,0x38,0x8f,0x10,0x29,0xb5,0x3f,0x17,0xb6 };
    const uint8_t IV[] = { 0x9e,0x7c,0xfa,0x3e,0x50,0x9e,0x3f,0xb7,0x88,0xf3,0x8d,0x45,0xe2,0x0e,0x15,0x94 };
    const uint8_t PLAINTEXT[] = { 0x3d,0x7e,0x57,0x51,0x98,0x53,0x49,0x89,0xa8,0xf7,0x0a,0x97,0x78,0x3b,0x66,0xe1 };
    const uint8_t CIPHERTEXT[] = { 0xe7,0xbb,0x52,0x5e,0x56,0xa8,0x9d,0x76,0x70,0xd8,0x1e,0x08,0x9b,0x92,0xcf,0xf7 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-64", "[CBC][MCT][256][ENCRYPT][n64]") {
    const uint8_t KEY[] = { 0x91,0x39,0x3c,0x05,0xce,0x73,0x81,0x0d,0x4f,0xef,0xb1,0xde,0xe4,0x7b,0xeb,0x49,0x41,0x7e,0x16,0x00,0xf9,0xe5,0x84,0xc5,0x48,0x57,0x0e,0x21,0x2e,0xad,0xd8,0x41 };
    const uint8_t IV[] = { 0xe7,0xbb,0x52,0x5e,0x56,0xa8,0x9d,0x76,0x70,0xd8,0x1e,0x08,0x9b,0x92,0xcf,0xf7 };
    const uint8_t PLAINTEXT[] = { 0x7c,0xfe,0x1e,0xeb,0x77,0x89,0x19,0xb0,0xd6,0x64,0x9b,0x64,0x18,0x17,0xc8,0xec };
    const uint8_t CIPHERTEXT[] = { 0xe5,0x16,0x0d,0x70,0xf6,0x8b,0x50,0xc9,0x6b,0x47,0xba,0x66,0xd3,0xa3,0x7c,0x25 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-65", "[CBC][MCT][256][ENCRYPT][n65]") {
    const uint8_t KEY[] = { 0x48,0xe5,0x80,0x9e,0xd6,0x57,0xb4,0x09,0x31,0xa0,0x85,0xaa,0xd5,0x94,0x2e,0xb9,0xa4,0x68,0x1b,0x70,0x0f,0x6e,0xd4,0x0c,0x23,0x10,0xb4,0x47,0xfd,0x0e,0xa4,0x64 };
    const uint8_t IV[] = { 0xe5,0x16,0x0d,0x70,0xf6,0x8b,0x50,0xc9,0x6b,0x47,0xba,0x66,0xd3,0xa3,0x7c,0x25 };
    const uint8_t PLAINTEXT[] = { 0xd9,0xdc,0xbc,0x9b,0x18,0x24,0x35,0x04,0x7e,0x4f,0x34,0x74,0x31,0xef,0xc5,0xf0 };
    const uint8_t CIPHERTEXT[] = { 0xe6,0x76,0xf0,0x00,0x6d,0x10,0x15,0xe9,0x37,0x07,0x0e,0x5d,0x0c,0xd1,0x14,0x1f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-66", "[CBC][MCT][256][ENCRYPT][n66]") {
    const uint8_t KEY[] = { 0x5d,0xbd,0x5f,0x5f,0xf0,0x49,0xa6,0xd1,0x27,0x89,0x13,0x25,0xfe,0xd8,0xf4,0xee,0x42,0x1e,0xeb,0x70,0x62,0x7e,0xc1,0xe5,0x14,0x17,0xba,0x1a,0xf1,0xdf,0xb0,0x7b };
    const uint8_t IV[] = { 0xe6,0x76,0xf0,0x00,0x6d,0x10,0x15,0xe9,0x37,0x07,0x0e,0x5d,0x0c,0xd1,0x14,0x1f };
    const uint8_t PLAINTEXT[] = { 0x15,0x58,0xdf,0xc1,0x26,0x1e,0x12,0xd8,0x16,0x29,0x96,0x8f,0x2b,0x4c,0xda,0x57 };
    const uint8_t CIPHERTEXT[] = { 0x65,0x87,0x2c,0x5c,0x85,0xd2,0xb1,0xb6,0x00,0xc8,0x13,0x6d,0x94,0x6d,0x87,0x4a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-67", "[CBC][MCT][256][ENCRYPT][n67]") {
    const uint8_t KEY[] = { 0x80,0x45,0x28,0x9d,0x74,0xde,0xa1,0x8c,0x78,0x9a,0x87,0x19,0x62,0x4c,0xee,0x77,0x27,0x99,0xc7,0x2c,0xe7,0xac,0x70,0x53,0x14,0xdf,0xa9,0x77,0x65,0xb2,0x37,0x31 };
    const uint8_t IV[] = { 0x65,0x87,0x2c,0x5c,0x85,0xd2,0xb1,0xb6,0x00,0xc8,0x13,0x6d,0x94,0x6d,0x87,0x4a };
    const uint8_t PLAINTEXT[] = { 0xdd,0xf8,0x77,0xc2,0x84,0x97,0x07,0x5d,0x5f,0x13,0x94,0x3c,0x9c,0x94,0x1a,0x99 };
    const uint8_t CIPHERTEXT[] = { 0x96,0x73,0x25,0x55,0x84,0x2f,0x96,0x0b,0xed,0x77,0x12,0x84,0x97,0x22,0xe0,0x18 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-68", "[CBC][MCT][256][ENCRYPT][n68]") {
    const uint8_t KEY[] = { 0xcd,0x10,0x57,0xaf,0xe1,0x57,0xd1,0xcd,0xd7,0x09,0x98,0x12,0x6e,0x6f,0xd0,0x6a,0xb1,0xea,0xe2,0x79,0x63,0x83,0xe6,0x58,0xf9,0xa8,0xbb,0xf3,0xf2,0x90,0xd7,0x29 };
    const uint8_t IV[] = { 0x96,0x73,0x25,0x55,0x84,0x2f,0x96,0x0b,0xed,0x77,0x12,0x84,0x97,0x22,0xe0,0x18 };
    const uint8_t PLAINTEXT[] = { 0x4d,0x55,0x7f,0x32,0x95,0x89,0x70,0x41,0xaf,0x93,0x1f,0x0b,0x0c,0x23,0x3e,0x1d };
    const uint8_t CIPHERTEXT[] = { 0xb4,0x2c,0xb5,0xa1,0xd1,0xb8,0x0a,0x02,0xce,0xf8,0xd6,0xf3,0x52,0x2c,0xb7,0xef };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-69", "[CBC][MCT][256][ENCRYPT][n69]") {
    const uint8_t KEY[] = { 0xfd,0xeb,0x7c,0x16,0x95,0x2d,0xdb,0x8a,0xed,0xe1,0xc1,0x5e,0xb5,0xb7,0x0c,0x8c,0x05,0xc6,0x57,0xd8,0xb2,0x3b,0xec,0x5a,0x37,0x50,0x6d,0x00,0xa0,0xbc,0x60,0xc6 };
    const uint8_t IV[] = { 0xb4,0x2c,0xb5,0xa1,0xd1,0xb8,0x0a,0x02,0xce,0xf8,0xd6,0xf3,0x52,0x2c,0xb7,0xef };
    const uint8_t PLAINTEXT[] = { 0x30,0xfb,0x2b,0xb9,0x74,0x7a,0x0a,0x47,0x3a,0xe8,0x59,0x4c,0xdb,0xd8,0xdc,0xe6 };
    const uint8_t CIPHERTEXT[] = { 0xe4,0x26,0x24,0xe6,0xcb,0x69,0x1b,0x75,0x72,0xe8,0xa4,0xa0,0x27,0x19,0x44,0x7c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-70", "[CBC][MCT][256][ENCRYPT][n70]") {
    const uint8_t KEY[] = { 0x5a,0x22,0x69,0x0a,0xd3,0x94,0xf2,0x7f,0x3a,0xd7,0x8c,0x1b,0xb0,0x45,0x54,0x91,0xe1,0xe0,0x73,0x3e,0x79,0x52,0xf7,0x2f,0x45,0xb8,0xc9,0xa0,0x87,0xa5,0x24,0xba };
    const uint8_t IV[] = { 0xe4,0x26,0x24,0xe6,0xcb,0x69,0x1b,0x75,0x72,0xe8,0xa4,0xa0,0x27,0x19,0x44,0x7c };
    const uint8_t PLAINTEXT[] = { 0xa7,0xc9,0x15,0x1c,0x46,0xb9,0x29,0xf5,0xd7,0x36,0x4d,0x45,0x05,0xf2,0x58,0x1d };
    const uint8_t CIPHERTEXT[] = { 0x11,0x52,0x54,0x40,0x0e,0xdc,0x67,0xad,0x82,0x03,0x57,0x08,0x2d,0x10,0x18,0x10 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-71", "[CBC][MCT][256][ENCRYPT][n71]") {
    const uint8_t KEY[] = { 0x0b,0x2c,0x10,0x52,0x89,0xdf,0x9e,0x6d,0x72,0x2d,0xe6,0x24,0x03,0x22,0x20,0x5a,0xf0,0xb2,0x27,0x7e,0x77,0x8e,0x90,0x82,0xc7,0xbb,0x9e,0xa8,0xaa,0xb5,0x3c,0xaa };
    const uint8_t IV[] = { 0x11,0x52,0x54,0x40,0x0e,0xdc,0x67,0xad,0x82,0x03,0x57,0x08,0x2d,0x10,0x18,0x10 };
    const uint8_t PLAINTEXT[] = { 0x51,0x0e,0x79,0x58,0x5a,0x4b,0x6c,0x12,0x48,0xfa,0x6a,0x3f,0xb3,0x67,0x74,0xcb };
    const uint8_t CIPHERTEXT[] = { 0x52,0x73,0xaa,0x0d,0x34,0x55,0x22,0x45,0xb1,0x32,0xee,0x43,0x8c,0x66,0x29,0x8d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-72", "[CBC][MCT][256][ENCRYPT][n72]") {
    const uint8_t KEY[] = { 0xe0,0x4d,0xcb,0x76,0x96,0x43,0x81,0xd7,0x3b,0xed,0xfc,0xbe,0x24,0xa9,0xdd,0xe6,0xa2,0xc1,0x8d,0x73,0x43,0xdb,0xb2,0xc7,0x76,0x89,0x70,0xeb,0x26,0xd3,0x15,0x27 };
    const uint8_t IV[] = { 0x52,0x73,0xaa,0x0d,0x34,0x55,0x22,0x45,0xb1,0x32,0xee,0x43,0x8c,0x66,0x29,0x8d };
    const uint8_t PLAINTEXT[] = { 0xeb,0x61,0xdb,0x24,0x1f,0x9c,0x1f,0xba,0x49,0xc0,0x1a,0x9a,0x27,0x8b,0xfd,0xbc };
    const uint8_t CIPHERTEXT[] = { 0x0b,0xfb,0xca,0x5a,0xe9,0xc5,0x80,0x2a,0xf4,0x08,0x2c,0x9e,0x98,0x8c,0x25,0x80 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-73", "[CBC][MCT][256][ENCRYPT][n73]") {
    const uint8_t KEY[] = { 0x48,0xc8,0x03,0x1a,0x04,0x81,0xaf,0xd7,0xa9,0x9a,0x8d,0x23,0x32,0xed,0x3d,0x42,0xa9,0x3a,0x47,0x29,0xaa,0x1e,0x32,0xed,0x82,0x81,0x5c,0x75,0xbe,0x5f,0x30,0xa7 };
    const uint8_t IV[] = { 0x0b,0xfb,0xca,0x5a,0xe9,0xc5,0x80,0x2a,0xf4,0x08,0x2c,0x9e,0x98,0x8c,0x25,0x80 };
    const uint8_t PLAINTEXT[] = { 0xa8,0x85,0xc8,0x6c,0x92,0xc2,0x2e,0x00,0x92,0x77,0x71,0x9d,0x16,0x44,0xe0,0xa4 };
    const uint8_t CIPHERTEXT[] = { 0xe6,0xf2,0x87,0x78,0x69,0xc0,0x42,0x7f,0x04,0xe8,0x73,0x50,0x9a,0xb0,0x3c,0x4c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-74", "[CBC][MCT][256][ENCRYPT][n74]") {
    const uint8_t KEY[] = { 0xba,0x98,0xad,0x29,0x64,0x19,0x53,0x3c,0x62,0x15,0xe4,0x84,0x85,0x93,0xea,0x29,0x4f,0xc8,0xc0,0x51,0xc3,0xde,0x70,0x92,0x86,0x69,0x2f,0x25,0x24,0xef,0x0c,0xeb };
    const uint8_t IV[] = { 0xe6,0xf2,0x87,0x78,0x69,0xc0,0x42,0x7f,0x04,0xe8,0x73,0x50,0x9a,0xb0,0x3c,0x4c };
    const uint8_t PLAINTEXT[] = { 0xf2,0x50,0xae,0x33,0x60,0x98,0xfc,0xeb,0xcb,0x8f,0x69,0xa7,0xb7,0x7e,0xd7,0x6b };
    const uint8_t CIPHERTEXT[] = { 0x8a,0x8f,0xdc,0xbe,0x74,0xaf,0x60,0xa8,0x22,0x33,0x03,0xcb,0xe7,0x87,0x94,0x39 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-75", "[CBC][MCT][256][ENCRYPT][n75]") {
    const uint8_t KEY[] = { 0xb0,0x56,0xac,0x59,0xe9,0xdb,0x20,0xef,0xc5,0x46,0x32,0x8f,0x47,0xfd,0xb8,0xa7,0xc5,0x47,0x1c,0xef,0xb7,0x71,0x10,0x3a,0xa4,0x5a,0x2c,0xee,0xc3,0x68,0x98,0xd2 };
    const uint8_t IV[] = { 0x8a,0x8f,0xdc,0xbe,0x74,0xaf,0x60,0xa8,0x22,0x33,0x03,0xcb,0xe7,0x87,0x94,0x39 };
    const uint8_t PLAINTEXT[] = { 0x0a,0xce,0x01,0x70,0x8d,0xc2,0x73,0xd3,0xa7,0x53,0xd6,0x0b,0xc2,0x6e,0x52,0x8e };
    const uint8_t CIPHERTEXT[] = { 0x92,0x0c,0x72,0xf9,0xe7,0xc5,0x82,0x7c,0xa5,0x62,0xec,0xf2,0x4e,0x41,0xf8,0xc6 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-76", "[CBC][MCT][256][ENCRYPT][n76]") {
    const uint8_t KEY[] = { 0xbe,0xbe,0x21,0x1a,0xc9,0xef,0x5f,0xf3,0x46,0x98,0x47,0xe9,0xba,0x45,0x21,0x09,0x57,0x4b,0x6e,0x16,0x50,0xb4,0x92,0x46,0x01,0x38,0xc0,0x1c,0x8d,0x29,0x60,0x14 };
    const uint8_t IV[] = { 0x92,0x0c,0x72,0xf9,0xe7,0xc5,0x82,0x7c,0xa5,0x62,0xec,0xf2,0x4e,0x41,0xf8,0xc6 };
    const uint8_t PLAINTEXT[] = { 0x0e,0xe8,0x8d,0x43,0x20,0x34,0x7f,0x1c,0x83,0xde,0x75,0x66,0xfd,0xb8,0x99,0xae };
    const uint8_t CIPHERTEXT[] = { 0xa3,0x59,0x4c,0x10,0x51,0xc9,0x09,0x74,0xe1,0xab,0x82,0xfb,0xf4,0xf3,0xe0,0xfe };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-77", "[CBC][MCT][256][ENCRYPT][n77]") {
    const uint8_t KEY[] = { 0x18,0x81,0x92,0xcc,0x39,0xa2,0xef,0x64,0x00,0xc3,0x1c,0xbf,0x03,0xe9,0xbb,0x96,0xf4,0x12,0x22,0x06,0x01,0x7d,0x9b,0x32,0xe0,0x93,0x42,0xe7,0x79,0xda,0x80,0xea };
    const uint8_t IV[] = { 0xa3,0x59,0x4c,0x10,0x51,0xc9,0x09,0x74,0xe1,0xab,0x82,0xfb,0xf4,0xf3,0xe0,0xfe };
    const uint8_t PLAINTEXT[] = { 0xa6,0x3f,0xb3,0xd6,0xf0,0x4d,0xb0,0x97,0x46,0x5b,0x5b,0x56,0xb9,0xac,0x9a,0x9f };
    const uint8_t CIPHERTEXT[] = { 0x26,0x0d,0x1e,0x76,0xb7,0xb2,0x86,0xd6,0xc2,0x4d,0x0e,0x92,0xc0,0x41,0x7f,0xe5 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-78", "[CBC][MCT][256][ENCRYPT][n78]") {
    const uint8_t KEY[] = { 0x40,0xed,0x1c,0x2c,0x6d,0x1b,0xca,0xe0,0xad,0xfe,0x83,0x54,0x18,0x97,0x6b,0xd2,0xd2,0x1f,0x3c,0x70,0xb6,0xcf,0x1d,0xe4,0x22,0xde,0x4c,0x75,0xb9,0x9b,0xff,0x0f };
    const uint8_t IV[] = { 0x26,0x0d,0x1e,0x76,0xb7,0xb2,0x86,0xd6,0xc2,0x4d,0x0e,0x92,0xc0,0x41,0x7f,0xe5 };
    const uint8_t PLAINTEXT[] = { 0x58,0x6c,0x8e,0xe0,0x54,0xb9,0x25,0x84,0xad,0x3d,0x9f,0xeb,0x1b,0x7e,0xd0,0x44 };
    const uint8_t CIPHERTEXT[] = { 0xae,0x7e,0x5f,0xda,0x5e,0xc5,0xff,0x82,0x77,0x27,0x42,0x7a,0x1b,0x52,0x2c,0xdf };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-79", "[CBC][MCT][256][ENCRYPT][n79]") {
    const uint8_t KEY[] = { 0xe6,0x69,0x40,0x30,0xc6,0xf5,0x6b,0xb6,0x48,0x0d,0xe6,0xa4,0x60,0x46,0x9e,0x97,0x7c,0x61,0x63,0xaa,0xe8,0x0a,0xe2,0x66,0x55,0xf9,0x0e,0x0f,0xa2,0xc9,0xd3,0xd0 };
    const uint8_t IV[] = { 0xae,0x7e,0x5f,0xda,0x5e,0xc5,0xff,0x82,0x77,0x27,0x42,0x7a,0x1b,0x52,0x2c,0xdf };
    const uint8_t PLAINTEXT[] = { 0xa6,0x84,0x5c,0x1c,0xab,0xee,0xa1,0x56,0xe5,0xf3,0x65,0xf0,0x78,0xd1,0xf5,0x45 };
    const uint8_t CIPHERTEXT[] = { 0xfe,0x5b,0xc0,0x66,0x65,0xa6,0x2a,0x76,0xaf,0x3d,0x93,0xbf,0xaf,0x0c,0xcf,0xae };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-80", "[CBC][MCT][256][ENCRYPT][n80]") {
    const uint8_t KEY[] = { 0x5a,0xad,0x48,0x63,0x71,0x7e,0xed,0x25,0xbf,0xe7,0x9a,0x49,0x73,0xaf,0x54,0x0d,0x82,0x3a,0xa3,0xcc,0x8d,0xac,0xc8,0x10,0xfa,0xc4,0x9d,0xb0,0x0d,0xc5,0x1c,0x7e };
    const uint8_t IV[] = { 0xfe,0x5b,0xc0,0x66,0x65,0xa6,0x2a,0x76,0xaf,0x3d,0x93,0xbf,0xaf,0x0c,0xcf,0xae };
    const uint8_t PLAINTEXT[] = { 0xbc,0xc4,0x08,0x53,0xb7,0x8b,0x86,0x93,0xf7,0xea,0x7c,0xed,0x13,0xe9,0xca,0x9a };
    const uint8_t CIPHERTEXT[] = { 0x7e,0x47,0x4e,0xa9,0x66,0x41,0xb4,0xe0,0xec,0x8b,0x1c,0xeb,0x41,0x41,0x34,0xef };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-81", "[CBC][MCT][256][ENCRYPT][n81]") {
    const uint8_t KEY[] = { 0xc2,0x80,0x59,0x88,0x81,0x82,0x1b,0x66,0xc0,0xc1,0xe2,0x59,0x02,0xb9,0x1e,0x1a,0xfc,0x7d,0xed,0x65,0xeb,0xed,0x7c,0xf0,0x16,0x4f,0x81,0x5b,0x4c,0x84,0x28,0x91 };
    const uint8_t IV[] = { 0x7e,0x47,0x4e,0xa9,0x66,0x41,0xb4,0xe0,0xec,0x8b,0x1c,0xeb,0x41,0x41,0x34,0xef };
    const uint8_t PLAINTEXT[] = { 0x98,0x2d,0x11,0xeb,0xf0,0xfc,0xf6,0x43,0x7f,0x26,0x78,0x10,0x71,0x16,0x4a,0x17 };
    const uint8_t CIPHERTEXT[] = { 0xfc,0x55,0x78,0xcb,0x13,0xac,0xe5,0xb0,0xb1,0x99,0x76,0x2b,0x61,0xb3,0xdb,0xcf };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-82", "[CBC][MCT][256][ENCRYPT][n82]") {
    const uint8_t KEY[] = { 0x76,0x54,0x7c,0x50,0x2b,0x98,0xd7,0x00,0x8e,0xd2,0xff,0x9f,0x77,0xc9,0x2c,0x21,0x00,0x28,0x95,0xae,0xf8,0x41,0x99,0x40,0xa7,0xd6,0xf7,0x70,0x2d,0x37,0xf3,0x5e };
    const uint8_t IV[] = { 0xfc,0x55,0x78,0xcb,0x13,0xac,0xe5,0xb0,0xb1,0x99,0x76,0x2b,0x61,0xb3,0xdb,0xcf };
    const uint8_t PLAINTEXT[] = { 0xb4,0xd4,0x25,0xd8,0xaa,0x1a,0xcc,0x66,0x4e,0x13,0x1d,0xc6,0x75,0x70,0x32,0x3b };
    const uint8_t CIPHERTEXT[] = { 0x50,0xd0,0x70,0xf6,0x59,0xa2,0x69,0x74,0x16,0xec,0xff,0xcf,0x6b,0xd6,0xf5,0x5e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-83", "[CBC][MCT][256][ENCRYPT][n83]") {
    const uint8_t KEY[] = { 0xf2,0x72,0x9b,0x51,0xd9,0x41,0xd0,0x34,0x6a,0x3c,0x64,0x01,0x0e,0x4f,0xf5,0x33,0x50,0xf8,0xe5,0x58,0xa1,0xe3,0xf0,0x34,0xb1,0x3a,0x08,0xbf,0x46,0xe1,0x06,0x00 };
    const uint8_t IV[] = { 0x50,0xd0,0x70,0xf6,0x59,0xa2,0x69,0x74,0x16,0xec,0xff,0xcf,0x6b,0xd6,0xf5,0x5e };
    const uint8_t PLAINTEXT[] = { 0x84,0x26,0xe7,0x01,0xf2,0xd9,0x07,0x34,0xe4,0xee,0x9b,0x9e,0x79,0x86,0xd9,0x12 };
    const uint8_t CIPHERTEXT[] = { 0x83,0x93,0x7d,0x01,0xc8,0x55,0xf3,0x62,0x11,0x08,0x5a,0xac,0x95,0x05,0x41,0x28 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-84", "[CBC][MCT][256][ENCRYPT][n84]") {
    const uint8_t KEY[] = { 0xa5,0x84,0x1a,0xc0,0xa6,0xe3,0x7e,0x35,0x19,0xcc,0x67,0x28,0xfe,0xa8,0x78,0x2c,0xd3,0x6b,0x98,0x59,0x69,0xb6,0x03,0x56,0xa0,0x32,0x52,0x13,0xd3,0xe4,0x47,0x28 };
    const uint8_t IV[] = { 0x83,0x93,0x7d,0x01,0xc8,0x55,0xf3,0x62,0x11,0x08,0x5a,0xac,0x95,0x05,0x41,0x28 };
    const uint8_t PLAINTEXT[] = { 0x57,0xf6,0x81,0x91,0x7f,0xa2,0xae,0x01,0x73,0xf0,0x03,0x29,0xf0,0xe7,0x8d,0x1f };
    const uint8_t CIPHERTEXT[] = { 0x04,0x54,0x8e,0x52,0x03,0x4e,0x7f,0x59,0x2e,0x5a,0xb1,0x72,0xa2,0x24,0x68,0x34 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-85", "[CBC][MCT][256][ENCRYPT][n85]") {
    const uint8_t KEY[] = { 0xed,0xb4,0x2f,0x89,0x2a,0xcf,0x75,0xea,0x4f,0xbb,0xcb,0x56,0x6f,0xbc,0xa9,0xe4,0xd7,0x3f,0x16,0x0b,0x6a,0xf8,0x7c,0x0f,0x8e,0x68,0xe3,0x61,0x71,0xc0,0x2f,0x1c };
    const uint8_t IV[] = { 0x04,0x54,0x8e,0x52,0x03,0x4e,0x7f,0x59,0x2e,0x5a,0xb1,0x72,0xa2,0x24,0x68,0x34 };
    const uint8_t PLAINTEXT[] = { 0x48,0x30,0x35,0x49,0x8c,0x2c,0x0b,0xdf,0x56,0x77,0xac,0x7e,0x91,0x14,0xd1,0xc8 };
    const uint8_t CIPHERTEXT[] = { 0x53,0xbb,0xc0,0x30,0x73,0xed,0x94,0x66,0x56,0x94,0x7e,0xba,0x10,0xe9,0x4b,0xb7 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-86", "[CBC][MCT][256][ENCRYPT][n86]") {
    const uint8_t KEY[] = { 0xd8,0x5e,0x43,0x25,0x31,0xdd,0xe5,0xe2,0xcf,0x85,0x8b,0x70,0x6a,0x96,0xbd,0x9f,0x84,0x84,0xd6,0x3b,0x19,0x15,0xe8,0x69,0xd8,0xfc,0x9d,0xdb,0x61,0x29,0x64,0xab };
    const uint8_t IV[] = { 0x53,0xbb,0xc0,0x30,0x73,0xed,0x94,0x66,0x56,0x94,0x7e,0xba,0x10,0xe9,0x4b,0xb7 };
    const uint8_t PLAINTEXT[] = { 0x35,0xea,0x6c,0xac,0x1b,0x12,0x90,0x08,0x80,0x3e,0x40,0x26,0x05,0x2a,0x14,0x7b };
    const uint8_t CIPHERTEXT[] = { 0x17,0x25,0x0b,0xd4,0x69,0x6c,0xba,0x64,0xb1,0x77,0x17,0x66,0xae,0x31,0xeb,0xa0 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-87", "[CBC][MCT][256][ENCRYPT][n87]") {
    const uint8_t KEY[] = { 0x64,0x72,0x66,0x12,0xbf,0xaa,0xd1,0x09,0xeb,0x15,0x33,0x9e,0xf3,0xb2,0x59,0x36,0x93,0xa1,0xdd,0xef,0x70,0x79,0x52,0x0d,0x69,0x8b,0x8a,0xbd,0xcf,0x18,0x8f,0x0b };
    const uint8_t IV[] = { 0x17,0x25,0x0b,0xd4,0x69,0x6c,0xba,0x64,0xb1,0x77,0x17,0x66,0xae,0x31,0xeb,0xa0 };
    const uint8_t PLAINTEXT[] = { 0xbc,0x2c,0x25,0x37,0x8e,0x77,0x34,0xeb,0x24,0x90,0xb8,0xee,0x99,0x24,0xe4,0xa9 };
    const uint8_t CIPHERTEXT[] = { 0x76,0x47,0xb2,0x1e,0x0e,0x50,0x65,0x45,0x63,0xef,0x5b,0xb1,0xb2,0x1b,0x2e,0xdc };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-88", "[CBC][MCT][256][ENCRYPT][n88]") {
    const uint8_t KEY[] = { 0x9f,0x27,0xc4,0x01,0x5f,0xfe,0xc3,0xce,0xf1,0x28,0xd7,0x4c,0x32,0x65,0xfe,0xac,0xe5,0xe6,0x6f,0xf1,0x7e,0x29,0x37,0x48,0x0a,0x64,0xd1,0x0c,0x7d,0x03,0xa1,0xd7 };
    const uint8_t IV[] = { 0x76,0x47,0xb2,0x1e,0x0e,0x50,0x65,0x45,0x63,0xef,0x5b,0xb1,0xb2,0x1b,0x2e,0xdc };
    const uint8_t PLAINTEXT[] = { 0xfb,0x55,0xa2,0x13,0xe0,0x54,0x12,0xc7,0x1a,0x3d,0xe4,0xd2,0xc1,0xd7,0xa7,0x9a };
    const uint8_t CIPHERTEXT[] = { 0xd6,0x52,0x8f,0x6b,0x41,0xaa,0x10,0x7e,0x92,0xaf,0xa3,0x66,0xcb,0x62,0x51,0x0e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-89", "[CBC][MCT][256][ENCRYPT][n89]") {
    const uint8_t KEY[] = { 0x49,0x53,0x2a,0xc2,0xa3,0x4c,0x33,0x24,0x0e,0x75,0xcd,0xcc,0x1c,0x94,0xf3,0x62,0x33,0xb4,0xe0,0x9a,0x3f,0x83,0x27,0x36,0x98,0xcb,0x72,0x6a,0xb6,0x61,0xf0,0xd9 };
    const uint8_t IV[] = { 0xd6,0x52,0x8f,0x6b,0x41,0xaa,0x10,0x7e,0x92,0xaf,0xa3,0x66,0xcb,0x62,0x51,0x0e };
    const uint8_t PLAINTEXT[] = { 0xd6,0x74,0xee,0xc3,0xfc,0xb2,0xf0,0xea,0xff,0x5d,0x1a,0x80,0x2e,0xf1,0x0d,0xce };
    const uint8_t CIPHERTEXT[] = { 0x4d,0x2d,0x62,0xb5,0x81,0xdb,0x5e,0x90,0x09,0xf8,0x28,0xf7,0xfd,0xc8,0x64,0xa8 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-90", "[CBC][MCT][256][ENCRYPT][n90]") {
    const uint8_t KEY[] = { 0x8c,0xe0,0x19,0xc0,0x7d,0x9a,0xa2,0x13,0xaa,0xa0,0x8e,0xdd,0xde,0xc3,0xe8,0x66,0x7e,0x99,0x82,0x2f,0xbe,0x58,0x79,0xa6,0x91,0x33,0x5a,0x9d,0x4b,0xa9,0x94,0x71 };
    const uint8_t IV[] = { 0x4d,0x2d,0x62,0xb5,0x81,0xdb,0x5e,0x90,0x09,0xf8,0x28,0xf7,0xfd,0xc8,0x64,0xa8 };
    const uint8_t PLAINTEXT[] = { 0xc5,0xb3,0x33,0x02,0xde,0xd6,0x91,0x37,0xa4,0xd5,0x43,0x11,0xc2,0x57,0x1b,0x04 };
    const uint8_t CIPHERTEXT[] = { 0x0f,0x48,0xeb,0x7c,0xdd,0x36,0xb9,0xc5,0x25,0x63,0x51,0x5f,0xaf,0xb4,0xb9,0x54 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-91", "[CBC][MCT][256][ENCRYPT][n91]") {
    const uint8_t KEY[] = { 0xd0,0xd7,0x6a,0xa6,0x89,0xb3,0x30,0x5e,0x80,0xfe,0x9b,0xb5,0xd6,0xee,0x46,0x08,0x71,0xd1,0x69,0x53,0x63,0x6e,0xc0,0x63,0xb4,0x50,0x0b,0xc2,0xe4,0x1d,0x2d,0x25 };
    const uint8_t IV[] = { 0x0f,0x48,0xeb,0x7c,0xdd,0x36,0xb9,0xc5,0x25,0x63,0x51,0x5f,0xaf,0xb4,0xb9,0x54 };
    const uint8_t PLAINTEXT[] = { 0x5c,0x37,0x73,0x66,0xf4,0x29,0x92,0x4d,0x2a,0x5e,0x15,0x68,0x08,0x2d,0xae,0x6e };
    const uint8_t CIPHERTEXT[] = { 0x19,0xeb,0x5c,0x03,0x64,0x48,0xad,0x82,0xd2,0x8b,0x77,0xb0,0x11,0x26,0xf0,0x16 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-92", "[CBC][MCT][256][ENCRYPT][n92]") {
    const uint8_t KEY[] = { 0x5f,0x40,0x2b,0xc6,0x75,0xa9,0x26,0xc2,0x19,0x72,0xff,0xe1,0xe3,0xe7,0xab,0x07,0x68,0x3a,0x35,0x50,0x07,0x26,0x6d,0xe1,0x66,0xdb,0x7c,0x72,0xf5,0x3b,0xdd,0x33 };
    const uint8_t IV[] = { 0x19,0xeb,0x5c,0x03,0x64,0x48,0xad,0x82,0xd2,0x8b,0x77,0xb0,0x11,0x26,0xf0,0x16 };
    const uint8_t PLAINTEXT[] = { 0x8f,0x97,0x41,0x60,0xfc,0x1a,0x16,0x9c,0x99,0x8c,0x64,0x54,0x35,0x09,0xed,0x0f };
    const uint8_t CIPHERTEXT[] = { 0xa2,0x25,0xf1,0xd0,0x57,0x95,0xca,0x14,0x43,0x04,0x8c,0x8c,0xec,0xa5,0x22,0x12 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-93", "[CBC][MCT][256][ENCRYPT][n93]") {
    const uint8_t KEY[] = { 0x7a,0x5d,0xdc,0xb9,0xe5,0x9e,0x08,0xdf,0xd6,0x25,0x88,0xdc,0x5f,0x4f,0xd0,0xea,0xca,0x1f,0xc4,0x80,0x50,0xb3,0xa7,0xf5,0x25,0xdf,0xf0,0xfe,0x19,0x9e,0xff,0x21 };
    const uint8_t IV[] = { 0xa2,0x25,0xf1,0xd0,0x57,0x95,0xca,0x14,0x43,0x04,0x8c,0x8c,0xec,0xa5,0x22,0x12 };
    const uint8_t PLAINTEXT[] = { 0x25,0x1d,0xf7,0x7f,0x90,0x37,0x2e,0x1d,0xcf,0x57,0x77,0x3d,0xbc,0xa8,0x7b,0xed };
    const uint8_t CIPHERTEXT[] = { 0x17,0xe2,0x5b,0x6f,0x7d,0xcf,0x43,0x63,0x81,0x78,0xb7,0xd1,0x25,0x75,0xa5,0x8c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-94", "[CBC][MCT][256][ENCRYPT][n94]") {
    const uint8_t KEY[] = { 0xf7,0x93,0xde,0x9f,0x75,0xf4,0xc2,0x66,0x45,0xe3,0xcb,0x3d,0xb1,0xfa,0xcd,0x5c,0xdd,0xfd,0x9f,0xef,0x2d,0x7c,0xe4,0x96,0xa4,0xa7,0x47,0x2f,0x3c,0xeb,0x5a,0xad };
    const uint8_t IV[] = { 0x17,0xe2,0x5b,0x6f,0x7d,0xcf,0x43,0x63,0x81,0x78,0xb7,0xd1,0x25,0x75,0xa5,0x8c };
    const uint8_t PLAINTEXT[] = { 0x8d,0xce,0x02,0x26,0x90,0x6a,0xca,0xb9,0x93,0xc6,0x43,0xe1,0xee,0xb5,0x1d,0xb6 };
    const uint8_t CIPHERTEXT[] = { 0xb1,0xc2,0x13,0x3d,0x5e,0x31,0xc9,0xbe,0xcf,0x07,0xe0,0x6b,0x58,0xce,0x0e,0x50 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-95", "[CBC][MCT][256][ENCRYPT][n95]") {
    const uint8_t KEY[] = { 0x19,0x13,0x59,0x10,0x69,0x81,0xb4,0xe8,0xc4,0x3b,0x25,0x5a,0xf7,0x0b,0x67,0xf8,0x6c,0x3f,0x8c,0xd2,0x73,0x4d,0x2d,0x28,0x6b,0xa0,0xa7,0x44,0x64,0x25,0x54,0xfd };
    const uint8_t IV[] = { 0xb1,0xc2,0x13,0x3d,0x5e,0x31,0xc9,0xbe,0xcf,0x07,0xe0,0x6b,0x58,0xce,0x0e,0x50 };
    const uint8_t PLAINTEXT[] = { 0xee,0x80,0x87,0x8f,0x1c,0x75,0x76,0x8e,0x81,0xd8,0xee,0x67,0x46,0xf1,0xaa,0xa4 };
    const uint8_t CIPHERTEXT[] = { 0x50,0xc9,0xec,0xde,0xa3,0x7f,0x89,0x0e,0x60,0x3b,0xbe,0x25,0xbc,0x95,0x54,0x5e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-96", "[CBC][MCT][256][ENCRYPT][n96]") {
    const uint8_t KEY[] = { 0xc9,0x46,0x60,0x36,0xac,0xc5,0xe4,0x96,0xca,0x5f,0xbe,0x04,0xd4,0xf9,0x6f,0xb7,0x3c,0xf6,0x60,0x0c,0xd0,0x32,0xa4,0x26,0x0b,0x9b,0x19,0x61,0xd8,0xb0,0x00,0xa3 };
    const uint8_t IV[] = { 0x50,0xc9,0xec,0xde,0xa3,0x7f,0x89,0x0e,0x60,0x3b,0xbe,0x25,0xbc,0x95,0x54,0x5e };
    const uint8_t PLAINTEXT[] = { 0xd0,0x55,0x39,0x26,0xc5,0x44,0x50,0x7e,0x0e,0x64,0x9b,0x5e,0x23,0xf2,0x08,0x4f };
    const uint8_t CIPHERTEXT[] = { 0xfe,0xdc,0xd4,0x22,0x82,0xae,0x66,0xb4,0xe4,0x43,0x59,0x4c,0x64,0x90,0x7d,0x69 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-97", "[CBC][MCT][256][ENCRYPT][n97]") {
    const uint8_t KEY[] = { 0xe7,0x6a,0x83,0x55,0x88,0x80,0xe5,0x71,0x65,0xd3,0x81,0x90,0x3c,0xb3,0x0b,0x0d,0xc2,0x2a,0xb4,0x2e,0x52,0x9c,0xc2,0x92,0xef,0xd8,0x40,0x2d,0xbc,0x20,0x7d,0xca };
    const uint8_t IV[] = { 0xfe,0xdc,0xd4,0x22,0x82,0xae,0x66,0xb4,0xe4,0x43,0x59,0x4c,0x64,0x90,0x7d,0x69 };
    const uint8_t PLAINTEXT[] = { 0x2e,0x2c,0xe3,0x63,0x24,0x45,0x01,0xe7,0xaf,0x8c,0x3f,0x94,0xe8,0x4a,0x64,0xba };
    const uint8_t CIPHERTEXT[] = { 0xd2,0xd9,0xb9,0xd8,0xaf,0x37,0x06,0x4d,0x64,0x4a,0xa4,0x68,0x32,0x77,0xde,0x68 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-98", "[CBC][MCT][256][ENCRYPT][n98]") {
    const uint8_t KEY[] = { 0x38,0x45,0x18,0xa4,0x80,0xcf,0x10,0xf3,0xdb,0x02,0xc9,0x6e,0x15,0x01,0xce,0x33,0x10,0xf3,0x0d,0xf6,0xfd,0xab,0xc4,0xdf,0x8b,0x92,0xe4,0x45,0x8e,0x57,0xa3,0xa2 };
    const uint8_t IV[] = { 0xd2,0xd9,0xb9,0xd8,0xaf,0x37,0x06,0x4d,0x64,0x4a,0xa4,0x68,0x32,0x77,0xde,0x68 };
    const uint8_t PLAINTEXT[] = { 0xdf,0x2f,0x9b,0xf1,0x08,0x4f,0xf5,0x82,0xbe,0xd1,0x48,0xfe,0x29,0xb2,0xc5,0x3e };
    const uint8_t CIPHERTEXT[] = { 0xfb,0x59,0xe7,0xac,0xba,0x7a,0x0f,0x2c,0x15,0x7e,0x0e,0xbe,0xa5,0x29,0xe9,0x10 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-ENCRYPT-99", "[CBC][MCT][256][ENCRYPT][n99]") {
    const uint8_t KEY[] = { 0x22,0xdd,0x9c,0xdf,0xb4,0xc6,0xf2,0x7a,0xa5,0x26,0x7d,0xa6,0x0d,0x2f,0x29,0x77,0xeb,0xaa,0xea,0x5a,0x47,0xd1,0xcb,0xf3,0x9e,0xec,0xea,0xfb,0x2b,0x7e,0x4a,0xb2 };
    const uint8_t IV[] = { 0xfb,0x59,0xe7,0xac,0xba,0x7a,0x0f,0x2c,0x15,0x7e,0x0e,0xbe,0xa5,0x29,0xe9,0x10 };
    const uint8_t PLAINTEXT[] = { 0x1a,0x98,0x84,0x7b,0x34,0x09,0xe2,0x89,0x7e,0x24,0xb4,0xc8,0x18,0x2e,0xe7,0x44 };
    const uint8_t CIPHERTEXT[] = { 0xba,0xde,0x16,0x67,0xb4,0x2f,0x53,0x7f,0x0c,0xb3,0xf5,0x57,0x3a,0x94,0x9a,0xaa };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-0", "[CBC][MCT][256][DECRYPT][n0]") {
    const uint8_t KEY[] = { 0x31,0x39,0x7a,0xd8,0xcc,0x79,0xc5,0x19,0xe0,0xf4,0x6e,0x0f,0x70,0x30,0x35,0x87,0xe3,0x89,0x58,0xd7,0x07,0x23,0xb7,0x71,0x55,0x23,0x36,0xb7,0x77,0x1f,0x63,0x11 };
    const uint8_t IV[] = { 0x41,0x39,0xcb,0x54,0xee,0xac,0x3f,0xcf,0x36,0xed,0x72,0x94,0x11,0x22,0xc4,0x0f };
    const uint8_t PLAINTEXT[] = { 0xf0,0xe5,0x0e,0x03,0x6b,0xaf,0x80,0xce,0xf5,0x66,0xd3,0xf9,0xea,0xa2,0xa9,0xa7 };
    const uint8_t CIPHERTEXT[] = { 0x27,0xa1,0xd5,0xc1,0x0f,0xe4,0x5b,0x80,0x1d,0x15,0xf5,0x6e,0x65,0x4a,0x70,0xf0 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-1", "[CBC][MCT][256][DECRYPT][n1]") {
    const uint8_t KEY[] = { 0x26,0x11,0xf4,0x00,0x3f,0xbc,0x38,0xb3,0xcd,0xc0,0x23,0xf6,0x30,0x65,0xb0,0x70,0x13,0x6c,0x56,0xd4,0x6c,0x8c,0x37,0xbf,0xa0,0x45,0xe5,0x4e,0x9d,0xbd,0xca,0xb6 };
    const uint8_t IV[] = { 0xf0,0xe5,0x0e,0x03,0x6b,0xaf,0x80,0xce,0xf5,0x66,0xd3,0xf9,0xea,0xa2,0xa9,0xa7 };
    const uint8_t PLAINTEXT[] = { 0x58,0x3a,0xe9,0xe3,0xd3,0x7b,0x2b,0xb9,0x11,0x19,0x10,0x64,0x72,0x48,0x47,0x30 };
    const uint8_t CIPHERTEXT[] = { 0x17,0x28,0x8e,0xd8,0xf3,0xc5,0xfd,0xaa,0x2d,0x34,0x4d,0xf9,0x40,0x55,0x85,0xf7 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-2", "[CBC][MCT][256][DECRYPT][n2]") {
    const uint8_t KEY[] = { 0xd8,0x55,0xe0,0xf0,0x13,0x07,0x8e,0xf1,0x89,0x8f,0x1e,0x94,0xa0,0xaf,0x46,0x5a,0x4b,0x56,0xbf,0x37,0xbf,0xf7,0x1c,0x06,0xb1,0x5c,0xf5,0x2a,0xef,0xf5,0x8d,0x86 };
    const uint8_t IV[] = { 0x58,0x3a,0xe9,0xe3,0xd3,0x7b,0x2b,0xb9,0x11,0x19,0x10,0x64,0x72,0x48,0x47,0x30 };
    const uint8_t PLAINTEXT[] = { 0x41,0x0c,0x0f,0x44,0x94,0xfa,0xf1,0xa0,0x8a,0x7c,0x75,0x13,0x79,0x7f,0xf2,0xdf };
    const uint8_t CIPHERTEXT[] = { 0xfe,0x44,0x14,0xf0,0x2c,0xbb,0xb6,0x42,0x44,0x4f,0x3d,0x62,0x90,0xca,0xf6,0x2a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-3", "[CBC][MCT][256][DECRYPT][n3]") {
    const uint8_t KEY[] = { 0x32,0xf9,0xd6,0x5e,0x83,0xe4,0x1b,0xf0,0xa2,0xb6,0xb5,0x5f,0xdf,0x86,0xe2,0x09,0x0a,0x5a,0xb0,0x73,0x2b,0x0d,0xed,0xa6,0x3b,0x20,0x80,0x39,0x96,0x8a,0x7f,0x59 };
    const uint8_t IV[] = { 0x41,0x0c,0x0f,0x44,0x94,0xfa,0xf1,0xa0,0x8a,0x7c,0x75,0x13,0x79,0x7f,0xf2,0xdf };
    const uint8_t PLAINTEXT[] = { 0x6e,0x0f,0x3f,0xca,0x98,0xbe,0x8c,0x1c,0xdf,0x9e,0x93,0xb8,0x2d,0xd0,0x06,0x91 };
    const uint8_t CIPHERTEXT[] = { 0xea,0xac,0x36,0xae,0x90,0xe3,0x95,0x01,0x2b,0x39,0xab,0xcb,0x7f,0x29,0xa4,0x53 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-4", "[CBC][MCT][256][DECRYPT][n4]") {
    const uint8_t KEY[] = { 0xfc,0x20,0x44,0x48,0x1d,0x29,0x5a,0x6a,0xc3,0x06,0x67,0xb5,0x46,0xfa,0xbb,0xb5,0x64,0x55,0x8f,0xb9,0xb3,0xb3,0x61,0xba,0xe4,0xbe,0x13,0x81,0xbb,0x5a,0x79,0xc8 };
    const uint8_t IV[] = { 0x6e,0x0f,0x3f,0xca,0x98,0xbe,0x8c,0x1c,0xdf,0x9e,0x93,0xb8,0x2d,0xd0,0x06,0x91 };
    const uint8_t PLAINTEXT[] = { 0xf6,0xc1,0x43,0xe8,0x52,0x39,0x62,0x45,0xa5,0x27,0xde,0x62,0x69,0x10,0x1f,0xfe };
    const uint8_t CIPHERTEXT[] = { 0xce,0xd9,0x92,0x16,0x9e,0xcd,0x41,0x9a,0x61,0xb0,0xd2,0xea,0x99,0x7c,0x59,0xbc };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-5", "[CBC][MCT][256][DECRYPT][n5]") {
    const uint8_t KEY[] = { 0x8e,0xdb,0x6e,0x0d,0xcb,0xe9,0x14,0xc1,0xfc,0x2b,0x49,0x15,0xa2,0xee,0x0a,0xbc,0x92,0x94,0xcc,0x51,0xe1,0x8a,0x03,0xff,0x41,0x99,0xcd,0xe3,0xd2,0x4a,0x66,0x36 };
    const uint8_t IV[] = { 0xf6,0xc1,0x43,0xe8,0x52,0x39,0x62,0x45,0xa5,0x27,0xde,0x62,0x69,0x10,0x1f,0xfe };
    const uint8_t PLAINTEXT[] = { 0x40,0xd1,0x6c,0x29,0x0e,0x5e,0x8d,0x26,0xf3,0xd9,0x8e,0xcf,0x77,0xfc,0xe4,0x4c };
    const uint8_t CIPHERTEXT[] = { 0x72,0xfb,0x2a,0x45,0xd6,0xc0,0x4e,0xab,0x3f,0x2d,0x2e,0xa0,0xe4,0x14,0xb1,0x09 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-6", "[CBC][MCT][256][DECRYPT][n6]") {
    const uint8_t KEY[] = { 0x86,0xc7,0x35,0x4b,0x3c,0x0d,0x75,0x59,0xde,0x67,0xe1,0x9c,0x48,0xab,0xd2,0x20,0xd2,0x45,0xa0,0x78,0xef,0xd4,0x8e,0xd9,0xb2,0x40,0x43,0x2c,0xa5,0xb6,0x82,0x7a };
    const uint8_t IV[] = { 0x40,0xd1,0x6c,0x29,0x0e,0x5e,0x8d,0x26,0xf3,0xd9,0x8e,0xcf,0x77,0xfc,0xe4,0x4c };
    const uint8_t PLAINTEXT[] = { 0x56,0x34,0x56,0x57,0x13,0xf3,0x10,0x44,0xcb,0xf2,0x32,0x92,0xda,0x69,0xea,0x46 };
    const uint8_t CIPHERTEXT[] = { 0x08,0x1c,0x5b,0x46,0xf7,0xe4,0x61,0x98,0x22,0x4c,0xa8,0x89,0xea,0x45,0xd8,0x9c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-7", "[CBC][MCT][256][DECRYPT][n7]") {
    const uint8_t KEY[] = { 0x46,0x39,0xd3,0xba,0x97,0x2b,0xa7,0x5e,0xde,0xfc,0x0f,0x8a,0x2e,0x38,0xbf,0xc0,0x84,0x71,0xf6,0x2f,0xfc,0x27,0x9e,0x9d,0x79,0xb2,0x71,0xbe,0x7f,0xdf,0x68,0x3c };
    const uint8_t IV[] = { 0x56,0x34,0x56,0x57,0x13,0xf3,0x10,0x44,0xcb,0xf2,0x32,0x92,0xda,0x69,0xea,0x46 };
    const uint8_t PLAINTEXT[] = { 0xf9,0xf0,0xfc,0x77,0xd6,0x97,0x5b,0x87,0x2f,0xc3,0x24,0xa9,0x3d,0x48,0x85,0x05 };
    const uint8_t CIPHERTEXT[] = { 0xc0,0xfe,0xe6,0xf1,0xab,0x26,0xd2,0x07,0x00,0x9b,0xee,0x16,0x66,0x93,0x6d,0xe0 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-8", "[CBC][MCT][256][DECRYPT][n8]") {
    const uint8_t KEY[] = { 0xe1,0xed,0xfc,0xe1,0x31,0x7a,0xba,0x77,0x74,0x2e,0x60,0x70,0x10,0xb4,0x46,0x8b,0x7d,0x81,0x0a,0x58,0x2a,0xb0,0xc5,0x1a,0x56,0x71,0x55,0x17,0x42,0x97,0xed,0x39 };
    const uint8_t IV[] = { 0xf9,0xf0,0xfc,0x77,0xd6,0x97,0x5b,0x87,0x2f,0xc3,0x24,0xa9,0x3d,0x48,0x85,0x05 };
    const uint8_t PLAINTEXT[] = { 0xc9,0x42,0x63,0xa7,0x67,0x4d,0xc9,0xb1,0x7d,0x16,0xcf,0x02,0x34,0xd0,0x57,0xb9 };
    const uint8_t CIPHERTEXT[] = { 0xa7,0xd4,0x2f,0x5b,0xa6,0x51,0x1d,0x29,0xaa,0xd2,0x6f,0xfa,0x3e,0x8c,0xf9,0x4b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-9", "[CBC][MCT][256][DECRYPT][n9]") {
    const uint8_t KEY[] = { 0x97,0xf2,0xa8,0x53,0x55,0x53,0x66,0x87,0xf3,0xd0,0xfd,0x64,0xbb,0xe0,0xe4,0x5f,0xb4,0xc3,0x69,0xff,0x4d,0xfd,0x0c,0xab,0x2b,0x67,0x9a,0x15,0x76,0x47,0xba,0x80 };
    const uint8_t IV[] = { 0xc9,0x42,0x63,0xa7,0x67,0x4d,0xc9,0xb1,0x7d,0x16,0xcf,0x02,0x34,0xd0,0x57,0xb9 };
    const uint8_t PLAINTEXT[] = { 0xd9,0x6b,0xf3,0xb7,0x85,0x30,0x30,0x2b,0xd9,0x40,0x6d,0x75,0x4d,0xbc,0xd4,0x72 };
    const uint8_t CIPHERTEXT[] = { 0x76,0x1f,0x54,0xb2,0x64,0x29,0xdc,0xf0,0x87,0xfe,0x9d,0x14,0xab,0x54,0xa2,0xd4 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-10", "[CBC][MCT][256][DECRYPT][n10]") {
    const uint8_t KEY[] = { 0x61,0x26,0x7e,0xe1,0xd3,0x24,0x7c,0xd8,0xa0,0xd2,0x80,0xa8,0xf0,0xdd,0xdb,0xae,0x6d,0xa8,0x9a,0x48,0xc8,0xcd,0x3c,0x80,0xf2,0x27,0xf7,0x60,0x3b,0xfb,0x6e,0xf2 };
    const uint8_t IV[] = { 0xd9,0x6b,0xf3,0xb7,0x85,0x30,0x30,0x2b,0xd9,0x40,0x6d,0x75,0x4d,0xbc,0xd4,0x72 };
    const uint8_t PLAINTEXT[] = { 0xd9,0x51,0x2a,0xb4,0xbe,0x52,0x0a,0xf4,0x04,0x49,0x15,0xfa,0x47,0x71,0x63,0xc0 };
    const uint8_t CIPHERTEXT[] = { 0xf6,0xd4,0xd6,0xb2,0x86,0x77,0x1a,0x5f,0x53,0x02,0x7d,0xcc,0x4b,0x3d,0x3f,0xf1 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-11", "[CBC][MCT][256][DECRYPT][n11]") {
    const uint8_t KEY[] = { 0x35,0xda,0x2d,0xef,0x17,0x67,0x0a,0x15,0xe6,0x84,0x13,0x5d,0x92,0x4e,0x4c,0xf3,0xb4,0xf9,0xb0,0xfc,0x76,0x9f,0x36,0x74,0xf6,0x6e,0xe2,0x9a,0x7c,0x8a,0x0d,0x32 };
    const uint8_t IV[] = { 0xd9,0x51,0x2a,0xb4,0xbe,0x52,0x0a,0xf4,0x04,0x49,0x15,0xfa,0x47,0x71,0x63,0xc0 };
    const uint8_t PLAINTEXT[] = { 0xb2,0x0d,0x54,0xf7,0x3a,0x8e,0x31,0x31,0x08,0x15,0xc3,0x01,0xc8,0xe7,0x0b,0xea };
    const uint8_t CIPHERTEXT[] = { 0x54,0xfc,0x53,0x0e,0xc4,0x43,0x76,0xcd,0x46,0x56,0x93,0xf5,0x62,0x93,0x97,0x5d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-12", "[CBC][MCT][256][DECRYPT][n12]") {
    const uint8_t KEY[] = { 0x13,0xf0,0xdf,0x30,0xa5,0x2b,0x9b,0xe2,0x70,0xae,0x91,0x3e,0x0a,0x2a,0x3f,0x6b,0x06,0xf4,0xe4,0x0b,0x4c,0x11,0x07,0x45,0xfe,0x7b,0x21,0x9b,0xb4,0x6d,0x06,0xd8 };
    const uint8_t IV[] = { 0xb2,0x0d,0x54,0xf7,0x3a,0x8e,0x31,0x31,0x08,0x15,0xc3,0x01,0xc8,0xe7,0x0b,0xea };
    const uint8_t PLAINTEXT[] = { 0xfd,0xfc,0x75,0xf7,0x4f,0x57,0x1b,0x2c,0xbe,0x2b,0x3b,0x4e,0xa1,0x08,0xd5,0xb1 };
    const uint8_t CIPHERTEXT[] = { 0x26,0x2a,0xf2,0xdf,0xb2,0x4c,0x91,0xf7,0x96,0x2a,0x82,0x63,0x98,0x64,0x73,0x98 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-13", "[CBC][MCT][256][DECRYPT][n13]") {
    const uint8_t KEY[] = { 0x4b,0x57,0x99,0x44,0xa1,0x8b,0x0d,0x04,0xe9,0x1a,0xb6,0x1a,0x0f,0x32,0x8f,0xcf,0xfb,0x08,0x91,0xfc,0x03,0x46,0x1c,0x69,0x40,0x50,0x1a,0xd5,0x15,0x65,0xd3,0x69 };
    const uint8_t IV[] = { 0xfd,0xfc,0x75,0xf7,0x4f,0x57,0x1b,0x2c,0xbe,0x2b,0x3b,0x4e,0xa1,0x08,0xd5,0xb1 };
    const uint8_t PLAINTEXT[] = { 0xac,0x04,0x85,0xcc,0x95,0xcb,0x49,0xbc,0xdf,0xbe,0xd6,0xe4,0x2e,0xba,0xa4,0x93 };
    const uint8_t CIPHERTEXT[] = { 0x58,0xa7,0x46,0x74,0x04,0xa0,0x96,0xe6,0x99,0xb4,0x27,0x24,0x05,0x18,0xb0,0xa4 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-14", "[CBC][MCT][256][DECRYPT][n14]") {
    const uint8_t KEY[] = { 0xf7,0x9e,0x84,0xb6,0x54,0xf3,0xcd,0xf1,0xeb,0xee,0x1d,0x9d,0xbb,0x16,0x1c,0xff,0x57,0x0c,0x14,0x30,0x96,0x8d,0x55,0xd5,0x9f,0xee,0xcc,0x31,0x3b,0xdf,0x77,0xfa };
    const uint8_t IV[] = { 0xac,0x04,0x85,0xcc,0x95,0xcb,0x49,0xbc,0xdf,0xbe,0xd6,0xe4,0x2e,0xba,0xa4,0x93 };
    const uint8_t PLAINTEXT[] = { 0xf5,0xf8,0x94,0x28,0x57,0x34,0x36,0xca,0x5d,0x57,0x3d,0xbd,0xe7,0xd5,0x80,0x09 };
    const uint8_t CIPHERTEXT[] = { 0xbc,0xc9,0x1d,0xf2,0xf5,0x78,0xc0,0xf5,0x02,0xf4,0xab,0x87,0xb4,0x24,0x93,0x30 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-15", "[CBC][MCT][256][DECRYPT][n15]") {
    const uint8_t KEY[] = { 0x36,0x1e,0xb3,0xf4,0xe8,0x9e,0x73,0x2a,0xe2,0x76,0x54,0x7a,0x8b,0x01,0xea,0xbf,0xa2,0xf4,0x80,0x18,0xc1,0xb9,0x63,0x1f,0xc2,0xb9,0xf1,0x8c,0xdc,0x0a,0xf7,0xf3 };
    const uint8_t IV[] = { 0xf5,0xf8,0x94,0x28,0x57,0x34,0x36,0xca,0x5d,0x57,0x3d,0xbd,0xe7,0xd5,0x80,0x09 };
    const uint8_t PLAINTEXT[] = { 0xcc,0xea,0x31,0x3d,0x77,0x83,0xcf,0x7a,0x71,0x3f,0xb1,0x8d,0x26,0xaf,0xe5,0xbb };
    const uint8_t CIPHERTEXT[] = { 0xc1,0x80,0x37,0x42,0xbc,0x6d,0xbe,0xdb,0x09,0x98,0x49,0xe7,0x30,0x17,0xf6,0x40 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-16", "[CBC][MCT][256][DECRYPT][n16]") {
    const uint8_t KEY[] = { 0xd9,0x06,0x88,0x4c,0x23,0xb6,0x56,0x98,0x62,0xf2,0x88,0x55,0x57,0xb4,0x3b,0xfc,0x6e,0x1e,0xb1,0x25,0xb6,0x3a,0xac,0x65,0xb3,0x86,0x40,0x01,0xfa,0xa5,0x12,0x48 };
    const uint8_t IV[] = { 0xcc,0xea,0x31,0x3d,0x77,0x83,0xcf,0x7a,0x71,0x3f,0xb1,0x8d,0x26,0xaf,0xe5,0xbb };
    const uint8_t PLAINTEXT[] = { 0x4f,0x80,0x81,0xbe,0x33,0x7a,0xbf,0xc3,0x69,0x89,0x18,0xf5,0x6f,0x55,0xb2,0x9e };
    const uint8_t CIPHERTEXT[] = { 0xef,0x18,0x3b,0xb8,0xcb,0x28,0x25,0xb2,0x80,0x84,0xdc,0x2f,0xdc,0xb5,0xd1,0x43 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-17", "[CBC][MCT][256][DECRYPT][n17]") {
    const uint8_t KEY[] = { 0xbe,0x50,0xcd,0x86,0xb8,0xae,0xec,0x2b,0xb2,0x5a,0xa4,0x77,0x84,0x4e,0x75,0xf0,0x21,0x9e,0x30,0x9b,0x85,0x40,0x13,0xa6,0xda,0x0f,0x58,0xf4,0x95,0xf0,0xa0,0xd6 };
    const uint8_t IV[] = { 0x4f,0x80,0x81,0xbe,0x33,0x7a,0xbf,0xc3,0x69,0x89,0x18,0xf5,0x6f,0x55,0xb2,0x9e };
    const uint8_t PLAINTEXT[] = { 0x6f,0x11,0x57,0xb0,0x10,0xa9,0x7f,0xfa,0x18,0x96,0xd1,0x08,0x87,0x83,0x0b,0x0f };
    const uint8_t CIPHERTEXT[] = { 0x67,0x56,0x45,0xca,0x9b,0x18,0xba,0xb3,0xd0,0xa8,0x2c,0x22,0xd3,0xfa,0x4e,0x0c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-18", "[CBC][MCT][256][DECRYPT][n18]") {
    const uint8_t KEY[] = { 0x6c,0x3a,0x30,0x8a,0x4b,0x71,0xd1,0x92,0x2f,0xdf,0x8c,0x98,0x74,0xf9,0x51,0x4f,0x4e,0x8f,0x67,0x2b,0x95,0xe9,0x6c,0x5c,0xc2,0x99,0x89,0xfc,0x12,0x73,0xab,0xd9 };
    const uint8_t IV[] = { 0x6f,0x11,0x57,0xb0,0x10,0xa9,0x7f,0xfa,0x18,0x96,0xd1,0x08,0x87,0x83,0x0b,0x0f };
    const uint8_t PLAINTEXT[] = { 0x46,0x93,0x59,0x30,0xf9,0x5d,0x07,0xec,0x84,0x6a,0xad,0x69,0x7a,0x70,0xfc,0xaf };
    const uint8_t CIPHERTEXT[] = { 0xd2,0x6a,0xfd,0x0c,0xf3,0xdf,0x3d,0xb9,0x9d,0x85,0x28,0xef,0xf0,0xb7,0x24,0xbf };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-19", "[CBC][MCT][256][DECRYPT][n19]") {
    const uint8_t KEY[] = { 0x21,0x13,0xb9,0x59,0xce,0xcd,0xf8,0xa3,0xe5,0x19,0x6d,0x73,0x24,0x91,0xef,0xe9,0x08,0x1c,0x3e,0x1b,0x6c,0xb4,0x6b,0xb0,0x46,0xf3,0x24,0x95,0x68,0x03,0x57,0x76 };
    const uint8_t IV[] = { 0x46,0x93,0x59,0x30,0xf9,0x5d,0x07,0xec,0x84,0x6a,0xad,0x69,0x7a,0x70,0xfc,0xaf };
    const uint8_t PLAINTEXT[] = { 0x9b,0x89,0x65,0x36,0xd3,0x79,0x1e,0x15,0xde,0xcc,0xdf,0x7d,0x45,0x65,0xb9,0xcb };
    const uint8_t CIPHERTEXT[] = { 0x4d,0x29,0x89,0xd3,0x85,0xbc,0x29,0x31,0xca,0xc6,0xe1,0xeb,0x50,0x68,0xbe,0xa6 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-20", "[CBC][MCT][256][DECRYPT][n20]") {
    const uint8_t KEY[] = { 0x9f,0x7a,0x6d,0x62,0x08,0x4f,0x46,0x3c,0x42,0xd6,0x52,0xba,0xdf,0x9d,0x34,0x45,0x93,0x95,0x5b,0x2d,0xbf,0xcd,0x75,0xa5,0x98,0x3f,0xfb,0xe8,0x2d,0x66,0xee,0xbd };
    const uint8_t IV[] = { 0x9b,0x89,0x65,0x36,0xd3,0x79,0x1e,0x15,0xde,0xcc,0xdf,0x7d,0x45,0x65,0xb9,0xcb };
    const uint8_t PLAINTEXT[] = { 0xcc,0x5a,0xe9,0xae,0x18,0x9d,0x81,0x8c,0x1d,0x72,0x10,0x39,0x37,0x07,0xa5,0xf8 };
    const uint8_t CIPHERTEXT[] = { 0xbe,0x69,0xd4,0x3b,0xc6,0x82,0xbe,0x9f,0xa7,0xcf,0x3f,0xc9,0xfb,0x0c,0xdb,0xac };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-21", "[CBC][MCT][256][DECRYPT][n21]") {
    const uint8_t KEY[] = { 0x83,0xb8,0xef,0x1c,0x3e,0xf4,0xab,0x60,0x43,0x23,0xe4,0xaa,0x43,0x28,0xdb,0x03,0x5f,0xcf,0xb2,0x83,0xa7,0x50,0xf4,0x29,0x85,0x4d,0xeb,0xd1,0x1a,0x61,0x4b,0x45 };
    const uint8_t IV[] = { 0xcc,0x5a,0xe9,0xae,0x18,0x9d,0x81,0x8c,0x1d,0x72,0x10,0x39,0x37,0x07,0xa5,0xf8 };
    const uint8_t PLAINTEXT[] = { 0x48,0xc6,0x0d,0xb0,0xbb,0x60,0x43,0xef,0xee,0x9d,0xb0,0xfa,0x1d,0x1a,0x17,0x8a };
    const uint8_t CIPHERTEXT[] = { 0x1c,0xc2,0x82,0x7e,0x36,0xbb,0xed,0x5c,0x01,0xf5,0xb6,0x10,0x9c,0xb5,0xef,0x46 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-22", "[CBC][MCT][256][DECRYPT][n22]") {
    const uint8_t KEY[] = { 0x8e,0x1d,0x9e,0x02,0x27,0x69,0x5a,0x92,0x76,0xa3,0x64,0xc5,0x61,0x55,0x9b,0x98,0x17,0x09,0xbf,0x33,0x1c,0x30,0xb7,0xc6,0x6b,0xd0,0x5b,0x2b,0x07,0x7b,0x5c,0xcf };
    const uint8_t IV[] = { 0x48,0xc6,0x0d,0xb0,0xbb,0x60,0x43,0xef,0xee,0x9d,0xb0,0xfa,0x1d,0x1a,0x17,0x8a };
    const uint8_t PLAINTEXT[] = { 0x96,0xa7,0x21,0x42,0x67,0x42,0x6e,0x8c,0x9e,0x58,0x99,0x28,0xff,0xd2,0x8b,0x3a };
    const uint8_t CIPHERTEXT[] = { 0x0d,0xa5,0x71,0x1e,0x19,0x9d,0xf1,0xf2,0x35,0x80,0x80,0x6f,0x22,0x7d,0x40,0x9b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-23", "[CBC][MCT][256][DECRYPT][n23]") {
    const uint8_t KEY[] = { 0x43,0x32,0xc8,0x56,0xef,0xd5,0xbe,0x74,0xc9,0xec,0x20,0x55,0xec,0x05,0xd7,0x7d,0x81,0xae,0x9e,0x71,0x7b,0x72,0xd9,0x4a,0xf5,0x88,0xc2,0x03,0xf8,0xa9,0xd7,0xf5 };
    const uint8_t IV[] = { 0x96,0xa7,0x21,0x42,0x67,0x42,0x6e,0x8c,0x9e,0x58,0x99,0x28,0xff,0xd2,0x8b,0x3a };
    const uint8_t PLAINTEXT[] = { 0xf4,0xfe,0x98,0x6d,0x25,0x58,0x8b,0xa8,0xde,0xa9,0xb4,0x20,0xe0,0x07,0x67,0x1a };
    const uint8_t CIPHERTEXT[] = { 0xcd,0x2f,0x56,0x54,0xc8,0xbc,0xe4,0xe6,0xbf,0x4f,0x44,0x90,0x8d,0x50,0x4c,0xe5 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-24", "[CBC][MCT][256][DECRYPT][n24]") {
    const uint8_t KEY[] = { 0x69,0x0d,0xb6,0x06,0x49,0xce,0xfd,0x41,0xf8,0x2e,0x50,0x46,0xbd,0x90,0xf4,0x6f,0x75,0x50,0x06,0x1c,0x5e,0x2a,0x52,0xe2,0x2b,0x21,0x76,0x23,0x18,0xae,0xb0,0xef };
    const uint8_t IV[] = { 0xf4,0xfe,0x98,0x6d,0x25,0x58,0x8b,0xa8,0xde,0xa9,0xb4,0x20,0xe0,0x07,0x67,0x1a };
    const uint8_t PLAINTEXT[] = { 0xcd,0x1c,0x06,0xec,0xf8,0xc6,0x55,0xca,0xb1,0xd4,0x20,0xc2,0x7e,0xa5,0xa3,0x57 };
    const uint8_t CIPHERTEXT[] = { 0x2a,0x3f,0x7e,0x50,0xa6,0x1b,0x43,0x35,0x31,0xc2,0x70,0x13,0x51,0x95,0x23,0x12 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-25", "[CBC][MCT][256][DECRYPT][n25]") {
    const uint8_t KEY[] = { 0x75,0x62,0x5c,0x4e,0x58,0x38,0x64,0x8e,0x6e,0x9d,0xf1,0x8e,0xc2,0x24,0xc2,0x84,0xb8,0x4c,0x00,0xf0,0xa6,0xec,0x07,0x28,0x9a,0xf5,0x56,0xe1,0x66,0x0b,0x13,0xb8 };
    const uint8_t IV[] = { 0xcd,0x1c,0x06,0xec,0xf8,0xc6,0x55,0xca,0xb1,0xd4,0x20,0xc2,0x7e,0xa5,0xa3,0x57 };
    const uint8_t PLAINTEXT[] = { 0x9f,0x9b,0x99,0x55,0x17,0x63,0x7b,0x8f,0xf1,0x6a,0xb3,0x40,0x20,0xb4,0x25,0xaf };
    const uint8_t CIPHERTEXT[] = { 0x1c,0x6f,0xea,0x48,0x11,0xf6,0x99,0xcf,0x96,0xb3,0xa1,0xc8,0x7f,0xb4,0x36,0xeb };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-26", "[CBC][MCT][256][DECRYPT][n26]") {
    const uint8_t KEY[] = { 0x8e,0xd3,0xb4,0xaf,0x6f,0x9b,0xfe,0x50,0x8f,0x8f,0x07,0xc6,0x28,0x49,0xb1,0x34,0x27,0xd7,0x99,0xa5,0xb1,0x8f,0x7c,0xa7,0x6b,0x9f,0xe5,0xa1,0x46,0xbf,0x36,0x17 };
    const uint8_t IV[] = { 0x9f,0x9b,0x99,0x55,0x17,0x63,0x7b,0x8f,0xf1,0x6a,0xb3,0x40,0x20,0xb4,0x25,0xaf };
    const uint8_t PLAINTEXT[] = { 0x83,0xf0,0xc8,0xbe,0xa3,0x1b,0x0b,0x22,0x5f,0x0e,0x2d,0xe4,0x96,0x6c,0xa1,0x08 };
    const uint8_t CIPHERTEXT[] = { 0xfb,0xb1,0xe8,0xe1,0x37,0xa3,0x9a,0xde,0xe1,0x12,0xf6,0x48,0xea,0x6d,0x73,0xb0 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-27", "[CBC][MCT][256][DECRYPT][n27]") {
    const uint8_t KEY[] = { 0xb8,0xd7,0x13,0x5c,0x2b,0x15,0xf5,0xed,0x51,0xa2,0x38,0xc1,0xf4,0xdc,0x39,0xf6,0xa4,0x27,0x51,0x1b,0x12,0x94,0x77,0x85,0x34,0x91,0xc8,0x45,0xd0,0xd3,0x97,0x1f };
    const uint8_t IV[] = { 0x83,0xf0,0xc8,0xbe,0xa3,0x1b,0x0b,0x22,0x5f,0x0e,0x2d,0xe4,0x96,0x6c,0xa1,0x08 };
    const uint8_t PLAINTEXT[] = { 0xa1,0xc9,0x36,0xce,0x5e,0x64,0x98,0x75,0x58,0xff,0x04,0x79,0xe9,0x65,0x8e,0xfb };
    const uint8_t CIPHERTEXT[] = { 0x36,0x04,0xa7,0xf3,0x44,0x8e,0x0b,0xbd,0xde,0x2d,0x3f,0x07,0xdc,0x95,0x88,0xc2 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-28", "[CBC][MCT][256][DECRYPT][n28]") {
    const uint8_t KEY[] = { 0x2c,0x9e,0x09,0xc9,0xeb,0x1c,0x69,0x34,0x22,0x99,0xe3,0xcf,0x1d,0x6a,0xf4,0xa1,0x05,0xee,0x67,0xd5,0x4c,0xf0,0xef,0xf0,0x6c,0x6e,0xcc,0x3c,0x39,0xb6,0x19,0xe4 };
    const uint8_t IV[] = { 0xa1,0xc9,0x36,0xce,0x5e,0x64,0x98,0x75,0x58,0xff,0x04,0x79,0xe9,0x65,0x8e,0xfb };
    const uint8_t PLAINTEXT[] = { 0x53,0xc3,0x68,0xca,0x6d,0x21,0x8b,0xec,0x27,0xb5,0xc5,0x6f,0x54,0x5d,0x42,0xb1 };
    const uint8_t CIPHERTEXT[] = { 0x94,0x49,0x1a,0x95,0xc0,0x09,0x9c,0xd9,0x73,0x3b,0xdb,0x0e,0xe9,0xb6,0xcd,0x57 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-29", "[CBC][MCT][256][DECRYPT][n29]") {
    const uint8_t KEY[] = { 0x06,0xa6,0xe6,0x3e,0xd5,0xae,0xa2,0xe4,0xfc,0x1b,0x46,0x2f,0x1a,0xbd,0xfe,0x28,0x56,0x2d,0x0f,0x1f,0x21,0xd1,0x64,0x1c,0x4b,0xdb,0x09,0x53,0x6d,0xeb,0x5b,0x55 };
    const uint8_t IV[] = { 0x53,0xc3,0x68,0xca,0x6d,0x21,0x8b,0xec,0x27,0xb5,0xc5,0x6f,0x54,0x5d,0x42,0xb1 };
    const uint8_t PLAINTEXT[] = { 0xc1,0x14,0x57,0x7b,0x6b,0x97,0x73,0xcc,0x07,0xa1,0xfc,0x50,0xf5,0x07,0xb0,0x28 };
    const uint8_t CIPHERTEXT[] = { 0x2a,0x38,0xef,0xf7,0x3e,0xb2,0xcb,0xd0,0xde,0x82,0xa5,0xe0,0x07,0xd7,0x0a,0x89 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-30", "[CBC][MCT][256][DECRYPT][n30]") {
    const uint8_t KEY[] = { 0x28,0x85,0xab,0x95,0x9f,0xa4,0x6a,0x22,0x45,0x37,0x81,0xba,0xee,0x94,0x34,0x06,0x97,0x39,0x58,0x64,0x4a,0x46,0x17,0xd0,0x4c,0x7a,0xf5,0x03,0x98,0xec,0xeb,0x7d };
    const uint8_t IV[] = { 0xc1,0x14,0x57,0x7b,0x6b,0x97,0x73,0xcc,0x07,0xa1,0xfc,0x50,0xf5,0x07,0xb0,0x28 };
    const uint8_t PLAINTEXT[] = { 0xda,0xf0,0x74,0x37,0x4e,0x0f,0xc7,0x37,0x55,0x4f,0xad,0x25,0x4d,0x86,0xab,0xce };
    const uint8_t CIPHERTEXT[] = { 0x2e,0x23,0x4d,0xab,0x4a,0x0a,0xc8,0xc6,0xb9,0x2c,0xc7,0x95,0xf4,0x29,0xca,0x2e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-31", "[CBC][MCT][256][DECRYPT][n31]") {
    const uint8_t KEY[] = { 0x04,0xe5,0x93,0xcb,0x48,0x1c,0x50,0x4c,0x78,0x31,0xd4,0x1c,0x05,0x12,0xb8,0x51,0x4d,0xc9,0x2c,0x53,0x04,0x49,0xd0,0xe7,0x19,0x35,0x58,0x26,0xd5,0x6a,0x40,0xb3 };
    const uint8_t IV[] = { 0xda,0xf0,0x74,0x37,0x4e,0x0f,0xc7,0x37,0x55,0x4f,0xad,0x25,0x4d,0x86,0xab,0xce };
    const uint8_t PLAINTEXT[] = { 0xac,0xfe,0x3a,0x89,0xee,0x8d,0x10,0xe7,0x28,0x66,0xd1,0xd2,0x41,0x4f,0x2b,0x00 };
    const uint8_t CIPHERTEXT[] = { 0x2c,0x60,0x38,0x5e,0xd7,0xb8,0x3a,0x6e,0x3d,0x06,0x55,0xa6,0xeb,0x86,0x8c,0x57 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-32", "[CBC][MCT][256][DECRYPT][n32]") {
    const uint8_t KEY[] = { 0x30,0x95,0x7b,0xf2,0xcd,0x9b,0xb1,0x54,0xcf,0x21,0xe8,0x64,0x78,0xb7,0x8f,0x7f,0xe1,0x37,0x16,0xda,0xea,0xc4,0xc0,0x00,0x31,0x53,0x89,0xf4,0x94,0x25,0x6b,0xb3 };
    const uint8_t IV[] = { 0xac,0xfe,0x3a,0x89,0xee,0x8d,0x10,0xe7,0x28,0x66,0xd1,0xd2,0x41,0x4f,0x2b,0x00 };
    const uint8_t PLAINTEXT[] = { 0x72,0xf5,0x6b,0x75,0x6c,0x45,0xc0,0x4d,0x79,0xa0,0x00,0xb9,0x48,0x16,0xf7,0x9e };
    const uint8_t CIPHERTEXT[] = { 0x34,0x70,0xe8,0x39,0x85,0x87,0xe1,0x18,0xb7,0x10,0x3c,0x78,0x7d,0xa5,0x37,0x2e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-33", "[CBC][MCT][256][DECRYPT][n33]") {
    const uint8_t KEY[] = { 0x32,0x1b,0xe9,0x9c,0x1f,0xaa,0xd3,0xf5,0x70,0xf2,0xfd,0xef,0xf8,0xe6,0xd2,0x03,0x93,0xc2,0x7d,0xaf,0x86,0x81,0x00,0x4d,0x48,0xf3,0x89,0x4d,0xdc,0x33,0x9c,0x2d };
    const uint8_t IV[] = { 0x72,0xf5,0x6b,0x75,0x6c,0x45,0xc0,0x4d,0x79,0xa0,0x00,0xb9,0x48,0x16,0xf7,0x9e };
    const uint8_t PLAINTEXT[] = { 0x5c,0x66,0xd2,0xfc,0x06,0x74,0xb0,0x62,0x23,0x20,0xd3,0x65,0xff,0x7e,0x7f,0x63 };
    const uint8_t CIPHERTEXT[] = { 0x02,0x8e,0x92,0x6e,0xd2,0x31,0x62,0xa1,0xbf,0xd3,0x15,0x8b,0x80,0x51,0x5d,0x7c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-34", "[CBC][MCT][256][DECRYPT][n34]") {
    const uint8_t KEY[] = { 0x74,0x0e,0x41,0xb5,0x31,0xaa,0x1c,0xbc,0x36,0x27,0x53,0x98,0x17,0xcd,0xf0,0xb0,0xcf,0xa4,0xaf,0x53,0x80,0xf5,0xb0,0x2f,0x6b,0xd3,0x5a,0x28,0x23,0x4d,0xe3,0x4e };
    const uint8_t IV[] = { 0x5c,0x66,0xd2,0xfc,0x06,0x74,0xb0,0x62,0x23,0x20,0xd3,0x65,0xff,0x7e,0x7f,0x63 };
    const uint8_t PLAINTEXT[] = { 0xf7,0x22,0x88,0x77,0xf1,0xc0,0x17,0x6e,0x47,0x51,0x34,0xb4,0x8f,0x20,0x37,0x3c };
    const uint8_t CIPHERTEXT[] = { 0x46,0x15,0xa8,0x29,0x2e,0x00,0xcf,0x49,0x46,0xd5,0xae,0x77,0xef,0x2b,0x22,0xb3 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-35", "[CBC][MCT][256][DECRYPT][n35]") {
    const uint8_t KEY[] = { 0x30,0x58,0x6d,0xb2,0xb5,0x5d,0x66,0xf0,0x34,0x77,0xfa,0x5c,0xb5,0xd2,0xad,0x18,0x38,0x86,0x27,0x24,0x71,0x35,0xa7,0x41,0x2c,0x82,0x6e,0x9c,0xac,0x6d,0xd4,0x72 };
    const uint8_t IV[] = { 0xf7,0x22,0x88,0x77,0xf1,0xc0,0x17,0x6e,0x47,0x51,0x34,0xb4,0x8f,0x20,0x37,0x3c };
    const uint8_t PLAINTEXT[] = { 0xb3,0xe2,0x3f,0x9a,0x3c,0x48,0xca,0xf9,0x43,0x8c,0x86,0xa0,0x97,0x91,0x01,0x64 };
    const uint8_t CIPHERTEXT[] = { 0x44,0x56,0x2c,0x07,0x84,0xf7,0x7a,0x4c,0x02,0x50,0xa9,0xc4,0xa2,0x1f,0x5d,0xa8 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-36", "[CBC][MCT][256][DECRYPT][n36]") {
    const uint8_t KEY[] = { 0xd1,0x49,0x1f,0x48,0xa5,0x90,0xe4,0x86,0xcf,0x91,0x8d,0x44,0xd5,0x9b,0x4a,0xdc,0x8b,0x64,0x18,0xbe,0x4d,0x7d,0x6d,0xb8,0x6f,0x0e,0xe8,0x3c,0x3b,0xfc,0xd5,0x16 };
    const uint8_t IV[] = { 0xb3,0xe2,0x3f,0x9a,0x3c,0x48,0xca,0xf9,0x43,0x8c,0x86,0xa0,0x97,0x91,0x01,0x64 };
    const uint8_t PLAINTEXT[] = { 0x11,0x91,0xb3,0x8d,0xa6,0x5c,0x1c,0x3b,0x85,0xb8,0x21,0x6b,0x5a,0x97,0xcf,0x2b };
    const uint8_t CIPHERTEXT[] = { 0xe1,0x11,0x72,0xfa,0x10,0xcd,0x82,0x76,0xfb,0xe6,0x77,0x18,0x60,0x49,0xe7,0xc4 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-37", "[CBC][MCT][256][DECRYPT][n37]") {
    const uint8_t KEY[] = { 0x83,0x02,0x27,0xea,0xb7,0xcc,0x2a,0x6a,0x5a,0xc7,0xfe,0x42,0x46,0x8e,0xe1,0x66,0x9a,0xf5,0xab,0x33,0xeb,0x21,0x71,0x83,0xea,0xb6,0xc9,0x57,0x61,0x6b,0x1a,0x3d };
    const uint8_t IV[] = { 0x11,0x91,0xb3,0x8d,0xa6,0x5c,0x1c,0x3b,0x85,0xb8,0x21,0x6b,0x5a,0x97,0xcf,0x2b };
    const uint8_t PLAINTEXT[] = { 0x57,0xde,0xff,0x30,0x9f,0x16,0x44,0xe4,0xf3,0xa0,0x36,0x6b,0x0f,0xd4,0x08,0xba };
    const uint8_t CIPHERTEXT[] = { 0x52,0x4b,0x38,0xa2,0x12,0x5c,0xce,0xec,0x95,0x56,0x73,0x06,0x93,0x15,0xab,0xba };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-38", "[CBC][MCT][256][DECRYPT][n38]") {
    const uint8_t KEY[] = { 0xe6,0x06,0xf8,0x82,0x5e,0x2f,0x14,0xfa,0x46,0xd9,0xce,0x55,0x17,0x73,0x99,0xbe,0xcd,0x2b,0x54,0x03,0x74,0x37,0x35,0x67,0x19,0x16,0xff,0x3c,0x6e,0xbf,0x12,0x87 };
    const uint8_t IV[] = { 0x57,0xde,0xff,0x30,0x9f,0x16,0x44,0xe4,0xf3,0xa0,0x36,0x6b,0x0f,0xd4,0x08,0xba };
    const uint8_t PLAINTEXT[] = { 0x09,0x63,0x57,0x69,0xae,0x20,0x1b,0x30,0x7a,0xb0,0x3f,0xf2,0xbd,0x51,0x01,0x21 };
    const uint8_t CIPHERTEXT[] = { 0x65,0x04,0xdf,0x68,0xe9,0xe3,0x3e,0x90,0x1c,0x1e,0x30,0x17,0x51,0xfd,0x78,0xd8 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-39", "[CBC][MCT][256][DECRYPT][n39]") {
    const uint8_t KEY[] = { 0x0d,0xea,0x45,0x8e,0xa2,0xa3,0xf8,0x03,0x41,0x9e,0xc5,0xf3,0x88,0xd2,0x6a,0xe0,0xc4,0x48,0x03,0x6a,0xda,0x17,0x2e,0x57,0x63,0xa6,0xc0,0xce,0xd3,0xee,0x13,0xa6 };
    const uint8_t IV[] = { 0x09,0x63,0x57,0x69,0xae,0x20,0x1b,0x30,0x7a,0xb0,0x3f,0xf2,0xbd,0x51,0x01,0x21 };
    const uint8_t PLAINTEXT[] = { 0x82,0x78,0xd2,0x1e,0xe5,0xa1,0x1b,0x92,0x74,0x37,0x58,0x34,0xbe,0x23,0x82,0x4c };
    const uint8_t CIPHERTEXT[] = { 0xeb,0xec,0xbd,0x0c,0xfc,0x8c,0xec,0xf9,0x07,0x47,0x0b,0xa6,0x9f,0xa1,0xf3,0x5e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-40", "[CBC][MCT][256][DECRYPT][n40]") {
    const uint8_t KEY[] = { 0xbc,0x7b,0x20,0x97,0x8d,0x07,0x77,0xf2,0x6b,0x0f,0xae,0xc0,0x2a,0x2b,0xc8,0xd9,0x46,0x30,0xd1,0x74,0x3f,0xb6,0x35,0xc5,0x17,0x91,0x98,0xfa,0x6d,0xcd,0x91,0xea };
    const uint8_t IV[] = { 0x82,0x78,0xd2,0x1e,0xe5,0xa1,0x1b,0x92,0x74,0x37,0x58,0x34,0xbe,0x23,0x82,0x4c };
    const uint8_t PLAINTEXT[] = { 0x5e,0xb2,0x6f,0xb3,0x59,0x24,0xb1,0xe1,0x15,0x3b,0x91,0x35,0x29,0xa9,0x58,0xa1 };
    const uint8_t CIPHERTEXT[] = { 0xb1,0x91,0x65,0x19,0x2f,0xa4,0x8f,0xf1,0x2a,0x91,0x6b,0x33,0xa2,0xf9,0xa2,0x39 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-41", "[CBC][MCT][256][DECRYPT][n41]") {
    const uint8_t KEY[] = { 0x1e,0x9f,0x02,0xf3,0x01,0xfb,0x86,0x16,0x15,0x24,0x7c,0xd4,0x6c,0xeb,0x83,0x8e,0x18,0x82,0xbe,0xc7,0x66,0x92,0x84,0x24,0x02,0xaa,0x09,0xcf,0x44,0x64,0xc9,0x4b };
    const uint8_t IV[] = { 0x5e,0xb2,0x6f,0xb3,0x59,0x24,0xb1,0xe1,0x15,0x3b,0x91,0x35,0x29,0xa9,0x58,0xa1 };
    const uint8_t PLAINTEXT[] = { 0xe0,0x41,0xbd,0x39,0x3c,0xcc,0x0e,0xeb,0x67,0xd5,0x3d,0xa8,0x25,0xfa,0xf3,0xc3 };
    const uint8_t CIPHERTEXT[] = { 0xa2,0xe4,0x22,0x64,0x8c,0xfc,0xf1,0xe4,0x7e,0x2b,0xd2,0x14,0x46,0xc0,0x4b,0x57 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-42", "[CBC][MCT][256][DECRYPT][n42]") {
    const uint8_t KEY[] = { 0x7d,0x12,0x56,0xa1,0x54,0x26,0xb0,0xaf,0x9e,0xdd,0x06,0x4f,0x94,0xdc,0x3c,0x26,0xf8,0xc3,0x03,0xfe,0x5a,0x5e,0x8a,0xcf,0x65,0x7f,0x34,0x67,0x61,0x9e,0x3a,0x88 };
    const uint8_t IV[] = { 0xe0,0x41,0xbd,0x39,0x3c,0xcc,0x0e,0xeb,0x67,0xd5,0x3d,0xa8,0x25,0xfa,0xf3,0xc3 };
    const uint8_t PLAINTEXT[] = { 0x1a,0xe3,0x43,0xb8,0x99,0x9f,0x41,0x9d,0x8b,0x9f,0xd0,0x04,0x4e,0x23,0xeb,0x00 };
    const uint8_t CIPHERTEXT[] = { 0x63,0x8d,0x54,0x52,0x55,0xdd,0x36,0xb9,0x8b,0xf9,0x7a,0x9b,0xf8,0x37,0xbf,0xa8 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-43", "[CBC][MCT][256][DECRYPT][n43]") {
    const uint8_t KEY[] = { 0x43,0x40,0xc5,0x0f,0xe1,0x07,0xb2,0x01,0x7d,0x08,0x7a,0x80,0x37,0x06,0xcb,0x6d,0xe2,0x20,0x40,0x46,0xc3,0xc1,0xcb,0x52,0xee,0xe0,0xe4,0x63,0x2f,0xbd,0xd1,0x88 };
    const uint8_t IV[] = { 0x1a,0xe3,0x43,0xb8,0x99,0x9f,0x41,0x9d,0x8b,0x9f,0xd0,0x04,0x4e,0x23,0xeb,0x00 };
    const uint8_t PLAINTEXT[] = { 0x86,0x92,0x09,0xc4,0x35,0x30,0x33,0x2f,0xd7,0xf4,0x7f,0x75,0x68,0xae,0xc4,0x65 };
    const uint8_t CIPHERTEXT[] = { 0x3e,0x52,0x93,0xae,0xb5,0x21,0x02,0xae,0xe3,0xd5,0x7c,0xcf,0xa3,0xda,0xf7,0x4b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-44", "[CBC][MCT][256][DECRYPT][n44]") {
    const uint8_t KEY[] = { 0x14,0xa5,0x60,0x0e,0x09,0x00,0xee,0xaa,0x96,0x39,0x87,0x58,0xa3,0x19,0x25,0xcd,0x64,0xb2,0x49,0x82,0xf6,0xf1,0xf8,0x7d,0x39,0x14,0x9b,0x16,0x47,0x13,0x15,0xed };
    const uint8_t IV[] = { 0x86,0x92,0x09,0xc4,0x35,0x30,0x33,0x2f,0xd7,0xf4,0x7f,0x75,0x68,0xae,0xc4,0x65 };
    const uint8_t PLAINTEXT[] = { 0x2d,0x14,0xa4,0x6d,0x43,0x6b,0x35,0xe0,0x99,0x2f,0x7f,0x78,0xb1,0xdf,0x8d,0xfd };
    const uint8_t CIPHERTEXT[] = { 0x57,0xe5,0xa5,0x01,0xe8,0x07,0x5c,0xab,0xeb,0x31,0xfd,0xd8,0x94,0x1f,0xee,0xa0 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-45", "[CBC][MCT][256][DECRYPT][n45]") {
    const uint8_t KEY[] = { 0x26,0x8b,0x6a,0x6f,0x11,0xc3,0xaa,0x74,0x7e,0xc3,0x28,0x9a,0xc8,0x1c,0x76,0x0a,0x49,0xa6,0xed,0xef,0xb5,0x9a,0xcd,0x9d,0xa0,0x3b,0xe4,0x6e,0xf6,0xcc,0x98,0x10 };
    const uint8_t IV[] = { 0x2d,0x14,0xa4,0x6d,0x43,0x6b,0x35,0xe0,0x99,0x2f,0x7f,0x78,0xb1,0xdf,0x8d,0xfd };
    const uint8_t PLAINTEXT[] = { 0xed,0x61,0x9f,0x5a,0xa7,0xd4,0x3b,0x7a,0x1a,0x1e,0xf5,0xb6,0xe8,0xee,0xf6,0xbf };
    const uint8_t CIPHERTEXT[] = { 0x32,0x2e,0x0a,0x61,0x18,0xc3,0x44,0xde,0xe8,0xfa,0xaf,0xc2,0x6b,0x05,0x53,0xc7 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-46", "[CBC][MCT][256][DECRYPT][n46]") {
    const uint8_t KEY[] = { 0xec,0x20,0xfe,0xa6,0xf4,0x94,0x5f,0x20,0x43,0xef,0x9b,0x94,0x8b,0x9a,0xc9,0x1d,0xa4,0xc7,0x72,0xb5,0x12,0x4e,0xf6,0xe7,0xba,0x25,0x11,0xd8,0x1e,0x22,0x6e,0xaf };
    const uint8_t IV[] = { 0xed,0x61,0x9f,0x5a,0xa7,0xd4,0x3b,0x7a,0x1a,0x1e,0xf5,0xb6,0xe8,0xee,0xf6,0xbf };
    const uint8_t PLAINTEXT[] = { 0x2f,0x4f,0x40,0x37,0xdb,0x03,0x7d,0x88,0xad,0x64,0x17,0x99,0x7c,0x8e,0x8b,0xe7 };
    const uint8_t CIPHERTEXT[] = { 0xca,0xab,0x94,0xc9,0xe5,0x57,0xf5,0x54,0x3d,0x2c,0xb3,0x0e,0x43,0x86,0xbf,0x17 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-47", "[CBC][MCT][256][DECRYPT][n47]") {
    const uint8_t KEY[] = { 0x19,0x39,0x66,0xe4,0x31,0xfc,0xcf,0x0d,0xde,0x93,0xb7,0x2b,0x8a,0x2e,0xef,0xb4,0x8b,0x88,0x32,0x82,0xc9,0x4d,0x8b,0x6f,0x17,0x41,0x06,0x41,0x62,0xac,0xe5,0x48 };
    const uint8_t IV[] = { 0x2f,0x4f,0x40,0x37,0xdb,0x03,0x7d,0x88,0xad,0x64,0x17,0x99,0x7c,0x8e,0x8b,0xe7 };
    const uint8_t PLAINTEXT[] = { 0xe1,0xaa,0x9a,0xee,0x3d,0x7c,0x68,0xe2,0x95,0xd8,0xc4,0xdc,0x0c,0xb9,0xda,0xc1 };
    const uint8_t CIPHERTEXT[] = { 0xf5,0x19,0x98,0x42,0xc5,0x68,0x90,0x2d,0x9d,0x7c,0x2c,0xbf,0x01,0xb4,0x26,0xa9 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-48", "[CBC][MCT][256][DECRYPT][n48]") {
    const uint8_t KEY[] = { 0x51,0xa0,0x39,0x02,0x39,0x30,0xb8,0x2c,0x08,0x47,0xa8,0xe5,0x9c,0x33,0xcd,0x79,0x6a,0x22,0xa8,0x6c,0xf4,0x31,0xe3,0x8d,0x82,0x99,0xc2,0x9d,0x6e,0x15,0x3f,0x89 };
    const uint8_t IV[] = { 0xe1,0xaa,0x9a,0xee,0x3d,0x7c,0x68,0xe2,0x95,0xd8,0xc4,0xdc,0x0c,0xb9,0xda,0xc1 };
    const uint8_t PLAINTEXT[] = { 0x5b,0x7c,0xee,0x67,0x33,0x39,0x87,0xf0,0x7e,0xae,0x6c,0x22,0xad,0xb0,0x56,0x15 };
    const uint8_t CIPHERTEXT[] = { 0x48,0x99,0x5f,0xe6,0x08,0xcc,0x77,0x21,0xd6,0xd4,0x1f,0xce,0x16,0x1d,0x22,0xcd };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-49", "[CBC][MCT][256][DECRYPT][n49]") {
    const uint8_t KEY[] = { 0x55,0x21,0x14,0x32,0x5f,0x46,0xed,0xcb,0x0e,0xc5,0x4b,0xc4,0x83,0x8c,0xc9,0x2f,0x31,0x5e,0x46,0x0b,0xc7,0x08,0x64,0x7d,0xfc,0x37,0xae,0xbf,0xc3,0xa5,0x69,0x9c };
    const uint8_t IV[] = { 0x5b,0x7c,0xee,0x67,0x33,0x39,0x87,0xf0,0x7e,0xae,0x6c,0x22,0xad,0xb0,0x56,0x15 };
    const uint8_t PLAINTEXT[] = { 0x3f,0x8a,0xb9,0x6f,0xf7,0xa7,0x63,0x9e,0x0a,0x9b,0xb4,0x5e,0xbe,0x53,0xa5,0x6b };
    const uint8_t CIPHERTEXT[] = { 0x04,0x81,0x2d,0x30,0x66,0x76,0x55,0xe7,0x06,0x82,0xe3,0x21,0x1f,0xbf,0x04,0x56 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-50", "[CBC][MCT][256][DECRYPT][n50]") {
    const uint8_t KEY[] = { 0x29,0xfd,0x24,0x73,0x28,0x08,0x5f,0x61,0x2d,0xf9,0xa9,0x8b,0x64,0xdd,0x9e,0x8d,0x0e,0xd4,0xff,0x64,0x30,0xaf,0x07,0xe3,0xf6,0xac,0x1a,0xe1,0x7d,0xf6,0xcc,0xf7 };
    const uint8_t IV[] = { 0x3f,0x8a,0xb9,0x6f,0xf7,0xa7,0x63,0x9e,0x0a,0x9b,0xb4,0x5e,0xbe,0x53,0xa5,0x6b };
    const uint8_t PLAINTEXT[] = { 0x62,0x99,0xcd,0x54,0xec,0x85,0x8f,0xbc,0xb4,0xcc,0x4c,0xa8,0xbf,0x09,0xb2,0xf3 };
    const uint8_t CIPHERTEXT[] = { 0x7c,0xdc,0x30,0x41,0x77,0x4e,0xb2,0xaa,0x23,0x3c,0xe2,0x4f,0xe7,0x51,0x57,0xa2 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-51", "[CBC][MCT][256][DECRYPT][n51]") {
    const uint8_t KEY[] = { 0x4f,0x25,0x23,0x7a,0x35,0x76,0x0c,0xcd,0xb6,0xa9,0x05,0xa1,0x01,0x8f,0x6d,0xbe,0x6c,0x4d,0x32,0x30,0xdc,0x2a,0x88,0x5f,0x42,0x60,0x56,0x49,0xc2,0xff,0x7e,0x04 };
    const uint8_t IV[] = { 0x62,0x99,0xcd,0x54,0xec,0x85,0x8f,0xbc,0xb4,0xcc,0x4c,0xa8,0xbf,0x09,0xb2,0xf3 };
    const uint8_t PLAINTEXT[] = { 0xbf,0x6a,0x08,0xa6,0xa6,0xee,0x2e,0x7c,0xfd,0xff,0xf8,0xbe,0x05,0xa3,0x38,0x52 };
    const uint8_t CIPHERTEXT[] = { 0x66,0xd8,0x07,0x09,0x1d,0x7e,0x53,0xac,0x9b,0x50,0xac,0x2a,0x65,0x52,0xf3,0x33 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-52", "[CBC][MCT][256][DECRYPT][n52]") {
    const uint8_t KEY[] = { 0xd5,0xb8,0x14,0x6b,0xc0,0x1b,0x94,0x2b,0x86,0xbd,0x68,0xc6,0xd0,0xc8,0x26,0xa6,0xd3,0x27,0x3a,0x96,0x7a,0xc4,0xa6,0x23,0xbf,0x9f,0xae,0xf7,0xc7,0x5c,0x46,0x56 };
    const uint8_t IV[] = { 0xbf,0x6a,0x08,0xa6,0xa6,0xee,0x2e,0x7c,0xfd,0xff,0xf8,0xbe,0x05,0xa3,0x38,0x52 };
    const uint8_t PLAINTEXT[] = { 0x72,0x5f,0x84,0xa4,0x15,0x12,0x15,0xe0,0xbe,0x16,0xfb,0xf8,0xda,0xe9,0x5d,0x97 };
    const uint8_t CIPHERTEXT[] = { 0x9a,0x9d,0x37,0x11,0xf5,0x6d,0x98,0xe6,0x30,0x14,0x6d,0x67,0xd1,0x47,0x4b,0x18 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-53", "[CBC][MCT][256][DECRYPT][n53]") {
    const uint8_t KEY[] = { 0x08,0xc0,0x51,0x5a,0x7c,0x98,0x3b,0xed,0xed,0x51,0x85,0x52,0x0a,0xaf,0x26,0x66,0xa1,0x78,0xbe,0x32,0x6f,0xd6,0xb3,0xc3,0x01,0x89,0x55,0x0f,0x1d,0xb5,0x1b,0xc1 };
    const uint8_t IV[] = { 0x72,0x5f,0x84,0xa4,0x15,0x12,0x15,0xe0,0xbe,0x16,0xfb,0xf8,0xda,0xe9,0x5d,0x97 };
    const uint8_t PLAINTEXT[] = { 0xc9,0xf4,0x17,0x59,0x5c,0xa2,0xd2,0x32,0xd7,0xe0,0x42,0x88,0x9d,0x60,0xc5,0x20 };
    const uint8_t CIPHERTEXT[] = { 0xdd,0x78,0x45,0x31,0xbc,0x83,0xaf,0xc6,0x6b,0xec,0xed,0x94,0xda,0x67,0x00,0xc0 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-54", "[CBC][MCT][256][DECRYPT][n54]") {
    const uint8_t KEY[] = { 0x39,0x69,0x0e,0xa3,0x89,0xf2,0xa6,0x29,0x22,0x6e,0x3a,0x9e,0xfb,0x90,0x0a,0xce,0x68,0x8c,0xa9,0x6b,0x33,0x74,0x61,0xf1,0xd6,0x69,0x17,0x87,0x80,0xd5,0xde,0xe1 };
    const uint8_t IV[] = { 0xc9,0xf4,0x17,0x59,0x5c,0xa2,0xd2,0x32,0xd7,0xe0,0x42,0x88,0x9d,0x60,0xc5,0x20 };
    const uint8_t PLAINTEXT[] = { 0x33,0x54,0x3d,0x8a,0xab,0x14,0x68,0x2b,0x73,0xaf,0xf9,0xa4,0xcc,0xc9,0x9a,0x35 };
    const uint8_t CIPHERTEXT[] = { 0x31,0xa9,0x5f,0xf9,0xf5,0x6a,0x9d,0xc4,0xcf,0x3f,0xbf,0xcc,0xf1,0x3f,0x2c,0xa8 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-55", "[CBC][MCT][256][DECRYPT][n55]") {
    const uint8_t KEY[] = { 0xe6,0xfa,0x89,0xf0,0xd7,0x89,0x3a,0x17,0x8b,0x80,0x00,0xfd,0xc4,0x60,0x39,0x7c,0x5b,0xd8,0x94,0xe1,0x98,0x60,0x09,0xda,0xa5,0xc6,0xee,0x23,0x4c,0x1c,0x44,0xd4 };
    const uint8_t IV[] = { 0x33,0x54,0x3d,0x8a,0xab,0x14,0x68,0x2b,0x73,0xaf,0xf9,0xa4,0xcc,0xc9,0x9a,0x35 };
    const uint8_t PLAINTEXT[] = { 0x97,0x4f,0x35,0x04,0x76,0xe2,0x04,0x32,0xa9,0x77,0x83,0x24,0x1d,0x83,0x57,0xa5 };
    const uint8_t CIPHERTEXT[] = { 0xdf,0x93,0x87,0x53,0x5e,0x7b,0x9c,0x3e,0xa9,0xee,0x3a,0x63,0x3f,0xf0,0x33,0xb2 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-56", "[CBC][MCT][256][DECRYPT][n56]") {
    const uint8_t KEY[] = { 0xc7,0x3f,0x49,0xf3,0x54,0xa7,0x6d,0x54,0x4a,0x51,0xf5,0xc9,0x0f,0xde,0xfd,0xfb,0xcc,0x97,0xa1,0xe5,0xee,0x82,0x0d,0xe8,0x0c,0xb1,0x6d,0x07,0x51,0x9f,0x13,0x71 };
    const uint8_t IV[] = { 0x97,0x4f,0x35,0x04,0x76,0xe2,0x04,0x32,0xa9,0x77,0x83,0x24,0x1d,0x83,0x57,0xa5 };
    const uint8_t PLAINTEXT[] = { 0x25,0x06,0xc1,0xdb,0xe4,0xea,0xf3,0xdb,0x10,0x12,0xa2,0x02,0xd3,0x99,0x85,0xd6 };
    const uint8_t CIPHERTEXT[] = { 0x21,0xc5,0xc0,0x03,0x83,0x2e,0x57,0x43,0xc1,0xd1,0xf5,0x34,0xcb,0xbe,0xc4,0x87 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-57", "[CBC][MCT][256][DECRYPT][n57]") {
    const uint8_t KEY[] = { 0x76,0xb9,0xb7,0x88,0x8a,0xb1,0x0a,0xe1,0x22,0x45,0xfb,0x4b,0xfa,0xf1,0xb2,0x47,0xe9,0x91,0x60,0x3e,0x0a,0x68,0xfe,0x33,0x1c,0xa3,0xcf,0x05,0x82,0x06,0x96,0xa7 };
    const uint8_t IV[] = { 0x25,0x06,0xc1,0xdb,0xe4,0xea,0xf3,0xdb,0x10,0x12,0xa2,0x02,0xd3,0x99,0x85,0xd6 };
    const uint8_t PLAINTEXT[] = { 0xe7,0x32,0xb7,0x23,0x86,0x7f,0xcc,0x74,0x7e,0x49,0x24,0xb5,0xd3,0xf5,0x90,0xa3 };
    const uint8_t CIPHERTEXT[] = { 0xb1,0x86,0xfe,0x7b,0xde,0x16,0x67,0xb5,0x68,0x14,0x0e,0x82,0xf5,0x2f,0x4f,0xbc };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-58", "[CBC][MCT][256][DECRYPT][n58]") {
    const uint8_t KEY[] = { 0x57,0xf1,0xb6,0x17,0x8f,0x63,0xf8,0x3a,0xa4,0x16,0xb4,0xf5,0xfb,0x09,0xa1,0x51,0x0e,0xa3,0xd7,0x1d,0x8c,0x17,0x32,0x47,0x62,0xea,0xeb,0xb0,0x51,0xf3,0x06,0x04 };
    const uint8_t IV[] = { 0xe7,0x32,0xb7,0x23,0x86,0x7f,0xcc,0x74,0x7e,0x49,0x24,0xb5,0xd3,0xf5,0x90,0xa3 };
    const uint8_t PLAINTEXT[] = { 0xbe,0xd4,0x0c,0xe6,0x44,0x45,0xb5,0x07,0x9d,0x35,0xe4,0x9a,0xf8,0x27,0xd6,0x90 };
    const uint8_t CIPHERTEXT[] = { 0x21,0x48,0x01,0x9f,0x05,0xd2,0xf2,0xdb,0x86,0x53,0x4f,0xbe,0x01,0xf8,0x13,0x16 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-59", "[CBC][MCT][256][DECRYPT][n59]") {
    const uint8_t KEY[] = { 0x6a,0x7e,0xed,0x66,0xca,0xd8,0xb5,0xbe,0x91,0x75,0x84,0xd6,0x64,0x27,0x67,0xcf,0xb0,0x77,0xdb,0xfb,0xc8,0x52,0x87,0x40,0xff,0xdf,0x0f,0x2a,0xa9,0xd4,0xd0,0x94 };
    const uint8_t IV[] = { 0xbe,0xd4,0x0c,0xe6,0x44,0x45,0xb5,0x07,0x9d,0x35,0xe4,0x9a,0xf8,0x27,0xd6,0x90 };
    const uint8_t PLAINTEXT[] = { 0xc6,0xa6,0x37,0x35,0x8b,0xfa,0x49,0x31,0xee,0xd3,0x96,0xeb,0xde,0x61,0xa8,0x87 };
    const uint8_t CIPHERTEXT[] = { 0x3d,0x8f,0x5b,0x71,0x45,0xbb,0x4d,0x84,0x35,0x63,0x30,0x23,0x9f,0x2e,0xc6,0x9e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-60", "[CBC][MCT][256][DECRYPT][n60]") {
    const uint8_t KEY[] = { 0xe7,0xf5,0xc0,0x43,0xab,0x9c,0x3d,0xd9,0x50,0xc7,0x2e,0x01,0xdf,0x47,0x0b,0x3f,0x76,0xd1,0xec,0xce,0x43,0xa8,0xce,0x71,0x11,0x0c,0x99,0xc1,0x77,0xb5,0x78,0x13 };
    const uint8_t IV[] = { 0xc6,0xa6,0x37,0x35,0x8b,0xfa,0x49,0x31,0xee,0xd3,0x96,0xeb,0xde,0x61,0xa8,0x87 };
    const uint8_t PLAINTEXT[] = { 0x7e,0xe7,0x6e,0xde,0xd6,0x62,0x7e,0x61,0x67,0x96,0x1f,0x37,0xc4,0x5b,0x80,0xd2 };
    const uint8_t CIPHERTEXT[] = { 0x8d,0x8b,0x2d,0x25,0x61,0x44,0x88,0x67,0xc1,0xb2,0xaa,0xd7,0xbb,0x60,0x6c,0xf0 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-61", "[CBC][MCT][256][DECRYPT][n61]") {
    const uint8_t KEY[] = { 0x6c,0x97,0x20,0x40,0x73,0x02,0xf1,0xbf,0x69,0xf4,0x4c,0xe9,0xa2,0x1b,0x23,0x4e,0x08,0x36,0x82,0x10,0x95,0xca,0xb0,0x10,0x76,0x9a,0x86,0xf6,0xb3,0xee,0xf8,0xc1 };
    const uint8_t IV[] = { 0x7e,0xe7,0x6e,0xde,0xd6,0x62,0x7e,0x61,0x67,0x96,0x1f,0x37,0xc4,0x5b,0x80,0xd2 };
    const uint8_t PLAINTEXT[] = { 0xe7,0xaf,0xe2,0xc8,0xbe,0xa4,0x61,0x07,0x13,0xb9,0x97,0xbb,0x31,0x04,0xbb,0x1e };
    const uint8_t CIPHERTEXT[] = { 0x8b,0x62,0xe0,0x03,0xd8,0x9e,0xcc,0x66,0x39,0x33,0x62,0xe8,0x7d,0x5c,0x28,0x71 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-62", "[CBC][MCT][256][DECRYPT][n62]") {
    const uint8_t KEY[] = { 0x1f,0x17,0xd5,0xb5,0xda,0x45,0xb2,0x5a,0x51,0x34,0x8b,0x82,0x4e,0xc9,0x95,0xc7,0xef,0x99,0x60,0xd8,0x2b,0x6e,0xd1,0x17,0x65,0x23,0x11,0x4d,0x82,0xea,0x43,0xdf };
    const uint8_t IV[] = { 0xe7,0xaf,0xe2,0xc8,0xbe,0xa4,0x61,0x07,0x13,0xb9,0x97,0xbb,0x31,0x04,0xbb,0x1e };
    const uint8_t PLAINTEXT[] = { 0x7c,0x80,0xd1,0xdd,0xa8,0x65,0xa1,0xa9,0x4d,0x81,0x04,0x1c,0xe9,0x47,0x68,0x21 };
    const uint8_t CIPHERTEXT[] = { 0x73,0x80,0xf5,0xf5,0xa9,0x47,0x43,0xe5,0x38,0xc0,0xc7,0x6b,0xec,0xd2,0xb6,0x89 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-63", "[CBC][MCT][256][DECRYPT][n63]") {
    const uint8_t KEY[] = { 0xa0,0x4c,0x4e,0x29,0x63,0xfe,0x54,0x56,0xc5,0x16,0x06,0x3f,0x14,0xda,0x10,0xbd,0x93,0x19,0xb1,0x05,0x83,0x0b,0x70,0xbe,0x28,0xa2,0x15,0x51,0x6b,0xad,0x2b,0xfe };
    const uint8_t IV[] = { 0x7c,0x80,0xd1,0xdd,0xa8,0x65,0xa1,0xa9,0x4d,0x81,0x04,0x1c,0xe9,0x47,0x68,0x21 };
    const uint8_t PLAINTEXT[] = { 0x61,0xcf,0xf9,0x99,0xc3,0x06,0x6b,0x65,0x06,0x67,0x04,0xd7,0x3d,0xf3,0xe4,0x95 };
    const uint8_t CIPHERTEXT[] = { 0xbf,0x5b,0x9b,0x9c,0xb9,0xbb,0xe6,0x0c,0x94,0x22,0x8d,0xbd,0x5a,0x13,0x85,0x7a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-64", "[CBC][MCT][256][DECRYPT][n64]") {
    const uint8_t KEY[] = { 0x8e,0xbc,0xad,0xb1,0x23,0x77,0xb6,0xc6,0x72,0x2b,0x58,0x87,0xfc,0xaf,0x46,0x8d,0xf2,0xd6,0x48,0x9c,0x40,0x0d,0x1b,0xdb,0x2e,0xc5,0x11,0x86,0x56,0x5e,0xcf,0x6b };
    const uint8_t IV[] = { 0x61,0xcf,0xf9,0x99,0xc3,0x06,0x6b,0x65,0x06,0x67,0x04,0xd7,0x3d,0xf3,0xe4,0x95 };
    const uint8_t PLAINTEXT[] = { 0x3b,0xf6,0x6d,0xed,0x70,0x23,0xc3,0xf7,0x62,0xce,0xcd,0x37,0x30,0xcb,0x2b,0x5a };
    const uint8_t CIPHERTEXT[] = { 0x2e,0xf0,0xe3,0x98,0x40,0x89,0xe2,0x90,0xb7,0x3d,0x5e,0xb8,0xe8,0x75,0x56,0x30 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-65", "[CBC][MCT][256][DECRYPT][n65]") {
    const uint8_t KEY[] = { 0x70,0x44,0x2c,0xc6,0x9e,0x20,0x8e,0xfa,0xe1,0x38,0x77,0x7a,0xbf,0xbe,0x8e,0x28,0xc9,0x20,0x25,0x71,0x30,0x2e,0xd8,0x2c,0x4c,0x0b,0xdc,0xb1,0x66,0x95,0xe4,0x31 };
    const uint8_t IV[] = { 0x3b,0xf6,0x6d,0xed,0x70,0x23,0xc3,0xf7,0x62,0xce,0xcd,0x37,0x30,0xcb,0x2b,0x5a };
    const uint8_t PLAINTEXT[] = { 0xd1,0xc2,0xda,0xfb,0x60,0x9d,0x55,0x92,0xf8,0x75,0xf2,0xc7,0xec,0xab,0xdf,0x2f };
    const uint8_t CIPHERTEXT[] = { 0xfe,0xf8,0x81,0x77,0xbd,0x57,0x38,0x3c,0x93,0x13,0x2f,0xfd,0x43,0x11,0xc8,0xa5 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-66", "[CBC][MCT][256][DECRYPT][n66]") {
    const uint8_t KEY[] = { 0x9c,0x02,0x21,0xdf,0xd8,0x1c,0x45,0x08,0xfd,0x1e,0xd9,0x6d,0xa5,0x47,0x9b,0x4a,0x18,0xe2,0xff,0x8a,0x50,0xb3,0x8d,0xbe,0xb4,0x7e,0x2e,0x76,0x8a,0x3e,0x3b,0x1e };
    const uint8_t IV[] = { 0xd1,0xc2,0xda,0xfb,0x60,0x9d,0x55,0x92,0xf8,0x75,0xf2,0xc7,0xec,0xab,0xdf,0x2f };
    const uint8_t PLAINTEXT[] = { 0x30,0xb7,0xc6,0x8f,0x80,0x03,0x59,0x55,0x30,0xea,0x63,0xa8,0x4a,0x2f,0xeb,0xe2 };
    const uint8_t CIPHERTEXT[] = { 0xec,0x46,0x0d,0x19,0x46,0x3c,0xcb,0xf2,0x1c,0x26,0xae,0x17,0x1a,0xf9,0x15,0x62 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-67", "[CBC][MCT][256][DECRYPT][n67]") {
    const uint8_t KEY[] = { 0x35,0x85,0x6e,0x6b,0xca,0x15,0x87,0x58,0xe0,0xc2,0x25,0x09,0xbd,0x99,0x57,0x5c,0x28,0x55,0x39,0x05,0xd0,0xb0,0xd4,0xeb,0x84,0x94,0x4d,0xde,0xc0,0x11,0xd0,0xfc };
    const uint8_t IV[] = { 0x30,0xb7,0xc6,0x8f,0x80,0x03,0x59,0x55,0x30,0xea,0x63,0xa8,0x4a,0x2f,0xeb,0xe2 };
    const uint8_t PLAINTEXT[] = { 0x94,0xd2,0x73,0x73,0xe4,0x45,0x80,0x03,0x43,0xa7,0x3b,0x56,0xf6,0x49,0x3d,0x75 };
    const uint8_t CIPHERTEXT[] = { 0xa9,0x87,0x4f,0xb4,0x12,0x09,0xc2,0x50,0x1d,0xdc,0xfc,0x64,0x18,0xde,0xcc,0x16 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-68", "[CBC][MCT][256][DECRYPT][n68]") {
    const uint8_t KEY[] = { 0xe6,0xf4,0x22,0x66,0x8e,0xfb,0x68,0xa6,0xf5,0xba,0xe6,0xf6,0x6c,0x42,0xe5,0x44,0xbc,0x87,0x4a,0x76,0x34,0xf5,0x54,0xe8,0xc7,0x33,0x76,0x88,0x36,0x58,0xed,0x89 };
    const uint8_t IV[] = { 0x94,0xd2,0x73,0x73,0xe4,0x45,0x80,0x03,0x43,0xa7,0x3b,0x56,0xf6,0x49,0x3d,0x75 };
    const uint8_t PLAINTEXT[] = { 0x1f,0x9c,0xc3,0xe1,0x0b,0x30,0x41,0x73,0xc7,0x41,0x8d,0xad,0x27,0xf6,0x31,0x5c };
    const uint8_t CIPHERTEXT[] = { 0xd3,0x71,0x4c,0x0d,0x44,0xee,0xef,0xfe,0x15,0x78,0xc3,0xff,0xd1,0xdb,0xb2,0x18 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-69", "[CBC][MCT][256][DECRYPT][n69]") {
    const uint8_t KEY[] = { 0x33,0x84,0xe4,0xbb,0x53,0xd9,0x48,0x72,0x6c,0x9d,0x20,0xc2,0xba,0xb4,0x91,0x95,0xa3,0x1b,0x89,0x97,0x3f,0xc5,0x15,0x9b,0x00,0x72,0xfb,0x25,0x11,0xae,0xdc,0xd5 };
    const uint8_t IV[] = { 0x1f,0x9c,0xc3,0xe1,0x0b,0x30,0x41,0x73,0xc7,0x41,0x8d,0xad,0x27,0xf6,0x31,0x5c };
    const uint8_t PLAINTEXT[] = { 0xcc,0xb2,0x34,0x77,0xb5,0x4a,0x2b,0x18,0x84,0xc8,0xd5,0x95,0x80,0xc5,0x5d,0xed };
    const uint8_t CIPHERTEXT[] = { 0xd5,0x70,0xc6,0xdd,0xdd,0x22,0x20,0xd4,0x99,0x27,0xc6,0x34,0xd6,0xf6,0x74,0xd1 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-70", "[CBC][MCT][256][DECRYPT][n70]") {
    const uint8_t KEY[] = { 0x91,0xc3,0x43,0x65,0x62,0x4f,0x17,0x7f,0x83,0xa5,0xf9,0x51,0x04,0x85,0x2a,0x7f,0x6f,0xa9,0xbd,0xe0,0x8a,0x8f,0x3e,0x83,0x84,0xba,0x2e,0xb0,0x91,0x6b,0x81,0x38 };
    const uint8_t IV[] = { 0xcc,0xb2,0x34,0x77,0xb5,0x4a,0x2b,0x18,0x84,0xc8,0xd5,0x95,0x80,0xc5,0x5d,0xed };
    const uint8_t PLAINTEXT[] = { 0xc5,0xc0,0xfa,0x6c,0x44,0xfe,0xfa,0xc9,0x66,0xe0,0x4e,0xfe,0x93,0x02,0x5b,0x0d };
    const uint8_t CIPHERTEXT[] = { 0xa2,0x47,0xa7,0xde,0x31,0x96,0x5f,0x0d,0xef,0x38,0xd9,0x93,0xbe,0x31,0xbb,0xea };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-71", "[CBC][MCT][256][DECRYPT][n71]") {
    const uint8_t KEY[] = { 0x8a,0x33,0xac,0x23,0x8a,0x42,0x6c,0xe0,0xde,0x9d,0x3e,0x8e,0x81,0xae,0x41,0x74,0xaa,0x69,0x47,0x8c,0xce,0x71,0xc4,0x4a,0xe2,0x5a,0x60,0x4e,0x02,0x69,0xda,0x35 };
    const uint8_t IV[] = { 0xc5,0xc0,0xfa,0x6c,0x44,0xfe,0xfa,0xc9,0x66,0xe0,0x4e,0xfe,0x93,0x02,0x5b,0x0d };
    const uint8_t PLAINTEXT[] = { 0xac,0x7e,0xf5,0x31,0x77,0x69,0x57,0xba,0xfe,0xa0,0x10,0xee,0xf9,0xb4,0x64,0x97 };
    const uint8_t CIPHERTEXT[] = { 0x1b,0xf0,0xef,0x46,0xe8,0x0d,0x7b,0x9f,0x5d,0x38,0xc7,0xdf,0x85,0x2b,0x6b,0x0b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-72", "[CBC][MCT][256][DECRYPT][n72]") {
    const uint8_t KEY[] = { 0xdd,0x15,0x6b,0xa3,0xb7,0x66,0x9f,0x6b,0xc0,0xe1,0xd0,0x00,0xdc,0xe1,0x95,0xbb,0x06,0x17,0xb2,0xbd,0xb9,0x18,0x93,0xf0,0x1c,0xfa,0x70,0xa0,0xfb,0xdd,0xbe,0xa2 };
    const uint8_t IV[] = { 0xac,0x7e,0xf5,0x31,0x77,0x69,0x57,0xba,0xfe,0xa0,0x10,0xee,0xf9,0xb4,0x64,0x97 };
    const uint8_t PLAINTEXT[] = { 0x39,0x5c,0xa5,0x7d,0xaa,0xe4,0x2f,0xbb,0x19,0xbf,0x13,0x5b,0x15,0xca,0x0b,0xf5 };
    const uint8_t CIPHERTEXT[] = { 0x57,0x26,0xc7,0x80,0x3d,0x24,0xf3,0x8b,0x1e,0x7c,0xee,0x8e,0x5d,0x4f,0xd4,0xcf };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-73", "[CBC][MCT][256][DECRYPT][n73]") {
    const uint8_t KEY[] = { 0xd2,0x21,0xec,0x88,0x23,0x28,0x96,0x4e,0x26,0x92,0x5b,0x8d,0xe3,0x39,0x52,0x09,0x3f,0x4b,0x17,0xc0,0x13,0xfc,0xbc,0x4b,0x05,0x45,0x63,0xfb,0xee,0x17,0xb5,0x57 };
    const uint8_t IV[] = { 0x39,0x5c,0xa5,0x7d,0xaa,0xe4,0x2f,0xbb,0x19,0xbf,0x13,0x5b,0x15,0xca,0x0b,0xf5 };
    const uint8_t PLAINTEXT[] = { 0x3b,0x2b,0x38,0x75,0x21,0x98,0x2b,0x8e,0x25,0xdd,0xd4,0x96,0x72,0x05,0xaa,0x0e };
    const uint8_t CIPHERTEXT[] = { 0x0f,0x34,0x87,0x2b,0x94,0x4e,0x09,0x25,0xe6,0x73,0x8b,0x8d,0x3f,0xd8,0xc7,0xb2 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-74", "[CBC][MCT][256][DECRYPT][n74]") {
    const uint8_t KEY[] = { 0x70,0x80,0xea,0x22,0x64,0x74,0x67,0x60,0x18,0x38,0xfa,0x04,0x86,0x2b,0x20,0xf6,0x04,0x60,0x2f,0xb5,0x32,0x64,0x97,0xc5,0x20,0x98,0xb7,0x6d,0x9c,0x12,0x1f,0x59 };
    const uint8_t IV[] = { 0x3b,0x2b,0x38,0x75,0x21,0x98,0x2b,0x8e,0x25,0xdd,0xd4,0x96,0x72,0x05,0xaa,0x0e };
    const uint8_t PLAINTEXT[] = { 0x36,0xa9,0x34,0x57,0xb1,0x70,0x04,0xbd,0xde,0xec,0xbe,0x71,0xec,0xa0,0x12,0xc4 };
    const uint8_t CIPHERTEXT[] = { 0xa2,0xa1,0x06,0xaa,0x47,0x5c,0xf1,0x2e,0x3e,0xaa,0xa1,0x89,0x65,0x12,0x72,0xff };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-75", "[CBC][MCT][256][DECRYPT][n75]") {
    const uint8_t KEY[] = { 0xa2,0x53,0x8f,0x4f,0xb3,0xd2,0x78,0x08,0xbf,0x8c,0x8d,0xbe,0x4f,0x3c,0xb6,0x2a,0x32,0xc9,0x1b,0xe2,0x83,0x14,0x93,0x78,0xfe,0x74,0x09,0x1c,0x70,0xb2,0x0d,0x9d };
    const uint8_t IV[] = { 0x36,0xa9,0x34,0x57,0xb1,0x70,0x04,0xbd,0xde,0xec,0xbe,0x71,0xec,0xa0,0x12,0xc4 };
    const uint8_t PLAINTEXT[] = { 0x40,0xa7,0xb5,0x8b,0x48,0xea,0x5a,0x2d,0xf5,0x6f,0x72,0x83,0xe3,0x1f,0x0e,0x95 };
    const uint8_t CIPHERTEXT[] = { 0xd2,0xd3,0x65,0x6d,0xd7,0xa6,0x1f,0x68,0xa7,0xb4,0x77,0xba,0xc9,0x17,0x96,0xdc };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-76", "[CBC][MCT][256][DECRYPT][n76]") {
    const uint8_t KEY[] = { 0x6a,0x1a,0x79,0x82,0x95,0x1b,0x72,0xa8,0x95,0x51,0xdd,0xaa,0x18,0x2b,0xe0,0x68,0x72,0x6e,0xae,0x69,0xcb,0xfe,0xc9,0x55,0x0b,0x1b,0x7b,0x9f,0x93,0xad,0x03,0x08 };
    const uint8_t IV[] = { 0x40,0xa7,0xb5,0x8b,0x48,0xea,0x5a,0x2d,0xf5,0x6f,0x72,0x83,0xe3,0x1f,0x0e,0x95 };
    const uint8_t PLAINTEXT[] = { 0x38,0x42,0x0e,0xae,0xc7,0xec,0x91,0xe8,0x4f,0xec,0xf7,0xe8,0x2d,0xd7,0x9c,0x44 };
    const uint8_t CIPHERTEXT[] = { 0xc8,0x49,0xf6,0xcd,0x26,0xc9,0x0a,0xa0,0x2a,0xdd,0x50,0x14,0x57,0x17,0x56,0x42 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-77", "[CBC][MCT][256][DECRYPT][n77]") {
    const uint8_t KEY[] = { 0x2a,0x9a,0xcd,0xd6,0x2e,0x8a,0x5a,0x98,0x6f,0xa0,0x3a,0x52,0xa8,0x6d,0x33,0x86,0x4a,0x2c,0xa0,0xc7,0x0c,0x12,0x58,0xbd,0x44,0xf7,0x8c,0x77,0xbe,0x7a,0x9f,0x4c };
    const uint8_t IV[] = { 0x38,0x42,0x0e,0xae,0xc7,0xec,0x91,0xe8,0x4f,0xec,0xf7,0xe8,0x2d,0xd7,0x9c,0x44 };
    const uint8_t PLAINTEXT[] = { 0x0a,0x05,0x94,0x40,0x2e,0xfc,0xe9,0x50,0xe9,0x64,0xbf,0x19,0x2d,0xfc,0xdf,0x57 };
    const uint8_t CIPHERTEXT[] = { 0x40,0x80,0xb4,0x54,0xbb,0x91,0x28,0x30,0xfa,0xf1,0xe7,0xf8,0xb0,0x46,0xd3,0xee };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-78", "[CBC][MCT][256][DECRYPT][n78]") {
    const uint8_t KEY[] = { 0x85,0xcf,0x1f,0xee,0x85,0x7f,0xac,0x38,0x32,0xd8,0x79,0xc6,0x78,0x68,0x07,0x08,0x40,0x29,0x34,0x87,0x22,0xee,0xb1,0xed,0xad,0x93,0x33,0x6e,0x93,0x86,0x40,0x1b };
    const uint8_t IV[] = { 0x0a,0x05,0x94,0x40,0x2e,0xfc,0xe9,0x50,0xe9,0x64,0xbf,0x19,0x2d,0xfc,0xdf,0x57 };
    const uint8_t PLAINTEXT[] = { 0xdc,0x51,0x53,0xdd,0x42,0x49,0xc3,0x2d,0xbe,0xb9,0x15,0x30,0xc0,0x89,0xfd,0xaa };
    const uint8_t CIPHERTEXT[] = { 0xaf,0x55,0xd2,0x38,0xab,0xf5,0xf6,0xa0,0x5d,0x78,0x43,0x94,0xd0,0x05,0x34,0x8e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-79", "[CBC][MCT][256][DECRYPT][n79]") {
    const uint8_t KEY[] = { 0xa0,0x35,0x17,0x03,0xf6,0xf1,0x98,0x64,0x8f,0xd5,0x41,0x78,0xbd,0x2d,0xe8,0x39,0x9c,0x78,0x67,0x5a,0x60,0xa7,0x72,0xc0,0x13,0x2a,0x26,0x5e,0x53,0x0f,0xbd,0xb1 };
    const uint8_t IV[] = { 0xdc,0x51,0x53,0xdd,0x42,0x49,0xc3,0x2d,0xbe,0xb9,0x15,0x30,0xc0,0x89,0xfd,0xaa };
    const uint8_t PLAINTEXT[] = { 0x92,0x02,0x43,0xbb,0xe7,0xed,0x02,0x14,0x99,0x4f,0x5e,0x14,0x20,0xf1,0xc8,0x0f };
    const uint8_t CIPHERTEXT[] = { 0x25,0xfa,0x08,0xed,0x73,0x8e,0x34,0x5c,0xbd,0x0d,0x38,0xbe,0xc5,0x45,0xef,0x31 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-80", "[CBC][MCT][256][DECRYPT][n80]") {
    const uint8_t KEY[] = { 0x2f,0x97,0xaf,0x0c,0xf8,0x60,0x40,0x31,0x29,0xaa,0x27,0x10,0xa0,0xc2,0x8e,0xd6,0x0e,0x7a,0x24,0xe1,0x87,0x4a,0x70,0xd4,0x8a,0x65,0x78,0x4a,0x73,0xfe,0x75,0xbe };
    const uint8_t IV[] = { 0x92,0x02,0x43,0xbb,0xe7,0xed,0x02,0x14,0x99,0x4f,0x5e,0x14,0x20,0xf1,0xc8,0x0f };
    const uint8_t PLAINTEXT[] = { 0x57,0xfb,0xff,0x60,0xda,0x6f,0x06,0x10,0xb2,0xca,0x67,0x78,0xb8,0xdc,0xaa,0x7a };
    const uint8_t CIPHERTEXT[] = { 0x8f,0xa2,0xb8,0x0f,0x0e,0x91,0xd8,0x55,0xa6,0x7f,0x66,0x68,0x1d,0xef,0x66,0xef };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-81", "[CBC][MCT][256][DECRYPT][n81]") {
    const uint8_t KEY[] = { 0x92,0xfb,0x35,0xe1,0x34,0xa3,0x4b,0x81,0x92,0x9d,0xa1,0x3b,0xb8,0xe7,0x7f,0x1d,0x59,0x81,0xdb,0x81,0x5d,0x25,0x76,0xc4,0x38,0xaf,0x1f,0x32,0xcb,0x22,0xdf,0xc4 };
    const uint8_t IV[] = { 0x57,0xfb,0xff,0x60,0xda,0x6f,0x06,0x10,0xb2,0xca,0x67,0x78,0xb8,0xdc,0xaa,0x7a };
    const uint8_t PLAINTEXT[] = { 0x21,0x99,0x91,0x10,0xfa,0x31,0xbd,0x33,0x6f,0x5f,0xc2,0xe1,0x67,0x3e,0x21,0x99 };
    const uint8_t CIPHERTEXT[] = { 0xbd,0x6c,0x9a,0xed,0xcc,0xc3,0x0b,0xb0,0xbb,0x37,0x86,0x2b,0x18,0x25,0xf1,0xcb };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-82", "[CBC][MCT][256][DECRYPT][n82]") {
    const uint8_t KEY[] = { 0x56,0x33,0x2e,0x6b,0x81,0x5c,0xa5,0xff,0x27,0x65,0xe7,0x4a,0x30,0x62,0x13,0xa3,0x78,0x18,0x4a,0x91,0xa7,0x14,0xcb,0xf7,0x57,0xf0,0xdd,0xd3,0xac,0x1c,0xfe,0x5d };
    const uint8_t IV[] = { 0x21,0x99,0x91,0x10,0xfa,0x31,0xbd,0x33,0x6f,0x5f,0xc2,0xe1,0x67,0x3e,0x21,0x99 };
    const uint8_t PLAINTEXT[] = { 0x0e,0x0b,0x86,0x30,0x42,0x62,0x3b,0x40,0xda,0x92,0x92,0x97,0x0f,0x7b,0xfd,0x1f };
    const uint8_t CIPHERTEXT[] = { 0xc4,0xc8,0x1b,0x8a,0xb5,0xff,0xee,0x7e,0xb5,0xf8,0x46,0x71,0x88,0x85,0x6c,0xbe };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-83", "[CBC][MCT][256][DECRYPT][n83]") {
    const uint8_t KEY[] = { 0x3b,0xc1,0x96,0x61,0x08,0xe0,0x19,0x31,0x6b,0x37,0xd3,0x23,0xbf,0xcd,0x5d,0x3d,0x76,0x13,0xcc,0xa1,0xe5,0x76,0xf0,0xb7,0x8d,0x62,0x4f,0x44,0xa3,0x67,0x03,0x42 };
    const uint8_t IV[] = { 0x0e,0x0b,0x86,0x30,0x42,0x62,0x3b,0x40,0xda,0x92,0x92,0x97,0x0f,0x7b,0xfd,0x1f };
    const uint8_t PLAINTEXT[] = { 0x93,0xf5,0xef,0xa9,0xe9,0x0f,0xb0,0x1e,0x7f,0x86,0xc3,0x75,0x0b,0xe1,0x54,0xc1 };
    const uint8_t CIPHERTEXT[] = { 0x6d,0xf2,0xb8,0x0a,0x89,0xbc,0xbc,0xce,0x4c,0x52,0x34,0x69,0x8f,0xaf,0x4e,0x9e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-84", "[CBC][MCT][256][DECRYPT][n84]") {
    const uint8_t KEY[] = { 0x42,0xf6,0x93,0xef,0x5a,0xd1,0xce,0xde,0x3f,0x7e,0x5a,0x95,0x97,0x73,0x7c,0x4e,0xe5,0xe6,0x23,0x08,0x0c,0x79,0x40,0xa9,0xf2,0xe4,0x8c,0x31,0xa8,0x86,0x57,0x83 };
    const uint8_t IV[] = { 0x93,0xf5,0xef,0xa9,0xe9,0x0f,0xb0,0x1e,0x7f,0x86,0xc3,0x75,0x0b,0xe1,0x54,0xc1 };
    const uint8_t PLAINTEXT[] = { 0x3d,0xa0,0xef,0x89,0x78,0xfa,0xc7,0x34,0x97,0x4a,0xcf,0x0c,0xf0,0x72,0xa2,0xdb };
    const uint8_t CIPHERTEXT[] = { 0x79,0x37,0x05,0x8e,0x52,0x31,0xd7,0xef,0x54,0x49,0x89,0xb6,0x28,0xbe,0x21,0x73 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-85", "[CBC][MCT][256][DECRYPT][n85]") {
    const uint8_t KEY[] = { 0xc1,0x73,0x9f,0xa8,0x54,0xfd,0x5d,0x71,0xb9,0x21,0x77,0x6e,0x7e,0xc5,0xf6,0xea,0xd8,0x46,0xcc,0x81,0x74,0x83,0x87,0x9d,0x65,0xae,0x43,0x3d,0x58,0xf4,0xf5,0x58 };
    const uint8_t IV[] = { 0x3d,0xa0,0xef,0x89,0x78,0xfa,0xc7,0x34,0x97,0x4a,0xcf,0x0c,0xf0,0x72,0xa2,0xdb };
    const uint8_t PLAINTEXT[] = { 0xbe,0x6b,0xc9,0xc5,0x3d,0x4f,0xd2,0x24,0x54,0x6c,0x9a,0x63,0x19,0x47,0x58,0xa2 };
    const uint8_t CIPHERTEXT[] = { 0x83,0x85,0x0c,0x47,0x0e,0x2c,0x93,0xaf,0x86,0x5f,0x2d,0xfb,0xe9,0xb6,0x8a,0xa4 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-86", "[CBC][MCT][256][DECRYPT][n86]") {
    const uint8_t KEY[] = { 0x23,0x3b,0x9a,0x68,0xb0,0xcc,0xa9,0x4b,0xd3,0x01,0x71,0xfb,0xbe,0xdf,0x61,0x00,0x66,0x2d,0x05,0x44,0x49,0xcc,0x55,0xb9,0x31,0xc2,0xd9,0x5e,0x41,0xb3,0xad,0xfa };
    const uint8_t IV[] = { 0xbe,0x6b,0xc9,0xc5,0x3d,0x4f,0xd2,0x24,0x54,0x6c,0x9a,0x63,0x19,0x47,0x58,0xa2 };
    const uint8_t PLAINTEXT[] = { 0x10,0x69,0x44,0x50,0x2d,0x77,0xe1,0x3b,0xba,0x01,0x39,0xd3,0xf6,0xac,0x79,0x04 };
    const uint8_t CIPHERTEXT[] = { 0xe2,0x48,0x05,0xc0,0xe4,0x31,0xf4,0x3a,0x6a,0x20,0x06,0x95,0xc0,0x1a,0x97,0xea };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-87", "[CBC][MCT][256][DECRYPT][n87]") {
    const uint8_t KEY[] = { 0xc4,0x40,0x05,0x1f,0x21,0x6a,0x8b,0xaa,0xd7,0x23,0x6d,0x36,0x8b,0x9c,0xc5,0xe1,0x76,0x44,0x41,0x14,0x64,0xbb,0xb4,0x82,0x8b,0xc3,0xe0,0x8d,0xb7,0x1f,0xd4,0xfe };
    const uint8_t IV[] = { 0x10,0x69,0x44,0x50,0x2d,0x77,0xe1,0x3b,0xba,0x01,0x39,0xd3,0xf6,0xac,0x79,0x04 };
    const uint8_t PLAINTEXT[] = { 0x31,0x49,0x4f,0x50,0x88,0x6a,0x20,0x47,0x12,0xa4,0xf3,0x0a,0xef,0xdd,0xbd,0xeb };
    const uint8_t CIPHERTEXT[] = { 0xe7,0x7b,0x9f,0x77,0x91,0xa6,0x22,0xe1,0x04,0x22,0x1c,0xcd,0x35,0x43,0xa4,0xe1 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-88", "[CBC][MCT][256][DECRYPT][n88]") {
    const uint8_t KEY[] = { 0x24,0xae,0x05,0x8d,0x05,0x35,0x91,0x0a,0x9b,0xf3,0x9a,0x76,0x51,0xea,0x21,0x68,0x47,0x0d,0x0e,0x44,0xec,0xd1,0x94,0xc5,0x99,0x67,0x13,0x87,0x58,0xc2,0x69,0x15 };
    const uint8_t IV[] = { 0x31,0x49,0x4f,0x50,0x88,0x6a,0x20,0x47,0x12,0xa4,0xf3,0x0a,0xef,0xdd,0xbd,0xeb };
    const uint8_t PLAINTEXT[] = { 0x31,0xed,0x4c,0x77,0xf5,0x00,0xf7,0x8e,0x20,0x54,0x5c,0xb4,0x2a,0x90,0x7c,0x93 };
    const uint8_t CIPHERTEXT[] = { 0xe0,0xee,0x00,0x92,0x24,0x5f,0x1a,0xa0,0x4c,0xd0,0xf7,0x40,0xda,0x76,0xe4,0x89 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-89", "[CBC][MCT][256][DECRYPT][n89]") {
    const uint8_t KEY[] = { 0x7c,0x58,0x6c,0xe6,0x98,0x5d,0x9c,0x3e,0x73,0xc7,0x5f,0xd8,0x7c,0xa5,0xd4,0x59,0x76,0xe0,0x42,0x33,0x19,0xd1,0x63,0x4b,0xb9,0x33,0x4f,0x33,0x72,0x52,0x15,0x86 };
    const uint8_t IV[] = { 0x31,0xed,0x4c,0x77,0xf5,0x00,0xf7,0x8e,0x20,0x54,0x5c,0xb4,0x2a,0x90,0x7c,0x93 };
    const uint8_t PLAINTEXT[] = { 0xb2,0x2b,0x10,0x1d,0x16,0xb7,0x60,0x8c,0x3f,0x28,0x3b,0x01,0xcc,0x53,0xb1,0x56 };
    const uint8_t CIPHERTEXT[] = { 0x58,0xf6,0x69,0x6b,0x9d,0x68,0x0d,0x34,0xe8,0x34,0xc5,0xae,0x2d,0x4f,0xf5,0x31 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-90", "[CBC][MCT][256][DECRYPT][n90]") {
    const uint8_t KEY[] = { 0xe9,0xee,0x1e,0xc0,0x9f,0xd4,0x4a,0xbe,0x60,0x79,0xbb,0xc6,0xbe,0x77,0xdc,0x37,0xc4,0xcb,0x52,0x2e,0x0f,0x66,0x03,0xc7,0x86,0x1b,0x74,0x32,0xbe,0x01,0xa4,0xd0 };
    const uint8_t IV[] = { 0xb2,0x2b,0x10,0x1d,0x16,0xb7,0x60,0x8c,0x3f,0x28,0x3b,0x01,0xcc,0x53,0xb1,0x56 };
    const uint8_t PLAINTEXT[] = { 0xd6,0xf6,0x13,0xa6,0x90,0x6c,0xb3,0xa9,0x09,0xb9,0xe6,0xe2,0xdd,0xba,0xd2,0xc0 };
    const uint8_t CIPHERTEXT[] = { 0x95,0xb6,0x72,0x26,0x07,0x89,0xd6,0x80,0x13,0xbe,0xe4,0x1e,0xc2,0xd2,0x08,0x6e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-91", "[CBC][MCT][256][DECRYPT][n91]") {
    const uint8_t KEY[] = { 0x7b,0x18,0xea,0x92,0xb1,0x6b,0xa2,0x48,0xb8,0xef,0xcf,0xb1,0x00,0x17,0x7a,0x81,0x12,0x3d,0x41,0x88,0x9f,0x0a,0xb0,0x6e,0x8f,0xa2,0x92,0xd0,0x63,0xbb,0x76,0x10 };
    const uint8_t IV[] = { 0xd6,0xf6,0x13,0xa6,0x90,0x6c,0xb3,0xa9,0x09,0xb9,0xe6,0xe2,0xdd,0xba,0xd2,0xc0 };
    const uint8_t PLAINTEXT[] = { 0xb9,0x7b,0x63,0xfc,0x7a,0x0c,0x8d,0x43,0xbb,0xd3,0x52,0xf9,0xab,0xd5,0xb7,0x42 };
    const uint8_t CIPHERTEXT[] = { 0x92,0xf6,0xf4,0x52,0x2e,0xbf,0xe8,0xf6,0xd8,0x96,0x74,0x77,0xbe,0x60,0xa6,0xb6 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-92", "[CBC][MCT][256][DECRYPT][n92]") {
    const uint8_t KEY[] = { 0xb1,0xfa,0x00,0xdc,0xcb,0x95,0x62,0x17,0xae,0xe8,0x24,0x84,0x6d,0xa7,0xa3,0x65,0xab,0x46,0x22,0x74,0xe5,0x06,0x3d,0x2d,0x34,0x71,0xc0,0x29,0xc8,0x6e,0xc1,0x52 };
    const uint8_t IV[] = { 0xb9,0x7b,0x63,0xfc,0x7a,0x0c,0x8d,0x43,0xbb,0xd3,0x52,0xf9,0xab,0xd5,0xb7,0x42 };
    const uint8_t PLAINTEXT[] = { 0x75,0x1f,0x3b,0x2b,0xac,0xad,0x53,0x53,0x0d,0x95,0xc7,0xcb,0x23,0xc5,0xad,0x7e };
    const uint8_t CIPHERTEXT[] = { 0xca,0xe2,0xea,0x4e,0x7a,0xfe,0xc0,0x5f,0x16,0x07,0xeb,0x35,0x6d,0xb0,0xd9,0xe4 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-93", "[CBC][MCT][256][DECRYPT][n93]") {
    const uint8_t KEY[] = { 0xfd,0x35,0x0a,0x48,0x5c,0x0b,0xdc,0x9c,0x03,0x39,0x2a,0xaf,0x5b,0xec,0x62,0xcc,0xde,0x59,0x19,0x5f,0x49,0xab,0x6e,0x7e,0x39,0xe4,0x07,0xe2,0xeb,0xab,0x6c,0x2c };
    const uint8_t IV[] = { 0x75,0x1f,0x3b,0x2b,0xac,0xad,0x53,0x53,0x0d,0x95,0xc7,0xcb,0x23,0xc5,0xad,0x7e };
    const uint8_t PLAINTEXT[] = { 0x0b,0xd7,0xf3,0x25,0xfb,0xb7,0x85,0x73,0x2f,0x77,0x1b,0xca,0x50,0x6e,0xce,0x3c };
    const uint8_t CIPHERTEXT[] = { 0x4c,0xcf,0x0a,0x94,0x97,0x9e,0xbe,0x8b,0xad,0xd1,0x0e,0x2b,0x36,0x4b,0xc1,0xa9 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-94", "[CBC][MCT][256][DECRYPT][n94]") {
    const uint8_t KEY[] = { 0xd3,0x13,0xb5,0xb6,0x05,0x52,0x76,0x1b,0xd5,0xe7,0xa2,0x7e,0xac,0x77,0xf2,0xeb,0xd5,0x8e,0xea,0x7a,0xb2,0x1c,0xeb,0x0d,0x16,0x93,0x1c,0x28,0xbb,0xc5,0xa2,0x10 };
    const uint8_t IV[] = { 0x0b,0xd7,0xf3,0x25,0xfb,0xb7,0x85,0x73,0x2f,0x77,0x1b,0xca,0x50,0x6e,0xce,0x3c };
    const uint8_t PLAINTEXT[] = { 0x8d,0x8e,0x37,0xf4,0xfa,0x7a,0x14,0xbd,0xfa,0x5e,0x5a,0xd3,0x02,0x7a,0x30,0x19 };
    const uint8_t CIPHERTEXT[] = { 0x2e,0x26,0xbf,0xfe,0x59,0x59,0xaa,0x87,0xd6,0xde,0x88,0xd1,0xf7,0x9b,0x90,0x27 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-95", "[CBC][MCT][256][DECRYPT][n95]") {
    const uint8_t KEY[] = { 0xaf,0x7d,0x1d,0x6d,0xd1,0xcc,0x4e,0x99,0x5f,0x9d,0xec,0x47,0xae,0x41,0xa7,0x32,0x58,0x00,0xdd,0x8e,0x48,0x66,0xff,0xb0,0xec,0xcd,0x46,0xfb,0xb9,0xbf,0x92,0x09 };
    const uint8_t IV[] = { 0x8d,0x8e,0x37,0xf4,0xfa,0x7a,0x14,0xbd,0xfa,0x5e,0x5a,0xd3,0x02,0x7a,0x30,0x19 };
    const uint8_t PLAINTEXT[] = { 0x28,0x5c,0x97,0xd1,0x40,0xb8,0xd0,0x80,0x1d,0xe2,0xfe,0x57,0x5a,0xd0,0x6b,0xca };
    const uint8_t CIPHERTEXT[] = { 0x7c,0x6e,0xa8,0xdb,0xd4,0x9e,0x38,0x82,0x8a,0x7a,0x4e,0x39,0x02,0x36,0x55,0xd9 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-96", "[CBC][MCT][256][DECRYPT][n96]") {
    const uint8_t KEY[] = { 0xae,0x57,0xc1,0xa7,0x07,0xe9,0xe2,0x20,0x18,0xaa,0xa2,0xd4,0xad,0x7f,0x40,0xff,0x70,0x5c,0x4a,0x5f,0x08,0xde,0x2f,0x30,0xf1,0x2f,0xb8,0xac,0xe3,0x6f,0xf9,0xc3 };
    const uint8_t IV[] = { 0x28,0x5c,0x97,0xd1,0x40,0xb8,0xd0,0x80,0x1d,0xe2,0xfe,0x57,0x5a,0xd0,0x6b,0xca };
    const uint8_t PLAINTEXT[] = { 0xdd,0xc1,0x56,0xc9,0x85,0x27,0x16,0xe8,0xbe,0x07,0x53,0x95,0xc0,0x88,0xe0,0x83 };
    const uint8_t CIPHERTEXT[] = { 0x01,0x2a,0xdc,0xca,0xd6,0x25,0xac,0xb9,0x47,0x37,0x4e,0x93,0x03,0x3e,0xe7,0xcd };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-97", "[CBC][MCT][256][DECRYPT][n97]") {
    const uint8_t KEY[] = { 0x16,0xf7,0x0b,0xe7,0x1d,0x62,0xdc,0xa0,0xc5,0xea,0x0d,0xd5,0xd1,0xda,0x4a,0xc5,0xad,0x9d,0x1c,0x96,0x8d,0xf9,0x39,0xd8,0x4f,0x28,0xeb,0x39,0x23,0xe7,0x19,0x40 };
    const uint8_t IV[] = { 0xdd,0xc1,0x56,0xc9,0x85,0x27,0x16,0xe8,0xbe,0x07,0x53,0x95,0xc0,0x88,0xe0,0x83 };
    const uint8_t PLAINTEXT[] = { 0xab,0x67,0x18,0x45,0x85,0x5b,0x82,0x36,0xc0,0x39,0x88,0xc7,0x65,0x67,0x44,0xad };
    const uint8_t CIPHERTEXT[] = { 0xb8,0xa0,0xca,0x40,0x1a,0x8b,0x3e,0x80,0xdd,0x40,0xaf,0x01,0x7c,0xa5,0x0a,0x3a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-98", "[CBC][MCT][256][DECRYPT][n98]") {
    const uint8_t KEY[] = { 0xd5,0x12,0x5a,0x5a,0x52,0x0e,0x6e,0xf5,0xdf,0x53,0xf5,0xf7,0xca,0x6e,0x4b,0xb0,0x06,0xfa,0x04,0xd3,0x08,0xa2,0xbb,0xee,0x8f,0x11,0x63,0xfe,0x46,0x80,0x5d,0xed };
    const uint8_t IV[] = { 0xab,0x67,0x18,0x45,0x85,0x5b,0x82,0x36,0xc0,0x39,0x88,0xc7,0x65,0x67,0x44,0xad };
    const uint8_t PLAINTEXT[] = { 0xff,0xde,0x35,0x06,0x27,0x9c,0xbb,0x1d,0x59,0xba,0x65,0x81,0x4f,0xd9,0x24,0x64 };
    const uint8_t CIPHERTEXT[] = { 0xc3,0xe5,0x51,0xbd,0x4f,0x6c,0xb2,0x55,0x1a,0xb9,0xf8,0x22,0x1b,0xb4,0x01,0x75 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT256-DECRYPT-99", "[CBC][MCT][256][DECRYPT][n99]") {
    const uint8_t KEY[] = { 0x90,0xe2,0x93,0xec,0x21,0xf4,0x22,0x0d,0x8b,0x97,0x26,0x90,0x6b,0x83,0xbb,0xd6,0xf9,0x24,0x31,0xd5,0x2f,0x3e,0x00,0xf3,0xd6,0xab,0x06,0x7f,0x09,0x59,0x79,0x89 };
    const uint8_t IV[] = { 0xff,0xde,0x35,0x06,0x27,0x9c,0xbb,0x1d,0x59,0xba,0x65,0x81,0x4f,0xd9,0x24,0x64 };
    const uint8_t PLAINTEXT[] = { 0x9b,0xe8,0x31,0x79,0x9a,0x79,0xb0,0x95,0x52,0x41,0xf3,0x08,0xf0,0xd5,0xb2,0xe1 };
    const uint8_t CIPHERTEXT[] = { 0x45,0xf0,0xc9,0xb6,0x73,0xfa,0x4c,0xf8,0x54,0xc4,0xd3,0x67,0xa1,0xed,0xf0,0x66 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

