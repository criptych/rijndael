#include "rijndael.h"
#include "catch.hpp"
#include <cstring>

static inline std::string buf2str(const uint8_t *buf, size_t len) {
    std::ostringstream ss; ss << std::hex << std::setfill('0');
    for (size_t i = 0; i < len; ++i) {
        ss << std::setw(2) << static_cast<int>(buf[i]) << ' ';
    }
    return ss.str();
}

TEST_CASE("OFBMMT256-ENCRYPT-0", "[OFB][MMT][256][ENCRYPT][n0]") {
    const uint8_t KEY[] = { 0x6f,0x41,0x9b,0x4c,0x68,0x3a,0x44,0xd6,0x7d,0x23,0x4e,0xaa,0x6b,0x57,0xf6,0x22,0xf9,0x12,0xde,0x65,0x7d,0xdd,0xb2,0x80,0xa1,0x4d,0x0c,0xb9,0x67,0xed,0x95,0x1f };
    const uint8_t IV[] = { 0x19,0xb8,0x88,0x80,0x0f,0xf1,0xd0,0x11,0x61,0x24,0xf7,0x9d,0xfa,0xe5,0x4f,0xfe };
    const uint8_t PLAINTEXT[] = { 0x3d,0x12,0x98,0x9f,0xaf,0x41,0xba,0x75,0xbf,0xa7,0x0e,0x2b,0xcc,0x2f,0xa2,0x22 };
    const uint8_t CIPHERTEXT[] = { 0x2d,0x6b,0x00,0x5e,0x8d,0x3b,0xc6,0xea,0x9f,0x62,0xdc,0xa3,0x6d,0x47,0xae,0xa5 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMMT256-ENCRYPT-1", "[OFB][MMT][256][ENCRYPT][n1]") {
    const uint8_t KEY[] = { 0xa9,0x25,0x77,0x60,0x79,0x68,0xdb,0xee,0xe1,0x35,0xa2,0x4e,0xdc,0x2f,0x32,0x63,0x92,0x6d,0x97,0x14,0x1f,0x2c,0x6d,0x9f,0x96,0xc0,0x01,0x2f,0x45,0xd1,0xb3,0xb0 };
    const uint8_t IV[] = { 0x97,0xbf,0xeb,0xec,0x0c,0x2e,0x77,0x04,0xd0,0x02,0xdc,0x6a,0x1f,0xd3,0x69,0x01 };
    const uint8_t PLAINTEXT[] = { 0xbb,0x28,0x70,0x5e,0xf9,0xe5,0x15,0x1a,0xfc,0x73,0xe3,0x88,0x6f,0x25,0xf5,0x21,0x75,0xdb,0xb5,0x7a,0xe3,0x6e,0xac,0xc5,0xac,0x4e,0x98,0x9b,0x9d,0x69,0xbf,0xf9 };
    const uint8_t CIPHERTEXT[] = { 0x94,0x41,0x69,0xb5,0x10,0xb2,0x82,0x55,0x05,0xa1,0x4b,0x22,0xea,0xba,0x74,0x4c,0x19,0xee,0x30,0xda,0x6e,0xd6,0x97,0xe3,0xb8,0x79,0x42,0x5f,0x26,0x80,0x82,0x89 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMMT256-ENCRYPT-2", "[OFB][MMT][256][ENCRYPT][n2]") {
    const uint8_t KEY[] = { 0xc4,0xc7,0xfa,0xd6,0x53,0x5c,0xb8,0x71,0x4a,0x5c,0x40,0x77,0x9a,0x8b,0xa1,0xd2,0x53,0x3e,0x23,0xb4,0xb2,0x58,0x73,0x2a,0x5b,0x78,0x01,0xf4,0xe3,0x71,0xa7,0x94 };
    const uint8_t IV[] = { 0x5e,0xb9,0x33,0x13,0xb8,0x71,0xff,0x16,0xb9,0x8a,0x9b,0xcb,0x43,0x33,0x0d,0x6f };
    const uint8_t PLAINTEXT[] = { 0x6d,0x0b,0xb0,0x79,0x63,0x84,0x71,0xe9,0x39,0xd4,0x53,0x14,0x86,0xc1,0x4c,0x25,0x9a,0xee,0xc6,0xf3,0xc0,0x0d,0xfd,0xd6,0xc0,0x50,0xa8,0xba,0xa8,0x20,0xdb,0x71,0xcc,0x12,0x2c,0x4e,0x0c,0x17,0x15,0xef,0x55,0xf3,0x99,0x5a,0x6b,0xf0,0x2a,0x4c };
    const uint8_t CIPHERTEXT[] = { 0x0f,0x54,0x61,0x71,0x59,0xd0,0x3f,0xfc,0x1b,0xfa,0xfb,0x60,0x29,0x30,0xd7,0x00,0xf4,0xa4,0xa8,0xe6,0xdd,0x93,0x94,0x46,0x64,0xd2,0x19,0xc4,0xc5,0x4d,0xde,0x1b,0x04,0x53,0xe1,0x73,0xf5,0x18,0x74,0xae,0xfd,0x64,0xa2,0xe1,0xe2,0x76,0x13,0xb0 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMMT256-ENCRYPT-3", "[OFB][MMT][256][ENCRYPT][n3]") {
    const uint8_t KEY[] = { 0x7c,0x44,0x24,0xcf,0x1a,0xc4,0xd7,0x5a,0xce,0xeb,0xdb,0x22,0x38,0xa9,0xf0,0x38,0x34,0x38,0xf4,0x53,0xaf,0xa5,0x57,0x72,0xb9,0x8c,0xcf,0xc3,0xdc,0x23,0x4d,0xc4 };
    const uint8_t IV[] = { 0x34,0x83,0x82,0x73,0xc7,0x84,0x8b,0x70,0xc6,0xe1,0xab,0xad,0x79,0xce,0x13,0x25 };
    const uint8_t PLAINTEXT[] = { 0xcb,0x9a,0xc8,0x9b,0x78,0x90,0x2c,0xe0,0x9d,0x84,0x67,0x29,0x11,0x81,0xa7,0x02,0xfd,0x9a,0x04,0x30,0xe2,0xdc,0xa9,0x44,0xde,0x81,0x35,0x70,0x2b,0x66,0x61,0x9a,0xe8,0xc0,0xe2,0xaf,0x1c,0x0a,0x91,0x3a,0xf8,0x42,0xc9,0x35,0x5c,0x54,0x10,0x1e,0x9d,0xd7,0xfa,0x4e,0x86,0xf7,0x4b,0x87,0x9c,0xb2,0x5c,0xcc,0xa6,0x48,0xc0,0x75 };
    const uint8_t CIPHERTEXT[] = { 0x5d,0xf0,0x3b,0x8d,0x91,0xcb,0x0e,0x5d,0xa8,0x6b,0xa1,0x08,0xea,0xd8,0x7e,0xc7,0x62,0xc9,0x07,0x67,0xac,0xe9,0x6b,0xe6,0x05,0x98,0xb4,0xef,0xe8,0xf3,0xd3,0xf8,0x38,0x38,0x27,0xa5,0x99,0x18,0x0f,0xfd,0xdd,0xb3,0xe9,0x41,0x51,0xe2,0x2f,0xee,0xda,0x3c,0x90,0x65,0x1a,0x69,0x7f,0x38,0x34,0xe0,0x36,0xe4,0x4d,0x05,0x06,0xb2 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMMT256-ENCRYPT-4", "[OFB][MMT][256][ENCRYPT][n4]") {
    const uint8_t KEY[] = { 0x31,0x8a,0xa7,0xc7,0x30,0x06,0xff,0x95,0x84,0x0f,0x17,0xf2,0xb9,0xcf,0x01,0xfe,0x7f,0x03,0x11,0x05,0xff,0x01,0xda,0xa6,0x6f,0xf9,0x58,0x34,0xe4,0x7b,0x6f,0x5c };
    const uint8_t IV[] = { 0x0e,0x28,0xbd,0x06,0x03,0xb3,0x1c,0x26,0x25,0x03,0x45,0xa1,0x18,0x40,0x8f,0xfc };
    const uint8_t PLAINTEXT[] = { 0x25,0x7f,0x3f,0xc8,0x45,0x37,0x15,0x8b,0x68,0xc8,0xaf,0x11,0x1b,0x1e,0x9e,0xb4,0x1f,0x88,0x41,0x68,0x6a,0xb1,0xe9,0x4c,0x6f,0xd1,0x3a,0x7f,0x9f,0x24,0xd5,0x35,0x30,0x9c,0x34,0x0a,0x1d,0xd3,0xd4,0x96,0x6e,0x43,0x9a,0x41,0xb9,0xb9,0x70,0x58,0xe9,0x07,0x2f,0x61,0x3e,0xf9,0xc1,0xac,0x95,0x8b,0x87,0x2b,0xea,0x59,0xf8,0x83,0x1b,0x57,0x8b,0x63,0xee,0xc2,0xd7,0x15,0x56,0x57,0xf9,0x53,0xf2,0xc2,0x37,0x5b };
    const uint8_t CIPHERTEXT[] = { 0xba,0x4e,0xbc,0xdc,0x89,0x4e,0x6d,0xe5,0x4f,0x8f,0x1d,0x7c,0xcb,0xb1,0x9e,0x13,0xd2,0xae,0x0c,0xa6,0x6c,0x05,0xc1,0x0e,0x2f,0x90,0xba,0xd2,0xe9,0xb8,0xdb,0x94,0xee,0x77,0x70,0xc3,0x55,0x79,0x27,0x02,0x9d,0x49,0xfd,0x2b,0x3f,0x80,0xa0,0x10,0x25,0xaf,0x0e,0x7a,0x34,0x32,0x37,0xfb,0x62,0x5d,0xbd,0xee,0x85,0x36,0x7d,0xdf,0xbd,0x7f,0x66,0x64,0xb5,0x11,0xcd,0xc7,0xe8,0x32,0xb2,0xc4,0xd9,0x1f,0x1c,0x0e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMMT256-ENCRYPT-5", "[OFB][MMT][256][ENCRYPT][n5]") {
    const uint8_t KEY[] = { 0x1d,0x5d,0x44,0x0e,0xe1,0xc7,0x27,0x40,0xf7,0xbb,0xea,0x5d,0xb5,0x87,0xb0,0xc5,0x83,0x43,0x44,0xf0,0x91,0xb4,0x66,0x6a,0xc5,0x71,0x63,0x1b,0xf8,0x44,0xe9,0xcc };
    const uint8_t IV[] = { 0x10,0x88,0x12,0x8e,0xfc,0x7d,0x4c,0xdc,0x62,0x9d,0x38,0x74,0xc7,0x27,0xaa,0x2c };
    const uint8_t PLAINTEXT[] = { 0xe8,0xe8,0xed,0x02,0xc1,0x3b,0x98,0x52,0x27,0x4c,0xdc,0x60,0xa9,0xfe,0x5e,0x52,0xa9,0xbb,0x2f,0x05,0x60,0x69,0xf1,0xa2,0x23,0x99,0x3c,0x72,0xe4,0x01,0x40,0xf3,0xfb,0x2c,0xab,0x2b,0x27,0x70,0xcd,0x3c,0xcf,0x21,0xf9,0x39,0x8e,0x04,0x2f,0x38,0xef,0x06,0xf9,0xa8,0x75,0x2e,0x93,0xe5,0xdf,0xd1,0x4e,0x0a,0xa9,0x05,0x36,0x07,0xd6,0x57,0xf3,0xf3,0xed,0xc1,0xed,0xa3,0x42,0xd6,0xb4,0x7b,0x76,0x40,0x9e,0x84,0x41,0x6c,0xb2,0xbf,0x6f,0x84,0xc4,0xb9,0x29,0x9e,0xe2,0x60,0x76,0x33,0xef,0x15 };
    const uint8_t CIPHERTEXT[] = { 0xa8,0x62,0x29,0x3b,0xda,0x83,0x3a,0x8a,0xd5,0xf1,0x87,0x5d,0x1e,0xbf,0x5e,0x5d,0x25,0x02,0x03,0xa5,0xac,0x2f,0x6c,0x0f,0x02,0x9f,0x2c,0x51,0x5a,0x8a,0x73,0x10,0x18,0x62,0x68,0x06,0x82,0x06,0x47,0xad,0x08,0x8a,0x29,0xfd,0x3b,0x4e,0x92,0xb0,0x5f,0x47,0xd5,0x65,0x1e,0x37,0x67,0x86,0x9c,0x9d,0x28,0x90,0x10,0xc7,0x92,0x6a,0xd8,0xd6,0x4c,0x98,0xf2,0xa7,0x54,0x4e,0xdd,0xae,0x25,0x22,0x32,0x73,0x71,0x03,0x9c,0xf7,0x57,0xc6,0x59,0x16,0x49,0xb3,0xb5,0x9b,0x4e,0x5a,0x84,0xb5,0xa7,0xb2 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMMT256-ENCRYPT-6", "[OFB][MMT][256][ENCRYPT][n6]") {
    const uint8_t KEY[] = { 0x68,0x6b,0xda,0x53,0x07,0x3e,0x94,0xd8,0xa8,0x11,0x3a,0xc2,0x91,0xa0,0xee,0xc1,0x85,0x34,0x25,0x84,0x45,0x18,0x4d,0xcf,0x56,0x4d,0xb4,0xce,0x05,0x7e,0xa5,0xa9 };
    const uint8_t IV[] = { 0xf0,0xcd,0x1d,0x67,0x0c,0x03,0x1b,0xca,0x0d,0xc1,0xd6,0xf4,0xb3,0x9d,0x1f,0xc8 };
    const uint8_t PLAINTEXT[] = { 0x5d,0x20,0xb4,0xd0,0xa2,0xac,0x43,0xcb,0xf8,0x12,0x0f,0xa9,0xda,0x38,0x79,0x15,0xd7,0xc0,0xab,0x62,0x87,0x2d,0x2c,0xcc,0xc3,0x47,0xb1,0x01,0x15,0xc0,0x37,0xe0,0x6e,0x17,0x4e,0x80,0x17,0xbd,0xb8,0x74,0xea,0x77,0x32,0x4d,0xc2,0x03,0x92,0x61,0x30,0xfe,0x12,0xcb,0x70,0x05,0xec,0xb3,0x9b,0x1b,0x27,0xd0,0x1d,0x4a,0xb0,0x2a,0x6a,0x8d,0xac,0x25,0xed,0xee,0x0d,0xbb,0x41,0xec,0x63,0x09,0xa4,0x1f,0xf5,0x0d,0xa9,0x1f,0x11,0xae,0x2d,0xa1,0xa0,0xfc,0x8b,0xe3,0xfd,0xba,0x14,0x4b,0x08,0x1a,0xb9,0x4b,0x76,0xc7,0x0b,0x87,0x6b,0x28,0x66,0x3a,0x4a,0xe4,0x68,0xd5,0xcc,0xa1 };
    const uint8_t CIPHERTEXT[] = { 0xd2,0xdd,0xf0,0x6c,0xe0,0x95,0xf6,0x14,0x2c,0x2c,0x92,0x9c,0xac,0x8f,0xf6,0x3c,0x47,0x83,0x2d,0x47,0x4b,0xf5,0x16,0x0b,0x5e,0x71,0x42,0xaa,0x68,0xb9,0xc2,0x73,0x6b,0x6f,0x1a,0x49,0x39,0x5a,0x52,0x5f,0x06,0xca,0x56,0xdf,0x5f,0x79,0x41,0xac,0x39,0xa7,0x04,0x8d,0x89,0x1c,0xcc,0xa1,0x0e,0x6a,0x14,0x77,0x94,0x51,0xa7,0x40,0xb4,0x85,0x4c,0xb8,0x72,0xb4,0xb3,0x6e,0x99,0x84,0xa7,0xfb,0x9d,0x03,0xde,0xe8,0xc2,0x6b,0x2d,0x7a,0x23,0xe3,0x77,0xa3,0x6a,0xb3,0x5b,0x6d,0x9a,0x26,0xfb,0x39,0x7b,0x03,0x20,0x0c,0xf1,0xc6,0x98,0x7f,0x6d,0xa0,0x92,0x4d,0x71,0x81,0xe0,0x03 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMMT256-ENCRYPT-7", "[OFB][MMT][256][ENCRYPT][n7]") {
    const uint8_t KEY[] = { 0xa0,0xbf,0x10,0xc0,0xb4,0xfd,0x25,0x52,0xd2,0x6a,0xc9,0xe9,0xc2,0xbf,0x9a,0x3e,0xa7,0xa3,0x7d,0x35,0x26,0x33,0xdf,0x11,0xca,0xe2,0x41,0xe4,0xa7,0x83,0xf3,0x4a };
    const uint8_t IV[] = { 0x20,0xdb,0x83,0x34,0x98,0xb3,0x7d,0xfc,0x58,0x66,0xc7,0x32,0xba,0x7a,0x22,0xa4 };
    const uint8_t PLAINTEXT[] = { 0x27,0xaf,0x4a,0x13,0x5b,0x4c,0x0f,0x33,0xec,0x03,0xe5,0xff,0xe3,0x51,0xa9,0xed,0xac,0x7a,0xda,0x8f,0x62,0xc3,0xfe,0x68,0x4e,0xe2,0x41,0xfe,0xaa,0xb3,0x60,0x30,0xaa,0x2c,0xc5,0xca,0xbd,0x93,0xf4,0x57,0x10,0xee,0x25,0x36,0x53,0xbc,0x32,0xf0,0xc1,0xe2,0xb4,0xc9,0x5a,0xe8,0x69,0x95,0x73,0x65,0xda,0xcd,0x71,0xb8,0x3a,0xe2,0xd2,0xf9,0x90,0xd1,0x6d,0x30,0x19,0xf8,0xfa,0xc4,0xe7,0x28,0xd4,0x36,0xcf,0xfb,0xfe,0x0e,0x82,0x68,0x64,0x16,0xfa,0x94,0x64,0xc7,0x18,0xeb,0x8d,0x01,0x8b,0x70,0xa7,0xff,0xf3,0x51,0xf3,0x89,0x46,0xbf,0xb4,0x6b,0x73,0xfc,0xed,0x27,0x46,0xb6,0x6d,0xe7,0x8c,0x93,0x09,0xb5,0x77,0x0d,0x29,0xee,0x44,0x80,0x86,0xf4,0x1a,0x81 };
    const uint8_t CIPHERTEXT[] = { 0x06,0x21,0xf4,0x80,0x0b,0x00,0x1c,0x44,0xee,0x3e,0x3e,0xa4,0xca,0x70,0x24,0x8b,0xfd,0x01,0xa8,0x04,0x5b,0x6c,0xa4,0x60,0x47,0xf9,0xb9,0x1b,0x22,0xe7,0x0b,0xb0,0x4e,0x6e,0x4b,0xd2,0xdc,0x57,0x59,0x11,0x29,0x67,0xcf,0x7d,0xcb,0xf6,0xd6,0x13,0x46,0x81,0xad,0xf1,0x22,0x6f,0x51,0xc6,0x9f,0xde,0xf9,0xf1,0x91,0x57,0x51,0x57,0xac,0x68,0x8e,0x99,0x08,0xd7,0xe4,0xaa,0xe3,0x1f,0xe5,0x73,0x07,0x2e,0xe1,0x36,0x6f,0x64,0xa8,0xf1,0x18,0xd7,0x98,0xe6,0xf7,0xd2,0xd8,0x62,0x90,0x4f,0xa4,0x45,0x15,0x8d,0x2e,0x97,0xd4,0xd3,0x8c,0xd8,0x04,0xf9,0xf2,0x07,0xf1,0x1a,0x6f,0xca,0x24,0xe4,0x64,0x85,0xec,0x86,0xb5,0xe9,0x70,0x99,0x8a,0xa6,0xfd,0x55,0x23,0x19 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMMT256-ENCRYPT-8", "[OFB][MMT][256][ENCRYPT][n8]") {
    const uint8_t KEY[] = { 0x10,0x8a,0x06,0xc8,0x12,0xf2,0xca,0xcb,0x5e,0x52,0x1a,0xca,0xd0,0xea,0xc6,0xa6,0xdb,0x32,0xfa,0x2e,0x1d,0x1b,0x6d,0x88,0x37,0x98,0xda,0xd3,0xdb,0x5d,0xb4,0x0a };
    const uint8_t IV[] = { 0xba,0xad,0xd9,0xb9,0xa1,0x42,0x80,0xd4,0x61,0x0d,0x41,0x68,0x5c,0x36,0xb7,0x78 };
    const uint8_t PLAINTEXT[] = { 0xd5,0x7f,0xb3,0x2d,0x6e,0xc9,0xd3,0x19,0x0c,0x14,0xc5,0x01,0x52,0x81,0xfe,0x1b,0xf5,0x05,0x69,0x35,0xd9,0x04,0xac,0xec,0x77,0x22,0xac,0x1f,0x82,0x56,0x53,0xa3,0xca,0x40,0x91,0x38,0x60,0xbc,0xa0,0xbc,0xfb,0xb7,0x8d,0x9f,0x9a,0x41,0xf4,0x97,0x6b,0xe4,0x0b,0x95,0xec,0x34,0xe1,0xf7,0x50,0xa8,0xe8,0xff,0x24,0xa8,0xb2,0x84,0x32,0xe7,0xf8,0xe7,0xa6,0xf3,0xe0,0x49,0x6f,0x0b,0x7f,0xfb,0xe8,0x30,0x9d,0x36,0xb8,0x7e,0xb9,0x0d,0xf7,0xbd,0x4d,0x9f,0x92,0x34,0x54,0x91,0xf0,0xbd,0x08,0xbc,0xd5,0x1f,0xf0,0x22,0x87,0x97,0x1a,0x27,0x30,0xb8,0xa6,0xfe,0x84,0x76,0x84,0x61,0xa3,0x7d,0x7d,0x85,0x41,0xc7,0x78,0x4d,0x04,0x6d,0xf6,0xbe,0x2d,0xbd,0xe0,0xb3,0x7b,0x8e,0x82,0xd1,0x4c,0xd0,0xd7,0xbe,0x06,0x67,0x07,0x8e,0xb5,0x3a,0x2e,0x7e };
    const uint8_t CIPHERTEXT[] = { 0xf2,0xd8,0xaa,0xcd,0x51,0x79,0x58,0x4d,0x68,0xbe,0xdd,0x30,0x1d,0xdb,0x1c,0x0b,0x8e,0x6e,0x0b,0x02,0xd0,0x98,0x59,0x44,0xc5,0x9b,0xf8,0xbf,0x8a,0x72,0x99,0xb6,0x95,0x18,0xbb,0x76,0x1c,0x26,0xaf,0x7d,0xa2,0x04,0xac,0x2f,0xed,0x06,0x92,0x71,0xa0,0xaf,0xb1,0x77,0xc3,0xfc,0x88,0x04,0x28,0xc0,0x7e,0xab,0xb0,0xe1,0x51,0x16,0x43,0x71,0xee,0x1f,0xc5,0xd1,0xf9,0xd8,0xe1,0x32,0x1d,0x8b,0x3d,0x73,0x88,0x1e,0xa9,0x68,0x67,0x4a,0xd5,0x95,0x0c,0x2c,0x7f,0xe6,0xdd,0x47,0x73,0xff,0xdf,0xb3,0x97,0x0a,0x65,0xdb,0x8e,0x33,0x78,0x7f,0x24,0xdb,0xed,0x89,0x47,0xf1,0x64,0x4b,0xc6,0xb8,0xa7,0x9a,0x2b,0x19,0x42,0x85,0x89,0xfb,0x8b,0x13,0x37,0x25,0x7b,0xa5,0x3a,0x6a,0x68,0xfc,0x2b,0x21,0x60,0xe0,0x77,0xa3,0x07,0xe0,0xa7,0xeb,0xc3,0xbc };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMMT256-ENCRYPT-9", "[OFB][MMT][256][ENCRYPT][n9]") {
    const uint8_t KEY[] = { 0x1d,0x6f,0xab,0x8e,0x8e,0x49,0xd6,0x23,0xcf,0xc8,0xd1,0x05,0xf0,0x4d,0xcf,0xab,0x60,0x17,0x5d,0x7d,0xb4,0xfd,0x45,0x2e,0xa4,0x63,0xb3,0x4c,0x56,0x67,0x96,0x15 };
    const uint8_t IV[] = { 0x2a,0xff,0x32,0x36,0x45,0xf8,0xae,0xcf,0x92,0x04,0xe7,0x45,0x09,0x52,0x26,0x4f };
    const uint8_t PLAINTEXT[] = { 0x58,0x1d,0x51,0x1b,0xbd,0x44,0x1d,0x35,0x31,0xe7,0x7a,0x91,0x0a,0xd1,0x94,0xf4,0x0d,0x8a,0x69,0xb6,0x3c,0xd6,0x39,0x6c,0xef,0x7f,0x37,0xc5,0x26,0x54,0x85,0xb2,0x1e,0x72,0x5f,0xca,0x22,0xc2,0x97,0xec,0xa4,0xc3,0x41,0x26,0x8c,0x8a,0xaf,0xd5,0xd0,0x07,0xa0,0x0e,0x45,0x89,0xb4,0x3d,0xb5,0x84,0x23,0x0c,0x31,0x93,0xaf,0x87,0xa8,0xb9,0xd7,0x7d,0xb9,0xec,0x4e,0x29,0xc6,0xd4,0xab,0x11,0x4a,0xd0,0x62,0x2f,0x6c,0x3a,0xf3,0x4f,0xd4,0xec,0x61,0xb8,0xbd,0x02,0xe6,0x0e,0x4b,0xe2,0xe5,0x77,0x1f,0x7a,0x20,0xfd,0x2a,0xc9,0x2b,0x34,0xbe,0xa1,0x21,0x1c,0xeb,0xab,0x95,0x48,0x08,0xab,0xcb,0x40,0x90,0x05,0x28,0x25,0x30,0x81,0xe8,0x93,0x1d,0x4b,0x0f,0xcb,0xab,0x3e,0xa2,0x12,0x1c,0x61,0x16,0x54,0xb5,0xb2,0x09,0x0d,0x18,0x23,0x30,0x6a,0xcd,0xe3,0x91,0xab,0x22,0xde,0xf2,0xcb,0x35,0x87,0x91,0x63,0x4f,0xd5,0x15,0xcc };
    const uint8_t CIPHERTEXT[] = { 0x6c,0xa5,0x79,0x54,0x4f,0x24,0x3c,0xb2,0x07,0x4f,0xeb,0x19,0xed,0xc1,0x28,0xfa,0xa3,0x36,0x35,0xd6,0xee,0xd0,0xc8,0x50,0x50,0x26,0x69,0x86,0x0d,0x7e,0xa6,0x68,0x42,0x29,0x81,0x54,0xab,0x45,0x5f,0x79,0xdb,0x45,0xfd,0x72,0xe0,0xce,0x88,0xd4,0x92,0x10,0x22,0x6c,0x48,0x9e,0x9c,0x15,0xfe,0x09,0x21,0x62,0x18,0x70,0x7b,0xcb,0x96,0xe1,0xe5,0x9a,0xa8,0xd7,0xfc,0xd9,0x97,0x28,0xf7,0x1a,0x47,0x8f,0x9f,0xed,0xc1,0x09,0xa1,0x11,0x62,0x2a,0x63,0xb8,0xe6,0xe7,0x36,0x20,0x7b,0x37,0xad,0xbf,0x0e,0x6f,0x49,0x90,0xed,0x76,0xb4,0x24,0x34,0x47,0x3f,0x90,0xbb,0x8c,0x75,0xca,0x7d,0xf4,0x7d,0x72,0xda,0xb6,0x1f,0xb0,0xc6,0x7d,0x26,0x55,0x02,0x21,0x7c,0x4e,0x59,0x0b,0x35,0x36,0xd8,0xd7,0xc7,0xa0,0x3a,0x64,0x73,0x5e,0x87,0x79,0x94,0x23,0xf4,0x0b,0x12,0x3b,0x8e,0x43,0x1e,0x3b,0xba,0x45,0xbf,0x19,0x3b,0x6c,0x4a,0xf0 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ofb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("OFBMMT256-DECRYPT-0", "[OFB][MMT][256][DECRYPT][n0]") {
    const uint8_t KEY[] = { 0x56,0xc5,0x8f,0x5c,0x21,0x41,0xc8,0xec,0x03,0x27,0xb1,0xa6,0xbb,0x8e,0x13,0xfc,0x84,0x12,0x29,0x0f,0x8c,0x7a,0xb2,0x72,0xa7,0x98,0x45,0x31,0x45,0x71,0xe5,0x12 };
    const uint8_t IV[] = { 0xa3,0x0b,0x0b,0x95,0xc5,0x7e,0x68,0x97,0xb4,0x0c,0xe8,0xdd,0xd4,0x20,0x96,0x56 };
    const uint8_t PLAINTEXT[] = { 0xf5,0x63,0x9c,0x9c,0xe7,0x6e,0x43,0x50,0xce,0x47,0x58,0xda,0x04,0x57,0x05,0x32 };
    const uint8_t CIPHERTEXT[] = { 0xbc,0x23,0x89,0xf5,0x83,0x56,0x9c,0xfc,0xf8,0x9f,0x09,0x1a,0xa9,0xa3,0xf2,0xbe };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMMT256-DECRYPT-1", "[OFB][MMT][256][DECRYPT][n1]") {
    const uint8_t KEY[] = { 0x27,0x15,0xcb,0xd6,0x1f,0x34,0x94,0x47,0xa6,0x56,0x4e,0xfc,0x21,0x58,0x30,0xdc,0x2b,0x78,0x53,0x30,0x3b,0x66,0x71,0x58,0x80,0x9f,0xec,0xbc,0x10,0xf6,0x12,0x06 };
    const uint8_t IV[] = { 0x02,0xd4,0x02,0xb9,0x40,0x59,0xf1,0xab,0x66,0x2a,0xef,0xa0,0x01,0x35,0x80,0x19 };
    const uint8_t PLAINTEXT[] = { 0x0d,0x05,0xae,0x0e,0xbd,0xd5,0x8f,0xce,0xff,0x2e,0x38,0x30,0x14,0xde,0x06,0x12,0xd6,0xc7,0xd4,0x68,0xc4,0xb2,0x85,0xca,0xde,0x43,0x97,0x2c,0xa0,0xd6,0x43,0xab };
    const uint8_t CIPHERTEXT[] = { 0xce,0x58,0xc5,0x4b,0x84,0xec,0x2a,0xfe,0x0c,0xb2,0xfd,0x55,0xd6,0x2d,0x46,0x8b,0x3b,0x1c,0x5a,0xf4,0x59,0xfb,0x4e,0x99,0x1f,0xcd,0xb2,0x22,0xa4,0x19,0x7c,0xfa };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMMT256-DECRYPT-2", "[OFB][MMT][256][DECRYPT][n2]") {
    const uint8_t KEY[] = { 0x61,0x65,0xcf,0x1d,0xc4,0x8c,0xad,0xcc,0x1b,0xa0,0x68,0xf5,0xcf,0x35,0xd6,0x69,0x7e,0x42,0xa0,0x77,0x4e,0x25,0x3d,0x0d,0x81,0xe7,0x21,0x21,0x4a,0xc2,0x31,0x4f };
    const uint8_t IV[] = { 0x0c,0x47,0xe4,0x90,0xb3,0xc8,0x3d,0x32,0x03,0x6e,0xc2,0x7b,0xe7,0xcc,0xcf,0x22 };
    const uint8_t PLAINTEXT[] = { 0xc3,0xce,0x73,0x8b,0x5a,0xab,0xab,0x83,0x0c,0xcd,0xd8,0x2e,0x3c,0x58,0x8e,0x0a,0xbd,0xd0,0xc7,0x9c,0x22,0x6a,0x92,0xdd,0xb7,0x4f,0x16,0x36,0x9c,0x70,0x59,0x3c,0x93,0x39,0xb7,0xba,0x77,0x0f,0x60,0x7a,0x44,0xc2,0x3f,0xaf,0xa9,0xd9,0x19,0x23 };
    const uint8_t CIPHERTEXT[] = { 0x33,0x96,0xe3,0x0d,0x12,0x6a,0x59,0x1a,0xdf,0x64,0x89,0x71,0x65,0x74,0xb3,0x23,0xfd,0xe0,0x16,0x43,0x01,0xe7,0x06,0xa5,0x83,0xa5,0x3f,0xe6,0x3f,0x36,0x79,0xac,0xcf,0x1e,0x3c,0x2f,0x1e,0xe8,0xf6,0xf9,0x1f,0x0e,0x4b,0xea,0xbf,0x19,0xac,0x7e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMMT256-DECRYPT-3", "[OFB][MMT][256][DECRYPT][n3]") {
    const uint8_t KEY[] = { 0x75,0xbe,0x95,0xa6,0xa5,0x44,0x00,0xb2,0xe1,0xb4,0x85,0xe2,0x4e,0xad,0x18,0xed,0x20,0xa6,0x26,0x1f,0xba,0x82,0xd3,0x97,0x16,0x64,0x86,0xb2,0x68,0xc4,0xa7,0xc7 };
    const uint8_t IV[] = { 0x3b,0x39,0x5a,0xd3,0x45,0x0c,0x56,0xc8,0xf1,0xac,0xca,0xb2,0xa4,0x7b,0xe1,0x1e };
    const uint8_t PLAINTEXT[] = { 0x68,0x92,0xfc,0x5c,0x3d,0x48,0xf4,0xe6,0x8a,0x2c,0x31,0x8f,0x81,0x57,0xee,0x98,0x6f,0xcf,0x6c,0x85,0xa2,0xec,0xe7,0x0c,0x0f,0xdc,0x70,0x9c,0x50,0x4f,0x0a,0xb0,0xb9,0x16,0x06,0xc4,0xf1,0x3b,0xc9,0xbc,0xe5,0xf1,0xa1,0xe0,0xce,0x46,0x96,0x0b,0xe8,0x6c,0x35,0xbc,0x59,0x82,0x41,0x80,0x97,0xba,0x28,0x2d,0x88,0x76,0x08,0xea };
    const uint8_t CIPHERTEXT[] = { 0x52,0x64,0x7f,0xa6,0x7c,0x06,0x75,0x75,0x3f,0x72,0x5a,0x8f,0xd4,0x46,0x62,0x2a,0x2d,0xff,0x28,0x41,0xe6,0x1a,0x46,0xdc,0x79,0x79,0x24,0x91,0xb1,0x09,0x0d,0x4b,0x61,0xa2,0x88,0x4a,0x55,0x2e,0xe5,0x6b,0x89,0x0e,0x16,0xaa,0x99,0xb9,0xc0,0xe5,0x79,0xa6,0x92,0xe3,0x66,0x6d,0xd6,0x94,0x1c,0x29,0x45,0x9a,0x4a,0x20,0x20,0x09 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMMT256-DECRYPT-4", "[OFB][MMT][256][DECRYPT][n4]") {
    const uint8_t KEY[] = { 0xf6,0x08,0x5f,0x23,0x31,0xe8,0x51,0xdb,0x9c,0x26,0x54,0xda,0xcb,0x5b,0xaf,0x19,0x5e,0xf5,0x2a,0x11,0x79,0xda,0x20,0x80,0x74,0x4e,0xd6,0x6b,0xd3,0x16,0x0b,0x5f };
    const uint8_t IV[] = { 0x27,0x93,0x55,0xaf,0xb3,0x9f,0x67,0x1c,0xc4,0xa6,0xdc,0x53,0x97,0x08,0x6f,0xb7 };
    const uint8_t PLAINTEXT[] = { 0xaf,0xc0,0xf8,0x7e,0x25,0x52,0x46,0x89,0x29,0x82,0x31,0x04,0xa4,0x14,0x18,0xbc,0x5b,0x90,0x40,0xb6,0x32,0x63,0x76,0x9a,0x75,0xa2,0xe1,0x71,0x06,0xcb,0x52,0x9e,0x59,0x9e,0xfc,0x59,0x58,0x3f,0x1a,0x3d,0x09,0x32,0xb1,0x6f,0x17,0x5b,0x74,0xa4,0x7d,0x2d,0x83,0x34,0x7a,0x10,0xda,0x6e,0x70,0x62,0x42,0x57,0xdd,0xa2,0x0b,0xe9,0x0d,0x91,0x03,0x2f,0x0c,0x26,0x81,0xe4,0x32,0xbf,0xe9,0x16,0xd3,0xc4,0x75,0xfe };
    const uint8_t CIPHERTEXT[] = { 0xfa,0xef,0xd3,0x54,0xf5,0x91,0x6e,0x34,0x80,0xb5,0xf5,0x0b,0xf7,0x97,0xbe,0xa3,0x93,0xd9,0xf4,0x51,0xe1,0x27,0xa1,0xbf,0x73,0x1b,0x0b,0xef,0xd5,0x5e,0x44,0x7d,0xc2,0x11,0xfd,0x25,0x98,0x6b,0x9b,0x84,0x0a,0xa3,0x8d,0x23,0x15,0x10,0xdc,0xb1,0x35,0x8f,0x03,0x90,0xd8,0x25,0x02,0x94,0x13,0xe5,0xae,0x07,0x94,0x14,0x4b,0xf0,0xd8,0x8c,0x5c,0x94,0x9e,0x5e,0xba,0x3e,0x9b,0xbb,0xe4,0x3c,0x6f,0x15,0x96,0x2a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMMT256-DECRYPT-5", "[OFB][MMT][256][DECRYPT][n5]") {
    const uint8_t KEY[] = { 0xab,0x76,0x5f,0x7d,0x88,0x67,0x38,0x2a,0x0d,0x6b,0xaf,0x75,0x5c,0x2f,0x94,0x7e,0x64,0xf3,0xec,0xbe,0x06,0x29,0x3c,0x3e,0x76,0x3f,0x04,0x0b,0xe5,0xb9,0x89,0xe5 };
    const uint8_t IV[] = { 0x7f,0xae,0x07,0x3c,0x0e,0xb9,0xff,0x46,0x5b,0xd4,0xef,0xf9,0xf9,0x13,0x26,0xb8 };
    const uint8_t PLAINTEXT[] = { 0x76,0xf6,0xd2,0x87,0x18,0xb7,0x88,0xe9,0x5a,0xf2,0x56,0x23,0x44,0xca,0xfb,0xad,0xae,0x91,0x9b,0xf1,0xbe,0x4a,0x56,0x42,0x4d,0x06,0x28,0x59,0xd5,0x3a,0x2d,0x56,0xf1,0xf7,0x4e,0x56,0x90,0x91,0xc5,0x25,0x5a,0x3a,0x3e,0xbb,0xc0,0x52,0xa9,0xee,0xce,0x40,0xe5,0xa0,0x27,0x78,0x60,0x88,0x3c,0xcb,0x8e,0xd1,0xe2,0xbf,0x15,0x81,0x64,0xd1,0xc9,0x6d,0xf1,0x5f,0xfa,0x3a,0xc1,0x31,0x5a,0x70,0xe1,0x3f,0x91,0xaf,0xb9,0xba,0x7b,0xed,0xb7,0x17,0x5d,0xd1,0xb7,0x74,0x2e,0x74,0xc8,0xb9,0x11,0xd5 };
    const uint8_t CIPHERTEXT[] = { 0x51,0x12,0x5f,0x7d,0x03,0x03,0xbd,0x0b,0x9e,0xa1,0xce,0x56,0x82,0xe4,0x79,0x39,0x70,0x95,0x34,0xdf,0x35,0x60,0xca,0x7c,0x89,0x2a,0x5b,0x3a,0x36,0xa5,0xa4,0x77,0x7d,0x21,0x80,0x2d,0xb5,0xa5,0xaf,0xb1,0x35,0x3e,0xd7,0xa1,0x74,0x97,0xc8,0x17,0x6f,0xca,0x04,0x23,0x4b,0x76,0x7f,0x79,0x3c,0x12,0xa3,0x66,0xa5,0x80,0x97,0x09,0x81,0xe5,0xc1,0xbf,0x01,0xb9,0x8a,0xdf,0x76,0x1a,0x61,0xa8,0x72,0x66,0x02,0x77,0x2a,0x08,0xf8,0x3d,0x1f,0x92,0x60,0x31,0xfe,0x0d,0xf1,0xc2,0xc4,0x8c,0x39,0xd0 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMMT256-DECRYPT-6", "[OFB][MMT][256][DECRYPT][n6]") {
    const uint8_t KEY[] = { 0x61,0xe5,0x4c,0x30,0x6d,0x6b,0xfe,0x8f,0x35,0xa5,0xd9,0xa2,0x4e,0xa7,0x31,0xbe,0xc7,0x10,0xb9,0x1f,0x01,0x90,0xf3,0x87,0xc0,0xa7,0xeb,0x28,0x83,0xaf,0x25,0xc4 };
    const uint8_t IV[] = { 0xab,0xe7,0x67,0x3e,0xe5,0xde,0xd5,0x3b,0x58,0x82,0x30,0x92,0x5d,0x9a,0xb7,0xd6 };
    const uint8_t PLAINTEXT[] = { 0x7c,0x42,0x66,0x41,0x90,0x51,0x55,0xa8,0x52,0xa3,0x46,0xad,0x65,0xa6,0xa2,0x69,0xc1,0x64,0x7b,0x13,0x56,0x24,0x92,0x97,0x0d,0xf8,0xf9,0x4f,0xb0,0xb8,0x35,0x92,0x4b,0xca,0x02,0xae,0x25,0xd7,0xf4,0x59,0x2a,0x68,0x96,0xe7,0x69,0x27,0xfe,0xd5,0x8e,0x9b,0xfb,0x4a,0x4f,0x0f,0x88,0x20,0x67,0x4c,0x03,0x05,0x2a,0x63,0xd9,0x31,0xcc,0xdf,0x20,0x34,0xd3,0xa8,0x4e,0x12,0x9b,0x1c,0x1f,0x16,0xbf,0xa0,0xff,0x89,0x3e,0x80,0x52,0x82,0xbe,0xa7,0x76,0x2c,0x0b,0xe5,0xd8,0xef,0x79,0x64,0xcb,0x21,0x82,0xd6,0x10,0x23,0x7b,0x2f,0xfd,0x52,0x18,0x29,0x77,0x58,0xa8,0x0f,0x57,0xd9 };
    const uint8_t CIPHERTEXT[] = { 0xc2,0xa1,0x7d,0x6f,0x38,0x72,0xb7,0xfe,0x16,0x71,0x2b,0x8d,0xe4,0xdc,0xb1,0xea,0x42,0x9c,0x1b,0xeb,0xc5,0xca,0xb0,0x0c,0x01,0x73,0xdc,0x59,0xe7,0x98,0x25,0x8f,0x52,0x79,0x61,0x7e,0xdc,0x14,0x26,0xb1,0xf6,0xe8,0x83,0x51,0x38,0xfe,0xed,0x47,0xf5,0x2a,0x7c,0xa1,0x13,0x8f,0x58,0x37,0x19,0x61,0x6e,0x8e,0x8a,0xef,0x67,0xfc,0x72,0xe0,0xda,0x0d,0x3e,0xbc,0xc0,0x26,0xd0,0xaf,0x29,0x68,0xd3,0x8a,0x2e,0xd7,0x4c,0x0b,0x27,0xbc,0x72,0x5e,0x1e,0x48,0xc0,0xe3,0x83,0x79,0x48,0x32,0x20,0x42,0x4a,0x5d,0x50,0xe6,0x05,0x75,0x6c,0xa5,0xcd,0x4f,0x87,0x9a,0x5e,0x87,0x5b,0xe4 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMMT256-DECRYPT-7", "[OFB][MMT][256][DECRYPT][n7]") {
    const uint8_t KEY[] = { 0x2c,0xf2,0x6c,0x4b,0xba,0x76,0x9c,0xcb,0x47,0xe6,0x3d,0x4e,0xcc,0x6f,0xa0,0x70,0xc5,0xaa,0xc6,0xc0,0xd6,0xb5,0x22,0x71,0xb4,0x88,0x9f,0x52,0x43,0x86,0xe5,0x00 };
    const uint8_t IV[] = { 0x65,0x5c,0xb1,0xb4,0x98,0x54,0x5c,0x3e,0x95,0xc7,0xfb,0xb3,0x84,0x56,0x83,0xc0 };
    const uint8_t PLAINTEXT[] = { 0x70,0x5e,0x3f,0x25,0xbb,0x1c,0x11,0xd4,0x31,0x6e,0x8d,0x76,0xb7,0x92,0x02,0xa2,0x46,0xf6,0x57,0x3f,0x4c,0x5b,0xc2,0xa2,0xc3,0xee,0x2d,0xc6,0xe9,0x09,0x2f,0x20,0xfe,0x94,0x88,0xf4,0x20,0xce,0xdd,0xdd,0x94,0x60,0x34,0x58,0xb1,0x04,0x3e,0x4f,0x70,0xe1,0x81,0x09,0xee,0x61,0xfc,0x06,0x5c,0x5d,0x3a,0xc3,0xab,0x00,0x38,0x08,0xdf,0x3b,0x45,0x90,0xbd,0xc9,0x31,0xdf,0x22,0x4f,0xd0,0x09,0xe7,0x6c,0xa2,0xa6,0x36,0xfd,0x42,0xbe,0xdf,0xb8,0x8e,0x8f,0x1f,0x4a,0x72,0xdc,0x7c,0x0e,0xd8,0xcd,0x93,0xb8,0x13,0x93,0x28,0x5b,0x30,0x72,0x08,0x29,0xf6,0xa1,0x55,0xc2,0xfc,0x25,0x38,0x99,0x35,0x69,0x98,0x7b,0xb2,0x22,0xf5,0xd7,0x1b,0x17,0xda,0x4d,0x23,0x54 };
    const uint8_t CIPHERTEXT[] = { 0x11,0xf6,0x28,0x21,0xf8,0xda,0xed,0xbd,0xa5,0x95,0xc1,0x79,0x0c,0xd4,0xe7,0x9b,0x26,0x3d,0xbf,0x15,0xf4,0x61,0xea,0x12,0xc2,0xec,0xaf,0xcf,0xa9,0x1f,0x9d,0xac,0x57,0x81,0x72,0x83,0x13,0xd1,0x3c,0x38,0xfb,0x3e,0xbe,0x91,0x90,0xdb,0x15,0x48,0x75,0x4d,0x9c,0x5f,0x74,0xc6,0x0c,0xb4,0xc2,0x38,0xe8,0xd5,0x84,0xc2,0x18,0x15,0x91,0x6f,0xd3,0xe0,0x7a,0x1f,0xc3,0x4b,0xc8,0xc5,0x64,0xef,0x84,0xd3,0xae,0xf8,0xfd,0xf3,0xf3,0x79,0xc5,0xf8,0x0a,0x03,0xfd,0x14,0xad,0x75,0xd2,0x4b,0x20,0x15,0x48,0x27,0x13,0xe0,0x37,0xae,0xca,0x1f,0x92,0x91,0x7b,0x3b,0xef,0xa6,0xf8,0xd2,0x44,0x98,0x8d,0x0a,0xef,0xde,0x2c,0x26,0xfa,0xe9,0xc7,0x57,0x9c,0xa2,0xfe,0xd4 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMMT256-DECRYPT-8", "[OFB][MMT][256][DECRYPT][n8]") {
    const uint8_t KEY[] = { 0xde,0x9d,0xc1,0x9f,0xd3,0xbb,0xa7,0x6c,0x33,0x8d,0x9d,0x82,0x4a,0x79,0x85,0x08,0x37,0x76,0x85,0x64,0x57,0xb9,0x12,0xfe,0x01,0x90,0x4d,0x47,0x74,0x8e,0x93,0xfb };
    const uint8_t IV[] = { 0x4b,0xeb,0x72,0x9b,0x18,0x27,0x15,0xf0,0x9f,0x3f,0x06,0xaa,0x05,0x91,0xc1,0xa9 };
    const uint8_t PLAINTEXT[] = { 0x3e,0xec,0x7d,0x7c,0x22,0x14,0xe2,0x29,0x80,0x1f,0x6f,0xba,0xd8,0x5e,0xb0,0x89,0x58,0xde,0x17,0x7d,0xe7,0x8b,0xea,0x23,0xa3,0x80,0x13,0x53,0xbd,0x2b,0x74,0xde,0x64,0x7b,0xeb,0x71,0x22,0xea,0x83,0xe9,0x47,0x24,0xce,0xab,0xe2,0x06,0x09,0xb0,0x2b,0x4b,0x3e,0x29,0x4b,0x46,0x75,0x59,0xd0,0xf9,0xe5,0xf5,0xbd,0x07,0x6a,0x8c,0x0f,0x0c,0x27,0x07,0xa4,0x1e,0xf9,0x70,0xf9,0x90,0xb0,0x2d,0x38,0x70,0x57,0x8b,0x9b,0x4a,0xf3,0x54,0x04,0x88,0x52,0xfb,0xe4,0x88,0x7e,0x7b,0x6c,0x23,0xc1,0x1c,0x2b,0x02,0xe7,0x5d,0x5a,0x09,0xd6,0xf0,0xcf,0x9d,0x01,0x0c,0x1a,0xc1,0x56,0x68,0xa5,0x2b,0x2e,0x01,0x3f,0x50,0xd7,0x1c,0x6b,0x74,0xd8,0x43,0x55,0xa8,0x04,0xa3,0xa8,0xb7,0x2f,0x25,0xa7,0xcd,0xaf,0x6b,0xc4,0xeb,0x74,0xc0,0xd4,0x3c,0x9f,0x33 };
    const uint8_t CIPHERTEXT[] = { 0x1d,0x5f,0x37,0x42,0x1c,0x8e,0x64,0xcf,0x79,0xa5,0xd6,0x94,0x18,0x48,0xb2,0xf7,0x4e,0xc4,0x1d,0x55,0x99,0xf6,0x95,0x01,0x8e,0x69,0x88,0x8a,0x12,0xbe,0x1f,0x3d,0xcd,0x51,0x5b,0xeb,0xdc,0x19,0x64,0xed,0xc6,0xd0,0x1e,0x64,0xb2,0x54,0xfc,0xc5,0xd7,0x4e,0x19,0x96,0x33,0x11,0x85,0x72,0x80,0xc5,0xdc,0x53,0x64,0xc4,0x1e,0x11,0xe8,0x44,0xba,0x25,0x2b,0x37,0xec,0xb3,0x58,0x6f,0x49,0xc8,0xd5,0x06,0x99,0xe0,0xbd,0xfd,0xe4,0xab,0x91,0x23,0xd0,0x10,0x2a,0x38,0x2a,0x73,0xf2,0x53,0xc2,0x33,0x54,0x81,0x7c,0x77,0x71,0xaf,0xa4,0x2b,0x15,0xca,0x82,0x45,0xe9,0x24,0x2e,0x4d,0xea,0x1a,0xa6,0x1c,0x19,0xf4,0x1e,0xe4,0x74,0x0c,0x97,0x70,0x26,0x33,0xb3,0xad,0xfb,0x50,0xc8,0x6a,0x16,0x4a,0x33,0x5c,0xe6,0x28,0xef,0x65,0x56,0x77,0x66,0x15 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("OFBMMT256-DECRYPT-9", "[OFB][MMT][256][DECRYPT][n9]") {
    const uint8_t KEY[] = { 0x98,0xa9,0x97,0x1e,0x86,0x80,0x6c,0xcc,0x34,0x95,0x11,0x6f,0xd0,0x6d,0xc9,0xd1,0x52,0x2f,0xe8,0x80,0x60,0xfd,0xdd,0xc3,0x6e,0x84,0x6f,0xd3,0x29,0xd2,0x47,0x48 };
    const uint8_t IV[] = { 0x99,0x83,0xce,0x04,0x8f,0x19,0xef,0x40,0x43,0x05,0x4c,0x03,0xaa,0x01,0x0b,0xee };
    const uint8_t PLAINTEXT[] = { 0x00,0xca,0xa2,0x33,0x19,0x8f,0x51,0xbb,0xf5,0x93,0x40,0x4f,0x59,0x82,0x69,0x97,0xb4,0xea,0x38,0x73,0x85,0xcf,0x74,0x4c,0x93,0xcf,0xa0,0x0e,0x70,0x2e,0x8f,0x16,0xff,0x5a,0xa7,0xe1,0x7a,0x9a,0x60,0x20,0xdf,0x0f,0x0d,0xe4,0xea,0x6a,0xbb,0x38,0xbc,0xf1,0xd7,0x77,0x81,0x0a,0x83,0x18,0xf6,0x9b,0x5e,0x83,0x05,0xf6,0xd7,0x27,0xf0,0x6f,0x00,0x8b,0x4b,0xec,0x2d,0x65,0xcd,0x4c,0x51,0x6c,0xa4,0x9f,0x62,0xfb,0x2f,0x91,0x6f,0x27,0x3c,0x45,0xbb,0x72,0x2b,0xec,0x78,0xc3,0x16,0xf9,0x0b,0x5e,0xd5,0xde,0x6e,0xf1,0xd3,0x66,0x60,0x3c,0xed,0x30,0x3c,0x10,0xe3,0x3d,0xd5,0xc9,0x9e,0xb0,0xf9,0x94,0xdb,0x5a,0x78,0x67,0xda,0x9b,0x53,0x0f,0xc4,0xd0,0xb9,0xce,0x22,0x4c,0x6e,0xab,0x78,0x10,0x35,0x9c,0x97,0x33,0xcf,0x93,0x3c,0x57,0x36,0x11,0xd3,0x1f,0xcd,0xf3,0xf1,0xdb,0x87,0xcf,0xd1,0x7b,0xe7,0xf4,0xa4,0x70,0xa0,0xb4 };
    const uint8_t CIPHERTEXT[] = { 0x4b,0x07,0x67,0xfe,0xc0,0xd4,0xbd,0x07,0xc7,0x9c,0x0f,0x56,0x52,0xda,0xfa,0xdf,0x10,0xcf,0xce,0x89,0xe3,0x25,0x9d,0xea,0x94,0xd3,0x92,0x52,0xc6,0x40,0x84,0x0c,0x28,0xab,0xcb,0xe0,0xef,0xca,0x53,0xdc,0x84,0xb1,0xef,0x55,0x79,0xf6,0xef,0x28,0xc2,0x13,0xf4,0x45,0x22,0x0b,0x03,0x6f,0xe3,0x51,0xd9,0x3d,0xca,0xe5,0x7e,0x65,0x4a,0xc0,0x1d,0x39,0xf8,0x72,0x13,0x72,0x3f,0x0a,0x46,0x2d,0x55,0x36,0xb8,0x33,0x6d,0xab,0x5c,0x7d,0x2f,0xc7,0x28,0xf8,0x65,0x75,0x6b,0x85,0xf7,0x52,0x61,0x44,0x19,0x0e,0x04,0x12,0xc3,0x14,0x26,0x50,0x61,0x6d,0xbd,0xe7,0xcd,0xe1,0x7e,0x88,0x7a,0x60,0xad,0x39,0xf2,0xa1,0x33,0x0d,0x82,0x09,0xf1,0x32,0x33,0xce,0x54,0x31,0xfd,0x5c,0x29,0x72,0x38,0xf8,0xb3,0xff,0x53,0xa3,0xfb,0x89,0xc8,0x41,0x68,0xb0,0x4f,0xfa,0x8f,0x7f,0x53,0xe1,0x4c,0x36,0xa2,0xd3,0x12,0x4d,0x68,0xa2,0x7f,0xb5 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ofb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

