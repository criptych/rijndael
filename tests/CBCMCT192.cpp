#include "rijndael.h"
#include "catch.hpp"
#include <cstring>

static inline std::string buf2str(const uint8_t *buf, size_t len) {
    std::ostringstream ss; ss << std::hex << std::setfill('0');
    for (size_t i = 0; i < len; ++i) {
        ss << std::setw(2) << static_cast<int>(buf[i]) << ' ';
    }
    return ss.str();
}

TEST_CASE("CBCMCT192-ENCRYPT-0", "[CBC][MCT][192][ENCRYPT][n0]") {
    const uint8_t KEY[] = { 0xde,0xa6,0x4f,0x83,0xcf,0xe6,0xa0,0xa1,0x83,0xdd,0xbe,0x86,0x5c,0xfc,0xa0,0x59,0xb3,0xc6,0x15,0xc1,0x62,0x3d,0x63,0xfc };
    const uint8_t IV[] = { 0x42,0x6f,0xbc,0x08,0x7b,0x50,0xb3,0x95,0xc0,0xfc,0x81,0xef,0x9f,0xd6,0xd1,0xaa };
    const uint8_t PLAINTEXT[] = { 0xcd,0x0b,0x8c,0x8a,0x81,0x79,0xec,0xb1,0x71,0xb6,0x4c,0x89,0x4a,0x4d,0x60,0xfd };
    const uint8_t CIPHERTEXT[] = { 0xae,0x63,0x02,0xd2,0x2d,0xa9,0x45,0x81,0x17,0xf5,0x68,0x14,0x31,0xfc,0x80,0xdf };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-1", "[CBC][MCT][192][ENCRYPT][n1]") {
    const uint8_t KEY[] = { 0xf1,0x68,0xc3,0x6c,0x40,0xd0,0xd7,0xf9,0x2d,0xbe,0xbc,0x54,0x71,0x55,0xe5,0xd8,0xa4,0x33,0x7d,0xd5,0x53,0xc1,0xe3,0x23 };
    const uint8_t IV[] = { 0xae,0x63,0x02,0xd2,0x2d,0xa9,0x45,0x81,0x17,0xf5,0x68,0x14,0x31,0xfc,0x80,0xdf };
    const uint8_t PLAINTEXT[] = { 0xfb,0xda,0xfc,0x0f,0xe9,0xc2,0xa6,0x8f,0x2f,0xce,0x8c,0xef,0x8f,0x36,0x77,0x58 };
    const uint8_t CIPHERTEXT[] = { 0x52,0x55,0xb6,0x29,0xc3,0x9a,0x8f,0x74,0x63,0xc1,0x8d,0xa3,0x7a,0xc8,0xc2,0x51 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-2", "[CBC][MCT][192][ENCRYPT][n2]") {
    const uint8_t KEY[] = { 0x3c,0x39,0x00,0x18,0x62,0x22,0x9e,0xe3,0x7f,0xeb,0x0a,0x7d,0xb2,0xcf,0x6a,0xac,0xc7,0xf2,0xf0,0x76,0x29,0x09,0x21,0x72 };
    const uint8_t IV[] = { 0x52,0x55,0xb6,0x29,0xc3,0x9a,0x8f,0x74,0x63,0xc1,0x8d,0xa3,0x7a,0xc8,0xc2,0x51 };
    const uint8_t PLAINTEXT[] = { 0x09,0x8c,0x23,0xd9,0xda,0x72,0xe1,0xbf,0xcd,0x51,0xc3,0x74,0x22,0xf2,0x49,0x1a };
    const uint8_t CIPHERTEXT[] = { 0x7c,0x3d,0x88,0xf3,0x91,0x95,0xcb,0xba,0xb6,0x08,0xfb,0xd9,0x01,0x0e,0xe2,0xc0 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-3", "[CBC][MCT][192][ENCRYPT][n3]") {
    const uint8_t KEY[] = { 0xb4,0x2e,0xa4,0x3d,0xca,0x69,0x55,0xe2,0x03,0xd6,0x82,0x8e,0x23,0x5a,0xa1,0x16,0x71,0xfa,0x0b,0xaf,0x28,0x07,0xc3,0xb2 };
    const uint8_t IV[] = { 0x7c,0x3d,0x88,0xf3,0x91,0x95,0xcb,0xba,0xb6,0x08,0xfb,0xd9,0x01,0x0e,0xe2,0xc0 };
    const uint8_t PLAINTEXT[] = { 0x8e,0xf0,0x47,0xba,0x03,0xca,0xd9,0x20,0x88,0x17,0xa4,0x25,0xa8,0x4b,0xcb,0x01 };
    const uint8_t CIPHERTEXT[] = { 0xdf,0xbe,0xd3,0xcc,0x22,0xb0,0x85,0x1a,0xbe,0x5f,0x45,0xb3,0x20,0x3d,0x8d,0xe0 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-4", "[CBC][MCT][192][ENCRYPT][n4]") {
    const uint8_t KEY[] = { 0x1b,0xc4,0x46,0x0f,0xbf,0xf5,0x9b,0x9c,0xdc,0x68,0x51,0x42,0x01,0xea,0x24,0x0c,0xcf,0xa5,0x4e,0x1c,0x08,0x3a,0x4e,0x52 };
    const uint8_t IV[] = { 0xdf,0xbe,0xd3,0xcc,0x22,0xb0,0x85,0x1a,0xbe,0x5f,0x45,0xb3,0x20,0x3d,0x8d,0xe0 };
    const uint8_t PLAINTEXT[] = { 0x95,0xa4,0x57,0x8e,0x7c,0xa8,0xfd,0xfd,0xaf,0xea,0xe2,0x32,0x75,0x9c,0xce,0x7e };
    const uint8_t CIPHERTEXT[] = { 0x5b,0x0d,0x8d,0xdd,0x19,0xfc,0x73,0x5a,0x88,0xa4,0x25,0x3d,0xea,0x84,0xd3,0x36 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-5", "[CBC][MCT][192][ENCRYPT][n5]") {
    const uint8_t KEY[] = { 0x4e,0xa4,0x92,0xc2,0xf2,0x1d,0x73,0x45,0x87,0x65,0xdc,0x9f,0x18,0x16,0x57,0x56,0x47,0x01,0x6b,0x21,0xe2,0xbe,0x9d,0x64 };
    const uint8_t IV[] = { 0x5b,0x0d,0x8d,0xdd,0x19,0xfc,0x73,0x5a,0x88,0xa4,0x25,0x3d,0xea,0x84,0xd3,0x36 };
    const uint8_t PLAINTEXT[] = { 0xe2,0x81,0x8d,0xd4,0x23,0x7c,0x2c,0x90,0x55,0x60,0xd4,0xcd,0x4d,0xe8,0xe8,0xd9 };
    const uint8_t CIPHERTEXT[] = { 0x95,0xb7,0x7c,0x48,0xe7,0x92,0xcc,0x1c,0x8e,0x72,0x9d,0x83,0xda,0xac,0x74,0xc5 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-6", "[CBC][MCT][192][ENCRYPT][n6]") {
    const uint8_t KEY[] = { 0xff,0x44,0x2d,0xf0,0x7c,0xf1,0xdb,0xca,0x12,0xd2,0xa0,0xd7,0xff,0x84,0x9b,0x4a,0xc9,0x73,0xf6,0xa2,0x38,0x12,0xe9,0xa1 };
    const uint8_t IV[] = { 0x95,0xb7,0x7c,0x48,0xe7,0x92,0xcc,0x1c,0x8e,0x72,0x9d,0x83,0xda,0xac,0x74,0xc5 };
    const uint8_t PLAINTEXT[] = { 0x93,0x56,0x5f,0xd6,0xa2,0x1b,0xc0,0x3e,0xb1,0xe0,0xbf,0x32,0x8e,0xec,0xa8,0x8f };
    const uint8_t CIPHERTEXT[] = { 0x19,0x47,0xfd,0x07,0x3c,0x15,0x49,0x12,0x50,0x41,0x0d,0x84,0x53,0x75,0xea,0x94 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-7", "[CBC][MCT][192][ENCRYPT][n7]") {
    const uint8_t KEY[] = { 0xbf,0x89,0xde,0xf7,0xd6,0x27,0xf6,0x9e,0x0b,0x95,0x5d,0xd0,0xc3,0x91,0xd2,0x58,0x99,0x32,0xfb,0x26,0x6b,0x67,0x03,0x35 };
    const uint8_t IV[] = { 0x19,0x47,0xfd,0x07,0x3c,0x15,0x49,0x12,0x50,0x41,0x0d,0x84,0x53,0x75,0xea,0x94 };
    const uint8_t PLAINTEXT[] = { 0x68,0x84,0x75,0xf6,0x3e,0x66,0xb6,0xee,0x40,0xcd,0xf3,0x07,0xaa,0xd6,0x2d,0x54 };
    const uint8_t CIPHERTEXT[] = { 0xd5,0xf0,0xe5,0x5b,0x2b,0xd7,0xc6,0x23,0x3d,0x7f,0x00,0x67,0xa9,0xeb,0xf5,0xcd };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-8", "[CBC][MCT][192][ENCRYPT][n8]") {
    const uint8_t KEY[] = { 0xdf,0x45,0x3d,0x61,0x8d,0x03,0x2a,0xe8,0xde,0x65,0xb8,0x8b,0xe8,0x46,0x14,0x7b,0xa4,0x4d,0xfb,0x41,0xc2,0x8c,0xf6,0xf8 };
    const uint8_t IV[] = { 0xd5,0xf0,0xe5,0x5b,0x2b,0xd7,0xc6,0x23,0x3d,0x7f,0x00,0x67,0xa9,0xeb,0xf5,0xcd };
    const uint8_t PLAINTEXT[] = { 0x05,0x92,0xc2,0x24,0x72,0xe9,0x6c,0x2e,0x60,0xcc,0xe3,0x96,0x5b,0x24,0xdc,0x76 };
    const uint8_t CIPHERTEXT[] = { 0x89,0x1c,0x26,0x2f,0x01,0x9b,0x2b,0xe3,0x2d,0x2a,0xa0,0x30,0xa6,0x81,0x7a,0x2e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-9", "[CBC][MCT][192][ENCRYPT][n9]") {
    const uint8_t KEY[] = { 0xd4,0x99,0x98,0x05,0x8f,0xd0,0x93,0xe8,0x57,0x79,0x9e,0xa4,0xe9,0xdd,0x3f,0x98,0x89,0x67,0x5b,0x71,0x64,0x0d,0x8c,0xd6 };
    const uint8_t IV[] = { 0x89,0x1c,0x26,0x2f,0x01,0x9b,0x2b,0xe3,0x2d,0x2a,0xa0,0x30,0xa6,0x81,0x7a,0x2e };
    const uint8_t PLAINTEXT[] = { 0x95,0x7b,0xf4,0x86,0xb9,0x77,0x42,0x36,0x0b,0xdc,0xa5,0x64,0x02,0xd3,0xb9,0x00 };
    const uint8_t CIPHERTEXT[] = { 0x31,0x0d,0xec,0xa3,0xa6,0x82,0x0a,0x76,0x57,0xbf,0x8a,0x5d,0xb0,0x24,0xce,0xbf };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-10", "[CBC][MCT][192][ENCRYPT][n10]") {
    const uint8_t KEY[] = { 0xeb,0x90,0x7e,0x6d,0x13,0x49,0xf5,0xdd,0x66,0x74,0x72,0x07,0x4f,0x5f,0x35,0xee,0xde,0xd8,0xd1,0x2c,0xd4,0x29,0x42,0x69 };
    const uint8_t IV[] = { 0x31,0x0d,0xec,0xa3,0xa6,0x82,0x0a,0x76,0x57,0xbf,0x8a,0x5d,0xb0,0x24,0xce,0xbf };
    const uint8_t PLAINTEXT[] = { 0xce,0xa8,0x1e,0x22,0x27,0xf6,0xe7,0x85,0x3f,0x09,0xe6,0x68,0x9c,0x99,0x66,0x35 };
    const uint8_t CIPHERTEXT[] = { 0xe3,0x98,0x50,0x66,0xb3,0x14,0x3b,0x50,0xfc,0x66,0xdf,0x97,0x39,0x33,0x52,0x24 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-11", "[CBC][MCT][192][ENCRYPT][n11]") {
    const uint8_t KEY[] = { 0xfa,0x1b,0x2d,0xdd,0x1f,0x0c,0x64,0x07,0x85,0xec,0x22,0x61,0xfc,0x4b,0x0e,0xbe,0x22,0xbe,0x0e,0xbb,0xed,0x1a,0x10,0x4d };
    const uint8_t IV[] = { 0xe3,0x98,0x50,0x66,0xb3,0x14,0x3b,0x50,0xfc,0x66,0xdf,0x97,0x39,0x33,0x52,0x24 };
    const uint8_t PLAINTEXT[] = { 0x66,0x8b,0x90,0xd7,0xa8,0x08,0x0e,0xa4,0x11,0x8b,0x53,0xb0,0x0c,0x45,0x91,0xda };
    const uint8_t CIPHERTEXT[] = { 0x8b,0x9d,0x3e,0x4c,0x06,0xec,0xca,0xb2,0xed,0xcd,0xa8,0xff,0x7f,0x40,0xf9,0xb2 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-12", "[CBC][MCT][192][ENCRYPT][n12]") {
    const uint8_t KEY[] = { 0xd6,0xac,0x53,0x0e,0x06,0x65,0xe4,0x08,0x0e,0x71,0x1c,0x2d,0xfa,0xa7,0xc4,0x0c,0xcf,0x73,0xa6,0x44,0x92,0x5a,0xe9,0xff };
    const uint8_t IV[] = { 0x8b,0x9d,0x3e,0x4c,0x06,0xec,0xca,0xb2,0xed,0xcd,0xa8,0xff,0x7f,0x40,0xf9,0xb2 };
    const uint8_t PLAINTEXT[] = { 0x8c,0xed,0x7b,0x63,0x56,0x89,0xe5,0x48,0x2c,0xb7,0x7e,0xd3,0x19,0x69,0x80,0x0f };
    const uint8_t CIPHERTEXT[] = { 0x09,0x31,0xf9,0xf2,0x42,0xd7,0x6d,0xd6,0xfc,0x4d,0x93,0x7f,0x09,0x52,0xba,0x86 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-13", "[CBC][MCT][192][ENCRYPT][n13]") {
    const uint8_t KEY[] = { 0x48,0x6a,0x26,0x3b,0xaf,0x71,0x47,0x9f,0x07,0x40,0xe5,0xdf,0xb8,0x70,0xa9,0xda,0x33,0x3e,0x35,0x3b,0x9b,0x08,0x53,0x79 };
    const uint8_t IV[] = { 0x09,0x31,0xf9,0xf2,0x42,0xd7,0x6d,0xd6,0xfc,0x4d,0x93,0x7f,0x09,0x52,0xba,0x86 };
    const uint8_t PLAINTEXT[] = { 0xc5,0xb0,0x18,0x52,0x9e,0x36,0xf0,0x02,0x9e,0xc6,0x75,0x35,0xa9,0x14,0xa3,0x97 };
    const uint8_t CIPHERTEXT[] = { 0x23,0x7f,0x7e,0xdd,0xc1,0xb0,0x3a,0xee,0x0b,0xa5,0xd1,0xf6,0x08,0xb9,0x05,0x2a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-14", "[CBC][MCT][192][ENCRYPT][n14]") {
    const uint8_t KEY[] = { 0x9d,0xc3,0x9f,0x66,0x9b,0xaa,0x28,0x78,0x24,0x3f,0x9b,0x02,0x79,0xc0,0x93,0x34,0x38,0x9b,0xe4,0xcd,0x93,0xb1,0x56,0x53 };
    const uint8_t IV[] = { 0x23,0x7f,0x7e,0xdd,0xc1,0xb0,0x3a,0xee,0x0b,0xa5,0xd1,0xf6,0x08,0xb9,0x05,0x2a };
    const uint8_t PLAINTEXT[] = { 0x0a,0xb6,0x87,0x25,0xf7,0x7f,0x2d,0x34,0xd5,0xa9,0xb9,0x5d,0x34,0xdb,0x6f,0xe7 };
    const uint8_t CIPHERTEXT[] = { 0xa1,0x13,0x5d,0xb6,0x10,0x95,0xf5,0x03,0xe2,0x52,0xb4,0x25,0x68,0xde,0x2c,0x16 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-15", "[CBC][MCT][192][ENCRYPT][n15]") {
    const uint8_t KEY[] = { 0x39,0xff,0x51,0x71,0x7e,0x14,0x96,0x40,0x85,0x2c,0xc6,0xb4,0x69,0x55,0x66,0x37,0xda,0xc9,0x50,0xe8,0xfb,0x6f,0x7a,0x45 };
    const uint8_t IV[] = { 0xa1,0x13,0x5d,0xb6,0x10,0x95,0xf5,0x03,0xe2,0x52,0xb4,0x25,0x68,0xde,0x2c,0x16 };
    const uint8_t PLAINTEXT[] = { 0xd3,0x23,0xf0,0x79,0x29,0x84,0x02,0x3d,0xa4,0x3c,0xce,0x17,0xe5,0xbe,0xbe,0x38 };
    const uint8_t CIPHERTEXT[] = { 0x97,0xac,0x3a,0x88,0xba,0x24,0x53,0xb4,0x04,0x01,0x7c,0x07,0x51,0xc8,0x05,0x82 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-16", "[CBC][MCT][192][ENCRYPT][n16]") {
    const uint8_t KEY[] = { 0x4e,0x5b,0xc8,0x1a,0xef,0xfc,0xa3,0xab,0x12,0x80,0xfc,0x3c,0xd3,0x71,0x35,0x83,0xde,0xc8,0x2c,0xef,0xaa,0xa7,0x7f,0xc7 };
    const uint8_t IV[] = { 0x97,0xac,0x3a,0x88,0xba,0x24,0x53,0xb4,0x04,0x01,0x7c,0x07,0x51,0xc8,0x05,0x82 };
    const uint8_t PLAINTEXT[] = { 0xa8,0x68,0xae,0xa1,0x8c,0x4a,0x38,0x0a,0x77,0xa4,0x99,0x6b,0x91,0xe8,0x35,0xeb };
    const uint8_t CIPHERTEXT[] = { 0xe0,0x73,0x64,0x78,0x39,0x3d,0x1a,0x09,0xf9,0xfa,0xa3,0xdf,0xa3,0x83,0x3d,0xf9 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-17", "[CBC][MCT][192][ENCRYPT][n17]") {
    const uint8_t KEY[] = { 0x21,0x43,0xb5,0xab,0x89,0x2c,0xde,0x8a,0xf2,0xf3,0x98,0x44,0xea,0x4c,0x2f,0x8a,0x27,0x32,0x8f,0x30,0x09,0x24,0x42,0x3e };
    const uint8_t IV[] = { 0xe0,0x73,0x64,0x78,0x39,0x3d,0x1a,0x09,0xf9,0xfa,0xa3,0xdf,0xa3,0x83,0x3d,0xf9 };
    const uint8_t PLAINTEXT[] = { 0xdb,0x2b,0x33,0x4b,0x09,0xa1,0xb7,0xfd,0x6f,0x18,0x7d,0xb1,0x66,0xd0,0x7d,0x21 };
    const uint8_t CIPHERTEXT[] = { 0x88,0xfc,0xf9,0xdc,0xc2,0xda,0x57,0x19,0xd9,0xea,0x7f,0x4b,0x67,0xcb,0xfc,0x63 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-18", "[CBC][MCT][192][ENCRYPT][n18]") {
    const uint8_t KEY[] = { 0xe5,0xc8,0x06,0xc9,0x5b,0xd7,0xc5,0x44,0x7a,0x0f,0x61,0x98,0x28,0x96,0x78,0x93,0xfe,0xd8,0xf0,0x7b,0x6e,0xef,0xbe,0x5d };
    const uint8_t IV[] = { 0x88,0xfc,0xf9,0xdc,0xc2,0xda,0x57,0x19,0xd9,0xea,0x7f,0x4b,0x67,0xcb,0xfc,0x63 };
    const uint8_t PLAINTEXT[] = { 0x3d,0x6c,0x5a,0xba,0xe8,0xc3,0x57,0x2d,0xc4,0x8b,0xb3,0x62,0xd2,0xfb,0x1b,0xce };
    const uint8_t CIPHERTEXT[] = { 0xbd,0x5d,0xe8,0xc8,0xfc,0x83,0x58,0xd9,0xc3,0xf6,0x7f,0x56,0x8f,0xfd,0x84,0x29 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-19", "[CBC][MCT][192][ENCRYPT][n19]") {
    const uint8_t KEY[] = { 0x7f,0x98,0x88,0x95,0xf6,0xf4,0x26,0x65,0xc7,0x52,0x89,0x50,0xd4,0x15,0x20,0x4a,0x3d,0x2e,0x8f,0x2d,0xe1,0x12,0x3a,0x74 };
    const uint8_t IV[] = { 0xbd,0x5d,0xe8,0xc8,0xfc,0x83,0x58,0xd9,0xc3,0xf6,0x7f,0x56,0x8f,0xfd,0x84,0x29 };
    const uint8_t PLAINTEXT[] = { 0x2b,0x42,0x59,0x23,0x24,0xe6,0x74,0x07,0x9a,0x50,0x8e,0x5c,0xad,0x23,0xe3,0x21 };
    const uint8_t CIPHERTEXT[] = { 0x74,0xad,0x1b,0x73,0x81,0xc2,0x58,0xa6,0x87,0x2d,0xe0,0xc8,0xc3,0xeb,0x97,0x43 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-20", "[CBC][MCT][192][ENCRYPT][n20]") {
    const uint8_t KEY[] = { 0xef,0x4b,0xb3,0xf9,0xcf,0x31,0xec,0xac,0xb3,0xff,0x92,0x23,0x55,0xd7,0x78,0xec,0xba,0x03,0x6f,0xe5,0x22,0xf9,0xad,0x37 };
    const uint8_t IV[] = { 0x74,0xad,0x1b,0x73,0x81,0xc2,0x58,0xa6,0x87,0x2d,0xe0,0xc8,0xc3,0xeb,0x97,0x43 };
    const uint8_t PLAINTEXT[] = { 0xc8,0x0e,0xb1,0x9b,0x84,0x60,0xe3,0x68,0x90,0xd3,0x3b,0x6c,0x39,0xc5,0xca,0xc9 };
    const uint8_t CIPHERTEXT[] = { 0x2b,0xc6,0x7d,0x54,0xb5,0x26,0xd9,0x80,0x1b,0x9a,0x8e,0x94,0x57,0x33,0x30,0xb1 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-21", "[CBC][MCT][192][ENCRYPT][n21]") {
    const uint8_t KEY[] = { 0xdd,0x98,0x81,0xc2,0x91,0xcb,0xc9,0x3d,0x98,0x39,0xef,0x77,0xe0,0xf1,0xa1,0x6c,0xa1,0x99,0xe1,0x71,0x75,0xca,0x9d,0x86 };
    const uint8_t IV[] = { 0x2b,0xc6,0x7d,0x54,0xb5,0x26,0xd9,0x80,0x1b,0x9a,0x8e,0x94,0x57,0x33,0x30,0xb1 };
    const uint8_t PLAINTEXT[] = { 0x93,0xcd,0x16,0x45,0xdd,0xbf,0x70,0xee,0x32,0xd3,0x32,0x3b,0x5e,0xfa,0x25,0x91 };
    const uint8_t CIPHERTEXT[] = { 0xb9,0xc7,0xf3,0xd5,0xf0,0xc3,0x22,0x4c,0xb8,0x63,0x9d,0xfb,0x7b,0xd5,0x1e,0x8d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-22", "[CBC][MCT][192][ENCRYPT][n22]") {
    const uint8_t KEY[] = { 0xb7,0x46,0xdf,0x72,0xd8,0x47,0xfb,0xee,0x21,0xfe,0x1c,0xa2,0x10,0x32,0x83,0x20,0x19,0xfa,0x7c,0x8a,0x0e,0x1f,0x83,0x0b };
    const uint8_t IV[] = { 0xb9,0xc7,0xf3,0xd5,0xf0,0xc3,0x22,0x4c,0xb8,0x63,0x9d,0xfb,0x7b,0xd5,0x1e,0x8d };
    const uint8_t PLAINTEXT[] = { 0x95,0x5b,0x30,0x6b,0x12,0x8e,0xff,0xed,0x6a,0xde,0x5e,0xb0,0x49,0x8c,0x32,0xd3 };
    const uint8_t CIPHERTEXT[] = { 0x29,0xa1,0x51,0x9a,0x06,0x4e,0x1c,0x7e,0x3c,0x5f,0xdc,0x4b,0xb2,0x7d,0xba,0x0f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-23", "[CBC][MCT][192][ENCRYPT][n23]") {
    const uint8_t KEY[] = { 0x91,0x11,0xba,0x55,0x4a,0x10,0xd6,0xcb,0x08,0x5f,0x4d,0x38,0x16,0x7c,0x9f,0x5e,0x25,0xa5,0xa0,0xc1,0xbc,0x62,0x39,0x04 };
    const uint8_t IV[] = { 0x29,0xa1,0x51,0x9a,0x06,0x4e,0x1c,0x7e,0x3c,0x5f,0xdc,0x4b,0xb2,0x7d,0xba,0x0f };
    const uint8_t PLAINTEXT[] = { 0x77,0x04,0x91,0x00,0xe7,0x4d,0xd9,0x76,0x26,0x57,0x65,0x27,0x92,0x57,0x2d,0x25 };
    const uint8_t CIPHERTEXT[] = { 0x57,0x82,0xd4,0xc4,0x72,0x0e,0x5c,0xb3,0xe8,0x0e,0xfe,0x7d,0x92,0x5d,0xd1,0x11 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-24", "[CBC][MCT][192][ENCRYPT][n24]") {
    const uint8_t KEY[] = { 0xca,0x09,0x37,0x06,0x7b,0xdc,0x4b,0x36,0x5f,0xdd,0x99,0xfc,0x64,0x72,0xc3,0xed,0xcd,0xab,0x5e,0xbc,0x2e,0x3f,0xe8,0x15 };
    const uint8_t IV[] = { 0x57,0x82,0xd4,0xc4,0x72,0x0e,0x5c,0xb3,0xe8,0x0e,0xfe,0x7d,0x92,0x5d,0xd1,0x11 };
    const uint8_t PLAINTEXT[] = { 0xd0,0x27,0x52,0xf4,0x6a,0xb2,0xe0,0x01,0x5b,0x18,0x8d,0x53,0x31,0xcc,0x9d,0xfd };
    const uint8_t CIPHERTEXT[] = { 0x43,0xc1,0x1d,0x5a,0x3a,0xb1,0x6f,0x5e,0xc6,0x57,0x24,0x60,0x83,0xdb,0xf4,0x1d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-25", "[CBC][MCT][192][ENCRYPT][n25]") {
    const uint8_t KEY[] = { 0xb0,0x45,0xfd,0x30,0x26,0x5b,0x53,0x27,0x1c,0x1c,0x84,0xa6,0x5e,0xc3,0xac,0xb3,0x0b,0xfc,0x7a,0xdc,0xad,0xe4,0x1c,0x08 };
    const uint8_t IV[] = { 0x43,0xc1,0x1d,0x5a,0x3a,0xb1,0x6f,0x5e,0xc6,0x57,0x24,0x60,0x83,0xdb,0xf4,0x1d };
    const uint8_t PLAINTEXT[] = { 0x91,0x0a,0x4d,0xe9,0x3c,0xf9,0x2e,0x8b,0x7a,0x4c,0xca,0x36,0x5d,0x87,0x18,0x11 };
    const uint8_t CIPHERTEXT[] = { 0x75,0x75,0xf3,0xb9,0xeb,0x10,0xf6,0x09,0x9c,0xaf,0xbf,0xcc,0x5b,0x12,0x7f,0xd5 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-26", "[CBC][MCT][192][ENCRYPT][n26]") {
    const uint8_t KEY[] = { 0x27,0x9d,0x33,0x80,0x0d,0x32,0xc3,0x64,0x69,0x69,0x77,0x1f,0xb5,0xd3,0x5a,0xba,0x97,0x53,0xc5,0x10,0xf6,0xf6,0x63,0xdd };
    const uint8_t IV[] = { 0x75,0x75,0xf3,0xb9,0xeb,0x10,0xf6,0x09,0x9c,0xaf,0xbf,0xcc,0x5b,0x12,0x7f,0xd5 };
    const uint8_t PLAINTEXT[] = { 0xaf,0x48,0xd1,0xca,0xe5,0x74,0x03,0x5c,0x97,0xd8,0xce,0xb0,0x2b,0x69,0x90,0x43 };
    const uint8_t CIPHERTEXT[] = { 0x62,0x16,0x54,0x95,0x0e,0xc3,0x92,0xe6,0xba,0x9c,0xd2,0xf8,0x18,0x10,0x6d,0x12 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-27", "[CBC][MCT][192][ENCRYPT][n27]") {
    const uint8_t KEY[] = { 0xc8,0x45,0x6f,0x31,0x38,0x76,0x07,0x46,0x0b,0x7f,0x23,0x8a,0xbb,0x10,0xc8,0x5c,0x2d,0xcf,0x17,0xe8,0xee,0xe6,0x0e,0xcf };
    const uint8_t IV[] = { 0x62,0x16,0x54,0x95,0x0e,0xc3,0x92,0xe6,0xba,0x9c,0xd2,0xf8,0x18,0x10,0x6d,0x12 };
    const uint8_t PLAINTEXT[] = { 0xe8,0x34,0x2b,0x9b,0x56,0x0e,0x46,0x19,0xef,0xd8,0x5c,0xb1,0x35,0x44,0xc4,0x22 };
    const uint8_t CIPHERTEXT[] = { 0x59,0x4e,0x2d,0x7d,0xec,0x92,0xe8,0x55,0xa4,0xb6,0x64,0x47,0x84,0x45,0x1c,0x06 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-28", "[CBC][MCT][192][ENCRYPT][n28]") {
    const uint8_t KEY[] = { 0xad,0xb9,0x71,0x59,0x23,0x12,0xf9,0xf7,0x52,0x31,0x0e,0xf7,0x57,0x82,0x20,0x09,0x89,0x79,0x73,0xaf,0x6a,0xa3,0x12,0xc9 };
    const uint8_t IV[] = { 0x59,0x4e,0x2d,0x7d,0xec,0x92,0xe8,0x55,0xa4,0xb6,0x64,0x47,0x84,0x45,0x1c,0x06 };
    const uint8_t PLAINTEXT[] = { 0xc3,0x37,0x87,0x8f,0x5f,0xe2,0x0c,0xab,0x65,0xfc,0x1e,0x68,0x1b,0x64,0xfe,0xb1 };
    const uint8_t CIPHERTEXT[] = { 0x71,0x99,0x66,0x52,0xcd,0xc5,0x0d,0x57,0xfe,0x23,0xe1,0xb2,0x62,0x8d,0x82,0x0b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-29", "[CBC][MCT][192][ENCRYPT][n29]") {
    const uint8_t KEY[] = { 0xc1,0xd8,0x52,0x0a,0x88,0x21,0x76,0x3b,0x23,0xa8,0x68,0xa5,0x9a,0x47,0x2d,0x5e,0x77,0x5a,0x92,0x1d,0x08,0x2e,0x90,0xc2 };
    const uint8_t IV[] = { 0x71,0x99,0x66,0x52,0xcd,0xc5,0x0d,0x57,0xfe,0x23,0xe1,0xb2,0x62,0x8d,0x82,0x0b };
    const uint8_t PLAINTEXT[] = { 0x09,0x79,0xb1,0x2c,0x8a,0x7f,0xb2,0x3d,0x6c,0x61,0x23,0x53,0xab,0x33,0x8f,0xcc };
    const uint8_t CIPHERTEXT[] = { 0xc2,0x20,0x36,0x16,0x63,0xef,0xfb,0x87,0x88,0x06,0x02,0x7c,0x61,0xb3,0x71,0x45 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-30", "[CBC][MCT][192][ENCRYPT][n30]") {
    const uint8_t KEY[] = { 0x15,0xe4,0x34,0xc5,0x73,0x15,0xc8,0x23,0xe1,0x88,0x5e,0xb3,0xf9,0xa8,0xd6,0xd9,0xff,0x5c,0x90,0x61,0x69,0x9d,0xe1,0x87 };
    const uint8_t IV[] = { 0xc2,0x20,0x36,0x16,0x63,0xef,0xfb,0x87,0x88,0x06,0x02,0x7c,0x61,0xb3,0x71,0x45 };
    const uint8_t PLAINTEXT[] = { 0x40,0x6f,0xf6,0xe1,0x9b,0x62,0xa0,0xa4,0xd4,0x3c,0x66,0xcf,0xfb,0x34,0xbe,0x18 };
    const uint8_t CIPHERTEXT[] = { 0xe7,0x52,0x00,0xbb,0x94,0xee,0x98,0x16,0xa8,0xf0,0xd7,0xee,0xd1,0x45,0xcf,0x77 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-31", "[CBC][MCT][192][ENCRYPT][n31]") {
    const uint8_t KEY[] = { 0x55,0x5d,0x6a,0x95,0x1a,0xff,0xd7,0x72,0x06,0xda,0x5e,0x08,0x6d,0x46,0x4e,0xcf,0x57,0xac,0x47,0x8f,0xb8,0xd8,0x2e,0xf0 };
    const uint8_t IV[] = { 0xe7,0x52,0x00,0xbb,0x94,0xee,0x98,0x16,0xa8,0xf0,0xd7,0xee,0xd1,0x45,0xcf,0x77 };
    const uint8_t PLAINTEXT[] = { 0x1e,0xa9,0x35,0xc9,0x2a,0x00,0x37,0xda,0x40,0xb9,0x5e,0x50,0x69,0xea,0x1f,0x51 };
    const uint8_t CIPHERTEXT[] = { 0x8a,0xf1,0x88,0x44,0x79,0xc4,0xa1,0x7e,0x53,0x3e,0x74,0xea,0x2f,0x49,0x12,0x87 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-32", "[CBC][MCT][192][ENCRYPT][n32]") {
    const uint8_t KEY[] = { 0x49,0x8b,0xaf,0x1e,0x0f,0xb7,0x4c,0xc3,0x8c,0x2b,0xd6,0x4c,0x14,0x82,0xef,0xb1,0x04,0x92,0x33,0x65,0x97,0x91,0x3c,0x77 };
    const uint8_t IV[] = { 0x8a,0xf1,0x88,0x44,0x79,0xc4,0xa1,0x7e,0x53,0x3e,0x74,0xea,0x2f,0x49,0x12,0x87 };
    const uint8_t PLAINTEXT[] = { 0xd7,0xa6,0x12,0x27,0x36,0x51,0x71,0x76,0x1c,0xd6,0xc5,0x8b,0x15,0x48,0x9b,0xb1 };
    const uint8_t CIPHERTEXT[] = { 0x35,0xff,0xaa,0xf0,0xb4,0x91,0x28,0x64,0x13,0x9e,0xfc,0x2a,0xb3,0x35,0x5d,0x9c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-33", "[CBC][MCT][192][ENCRYPT][n33]") {
    const uint8_t KEY[] = { 0xa9,0x11,0x18,0x97,0x02,0x60,0x7e,0xbe,0xb9,0xd4,0x7c,0xbc,0xa0,0x13,0xc7,0xd5,0x17,0x0c,0xcf,0x4f,0x24,0xa4,0x61,0xeb };
    const uint8_t IV[] = { 0x35,0xff,0xaa,0xf0,0xb4,0x91,0x28,0x64,0x13,0x9e,0xfc,0x2a,0xb3,0x35,0x5d,0x9c };
    const uint8_t PLAINTEXT[] = { 0x5d,0x3b,0xc1,0xb8,0x36,0x70,0x1b,0x02,0xe0,0x9a,0xb7,0x89,0x0d,0xd7,0x32,0x7d };
    const uint8_t CIPHERTEXT[] = { 0xea,0xf3,0x48,0xd0,0xc2,0xee,0x97,0x74,0x85,0xc3,0x8b,0x48,0xd7,0x61,0xfe,0x60 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-34", "[CBC][MCT][192][ENCRYPT][n34]") {
    const uint8_t KEY[] = { 0x99,0xf8,0x12,0xcc,0xcc,0x38,0xe9,0xdf,0x53,0x27,0x34,0x6c,0x62,0xfd,0x50,0xa1,0x92,0xcf,0x44,0x07,0xf3,0xc5,0x9f,0x8b };
    const uint8_t IV[] = { 0xea,0xf3,0x48,0xd0,0xc2,0xee,0x97,0x74,0x85,0xc3,0x8b,0x48,0xd7,0x61,0xfe,0x60 };
    const uint8_t PLAINTEXT[] = { 0x26,0x10,0x5e,0x08,0x66,0x4e,0xcf,0x4e,0x30,0xe9,0x0a,0x5b,0xce,0x58,0x97,0x61 };
    const uint8_t CIPHERTEXT[] = { 0xe7,0xe9,0x75,0x45,0xd2,0x4a,0xeb,0xe2,0xd1,0x7f,0xb1,0x3f,0x64,0x7b,0x40,0x16 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-35", "[CBC][MCT][192][ENCRYPT][n35]") {
    const uint8_t KEY[] = { 0xf6,0x61,0x76,0xf6,0x4a,0x7f,0x49,0x3c,0xb4,0xce,0x41,0x29,0xb0,0xb7,0xbb,0x43,0x43,0xb0,0xf5,0x38,0x97,0xbe,0xdf,0x9d };
    const uint8_t IV[] = { 0xe7,0xe9,0x75,0x45,0xd2,0x4a,0xeb,0xe2,0xd1,0x7f,0xb1,0x3f,0x64,0x7b,0x40,0x16 };
    const uint8_t PLAINTEXT[] = { 0x38,0x84,0xac,0x62,0x54,0x41,0xac,0x52,0x6f,0x99,0x64,0x3a,0x86,0x47,0xa0,0xe3 };
    const uint8_t CIPHERTEXT[] = { 0xd5,0x22,0xf0,0x3b,0x5f,0xad,0x7d,0x8a,0x2b,0x74,0x18,0xeb,0x7b,0x74,0xfc,0x9e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-36", "[CBC][MCT][192][ENCRYPT][n36]") {
    const uint8_t KEY[] = { 0xd2,0x74,0xf2,0xcb,0xd8,0x10,0x78,0xd4,0x61,0xec,0xb1,0x12,0xef,0x1a,0xc6,0xc9,0x68,0xc4,0xed,0xd3,0xec,0xca,0x23,0x03 };
    const uint8_t IV[] = { 0xd5,0x22,0xf0,0x3b,0x5f,0xad,0x7d,0x8a,0x2b,0x74,0x18,0xeb,0x7b,0x74,0xfc,0x9e };
    const uint8_t PLAINTEXT[] = { 0x94,0xda,0x3f,0x7f,0xa8,0x66,0xf6,0x8f,0x24,0x15,0x84,0x3d,0x92,0x6f,0x31,0xe8 };
    const uint8_t CIPHERTEXT[] = { 0x3d,0x32,0xe0,0x8a,0x11,0x32,0x25,0xba,0xae,0x74,0xc9,0x46,0xa2,0xc7,0xef,0xc5 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-37", "[CBC][MCT][192][ENCRYPT][n37]") {
    const uint8_t KEY[] = { 0x76,0xc0,0x01,0x81,0xd5,0xc7,0xa9,0x49,0x5c,0xde,0x51,0x98,0xfe,0x28,0xe3,0x73,0xc6,0xb0,0x24,0x95,0x4e,0x0d,0xcc,0xc6 };
    const uint8_t IV[] = { 0x3d,0x32,0xe0,0x8a,0x11,0x32,0x25,0xba,0xae,0x74,0xc9,0x46,0xa2,0xc7,0xef,0xc5 };
    const uint8_t PLAINTEXT[] = { 0x58,0xfb,0x6f,0xa5,0xf2,0x6a,0x47,0x9b,0xa4,0xb4,0xf3,0x4a,0x0d,0xd7,0xd1,0x9d };
    const uint8_t CIPHERTEXT[] = { 0x3b,0x86,0x1d,0x0c,0x93,0x5d,0x60,0xbe,0x5b,0x9f,0xa9,0x2d,0x7e,0x50,0x60,0x90 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-38", "[CBC][MCT][192][ENCRYPT][n38]") {
    const uint8_t KEY[] = { 0x10,0x29,0x3c,0x88,0x3c,0xa8,0xbe,0x18,0x67,0x58,0x4c,0x94,0x6d,0x75,0x83,0xcd,0x9d,0x2f,0x8d,0xb8,0x30,0x5d,0xac,0x56 };
    const uint8_t IV[] = { 0x3b,0x86,0x1d,0x0c,0x93,0x5d,0x60,0xbe,0x5b,0x9f,0xa9,0x2d,0x7e,0x50,0x60,0x90 };
    const uint8_t PLAINTEXT[] = { 0x90,0xe0,0xb8,0xd9,0x2b,0xd4,0x92,0x70,0x66,0xe9,0x3d,0x09,0xe9,0x6f,0x17,0x51 };
    const uint8_t CIPHERTEXT[] = { 0x10,0xac,0x04,0x1a,0x86,0xb7,0xc8,0xf1,0x66,0x82,0x4f,0xeb,0x29,0x55,0xe2,0xf4 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-39", "[CBC][MCT][192][ENCRYPT][n39]") {
    const uint8_t KEY[] = { 0x4e,0x7c,0x1c,0xaa,0x40,0x68,0x2a,0xc0,0x77,0xf4,0x48,0x8e,0xeb,0xc2,0x4b,0x3c,0xfb,0xad,0xc2,0x53,0x19,0x08,0x4e,0xa2 };
    const uint8_t IV[] = { 0x10,0xac,0x04,0x1a,0x86,0xb7,0xc8,0xf1,0x66,0x82,0x4f,0xeb,0x29,0x55,0xe2,0xf4 };
    const uint8_t PLAINTEXT[] = { 0x87,0x2f,0x62,0x8a,0x47,0x90,0xdb,0x21,0x5e,0x55,0x20,0x22,0x7c,0xc0,0x94,0xd8 };
    const uint8_t CIPHERTEXT[] = { 0xed,0x22,0xf6,0xdc,0xcd,0xb3,0x2a,0xd8,0xf2,0x8d,0xb0,0xf4,0x7e,0x52,0x22,0x44 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-40", "[CBC][MCT][192][ENCRYPT][n40]") {
    const uint8_t KEY[] = { 0x75,0x5a,0x75,0xde,0x23,0x8e,0xca,0x11,0x9a,0xd6,0xbe,0x52,0x26,0x71,0x61,0xe4,0x09,0x20,0x72,0xa7,0x67,0x5a,0x6c,0xe6 };
    const uint8_t IV[] = { 0xed,0x22,0xf6,0xdc,0xcd,0xb3,0x2a,0xd8,0xf2,0x8d,0xb0,0xf4,0x7e,0x52,0x22,0x44 };
    const uint8_t PLAINTEXT[] = { 0x99,0xce,0x1e,0xe5,0x36,0xc7,0x1d,0x47,0x3b,0x26,0x69,0x74,0x63,0xe6,0xe0,0xd1 };
    const uint8_t CIPHERTEXT[] = { 0x27,0x40,0x11,0x36,0x05,0xed,0x3a,0x98,0x94,0x17,0x86,0x9b,0x89,0x89,0x40,0x05 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-41", "[CBC][MCT][192][ENCRYPT][n41]") {
    const uint8_t KEY[] = { 0x5a,0x81,0xb0,0x73,0xf3,0x0b,0xeb,0x28,0xbd,0x96,0xaf,0x64,0x23,0x9c,0x5b,0x7c,0x9d,0x37,0xf4,0x3c,0xee,0xd3,0x2c,0xe3 };
    const uint8_t IV[] = { 0x27,0x40,0x11,0x36,0x05,0xed,0x3a,0x98,0x94,0x17,0x86,0x9b,0x89,0x89,0x40,0x05 };
    const uint8_t PLAINTEXT[] = { 0xce,0xd2,0xc0,0xe6,0x70,0x49,0x76,0x64,0x2f,0xdb,0xc5,0xad,0xd0,0x85,0x21,0x39 };
    const uint8_t CIPHERTEXT[] = { 0xcd,0xa9,0x7c,0x50,0x55,0x18,0xce,0xd4,0x82,0xca,0x77,0xd2,0x6e,0x47,0xbe,0xbb };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-42", "[CBC][MCT][192][ENCRYPT][n42]") {
    const uint8_t KEY[] = { 0x68,0x76,0x0a,0xf5,0x5c,0x6f,0x38,0x82,0x70,0x3f,0xd3,0x34,0x76,0x84,0x95,0xa8,0x1f,0xfd,0x83,0xee,0x80,0x94,0x92,0x58 };
    const uint8_t IV[] = { 0xcd,0xa9,0x7c,0x50,0x55,0x18,0xce,0xd4,0x82,0xca,0x77,0xd2,0x6e,0x47,0xbe,0xbb };
    const uint8_t PLAINTEXT[] = { 0x79,0xe1,0x30,0x97,0xeb,0x9a,0x52,0xa5,0x32,0xf7,0xba,0x86,0xaf,0x64,0xd3,0xaa };
    const uint8_t CIPHERTEXT[] = { 0x4f,0xba,0x31,0x41,0xf0,0xfd,0xee,0xb8,0xb9,0x84,0x90,0x9a,0x0c,0x87,0xf1,0x44 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-43", "[CBC][MCT][192][ENCRYPT][n43]") {
    const uint8_t KEY[] = { 0x48,0x33,0x4d,0xc9,0x09,0x77,0x72,0x4d,0x3f,0x85,0xe2,0x75,0x86,0x79,0x7b,0x10,0xa6,0x79,0x13,0x74,0x8c,0x13,0x63,0x1c };
    const uint8_t IV[] = { 0x4f,0xba,0x31,0x41,0xf0,0xfd,0xee,0xb8,0xb9,0x84,0x90,0x9a,0x0c,0x87,0xf1,0x44 };
    const uint8_t PLAINTEXT[] = { 0x74,0xec,0x2e,0xab,0x99,0x29,0xe4,0xb1,0x20,0x45,0x47,0x3c,0x55,0x18,0x4a,0xcf };
    const uint8_t CIPHERTEXT[] = { 0x0e,0x8b,0x61,0xf4,0xcb,0x4f,0xad,0x65,0x44,0xb3,0x66,0xa7,0x11,0x21,0x9e,0x9c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-44", "[CBC][MCT][192][ENCRYPT][n44]") {
    const uint8_t KEY[] = { 0x4a,0x06,0xde,0x7e,0x18,0xc1,0x3a,0x1d,0x31,0x0e,0x83,0x81,0x4d,0x36,0xd6,0x75,0xe2,0xca,0x75,0xd3,0x9d,0x32,0xfd,0x80 };
    const uint8_t IV[] = { 0x0e,0x8b,0x61,0xf4,0xcb,0x4f,0xad,0x65,0x44,0xb3,0x66,0xa7,0x11,0x21,0x9e,0x9c };
    const uint8_t PLAINTEXT[] = { 0x1d,0xeb,0xed,0x8a,0x70,0xcb,0x5b,0x6a,0x02,0x35,0x93,0xb7,0x11,0xb6,0x48,0x50 };
    const uint8_t CIPHERTEXT[] = { 0x1b,0xc0,0x0c,0xb9,0x3e,0x3a,0xef,0xb5,0x15,0xaa,0xed,0xc3,0x1f,0x21,0xc3,0x9d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-45", "[CBC][MCT][192][ENCRYPT][n45]") {
    const uint8_t KEY[] = { 0xe3,0x3a,0x59,0x42,0xb0,0x4e,0x3e,0x87,0x2a,0xce,0x8f,0x38,0x73,0x0c,0x39,0xc0,0xf7,0x60,0x98,0x10,0x82,0x13,0x3e,0x1d };
    const uint8_t IV[] = { 0x1b,0xc0,0x0c,0xb9,0x3e,0x3a,0xef,0xb5,0x15,0xaa,0xed,0xc3,0x1f,0x21,0xc3,0x9d };
    const uint8_t PLAINTEXT[] = { 0xa7,0x55,0x93,0xb8,0x5a,0xc9,0xb3,0xfc,0xa9,0x3c,0x87,0x3c,0xa8,0x8f,0x04,0x9a };
    const uint8_t CIPHERTEXT[] = { 0xe3,0xeb,0xb3,0x28,0x71,0xa0,0x54,0x9c,0x26,0x07,0x3d,0xd4,0x9f,0xbf,0x38,0xed };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-46", "[CBC][MCT][192][ENCRYPT][n46]") {
    const uint8_t KEY[] = { 0x5a,0x68,0xf4,0x79,0x99,0xaa,0x77,0xdf,0xc9,0x25,0x3c,0x10,0x02,0xac,0x6d,0x5c,0xd1,0x67,0xa5,0xc4,0x1d,0xac,0x06,0xf0 };
    const uint8_t IV[] = { 0xe3,0xeb,0xb3,0x28,0x71,0xa0,0x54,0x9c,0x26,0x07,0x3d,0xd4,0x9f,0xbf,0x38,0xed };
    const uint8_t PLAINTEXT[] = { 0x20,0x23,0x4d,0x28,0x02,0xc4,0xd9,0xab,0xb9,0x52,0xad,0x3b,0x29,0xe4,0x49,0x58 };
    const uint8_t CIPHERTEXT[] = { 0xea,0x27,0x71,0xfd,0x47,0x61,0x55,0xf0,0x22,0x96,0xc9,0x61,0x12,0x7c,0x8c,0xbe };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-47", "[CBC][MCT][192][ENCRYPT][n47]") {
    const uint8_t KEY[] = { 0x9f,0x23,0x45,0x4a,0xb1,0x04,0x5f,0x10,0x23,0x02,0x4d,0xed,0x45,0xcd,0x38,0xac,0xf3,0xf1,0x6c,0xa5,0x0f,0xd0,0x8a,0x4e };
    const uint8_t IV[] = { 0xea,0x27,0x71,0xfd,0x47,0x61,0x55,0xf0,0x22,0x96,0xc9,0x61,0x12,0x7c,0x8c,0xbe };
    const uint8_t PLAINTEXT[] = { 0xe8,0x9b,0xf6,0xf7,0x7f,0x57,0x00,0xf7,0xc5,0x4b,0xb1,0x33,0x28,0xae,0x28,0xcf };
    const uint8_t CIPHERTEXT[] = { 0x3c,0x02,0x9b,0x5e,0x0e,0xd8,0xc3,0xc0,0xfd,0xef,0xc7,0x4a,0x15,0x91,0xe3,0x2a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-48", "[CBC][MCT][192][ENCRYPT][n48]") {
    const uint8_t KEY[] = { 0xab,0x11,0x08,0xd0,0x07,0x91,0x94,0xa9,0x1f,0x00,0xd6,0xb3,0x4b,0x15,0xfb,0x6c,0x0e,0x1e,0xab,0xef,0x1a,0x41,0x69,0x64 };
    const uint8_t IV[] = { 0x3c,0x02,0x9b,0x5e,0x0e,0xd8,0xc3,0xc0,0xfd,0xef,0xc7,0x4a,0x15,0x91,0xe3,0x2a };
    const uint8_t PLAINTEXT[] = { 0xc2,0x8b,0x39,0x48,0xe9,0xa2,0x87,0x50,0x34,0x32,0x4d,0x9a,0xb6,0x95,0xcb,0xb9 };
    const uint8_t CIPHERTEXT[] = { 0x18,0x02,0xdf,0xd6,0xfe,0xd8,0x36,0x54,0x95,0xa1,0x5e,0x52,0x9d,0x13,0x12,0x57 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-49", "[CBC][MCT][192][ENCRYPT][n49]") {
    const uint8_t KEY[] = { 0x7a,0xa1,0x35,0xce,0xde,0xc2,0xdd,0x86,0x07,0x02,0x09,0x65,0xb5,0xcd,0xcd,0x38,0x9b,0xbf,0xf5,0xbd,0x87,0x52,0x7b,0x33 };
    const uint8_t IV[] = { 0x18,0x02,0xdf,0xd6,0xfe,0xd8,0x36,0x54,0x95,0xa1,0x5e,0x52,0x9d,0x13,0x12,0x57 };
    const uint8_t PLAINTEXT[] = { 0x1b,0x8b,0x07,0xbe,0x5d,0x3c,0xd6,0x2a,0xd1,0xb0,0x3d,0x1e,0xd9,0x53,0x49,0x2f };
    const uint8_t CIPHERTEXT[] = { 0xb1,0x32,0xa2,0xb5,0xf7,0x3d,0xf1,0x54,0xbc,0xf0,0x85,0x98,0xc1,0x12,0xbb,0x00 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-50", "[CBC][MCT][192][ENCRYPT][n50]") {
    const uint8_t KEY[] = { 0x95,0x0d,0x08,0xb9,0x5c,0x84,0xc6,0xb8,0xb6,0x30,0xab,0xd0,0x42,0xf0,0x3c,0x6c,0x27,0x4f,0x70,0x25,0x46,0x40,0xc0,0x33 };
    const uint8_t IV[] = { 0xb1,0x32,0xa2,0xb5,0xf7,0x3d,0xf1,0x54,0xbc,0xf0,0x85,0x98,0xc1,0x12,0xbb,0x00 };
    const uint8_t PLAINTEXT[] = { 0xba,0x07,0x2b,0xff,0x3f,0xed,0xaf,0xaa,0xef,0xac,0x3d,0x77,0x82,0x46,0x1b,0x3e };
    const uint8_t CIPHERTEXT[] = { 0x88,0x68,0x7b,0xf1,0x37,0x53,0x00,0xb8,0x41,0x2c,0xf1,0x0e,0x35,0xf6,0xa0,0xb1 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-51", "[CBC][MCT][192][ENCRYPT][n51]") {
    const uint8_t KEY[] = { 0x34,0x61,0x38,0x97,0x79,0xe6,0xde,0xbf,0x3e,0x58,0xd0,0x21,0x75,0xa3,0x3c,0xd4,0x66,0x63,0x81,0x2b,0x73,0xb6,0x60,0x82 };
    const uint8_t IV[] = { 0x88,0x68,0x7b,0xf1,0x37,0x53,0x00,0xb8,0x41,0x2c,0xf1,0x0e,0x35,0xf6,0xa0,0xb1 };
    const uint8_t PLAINTEXT[] = { 0x03,0xc1,0xf7,0x19,0x85,0x4c,0x00,0xe5,0xa1,0x6c,0x30,0x2e,0x25,0x62,0x18,0x07 };
    const uint8_t CIPHERTEXT[] = { 0xcf,0x5d,0x50,0x5c,0x14,0xe1,0xe2,0x72,0x63,0x4b,0x4a,0xd5,0x8b,0x6e,0xf3,0xd9 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-52", "[CBC][MCT][192][ENCRYPT][n52]") {
    const uint8_t KEY[] = { 0x65,0xd4,0xf2,0x9a,0x50,0x1b,0xdd,0x26,0xf1,0x05,0x80,0x7d,0x61,0x42,0xde,0xa6,0x05,0x28,0xcb,0xfe,0xf8,0xd8,0x93,0x5b };
    const uint8_t IV[] = { 0xcf,0x5d,0x50,0x5c,0x14,0xe1,0xe2,0x72,0x63,0x4b,0x4a,0xd5,0x8b,0x6e,0xf3,0xd9 };
    const uint8_t PLAINTEXT[] = { 0xe3,0x89,0x3c,0x1c,0xb5,0xce,0x2c,0x43,0x51,0xb5,0xca,0x0d,0x29,0xfd,0x03,0x99 };
    const uint8_t CIPHERTEXT[] = { 0xb6,0xf4,0x29,0x4c,0x5d,0xfe,0x12,0x1d,0xbd,0xa0,0x92,0x6d,0x82,0xbe,0x4f,0xb7 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-53", "[CBC][MCT][192][ENCRYPT][n53]") {
    const uint8_t KEY[] = { 0x21,0x58,0x23,0xea,0x79,0x5b,0x08,0x76,0x47,0xf1,0xa9,0x31,0x3c,0xbc,0xcc,0xbb,0xb8,0x88,0x59,0x93,0x7a,0x66,0xdc,0xec };
    const uint8_t IV[] = { 0xb6,0xf4,0x29,0x4c,0x5d,0xfe,0x12,0x1d,0xbd,0xa0,0x92,0x6d,0x82,0xbe,0x4f,0xb7 };
    const uint8_t PLAINTEXT[] = { 0xf6,0x1f,0xc6,0x61,0xd2,0x54,0x99,0x81,0x44,0x8c,0xd1,0x70,0x29,0x40,0xd5,0x50 };
    const uint8_t CIPHERTEXT[] = { 0x5b,0xd8,0x5f,0xe4,0xd6,0x5e,0x2c,0x65,0xf9,0x0c,0xb6,0x50,0x7e,0xfd,0x69,0x26 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-54", "[CBC][MCT][192][ENCRYPT][n54]") {
    const uint8_t KEY[] = { 0x97,0xf5,0xa2,0x02,0xcb,0xd9,0xfb,0x70,0x1c,0x29,0xf6,0xd5,0xea,0xe2,0xe0,0xde,0x41,0x84,0xef,0xc3,0x04,0x9b,0xb5,0xca };
    const uint8_t IV[] = { 0x5b,0xd8,0x5f,0xe4,0xd6,0x5e,0x2c,0x65,0xf9,0x0c,0xb6,0x50,0x7e,0xfd,0x69,0x26 };
    const uint8_t PLAINTEXT[] = { 0x58,0x0c,0xc7,0x8a,0xbc,0xd0,0xee,0x5c,0xb6,0xad,0x81,0xe8,0xb2,0x82,0xf3,0x06 };
    const uint8_t CIPHERTEXT[] = { 0x79,0x6d,0x26,0xdb,0x10,0x57,0x0b,0x0d,0x8e,0x1d,0x2c,0x83,0xd9,0x19,0xff,0xf5 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-55", "[CBC][MCT][192][ENCRYPT][n55]") {
    const uint8_t KEY[] = { 0x53,0x09,0x00,0x6d,0x37,0x9b,0x61,0x31,0x65,0x44,0xd0,0x0e,0xfa,0xb5,0xeb,0xd3,0xcf,0x99,0xc3,0x40,0xdd,0x82,0x4a,0x3f };
    const uint8_t IV[] = { 0x79,0x6d,0x26,0xdb,0x10,0x57,0x0b,0x0d,0x8e,0x1d,0x2c,0x83,0xd9,0x19,0xff,0xf5 };
    const uint8_t PLAINTEXT[] = { 0xcc,0x13,0x53,0xf5,0xc0,0xe3,0x3e,0xce,0xc4,0xfc,0xa2,0x6f,0xfc,0x42,0x9a,0x41 };
    const uint8_t CIPHERTEXT[] = { 0x70,0xa4,0x1d,0xf4,0xe3,0x9c,0x87,0xe9,0x30,0xbe,0x40,0x2e,0x7e,0xc7,0xa9,0xe6 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-56", "[CBC][MCT][192][ENCRYPT][n56]") {
    const uint8_t KEY[] = { 0x86,0x20,0x51,0x24,0xce,0x7d,0xb0,0xf2,0x15,0xe0,0xcd,0xfa,0x19,0x29,0x6c,0x3a,0xff,0x27,0x83,0x6e,0xa3,0x45,0xe3,0xd9 };
    const uint8_t IV[] = { 0x70,0xa4,0x1d,0xf4,0xe3,0x9c,0x87,0xe9,0x30,0xbe,0x40,0x2e,0x7e,0xc7,0xa9,0xe6 };
    const uint8_t PLAINTEXT[] = { 0xd3,0xbf,0xb9,0x83,0x90,0x93,0x2b,0x1e,0xd5,0x29,0x51,0x49,0xf9,0xe6,0xd1,0xc3 };
    const uint8_t CIPHERTEXT[] = { 0xd5,0x65,0x6a,0x81,0x27,0xe8,0xab,0x6d,0x1c,0xf8,0x59,0x50,0xa0,0xd4,0x67,0x80 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-57", "[CBC][MCT][192][ENCRYPT][n57]") {
    const uint8_t KEY[] = { 0x31,0x7d,0x14,0xfd,0xaf,0x6a,0x57,0x35,0xc0,0x85,0xa7,0x7b,0x3e,0xc1,0xc7,0x57,0xe3,0xdf,0xda,0x3e,0x03,0x91,0x84,0x59 };
    const uint8_t IV[] = { 0xd5,0x65,0x6a,0x81,0x27,0xe8,0xab,0x6d,0x1c,0xf8,0x59,0x50,0xa0,0xd4,0x67,0x80 };
    const uint8_t PLAINTEXT[] = { 0x70,0x67,0xf3,0x56,0xc3,0x14,0x5c,0x6b,0xb7,0x5d,0x45,0xd9,0x61,0x17,0xe7,0xc7 };
    const uint8_t CIPHERTEXT[] = { 0xc0,0x15,0xfd,0x20,0x52,0xc4,0x39,0x23,0x8d,0xac,0x77,0x04,0x49,0xca,0x92,0x26 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-58", "[CBC][MCT][192][ENCRYPT][n58]") {
    const uint8_t KEY[] = { 0xd9,0x3f,0x27,0xe8,0x95,0x4c,0x24,0x6f,0x00,0x90,0x5a,0x5b,0x6c,0x05,0xfe,0x74,0x6e,0x73,0xad,0x3a,0x4a,0x5b,0x16,0x7f };
    const uint8_t IV[] = { 0xc0,0x15,0xfd,0x20,0x52,0xc4,0x39,0x23,0x8d,0xac,0x77,0x04,0x49,0xca,0x92,0x26 };
    const uint8_t PLAINTEXT[] = { 0x64,0x8e,0x25,0x56,0x96,0x0d,0x96,0x19,0xe8,0x42,0x33,0x15,0x3a,0x26,0x73,0x5a };
    const uint8_t CIPHERTEXT[] = { 0x5b,0x23,0x90,0x07,0x08,0x5a,0x85,0xe5,0xa3,0xbd,0x7a,0xc4,0x08,0x15,0x51,0x93 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-59", "[CBC][MCT][192][ENCRYPT][n59]") {
    const uint8_t KEY[] = { 0xcd,0xe1,0x64,0x58,0x26,0xa7,0xc6,0x01,0x5b,0xb3,0xca,0x5c,0x64,0x5f,0x7b,0x91,0xcd,0xce,0xd7,0xfe,0x42,0x4e,0x47,0xec };
    const uint8_t IV[] = { 0x5b,0x23,0x90,0x07,0x08,0x5a,0x85,0xe5,0xa3,0xbd,0x7a,0xc4,0x08,0x15,0x51,0x93 };
    const uint8_t PLAINTEXT[] = { 0x0e,0x1a,0x92,0x08,0xac,0xbd,0x01,0x3d,0x14,0xde,0x43,0xb0,0xb3,0xeb,0xe2,0x6e };
    const uint8_t CIPHERTEXT[] = { 0x7f,0xd4,0x91,0x7e,0x61,0x19,0x53,0x48,0xcd,0x04,0x92,0xf3,0xc8,0x96,0x8e,0x92 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-60", "[CBC][MCT][192][ENCRYPT][n60]") {
    const uint8_t KEY[] = { 0x7e,0xcb,0x88,0xac,0xea,0x78,0x0b,0x2e,0x24,0x67,0x5b,0x22,0x05,0x46,0x28,0xd9,0x00,0xca,0x45,0x0d,0x8a,0xd8,0xc9,0x7e };
    const uint8_t IV[] = { 0x7f,0xd4,0x91,0x7e,0x61,0x19,0x53,0x48,0xcd,0x04,0x92,0xf3,0xc8,0x96,0x8e,0x92 };
    const uint8_t PLAINTEXT[] = { 0x15,0xd1,0xed,0x1c,0x3c,0xc9,0x90,0x53,0xb3,0x2a,0xec,0xf4,0xcc,0xdf,0xcd,0x2f };
    const uint8_t CIPHERTEXT[] = { 0xe6,0x0f,0x95,0x15,0xcb,0x00,0x6d,0xf4,0x4d,0x3f,0x2a,0x62,0x3b,0xbd,0x9b,0x5f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-61", "[CBC][MCT][192][ENCRYPT][n61]") {
    const uint8_t KEY[] = { 0x83,0xd0,0x85,0xeb,0x1d,0x98,0xcc,0x7e,0xc2,0x68,0xce,0x37,0xce,0x46,0x45,0x2d,0x4d,0xf5,0x6f,0x6f,0xb1,0x65,0x52,0x21 };
    const uint8_t IV[] = { 0xe6,0x0f,0x95,0x15,0xcb,0x00,0x6d,0xf4,0x4d,0x3f,0x2a,0x62,0x3b,0xbd,0x9b,0x5f };
    const uint8_t PLAINTEXT[] = { 0xd9,0xcc,0xd9,0x9f,0xce,0x74,0xd5,0x2a,0xfd,0x1b,0x0d,0x47,0xf7,0xe0,0xc7,0x50 };
    const uint8_t CIPHERTEXT[] = { 0x49,0xea,0x94,0x5a,0xfb,0x47,0x4e,0xfb,0xc0,0xaa,0x54,0x55,0xf3,0xbb,0xb3,0x8e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-62", "[CBC][MCT][192][ENCRYPT][n62]") {
    const uint8_t KEY[] = { 0x79,0xf0,0x6b,0x7f,0x88,0xf8,0x1a,0x64,0x8b,0x82,0x5a,0x6d,0x35,0x01,0x0b,0xd6,0x8d,0x5f,0x3b,0x3a,0x42,0xde,0xe1,0xaf };
    const uint8_t IV[] = { 0x49,0xea,0x94,0x5a,0xfb,0x47,0x4e,0xfb,0xc0,0xaa,0x54,0x55,0xf3,0xbb,0xb3,0x8e };
    const uint8_t PLAINTEXT[] = { 0xf2,0xc7,0xcc,0x26,0x27,0x02,0xea,0x5c,0xfa,0x20,0xee,0x94,0x95,0x60,0xd6,0x1a };
    const uint8_t CIPHERTEXT[] = { 0xa5,0xc8,0xb1,0x79,0xa4,0x04,0xe0,0x44,0x1c,0x24,0xf6,0x68,0x54,0xdf,0x06,0xa8 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-63", "[CBC][MCT][192][ENCRYPT][n63]") {
    const uint8_t KEY[] = { 0xfc,0x35,0x88,0x48,0x15,0x6e,0x59,0x8b,0x2e,0x4a,0xeb,0x14,0x91,0x05,0xeb,0x92,0x91,0x7b,0xcd,0x52,0x16,0x01,0xe7,0x07 };
    const uint8_t IV[] = { 0xa5,0xc8,0xb1,0x79,0xa4,0x04,0xe0,0x44,0x1c,0x24,0xf6,0x68,0x54,0xdf,0x06,0xa8 };
    const uint8_t PLAINTEXT[] = { 0x51,0xdb,0x57,0xf1,0x06,0x7b,0xca,0x8e,0x85,0xc5,0xe3,0x37,0x9d,0x96,0x43,0xef };
    const uint8_t CIPHERTEXT[] = { 0xd8,0xdc,0xb5,0x81,0x70,0xe2,0xf3,0x7f,0x74,0xaf,0x77,0xad,0x81,0x2a,0x51,0x0a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-64", "[CBC][MCT][192][ENCRYPT][n64]") {
    const uint8_t KEY[] = { 0xc8,0xb3,0x6b,0x3a,0x5b,0x9c,0x24,0x79,0xf6,0x96,0x5e,0x95,0xe1,0xe7,0x18,0xed,0xe5,0xd4,0xba,0xff,0x97,0x2b,0xb6,0x0d };
    const uint8_t IV[] = { 0xd8,0xdc,0xb5,0x81,0x70,0xe2,0xf3,0x7f,0x74,0xaf,0x77,0xad,0x81,0x2a,0x51,0x0a };
    const uint8_t PLAINTEXT[] = { 0xd1,0x29,0x7a,0x53,0x57,0x46,0xa2,0x02,0x34,0x86,0xe3,0x72,0x4e,0xf2,0x7d,0xf2 };
    const uint8_t CIPHERTEXT[] = { 0xed,0x4e,0x39,0x99,0x4b,0x4f,0x35,0xb0,0x8e,0x5a,0xc5,0xab,0x00,0x47,0x11,0x33 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-65", "[CBC][MCT][192][ENCRYPT][n65]") {
    const uint8_t KEY[] = { 0x3a,0xf6,0x81,0xfe,0x70,0xbb,0x3f,0x66,0x1b,0xd8,0x67,0x0c,0xaa,0xa8,0x2d,0x5d,0x6b,0x8e,0x7f,0x54,0x97,0x6c,0xa7,0x3e };
    const uint8_t IV[] = { 0xed,0x4e,0x39,0x99,0x4b,0x4f,0x35,0xb0,0x8e,0x5a,0xc5,0xab,0x00,0x47,0x11,0x33 };
    const uint8_t PLAINTEXT[] = { 0xf7,0xf9,0x3c,0x6d,0xaf,0x89,0xb6,0xf4,0xf2,0x45,0xea,0xc4,0x2b,0x27,0x1b,0x1f };
    const uint8_t CIPHERTEXT[] = { 0x98,0x20,0xc5,0x42,0xed,0xa0,0x1f,0x00,0xd3,0x12,0xd3,0xf5,0x52,0xd9,0x38,0x13 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-66", "[CBC][MCT][192][ENCRYPT][n66]") {
    const uint8_t KEY[] = { 0x04,0x8e,0xfb,0xc1,0x83,0x52,0x82,0xfe,0x83,0xf8,0xa2,0x4e,0x47,0x08,0x32,0x5d,0xb8,0x9c,0xac,0xa1,0xc5,0xb5,0x9f,0x2d };
    const uint8_t IV[] = { 0x98,0x20,0xc5,0x42,0xed,0xa0,0x1f,0x00,0xd3,0x12,0xd3,0xf5,0x52,0xd9,0x38,0x13 };
    const uint8_t PLAINTEXT[] = { 0x2d,0x4d,0x4d,0xd4,0xd5,0x68,0xd7,0x55,0x3e,0x78,0x7a,0x3f,0xf3,0xe9,0xbd,0x98 };
    const uint8_t CIPHERTEXT[] = { 0xfd,0x4a,0xcd,0xd0,0x2d,0xe7,0x2a,0x81,0x87,0x5c,0x98,0x7a,0x61,0x03,0x3b,0xb9 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-67", "[CBC][MCT][192][ENCRYPT][n67]") {
    const uint8_t KEY[] = { 0x32,0x61,0xfc,0xae,0x3a,0x4f,0x65,0xbc,0x7e,0xb2,0x6f,0x9e,0x6a,0xef,0x18,0xdc,0x3f,0xc0,0x34,0xdb,0xa4,0xb6,0xa4,0x94 };
    const uint8_t IV[] = { 0xfd,0x4a,0xcd,0xd0,0x2d,0xe7,0x2a,0x81,0x87,0x5c,0x98,0x7a,0x61,0x03,0x3b,0xb9 };
    const uint8_t PLAINTEXT[] = { 0x84,0x3e,0x76,0xe2,0x1a,0x19,0xb2,0x9b,0x36,0xef,0x07,0x6f,0xb9,0x1d,0xe7,0x42 };
    const uint8_t CIPHERTEXT[] = { 0x6c,0xc0,0x51,0x0f,0xd3,0x7e,0xb5,0x88,0xea,0x35,0xeb,0x2e,0xae,0x87,0x71,0xba };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-68", "[CBC][MCT][192][ENCRYPT][n68]") {
    const uint8_t KEY[] = { 0x75,0x41,0xff,0x4a,0xc8,0xd6,0xcc,0x03,0x12,0x72,0x3e,0x91,0xb9,0x91,0xad,0x54,0xd5,0xf5,0xdf,0xf5,0x0a,0x31,0xd5,0x2e };
    const uint8_t IV[] = { 0x6c,0xc0,0x51,0x0f,0xd3,0x7e,0xb5,0x88,0xea,0x35,0xeb,0x2e,0xae,0x87,0x71,0xba };
    const uint8_t PLAINTEXT[] = { 0x8f,0xa1,0xd4,0xb4,0x96,0x42,0xb5,0xd5,0x47,0x20,0x03,0xe4,0xf2,0x99,0xa9,0xbf };
    const uint8_t CIPHERTEXT[] = { 0x71,0xed,0x0e,0xb9,0x5a,0x60,0x24,0xea,0x78,0x54,0xd4,0x45,0xf7,0x1c,0x46,0x9d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-69", "[CBC][MCT][192][ENCRYPT][n69]") {
    const uint8_t KEY[] = { 0x91,0x8b,0x41,0x3f,0x20,0xe3,0x70,0x7c,0x63,0x9f,0x30,0x28,0xe3,0xf1,0x89,0xbe,0xad,0xa1,0x0b,0xb0,0xfd,0x2d,0x93,0xb3 };
    const uint8_t IV[] = { 0x71,0xed,0x0e,0xb9,0x5a,0x60,0x24,0xea,0x78,0x54,0xd4,0x45,0xf7,0x1c,0x46,0x9d };
    const uint8_t PLAINTEXT[] = { 0xa0,0xc8,0xdb,0x1d,0xb0,0x98,0xdf,0x2b,0xe4,0xca,0xbe,0x75,0xe8,0x35,0xbc,0x7f };
    const uint8_t CIPHERTEXT[] = { 0x27,0xd9,0xfc,0x3e,0x02,0x25,0x5f,0xa1,0xc0,0xa4,0xfe,0x64,0x40,0xc5,0xa7,0x98 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-70", "[CBC][MCT][192][ENCRYPT][n70]") {
    const uint8_t KEY[] = { 0x91,0x60,0x45,0x72,0x8f,0x35,0xed,0x2e,0x44,0x46,0xcc,0x16,0xe1,0xd4,0xd6,0x1f,0x6d,0x05,0xf5,0xd4,0xbd,0xe8,0x34,0x2b };
    const uint8_t IV[] = { 0x27,0xd9,0xfc,0x3e,0x02,0x25,0x5f,0xa1,0xc0,0xa4,0xfe,0x64,0x40,0xc5,0xa7,0x98 };
    const uint8_t PLAINTEXT[] = { 0x96,0x71,0x59,0x48,0x94,0x57,0xf2,0x7e,0x00,0xeb,0x04,0x4d,0xaf,0xd6,0x9d,0x52 };
    const uint8_t CIPHERTEXT[] = { 0xeb,0xc4,0xd3,0xa5,0x73,0xba,0x7f,0x28,0x0e,0xf8,0xc8,0xc1,0x23,0x7b,0xcd,0x14 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-71", "[CBC][MCT][192][ENCRYPT][n71]") {
    const uint8_t KEY[] = { 0xb7,0x35,0xe9,0x6f,0xc2,0x88,0x2a,0x10,0xaf,0x82,0x1f,0xb3,0x92,0x6e,0xa9,0x37,0x63,0xfd,0x3d,0x15,0x9e,0x93,0xf9,0x3f };
    const uint8_t IV[] = { 0xeb,0xc4,0xd3,0xa5,0x73,0xba,0x7f,0x28,0x0e,0xf8,0xc8,0xc1,0x23,0x7b,0xcd,0x14 };
    const uint8_t PLAINTEXT[] = { 0xb7,0x82,0x4d,0x8a,0x4f,0x4d,0x86,0x6c,0x26,0x55,0xac,0x1d,0x4d,0xbd,0xc7,0x3e };
    const uint8_t CIPHERTEXT[] = { 0x56,0x16,0x21,0xdd,0x9e,0x3b,0xdb,0x5e,0xad,0xba,0x9e,0xe3,0xfd,0xb0,0x32,0x44 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-72", "[CBC][MCT][192][ENCRYPT][n72]") {
    const uint8_t KEY[] = { 0xb9,0x96,0x1e,0xc7,0xf1,0x3d,0x40,0xdd,0xf9,0x94,0x3e,0x6e,0x0c,0x55,0x72,0x69,0xce,0x47,0xa3,0xf6,0x63,0x23,0xcb,0x7b };
    const uint8_t IV[] = { 0x56,0x16,0x21,0xdd,0x9e,0x3b,0xdb,0x5e,0xad,0xba,0x9e,0xe3,0xfd,0xb0,0x32,0x44 };
    const uint8_t PLAINTEXT[] = { 0xe8,0x2a,0x79,0x16,0xda,0x17,0xd7,0xbc,0x0e,0xa3,0xf7,0xa8,0x33,0xb5,0x6a,0xcd };
    const uint8_t CIPHERTEXT[] = { 0x86,0x4d,0xd6,0xa0,0x9d,0xb3,0xbd,0xec,0x2c,0x98,0xa2,0x96,0x90,0xee,0x2a,0x00 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-73", "[CBC][MCT][192][ENCRYPT][n73]") {
    const uint8_t KEY[] = { 0xc4,0x1e,0x3c,0x0f,0xea,0x44,0xa9,0xf2,0x7f,0xd9,0xe8,0xce,0x91,0xe6,0xcf,0x85,0xe2,0xdf,0x01,0x60,0xf3,0xcd,0xe1,0x7b };
    const uint8_t IV[] = { 0x86,0x4d,0xd6,0xa0,0x9d,0xb3,0xbd,0xec,0x2c,0x98,0xa2,0x96,0x90,0xee,0x2a,0x00 };
    const uint8_t PLAINTEXT[] = { 0x8c,0xba,0x9d,0x9e,0xf7,0x54,0x0c,0x1c,0x7d,0x88,0x22,0xc8,0x1b,0x79,0xe9,0x2f };
    const uint8_t CIPHERTEXT[] = { 0x67,0x52,0xfb,0x5d,0x36,0xd2,0xb1,0x8f,0x36,0x38,0x53,0xf9,0xd6,0xd5,0xc2,0x22 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-74", "[CBC][MCT][192][ENCRYPT][n74]") {
    const uint8_t KEY[] = { 0xb3,0xd5,0x55,0x49,0xcc,0xed,0x8b,0xde,0x18,0x8b,0x13,0x93,0xa7,0x34,0x7e,0x0a,0xd4,0xe7,0x52,0x99,0x25,0x18,0x23,0x59 };
    const uint8_t IV[] = { 0x67,0x52,0xfb,0x5d,0x36,0xd2,0xb1,0x8f,0x36,0x38,0x53,0xf9,0xd6,0xd5,0xc2,0x22 };
    const uint8_t PLAINTEXT[] = { 0x46,0x70,0x01,0x9b,0x12,0xb6,0x04,0xb2,0x77,0xcb,0x69,0x46,0x26,0xa9,0x22,0x2c };
    const uint8_t CIPHERTEXT[] = { 0xf6,0x08,0x32,0x76,0xcd,0x6a,0xda,0x91,0xba,0x2c,0xe9,0x82,0xd3,0x28,0x79,0xda };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-75", "[CBC][MCT][192][ENCRYPT][n75]") {
    const uint8_t KEY[] = { 0x71,0x2e,0x05,0x54,0xdd,0x26,0xde,0xe7,0xee,0x83,0x21,0xe5,0x6a,0x5e,0xa4,0x9b,0x6e,0xcb,0xbb,0x1b,0xf6,0x30,0x5a,0x83 };
    const uint8_t IV[] = { 0xf6,0x08,0x32,0x76,0xcd,0x6a,0xda,0x91,0xba,0x2c,0xe9,0x82,0xd3,0x28,0x79,0xda };
    const uint8_t PLAINTEXT[] = { 0x9b,0xd8,0x26,0x9b,0xd9,0x98,0xd2,0xc8,0xc2,0xfb,0x50,0x1d,0x11,0xcb,0x55,0x39 };
    const uint8_t CIPHERTEXT[] = { 0x3c,0xbc,0x92,0x83,0x48,0x53,0x80,0xec,0x2a,0x8d,0x5d,0x3c,0xc2,0x02,0x79,0x91 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-76", "[CBC][MCT][192][ENCRYPT][n76]") {
    const uint8_t KEY[] = { 0x0a,0x6b,0x90,0x98,0x66,0x9e,0x5a,0x97,0xd2,0x3f,0xb3,0x66,0x22,0x0d,0x24,0x77,0x44,0x46,0xe6,0x27,0x34,0x32,0x23,0x12 };
    const uint8_t IV[] = { 0x3c,0xbc,0x92,0x83,0x48,0x53,0x80,0xec,0x2a,0x8d,0x5d,0x3c,0xc2,0x02,0x79,0x91 };
    const uint8_t PLAINTEXT[] = { 0xdb,0x1f,0x82,0x73,0x06,0xa8,0x3e,0x24,0x7b,0x45,0x95,0xcc,0xbb,0xb8,0x84,0x70 };
    const uint8_t CIPHERTEXT[] = { 0x4d,0x6e,0xb5,0xa8,0xd6,0xe9,0x5f,0x55,0xe8,0x6e,0x17,0x12,0x46,0xe8,0xf9,0x92 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-77", "[CBC][MCT][192][ENCRYPT][n77]") {
    const uint8_t KEY[] = { 0x94,0x96,0xd5,0xda,0x70,0x2a,0x04,0xa2,0x9f,0x51,0x06,0xce,0xf4,0xe4,0x7b,0x22,0xac,0x28,0xf1,0x35,0x72,0xda,0xda,0x80 };
    const uint8_t IV[] = { 0x4d,0x6e,0xb5,0xa8,0xd6,0xe9,0x5f,0x55,0xe8,0x6e,0x17,0x12,0x46,0xe8,0xf9,0x92 };
    const uint8_t PLAINTEXT[] = { 0x06,0x95,0x8b,0xc6,0xec,0x68,0x5d,0x06,0x9e,0xfd,0x45,0x42,0x16,0xb4,0x5e,0x35 };
    const uint8_t CIPHERTEXT[] = { 0xd8,0xdf,0xa5,0xed,0x68,0x6a,0xad,0xca,0x18,0xdc,0xdd,0x30,0xd4,0x4b,0xeb,0xc5 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-78", "[CBC][MCT][192][ENCRYPT][n78]") {
    const uint8_t KEY[] = { 0x99,0x23,0x8d,0x39,0xad,0x8e,0xa5,0x4d,0x47,0x8e,0xa3,0x23,0x9c,0x8e,0xd6,0xe8,0xb4,0xf4,0x2c,0x05,0xa6,0x91,0x31,0x45 };
    const uint8_t IV[] = { 0xd8,0xdf,0xa5,0xed,0x68,0x6a,0xad,0xca,0x18,0xdc,0xdd,0x30,0xd4,0x4b,0xeb,0xc5 };
    const uint8_t PLAINTEXT[] = { 0x94,0x2f,0xef,0x45,0x06,0x7b,0x07,0xe3,0x0d,0xb5,0x58,0xe3,0xdd,0xa4,0xa1,0xef };
    const uint8_t CIPHERTEXT[] = { 0x33,0x0d,0x19,0x9c,0xaf,0xfa,0x9b,0x56,0x45,0x50,0x2e,0xba,0xd9,0x9b,0xde,0x6b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-79", "[CBC][MCT][192][ENCRYPT][n79]") {
    const uint8_t KEY[] = { 0x79,0x1d,0x69,0xa7,0x4b,0x16,0x94,0x05,0x74,0x83,0xba,0xbf,0x33,0x74,0x4d,0xbe,0xf1,0xa4,0x02,0xbf,0x7f,0x0a,0xef,0x2e };
    const uint8_t IV[] = { 0x33,0x0d,0x19,0x9c,0xaf,0xfa,0x9b,0x56,0x45,0x50,0x2e,0xba,0xd9,0x9b,0xde,0x6b };
    const uint8_t PLAINTEXT[] = { 0xf3,0x0d,0xf1,0x34,0xbe,0xb5,0x67,0xf8,0xe0,0x3e,0xe4,0x9e,0xe6,0x98,0x31,0x48 };
    const uint8_t CIPHERTEXT[] = { 0xae,0xac,0xe3,0x4d,0xb2,0xd6,0x6f,0x3e,0xb4,0x4a,0xcf,0x36,0xc9,0x68,0x94,0x8a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-80", "[CBC][MCT][192][ENCRYPT][n80]") {
    const uint8_t KEY[] = { 0xac,0xa4,0x29,0xad,0x33,0x1f,0x62,0xb7,0xda,0x2f,0x59,0xf2,0x81,0xa2,0x22,0x80,0x45,0xee,0xcd,0x89,0xb6,0x62,0x7b,0xa4 };
    const uint8_t IV[] = { 0xae,0xac,0xe3,0x4d,0xb2,0xd6,0x6f,0x3e,0xb4,0x4a,0xcf,0x36,0xc9,0x68,0x94,0x8a };
    const uint8_t PLAINTEXT[] = { 0xd6,0x0e,0x38,0xba,0x7f,0x47,0x52,0xd4,0xd5,0xb9,0x40,0x0a,0x78,0x09,0xf6,0xb2 };
    const uint8_t CIPHERTEXT[] = { 0x7d,0xd2,0x45,0xf1,0x94,0x99,0xeb,0x78,0x86,0xf1,0x0f,0x97,0x5c,0x18,0x85,0x83 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-81", "[CBC][MCT][192][ENCRYPT][n81]") {
    const uint8_t KEY[] = { 0xa2,0x24,0x70,0x1c,0xbf,0xb2,0xb4,0x25,0xa7,0xfd,0x1c,0x03,0x15,0x3b,0xc9,0xf8,0xc3,0x1f,0xc2,0x1e,0xea,0x7a,0xfe,0x27 };
    const uint8_t IV[] = { 0x7d,0xd2,0x45,0xf1,0x94,0x99,0xeb,0x78,0x86,0xf1,0x0f,0x97,0x5c,0x18,0x85,0x83 };
    const uint8_t PLAINTEXT[] = { 0x5a,0xb3,0x0e,0x3d,0xaa,0x25,0x1c,0xca,0x0e,0x80,0x59,0xb1,0x8c,0xad,0xd6,0x92 };
    const uint8_t CIPHERTEXT[] = { 0x41,0x65,0xc4,0xbe,0x8f,0x3f,0x9a,0xcd,0x2c,0xf4,0x03,0x07,0xda,0x7f,0x6a,0x12 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-82", "[CBC][MCT][192][ENCRYPT][n82]") {
    const uint8_t KEY[] = { 0x2c,0x5c,0x0a,0xce,0x39,0xa4,0x4c,0xe1,0xe6,0x98,0xd8,0xbd,0x9a,0x04,0x53,0x35,0xef,0xeb,0xc1,0x19,0x30,0x05,0x94,0x35 };
    const uint8_t IV[] = { 0x41,0x65,0xc4,0xbe,0x8f,0x3f,0x9a,0xcd,0x2c,0xf4,0x03,0x07,0xda,0x7f,0x6a,0x12 };
    const uint8_t PLAINTEXT[] = { 0x4b,0x92,0x94,0xb3,0xad,0xfc,0x74,0x22,0x8e,0x78,0x7a,0xd2,0x86,0x16,0xf8,0xc4 };
    const uint8_t CIPHERTEXT[] = { 0x5b,0x85,0x83,0x29,0x21,0xff,0x75,0x4e,0x4f,0x65,0x5a,0xac,0xf7,0xf7,0x34,0x77 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-83", "[CBC][MCT][192][ENCRYPT][n83]") {
    const uint8_t KEY[] = { 0x01,0x47,0x74,0x2a,0xd7,0x10,0x0f,0x72,0xbd,0x1d,0x5b,0x94,0xbb,0xfb,0x26,0x7b,0xa0,0x8e,0x9b,0xb5,0xc7,0xf2,0xa0,0x42 };
    const uint8_t IV[] = { 0x5b,0x85,0x83,0x29,0x21,0xff,0x75,0x4e,0x4f,0x65,0x5a,0xac,0xf7,0xf7,0x34,0x77 };
    const uint8_t PLAINTEXT[] = { 0xee,0x61,0x10,0xcc,0xf7,0x6f,0x8b,0xd3,0x2d,0x1b,0x7e,0xe4,0xee,0xb4,0x43,0x93 };
    const uint8_t CIPHERTEXT[] = { 0xe5,0x2f,0xd9,0x6a,0x0f,0x05,0xe4,0x85,0x6a,0xf6,0x00,0x47,0x53,0x81,0x86,0x72 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-84", "[CBC][MCT][192][ENCRYPT][n84]") {
    const uint8_t KEY[] = { 0xc5,0xcd,0xc2,0xbb,0xc6,0xd8,0x68,0x75,0x58,0x32,0x82,0xfe,0xb4,0xfe,0xc2,0xfe,0xca,0x78,0x9b,0xf2,0x94,0x73,0x26,0x30 };
    const uint8_t IV[] = { 0xe5,0x2f,0xd9,0x6a,0x0f,0x05,0xe4,0x85,0x6a,0xf6,0x00,0x47,0x53,0x81,0x86,0x72 };
    const uint8_t PLAINTEXT[] = { 0xa7,0x4a,0xc8,0xdd,0xdc,0x39,0xaf,0xf2,0xc4,0x8a,0xb6,0x91,0x11,0xc8,0x67,0x07 };
    const uint8_t CIPHERTEXT[] = { 0xdf,0xe6,0x12,0x6d,0x3d,0x72,0xff,0x48,0x6d,0xc6,0xa1,0x78,0xcc,0x32,0x0c,0x9b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-85", "[CBC][MCT][192][ENCRYPT][n85]") {
    const uint8_t KEY[] = { 0x45,0xa8,0x69,0x8f,0xc6,0x60,0x44,0xfb,0x87,0xd4,0x90,0x93,0x89,0x8c,0x3d,0xb6,0xa7,0xbe,0x3a,0x8a,0x58,0x41,0x2a,0xab };
    const uint8_t IV[] = { 0xdf,0xe6,0x12,0x6d,0x3d,0x72,0xff,0x48,0x6d,0xc6,0xa1,0x78,0xcc,0x32,0x0c,0x9b };
    const uint8_t PLAINTEXT[] = { 0x11,0x42,0x02,0x6e,0x59,0x63,0x48,0xa6,0x80,0x65,0xab,0x34,0x00,0xb8,0x2c,0x8e };
    const uint8_t CIPHERTEXT[] = { 0x45,0xc7,0x86,0x6b,0xa1,0xa3,0xf9,0x40,0x94,0x2f,0x81,0xcc,0xc4,0x03,0x0c,0x93 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-86", "[CBC][MCT][192][ENCRYPT][n86]") {
    const uint8_t KEY[] = { 0x59,0x03,0x35,0x00,0x66,0x0e,0x16,0xc6,0xc2,0x13,0x16,0xf8,0x28,0x2f,0xc4,0xf6,0x33,0x91,0xbb,0x46,0x9c,0x42,0x26,0x38 };
    const uint8_t IV[] = { 0x45,0xc7,0x86,0x6b,0xa1,0xa3,0xf9,0x40,0x94,0x2f,0x81,0xcc,0xc4,0x03,0x0c,0x93 };
    const uint8_t PLAINTEXT[] = { 0x51,0x2a,0x4e,0x49,0xfb,0xb8,0xeb,0x90,0x1c,0xab,0x5c,0x8f,0xa0,0x6e,0x52,0x3d };
    const uint8_t CIPHERTEXT[] = { 0xaf,0x47,0x58,0x31,0x8f,0x55,0xdf,0x21,0x01,0x84,0x32,0xb0,0x69,0xd6,0x92,0x8f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-87", "[CBC][MCT][192][ENCRYPT][n87]") {
    const uint8_t KEY[] = { 0x14,0xbb,0x11,0xd8,0x8a,0x9f,0x95,0xcb,0x6d,0x54,0x4e,0xc9,0xa7,0x7a,0x1b,0xd7,0x32,0x15,0x89,0xf6,0xf5,0x94,0xb4,0xb7 };
    const uint8_t IV[] = { 0xaf,0x47,0x58,0x31,0x8f,0x55,0xdf,0x21,0x01,0x84,0x32,0xb0,0x69,0xd6,0x92,0x8f };
    const uint8_t PLAINTEXT[] = { 0x5e,0x19,0xfd,0x8d,0x4d,0x22,0x43,0xd1,0x4d,0xb8,0x24,0xd8,0xec,0x91,0x83,0x0d };
    const uint8_t CIPHERTEXT[] = { 0x65,0x93,0x89,0xa7,0xe4,0x38,0x2b,0xdb,0x16,0xdd,0xab,0x37,0xe7,0xbc,0xd8,0x4f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-88", "[CBC][MCT][192][ENCRYPT][n88]") {
    const uint8_t KEY[] = { 0x97,0xdf,0x0a,0x9e,0xee,0xf2,0x92,0xda,0x08,0xc7,0xc7,0x6e,0x43,0x42,0x30,0x0c,0x24,0xc8,0x22,0xc1,0x12,0x28,0x6c,0xf8 };
    const uint8_t IV[] = { 0x65,0x93,0x89,0xa7,0xe4,0x38,0x2b,0xdb,0x16,0xdd,0xab,0x37,0xe7,0xbc,0xd8,0x4f };
    const uint8_t PLAINTEXT[] = { 0x8f,0xae,0xbc,0x74,0x00,0xb4,0xe0,0xce,0x83,0x64,0x1b,0x46,0x64,0x6d,0x07,0x11 };
    const uint8_t CIPHERTEXT[] = { 0x4f,0x21,0xaa,0xf2,0x25,0x4b,0x6e,0x8f,0x53,0xfd,0x01,0x3d,0xdd,0x4d,0x9c,0x8f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-89", "[CBC][MCT][192][ENCRYPT][n89]") {
    const uint8_t KEY[] = { 0x8d,0x32,0x1c,0x6d,0xcb,0xbc,0x77,0x72,0x47,0xe6,0x6d,0x9c,0x66,0x09,0x5e,0x83,0x77,0x35,0x23,0xfc,0xcf,0x65,0xf0,0x77 };
    const uint8_t IV[] = { 0x4f,0x21,0xaa,0xf2,0x25,0x4b,0x6e,0x8f,0x53,0xfd,0x01,0x3d,0xdd,0x4d,0x9c,0x8f };
    const uint8_t PLAINTEXT[] = { 0xf8,0x31,0x1e,0x81,0xa7,0x9e,0xa9,0x9b,0x1a,0xed,0x16,0xf3,0x25,0x4e,0xe5,0xa8 };
    const uint8_t CIPHERTEXT[] = { 0x5c,0xeb,0xe2,0xc8,0x09,0xba,0x39,0x76,0x9e,0xbf,0xfe,0x9a,0xfa,0x6b,0xc3,0x49 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-90", "[CBC][MCT][192][ENCRYPT][n90]") {
    const uint8_t KEY[] = { 0x4c,0xc9,0xfa,0xbe,0x01,0x98,0xe4,0x83,0x1b,0x0d,0x8f,0x54,0x6f,0xb3,0x67,0xf5,0xe9,0x8a,0xdd,0x66,0x35,0x0e,0x33,0x3e };
    const uint8_t IV[] = { 0x5c,0xeb,0xe2,0xc8,0x09,0xba,0x39,0x76,0x9e,0xbf,0xfe,0x9a,0xfa,0x6b,0xc3,0x49 };
    const uint8_t PLAINTEXT[] = { 0xfb,0x62,0xfe,0x0f,0x56,0x58,0x86,0xdc,0xc1,0xfb,0xe6,0xd3,0xca,0x24,0x93,0xf1 };
    const uint8_t CIPHERTEXT[] = { 0x91,0xa8,0x0b,0x92,0x1c,0x11,0x38,0xed,0x79,0x42,0x5e,0x14,0x1d,0xbc,0x19,0x60 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-91", "[CBC][MCT][192][ENCRYPT][n91]") {
    const uint8_t KEY[] = { 0x15,0x04,0x55,0x3c,0xe0,0x8c,0xb5,0xbc,0x8a,0xa5,0x84,0xc6,0x73,0xa2,0x5f,0x18,0x90,0xc8,0x83,0x72,0x28,0xb2,0x2a,0x5e };
    const uint8_t IV[] = { 0x91,0xa8,0x0b,0x92,0x1c,0x11,0x38,0xed,0x79,0x42,0x5e,0x14,0x1d,0xbc,0x19,0x60 };
    const uint8_t PLAINTEXT[] = { 0x17,0xcc,0xaa,0x13,0x61,0xad,0xc1,0x06,0x59,0xcd,0xaf,0x82,0xe1,0x14,0x51,0x3f };
    const uint8_t CIPHERTEXT[] = { 0xd2,0xb3,0x46,0xb7,0x07,0x02,0xd6,0xdc,0xd9,0x95,0x8c,0x82,0x03,0x5e,0xf3,0xb5 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-92", "[CBC][MCT][192][ENCRYPT][n92]") {
    const uint8_t KEY[] = { 0x7a,0x48,0x2e,0x82,0x02,0xfa,0xd7,0xf0,0x58,0x16,0xc2,0x71,0x74,0xa0,0x89,0xc4,0x49,0x5d,0x0f,0xf0,0x2b,0xec,0xd9,0xeb };
    const uint8_t IV[] = { 0xd2,0xb3,0x46,0xb7,0x07,0x02,0xd6,0xdc,0xd9,0x95,0x8c,0x82,0x03,0x5e,0xf3,0xb5 };
    const uint8_t PLAINTEXT[] = { 0x31,0x64,0xc2,0xb1,0x5e,0x54,0x53,0x35,0x6f,0x4c,0x7b,0xbe,0xe2,0x76,0x62,0x4c };
    const uint8_t CIPHERTEXT[] = { 0xb0,0x1b,0x07,0x47,0xc2,0x5e,0xe4,0x6e,0x18,0xba,0xf5,0x1c,0x14,0x1b,0x78,0xda };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-93", "[CBC][MCT][192][ENCRYPT][n93]") {
    const uint8_t KEY[] = { 0xe5,0xd1,0xce,0xce,0x91,0xef,0xd4,0xef,0xe8,0x0d,0xc5,0x36,0xb6,0xfe,0x6d,0xaa,0x51,0xe7,0xfa,0xec,0x3f,0xf7,0xa1,0x31 };
    const uint8_t IV[] = { 0xb0,0x1b,0x07,0x47,0xc2,0x5e,0xe4,0x6e,0x18,0xba,0xf5,0x1c,0x14,0x1b,0x78,0xda };
    const uint8_t PLAINTEXT[] = { 0x20,0xc1,0xfd,0xf7,0x0c,0x8f,0xa2,0xe5,0x9f,0x99,0xe0,0x4c,0x93,0x15,0x03,0x1f };
    const uint8_t CIPHERTEXT[] = { 0x4a,0x24,0x36,0xd7,0xa2,0xd4,0xd1,0x4a,0x0e,0x80,0xb1,0x00,0x39,0x65,0xdd,0x63 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-94", "[CBC][MCT][192][ENCRYPT][n94]") {
    const uint8_t KEY[] = { 0x99,0x9e,0x79,0x82,0x85,0xcf,0xb4,0x91,0xa2,0x29,0xf3,0xe1,0x14,0x2a,0xbc,0xe0,0x5f,0x67,0x4b,0xec,0x06,0x92,0x7c,0x52 };
    const uint8_t IV[] = { 0x4a,0x24,0x36,0xd7,0xa2,0xd4,0xd1,0x4a,0x0e,0x80,0xb1,0x00,0x39,0x65,0xdd,0x63 };
    const uint8_t PLAINTEXT[] = { 0x96,0xb2,0x1b,0xb1,0x8b,0x54,0x32,0x1a,0x7c,0x4f,0xb7,0x4c,0x14,0x20,0x60,0x7e };
    const uint8_t CIPHERTEXT[] = { 0x56,0x86,0x82,0x4a,0x16,0x84,0x7a,0xaa,0x73,0x13,0xc5,0x14,0x7b,0x62,0xcf,0x8a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-95", "[CBC][MCT][192][ENCRYPT][n95]") {
    const uint8_t KEY[] = { 0x22,0x89,0x73,0x0d,0xbe,0x39,0x6e,0xef,0xf4,0xaf,0x71,0xab,0x02,0xae,0xc6,0x4a,0x2c,0x74,0x8e,0xf8,0x7d,0xf0,0xb3,0xd8 };
    const uint8_t IV[] = { 0x56,0x86,0x82,0x4a,0x16,0x84,0x7a,0xaa,0x73,0x13,0xc5,0x14,0x7b,0x62,0xcf,0x8a };
    const uint8_t PLAINTEXT[] = { 0x8a,0x3b,0xfe,0x1f,0xe2,0x85,0xfa,0xf9,0xbb,0x17,0x0a,0x8f,0x3b,0xf6,0xda,0x7e };
    const uint8_t CIPHERTEXT[] = { 0xce,0x7f,0x4e,0x2e,0x2a,0x14,0xf2,0x4c,0xf8,0x87,0x75,0x80,0xf1,0x69,0x52,0xae };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-96", "[CBC][MCT][192][ENCRYPT][n96]") {
    const uint8_t KEY[] = { 0xd3,0x98,0x47,0xe1,0x3e,0x43,0x91,0xd2,0x3a,0xd0,0x3f,0x85,0x28,0xba,0x34,0x06,0xd4,0xf3,0xfb,0x78,0x8c,0x99,0xe1,0x76 };
    const uint8_t IV[] = { 0xce,0x7f,0x4e,0x2e,0x2a,0x14,0xf2,0x4c,0xf8,0x87,0x75,0x80,0xf1,0x69,0x52,0xae };
    const uint8_t PLAINTEXT[] = { 0x7e,0x36,0x8d,0x3a,0x56,0x3d,0x91,0x49,0xf1,0x11,0x34,0xec,0x80,0x7a,0xff,0x3d };
    const uint8_t CIPHERTEXT[] = { 0xc4,0x82,0x4d,0x73,0x76,0x66,0xb8,0xcf,0x9b,0xf8,0xaf,0xa5,0xe3,0xd6,0xc1,0x63 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-97", "[CBC][MCT][192][ENCRYPT][n97]") {
    const uint8_t KEY[] = { 0xab,0x86,0xe1,0xe9,0xbc,0x7e,0xbb,0x9c,0xfe,0x52,0x72,0xf6,0x5e,0xdc,0x8c,0xc9,0x4f,0x0b,0x54,0xdd,0x6f,0x4f,0x20,0x15 };
    const uint8_t IV[] = { 0xc4,0x82,0x4d,0x73,0x76,0x66,0xb8,0xcf,0x9b,0xf8,0xaf,0xa5,0xe3,0xd6,0xc1,0x63 };
    const uint8_t PLAINTEXT[] = { 0x24,0xb1,0x45,0x1e,0xc5,0xdb,0x01,0x51,0x78,0x1e,0xa6,0x08,0x82,0x3d,0x2a,0x4e };
    const uint8_t CIPHERTEXT[] = { 0xf9,0x88,0x87,0xf0,0xba,0xbb,0x40,0x31,0x18,0x2a,0xf0,0x98,0x52,0x04,0x0c,0x0b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-98", "[CBC][MCT][192][ENCRYPT][n98]") {
    const uint8_t KEY[] = { 0x92,0xd9,0xee,0x2f,0x0e,0x57,0xde,0xf2,0x07,0xda,0xf5,0x06,0xe4,0x67,0xcc,0xf8,0x57,0x21,0xa4,0x45,0x3d,0x4b,0x2c,0x1e };
    const uint8_t IV[] = { 0xf9,0x88,0x87,0xf0,0xba,0xbb,0x40,0x31,0x18,0x2a,0xf0,0x98,0x52,0x04,0x0c,0x0b };
    const uint8_t PLAINTEXT[] = { 0x1b,0x7e,0x69,0x8e,0xd3,0x53,0x3c,0x3d,0x39,0x5f,0x0f,0xc6,0xb2,0x29,0x65,0x6e };
    const uint8_t CIPHERTEXT[] = { 0x20,0xc0,0x49,0x23,0x0b,0xf4,0x64,0x6b,0x1a,0x73,0x1e,0xfd,0xaa,0xca,0x87,0xe6 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-ENCRYPT-99", "[CBC][MCT][192][ENCRYPT][n99]") {
    const uint8_t KEY[] = { 0x80,0x60,0x25,0x29,0xf5,0x48,0x76,0x36,0x27,0x1a,0xbc,0x25,0xef,0x93,0xa8,0x93,0x4d,0x52,0xba,0xb8,0x97,0x81,0xab,0xf8 };
    const uint8_t IV[] = { 0x20,0xc0,0x49,0x23,0x0b,0xf4,0x64,0x6b,0x1a,0x73,0x1e,0xfd,0xaa,0xca,0x87,0xe6 };
    const uint8_t PLAINTEXT[] = { 0x55,0x0a,0x6e,0x31,0x76,0xcd,0xa8,0xa4,0x12,0xb9,0xcb,0x06,0xfb,0x1f,0xa8,0xc4 };
    const uint8_t CIPHERTEXT[] = { 0xe6,0x45,0x7b,0xfc,0x34,0x33,0xe8,0x02,0x99,0xc5,0x2b,0x2b,0xe4,0x18,0xf5,0x82 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cbc(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-0", "[CBC][MCT][192][DECRYPT][n0]") {
    const uint8_t KEY[] = { 0xa2,0x4e,0xbd,0x4d,0x7a,0x08,0x0c,0x28,0xca,0xae,0x98,0x4b,0x50,0x98,0xa9,0xea,0x38,0xcf,0x72,0x80,0xe2,0xc5,0xf1,0x22 };
    const uint8_t IV[] = { 0xc5,0xae,0xb9,0xb5,0x1a,0xd5,0x10,0x83,0x71,0xc5,0x9d,0x0b,0x90,0x81,0x63,0x10 };
    const uint8_t PLAINTEXT[] = { 0x88,0x6d,0xc6,0xee,0x87,0x74,0xe7,0xa5,0xb3,0x78,0xac,0x8a,0x2b,0x63,0x7e,0x50 };
    const uint8_t CIPHERTEXT[] = { 0xeb,0x2c,0x4e,0x27,0x12,0x59,0x1f,0xf1,0x3b,0x8a,0xc7,0x87,0x0c,0x9c,0x40,0x4c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-1", "[CBC][MCT][192][DECRYPT][n1]") {
    const uint8_t KEY[] = { 0x11,0x61,0x96,0x27,0xc9,0xd4,0x5a,0x5f,0x42,0xc3,0x5e,0xa5,0xd7,0xec,0x4e,0x4f,0x8b,0xb7,0xde,0x0a,0xc9,0xa6,0x8f,0x72 };
    const uint8_t IV[] = { 0x88,0x6d,0xc6,0xee,0x87,0x74,0xe7,0xa5,0xb3,0x78,0xac,0x8a,0x2b,0x63,0x7e,0x50 };
    const uint8_t PLAINTEXT[] = { 0x0e,0x20,0x21,0xcc,0x93,0x59,0xf5,0x87,0x73,0xc4,0xf5,0x2a,0x2c,0x91,0x12,0xec };
    const uint8_t CIPHERTEXT[] = { 0x31,0x44,0x00,0xbc,0xc4,0x32,0x39,0xa8,0xb3,0x2f,0x2b,0x6a,0xb3,0xdc,0x56,0x77 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-2", "[CBC][MCT][192][DECRYPT][n2]") {
    const uint8_t KEY[] = { 0xf0,0xf1,0x0e,0x2f,0xa8,0x27,0x77,0xd5,0x4c,0xe3,0x7f,0x69,0x44,0xb5,0xbb,0xc8,0xf8,0x73,0x2b,0x20,0xe5,0x37,0x9d,0x9e };
    const uint8_t IV[] = { 0x0e,0x20,0x21,0xcc,0x93,0x59,0xf5,0x87,0x73,0xc4,0xf5,0x2a,0x2c,0x91,0x12,0xec };
    const uint8_t PLAINTEXT[] = { 0xa0,0x39,0x3c,0x7f,0x6a,0xa2,0xe9,0x7f,0x2b,0x7f,0x9b,0x79,0xf3,0x44,0x32,0x62 };
    const uint8_t CIPHERTEXT[] = { 0x3d,0x0f,0x6d,0x5b,0x7a,0xea,0x0b,0xd1,0xe1,0x90,0x98,0x08,0x61,0xf3,0x2d,0x8a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-3", "[CBC][MCT][192][DECRYPT][n3]") {
    const uint8_t KEY[] = { 0xbe,0x47,0xec,0x58,0x8e,0xf2,0x91,0x40,0xec,0xda,0x43,0x16,0x2e,0x17,0x52,0xb7,0xd3,0x0c,0xb0,0x59,0x16,0x73,0xaf,0xfc };
    const uint8_t IV[] = { 0xa0,0x39,0x3c,0x7f,0x6a,0xa2,0xe9,0x7f,0x2b,0x7f,0x9b,0x79,0xf3,0x44,0x32,0x62 };
    const uint8_t PLAINTEXT[] = { 0x92,0xd2,0x71,0xf0,0x81,0xae,0x21,0x15,0x5e,0x50,0x62,0x60,0x76,0xe7,0x88,0xd9 };
    const uint8_t CIPHERTEXT[] = { 0x4b,0x42,0xe7,0xcd,0xe1,0x75,0xfd,0xc0,0x4e,0xb6,0xe2,0x77,0x26,0xd5,0xe6,0x95 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-4", "[CBC][MCT][192][DECRYPT][n4]") {
    const uint8_t KEY[] = { 0xf8,0x7b,0x61,0xad,0x2c,0x73,0x7d,0x12,0x7e,0x08,0x32,0xe6,0xaf,0xb9,0x73,0xa2,0x8d,0x5c,0xd2,0x39,0x60,0x94,0x27,0x25 };
    const uint8_t IV[] = { 0x92,0xd2,0x71,0xf0,0x81,0xae,0x21,0x15,0x5e,0x50,0x62,0x60,0x76,0xe7,0x88,0xd9 };
    const uint8_t PLAINTEXT[] = { 0x50,0x58,0x29,0xb5,0x74,0xd5,0x46,0xb1,0x26,0x4c,0x56,0xc3,0x30,0xb4,0xe9,0x50 };
    const uint8_t CIPHERTEXT[] = { 0x80,0xd0,0x7c,0x01,0x89,0x5f,0x7f,0x2e,0x46,0x3c,0x8d,0xf5,0xa2,0x81,0xec,0x52 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-5", "[CBC][MCT][192][DECRYPT][n5]") {
    const uint8_t KEY[] = { 0x63,0x20,0x75,0xf8,0x01,0x1a,0x6d,0x1d,0x2e,0x50,0x1b,0x53,0xdb,0x6c,0x35,0x13,0xab,0x10,0x84,0xfa,0x50,0x20,0xce,0x75 };
    const uint8_t IV[] = { 0x50,0x58,0x29,0xb5,0x74,0xd5,0x46,0xb1,0x26,0x4c,0x56,0xc3,0x30,0xb4,0xe9,0x50 };
    const uint8_t PLAINTEXT[] = { 0xee,0xbb,0x5d,0x3b,0x42,0xd3,0x30,0xb1,0x70,0xc5,0x28,0x53,0x27,0xf0,0xd9,0xcb };
    const uint8_t CIPHERTEXT[] = { 0xb4,0x3b,0xf7,0x1e,0x06,0x67,0xee,0xf1,0x9b,0x5b,0x14,0x55,0x2d,0x69,0x10,0x0f };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-6", "[CBC][MCT][192][DECRYPT][n6]") {
    const uint8_t KEY[] = { 0x99,0x4b,0x73,0xe5,0x4a,0x2b,0x3c,0x39,0xc0,0xeb,0x46,0x68,0x99,0xbf,0x05,0xa2,0xdb,0xd5,0xac,0xa9,0x77,0xd0,0x17,0xbe };
    const uint8_t IV[] = { 0xee,0xbb,0x5d,0x3b,0x42,0xd3,0x30,0xb1,0x70,0xc5,0x28,0x53,0x27,0xf0,0xd9,0xcb };
    const uint8_t PLAINTEXT[] = { 0x67,0x44,0x27,0x6e,0x2b,0x7e,0x97,0xe0,0x8f,0x71,0x87,0xba,0xf2,0x8e,0xae,0x85 };
    const uint8_t CIPHERTEXT[] = { 0x8f,0xe1,0x12,0x49,0x49,0xe2,0xf9,0xac,0xfa,0x6b,0x06,0x1d,0x4b,0x31,0x51,0x24 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-7", "[CBC][MCT][192][DECRYPT][n7]") {
    const uint8_t KEY[] = { 0xa1,0x7c,0x9c,0xdd,0x75,0x3d,0xd1,0x6d,0xa7,0xaf,0x61,0x06,0xb2,0xc1,0x92,0x42,0x54,0xa4,0x2b,0x13,0x85,0x5e,0xb9,0x3b };
    const uint8_t IV[] = { 0x67,0x44,0x27,0x6e,0x2b,0x7e,0x97,0xe0,0x8f,0x71,0x87,0xba,0xf2,0x8e,0xae,0x85 };
    const uint8_t PLAINTEXT[] = { 0xf4,0x6f,0x3b,0x9e,0x8c,0xc5,0xdc,0x79,0x23,0xbb,0x55,0x55,0x41,0xb1,0xb7,0x5d };
    const uint8_t CIPHERTEXT[] = { 0xab,0x6e,0xc9,0x4f,0x95,0x65,0x6c,0x8c,0x38,0x37,0xef,0x38,0x3f,0x16,0xed,0x54 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-8", "[CBC][MCT][192][DECRYPT][n8]") {
    const uint8_t KEY[] = { 0xcf,0x79,0x54,0x8f,0xa5,0xf4,0xca,0x1c,0x53,0xc0,0x5a,0x98,0x3e,0x04,0x4e,0x3b,0x77,0x1f,0x7e,0x46,0xc4,0xef,0x0e,0x66 };
    const uint8_t IV[] = { 0xf4,0x6f,0x3b,0x9e,0x8c,0xc5,0xdc,0x79,0x23,0xbb,0x55,0x55,0x41,0xb1,0xb7,0x5d };
    const uint8_t PLAINTEXT[] = { 0xce,0x6e,0xbd,0x40,0x37,0x27,0xab,0x52,0x4b,0x4a,0xdf,0x40,0xeb,0xb0,0xde,0xa2 };
    const uint8_t CIPHERTEXT[] = { 0xd1,0xa2,0x8d,0xca,0x9d,0x02,0xf4,0xe9,0x6e,0x05,0xc8,0x52,0xd0,0xc9,0x1b,0x71 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-9", "[CBC][MCT][192][DECRYPT][n9]") {
    const uint8_t KEY[] = { 0xca,0x1f,0x2f,0x72,0x4a,0x1b,0x7c,0x18,0x9d,0xae,0xe7,0xd8,0x09,0x23,0xe5,0x69,0x3c,0x55,0xa1,0x06,0x2f,0x5f,0xd0,0xc4 };
    const uint8_t IV[] = { 0xce,0x6e,0xbd,0x40,0x37,0x27,0xab,0x52,0x4b,0x4a,0xdf,0x40,0xeb,0xb0,0xde,0xa2 };
    const uint8_t PLAINTEXT[] = { 0x3b,0xa2,0x93,0x9e,0xd4,0x96,0xeb,0xbe,0xdb,0x52,0x07,0x36,0xd6,0x83,0xcf,0xd4 };
    const uint8_t CIPHERTEXT[] = { 0xe3,0xe7,0xbc,0x3d,0x19,0x35,0xb3,0x0a,0x05,0x66,0x7b,0xfd,0xef,0xef,0xb6,0x04 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-10", "[CBC][MCT][192][DECRYPT][n10]") {
    const uint8_t KEY[] = { 0xd0,0xe6,0xcb,0x1b,0x0f,0x45,0x1e,0xf9,0xa6,0x0c,0x74,0x46,0xdd,0xb5,0x0e,0xd7,0xe7,0x07,0xa6,0x30,0xf9,0xdc,0x1f,0x10 };
    const uint8_t IV[] = { 0x3b,0xa2,0x93,0x9e,0xd4,0x96,0xeb,0xbe,0xdb,0x52,0x07,0x36,0xd6,0x83,0xcf,0xd4 };
    const uint8_t PLAINTEXT[] = { 0x94,0xa6,0x17,0xd1,0xbf,0xa5,0x5b,0x3b,0xbb,0x40,0x05,0x55,0x81,0x4a,0xe6,0xe9 };
    const uint8_t CIPHERTEXT[] = { 0xe0,0xbc,0x44,0x02,0xbf,0x52,0x25,0xd5,0x1a,0xf9,0xe4,0x69,0x45,0x5e,0x62,0xe1 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-11", "[CBC][MCT][192][DECRYPT][n11]") {
    const uint8_t KEY[] = { 0x49,0x77,0x87,0x80,0xff,0xf4,0xd5,0x2b,0x32,0xaa,0x63,0x97,0x62,0x10,0x55,0xec,0x5c,0x47,0xa3,0x65,0x78,0x96,0xf9,0xf9 };
    const uint8_t IV[] = { 0x94,0xa6,0x17,0xd1,0xbf,0xa5,0x5b,0x3b,0xbb,0x40,0x05,0x55,0x81,0x4a,0xe6,0xe9 };
    const uint8_t PLAINTEXT[] = { 0x08,0x07,0xa3,0x1d,0x40,0x7f,0xcc,0x8b,0x05,0x3f,0x12,0x3b,0xd5,0xea,0x87,0xb4 };
    const uint8_t CIPHERTEXT[] = { 0x5f,0x9d,0xaa,0xf6,0x2a,0x4e,0xee,0x3d,0x99,0x91,0x4c,0x9b,0xf0,0xb1,0xcb,0xd2 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-12", "[CBC][MCT][192][DECRYPT][n12]") {
    const uint8_t KEY[] = { 0x93,0xa8,0x0b,0x58,0xc3,0xc5,0xe3,0x5a,0x3a,0xad,0xc0,0x8a,0x22,0x6f,0x99,0x67,0x59,0x78,0xb1,0x5e,0xad,0x7c,0x7e,0x4d };
    const uint8_t IV[] = { 0x08,0x07,0xa3,0x1d,0x40,0x7f,0xcc,0x8b,0x05,0x3f,0x12,0x3b,0xd5,0xea,0x87,0xb4 };
    const uint8_t PLAINTEXT[] = { 0x7a,0xe1,0x53,0xd2,0xf9,0xd0,0x81,0x73,0xbe,0xaf,0x32,0xd2,0xaa,0x66,0xdc,0x41 };
    const uint8_t CIPHERTEXT[] = { 0x2e,0x3a,0x56,0x9b,0xa4,0xfb,0x6c,0x84,0xda,0xdf,0x8c,0xd8,0x3c,0x31,0x36,0x71 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-13", "[CBC][MCT][192][DECRYPT][n13]") {
    const uint8_t KEY[] = { 0x30,0x99,0x2e,0x27,0x14,0xff,0xe6,0xd8,0x40,0x4c,0x93,0x58,0xdb,0xbf,0x18,0x14,0xe7,0xd7,0x83,0x8c,0x07,0x1a,0xa2,0x0c };
    const uint8_t IV[] = { 0x7a,0xe1,0x53,0xd2,0xf9,0xd0,0x81,0x73,0xbe,0xaf,0x32,0xd2,0xaa,0x66,0xdc,0x41 };
    const uint8_t PLAINTEXT[] = { 0xe1,0xf7,0x80,0x37,0xaa,0x32,0x6b,0x0f,0xda,0x1d,0x0f,0xd3,0xae,0xa3,0x11,0x94 };
    const uint8_t CIPHERTEXT[] = { 0x89,0x45,0x92,0x1d,0x47,0xe5,0xf4,0xf2,0xa3,0x31,0x25,0x7f,0xd7,0x3a,0x05,0x82 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-14", "[CBC][MCT][192][DECRYPT][n14]") {
    const uint8_t KEY[] = { 0x68,0xf7,0x30,0x29,0x51,0xa5,0xf0,0x83,0xa1,0xbb,0x13,0x6f,0x71,0x8d,0x73,0x1b,0x3d,0xca,0x8c,0x5f,0xa9,0xb9,0xb3,0x98 };
    const uint8_t IV[] = { 0xe1,0xf7,0x80,0x37,0xaa,0x32,0x6b,0x0f,0xda,0x1d,0x0f,0xd3,0xae,0xa3,0x11,0x94 };
    const uint8_t PLAINTEXT[] = { 0xf6,0x7e,0x28,0x8f,0xba,0x9b,0x76,0x78,0x8c,0x44,0x55,0xa1,0xce,0xdf,0x97,0xc7 };
    const uint8_t CIPHERTEXT[] = { 0x7a,0x33,0xff,0x3e,0xee,0x64,0xaa,0x52,0x58,0x6e,0x1e,0x0e,0x45,0x5a,0x16,0x5b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-15", "[CBC][MCT][192][DECRYPT][n15]") {
    const uint8_t KEY[] = { 0x05,0xf8,0xc6,0xfd,0xa8,0x04,0x34,0x25,0x57,0xc5,0x3b,0xe0,0xcb,0x16,0x05,0x63,0xb1,0x8e,0xd9,0xfe,0x67,0x66,0x24,0x5f };
    const uint8_t IV[] = { 0xf6,0x7e,0x28,0x8f,0xba,0x9b,0x76,0x78,0x8c,0x44,0x55,0xa1,0xce,0xdf,0x97,0xc7 };
    const uint8_t PLAINTEXT[] = { 0x47,0x44,0x99,0x7b,0xd6,0x03,0x46,0x56,0x1b,0x7d,0xf3,0xba,0x8e,0x28,0xe5,0xdd };
    const uint8_t CIPHERTEXT[] = { 0x19,0xcc,0xd6,0xba,0xbb,0x7a,0x43,0xf5,0x6d,0x0f,0xf6,0xd4,0xf9,0xa1,0xc4,0xa6 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-16", "[CBC][MCT][192][DECRYPT][n16]") {
    const uint8_t KEY[] = { 0xe9,0x13,0x4a,0x2d,0xe9,0x6b,0x86,0x45,0x10,0x81,0xa2,0x9b,0x1d,0x15,0x43,0x35,0xaa,0xf3,0x2a,0x44,0xe9,0x4e,0xc1,0x82 };
    const uint8_t IV[] = { 0x47,0x44,0x99,0x7b,0xd6,0x03,0x46,0x56,0x1b,0x7d,0xf3,0xba,0x8e,0x28,0xe5,0xdd };
    const uint8_t PLAINTEXT[] = { 0x04,0x9f,0x25,0x4b,0xc4,0x53,0x10,0x7f,0xc2,0x39,0xea,0xbc,0x66,0x0d,0xd8,0xef };
    const uint8_t CIPHERTEXT[] = { 0x44,0x1c,0x1f,0x0a,0xf9,0x84,0x0a,0x3c,0xec,0xeb,0x8c,0xd0,0x41,0x6f,0xb2,0x60 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-17", "[CBC][MCT][192][DECRYPT][n17]") {
    const uint8_t KEY[] = { 0x81,0x5f,0x9c,0x73,0x29,0xc5,0xf2,0xa3,0x14,0x1e,0x87,0xd0,0xd9,0x46,0x53,0x4a,0x68,0xca,0xc0,0xf8,0x8f,0x43,0x19,0x6d };
    const uint8_t IV[] = { 0x04,0x9f,0x25,0x4b,0xc4,0x53,0x10,0x7f,0xc2,0x39,0xea,0xbc,0x66,0x0d,0xd8,0xef };
    const uint8_t PLAINTEXT[] = { 0x53,0x99,0x1b,0x7f,0x3b,0x1b,0xcc,0x2e,0x03,0xb9,0xf7,0x02,0x96,0xa5,0x1d,0x9d };
    const uint8_t CIPHERTEXT[] = { 0xdf,0xa2,0xec,0xcf,0x87,0x50,0x86,0x48,0x68,0x4c,0xd6,0x5e,0xc0,0xae,0x74,0xe6 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-18", "[CBC][MCT][192][DECRYPT][n18]") {
    const uint8_t KEY[] = { 0xfc,0x57,0x0b,0x34,0xcd,0xf9,0xda,0xbb,0x47,0x87,0x9c,0xaf,0xe2,0x5d,0x9f,0x64,0x6b,0x73,0x37,0xfa,0x19,0xe6,0x04,0xf0 };
    const uint8_t IV[] = { 0x53,0x99,0x1b,0x7f,0x3b,0x1b,0xcc,0x2e,0x03,0xb9,0xf7,0x02,0x96,0xa5,0x1d,0x9d };
    const uint8_t PLAINTEXT[] = { 0xb7,0xd1,0x5c,0x6b,0x1c,0xcb,0xbd,0xd9,0x82,0xde,0x20,0xff,0x93,0x84,0x7b,0xce };
    const uint8_t CIPHERTEXT[] = { 0x00,0x2e,0x17,0x88,0x52,0xb0,0x25,0x0b,0x7d,0x08,0x97,0x47,0xe4,0x3c,0x28,0x18 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-19", "[CBC][MCT][192][DECRYPT][n19]") {
    const uint8_t KEY[] = { 0xce,0x78,0xe4,0x75,0x0a,0x52,0xa6,0xf6,0xf0,0x56,0xc0,0xc4,0xfe,0x96,0x22,0xbd,0xe9,0xad,0x17,0x05,0x8a,0x62,0x7f,0x3e };
    const uint8_t IV[] = { 0xb7,0xd1,0x5c,0x6b,0x1c,0xcb,0xbd,0xd9,0x82,0xde,0x20,0xff,0x93,0x84,0x7b,0xce };
    const uint8_t PLAINTEXT[] = { 0x81,0xe2,0xf3,0x8b,0x8a,0xb4,0xe2,0x10,0x46,0x61,0x57,0x4c,0x06,0xfd,0x37,0x13 };
    const uint8_t CIPHERTEXT[] = { 0xb8,0x3e,0x90,0x8c,0xfb,0x77,0x88,0x17,0x32,0x2f,0xef,0x41,0xc7,0xab,0x7c,0x4d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-20", "[CBC][MCT][192][DECRYPT][n20]") {
    const uint8_t KEY[] = { 0x22,0x7d,0x78,0xb9,0x64,0xb0,0x05,0x48,0x71,0xb4,0x33,0x4f,0x74,0x22,0xc0,0xad,0xaf,0xcc,0x40,0x49,0x8c,0x9f,0x48,0x2d };
    const uint8_t IV[] = { 0x81,0xe2,0xf3,0x8b,0x8a,0xb4,0xe2,0x10,0x46,0x61,0x57,0x4c,0x06,0xfd,0x37,0x13 };
    const uint8_t PLAINTEXT[] = { 0xef,0x35,0x8c,0xc6,0xaa,0x12,0xe3,0x06,0x71,0x6b,0x38,0x46,0xb8,0xd6,0x09,0x3c };
    const uint8_t CIPHERTEXT[] = { 0xde,0xd1,0x51,0x29,0x30,0xa1,0x30,0x25,0xec,0x05,0x9c,0xcc,0x6e,0xe2,0xa3,0xbe };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-21", "[CBC][MCT][192][DECRYPT][n21]") {
    const uint8_t KEY[] = { 0x6f,0x6d,0xf5,0x0d,0xf9,0xea,0x97,0x98,0x9e,0x81,0xbf,0x89,0xde,0x30,0x23,0xab,0xde,0xa7,0x78,0x0f,0x34,0x49,0x41,0x11 };
    const uint8_t IV[] = { 0xef,0x35,0x8c,0xc6,0xaa,0x12,0xe3,0x06,0x71,0x6b,0x38,0x46,0xb8,0xd6,0x09,0x3c };
    const uint8_t PLAINTEXT[] = { 0x8a,0x9a,0x39,0xd7,0x3f,0xd8,0x50,0x96,0xa3,0x33,0xfa,0xbd,0xe5,0x99,0xba,0xdb };
    const uint8_t CIPHERTEXT[] = { 0xe2,0xc0,0x5f,0x3f,0x68,0x12,0xd3,0xa8,0x4d,0x10,0x8d,0xb4,0x9d,0x5a,0x92,0xd0 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-22", "[CBC][MCT][192][DECRYPT][n22]") {
    const uint8_t KEY[] = { 0x82,0xac,0x53,0x8c,0x59,0x39,0x63,0x5c,0x14,0x1b,0x86,0x5e,0xe1,0xe8,0x73,0x3d,0x7d,0x94,0x82,0xb2,0xd1,0xd0,0xfb,0xca };
    const uint8_t IV[] = { 0x8a,0x9a,0x39,0xd7,0x3f,0xd8,0x50,0x96,0xa3,0x33,0xfa,0xbd,0xe5,0x99,0xba,0xdb };
    const uint8_t PLAINTEXT[] = { 0x6d,0x5f,0x45,0x12,0x0b,0x9f,0x6f,0xe1,0x4b,0xa1,0x62,0x97,0x16,0xae,0xa7,0x31 };
    const uint8_t CIPHERTEXT[] = { 0x1a,0x08,0x93,0xeb,0xc4,0x45,0xa5,0x5e,0xed,0xc1,0xa6,0x81,0xa0,0xd3,0xf4,0xc4 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-23", "[CBC][MCT][192][DECRYPT][n23]") {
    const uint8_t KEY[] = { 0xbe,0x25,0xf3,0x53,0x77,0x33,0x0a,0xc4,0x79,0x44,0xc3,0x4c,0xea,0x77,0x1c,0xdc,0x36,0x35,0xe0,0x25,0xc7,0x7e,0x5c,0xfb };
    const uint8_t IV[] = { 0x6d,0x5f,0x45,0x12,0x0b,0x9f,0x6f,0xe1,0x4b,0xa1,0x62,0x97,0x16,0xae,0xa7,0x31 };
    const uint8_t PLAINTEXT[] = { 0x37,0x6d,0xa2,0x13,0xaa,0x73,0xa9,0xa4,0xfc,0x04,0x71,0x66,0x76,0x87,0x7f,0xdd };
    const uint8_t CIPHERTEXT[] = { 0x7c,0xdf,0x4f,0x75,0xcd,0xd7,0x69,0xe3,0x3c,0x89,0xa0,0xdf,0x2e,0x0a,0x69,0x98 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-24", "[CBC][MCT][192][DECRYPT][n24]") {
    const uint8_t KEY[] = { 0xf6,0x49,0xb8,0xf6,0xb9,0xcd,0x98,0xab,0x4e,0x29,0x61,0x5f,0x40,0x04,0xb5,0x78,0xca,0x31,0x91,0x43,0xb1,0xf9,0x23,0x26 };
    const uint8_t IV[] = { 0x37,0x6d,0xa2,0x13,0xaa,0x73,0xa9,0xa4,0xfc,0x04,0x71,0x66,0x76,0x87,0x7f,0xdd };
    const uint8_t PLAINTEXT[] = { 0x55,0xb1,0xe2,0xe4,0x1f,0x72,0xea,0x5b,0x78,0xc8,0xc8,0x36,0x26,0x13,0xf6,0x84 };
    const uint8_t CIPHERTEXT[] = { 0x65,0xd4,0xd6,0xdb,0xe1,0x54,0x77,0xff,0x48,0x6c,0x4b,0xa5,0xce,0xfe,0x92,0x6f };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-25", "[CBC][MCT][192][DECRYPT][n25]") {
    const uint8_t KEY[] = { 0xf8,0x01,0xfb,0x4b,0x25,0xed,0x09,0x58,0x1b,0x98,0x83,0xbb,0x5f,0x76,0x5f,0x23,0xb2,0xf9,0x59,0x75,0x97,0xea,0xd5,0xa2 };
    const uint8_t IV[] = { 0x55,0xb1,0xe2,0xe4,0x1f,0x72,0xea,0x5b,0x78,0xc8,0xc8,0x36,0x26,0x13,0xf6,0x84 };
    const uint8_t PLAINTEXT[] = { 0x8b,0xca,0xa9,0xa6,0x87,0x6a,0x00,0x79,0xfc,0xf1,0x6b,0x0b,0xd7,0x71,0xc6,0x5d };
    const uint8_t CIPHERTEXT[] = { 0xfa,0x0d,0xbc,0x59,0x14,0xa0,0x0e,0x67,0x0e,0x48,0x43,0xbd,0x9c,0x20,0x91,0xf3 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-26", "[CBC][MCT][192][DECRYPT][n26]") {
    const uint8_t KEY[] = { 0xf2,0xaf,0x92,0xa3,0x21,0x45,0x08,0xa1,0x90,0x52,0x2a,0x1d,0xd8,0x1c,0x5f,0x5a,0x4e,0x08,0x32,0x7e,0x40,0x9b,0x13,0xff };
    const uint8_t IV[] = { 0x8b,0xca,0xa9,0xa6,0x87,0x6a,0x00,0x79,0xfc,0xf1,0x6b,0x0b,0xd7,0x71,0xc6,0x5d };
    const uint8_t PLAINTEXT[] = { 0x79,0x43,0xad,0xa7,0xb7,0x15,0x49,0xe8,0xbb,0x83,0x08,0x8a,0x08,0xee,0x35,0x16 };
    const uint8_t CIPHERTEXT[] = { 0xd7,0x4e,0x06,0xb9,0x93,0xdf,0xd5,0xa9,0x0a,0xae,0x69,0xe8,0x04,0xa8,0x01,0xf9 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-27", "[CBC][MCT][192][DECRYPT][n27]") {
    const uint8_t KEY[] = { 0x98,0x56,0x24,0x4e,0x88,0x28,0x4d,0x40,0xe9,0x11,0x87,0xba,0x6f,0x09,0x16,0xb2,0xf5,0x8b,0x3a,0xf4,0x48,0x75,0x26,0xe9 };
    const uint8_t IV[] = { 0x79,0x43,0xad,0xa7,0xb7,0x15,0x49,0xe8,0xbb,0x83,0x08,0x8a,0x08,0xee,0x35,0x16 };
    const uint8_t PLAINTEXT[] = { 0xd6,0x83,0x3b,0xb1,0x20,0x59,0xa0,0x5d,0x6f,0x32,0xc4,0xe4,0x69,0xca,0x49,0xf9 };
    const uint8_t CIPHERTEXT[] = { 0x97,0x62,0xe5,0x42,0x86,0xd1,0xe4,0xd8,0x6a,0xf9,0xb6,0xed,0xa9,0x6d,0x45,0xe1 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-28", "[CBC][MCT][192][DECRYPT][n28]") {
    const uint8_t KEY[] = { 0x18,0x18,0x45,0x91,0x4c,0x60,0x8c,0x73,0x3f,0x92,0xbc,0x0b,0x4f,0x50,0xb6,0xef,0x9a,0xb9,0xfe,0x10,0x21,0xbf,0x6f,0x10 };
    const uint8_t IV[] = { 0xd6,0x83,0x3b,0xb1,0x20,0x59,0xa0,0x5d,0x6f,0x32,0xc4,0xe4,0x69,0xca,0x49,0xf9 };
    const uint8_t PLAINTEXT[] = { 0x3d,0xc2,0xf7,0x12,0xf3,0xfb,0x8b,0x48,0x87,0x56,0xb9,0x2b,0x05,0x65,0xd7,0x9d };
    const uint8_t CIPHERTEXT[] = { 0x43,0x80,0x72,0x6f,0xd3,0xbd,0xe3,0x14,0x80,0x4e,0x61,0xdf,0xc4,0x48,0xc1,0x33 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-29", "[CBC][MCT][192][DECRYPT][n29]") {
    const uint8_t KEY[] = { 0xab,0xb5,0xe8,0xe2,0x8f,0x20,0x37,0x93,0x02,0x50,0x4b,0x19,0xbc,0xab,0x3d,0xa7,0x1d,0xef,0x47,0x3b,0x24,0xda,0xb8,0x8d };
    const uint8_t IV[] = { 0x3d,0xc2,0xf7,0x12,0xf3,0xfb,0x8b,0x48,0x87,0x56,0xb9,0x2b,0x05,0x65,0xd7,0x9d };
    const uint8_t PLAINTEXT[] = { 0x24,0xec,0x29,0xa2,0x12,0xfb,0x25,0x45,0x12,0x66,0x6a,0x3b,0xb3,0x39,0xb1,0x5d };
    const uint8_t CIPHERTEXT[] = { 0x7f,0x49,0x80,0x05,0x5e,0xb5,0x03,0xbb,0xb3,0xad,0xad,0x73,0xc3,0x40,0xbb,0xe0 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-30", "[CBC][MCT][192][DECRYPT][n30]") {
    const uint8_t KEY[] = { 0x11,0xca,0x76,0xd3,0x1c,0xda,0x66,0x11,0x26,0xbc,0x62,0xbb,0xae,0x50,0x18,0xe2,0x0f,0x89,0x2d,0x00,0x97,0xe3,0x09,0xd0 };
    const uint8_t IV[] = { 0x24,0xec,0x29,0xa2,0x12,0xfb,0x25,0x45,0x12,0x66,0x6a,0x3b,0xb3,0x39,0xb1,0x5d };
    const uint8_t PLAINTEXT[] = { 0x8b,0x40,0x67,0xa3,0x23,0x48,0xc8,0x8c,0xb9,0xd5,0x66,0x42,0xa3,0x5d,0x0d,0x2e };
    const uint8_t CIPHERTEXT[] = { 0x2d,0x10,0xb1,0xd8,0x9e,0x21,0xaa,0x49,0xba,0x7f,0x9e,0x31,0x93,0xfa,0x51,0x82 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-31", "[CBC][MCT][192][DECRYPT][n31]") {
    const uint8_t KEY[] = { 0x4e,0x37,0xe6,0x18,0x29,0xa4,0xf3,0xbe,0xad,0xfc,0x05,0x18,0x8d,0x18,0xd0,0x6e,0xb6,0x5c,0x4b,0x42,0x34,0xbe,0x04,0xfe };
    const uint8_t IV[] = { 0x8b,0x40,0x67,0xa3,0x23,0x48,0xc8,0x8c,0xb9,0xd5,0x66,0x42,0xa3,0x5d,0x0d,0x2e };
    const uint8_t PLAINTEXT[] = { 0x9b,0x49,0x5a,0xbf,0xf4,0x6c,0x7d,0xcf,0xcb,0x5c,0xed,0x9e,0x59,0x25,0xa4,0x7e };
    const uint8_t CIPHERTEXT[] = { 0x22,0x4b,0x98,0x5d,0xdb,0x15,0xc9,0x81,0x5f,0xfd,0x90,0xcb,0x35,0x7e,0x95,0xaf };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-32", "[CBC][MCT][192][DECRYPT][n32]") {
    const uint8_t KEY[] = { 0xe7,0x39,0xd5,0xf7,0xa3,0xe0,0x37,0x23,0x36,0xb5,0x5f,0xa7,0x79,0x74,0xad,0xa1,0x7d,0x00,0xa6,0xdc,0x6d,0x9b,0xa0,0x80 };
    const uint8_t IV[] = { 0x9b,0x49,0x5a,0xbf,0xf4,0x6c,0x7d,0xcf,0xcb,0x5c,0xed,0x9e,0x59,0x25,0xa4,0x7e };
    const uint8_t PLAINTEXT[] = { 0xc8,0x0e,0x97,0x41,0xd0,0xdd,0xc4,0xe5,0x23,0xb4,0x10,0x61,0x4f,0x5b,0x1b,0x86 };
    const uint8_t CIPHERTEXT[] = { 0x65,0xb1,0xee,0xd4,0x0e,0x2f,0xa3,0xb5,0xa9,0x0e,0x33,0xef,0x8a,0x44,0xc4,0x9d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-33", "[CBC][MCT][192][DECRYPT][n33]") {
    const uint8_t KEY[] = { 0xa0,0x96,0x36,0x08,0x95,0xc7,0x34,0xe1,0xfe,0xbb,0xc8,0xe6,0xa9,0xa9,0x69,0x44,0x5e,0xb4,0xb6,0xbd,0x22,0xc0,0xbb,0x06 };
    const uint8_t IV[] = { 0xc8,0x0e,0x97,0x41,0xd0,0xdd,0xc4,0xe5,0x23,0xb4,0x10,0x61,0x4f,0x5b,0x1b,0x86 };
    const uint8_t PLAINTEXT[] = { 0x38,0xee,0xcb,0x5f,0xeb,0x5f,0x04,0x97,0x1f,0x42,0x3b,0x7d,0x0c,0xe2,0x5a,0x79 };
    const uint8_t CIPHERTEXT[] = { 0x07,0x76,0xe6,0x0f,0xfc,0xf6,0x29,0xd1,0x47,0xaf,0xe3,0xff,0x36,0x27,0x03,0xc2 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-34", "[CBC][MCT][192][DECRYPT][n34]") {
    const uint8_t KEY[] = { 0x9a,0x65,0xc6,0xfe,0xa2,0x79,0x47,0x29,0xc6,0x55,0x03,0xb9,0x42,0xf6,0x6d,0xd3,0x41,0xf6,0x8d,0xc0,0x2e,0x22,0xe1,0x7f };
    const uint8_t IV[] = { 0x38,0xee,0xcb,0x5f,0xeb,0x5f,0x04,0x97,0x1f,0x42,0x3b,0x7d,0x0c,0xe2,0x5a,0x79 };
    const uint8_t PLAINTEXT[] = { 0x1c,0x2d,0x73,0x0f,0x12,0x98,0xcc,0xdf,0x18,0xf8,0x2a,0x3b,0x14,0x14,0x7d,0xa0 };
    const uint8_t CIPHERTEXT[] = { 0xf1,0xda,0x46,0x53,0xd6,0x61,0x83,0x94,0x3a,0xf3,0xf0,0xf6,0x37,0xbe,0x73,0xc8 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-35", "[CBC][MCT][192][DECRYPT][n35]") {
    const uint8_t KEY[] = { 0x40,0xef,0xf3,0x2f,0xfd,0x3f,0xe6,0x23,0xda,0x78,0x70,0xb6,0x50,0x6e,0xa1,0x0c,0x59,0x0e,0xa7,0xfb,0x3a,0x36,0x9c,0xdf };
    const uint8_t IV[] = { 0x1c,0x2d,0x73,0x0f,0x12,0x98,0xcc,0xdf,0x18,0xf8,0x2a,0x3b,0x14,0x14,0x7d,0xa0 };
    const uint8_t PLAINTEXT[] = { 0x1f,0xc7,0x0f,0x77,0x56,0x2b,0x3b,0xbc,0xee,0x06,0x99,0x0d,0x53,0x50,0x8f,0x3a };
    const uint8_t CIPHERTEXT[] = { 0x91,0x2c,0x42,0xa3,0xf3,0x2d,0x44,0xad,0xda,0x8a,0x35,0xd1,0x5f,0x46,0xa1,0x0a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-36", "[CBC][MCT][192][DECRYPT][n36]") {
    const uint8_t KEY[] = { 0xd7,0xbe,0x32,0xc0,0x45,0x77,0xca,0xe0,0xc5,0xbf,0x7f,0xc1,0x06,0x45,0x9a,0xb0,0xb7,0x08,0x3e,0xf6,0x69,0x66,0x13,0xe5 };
    const uint8_t IV[] = { 0x1f,0xc7,0x0f,0x77,0x56,0x2b,0x3b,0xbc,0xee,0x06,0x99,0x0d,0x53,0x50,0x8f,0x3a };
    const uint8_t PLAINTEXT[] = { 0xe6,0x5f,0xd3,0x8c,0xbb,0x0f,0x48,0x0a,0xec,0x27,0x1a,0x22,0x06,0x51,0x7b,0x59 };
    const uint8_t CIPHERTEXT[] = { 0x24,0x90,0x09,0x87,0x82,0x95,0x5a,0x6f,0x97,0x51,0xc1,0xef,0xb8,0x48,0x2c,0xc3 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-37", "[CBC][MCT][192][DECRYPT][n37]") {
    const uint8_t KEY[] = { 0x0f,0xd2,0x0b,0x5e,0x66,0x9c,0x99,0x40,0x23,0xe0,0xac,0x4d,0xbd,0x4a,0xd2,0xba,0x5b,0x2f,0x24,0xd4,0x6f,0x37,0x68,0xbc };
    const uint8_t IV[] = { 0xe6,0x5f,0xd3,0x8c,0xbb,0x0f,0x48,0x0a,0xec,0x27,0x1a,0x22,0x06,0x51,0x7b,0x59 };
    const uint8_t PLAINTEXT[] = { 0x1f,0x24,0x18,0x41,0x95,0x90,0x8b,0x01,0x95,0x5d,0x8d,0xea,0x67,0xc9,0x54,0xcd };
    const uint8_t CIPHERTEXT[] = { 0x46,0xa3,0x57,0x2d,0x7c,0xe7,0x5c,0x63,0xd8,0x6c,0x39,0x9e,0x23,0xeb,0x53,0xa0 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-38", "[CBC][MCT][192][DECRYPT][n38]") {
    const uint8_t KEY[] = { 0xde,0x40,0xcc,0xd6,0xf7,0xbf,0x37,0x4e,0x3c,0xc4,0xb4,0x0c,0x28,0xda,0x59,0xbb,0xce,0x72,0xa9,0x3e,0x08,0xfe,0x3c,0x71 };
    const uint8_t IV[] = { 0x1f,0x24,0x18,0x41,0x95,0x90,0x8b,0x01,0x95,0x5d,0x8d,0xea,0x67,0xc9,0x54,0xcd };
    const uint8_t PLAINTEXT[] = { 0xba,0x28,0x9b,0xd8,0x29,0x23,0xa4,0x75,0x78,0x1e,0x78,0x5d,0xbf,0x97,0x3c,0x23 };
    const uint8_t CIPHERTEXT[] = { 0x7e,0x5e,0xda,0x29,0xed,0x52,0x16,0x7a,0xd1,0x92,0xc7,0x88,0x91,0x23,0xae,0x0e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-39", "[CBC][MCT][192][DECRYPT][n39]") {
    const uint8_t KEY[] = { 0x65,0xfb,0xdd,0x2f,0x96,0x04,0x4a,0x81,0x86,0xec,0x2f,0xd4,0x01,0xf9,0xfd,0xce,0xb6,0x6c,0xd1,0x63,0xb7,0x69,0x00,0x52 };
    const uint8_t IV[] = { 0xba,0x28,0x9b,0xd8,0x29,0x23,0xa4,0x75,0x78,0x1e,0x78,0x5d,0xbf,0x97,0x3c,0x23 };
    const uint8_t PLAINTEXT[] = { 0xa6,0x75,0xa9,0x4b,0xc5,0xe2,0xfd,0x12,0x48,0x8f,0xa6,0x5b,0xfa,0xd5,0xd6,0x7c };
    const uint8_t CIPHERTEXT[] = { 0x7e,0x41,0x09,0x7e,0x46,0x61,0xd8,0x0d,0xbb,0xbb,0x11,0xf9,0x61,0xbb,0x7d,0xcf };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-40", "[CBC][MCT][192][DECRYPT][n40]") {
    const uint8_t KEY[] = { 0x0a,0x70,0xb7,0x17,0x2c,0x0c,0x3d,0xab,0x20,0x99,0x86,0x9f,0xc4,0x1b,0x00,0xdc,0xfe,0xe3,0x77,0x38,0x4d,0xbc,0xd6,0x2e };
    const uint8_t IV[] = { 0xa6,0x75,0xa9,0x4b,0xc5,0xe2,0xfd,0x12,0x48,0x8f,0xa6,0x5b,0xfa,0xd5,0xd6,0x7c };
    const uint8_t PLAINTEXT[] = { 0x9e,0x46,0xa7,0x5d,0x59,0xe0,0x9b,0xdb,0x64,0xa3,0x16,0xea,0x47,0x8f,0x27,0xed };
    const uint8_t CIPHERTEXT[] = { 0x0a,0xa0,0xee,0x27,0x08,0x68,0x33,0xeb,0x6f,0x8b,0x6a,0x38,0xba,0x08,0x77,0x2a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-41", "[CBC][MCT][192][DECRYPT][n41]") {
    const uint8_t KEY[] = { 0x9c,0xce,0xd8,0x07,0xd9,0x95,0x51,0x3c,0xbe,0xdf,0x21,0xc2,0x9d,0xfb,0x9b,0x07,0x9a,0x40,0x61,0xd2,0x0a,0x33,0xf1,0xc3 };
    const uint8_t IV[] = { 0x9e,0x46,0xa7,0x5d,0x59,0xe0,0x9b,0xdb,0x64,0xa3,0x16,0xea,0x47,0x8f,0x27,0xed };
    const uint8_t PLAINTEXT[] = { 0x86,0xde,0x71,0xe6,0xb8,0xf1,0xa3,0x0d,0x1a,0x10,0x25,0x55,0x0d,0x16,0xd5,0x07 };
    const uint8_t CIPHERTEXT[] = { 0x83,0x37,0x2b,0x97,0x35,0x17,0x7a,0x1f,0x96,0xbe,0x6f,0x10,0xf5,0x99,0x6c,0x97 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-42", "[CBC][MCT][192][DECRYPT][n42]") {
    const uint8_t KEY[] = { 0x6b,0x4f,0x81,0xa4,0x1d,0xf6,0x70,0xf3,0x38,0x01,0x50,0x24,0x25,0x0a,0x38,0x0a,0x80,0x50,0x44,0x87,0x07,0x25,0x24,0xc4 };
    const uint8_t IV[] = { 0x86,0xde,0x71,0xe6,0xb8,0xf1,0xa3,0x0d,0x1a,0x10,0x25,0x55,0x0d,0x16,0xd5,0x07 };
    const uint8_t PLAINTEXT[] = { 0x1c,0xd1,0x3d,0xc7,0x7d,0x4f,0xe6,0xcb,0xf6,0x84,0xe5,0xd7,0x52,0x8a,0xd1,0x3a };
    const uint8_t CIPHERTEXT[] = { 0x7c,0x5a,0x53,0xfe,0x6e,0xdc,0x5f,0x56,0xf7,0x81,0x59,0xa3,0xc4,0x63,0x21,0xcf };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-43", "[CBC][MCT][192][DECRYPT][n43]") {
    const uint8_t KEY[] = { 0x18,0x4f,0xbd,0xbf,0x6d,0x60,0x2d,0xfb,0x24,0xd0,0x6d,0xe3,0x58,0x45,0xde,0xc1,0x76,0xd4,0xa1,0x50,0x55,0xaf,0xf5,0xfe };
    const uint8_t IV[] = { 0x1c,0xd1,0x3d,0xc7,0x7d,0x4f,0xe6,0xcb,0xf6,0x84,0xe5,0xd7,0x52,0x8a,0xd1,0x3a };
    const uint8_t PLAINTEXT[] = { 0x09,0x65,0xaf,0x4e,0xe9,0x7a,0x08,0xa2,0x32,0x8b,0x9b,0x77,0x9e,0x6f,0x23,0xdc };
    const uint8_t CIPHERTEXT[] = { 0x73,0x07,0x54,0xae,0xb8,0xad,0x6f,0xf6,0x73,0x00,0x3c,0x1b,0x70,0x96,0x5d,0x08 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-44", "[CBC][MCT][192][DECRYPT][n44]") {
    const uint8_t KEY[] = { 0xc4,0x78,0x84,0x05,0x31,0xc3,0xf8,0xf9,0x2d,0xb5,0xc2,0xad,0xb1,0x3f,0xd6,0x63,0x44,0x5f,0x3a,0x27,0xcb,0xc0,0xd6,0x22 };
    const uint8_t IV[] = { 0x09,0x65,0xaf,0x4e,0xe9,0x7a,0x08,0xa2,0x32,0x8b,0x9b,0x77,0x9e,0x6f,0x23,0xdc };
    const uint8_t PLAINTEXT[] = { 0xdf,0x81,0x0a,0x3a,0x1a,0x8a,0x55,0x42,0x45,0x5f,0x7a,0x2d,0x4a,0x6d,0x66,0x63 };
    const uint8_t CIPHERTEXT[] = { 0x04,0x19,0x02,0xe7,0x7e,0xee,0x2b,0x7f,0xdc,0x37,0x39,0xba,0x5c,0xa3,0xd5,0x02 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-45", "[CBC][MCT][192][DECRYPT][n45]") {
    const uint8_t KEY[] = { 0xea,0x50,0x83,0xe2,0x4a,0x23,0xe6,0x92,0xf2,0x34,0xc8,0x97,0xab,0xb5,0x83,0x21,0x01,0x00,0x40,0x0a,0x81,0xad,0xb0,0x41 };
    const uint8_t IV[] = { 0xdf,0x81,0x0a,0x3a,0x1a,0x8a,0x55,0x42,0x45,0x5f,0x7a,0x2d,0x4a,0x6d,0x66,0x63 };
    const uint8_t PLAINTEXT[] = { 0x88,0x36,0x98,0x13,0x25,0x99,0xe6,0x54,0x63,0x76,0x24,0xcd,0x66,0x66,0x07,0xa7 };
    const uint8_t CIPHERTEXT[] = { 0xd4,0xb6,0xa0,0xcf,0xed,0xcb,0x8d,0x19,0x2e,0x28,0x07,0xe7,0x7b,0xe0,0x1e,0x6b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-46", "[CBC][MCT][192][DECRYPT][n46]") {
    const uint8_t KEY[] = { 0x37,0x56,0x28,0xc7,0x63,0xc0,0xcf,0xd9,0x7a,0x02,0x50,0x84,0x8e,0x2c,0x65,0x75,0x62,0x76,0x64,0xc7,0xe7,0xcb,0xb7,0xe6 };
    const uint8_t IV[] = { 0x88,0x36,0x98,0x13,0x25,0x99,0xe6,0x54,0x63,0x76,0x24,0xcd,0x66,0x66,0x07,0xa7 };
    const uint8_t PLAINTEXT[] = { 0xc4,0x0a,0x54,0x2f,0xfa,0x6f,0x79,0x01,0xaf,0x42,0x2a,0x02,0xc1,0xd0,0xa9,0x2f };
    const uint8_t CIPHERTEXT[] = { 0x4a,0xcc,0xe6,0x0d,0x24,0x1f,0x7b,0xb6,0xdd,0x06,0xab,0x25,0x29,0xe3,0x29,0x4b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-47", "[CBC][MCT][192][DECRYPT][n47]") {
    const uint8_t KEY[] = { 0x37,0x51,0x11,0x1d,0xd9,0x0a,0x75,0xc8,0xbe,0x08,0x04,0xab,0x74,0x43,0x1c,0x74,0xcd,0x34,0x4e,0xc5,0x26,0x1b,0x1e,0xc9 };
    const uint8_t IV[] = { 0xc4,0x0a,0x54,0x2f,0xfa,0x6f,0x79,0x01,0xaf,0x42,0x2a,0x02,0xc1,0xd0,0xa9,0x2f };
    const uint8_t PLAINTEXT[] = { 0x6a,0x11,0xb0,0x77,0xf3,0xf6,0x70,0xcb,0x54,0x3c,0xc7,0x73,0xd2,0xab,0xce,0x25 };
    const uint8_t CIPHERTEXT[] = { 0x0f,0xcb,0x7e,0xa3,0x1b,0x89,0xc0,0x84,0x00,0x07,0x39,0xda,0xba,0xca,0xba,0x11 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-48", "[CBC][MCT][192][DECRYPT][n48]") {
    const uint8_t KEY[] = { 0xbe,0xb3,0x3f,0x74,0xf5,0x49,0x33,0x84,0xd4,0x19,0xb4,0xdc,0x87,0xb5,0x6c,0xbf,0x99,0x08,0x89,0xb6,0xf4,0xb0,0xd0,0xec };
    const uint8_t IV[] = { 0x6a,0x11,0xb0,0x77,0xf3,0xf6,0x70,0xcb,0x54,0x3c,0xc7,0x73,0xd2,0xab,0xce,0x25 };
    const uint8_t PLAINTEXT[] = { 0x14,0xa6,0xf0,0x8a,0x7a,0x2e,0x14,0xcf,0xaf,0xf4,0x3e,0x09,0x49,0x2e,0xe6,0x67 };
    const uint8_t CIPHERTEXT[] = { 0x49,0x40,0x28,0xac,0xcd,0xe0,0x67,0x51,0x89,0xe2,0x2e,0x69,0x2c,0x43,0x46,0x4c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-49", "[CBC][MCT][192][DECRYPT][n49]") {
    const uint8_t KEY[] = { 0xc5,0xdb,0xd7,0xa3,0xdc,0x7b,0xcb,0xd5,0xc0,0xbf,0x44,0x56,0xfd,0x9b,0x78,0x70,0x36,0xfc,0xb7,0xbf,0xbd,0x9e,0x36,0x8b };
    const uint8_t IV[] = { 0x14,0xa6,0xf0,0x8a,0x7a,0x2e,0x14,0xcf,0xaf,0xf4,0x3e,0x09,0x49,0x2e,0xe6,0x67 };
    const uint8_t PLAINTEXT[] = { 0x97,0xc6,0xd9,0x65,0x2e,0x63,0xda,0x0a,0x93,0x30,0x3b,0x6c,0x19,0xc5,0xfb,0x42 };
    const uint8_t CIPHERTEXT[] = { 0x6d,0x71,0x63,0x4b,0xda,0x1a,0x64,0x63,0x7b,0x68,0xe8,0xd7,0x29,0x32,0xf8,0x51 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-50", "[CBC][MCT][192][DECRYPT][n50]") {
    const uint8_t KEY[] = { 0xbe,0x74,0xb4,0x46,0xdc,0xdc,0x19,0x66,0x57,0x79,0x9d,0x33,0xd3,0xf8,0xa2,0x7a,0xa5,0xcc,0x8c,0xd3,0xa4,0x5b,0xcd,0xc9 };
    const uint8_t IV[] = { 0x97,0xc6,0xd9,0x65,0x2e,0x63,0xda,0x0a,0x93,0x30,0x3b,0x6c,0x19,0xc5,0xfb,0x42 };
    const uint8_t PLAINTEXT[] = { 0x4c,0x7f,0xa7,0xa3,0x77,0x39,0x62,0x3f,0x31,0x28,0xd4,0x3e,0xdd,0xc1,0xf9,0x0b };
    const uint8_t CIPHERTEXT[] = { 0xe0,0x8b,0xd1,0x02,0x2f,0xd8,0x3e,0xbf,0x7b,0xaf,0x63,0xe5,0x00,0xa7,0xd2,0xb3 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-51", "[CBC][MCT][192][DECRYPT][n51]") {
    const uint8_t KEY[] = { 0xd6,0xed,0x7a,0x9b,0x90,0xd7,0x97,0x7f,0x1b,0x06,0x3a,0x90,0xa4,0xc1,0xc0,0x45,0x94,0xe4,0x58,0xed,0x79,0x9a,0x34,0xc2 };
    const uint8_t IV[] = { 0x4c,0x7f,0xa7,0xa3,0x77,0x39,0x62,0x3f,0x31,0x28,0xd4,0x3e,0xdd,0xc1,0xf9,0x0b };
    const uint8_t PLAINTEXT[] = { 0xa1,0x35,0x63,0xe1,0xd5,0xfd,0x1e,0x12,0x29,0xac,0x1f,0x78,0xa4,0xfe,0xc9,0x9a };
    const uint8_t CIPHERTEXT[] = { 0x6a,0x36,0xa5,0xed,0x48,0x23,0x54,0x4d,0x68,0x99,0xce,0xdd,0x4c,0x0b,0x8e,0x19 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-52", "[CBC][MCT][192][DECRYPT][n52]") {
    const uint8_t KEY[] = { 0x9b,0x6c,0xd9,0xd3,0x2d,0x5f,0x18,0x79,0xba,0x33,0x59,0x71,0x71,0x3c,0xde,0x57,0xbd,0x48,0x47,0x95,0xdd,0x64,0xfd,0x58 };
    const uint8_t IV[] = { 0xa1,0x35,0x63,0xe1,0xd5,0xfd,0x1e,0x12,0x29,0xac,0x1f,0x78,0xa4,0xfe,0xc9,0x9a };
    const uint8_t PLAINTEXT[] = { 0x45,0x05,0xf8,0xd5,0x52,0x3b,0xef,0x49,0xe3,0x8a,0x58,0xdc,0xbe,0x84,0x8f,0xb3 };
    const uint8_t CIPHERTEXT[] = { 0x57,0x21,0xaa,0xf7,0xea,0x6e,0x7c,0xc0,0x4d,0x81,0xa3,0x48,0xbd,0x88,0x8f,0x06 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-53", "[CBC][MCT][192][DECRYPT][n53]") {
    const uint8_t KEY[] = { 0xd8,0x0b,0x36,0x34,0x5f,0x47,0xde,0xc4,0xff,0x36,0xa1,0xa4,0x23,0x07,0x31,0x1e,0x5e,0xc2,0x1f,0x49,0x63,0xe0,0x72,0xeb };
    const uint8_t IV[] = { 0x45,0x05,0xf8,0xd5,0x52,0x3b,0xef,0x49,0xe3,0x8a,0x58,0xdc,0xbe,0x84,0x8f,0xb3 };
    const uint8_t PLAINTEXT[] = { 0xc8,0x9c,0x28,0xe5,0xcd,0xcf,0x8f,0xdb,0x86,0x2c,0xb1,0xdc,0xc9,0x18,0x94,0x92 };
    const uint8_t CIPHERTEXT[] = { 0x9d,0xa0,0x9d,0x0b,0xeb,0x51,0x25,0x56,0x43,0x67,0xef,0xe7,0x72,0x18,0xc6,0xbd };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-54", "[CBC][MCT][192][DECRYPT][n54]") {
    const uint8_t KEY[] = { 0x15,0x58,0x00,0x1b,0xd5,0x38,0x76,0x05,0x37,0xaa,0x89,0x41,0xee,0xc8,0xbe,0xc5,0xd8,0xee,0xae,0x95,0xaa,0xf8,0xe6,0x79 };
    const uint8_t IV[] = { 0xc8,0x9c,0x28,0xe5,0xcd,0xcf,0x8f,0xdb,0x86,0x2c,0xb1,0xdc,0xc9,0x18,0x94,0x92 };
    const uint8_t PLAINTEXT[] = { 0x51,0xfb,0x67,0x81,0x36,0x3c,0x1f,0xe3,0x73,0xb9,0x3c,0xbf,0xca,0x2a,0x56,0x54 };
    const uint8_t CIPHERTEXT[] = { 0xe7,0x9e,0x17,0x52,0xcb,0xe3,0x51,0xf7,0xcd,0x53,0x36,0x2f,0x8a,0x7f,0xa8,0xc1 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-55", "[CBC][MCT][192][DECRYPT][n55]") {
    const uint8_t KEY[] = { 0x9d,0x7c,0x97,0x87,0xc0,0x24,0x93,0xfe,0x66,0x51,0xee,0xc0,0xd8,0xf4,0xa1,0x26,0xab,0x57,0x92,0x2a,0x60,0xd2,0xb0,0x2d };
    const uint8_t IV[] = { 0x51,0xfb,0x67,0x81,0x36,0x3c,0x1f,0xe3,0x73,0xb9,0x3c,0xbf,0xca,0x2a,0x56,0x54 };
    const uint8_t PLAINTEXT[] = { 0xbc,0xa7,0xb4,0xb7,0x98,0xd7,0xb9,0xe5,0x0d,0x3b,0xa0,0x22,0x55,0xa1,0x65,0x28 };
    const uint8_t CIPHERTEXT[] = { 0x23,0xd2,0x67,0xc6,0x45,0x2d,0x4d,0x42,0x88,0x24,0x97,0x9c,0x15,0x1c,0xe5,0xfb };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-56", "[CBC][MCT][192][DECRYPT][n56]") {
    const uint8_t KEY[] = { 0xb7,0x12,0x63,0x78,0x9d,0x3c,0x02,0x10,0xda,0xf6,0x5a,0x77,0x40,0x23,0x18,0xc3,0xa6,0x6c,0x32,0x08,0x35,0x73,0xd5,0x05 };
    const uint8_t IV[] = { 0xbc,0xa7,0xb4,0xb7,0x98,0xd7,0xb9,0xe5,0x0d,0x3b,0xa0,0x22,0x55,0xa1,0x65,0x28 };
    const uint8_t PLAINTEXT[] = { 0x18,0x0c,0x94,0x85,0x71,0x2f,0x15,0x27,0xe1,0xec,0xe8,0xd2,0xb0,0xc7,0x3b,0xc5 };
    const uint8_t CIPHERTEXT[] = { 0x52,0xc7,0x96,0xd5,0xbb,0x4d,0x26,0xb7,0x2a,0x6e,0xf4,0xff,0x5d,0x18,0x91,0xee };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-57", "[CBC][MCT][192][DECRYPT][n57]") {
    const uint8_t KEY[] = { 0x32,0x87,0x7e,0x9a,0xbe,0x0b,0xe8,0x66,0xc2,0xfa,0xce,0xf2,0x31,0x0c,0x0d,0xe4,0x47,0x80,0xda,0xda,0x85,0xb4,0xee,0xc0 };
    const uint8_t IV[] = { 0x18,0x0c,0x94,0x85,0x71,0x2f,0x15,0x27,0xe1,0xec,0xe8,0xd2,0xb0,0xc7,0x3b,0xc5 };
    const uint8_t PLAINTEXT[] = { 0x72,0x6f,0x13,0xc2,0xa0,0x6c,0x3c,0x29,0x8f,0x78,0x19,0xee,0x5d,0xe0,0xde,0x02 };
    const uint8_t CIPHERTEXT[] = { 0xec,0xe7,0xaf,0xb4,0xfe,0xb5,0xf8,0x73,0x85,0x95,0x1d,0xe2,0x23,0x37,0xea,0x76 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-58", "[CBC][MCT][192][DECRYPT][n58]") {
    const uint8_t KEY[] = { 0x3d,0x2d,0x62,0xa8,0x73,0x99,0x60,0x00,0xb0,0x95,0xdd,0x30,0x91,0x60,0x31,0xcd,0xc8,0xf8,0xc3,0x34,0xd8,0x54,0x30,0xc2 };
    const uint8_t IV[] = { 0x72,0x6f,0x13,0xc2,0xa0,0x6c,0x3c,0x29,0x8f,0x78,0x19,0xee,0x5d,0xe0,0xde,0x02 };
    const uint8_t PLAINTEXT[] = { 0xdc,0x74,0x97,0xdc,0x18,0x70,0x94,0xeb,0xcb,0xba,0x00,0x53,0xe2,0xd5,0x2f,0x1e };
    const uint8_t CIPHERTEXT[] = { 0x9b,0x33,0x65,0x86,0x2f,0x0d,0x6b,0x62,0x0f,0xaa,0x1c,0x32,0xcd,0x92,0x88,0x66 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-59", "[CBC][MCT][192][DECRYPT][n59]") {
    const uint8_t KEY[] = { 0x80,0xf1,0xdc,0xaf,0xc8,0x61,0x35,0x38,0x6c,0xe1,0x4a,0xec,0x89,0x10,0xa5,0x26,0x03,0x42,0xc3,0x67,0x3a,0x81,0x1f,0xdc };
    const uint8_t IV[] = { 0xdc,0x74,0x97,0xdc,0x18,0x70,0x94,0xeb,0xcb,0xba,0x00,0x53,0xe2,0xd5,0x2f,0x1e };
    const uint8_t PLAINTEXT[] = { 0x10,0x35,0xb0,0x20,0x26,0x6f,0xef,0x91,0x3d,0xe6,0x0e,0xc2,0x19,0x4d,0xb2,0xb4 };
    const uint8_t CIPHERTEXT[] = { 0xe6,0x63,0xa8,0x8f,0x0a,0xae,0x70,0x38,0xbd,0xdc,0xbe,0x07,0xbb,0xf8,0x55,0x38 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-60", "[CBC][MCT][192][DECRYPT][n60]") {
    const uint8_t KEY[] = { 0x73,0xc9,0x48,0x32,0xf8,0x9b,0x1b,0xeb,0x7c,0xd4,0xfa,0xcc,0xaf,0x7f,0x4a,0xb7,0x3e,0xa4,0xcd,0xa5,0x23,0xcc,0xad,0x68 };
    const uint8_t IV[] = { 0x10,0x35,0xb0,0x20,0x26,0x6f,0xef,0x91,0x3d,0xe6,0x0e,0xc2,0x19,0x4d,0xb2,0xb4 };
    const uint8_t PLAINTEXT[] = { 0xd1,0x49,0x27,0xc0,0x92,0x4c,0x52,0x83,0xcf,0x06,0x03,0xf7,0x59,0x8c,0xb2,0x52 };
    const uint8_t CIPHERTEXT[] = { 0x65,0xee,0x55,0xfa,0xf5,0x7d,0xc5,0xb6,0xf3,0x38,0x94,0x9d,0x30,0xfa,0x2e,0xd3 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-61", "[CBC][MCT][192][DECRYPT][n61]") {
    const uint8_t KEY[] = { 0xdc,0x17,0xcc,0xcc,0x67,0x96,0xfd,0x9c,0xad,0x9d,0xdd,0x0c,0x3d,0x33,0x18,0x34,0xf1,0xa2,0xce,0x52,0x7a,0x40,0x1f,0x3a };
    const uint8_t IV[] = { 0xd1,0x49,0x27,0xc0,0x92,0x4c,0x52,0x83,0xcf,0x06,0x03,0xf7,0x59,0x8c,0xb2,0x52 };
    const uint8_t PLAINTEXT[] = { 0xff,0xed,0x49,0x23,0xac,0xcf,0x5f,0x31,0x9d,0x6b,0xaa,0xaa,0x69,0x31,0x7f,0x6f };
    const uint8_t CIPHERTEXT[] = { 0xeb,0x3c,0x4e,0x04,0xd8,0x45,0x71,0x96,0xaf,0xde,0x84,0xfe,0x9f,0x0d,0xe6,0x77 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-62", "[CBC][MCT][192][DECRYPT][n62]") {
    const uint8_t KEY[] = { 0x73,0x90,0xa3,0x4b,0x3d,0xaf,0x14,0x46,0x52,0x70,0x94,0x2f,0x91,0xfc,0x47,0x05,0x6c,0xc9,0x64,0xf8,0x13,0x71,0x60,0x55 };
    const uint8_t IV[] = { 0xff,0xed,0x49,0x23,0xac,0xcf,0x5f,0x31,0x9d,0x6b,0xaa,0xaa,0x69,0x31,0x7f,0x6f };
    const uint8_t PLAINTEXT[] = { 0x07,0x65,0xed,0xb1,0x34,0xd7,0xb0,0x94,0x14,0x68,0x60,0x4c,0xdf,0x5f,0xc4,0x66 };
    const uint8_t CIPHERTEXT[] = { 0xf0,0x9f,0x9f,0xdc,0xa3,0x6d,0xf1,0x53,0xaf,0x87,0x6f,0x87,0x5a,0x39,0xe9,0xda };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-63", "[CBC][MCT][192][DECRYPT][n63]") {
    const uint8_t KEY[] = { 0x0a,0x61,0x11,0x2c,0xf4,0xa8,0xad,0xf2,0x55,0x15,0x79,0x9e,0xa5,0x2b,0xf7,0x91,0x78,0xa1,0x04,0xb4,0xcc,0x2e,0xa4,0x33 };
    const uint8_t IV[] = { 0x07,0x65,0xed,0xb1,0x34,0xd7,0xb0,0x94,0x14,0x68,0x60,0x4c,0xdf,0x5f,0xc4,0x66 };
    const uint8_t PLAINTEXT[] = { 0x9d,0x16,0xc4,0xc9,0xc8,0x07,0xca,0x91,0xde,0xc1,0xba,0x93,0x32,0xa6,0xb5,0x82 };
    const uint8_t CIPHERTEXT[] = { 0xdd,0x14,0x46,0x87,0x1f,0xb6,0xb5,0xa7,0x79,0xf1,0xb2,0x67,0xc9,0x07,0xb9,0xb4 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-64", "[CBC][MCT][192][DECRYPT][n64]") {
    const uint8_t KEY[] = { 0x6b,0x8c,0xb7,0xdf,0x17,0x08,0x9e,0x20,0xc8,0x03,0xbd,0x57,0x6d,0x2c,0x3d,0x00,0xa6,0x60,0xbe,0x27,0xfe,0x88,0x11,0xb1 };
    const uint8_t IV[] = { 0x9d,0x16,0xc4,0xc9,0xc8,0x07,0xca,0x91,0xde,0xc1,0xba,0x93,0x32,0xa6,0xb5,0x82 };
    const uint8_t PLAINTEXT[] = { 0xac,0x66,0x33,0x9c,0x0e,0xf8,0x70,0x75,0xd3,0xcd,0xd2,0xca,0x6f,0x65,0xaa,0x91 };
    const uint8_t CIPHERTEXT[] = { 0x8a,0xc7,0x53,0x64,0x8c,0x14,0xdb,0x9d,0x61,0xed,0xa6,0xf3,0xe3,0xa0,0x33,0xd2 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-65", "[CBC][MCT][192][DECRYPT][n65]") {
    const uint8_t KEY[] = { 0x17,0x8c,0xfa,0x27,0x84,0xe7,0xde,0x7e,0x64,0x65,0x8e,0xcb,0x63,0xd4,0x4d,0x75,0x75,0xad,0x6c,0xed,0x91,0xed,0xbb,0x20 };
    const uint8_t IV[] = { 0xac,0x66,0x33,0x9c,0x0e,0xf8,0x70,0x75,0xd3,0xcd,0xd2,0xca,0x6f,0x65,0xaa,0x91 };
    const uint8_t PLAINTEXT[] = { 0x35,0x5c,0x0e,0x21,0x8e,0x9b,0x7a,0x7b,0x87,0xa5,0xb8,0x6d,0xc6,0x4f,0x6c,0xea };
    const uint8_t CIPHERTEXT[] = { 0x34,0xf4,0x3d,0x01,0x46,0xc2,0x00,0x39,0x7c,0x00,0x4d,0xf8,0x93,0xef,0x40,0x5e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-66", "[CBC][MCT][192][DECRYPT][n66]") {
    const uint8_t KEY[] = { 0xb6,0xd6,0x06,0xa4,0x34,0x1f,0x00,0x3c,0x51,0x39,0x80,0xea,0xed,0x4f,0x37,0x0e,0xf2,0x08,0xd4,0x80,0x57,0xa2,0xd7,0xca };
    const uint8_t IV[] = { 0x35,0x5c,0x0e,0x21,0x8e,0x9b,0x7a,0x7b,0x87,0xa5,0xb8,0x6d,0xc6,0x4f,0x6c,0xea };
    const uint8_t PLAINTEXT[] = { 0x97,0xb2,0x7d,0xb6,0x07,0x75,0xd4,0x31,0x43,0x4c,0xc7,0x67,0x18,0x57,0xb1,0xc9 };
    const uint8_t CIPHERTEXT[] = { 0x03,0xeb,0xc2,0xac,0xcb,0xa4,0x6d,0x2b,0xa1,0x5a,0xfc,0x83,0xb0,0xf8,0xde,0x42 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-67", "[CBC][MCT][192][DECRYPT][n67]") {
    const uint8_t KEY[] = { 0x64,0xfb,0xbd,0xc1,0x28,0xc3,0x2a,0x59,0xc6,0x8b,0xfd,0x5c,0xea,0x3a,0xe3,0x3f,0xb1,0x44,0x13,0xe7,0x4f,0xf5,0x66,0x03 };
    const uint8_t IV[] = { 0x97,0xb2,0x7d,0xb6,0x07,0x75,0xd4,0x31,0x43,0x4c,0xc7,0x67,0x18,0x57,0xb1,0xc9 };
    const uint8_t PLAINTEXT[] = { 0x06,0x70,0x7f,0x93,0x27,0xcc,0xb9,0x5d,0x6c,0x7d,0xac,0xdb,0xb7,0xb7,0xdb,0x12 };
    const uint8_t CIPHERTEXT[] = { 0x9a,0x1b,0x29,0x72,0x24,0xcd,0xd1,0x05,0xd2,0x2d,0xbb,0x65,0x1c,0xdc,0x2a,0x65 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-68", "[CBC][MCT][192][DECRYPT][n68]") {
    const uint8_t KEY[] = { 0xac,0x10,0x14,0xa1,0x9f,0x13,0xbf,0x6e,0xc0,0xfb,0x82,0xcf,0xcd,0xf6,0x5a,0x62,0xdd,0x39,0xbf,0x3c,0xf8,0x42,0xbd,0x11 };
    const uint8_t IV[] = { 0x06,0x70,0x7f,0x93,0x27,0xcc,0xb9,0x5d,0x6c,0x7d,0xac,0xdb,0xb7,0xb7,0xdb,0x12 };
    const uint8_t PLAINTEXT[] = { 0xa4,0x15,0x32,0x3e,0xea,0x55,0x9b,0x44,0x52,0x82,0x9a,0x81,0xb5,0x12,0x57,0x67 };
    const uint8_t CIPHERTEXT[] = { 0xff,0x35,0x32,0x8f,0x40,0x26,0xc5,0x21,0xc8,0xeb,0xa9,0x60,0xb7,0xd0,0x95,0x37 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-69", "[CBC][MCT][192][DECRYPT][n69]") {
    const uint8_t KEY[] = { 0xc2,0x79,0xf1,0x73,0x02,0x1f,0x9f,0xdc,0x64,0xee,0xb0,0xf1,0x27,0xa3,0xc1,0x26,0x8f,0xbb,0x25,0xbd,0x4d,0x50,0xea,0x76 };
    const uint8_t IV[] = { 0xa4,0x15,0x32,0x3e,0xea,0x55,0x9b,0x44,0x52,0x82,0x9a,0x81,0xb5,0x12,0x57,0x67 };
    const uint8_t PLAINTEXT[] = { 0x54,0x51,0x15,0xc5,0xd6,0xa9,0x17,0xdd,0x47,0xba,0xbf,0x95,0xed,0x6f,0xf1,0x50 };
    const uint8_t CIPHERTEXT[] = { 0x17,0xc3,0xc7,0x77,0xc4,0xd5,0xb5,0x26,0x6e,0x69,0xe5,0xd2,0x9d,0x0c,0x20,0xb2 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-70", "[CBC][MCT][192][DECRYPT][n70]") {
    const uint8_t KEY[] = { 0x9b,0x23,0x4e,0x5f,0xdb,0x0e,0xe1,0x8b,0x30,0xbf,0xa5,0x34,0xf1,0x0a,0xd6,0xfb,0xc8,0x01,0x9a,0x28,0xa0,0x3f,0x1b,0x26 };
    const uint8_t IV[] = { 0x54,0x51,0x15,0xc5,0xd6,0xa9,0x17,0xdd,0x47,0xba,0xbf,0x95,0xed,0x6f,0xf1,0x50 };
    const uint8_t PLAINTEXT[] = { 0xb1,0xe3,0x98,0xda,0x3b,0x7c,0x02,0x02,0x2e,0x6c,0x78,0x6f,0x88,0x65,0x1e,0x5c };
    const uint8_t CIPHERTEXT[] = { 0xb0,0x98,0x5b,0x01,0x8c,0x60,0x29,0x8b,0x59,0x5a,0xbf,0x2c,0xd9,0x11,0x7e,0x57 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-71", "[CBC][MCT][192][DECRYPT][n71]") {
    const uint8_t KEY[] = { 0xb4,0xad,0xb8,0x72,0xb6,0x2a,0x26,0x76,0x81,0x5c,0x3d,0xee,0xca,0x76,0xd4,0xf9,0xe6,0x6d,0xe2,0x47,0x28,0x5a,0x05,0x7a };
    const uint8_t IV[] = { 0xb1,0xe3,0x98,0xda,0x3b,0x7c,0x02,0x02,0x2e,0x6c,0x78,0x6f,0x88,0x65,0x1e,0x5c };
    const uint8_t PLAINTEXT[] = { 0x7c,0x61,0x76,0x9f,0x40,0x37,0x42,0x66,0xc2,0x6c,0xc9,0x7e,0x5f,0x0d,0x64,0x40 };
    const uint8_t CIPHERTEXT[] = { 0xe3,0x79,0x45,0xe1,0xf3,0x41,0x6e,0x35,0x2f,0x8e,0xf6,0x2d,0x6d,0x24,0xc7,0xfd };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-72", "[CBC][MCT][192][DECRYPT][n72]") {
    const uint8_t KEY[] = { 0x43,0x67,0x64,0x55,0xb1,0xc2,0x2e,0xae,0xfd,0x3d,0x4b,0x71,0x8a,0x41,0x96,0x9f,0x24,0x01,0x2b,0x39,0x77,0x57,0x61,0x3a };
    const uint8_t IV[] = { 0x7c,0x61,0x76,0x9f,0x40,0x37,0x42,0x66,0xc2,0x6c,0xc9,0x7e,0x5f,0x0d,0x64,0x40 };
    const uint8_t PLAINTEXT[] = { 0xca,0x24,0xd8,0x3f,0xe7,0xc6,0x11,0x4f,0xc7,0x17,0x8b,0xb9,0x62,0x44,0x4f,0x42 };
    const uint8_t CIPHERTEXT[] = { 0x24,0x67,0xb2,0x58,0x2f,0xc8,0x62,0x43,0xf7,0xca,0xdc,0x27,0x07,0xe8,0x08,0xd8 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-73", "[CBC][MCT][192][DECRYPT][n73]") {
    const uint8_t KEY[] = { 0xa3,0x2d,0x29,0x28,0x92,0xf2,0xf4,0xc5,0x37,0x19,0x93,0x4e,0x6d,0x87,0x87,0xd0,0xe3,0x16,0xa0,0x80,0x15,0x13,0x2e,0x78 };
    const uint8_t IV[] = { 0xca,0x24,0xd8,0x3f,0xe7,0xc6,0x11,0x4f,0xc7,0x17,0x8b,0xb9,0x62,0x44,0x4f,0x42 };
    const uint8_t PLAINTEXT[] = { 0x3b,0xaf,0x1f,0xaa,0x5a,0xef,0x3c,0x0c,0x0c,0xaa,0x26,0x56,0xe8,0xfb,0x10,0xb3 };
    const uint8_t CIPHERTEXT[] = { 0xa2,0x91,0x77,0xd4,0x6c,0xc1,0x98,0x78,0xe0,0x4a,0x4d,0x7d,0x23,0x30,0xda,0x6b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-74", "[CBC][MCT][192][DECRYPT][n74]") {
    const uint8_t KEY[] = { 0x78,0x10,0x80,0x95,0x21,0xac,0x69,0x26,0x0c,0xb6,0x8c,0xe4,0x37,0x68,0xbb,0xdc,0xef,0xbc,0x86,0xd6,0xfd,0xe8,0x3e,0xcb };
    const uint8_t IV[] = { 0x3b,0xaf,0x1f,0xaa,0x5a,0xef,0x3c,0x0c,0x0c,0xaa,0x26,0x56,0xe8,0xfb,0x10,0xb3 };
    const uint8_t PLAINTEXT[] = { 0xb7,0x3f,0xa2,0x2a,0x06,0xe2,0x80,0x7c,0x6f,0xd3,0x4f,0x51,0xa8,0xb1,0x30,0xac };
    const uint8_t CIPHERTEXT[] = { 0x80,0x82,0xeb,0xe6,0x8e,0x68,0x25,0x0a,0xdb,0x3d,0xa9,0xbd,0xb3,0x5e,0x9d,0xe3 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-75", "[CBC][MCT][192][DECRYPT][n75]") {
    const uint8_t KEY[] = { 0x6b,0x89,0x9f,0x3b,0x5a,0xc7,0xce,0x32,0xbb,0x89,0x2e,0xce,0x31,0x8a,0x3b,0xa0,0x80,0x6f,0xc9,0x87,0x55,0x59,0x0e,0x67 };
    const uint8_t IV[] = { 0xb7,0x3f,0xa2,0x2a,0x06,0xe2,0x80,0x7c,0x6f,0xd3,0x4f,0x51,0xa8,0xb1,0x30,0xac };
    const uint8_t PLAINTEXT[] = { 0xf6,0x75,0x9e,0xa7,0x8d,0x7c,0x39,0x12,0x80,0xa4,0x52,0x46,0x37,0xcf,0xf7,0xa5 };
    const uint8_t CIPHERTEXT[] = { 0xd7,0xbd,0x1d,0xa4,0x62,0xd2,0x1c,0xeb,0x13,0x99,0x1f,0xae,0x7b,0x6b,0xa7,0x14 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-76", "[CBC][MCT][192][DECRYPT][n76]") {
    const uint8_t KEY[] = { 0xc8,0xcc,0xe3,0x20,0xe8,0xcc,0x80,0x7b,0x4d,0xfc,0xb0,0x69,0xbc,0xf6,0x02,0xb2,0x00,0xcb,0x9b,0xc1,0x62,0x96,0xf9,0xc2 };
    const uint8_t IV[] = { 0xf6,0x75,0x9e,0xa7,0x8d,0x7c,0x39,0x12,0x80,0xa4,0x52,0x46,0x37,0xcf,0xf7,0xa5 };
    const uint8_t PLAINTEXT[] = { 0x33,0x24,0x49,0xdb,0x30,0x33,0x85,0x8d,0x3b,0xa5,0xf9,0x51,0xe5,0x9e,0x75,0xd3 };
    const uint8_t CIPHERTEXT[] = { 0x3e,0x36,0x19,0xdc,0x02,0x57,0xd4,0xb2,0xa3,0x45,0x7c,0x1b,0xb2,0x0b,0x4e,0x49 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-77", "[CBC][MCT][192][DECRYPT][n77]") {
    const uint8_t KEY[] = { 0x9a,0x23,0x36,0xf4,0x05,0x70,0x7e,0x5f,0x7e,0xd8,0xf9,0xb2,0x8c,0xc5,0x87,0x3f,0x3b,0x6e,0x62,0x90,0x87,0x08,0x8c,0x11 };
    const uint8_t IV[] = { 0x33,0x24,0x49,0xdb,0x30,0x33,0x85,0x8d,0x3b,0xa5,0xf9,0x51,0xe5,0x9e,0x75,0xd3 };
    const uint8_t PLAINTEXT[] = { 0xcc,0xcf,0xf5,0x71,0xa7,0x6b,0x94,0xf4,0xdd,0xe0,0xef,0x55,0xd3,0x9b,0x4d,0xf3 };
    const uint8_t CIPHERTEXT[] = { 0x5e,0x0a,0x55,0xb8,0x09,0xbb,0x2f,0xec,0x52,0xef,0xd5,0xd4,0xed,0xbc,0xfe,0x24 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-78", "[CBC][MCT][192][DECRYPT][n78]") {
    const uint8_t KEY[] = { 0xf5,0x49,0xa0,0x26,0x36,0xa9,0xdd,0x36,0xb2,0x17,0x0c,0xc3,0x2b,0xae,0x13,0xcb,0xe6,0x8e,0x8d,0xc5,0x54,0x93,0xc1,0xe2 };
    const uint8_t IV[] = { 0xcc,0xcf,0xf5,0x71,0xa7,0x6b,0x94,0xf4,0xdd,0xe0,0xef,0x55,0xd3,0x9b,0x4d,0xf3 };
    const uint8_t PLAINTEXT[] = { 0x63,0x40,0xdd,0xcd,0x81,0xca,0xac,0x53,0xdc,0x96,0x0c,0xf7,0x67,0x2a,0x19,0xc9 };
    const uint8_t CIPHERTEXT[] = { 0xc4,0xe1,0x13,0x93,0x71,0xc3,0x07,0xf7,0x6f,0x6a,0x96,0xd2,0x33,0xd9,0xa3,0x69 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-79", "[CBC][MCT][192][DECRYPT][n79]") {
    const uint8_t KEY[] = { 0xf7,0x7a,0x04,0xfd,0xca,0x64,0xb4,0x01,0xd1,0x57,0xd1,0x0e,0xaa,0x64,0xbf,0x98,0x3a,0x18,0x81,0x32,0x33,0xb9,0xd8,0x2b };
    const uint8_t IV[] = { 0x63,0x40,0xdd,0xcd,0x81,0xca,0xac,0x53,0xdc,0x96,0x0c,0xf7,0x67,0x2a,0x19,0xc9 };
    const uint8_t PLAINTEXT[] = { 0xb6,0xe9,0x06,0x1f,0xa5,0xd0,0x3c,0x2e,0x4b,0x7d,0x2d,0x54,0x10,0xd8,0x49,0x5d };
    const uint8_t CIPHERTEXT[] = { 0xea,0xa6,0xa6,0x51,0xac,0xcb,0xcb,0x12,0x02,0x33,0xa4,0xdb,0xfc,0xcd,0x69,0x37 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-80", "[CBC][MCT][192][DECRYPT][n80]") {
    const uint8_t KEY[] = { 0x21,0x56,0xa1,0x8d,0xe3,0x2a,0x9b,0x6c,0x67,0xbe,0xd7,0x11,0x0f,0xb4,0x83,0xb6,0x71,0x65,0xac,0x66,0x23,0x61,0x91,0x76 };
    const uint8_t IV[] = { 0xb6,0xe9,0x06,0x1f,0xa5,0xd0,0x3c,0x2e,0x4b,0x7d,0x2d,0x54,0x10,0xd8,0x49,0x5d };
    const uint8_t PLAINTEXT[] = { 0x5d,0x1e,0x22,0x1e,0xd6,0xa0,0xca,0x3c,0xa2,0x3a,0x0f,0x92,0xd1,0xff,0x79,0x4e };
    const uint8_t CIPHERTEXT[] = { 0x2a,0x1d,0xc9,0x88,0x64,0x6d,0x0f,0xaf,0xd6,0x2c,0xa5,0x70,0x29,0x4e,0x2f,0x6d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-81", "[CBC][MCT][192][DECRYPT][n81]") {
    const uint8_t KEY[] = { 0x30,0xd7,0xcb,0x32,0x6b,0xc9,0x8a,0xdb,0x3a,0xa0,0xf5,0x0f,0xd9,0x14,0x49,0x8a,0xd3,0x5f,0xa3,0xf4,0xf2,0x9e,0xe8,0x38 };
    const uint8_t IV[] = { 0x5d,0x1e,0x22,0x1e,0xd6,0xa0,0xca,0x3c,0xa2,0x3a,0x0f,0x92,0xd1,0xff,0x79,0x4e };
    const uint8_t PLAINTEXT[] = { 0x63,0x1a,0x83,0x5e,0x1a,0xbd,0x9b,0xda,0x0f,0x4f,0xf6,0x6d,0x14,0xa6,0x5b,0xb2 };
    const uint8_t CIPHERTEXT[] = { 0xcb,0x8d,0x9c,0xf3,0x97,0x05,0xd8,0x95,0x11,0x81,0x6a,0xbf,0x88,0xe3,0x11,0xb7 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-82", "[CBC][MCT][192][DECRYPT][n82]") {
    const uint8_t KEY[] = { 0xb9,0x55,0xdf,0xe5,0xc4,0x69,0x10,0x72,0x59,0xba,0x76,0x51,0xc3,0xa9,0xd2,0x50,0xdc,0x10,0x55,0x99,0xe6,0x38,0xb3,0x8a };
    const uint8_t IV[] = { 0x63,0x1a,0x83,0x5e,0x1a,0xbd,0x9b,0xda,0x0f,0x4f,0xf6,0x6d,0x14,0xa6,0x5b,0xb2 };
    const uint8_t PLAINTEXT[] = { 0x5e,0x1b,0x41,0xf4,0x7c,0x21,0xf8,0xa1,0x26,0x66,0x0f,0x42,0x2c,0xab,0xb4,0x67 };
    const uint8_t CIPHERTEXT[] = { 0x0b,0x98,0x30,0x05,0x8f,0x4b,0x3a,0x25,0x89,0x82,0x14,0xd7,0xaf,0xa0,0x9a,0xa9 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-83", "[CBC][MCT][192][DECRYPT][n83]") {
    const uint8_t KEY[] = { 0xff,0x26,0x85,0x84,0xf8,0x96,0xca,0x9b,0x07,0xa1,0x37,0xa5,0xbf,0x88,0x2a,0xf1,0xfa,0x76,0x5a,0xdb,0xca,0x93,0x07,0xed };
    const uint8_t IV[] = { 0x5e,0x1b,0x41,0xf4,0x7c,0x21,0xf8,0xa1,0x26,0x66,0x0f,0x42,0x2c,0xab,0xb4,0x67 };
    const uint8_t PLAINTEXT[] = { 0x86,0x1a,0x06,0xeb,0x63,0x49,0x59,0x59,0x8c,0x69,0x47,0x84,0x6a,0xe2,0x5c,0xab };
    const uint8_t CIPHERTEXT[] = { 0x3e,0x43,0x55,0x8a,0x7f,0x44,0xab,0x93,0x46,0x73,0x5a,0x61,0x3c,0xff,0xda,0xe9 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-84", "[CBC][MCT][192][DECRYPT][n84]") {
    const uint8_t KEY[] = { 0xf9,0xf5,0xb7,0x5d,0x84,0x27,0x78,0xfb,0x81,0xbb,0x31,0x4e,0xdc,0xc1,0x73,0xa8,0x76,0x1f,0x1d,0x5f,0xa0,0x71,0x5b,0x46 };
    const uint8_t IV[] = { 0x86,0x1a,0x06,0xeb,0x63,0x49,0x59,0x59,0x8c,0x69,0x47,0x84,0x6a,0xe2,0x5c,0xab };
    const uint8_t PLAINTEXT[] = { 0x20,0xeb,0x9f,0x2d,0xe5,0xc9,0x16,0xeb,0x4f,0xb7,0x8b,0x86,0x26,0xdf,0xcc,0xc7 };
    const uint8_t CIPHERTEXT[] = { 0x54,0x65,0xb1,0xc7,0x77,0x24,0xe7,0x4e,0x06,0xd3,0x32,0xd9,0x7c,0xb1,0xb2,0x60 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-85", "[CBC][MCT][192][DECRYPT][n85]") {
    const uint8_t KEY[] = { 0xb9,0x4e,0x3f,0x81,0x93,0x64,0x02,0xc7,0xa1,0x50,0xae,0x63,0x39,0x08,0x65,0x43,0x39,0xa8,0x96,0xd9,0x86,0xae,0x97,0x81 };
    const uint8_t IV[] = { 0x20,0xeb,0x9f,0x2d,0xe5,0xc9,0x16,0xeb,0x4f,0xb7,0x8b,0x86,0x26,0xdf,0xcc,0xc7 };
    const uint8_t PLAINTEXT[] = { 0x64,0x47,0xa0,0xfb,0xf8,0x6d,0xa8,0x61,0x41,0xe6,0x78,0x5a,0x3a,0xf6,0xfc,0xd7 };
    const uint8_t CIPHERTEXT[] = { 0x8d,0xe1,0xb6,0x51,0x23,0x8a,0x06,0x6f,0x40,0xbb,0x88,0xdc,0x17,0x43,0x7a,0x3c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-86", "[CBC][MCT][192][DECRYPT][n86]") {
    const uint8_t KEY[] = { 0x70,0x0e,0x38,0x5b,0x15,0xbd,0x84,0xd7,0xc5,0x17,0x0e,0x98,0xc1,0x65,0xcd,0x22,0x78,0x4e,0xee,0x83,0xbc,0x58,0x6b,0x56 };
    const uint8_t IV[] = { 0x64,0x47,0xa0,0xfb,0xf8,0x6d,0xa8,0x61,0x41,0xe6,0x78,0x5a,0x3a,0xf6,0xfc,0xd7 };
    const uint8_t PLAINTEXT[] = { 0x60,0x05,0x85,0x0a,0x37,0x42,0x26,0x85,0x2a,0xed,0x5b,0x32,0x6f,0x61,0xff,0x3b };
    const uint8_t CIPHERTEXT[] = { 0xe3,0xf5,0x15,0x30,0x19,0x69,0x1a,0x6d,0xc9,0x40,0x07,0xda,0x86,0xd9,0x86,0x10 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-87", "[CBC][MCT][192][DECRYPT][n87]") {
    const uint8_t KEY[] = { 0x3c,0xe4,0x0d,0x2c,0xef,0xd1,0xea,0x9a,0xa5,0x12,0x8b,0x92,0xf6,0x27,0xeb,0xa7,0x52,0xa3,0xb5,0xb1,0xd3,0x39,0x94,0x6d };
    const uint8_t IV[] = { 0x60,0x05,0x85,0x0a,0x37,0x42,0x26,0x85,0x2a,0xed,0x5b,0x32,0x6f,0x61,0xff,0x3b };
    const uint8_t PLAINTEXT[] = { 0x21,0x55,0xa1,0x53,0x23,0x94,0xd2,0x93,0xac,0x77,0x97,0x89,0x0c,0x1f,0xed,0xac };
    const uint8_t CIPHERTEXT[] = { 0xe9,0x83,0x59,0xbd,0x60,0x5b,0xbb,0xd1,0x4c,0xea,0x35,0x77,0xfa,0x6c,0x6e,0x4d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-88", "[CBC][MCT][192][DECRYPT][n88]") {
    const uint8_t KEY[] = { 0x6c,0xc6,0x2d,0x42,0x52,0x4b,0xe7,0x81,0x84,0x47,0x2a,0xc1,0xd5,0xb3,0x39,0x34,0xfe,0xd4,0x22,0x38,0xdf,0x26,0x79,0xc1 };
    const uint8_t IV[] = { 0x21,0x55,0xa1,0x53,0x23,0x94,0xd2,0x93,0xac,0x77,0x97,0x89,0x0c,0x1f,0xed,0xac };
    const uint8_t PLAINTEXT[] = { 0x69,0x02,0x02,0xeb,0xcd,0x9c,0x92,0x12,0x63,0x0b,0x07,0x5d,0xbc,0x62,0xbe,0xda };
    const uint8_t CIPHERTEXT[] = { 0x07,0x07,0xfc,0x77,0x49,0x39,0x80,0x9d,0x50,0x22,0x20,0x6e,0xbd,0x9a,0x0d,0x1b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-89", "[CBC][MCT][192][DECRYPT][n89]") {
    const uint8_t KEY[] = { 0xc0,0x55,0xa0,0xfb,0xd4,0x40,0xf1,0xee,0xed,0x45,0x28,0x2a,0x18,0x2f,0xab,0x26,0x9d,0xdf,0x25,0x65,0x63,0x44,0xc7,0x1b };
    const uint8_t IV[] = { 0x69,0x02,0x02,0xeb,0xcd,0x9c,0x92,0x12,0x63,0x0b,0x07,0x5d,0xbc,0x62,0xbe,0xda };
    const uint8_t PLAINTEXT[] = { 0x29,0x75,0x56,0x89,0x68,0x14,0xb4,0xce,0x92,0xd9,0x62,0xa5,0x68,0x17,0x9d,0x84 };
    const uint8_t CIPHERTEXT[] = { 0x12,0xa9,0x53,0x2f,0x18,0x0c,0x94,0x8e,0xac,0x93,0x8d,0xb9,0x86,0x0b,0x16,0x6f };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-90", "[CBC][MCT][192][DECRYPT][n90]") {
    const uint8_t KEY[] = { 0x27,0xf3,0x61,0xcb,0xbe,0xc9,0x8c,0x41,0xc4,0x30,0x7e,0xa3,0x70,0x3b,0x1f,0xe8,0x0f,0x06,0x47,0xc0,0x0b,0x53,0x5a,0x9f };
    const uint8_t IV[] = { 0x29,0x75,0x56,0x89,0x68,0x14,0xb4,0xce,0x92,0xd9,0x62,0xa5,0x68,0x17,0x9d,0x84 };
    const uint8_t PLAINTEXT[] = { 0x6f,0xf4,0x80,0x0e,0xfe,0xdf,0x8d,0xa1,0x08,0xfa,0xb9,0xff,0x71,0xe1,0x35,0x4b };
    const uint8_t CIPHERTEXT[] = { 0xb6,0x15,0xeb,0xed,0x8c,0xd2,0x73,0xe1,0xe7,0xa6,0xc1,0x30,0x6a,0x89,0x7d,0xaf };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-91", "[CBC][MCT][192][DECRYPT][n91]") {
    const uint8_t KEY[] = { 0x40,0x0a,0x95,0xd6,0x77,0xb2,0xdc,0xfd,0xab,0xc4,0xfe,0xad,0x8e,0xe4,0x92,0x49,0x07,0xfc,0xfe,0x3f,0x7a,0xb2,0x6f,0xd4 };
    const uint8_t IV[] = { 0x6f,0xf4,0x80,0x0e,0xfe,0xdf,0x8d,0xa1,0x08,0xfa,0xb9,0xff,0x71,0xe1,0x35,0x4b };
    const uint8_t PLAINTEXT[] = { 0x51,0x32,0xb3,0xaa,0x74,0xfc,0xd3,0xb9,0x63,0xe1,0xfc,0x8a,0xbd,0x54,0x97,0x8d };
    const uint8_t CIPHERTEXT[] = { 0xde,0xb0,0x82,0x05,0x81,0x2e,0xc7,0x25,0x67,0xf9,0xf4,0x1d,0xc9,0x7b,0x50,0xbc };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-92", "[CBC][MCT][192][DECRYPT][n92]") {
    const uint8_t KEY[] = { 0x2d,0xc4,0x4e,0xfa,0x45,0xe6,0xcf,0xf5,0xfa,0xf6,0x4d,0x07,0xfa,0x18,0x41,0xf0,0x64,0x1d,0x02,0xb5,0xc7,0xe6,0xf8,0x59 };
    const uint8_t IV[] = { 0x51,0x32,0xb3,0xaa,0x74,0xfc,0xd3,0xb9,0x63,0xe1,0xfc,0x8a,0xbd,0x54,0x97,0x8d };
    const uint8_t PLAINTEXT[] = { 0x30,0xee,0x93,0x04,0x92,0xb8,0xff,0x47,0x95,0x26,0xfc,0xff,0xac,0xc3,0xab,0x16 };
    const uint8_t CIPHERTEXT[] = { 0x62,0x94,0x68,0x26,0x85,0x5f,0xe4,0x59,0x6d,0xce,0xdb,0x2c,0x32,0x54,0x13,0x08 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-93", "[CBC][MCT][192][DECRYPT][n93]") {
    const uint8_t KEY[] = { 0xd3,0xa3,0x93,0xa4,0x85,0xca,0xe4,0xdc,0xca,0x18,0xde,0x03,0x68,0xa0,0xbe,0xb7,0xf1,0x3b,0xfe,0x4a,0x6b,0x25,0x53,0x4f };
    const uint8_t IV[] = { 0x30,0xee,0x93,0x04,0x92,0xb8,0xff,0x47,0x95,0x26,0xfc,0xff,0xac,0xc3,0xab,0x16 };
    const uint8_t PLAINTEXT[] = { 0x8e,0x8b,0x00,0x99,0xed,0xfa,0xb2,0xe0,0xa3,0xb2,0xd1,0x05,0x8b,0xb1,0xd7,0xa1 };
    const uint8_t CIPHERTEXT[] = { 0x77,0x2d,0xf4,0xd1,0x10,0x6e,0x26,0x15,0xfe,0x67,0xdd,0x5e,0xc0,0x2c,0x2b,0x29 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-94", "[CBC][MCT][192][DECRYPT][n94]") {
    const uint8_t KEY[] = { 0x73,0xa5,0x53,0x25,0xb9,0x00,0xc8,0xc8,0x44,0x93,0xde,0x9a,0x85,0x5a,0x0c,0x57,0x52,0x89,0x2f,0x4f,0xe0,0x94,0x84,0xee };
    const uint8_t IV[] = { 0x8e,0x8b,0x00,0x99,0xed,0xfa,0xb2,0xe0,0xa3,0xb2,0xd1,0x05,0x8b,0xb1,0xd7,0xa1 };
    const uint8_t PLAINTEXT[] = { 0x04,0xf8,0x41,0x25,0xf4,0xc3,0x0c,0x84,0xe6,0xb3,0x3a,0x69,0x44,0x4f,0xaf,0x69 };
    const uint8_t CIPHERTEXT[] = { 0x7b,0x86,0xd3,0x2e,0x8a,0xe8,0xb0,0xea,0xa0,0x06,0xc0,0x81,0x3c,0xca,0x2c,0x14 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-95", "[CBC][MCT][192][DECRYPT][n95]") {
    const uint8_t KEY[] = { 0x8d,0x11,0x82,0x50,0xde,0xf4,0xc6,0x69,0x40,0x6b,0x9f,0xbf,0x71,0x99,0x00,0xd3,0xb4,0x3a,0x15,0x26,0xa4,0xdb,0x2b,0x87 };
    const uint8_t IV[] = { 0x04,0xf8,0x41,0x25,0xf4,0xc3,0x0c,0x84,0xe6,0xb3,0x3a,0x69,0x44,0x4f,0xaf,0x69 };
    const uint8_t PLAINTEXT[] = { 0xb6,0x12,0xe6,0xde,0x82,0x10,0xb8,0xf7,0xe9,0x24,0x80,0x57,0x62,0x13,0xe7,0xdd };
    const uint8_t CIPHERTEXT[] = { 0x32,0x0c,0xde,0x3f,0xed,0xc1,0x5f,0x03,0xfe,0xb4,0xd1,0x75,0x67,0xf4,0x0e,0xa1 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-96", "[CBC][MCT][192][DECRYPT][n96]") {
    const uint8_t KEY[] = { 0x4b,0xf6,0xa2,0x6c,0x30,0x0c,0x79,0xe1,0xf6,0x79,0x79,0x61,0xf3,0x89,0xb8,0x24,0x5d,0x1e,0x95,0x71,0xc6,0xc8,0xcc,0x5a };
    const uint8_t IV[] = { 0xb6,0x12,0xe6,0xde,0x82,0x10,0xb8,0xf7,0xe9,0x24,0x80,0x57,0x62,0x13,0xe7,0xdd };
    const uint8_t PLAINTEXT[] = { 0x44,0x3b,0xba,0x68,0xe8,0xf6,0x00,0x45,0x44,0x0a,0x28,0x69,0x8b,0xf9,0x92,0x77 };
    const uint8_t CIPHERTEXT[] = { 0x25,0x98,0x57,0x40,0x02,0xa4,0xb2,0x8d,0xc6,0xe7,0x20,0x3c,0xee,0xf8,0xbf,0x88 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-97", "[CBC][MCT][192][DECRYPT][n97]") {
    const uint8_t KEY[] = { 0x44,0x43,0x78,0x66,0x48,0x79,0x12,0x6f,0xb2,0x42,0xc3,0x09,0x1b,0x7f,0xb8,0x61,0x19,0x14,0xbd,0x18,0x4d,0x31,0x5e,0x2d };
    const uint8_t IV[] = { 0x44,0x3b,0xba,0x68,0xe8,0xf6,0x00,0x45,0x44,0x0a,0x28,0x69,0x8b,0xf9,0x92,0x77 };
    const uint8_t PLAINTEXT[] = { 0xeb,0xf2,0xc9,0x02,0x3e,0x33,0x3d,0x1d,0xbe,0xb6,0x09,0xfc,0x5d,0xbe,0xd9,0xe1 };
    const uint8_t CIPHERTEXT[] = { 0x91,0x94,0x75,0x56,0x5a,0x78,0xa3,0x19,0x0f,0xb5,0xda,0x0a,0x78,0x75,0x6b,0x8e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-98", "[CBC][MCT][192][DECRYPT][n98]") {
    const uint8_t KEY[] = { 0xa1,0xb8,0x3e,0x92,0x6d,0x8c,0xc0,0x06,0x59,0xb0,0x0a,0x0b,0x25,0x4c,0x85,0x7c,0xa7,0xa2,0xb4,0xe4,0x10,0x8f,0x87,0xcc };
    const uint8_t IV[] = { 0xeb,0xf2,0xc9,0x02,0x3e,0x33,0x3d,0x1d,0xbe,0xb6,0x09,0xfc,0x5d,0xbe,0xd9,0xe1 };
    const uint8_t PLAINTEXT[] = { 0x2f,0x8f,0xfd,0xfb,0x0a,0x6d,0xe0,0x6a,0x25,0x7a,0x12,0xd1,0xd1,0xa1,0xf7,0x1f };
    const uint8_t CIPHERTEXT[] = { 0x67,0x5f,0x24,0x3e,0x05,0x3f,0x7e,0xd7,0xe5,0xfb,0x46,0xf4,0x25,0xf5,0xd2,0x69 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CBCMCT192-DECRYPT-99", "[CBC][MCT][192][DECRYPT][n99]") {
    const uint8_t KEY[] = { 0xf7,0x1d,0xa4,0xf9,0x11,0x3d,0x7a,0xc9,0x76,0x3f,0xf7,0xf0,0x2f,0x21,0x65,0x16,0x82,0xd8,0xa6,0x35,0xc1,0x2e,0x70,0xd3 };
    const uint8_t IV[] = { 0x2f,0x8f,0xfd,0xfb,0x0a,0x6d,0xe0,0x6a,0x25,0x7a,0x12,0xd1,0xd1,0xa1,0xf7,0x1f };
    const uint8_t PLAINTEXT[] = { 0x83,0x64,0x24,0xea,0xdf,0x81,0x55,0xaa,0xf9,0xa9,0xa5,0x13,0x91,0xa1,0xcf,0x7e };
    const uint8_t CIPHERTEXT[] = { 0x0e,0x72,0x53,0x1a,0xa8,0x1f,0x24,0x22,0x56,0xa5,0x9a,0x6b,0x7c,0xb1,0xba,0xcf };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cbc(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cbc(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

