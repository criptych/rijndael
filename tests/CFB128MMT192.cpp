#include "rijndael.h"
#include "catch.hpp"
#include <cstring>

static inline std::string buf2str(const uint8_t *buf, size_t len) {
    std::ostringstream ss; ss << std::hex << std::setfill('0');
    for (size_t i = 0; i < len; ++i) {
        ss << std::setw(2) << static_cast<int>(buf[i]) << ' ';
    }
    return ss.str();
}

TEST_CASE("CFB128MMT192-ENCRYPT-0", "[CFB128][MMT][192][ENCRYPT][n0]") {
    const uint8_t KEY[] = { 0x1b,0xbb,0x30,0x01,0x6d,0x3a,0x90,0x88,0x27,0x69,0x33,0x52,0xec,0xe9,0x83,0x34,0x15,0x43,0x36,0x18,0xb1,0xd9,0x75,0x95 };
    const uint8_t IV[] = { 0xb2,0xb4,0x8e,0x8d,0x60,0x24,0x0b,0xf2,0xd9,0xfa,0x05,0xcc,0x2f,0x90,0xc1,0x61 };
    const uint8_t PLAINTEXT[] = { 0xb4,0xe4,0x99,0xde,0x51,0xe6,0x46,0xfa,0xd8,0x00,0x30,0xda,0x9d,0xc5,0xe7,0xe2 };
    const uint8_t CIPHERTEXT[] = { 0x8b,0x7b,0xa9,0x89,0x82,0x06,0x3a,0x55,0xfc,0xa3,0x49,0x22,0x69,0xbb,0xe4,0x37 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MMT192-ENCRYPT-1", "[CFB128][MMT][192][ENCRYPT][n1]") {
    const uint8_t KEY[] = { 0x69,0xf9,0xd2,0x98,0x85,0x74,0x38,0x26,0xd7,0xc5,0xaf,0xc5,0x36,0x37,0xe6,0xb1,0xfa,0x95,0x12,0xa1,0x0e,0xea,0x9c,0xa9 };
    const uint8_t IV[] = { 0x37,0x43,0x79,0x3c,0x71,0x44,0xa7,0x55,0x76,0x84,0x37,0xf4,0xef,0x5a,0x33,0xc8 };
    const uint8_t PLAINTEXT[] = { 0xf8,0x4e,0xbf,0x42,0xa7,0x58,0x97,0x1c,0x36,0x99,0x49,0xe2,0x88,0xf7,0x75,0xc9,0xcf,0x6a,0x82,0xab,0x51,0xb2,0x86,0x57,0x6b,0x45,0x65,0x2c,0xd6,0x8c,0x3c,0xe6 };
    const uint8_t CIPHERTEXT[] = { 0xa3,0xbd,0x28,0xbb,0x81,0x7b,0xdb,0x3f,0x64,0x92,0x82,0x7f,0x2a,0xa3,0xe6,0xe1,0x34,0xc2,0x54,0x12,0x9d,0x8f,0x20,0xdb,0xc9,0x23,0x89,0xb7,0xd8,0x97,0x02,0xd6 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MMT192-ENCRYPT-2", "[CFB128][MMT][192][ENCRYPT][n2]") {
    const uint8_t KEY[] = { 0x9b,0x4c,0x9e,0x64,0x10,0x82,0x81,0x73,0x01,0x9c,0xaa,0xd0,0xa2,0xcd,0x13,0xdc,0xe2,0x1f,0x31,0x8b,0xf8,0xb4,0x28,0xc3 };
    const uint8_t IV[] = { 0x10,0xba,0x56,0xe6,0x7d,0x96,0xa0,0xb2,0x5b,0x71,0xec,0x74,0x61,0xbc,0x3b,0x3b };
    const uint8_t PLAINTEXT[] = { 0x51,0x74,0xf3,0xf2,0xee,0xc0,0xe7,0xc8,0x94,0x95,0x54,0x01,0xac,0x4b,0x7f,0xde,0x3f,0x51,0x69,0x69,0x01,0x21,0xf6,0x08,0x8f,0x73,0x4e,0x53,0xf5,0xb1,0x84,0x23,0x73,0xac,0x76,0xeb,0x81,0x8d,0xf4,0x4c,0x10,0x0e,0x24,0xe3,0x13,0xea,0x24,0x66 };
    const uint8_t CIPHERTEXT[] = { 0xcd,0x99,0x67,0xde,0x63,0x41,0x67,0x1d,0xdc,0x17,0x2d,0xb1,0x9d,0x0a,0x1d,0x43,0x2f,0x57,0xac,0xcf,0xa6,0xe9,0x31,0x70,0x6f,0x5f,0x73,0xca,0xf7,0x8b,0x4c,0x8a,0xf0,0xad,0x7e,0xf9,0xfe,0x6a,0x1e,0x9b,0x58,0xb0,0xfe,0xa8,0x58,0x18,0xb7,0x47 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MMT192-ENCRYPT-3", "[CFB128][MMT][192][ENCRYPT][n3]") {
    const uint8_t KEY[] = { 0x44,0x84,0xcc,0x09,0x87,0x1c,0x23,0xee,0x5d,0x4f,0xa5,0x4d,0xcb,0xa0,0x23,0xc6,0xc6,0xbe,0xd7,0xba,0xf6,0x44,0x48,0xa6 };
    const uint8_t IV[] = { 0xa0,0x17,0xd7,0x5a,0xfd,0x41,0xd9,0x15,0xca,0x1f,0xb1,0x7a,0x13,0x1f,0x64,0x8b };
    const uint8_t PLAINTEXT[] = { 0x47,0x74,0x13,0xf1,0x9b,0x80,0x15,0xba,0x0a,0x12,0x04,0x3e,0xd1,0xfe,0xb8,0xfd,0x41,0xe6,0x96,0xdc,0x7b,0xf6,0x6e,0x78,0x78,0xd2,0xa4,0xb9,0x4c,0xcd,0x8e,0xaa,0xab,0x5c,0x1e,0x88,0xac,0xca,0xc1,0x19,0xcd,0x2d,0x86,0x3e,0x37,0x98,0x83,0xcc,0x44,0x92,0x75,0x98,0x3f,0xc7,0xa6,0xd1,0x6b,0xfe,0x14,0x93,0x46,0x4b,0xcf,0xb8 };
    const uint8_t CIPHERTEXT[] = { 0xae,0x99,0x9a,0x87,0xb7,0x1f,0xf7,0x78,0xb1,0x75,0x2d,0xf9,0xc1,0x01,0xcd,0x3b,0x07,0x2e,0xb4,0x49,0xf6,0xc4,0x65,0x78,0xeb,0x5b,0x27,0x28,0x44,0xbe,0x06,0x07,0x83,0x1a,0x89,0xe9,0x37,0x99,0x6b,0x63,0xd3,0x34,0xc6,0xcc,0x15,0x9e,0x2a,0x06,0x5c,0x9e,0xf2,0x85,0x8c,0x66,0x76,0x6c,0x8d,0x5c,0x47,0x70,0x64,0x56,0xb5,0x88 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MMT192-ENCRYPT-4", "[CFB128][MMT][192][ENCRYPT][n4]") {
    const uint8_t KEY[] = { 0x91,0xb7,0xe6,0xa2,0x05,0xc6,0xb3,0x90,0x7b,0xe7,0x09,0xa0,0x52,0x8a,0xec,0xd9,0x49,0xff,0xb7,0x33,0x45,0x2f,0x06,0xf1 };
    const uint8_t IV[] = { 0x38,0xcd,0x83,0x2d,0x3b,0xa1,0xb0,0xee,0x67,0x0e,0xd3,0x85,0xd9,0x4e,0x8e,0x25 };
    const uint8_t PLAINTEXT[] = { 0xb5,0xec,0x2e,0xa7,0xaf,0xae,0x21,0x67,0xe7,0xda,0x5b,0xc2,0xfd,0x68,0x81,0x1a,0xd8,0x6e,0xe5,0xc6,0x83,0x9f,0xfe,0xb7,0x3b,0x12,0x16,0x5c,0xc6,0x46,0x43,0xc4,0x06,0x62,0x98,0x03,0xcd,0xc1,0x9c,0xd6,0xf3,0xad,0xfb,0x8a,0xa6,0x6b,0x7c,0x19,0x02,0x79,0x33,0x97,0xe1,0x13,0xf8,0xcc,0xf5,0xfb,0x18,0x23,0x14,0x7a,0x4a,0xc3,0xd2,0xa2,0xe4,0xfb,0x55,0xd7,0x4e,0xe3,0x65,0x8e,0xb7,0x40,0xc3,0x53,0x08,0xa9 };
    const uint8_t CIPHERTEXT[] = { 0xcd,0xf4,0x2c,0x51,0xd7,0xcf,0x77,0xfb,0x5e,0x8e,0x9e,0x98,0xab,0xb8,0xa5,0x4e,0xad,0x22,0xfc,0xcc,0xe9,0xec,0x9d,0x40,0x49,0x55,0x0e,0x4f,0xba,0x48,0xaf,0x42,0xb0,0x32,0x74,0xf3,0x18,0xe5,0x8a,0x9d,0xf5,0x41,0xa7,0xe8,0xd6,0x0a,0x78,0x12,0x39,0x54,0x2f,0xd4,0xcb,0x8d,0xbd,0xf7,0xac,0xf9,0xe7,0x40,0x13,0x49,0xe5,0xf5,0x11,0x8c,0xdb,0x5e,0xe6,0x4b,0x3d,0x08,0x3c,0xf6,0x5e,0x67,0x08,0x0f,0x7b,0x83 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MMT192-ENCRYPT-5", "[CFB128][MMT][192][ENCRYPT][n5]") {
    const uint8_t KEY[] = { 0x1c,0x92,0x81,0x74,0x4a,0xe9,0x17,0x1f,0x3d,0x6f,0xaa,0x3a,0xb3,0xf8,0x8c,0x5c,0x34,0xfd,0x23,0xe4,0xf6,0xef,0xec,0xea };
    const uint8_t IV[] = { 0x8c,0xe3,0xda,0xf1,0xee,0x9e,0x45,0x1a,0x6f,0x66,0x50,0x17,0x61,0x14,0xfb,0x34 };
    const uint8_t PLAINTEXT[] = { 0x11,0x05,0xa2,0x4d,0xf2,0x83,0x00,0xe9,0x3f,0x78,0xd0,0xaf,0x8c,0xf6,0x68,0xee,0xfd,0x61,0x31,0xbc,0x5b,0x2d,0x58,0xdf,0x66,0xe9,0xc6,0xee,0x6d,0x7d,0x53,0xb3,0x1d,0xb0,0x36,0xd4,0x97,0xed,0xc0,0xb2,0xc5,0x46,0x4b,0x92,0xed,0xb9,0x6d,0xfb,0x86,0xb2,0x71,0x5e,0x4b,0xd2,0x07,0xfd,0x8f,0xef,0x3a,0x05,0xd0,0x5c,0xa3,0xfd,0x8e,0x6a,0xdc,0x64,0x5d,0x2e,0x38,0x96,0x3a,0x85,0xb1,0xf0,0x1b,0x56,0x22,0x34,0xca,0x17,0xb7,0x2f,0xf2,0x93,0xa1,0x99,0x7a,0xea,0x0e,0x3c,0x13,0xd9,0x58,0x59 };
    const uint8_t CIPHERTEXT[] = { 0x3e,0x87,0x87,0xcc,0x77,0x6f,0x48,0x08,0x90,0x76,0x14,0x18,0xf5,0xe4,0x08,0xf6,0x30,0xfb,0xea,0x7c,0x50,0x42,0x48,0xf4,0x63,0xe4,0x1b,0xa2,0x2f,0x99,0x3a,0x0c,0x76,0x62,0xcf,0x9b,0x58,0x36,0x2a,0xfe,0xad,0xe3,0x74,0x3f,0x02,0x7e,0x63,0xb1,0x2e,0x8c,0x9c,0x33,0xdb,0x16,0x58,0xf2,0xa6,0x6d,0xf6,0x40,0x08,0x51,0xf3,0x58,0x43,0xbc,0xc2,0x40,0xa1,0xc1,0x2f,0x45,0x33,0x99,0xbe,0xf1,0x75,0x76,0x08,0xc7,0x78,0xc5,0xd9,0xc1,0x5d,0x40,0x74,0xe3,0xa4,0x69,0xc5,0x6e,0x93,0xb3,0xe8,0xd8 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MMT192-ENCRYPT-6", "[CFB128][MMT][192][ENCRYPT][n6]") {
    const uint8_t KEY[] = { 0x68,0xbb,0x0d,0x29,0xce,0x68,0xae,0x8c,0x0b,0xb7,0xed,0x8a,0x28,0x5e,0x39,0x1f,0x3b,0xee,0x72,0x00,0x39,0x55,0x58,0x38 };
    const uint8_t IV[] = { 0x13,0xc7,0x8c,0x4b,0xd7,0x0b,0x59,0x5e,0x71,0x06,0x49,0x2d,0x65,0x43,0x89,0xc2 };
    const uint8_t PLAINTEXT[] = { 0x49,0x17,0x20,0x17,0xac,0x70,0xca,0x3a,0x1b,0xd9,0xb0,0x64,0x4c,0x7c,0x66,0xa7,0x95,0xa7,0x10,0x67,0x5e,0x72,0x77,0x19,0xd7,0xa3,0x5c,0x49,0xe6,0xce,0x0c,0xe2,0x64,0xc1,0x34,0xaa,0x88,0x1f,0xf7,0x0c,0xa3,0x4a,0x3e,0x1a,0x0e,0x86,0x4f,0xd2,0x61,0x5c,0xa2,0xa0,0xe6,0x3d,0xef,0x25,0x4e,0x68,0x8c,0x37,0xa2,0x0e,0xf6,0x29,0x7c,0xb3,0xae,0x4c,0x76,0xd7,0x46,0xb5,0xe3,0xd6,0xbb,0x41,0xbd,0x0d,0x05,0xd7,0xdf,0x3e,0xed,0xed,0x74,0x35,0x1f,0x4e,0xb0,0xac,0x80,0x1a,0xbe,0x6d,0xc1,0x0e,0xf9,0xb6,0x35,0x05,0x5e,0xe1,0xdf,0xbf,0x41,0x44,0xd0,0xe2,0x40,0x57,0xb0,0x3e };
    const uint8_t CIPHERTEXT[] = { 0x29,0xa4,0xdf,0xf0,0xab,0xeb,0xae,0x96,0x48,0xe1,0xf6,0x09,0xe7,0xd4,0x70,0x05,0xa0,0xdf,0xa9,0xbd,0xa9,0x22,0x08,0x2d,0x38,0xdf,0x36,0x5c,0x48,0x32,0x0d,0xb2,0x8f,0x9b,0x7b,0x4b,0x00,0xe9,0x8a,0xdc,0x82,0xce,0xd0,0x92,0x23,0x53,0x2d,0x44,0xc9,0xe4,0x63,0x17,0x52,0x96,0x02,0xb2,0x60,0x3e,0x20,0x8d,0x27,0x55,0x47,0xa8,0x5f,0x57,0x13,0xa4,0xf0,0x7d,0x6e,0xc3,0x17,0x55,0xeb,0x71,0xb5,0xaa,0xbf,0x34,0x33,0x90,0x1f,0x73,0xcb,0xfe,0xa6,0x40,0xc5,0x89,0x87,0x5d,0x2b,0x93,0xc3,0x2a,0x41,0x2f,0x05,0xa8,0x53,0x05,0x9e,0xce,0xe7,0x16,0x6b,0xc8,0xa4,0x93,0x2f,0x96 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MMT192-ENCRYPT-7", "[CFB128][MMT][192][ENCRYPT][n7]") {
    const uint8_t KEY[] = { 0x76,0xda,0x85,0x2f,0xa0,0xb0,0x49,0x4f,0x3e,0x1c,0x6e,0xe8,0x98,0xdb,0x09,0xcd,0x0b,0x67,0x00,0x59,0x4d,0x25,0x70,0x4b };
    const uint8_t IV[] = { 0x5c,0xc5,0xfa,0xfd,0x42,0xf3,0x11,0x1a,0x04,0xa8,0x45,0xc2,0x80,0x16,0x93,0x4e };
    const uint8_t PLAINTEXT[] = { 0x03,0x0d,0xe1,0xc0,0x80,0xd6,0x02,0x27,0x2e,0x63,0xd7,0x6d,0x49,0x8d,0x2a,0x48,0x7f,0xdc,0xac,0xb2,0xae,0x41,0xdd,0x3e,0xf0,0x08,0x2b,0xad,0xd5,0x08,0x5e,0xbc,0xef,0x1d,0x33,0x41,0x94,0xd8,0x47,0x76,0xdf,0x74,0x37,0x95,0xf8,0x0c,0x06,0xa5,0x95,0x0c,0xbf,0x93,0xc1,0xe6,0x5b,0x84,0xdd,0x06,0xe4,0x6a,0xe4,0x07,0xdb,0xd5,0xf3,0x27,0xd8,0x0d,0x08,0xf8,0x70,0x5d,0x09,0x59,0x5b,0xb1,0x09,0xa5,0xd6,0x64,0xc8,0x2a,0x47,0x53,0x78,0xdd,0x20,0x36,0xc7,0x4b,0x05,0x30,0x19,0xd3,0x31,0xa4,0x15,0x13,0x16,0x4b,0x64,0xa0,0x43,0x83,0xb5,0xfa,0x8b,0xea,0x05,0xbf,0x64,0x2c,0x1d,0x1e,0x8d,0x19,0x5c,0x8f,0xf4,0xfb,0xb6,0xc1,0xd6,0x26,0xfd,0xd4,0x28,0xd0 };
    const uint8_t CIPHERTEXT[] = { 0x0d,0x81,0x22,0xac,0x2a,0xb2,0x36,0x8c,0x98,0x22,0x4b,0x90,0xc0,0x96,0x27,0xf6,0xe7,0xdd,0xcb,0xa6,0x5c,0xd7,0xe5,0x12,0xf7,0x7b,0x31,0x4a,0xf0,0x8a,0x78,0x4d,0x94,0x95,0xf5,0x90,0x47,0x54,0xaa,0xe1,0x46,0xf8,0x1e,0x06,0xaa,0x7b,0x4f,0x24,0x16,0x6a,0xc0,0xc8,0xa0,0xfc,0x22,0x73,0x13,0x8c,0xdd,0x67,0xda,0x1f,0x60,0xac,0x40,0x81,0x89,0xa1,0x36,0x1d,0xb3,0x47,0x92,0xfb,0x0d,0x69,0x4a,0xf8,0x26,0x7f,0x5a,0x5e,0xaa,0xdd,0x3e,0x97,0x17,0x4a,0x3f,0xd6,0xbe,0xa6,0x37,0x38,0xf4,0x6f,0x22,0xc6,0xb2,0x42,0xd2,0x48,0x1e,0xa5,0x7b,0x64,0x12,0x7a,0x8b,0xc4,0xe0,0xca,0xd7,0xca,0x3f,0xda,0x5a,0x90,0xe3,0x45,0x21,0x2f,0xb3,0x83,0x78,0xbb,0x2c,0xbc };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MMT192-ENCRYPT-8", "[CFB128][MMT][192][ENCRYPT][n8]") {
    const uint8_t KEY[] = { 0xdd,0xe0,0x72,0x57,0x89,0x45,0x4b,0xfd,0x49,0x30,0x4d,0xf0,0xc7,0xf1,0x99,0x9c,0x50,0xf0,0x06,0x4f,0x88,0x95,0x72,0x3f };
    const uint8_t IV[] = { 0x3b,0xde,0xa6,0xe6,0x48,0xef,0x05,0x4f,0xbb,0xcd,0x09,0xb0,0x98,0x79,0x7a,0x3e };
    const uint8_t PLAINTEXT[] = { 0x8f,0xd5,0x14,0x12,0x18,0x77,0xb6,0xd5,0x18,0xdd,0x90,0x5f,0x70,0x35,0xac,0xe6,0x8d,0x06,0xff,0xd6,0x3c,0xb9,0xe4,0x73,0xc0,0x57,0xc9,0xc0,0x23,0x94,0x28,0xa0,0xc9,0x0d,0xba,0x3c,0x4b,0xce,0xe7,0xa4,0x82,0x17,0x80,0xb9,0xe1,0x60,0xb0,0x4a,0x08,0x9a,0x30,0x7d,0x97,0xb8,0xbb,0x71,0x40,0x6e,0xc2,0x21,0x21,0x38,0x60,0x8c,0x50,0x9f,0x90,0x13,0xb7,0xb8,0x9e,0x22,0x22,0xed,0xdb,0x12,0x96,0xff,0x95,0x4e,0xe5,0x4c,0x46,0xb5,0x7f,0x4e,0x0c,0x40,0x8b,0x65,0x59,0xe5,0x36,0xd6,0xec,0xbb,0x4b,0x13,0x00,0x5e,0x05,0x3d,0xc3,0x95,0x21,0xe7,0x09,0x32,0x36,0x1d,0x42,0x3a,0x49,0xa4,0xa9,0x46,0x9c,0x84,0xbf,0x29,0xc8,0xc4,0xf8,0xd3,0x0b,0x75,0xb4,0x76,0xe3,0xf2,0x70,0xe7,0xdc,0x65,0x3e,0x46,0xa6,0x8d,0x72,0xe1,0x6a,0xbf,0x9f,0x56 };
    const uint8_t CIPHERTEXT[] = { 0xb2,0xe5,0x06,0x39,0xb7,0x0d,0xee,0x32,0x81,0x5f,0x25,0xe9,0x85,0x77,0x01,0xaf,0xed,0x3d,0xd6,0x3e,0x1d,0x24,0x14,0x94,0xf9,0xac,0xa8,0x7d,0x88,0x17,0x7e,0xa9,0x1a,0x20,0x5b,0xfd,0x12,0x90,0xb1,0xd9,0x14,0xa3,0xfd,0xa5,0xd8,0xc0,0x2b,0x69,0xa6,0x42,0x73,0xaf,0x2c,0x91,0xc7,0xde,0xd3,0x14,0xaf,0xcd,0x80,0x86,0x3a,0xde,0x8a,0x6f,0x59,0x52,0x54,0xb9,0x99,0x25,0xd0,0x88,0x78,0x3f,0x6f,0x23,0x5b,0x7e,0xe0,0xa9,0x0a,0xf9,0x5e,0x1b,0xbd,0x0a,0x4a,0xc6,0xb1,0xc8,0xe6,0xfb,0x60,0x41,0x34,0x31,0x86,0xf9,0x06,0x9e,0x9a,0xf1,0x62,0x4a,0xf8,0x42,0xd2,0x46,0x6d,0xe0,0x10,0x3e,0x81,0xfb,0x5e,0x60,0x87,0x25,0x01,0x0e,0xf6,0xfa,0xfa,0xf6,0x9d,0x25,0x6a,0x7b,0x7a,0x03,0x8a,0x64,0x9c,0x02,0x7e,0x86,0x05,0x15,0x2d,0xa9,0x28,0x06 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MMT192-ENCRYPT-9", "[CFB128][MMT][192][ENCRYPT][n9]") {
    const uint8_t KEY[] = { 0xaf,0xfe,0x25,0xa7,0xb2,0x8f,0xe7,0x42,0x7a,0xa6,0x9a,0x89,0xcb,0x87,0xbc,0x0f,0xb6,0x8c,0x94,0x0d,0x63,0xd3,0x19,0xb3 };
    const uint8_t IV[] = { 0x89,0xe6,0x12,0xf7,0x7e,0xf5,0x5e,0xe8,0x69,0x35,0xd9,0x0a,0x8c,0x74,0x66,0xc2 };
    const uint8_t PLAINTEXT[] = { 0xb5,0x71,0x97,0x02,0x56,0x0b,0x8b,0x21,0x4c,0x73,0xb9,0xa2,0xea,0x7a,0x43,0x70,0x7b,0x10,0xe0,0xb7,0x91,0x52,0xd1,0x01,0x9a,0xc4,0x17,0x9f,0xb4,0xda,0xe3,0x4a,0xc3,0xbe,0x4e,0x0a,0xc0,0x4d,0x4a,0x57,0x54,0x62,0xd8,0x7e,0xa5,0x58,0x7c,0x47,0x70,0xca,0xee,0xd5,0x58,0x9d,0x13,0xcd,0x7d,0x41,0x2b,0xbb,0x51,0x33,0x4c,0xb1,0xa7,0xc7,0x0f,0x31,0x0d,0x24,0x89,0x4c,0x5c,0x90,0x7d,0x0c,0x8d,0xee,0xcf,0x10,0xce,0x84,0x3c,0x76,0xd5,0x02,0x49,0xfe,0x75,0xc0,0x79,0x6b,0x6f,0x48,0xc3,0x2d,0x8a,0x14,0x43,0x3e,0xe6,0x99,0x30,0x4a,0x8d,0x84,0x0e,0x12,0x4b,0x43,0x25,0x12,0xc0,0xc7,0x31,0x61,0xb3,0x88,0x5b,0xda,0xa9,0xca,0x68,0x79,0xb6,0x1f,0x31,0x07,0x94,0x2e,0x53,0xfa,0xf2,0xb2,0x27,0x97,0x0e,0xc6,0xf5,0x59,0x86,0x5f,0x64,0x96,0x6c,0x1a,0x35,0x60,0x98,0x38,0x31,0xaa,0x42,0xe6,0x60,0xab,0xd0,0xc2,0x7c,0x88 };
    const uint8_t CIPHERTEXT[] = { 0x5b,0xc9,0x58,0xb5,0x94,0xf0,0xe4,0x92,0x8c,0xee,0x7c,0x01,0x9e,0xe1,0x88,0x4b,0xab,0x9b,0x69,0x56,0xf4,0x0c,0x47,0xf2,0x4c,0x1b,0x8e,0xf5,0x87,0xd6,0x8b,0x17,0x5d,0xbc,0x36,0x22,0x6b,0x7d,0x95,0xe5,0x73,0x70,0x2f,0x5b,0x0d,0xc9,0x69,0xa8,0xc5,0x9b,0x82,0x81,0x67,0x62,0x84,0x72,0x75,0xc9,0x52,0x34,0xe3,0xc7,0x4f,0xba,0x50,0x84,0x12,0x02,0xc2,0x72,0x64,0x13,0x1a,0xb0,0x37,0x73,0xb4,0xe2,0x8e,0xa7,0xc6,0x8e,0xa9,0x46,0xef,0xe2,0xe2,0xd9,0xa8,0x96,0x43,0xd9,0x8c,0x5d,0xdd,0xd0,0x75,0x09,0x8a,0x93,0x0c,0x74,0x1b,0x53,0x5b,0xa9,0x6e,0xa0,0xa0,0x8a,0xd0,0xcf,0x68,0xd1,0x1e,0x8e,0x98,0xe2,0x6d,0x0a,0x79,0xd3,0xa5,0xef,0x65,0xdd,0x13,0x7c,0xc6,0xc8,0x2a,0x4e,0x8e,0xdb,0x1a,0x63,0xe9,0xbc,0x6e,0x87,0x05,0xce,0xf5,0x9b,0x4b,0x4c,0x39,0x19,0x24,0xff,0xd3,0x3a,0xce,0x99,0x80,0x8c,0xc1,0x63,0x27,0x2d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MMT192-DECRYPT-0", "[CFB128][MMT][192][DECRYPT][n0]") {
    const uint8_t KEY[] = { 0xec,0xb5,0x5f,0xfe,0x3f,0x52,0x09,0xc2,0xeb,0x9e,0x6d,0xfd,0x46,0xaf,0x1b,0x90,0xfa,0x8f,0xc5,0xf1,0xf2,0x90,0x46,0x23 };
    const uint8_t IV[] = { 0x3e,0x67,0x6d,0x0a,0x98,0x6a,0x73,0x08,0xae,0x3c,0xfe,0xa4,0x60,0xd0,0x86,0x87 };
    const uint8_t PLAINTEXT[] = { 0x4c,0x42,0xe9,0x65,0x0b,0x1a,0x28,0x8f,0xa0,0x3e,0xd2,0x05,0xa6,0x35,0x2f,0x7d };
    const uint8_t CIPHERTEXT[] = { 0x0d,0x9d,0xb2,0x15,0x39,0x55,0x14,0x8d,0x34,0x79,0xa9,0x0f,0x2d,0x4d,0x34,0x9f };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MMT192-DECRYPT-1", "[CFB128][MMT][192][DECRYPT][n1]") {
    const uint8_t KEY[] = { 0x74,0x13,0xae,0xe3,0xe2,0xfe,0x94,0x84,0x48,0x2f,0x11,0x18,0xab,0xed,0x66,0xae,0x6c,0x62,0x23,0x65,0xbe,0x42,0x3c,0x2f };
    const uint8_t IV[] = { 0xf3,0x7b,0xac,0xab,0x2e,0x94,0x47,0x6d,0x6b,0x8c,0x86,0x74,0x48,0x61,0x05,0x3d };
    const uint8_t PLAINTEXT[] = { 0xb9,0x2c,0xf8,0x9a,0xb5,0x20,0x13,0xa0,0x61,0xa1,0x92,0xfc,0x0b,0x60,0xaa,0x46,0xc4,0x15,0xe4,0x08,0x4a,0x32,0xd5,0x27,0xd2,0x50,0x7a,0x24,0xdc,0x80,0xa4,0xb8 };
    const uint8_t CIPHERTEXT[] = { 0xb2,0x10,0x48,0x5a,0xe5,0x30,0xfc,0x44,0x54,0x9a,0xda,0x94,0xe3,0xb0,0x8c,0xe0,0x20,0xda,0xac,0xe3,0x26,0xd6,0xcf,0x76,0xc1,0x50,0xc2,0xbc,0xd2,0xb3,0x13,0x9c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MMT192-DECRYPT-2", "[CFB128][MMT][192][DECRYPT][n2]") {
    const uint8_t KEY[] = { 0xca,0xee,0xe8,0xb9,0x3d,0x38,0x60,0x8c,0x4a,0xbe,0x08,0x24,0x16,0xde,0x59,0x62,0x0d,0x27,0x33,0xf5,0x32,0x61,0xd1,0x7d };
    const uint8_t IV[] = { 0xc0,0xcd,0x2b,0xeb,0xcc,0xbb,0x6c,0x49,0x92,0x0b,0xd5,0x48,0x2a,0xc7,0x56,0xe8 };
    const uint8_t PLAINTEXT[] = { 0xb7,0x87,0x2a,0x76,0x1f,0xd0,0x9d,0x4c,0x60,0x64,0x94,0x54,0xa0,0x99,0xbb,0x85,0x08,0x1c,0x64,0x04,0x29,0x9b,0xe3,0x61,0xcd,0x7f,0x18,0x33,0x39,0xbf,0x50,0x67,0x65,0x33,0xf4,0x61,0x98,0x76,0xe5,0x75,0x8b,0xa8,0xd3,0x3f,0x36,0x60,0x2f,0x5c };
    const uint8_t CIPHERTEXT[] = { 0xbc,0x01,0xb4,0x0a,0xec,0x08,0x1a,0xa0,0x0f,0x2e,0x3b,0xc6,0x3f,0xf6,0x1a,0xc4,0xb6,0x84,0xdc,0x7a,0xe0,0x5f,0x7c,0x46,0xb4,0x75,0xc0,0x28,0x45,0x60,0x6c,0x24,0x94,0xe7,0xb5,0xe8,0xa9,0xc8,0xf8,0xaf,0xe2,0xb5,0xac,0x65,0x8a,0x9c,0x96,0x0c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MMT192-DECRYPT-3", "[CFB128][MMT][192][DECRYPT][n3]") {
    const uint8_t KEY[] = { 0xa2,0x62,0x1e,0xe7,0xc5,0xee,0xda,0xd2,0xe3,0x31,0x76,0x0e,0x3c,0x3e,0x49,0xe8,0xfa,0x63,0xf7,0xc0,0x09,0xaf,0xe8,0xb2 };
    const uint8_t IV[] = { 0x2b,0xeb,0xd1,0x9c,0xfa,0x12,0xe0,0x25,0x79,0x82,0x09,0x81,0x1d,0xac,0x87,0x51 };
    const uint8_t PLAINTEXT[] = { 0xa0,0x70,0xb0,0x1f,0x48,0xad,0x5e,0x44,0x00,0x17,0xc9,0x4c,0x77,0xcb,0x3a,0xf6,0x54,0xae,0xf9,0x09,0x4b,0xce,0x94,0x79,0x6c,0x75,0xc5,0xd6,0xf6,0x6d,0x21,0x72,0xd7,0x23,0x1c,0xc9,0x2c,0xa2,0x73,0x38,0x1f,0x3b,0x15,0x16,0x6b,0x82,0xee,0x6d,0xba,0x88,0x10,0x42,0x2f,0x3c,0xb5,0xe3,0xce,0xeb,0x42,0xf4,0x0a,0xe2,0x56,0x75 };
    const uint8_t CIPHERTEXT[] = { 0xef,0xb4,0x1a,0x37,0x9f,0x1e,0xaf,0x41,0x67,0x4f,0xbb,0x7f,0xca,0x14,0xe7,0xc4,0xdd,0x78,0x27,0x09,0x42,0xe5,0x47,0xb5,0x5a,0x8b,0xc7,0x1c,0xb7,0x05,0xe8,0x45,0xd0,0x3a,0x07,0xf0,0xf9,0x82,0x2a,0xd7,0x92,0x0b,0xd9,0x35,0x7e,0x7a,0x2f,0x85,0xd7,0xd5,0x30,0x8c,0xdf,0xa0,0x5d,0x99,0x3a,0x46,0x86,0x0c,0x5b,0xbb,0xe0,0x15 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MMT192-DECRYPT-4", "[CFB128][MMT][192][DECRYPT][n4]") {
    const uint8_t KEY[] = { 0x2b,0x28,0xa2,0xd1,0x9b,0xa9,0xec,0xd1,0x49,0xda,0xe9,0x66,0x22,0xc2,0x17,0x69,0xb1,0x92,0x73,0x35,0xf0,0x2a,0xea,0x51 };
    const uint8_t IV[] = { 0x0c,0xd6,0xdc,0xcf,0x56,0x50,0xa1,0x22,0xb8,0x57,0x41,0x5e,0xe6,0x61,0xac,0xc9 };
    const uint8_t PLAINTEXT[] = { 0x54,0x46,0xff,0xf3,0x32,0x02,0x39,0x68,0x0c,0x19,0xa5,0x51,0x9d,0x3d,0xfd,0x3a,0xb4,0x9f,0x62,0x30,0x08,0x97,0xf6,0x26,0xeb,0x0c,0x95,0x95,0xe8,0x0c,0x56,0x38,0x50,0xa9,0xd3,0x61,0xc6,0xb9,0x74,0x85,0x3a,0xbd,0x42,0xe6,0x02,0x8e,0xa4,0x37,0x48,0x52,0xcc,0xbd,0xfc,0xa8,0x81,0xc6,0x88,0x5e,0x41,0x3a,0x5e,0x8d,0xb5,0x3d,0x4f,0xfa,0x72,0x7c,0xee,0x3b,0xee,0x0b,0xb9,0xee,0x1b,0x4b,0xdc,0xcb,0x4a,0x68 };
    const uint8_t CIPHERTEXT[] = { 0x36,0x16,0x1b,0x4d,0x67,0xba,0xcd,0x9d,0x82,0x84,0x5d,0x61,0x1b,0x47,0xa4,0x1b,0x7c,0xbb,0xcb,0x66,0xa2,0x72,0x68,0x89,0x89,0x0d,0xe9,0x4c,0xaa,0xaf,0x36,0x0b,0xc1,0xb2,0x92,0x08,0xd3,0x99,0xc2,0x05,0x70,0x46,0x72,0x13,0x36,0x6e,0xd4,0xa5,0x96,0x49,0x8a,0xe8,0xdb,0x8e,0xc6,0x57,0x67,0x9e,0xb0,0x8a,0x40,0xff,0x08,0x4e,0xcc,0x0d,0x0c,0xfb,0xd9,0xec,0x9c,0x02,0xe0,0xc1,0x9c,0xc6,0x8b,0x22,0x9a,0xad };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MMT192-DECRYPT-5", "[CFB128][MMT][192][DECRYPT][n5]") {
    const uint8_t KEY[] = { 0x94,0x44,0x99,0x1a,0x09,0x1a,0xbd,0xfe,0xac,0x81,0xd7,0x06,0xd5,0x84,0x95,0xb4,0x4c,0xda,0xa3,0x9a,0xae,0xbb,0x2a,0xca };
    const uint8_t IV[] = { 0x1e,0xa9,0x84,0xaf,0x6c,0x29,0x05,0x66,0xd7,0x77,0xb0,0xee,0xe9,0x84,0xfa,0xf2 };
    const uint8_t PLAINTEXT[] = { 0x4c,0x4c,0x35,0x9b,0x46,0xdc,0x4d,0x30,0xfd,0x9f,0x9a,0x18,0x95,0xa4,0xde,0xaf,0x05,0x66,0xc7,0x11,0xc5,0x2f,0xea,0x26,0x38,0x57,0x20,0xa8,0x7f,0x1d,0xb0,0xab,0x67,0xdf,0x05,0x0c,0x99,0x73,0x8c,0xb3,0xc9,0xe7,0x4f,0x36,0xe7,0x09,0x00,0x25,0xb8,0xec,0xc6,0x27,0xc5,0x8f,0x62,0xca,0x05,0xef,0x43,0x65,0xed,0x5d,0x7a,0xe1,0xa2,0xd0,0xfd,0xeb,0x8b,0x5c,0xf5,0x5c,0x20,0xde,0xed,0x4a,0x20,0xa7,0xeb,0xbb,0x3f,0x14,0x86,0x9e,0x29,0xc9,0xbd,0xbc,0x5b,0xd2,0x2c,0xed,0x26,0x4b,0xdb,0x5b };
    const uint8_t CIPHERTEXT[] = { 0x11,0xaa,0xe8,0x80,0x6d,0x78,0x0f,0x98,0xc4,0xd9,0xfb,0xe8,0xd7,0xd6,0x9d,0x6f,0x3b,0x05,0x4a,0xfe,0x08,0x65,0x0e,0x40,0xd5,0x8a,0x44,0xf9,0xe3,0xfa,0x63,0x8b,0x98,0xd6,0x1b,0xbe,0x2f,0xbd,0xa1,0xc0,0xaf,0xed,0x47,0x6b,0x19,0xab,0x4f,0xc7,0xe6,0xe6,0x01,0xd0,0xb0,0x17,0xfb,0x79,0x30,0x6b,0xc9,0xf0,0x68,0x24,0xb5,0x24,0x21,0x3c,0xe0,0x85,0x98,0x4c,0x92,0x0a,0x75,0xad,0xcf,0x79,0xfc,0xdd,0x2b,0xe3,0x87,0x24,0xdf,0x6d,0x34,0x77,0x1b,0x57,0xdb,0x9c,0x9e,0x36,0x43,0x8f,0x85,0x84 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MMT192-DECRYPT-6", "[CFB128][MMT][192][DECRYPT][n6]") {
    const uint8_t KEY[] = { 0x57,0x9d,0xd4,0x09,0x14,0x64,0xcd,0x72,0x16,0xe1,0x09,0xe4,0x8b,0x5f,0x38,0x9f,0xc4,0xbb,0x51,0x0f,0x89,0x6b,0x83,0xf3 };
    const uint8_t IV[] = { 0x76,0xb8,0xaf,0x44,0x09,0x63,0xc7,0xf3,0x56,0xab,0xa0,0x94,0x2e,0x2e,0x31,0xd2 };
    const uint8_t PLAINTEXT[] = { 0x5d,0xba,0x3a,0x42,0x77,0x9e,0x60,0xf5,0x94,0x61,0x0c,0xa7,0xb4,0x8b,0x1f,0xac,0xe6,0xe3,0x35,0xa9,0xed,0x0d,0x83,0x67,0x7b,0x70,0x5b,0x61,0x9e,0x76,0x85,0x3b,0xdd,0x41,0x30,0xd5,0xab,0x4d,0xdb,0x1c,0x12,0xe8,0xbd,0xb0,0xb8,0x4f,0x29,0x99,0x01,0x3e,0x5c,0x1a,0xad,0x56,0x52,0x7c,0xdc,0xa7,0x8f,0xf4,0x82,0xa1,0x16,0x65,0x88,0x6c,0x35,0x6c,0x52,0x80,0x6a,0xe4,0x19,0xc9,0x06,0xa3,0x8f,0x0a,0x4d,0xa7,0xdf,0x49,0xb8,0x18,0xd5,0x28,0xf9,0x26,0xb5,0xaa,0x1f,0xe1,0x07,0xbf,0xc2,0xd6,0xfb,0xdb,0x1a,0x24,0xc5,0x17,0xeb,0x9b,0x07,0x54,0x95,0xbb,0x72,0x32,0x64,0xfa };
    const uint8_t CIPHERTEXT[] = { 0x8c,0x30,0x19,0x92,0x79,0x01,0x23,0x3f,0x4f,0x22,0x16,0xa8,0x95,0x11,0x44,0x60,0xdd,0x27,0x7b,0x97,0xeb,0x26,0x40,0x48,0x1a,0x11,0x58,0xb3,0xfc,0x40,0x8d,0x0e,0x41,0xb3,0xae,0x78,0xda,0xa7,0xd8,0x2e,0x5e,0x67,0xf4,0x01,0xac,0x65,0x81,0x08,0xd2,0x89,0x94,0x92,0x2d,0xc9,0x1c,0x5e,0xd2,0xfa,0x6b,0x0f,0x2d,0xe5,0xf2,0xda,0xe8,0x9e,0x4c,0x82,0x0e,0x11,0x7f,0x86,0x71,0xde,0x7e,0x99,0x49,0x67,0xf2,0x52,0x1d,0x26,0x39,0x25,0xe7,0x45,0xaf,0x92,0x73,0x68,0x2d,0x9c,0x08,0xce,0xd0,0x7d,0x4a,0x98,0xfc,0x98,0x5f,0x68,0xa0,0xaf,0x51,0x2e,0xbb,0x56,0xb3,0x3f,0x1f,0xa7 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MMT192-DECRYPT-7", "[CFB128][MMT][192][DECRYPT][n7]") {
    const uint8_t KEY[] = { 0x5c,0xd3,0x7a,0x0f,0x9e,0x38,0x06,0x7f,0x5d,0x16,0x5d,0xdd,0x4e,0x59,0x93,0x87,0xaf,0x59,0x67,0xca,0xe6,0xf6,0x0e,0x9b };
    const uint8_t IV[] = { 0x79,0xd7,0x4d,0x29,0x10,0x5a,0x30,0x80,0x44,0x4d,0xe5,0xf5,0x6d,0x7b,0x9e,0x3e };
    const uint8_t PLAINTEXT[] = { 0xe1,0xf3,0xaa,0xbb,0xdd,0x40,0xd6,0x3a,0xe1,0xf4,0xf2,0xac,0x1a,0xbe,0x92,0x84,0xeb,0xca,0xdf,0xc0,0xdf,0x15,0x42,0xd8,0xef,0x5b,0xa5,0x01,0x0f,0x89,0xab,0x58,0x4c,0x8f,0x2c,0x09,0xe4,0xf4,0x95,0xe7,0xf5,0x5e,0x40,0x85,0xfa,0x5f,0xd4,0x3a,0x27,0x9c,0x11,0xeb,0x3f,0xa4,0xcc,0xcc,0x84,0xd4,0x59,0x56,0xa3,0x9b,0x9b,0xa9,0xc5,0x69,0x3c,0xde,0x86,0xd8,0xbc,0x2b,0x68,0x27,0x8b,0xd4,0xaf,0xe9,0xd4,0xa5,0x7f,0xf4,0x79,0x63,0x9b,0x8a,0x92,0xb4,0xf2,0xc5,0x26,0x89,0x50,0xae,0xb4,0xfe,0x51,0x33,0x97,0xbd,0x45,0xa2,0x7b,0xfb,0xa9,0x4b,0xd2,0x6e,0xde,0x38,0x98,0x50,0xd5,0x32,0x0d,0xb3,0x47,0x2e,0x35,0x33,0xad,0x5c,0x13,0x41,0x62,0xc2,0x24,0xd0 };
    const uint8_t CIPHERTEXT[] = { 0x15,0x1e,0x5a,0xd0,0x5d,0x98,0x30,0xb8,0xa2,0x11,0x30,0xc2,0xab,0xc4,0xee,0x3f,0x53,0xac,0xcf,0x0c,0xd5,0xaf,0x71,0x67,0x46,0x17,0x47,0x00,0x63,0x41,0x84,0x53,0x8d,0x99,0x3b,0x36,0x12,0xc6,0xc4,0xae,0xae,0x21,0x61,0x07,0x52,0x6c,0x21,0x24,0x23,0xc1,0x05,0x13,0xc6,0xc8,0x62,0xe4,0xdb,0x2d,0x86,0xbc,0xc7,0x51,0x9e,0x25,0xb7,0x40,0xd8,0xa8,0xe2,0xe4,0xc4,0x9e,0x0e,0x78,0x00,0x43,0x55,0x3e,0x14,0x0c,0x29,0x75,0x9b,0x3b,0x96,0x86,0xa4,0xb0,0xc7,0x7e,0x57,0x02,0xcc,0xc0,0xdc,0xce,0x9a,0xfc,0x78,0x4f,0x53,0x5b,0xf9,0x2f,0xc8,0xfc,0x55,0x9d,0x3d,0xa4,0x8e,0xa0,0x6c,0xb1,0xd8,0xab,0xcc,0x50,0xfe,0x71,0x12,0xf0,0x02,0xfa,0xf8,0xf7,0x04,0xf7 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MMT192-DECRYPT-8", "[CFB128][MMT][192][DECRYPT][n8]") {
    const uint8_t KEY[] = { 0xec,0x93,0x89,0x18,0x82,0xb2,0xc8,0xc6,0x7d,0xf8,0x94,0xc8,0x82,0x04,0x5e,0xde,0x26,0xa9,0x00,0x8a,0xb0,0x9e,0xa0,0x67 };
    const uint8_t IV[] = { 0xd9,0x6a,0x0d,0xcd,0x84,0xaf,0xab,0xee,0x6e,0x43,0x35,0xbf,0xea,0x40,0x2c,0x51 };
    const uint8_t PLAINTEXT[] = { 0x9f,0xc3,0xa9,0x8d,0x8e,0x1d,0x00,0xb8,0x58,0x36,0xb9,0xb0,0x3d,0x33,0x99,0xd6,0x71,0xc1,0x1e,0x78,0x12,0xef,0xff,0xc9,0x60,0x31,0x2d,0x2d,0x59,0x03,0x59,0x77,0xe4,0x4b,0xfa,0xb8,0x3f,0xb2,0xcc,0x7e,0xf8,0xab,0xc2,0xc6,0x5a,0x8e,0xea,0x99,0x2f,0xc8,0xd8,0x17,0xca,0x9b,0xb4,0x47,0x1a,0x5d,0xa4,0x09,0x34,0x2a,0x4a,0xe0,0xa6,0xd2,0x1a,0x85,0xde,0x72,0xa2,0x8d,0x90,0xb0,0x33,0x8f,0x2c,0x57,0xc5,0x18,0xa8,0x97,0x9a,0x01,0xf2,0x16,0xe6,0x53,0xe2,0x0b,0x00,0x50,0x20,0x2e,0xd5,0x44,0x4c,0x10,0x3a,0x73,0x79,0xfc,0x00,0x05,0x47,0x50,0x99,0x9c,0xaa,0x71,0xef,0x47,0x05,0xb7,0x40,0xf5,0x67,0x8e,0x5f,0xbd,0x78,0xf9,0x1a,0x56,0xed,0xf1,0x68,0x7b,0xd2,0x60,0x82,0xbc,0x59,0xcb,0x74,0x44,0x00,0x65,0x33,0x39,0xf6,0xfe,0x68,0x45 };
    const uint8_t CIPHERTEXT[] = { 0x0a,0x5d,0x3e,0x3e,0xc1,0x64,0xe8,0x44,0xe4,0x9b,0xa1,0x3b,0xdf,0x50,0xd4,0xf0,0x14,0xe9,0x9c,0x21,0x24,0x19,0x2d,0x47,0x6a,0x5a,0x70,0xb3,0xc9,0x97,0xed,0xdc,0xa8,0x28,0xee,0xf8,0x3a,0x04,0xe1,0xc9,0x03,0x32,0xff,0xba,0x98,0x81,0x2b,0x2a,0xa6,0x79,0x1d,0x08,0x35,0x91,0xbf,0xa0,0x2e,0xa3,0xd7,0xb4,0x1b,0x9c,0xe7,0xcf,0x2f,0x78,0x51,0xd6,0x86,0x6e,0xbf,0xe0,0xad,0x67,0xc2,0x47,0x65,0xb5,0xba,0x00,0xa4,0x02,0xf5,0x27,0xdd,0x86,0x1b,0xde,0x81,0x7e,0xc9,0x58,0xc6,0xd9,0x7c,0x31,0xa7,0x34,0xb1,0x01,0x2c,0x08,0x4a,0x30,0xeb,0x22,0x34,0x0c,0xcf,0x54,0x47,0x18,0x18,0x6b,0x6d,0xa7,0xa3,0x60,0x07,0xaa,0x6c,0xd3,0x8c,0xc7,0x51,0xb4,0x73,0xab,0x19,0x44,0x54,0xa0,0xb4,0x3c,0x4a,0x62,0xc4,0x4b,0x9b,0x2e,0x5d,0xc6,0x9b,0x1d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MMT192-DECRYPT-9", "[CFB128][MMT][192][DECRYPT][n9]") {
    const uint8_t KEY[] = { 0xdc,0xc8,0x70,0x21,0x42,0xb2,0x9e,0x15,0x29,0xf2,0x3c,0x5c,0x37,0x66,0x46,0x4f,0x6b,0xe0,0xd2,0xfb,0xb1,0x6e,0x46,0x82 };
    const uint8_t IV[] = { 0xe0,0x81,0x87,0x69,0xd7,0x7f,0x23,0x15,0x92,0x4c,0xf8,0x1a,0x36,0x91,0xe2,0x75 };
    const uint8_t PLAINTEXT[] = { 0xcb,0x55,0x01,0x11,0xbf,0x0a,0x03,0xea,0xf4,0xf4,0x9a,0xf2,0x14,0xfc,0xc0,0x5a,0x32,0x97,0x2d,0x7b,0x4d,0xed,0xe3,0xe9,0x81,0x2a,0x27,0xef,0x80,0xd6,0x80,0x18,0x81,0x19,0xea,0xd5,0x62,0x31,0x3e,0x40,0x0f,0xe0,0xa0,0xff,0xfb,0xb8,0x8c,0x55,0xa4,0x2b,0xd6,0x81,0xd5,0xc9,0x3a,0x8a,0x61,0xba,0x90,0x90,0x58,0xe6,0x2d,0x99,0xfa,0x10,0x9c,0xfd,0x49,0x93,0x5b,0x15,0x08,0x62,0xa8,0xaa,0xb2,0xc3,0x01,0xb9,0xb0,0xa9,0x15,0x7c,0x83,0x84,0x91,0xcd,0x73,0x7a,0xf4,0x38,0xcb,0x66,0xb1,0xf2,0x04,0x20,0x20,0x0d,0xbc,0x56,0xaa,0x66,0x55,0x2c,0xe4,0xbe,0x04,0xca,0xce,0x4a,0xce,0x5b,0xfb,0xc6,0x17,0xe3,0xb2,0x7f,0x40,0xec,0x6d,0xbc,0x85,0xa4,0x2b,0x41,0x0d,0xcb,0x7e,0xa0,0xb7,0x8d,0x47,0x22,0x97,0xd9,0xb9,0x88,0x75,0xd6,0x36,0xb8,0xef,0x08,0xc2,0x54,0xec,0x9b,0xd0,0x5b,0xfd,0xa0,0x1b,0xb3,0x8e,0x8b,0xeb,0x6a };
    const uint8_t CIPHERTEXT[] = { 0x1a,0x22,0xb1,0xbf,0x57,0x75,0xd4,0x3c,0x66,0xf1,0xa7,0x30,0x84,0xee,0xef,0xdb,0x3e,0xd2,0x4c,0xeb,0xd9,0xe2,0xbe,0xf2,0xf0,0x58,0x67,0x16,0x5f,0xb5,0x93,0x0b,0x60,0x58,0xf5,0x3e,0xf4,0x50,0x33,0x53,0x85,0x6f,0xa6,0xd2,0xc9,0x9f,0x5b,0x1d,0xe9,0x79,0x5d,0xa6,0xe3,0x14,0x36,0x5e,0x2d,0x1b,0xb3,0x71,0x9b,0x23,0xe8,0x30,0x82,0x3b,0x74,0x4e,0x1e,0xc4,0x06,0x50,0x31,0x83,0x20,0x3f,0xed,0xf4,0x1b,0xa0,0x14,0xe1,0x6c,0xa6,0x5e,0x34,0x25,0xa5,0x1b,0x0a,0xbf,0xca,0x19,0x08,0x16,0x0a,0xc8,0xf2,0xb5,0x58,0x9c,0x79,0x54,0x1b,0xb3,0x55,0x9f,0xdf,0xb8,0x94,0x39,0x4a,0x07,0x32,0x01,0x52,0x11,0xe9,0x94,0xae,0x02,0x4a,0x13,0x8a,0xa2,0x0d,0x26,0x7f,0x79,0xa6,0x40,0xc2,0x37,0x19,0x25,0x9c,0x53,0x0e,0xaa,0x1a,0xf1,0x28,0xbc,0x05,0x09,0x93,0xa4,0x14,0xc6,0xdc,0x89,0x61,0x2c,0x06,0x37,0x1a,0xfe,0xda,0x1f,0x79 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

