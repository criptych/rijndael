#include "rijndael.h"
#include "catch.hpp"
#include <cstring>

static inline std::string buf2str(const uint8_t *buf, size_t len) {
    std::ostringstream ss; ss << std::hex << std::setfill('0');
    for (size_t i = 0; i < len; ++i) {
        ss << std::setw(2) << static_cast<int>(buf[i]) << ' ';
    }
    return ss.str();
}

TEST_CASE("ECBMMT128-ENCRYPT-0", "[ECB][MMT][128][ENCRYPT][n0]") {
    const uint8_t KEY[] = { 0xed,0xfd,0xb2,0x57,0xcb,0x37,0xcd,0xf1,0x82,0xc5,0x45,0x5b,0x0c,0x0e,0xfe,0xbb };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x16,0x95,0xfe,0x47,0x54,0x21,0xca,0xce,0x35,0x57,0xda,0xca,0x01,0xf4,0x45,0xff };
    const uint8_t CIPHERTEXT[] = { 0x78,0x88,0xbe,0xae,0x6e,0x7a,0x42,0x63,0x32,0xa7,0xea,0xa2,0xf8,0x08,0xe6,0x37 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMMT128-ENCRYPT-1", "[ECB][MMT][128][ENCRYPT][n1]") {
    const uint8_t KEY[] = { 0x77,0x23,0xd8,0x7d,0x77,0x3a,0x8b,0xbf,0xe1,0xae,0x5b,0x08,0x12,0x35,0xb5,0x66 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x1b,0x0a,0x69,0xb7,0xbc,0x53,0x4c,0x16,0xce,0xcf,0xfa,0xe0,0x2c,0xc5,0x32,0x31,0x90,0xce,0xb4,0x13,0xf1,0xdb,0x3e,0x9f,0x0f,0x79,0xba,0x65,0x4c,0x54,0xb6,0x0e };
    const uint8_t CIPHERTEXT[] = { 0xad,0x5b,0x08,0x95,0x15,0xe7,0x82,0x10,0x87,0xc6,0x16,0x52,0xdc,0x47,0x7a,0xb1,0xf2,0xcc,0x63,0x31,0xa7,0x0d,0xfc,0x59,0xc9,0xff,0xb0,0xc7,0x23,0xc6,0x82,0xf6 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMMT128-ENCRYPT-2", "[ECB][MMT][128][ENCRYPT][n2]") {
    const uint8_t KEY[] = { 0x28,0x0a,0xfe,0x06,0x32,0x16,0xa1,0x0b,0x9c,0xad,0x9b,0x20,0x95,0x55,0x2b,0x16 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x6f,0x17,0x2b,0xb6,0xec,0x36,0x48,0x33,0x41,0x18,0x41,0xa8,0xf9,0xea,0x20,0x51,0x73,0x5d,0x60,0x05,0x38,0xa9,0xea,0x5e,0x8c,0xd2,0x43,0x1a,0x43,0x29,0x03,0xc1,0xd6,0x17,0x89,0x88,0xb6,0x16,0xed,0x76,0xe0,0x00,0x36,0xc5,0xb2,0x8c,0xcd,0x8b };
    const uint8_t CIPHERTEXT[] = { 0x4c,0xc2,0xa8,0xf1,0x3c,0x8c,0x7c,0x36,0xed,0x6a,0x81,0x4d,0xb7,0xf2,0x69,0x00,0xc7,0xe0,0x4d,0xf4,0x9c,0xba,0xd9,0x16,0xce,0x6a,0x44,0xd0,0xae,0x4f,0xe7,0xed,0xc0,0xb4,0x02,0x79,0x46,0x75,0xb3,0x69,0x49,0x33,0xeb,0xbc,0x35,0x65,0x25,0xd8 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMMT128-ENCRYPT-3", "[ECB][MMT][128][ENCRYPT][n3]") {
    const uint8_t KEY[] = { 0xef,0x60,0xfb,0x14,0x00,0xc8,0x39,0x36,0x41,0x4a,0x25,0x65,0x1e,0xb5,0x1a,0x1b };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x59,0x35,0x59,0x31,0x8c,0xc6,0x6b,0xf6,0x95,0xe4,0x9f,0xeb,0x42,0x79,0x4b,0xdf,0xb6,0x6b,0xce,0x89,0x5e,0xc2,0x22,0xca,0x26,0x09,0xb1,0x33,0xec,0xf6,0x6a,0xc7,0x34,0x4d,0x13,0x02,0x1e,0x01,0xe1,0x1a,0x96,0x9c,0x46,0x84,0xcb,0xe2,0x0a,0xba,0xe2,0xb1,0x9d,0x3c,0xeb,0x2c,0xac,0xd4,0x14,0x19,0xf2,0x1f,0x1c,0x86,0x51,0x49 };
    const uint8_t CIPHERTEXT[] = { 0x3e,0xa6,0xf4,0x30,0x52,0x17,0xbd,0x47,0xee,0xbe,0x77,0x3d,0xa4,0xb5,0x78,0x54,0x9c,0xac,0x74,0x4c,0x00,0xcb,0xd8,0xf9,0xd5,0x96,0xd3,0x80,0x10,0x30,0x4b,0xd8,0x50,0xcc,0x2f,0x4b,0x19,0xa9,0x1c,0x2e,0x02,0x2e,0xab,0xf1,0x00,0x26,0x61,0x85,0xca,0x27,0x05,0x12,0x78,0x15,0xdf,0xd4,0x6e,0xfb,0xe4,0xec,0xd4,0x6a,0x30,0x58 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMMT128-ENCRYPT-4", "[ECB][MMT][128][ENCRYPT][n4]") {
    const uint8_t KEY[] = { 0xc5,0x80,0x5c,0xd1,0xc4,0xa7,0xb9,0x8a,0x71,0x5b,0xad,0xb7,0x09,0x72,0x0b,0xf4 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x84,0xf8,0x09,0xfc,0x5c,0x84,0x65,0x23,0x76,0xcc,0x0d,0xf1,0x00,0x95,0xbc,0x00,0xb9,0xf0,0x54,0x7f,0xa9,0x1a,0x2d,0x33,0x10,0xa0,0xad,0xbc,0x9c,0xc6,0x19,0x1a,0xde,0x2a,0xaa,0x6f,0xff,0xa5,0xe4,0x06,0xaf,0x72,0x23,0x95,0x5f,0x92,0x77,0xbf,0xb0,0x6e,0xb1,0xdd,0x2b,0xbf,0xbe,0xfe,0x32,0xab,0x34,0x2c,0x36,0x30,0x2b,0xf2,0x2b,0xc6,0x4e,0x1b,0x39,0x40,0x32,0xbb,0xb5,0xf4,0xe6,0x74,0x4f,0x1b,0xcb,0xf2 };
    const uint8_t CIPHERTEXT[] = { 0xa6,0xdc,0x09,0x6b,0xc2,0x1b,0x06,0x58,0xe4,0x16,0xa0,0xf6,0x79,0xfe,0xfc,0x6e,0x95,0x8e,0x9c,0x56,0xe3,0xce,0x04,0xfd,0xf6,0xe3,0x92,0xc2,0xdb,0x77,0x0a,0x60,0xd9,0x52,0x3c,0x25,0x59,0x25,0xe1,0x4a,0x3e,0x02,0xa1,0x00,0x2b,0xf3,0x87,0x5c,0x2e,0x50,0x1b,0xac,0x61,0x8b,0xee,0x1f,0x55,0xf9,0x85,0x04,0x54,0x85,0x4e,0xef,0x9d,0x69,0x3d,0x90,0x93,0x7c,0xc8,0x38,0x7b,0x6f,0x4c,0x44,0x14,0xe2,0x08,0x0b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMMT128-ENCRYPT-5", "[ECB][MMT][128][ENCRYPT][n5]") {
    const uint8_t KEY[] = { 0x4c,0x35,0xbe,0x02,0x8e,0x14,0x75,0x27,0x83,0x46,0xea,0xe5,0x31,0xcb,0xee,0x5c };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x7a,0xdc,0xf4,0xa4,0x94,0xf6,0xb0,0x97,0x90,0xc8,0x2c,0x8b,0xb9,0x7d,0xb6,0x2c,0x5d,0x3f,0xa4,0x03,0x2f,0x06,0xdf,0xec,0xea,0xad,0x9e,0xcb,0x37,0x4b,0x74,0x7b,0xd1,0xc0,0x8d,0x07,0xe7,0x8e,0x35,0x1d,0xc2,0xeb,0x99,0xbf,0xa7,0x14,0xd2,0x3c,0xff,0xe3,0x1f,0x5f,0xb5,0xa4,0x72,0xe6,0xe0,0x25,0x2f,0x35,0xa2,0x0c,0x30,0x4c,0x4f,0x6d,0x0c,0xf7,0xd2,0x9c,0x99,0x44,0x4d,0x40,0xaf,0x3a,0x00,0xa9,0x2f,0xc8,0x6c,0x64,0x44,0xfc,0xb8,0x0c,0xe9,0x76,0x53,0x62,0xac,0x1b,0xdb,0xa0,0xb1,0x0e };
    const uint8_t CIPHERTEXT[] = { 0x22,0x21,0x79,0x53,0xf7,0x19,0x32,0xab,0x43,0x60,0xd9,0x7e,0xf4,0x95,0x08,0x15,0x59,0xf1,0xfc,0xb0,0x9c,0xac,0xa4,0x1f,0xa0,0xc6,0x5f,0x7b,0x17,0x92,0xb5,0x60,0xea,0xbe,0x18,0xf3,0xb3,0xb0,0x6e,0xf8,0x0c,0x41,0x88,0x6f,0x24,0xc5,0xd6,0xd3,0x2d,0x20,0x42,0x7e,0x83,0xd8,0xb5,0x56,0x4d,0x9a,0xc7,0x43,0x5a,0x28,0x42,0xc1,0xcf,0x7c,0x6f,0xcc,0x22,0x9e,0xb7,0xf5,0x18,0xd3,0xe0,0x16,0x7d,0x51,0x0e,0xfb,0xae,0xe3,0x9a,0x04,0x38,0xfc,0x80,0x0e,0xb6,0xac,0xfc,0x20,0x3c,0x93,0x28,0x0c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMMT128-ENCRYPT-6", "[ECB][MMT][128][ENCRYPT][n6]") {
    const uint8_t KEY[] = { 0x00,0xcc,0x73,0xc9,0x90,0xd3,0x76,0xb8,0x22,0x46,0xe4,0x5e,0xa3,0xae,0x2e,0x37 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x37,0xa1,0x20,0x5e,0xa9,0x29,0x35,0x5d,0x2e,0x4e,0xe5,0x2d,0x5e,0x1d,0x9c,0xda,0x27,0x9a,0xe0,0x1e,0x64,0x02,0x87,0xcc,0xb1,0x53,0x27,0x6e,0x7e,0x0e,0xcf,0x2d,0x63,0x3c,0xf4,0xf2,0xb3,0xaf,0xae,0xcb,0x54,0x8a,0x25,0x90,0xce,0x04,0x45,0xc6,0xa1,0x68,0xba,0xc3,0xdc,0x60,0x18,0x13,0xeb,0x74,0x59,0x1b,0xb1,0xce,0x8d,0xfc,0xd7,0x40,0xcd,0xbb,0x63,0x88,0x71,0x9e,0x8c,0xd2,0x83,0xd9,0xcc,0x7e,0x73,0x69,0x38,0x24,0x0b,0x41,0x0d,0xd5,0xa6,0xa4,0x8b,0xa4,0x9d,0xd2,0x06,0x65,0x03,0xe6,0x3a,0xb5,0x92,0xff,0xdf,0x3b,0xe4,0x9e,0x7d,0x2d,0xe7,0x4f,0x82,0x15,0x8b,0x8c };
    const uint8_t CIPHERTEXT[] = { 0xc8,0x8e,0x03,0x38,0x3b,0xa9,0xda,0x6f,0x98,0x2c,0x05,0x7f,0xe9,0x2c,0x0b,0xb3,0xed,0x5b,0x9c,0xd1,0x82,0x95,0xa1,0x00,0xe1,0x3a,0x4e,0x12,0xd4,0x40,0xb9,0x19,0xbb,0xb8,0xb2,0x21,0xab,0xea,0xd3,0x62,0x90,0x2c,0xe4,0x4d,0x30,0xd0,0xb8,0x0e,0x56,0xbe,0xe1,0xf6,0x6a,0x7d,0x8d,0xe0,0xb1,0xe1,0xb4,0xdb,0xf7,0x6c,0x90,0xc1,0x80,0x7a,0x3b,0xc5,0xf2,0x77,0xe9,0x81,0x4c,0x82,0xab,0x12,0x0f,0x7e,0x10,0x21,0x7d,0xfd,0xf6,0x09,0x2c,0xe4,0x95,0x8f,0x89,0x06,0xc5,0xe3,0x22,0x79,0xc6,0x53,0x7d,0xd1,0xfb,0xae,0x20,0xcb,0x7a,0x1d,0x9f,0x89,0xd0,0x49,0x0b,0x6a,0xef,0xc1 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMMT128-ENCRYPT-7", "[ECB][MMT][128][ENCRYPT][n7]") {
    const uint8_t KEY[] = { 0x0a,0x53,0xaa,0x7a,0x3e,0x4a,0x4f,0x36,0x4e,0x8c,0x6c,0x72,0x24,0xaf,0x55,0x01 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xea,0xf1,0x76,0x0c,0x0f,0x25,0x31,0x0d,0xad,0xa6,0xde,0xbe,0xb9,0x66,0x30,0x4d,0xb7,0xa9,0xf1,0xb2,0xd1,0xc3,0xaf,0x92,0x26,0x23,0xb2,0x63,0x64,0x90,0x31,0xd2,0x99,0xb3,0xc5,0x61,0x46,0xd6,0x1d,0x55,0xb6,0xeb,0xf4,0xcf,0x8d,0xd0,0x40,0x39,0xa4,0xd1,0xac,0xe3,0x14,0x6f,0x49,0xee,0x91,0x5f,0x80,0x6a,0xfa,0xd6,0x4c,0xbb,0x2d,0x04,0xa6,0x41,0x20,0xde,0x40,0x38,0x2e,0x21,0x75,0xdc,0xae,0x94,0x80,0xd1,0xca,0x8d,0xed,0xc3,0x8f,0xb6,0x4e,0x4a,0x40,0x11,0x2f,0x10,0xf0,0x3a,0x4c,0x35,0x4f,0xed,0x01,0xf2,0xc5,0xc7,0x01,0x7d,0xbd,0x51,0x4b,0x2d,0x44,0x3a,0x5a,0xdf,0xd2,0xe4,0x9c,0x98,0x67,0x23,0x26,0x6c,0xda,0x41,0xa6,0x9e,0x6e,0x45,0x99,0x08 };
    const uint8_t CIPHERTEXT[] = { 0x5e,0xce,0x70,0xa4,0x4d,0xa4,0x1b,0xc7,0xcf,0xb9,0xb5,0x82,0xea,0x9c,0xe0,0x98,0x00,0x30,0xec,0x4a,0xf3,0x31,0xe7,0x64,0x99,0x96,0x1f,0x88,0x86,0x0a,0xa0,0x55,0x4a,0xba,0x3e,0xcb,0xf7,0x7c,0xa4,0x29,0x3a,0x3f,0xee,0x85,0x4a,0x2c,0xaf,0x3a,0xe8,0x00,0x34,0x3f,0xb4,0x52,0x13,0x88,0xb1,0x6b,0x6d,0xc5,0x99,0xb3,0xd6,0x0b,0xf8,0x27,0x77,0xf9,0x8e,0x1a,0x8d,0x04,0xab,0x9c,0xd5,0x4d,0xd9,0xa2,0x48,0x09,0x57,0x95,0xd4,0xdf,0xe4,0x85,0x8b,0xfd,0x9a,0x05,0xf5,0x4c,0x79,0x5b,0xb0,0x86,0xe1,0x5f,0x7c,0x22,0x22,0x81,0x84,0xec,0x66,0xa9,0xca,0x10,0xb1,0xcf,0x71,0xa6,0xbb,0x93,0x03,0xc5,0xcd,0x1d,0xcc,0x05,0x64,0x60,0xa8,0x6d,0xf6,0x51,0xf0,0x53 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMMT128-ENCRYPT-8", "[ECB][MMT][128][ENCRYPT][n8]") {
    const uint8_t KEY[] = { 0xb8,0x0b,0xcc,0x92,0x90,0x52,0xcb,0x54,0x50,0x47,0x94,0x42,0xe2,0xb8,0x09,0xce };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x81,0x77,0xd7,0x9c,0x8f,0x23,0x91,0x78,0x18,0x6b,0x4d,0xc5,0xf1,0xdf,0x2e,0xa7,0xfe,0xe7,0xd0,0xdb,0x53,0x54,0x89,0xef,0x98,0x3a,0xef,0xb3,0xb2,0x02,0x9a,0xeb,0xa0,0xbb,0x2b,0x46,0xa2,0xb1,0x8c,0x94,0xa1,0x41,0x7a,0x33,0xcb,0xeb,0x41,0xca,0x7e,0xa9,0xc7,0x3a,0x67,0x7f,0xcc,0xd2,0xeb,0x54,0x70,0xc3,0xc5,0x00,0xf6,0xd3,0xf1,0xa6,0xc7,0x55,0xc9,0x44,0xba,0x58,0x6f,0x88,0x92,0x1f,0x6a,0xe6,0xc9,0xd1,0x94,0xe7,0x8c,0x72,0x33,0xc4,0x06,0x12,0x66,0x33,0xe1,0x44,0xc3,0x81,0x0a,0xd2,0x3e,0xe1,0xb5,0xaf,0x4c,0x04,0xa2,0x2d,0x49,0xe9,0x9e,0x70,0x17,0xf7,0x4c,0x23,0x09,0x49,0x25,0x69,0xff,0x49,0xbe,0x17,0xd2,0x80,0x49,0x20,0xf2,0xac,0x5f,0x51,0x4d,0x13,0xfd,0x3e,0x73,0x18,0xcc,0x7c,0xf8,0x0c,0xa5,0x10,0x1a,0x46,0x54,0x28 };
    const uint8_t CIPHERTEXT[] = { 0x5b,0xef,0xb3,0x06,0x2a,0x7a,0x72,0x46,0xaf,0x1f,0x77,0xb0,0xec,0x0a,0xc6,0x14,0xe2,0x8b,0xe0,0x6a,0xc2,0xc8,0x1b,0x19,0xe5,0xa0,0x48,0x1b,0xf1,0x60,0xf9,0xf2,0xbc,0x43,0xf2,0x8f,0x65,0x48,0x78,0x76,0x39,0xe4,0xce,0x3e,0x0f,0x1e,0x95,0x47,0x5f,0x0e,0x81,0xce,0xb7,0x93,0x00,0x4c,0x8e,0x46,0x67,0x0e,0xbd,0x48,0xb8,0x66,0xd5,0xb4,0x3d,0x10,0x48,0x74,0xea,0xd4,0xbe,0x8a,0x23,0x6b,0xf9,0x0b,0x48,0xf8,0x62,0xf7,0xe2,0x52,0xde,0xc4,0x47,0x5f,0xdb,0xb8,0x41,0xa6,0x62,0xef,0xcd,0x25,0xed,0x64,0xb2,0x91,0x0e,0x9b,0xaa,0xea,0x94,0x66,0xe4,0x13,0xa4,0x24,0x14,0x38,0xb3,0x1d,0xf0,0xbd,0x3d,0xf9,0xa1,0x6f,0x46,0x41,0x63,0x67,0x54,0xe2,0x59,0x86,0x17,0x28,0xaa,0x7d,0xdf,0x43,0x5c,0xc5,0x1f,0x54,0xf7,0x9a,0x1d,0xb2,0x5f,0x52 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMMT128-ENCRYPT-9", "[ECB][MMT][128][ENCRYPT][n9]") {
    const uint8_t KEY[] = { 0xeb,0xea,0x9c,0x6a,0x82,0x21,0x3a,0x00,0xac,0x1d,0x22,0xfa,0xea,0x22,0x11,0x6f };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x45,0x1f,0x45,0x66,0x3b,0x44,0xfd,0x00,0x5f,0x3c,0x28,0x8a,0xe5,0x7b,0x38,0x38,0x83,0xf0,0x2d,0x9a,0xd3,0xdc,0x17,0x15,0xf9,0xe3,0xd6,0x94,0x85,0x64,0x25,0x7b,0x9b,0x06,0xd7,0xdd,0x51,0x93,0x5f,0xee,0x58,0x0a,0x96,0xbb,0xdf,0xef,0xb9,0x18,0xb4,0xe6,0xb1,0xda,0xac,0x80,0x98,0x47,0x46,0x55,0x78,0xcb,0x8b,0x53,0x56,0xed,0x38,0x55,0x6f,0x80,0x1f,0xf7,0xc1,0x1e,0xcb,0xa9,0xcd,0xd2,0x63,0x03,0x9c,0x15,0xd0,0x59,0x00,0xfc,0x22,0x8e,0x1c,0xaf,0x30,0x2d,0x26,0x1d,0x7f,0xb5,0x6c,0xee,0x66,0x35,0x95,0xb9,0x6f,0x19,0x2a,0x78,0xff,0x44,0x55,0x39,0x3a,0x5f,0xe8,0x16,0x21,0x70,0xa0,0x66,0xfd,0xae,0xac,0x35,0x01,0x94,0x69,0xf2,0x2b,0x34,0x70,0x68,0x6b,0xce,0xd2,0xf0,0x07,0xa1,0xa2,0xe4,0x3e,0x01,0xb4,0x56,0x2c,0xaa,0xa5,0x02,0xed,0x54,0x1b,0x82,0x05,0x87,0x4e,0xc1,0xff,0xb1,0xc8,0xb2,0x55,0x76,0x69,0x42 };
    const uint8_t CIPHERTEXT[] = { 0x01,0x04,0x30,0x53,0xf8,0x32,0xef,0x9b,0x91,0x1e,0xd3,0x87,0xba,0x57,0x74,0x51,0xe3,0x0d,0x51,0xd4,0xb6,0xb1,0x1f,0x31,0x9d,0x4c,0xd5,0x39,0xd0,0x67,0xb7,0xf4,0xf9,0xb4,0xf4,0x1f,0x7f,0x3d,0x4e,0x92,0x0c,0x57,0xcb,0xe2,0xb5,0xe1,0x88,0x5a,0xa6,0x62,0x03,0xae,0x49,0x3e,0x93,0xa1,0xdf,0x63,0x79,0x3a,0x95,0x63,0xc1,0x76,0xbc,0x67,0x75,0xdd,0x09,0xcc,0x91,0x61,0xe2,0x78,0xa0,0x1b,0xeb,0x8f,0xd8,0xa1,0x92,0x00,0x32,0x6b,0xd9,0x5a,0xbc,0x5f,0x71,0x67,0x68,0xe3,0x4f,0x90,0xb5,0x05,0x23,0xd3,0x0f,0xda,0xbb,0x10,0x3a,0x3b,0xc0,0x20,0xaf,0xbb,0xb0,0xcb,0x3b,0xd2,0xad,0x51,0x2a,0x6f,0xea,0x79,0xf8,0xd6,0x4c,0xef,0x34,0x74,0x58,0xde,0xc4,0x8b,0xe8,0x94,0x51,0xcb,0x0b,0x80,0x7d,0x73,0x59,0x3f,0x27,0x3d,0x9f,0xc5,0x21,0xb7,0x89,0xa7,0x75,0x24,0x40,0x4f,0x43,0xe0,0x0f,0x20,0xb3,0xb7,0x7b,0x93,0x8b,0x1a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMMT128-DECRYPT-0", "[ECB][MMT][128][DECRYPT][n0]") {
    const uint8_t KEY[] = { 0x54,0xb7,0x60,0xdd,0x29,0x68,0xf0,0x79,0xac,0x1d,0x5d,0xd2,0x06,0x26,0x44,0x5d };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x46,0xf2,0xc9,0x89,0x32,0x34,0x9c,0x33,0x8e,0x9d,0x67,0xf7,0x44,0xa1,0xc9,0x88 };
    const uint8_t CIPHERTEXT[] = { 0x06,0x5b,0xd5,0xa9,0x54,0x0d,0x22,0xd5,0xd7,0xb0,0xf7,0x5d,0x66,0xcb,0x8b,0x30 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMMT128-DECRYPT-1", "[ECB][MMT][128][DECRYPT][n1]") {
    const uint8_t KEY[] = { 0xbc,0xe4,0xc4,0x86,0xcc,0x4a,0x12,0x62,0x2b,0x91,0x47,0xdf,0x9b,0xca,0x45,0x2c };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x8c,0x8e,0x6e,0xd8,0xa6,0xbd,0xb3,0xba,0xab,0xec,0x78,0x18,0x9b,0x7d,0x61,0x01,0x0d,0x6d,0x16,0x8d,0xe2,0xc0,0x8e,0xc5,0x6f,0x9b,0x9c,0x00,0x4a,0x19,0x1e,0x21 };
    const uint8_t CIPHERTEXT[] = { 0x76,0xfa,0x67,0xe1,0x21,0x89,0x4d,0xbc,0x2a,0xd8,0x5a,0xe7,0xf9,0xc5,0xc4,0x4d,0x14,0xcc,0xee,0x5b,0x87,0xd5,0xe7,0x70,0x89,0x50,0x33,0x8f,0x5c,0x84,0xcf,0x58 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMMT128-DECRYPT-2", "[ECB][MMT][128][DECRYPT][n2]") {
    const uint8_t KEY[] = { 0x27,0x91,0x61,0x75,0x9d,0x29,0xe9,0x2d,0xc8,0xf1,0xfa,0xfd,0x8d,0x45,0x53,0x3d };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x88,0x38,0x05,0x8b,0xd9,0x80,0x72,0xb7,0x2f,0xd7,0x56,0x41,0xed,0xb2,0x16,0x30,0x1f,0xee,0x83,0x23,0xff,0x8c,0x4b,0xa1,0x8e,0xe6,0xa4,0x62,0x3c,0x2f,0xde,0xb3,0xdf,0x5f,0x8a,0x24,0x0a,0x8e,0x7e,0x6d,0x5a,0xe1,0x54,0x44,0x61,0x4f,0x41,0xfb };
    const uint8_t CIPHERTEXT[] = { 0x1c,0xe6,0x9a,0xb7,0x62,0x4f,0xed,0x51,0x1f,0xb4,0x2b,0x8f,0xb6,0x39,0xf5,0x66,0xd7,0x27,0x83,0xf9,0xab,0x49,0x80,0x16,0x51,0x96,0x1b,0x04,0x8e,0x0f,0x5b,0x7c,0xc0,0xeb,0xb2,0xf5,0x14,0xf2,0xd6,0x25,0xf9,0x27,0xcc,0xc4,0xd5,0xa9,0x45,0x93 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMMT128-DECRYPT-3", "[ECB][MMT][128][DECRYPT][n3]") {
    const uint8_t KEY[] = { 0x9b,0xa8,0x52,0x52,0x0c,0x9f,0xd1,0xeb,0x36,0x7b,0x6a,0xd2,0xae,0xd0,0x7a,0xbd };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x60,0x61,0xdf,0x5b,0xcd,0x42,0x1f,0xab,0xdb,0x52,0x35,0xfc,0x03,0x25,0x02,0x65,0x04,0x48,0xfd,0x82,0x33,0xa0,0x23,0x7c,0x5f,0x6f,0x24,0x9a,0x63,0xd7,0xdb,0x3e,0x42,0x83,0xac,0x9a,0x86,0x84,0xa3,0x63,0xef,0x64,0xe7,0x60,0xc5,0x88,0x65,0x64,0x65,0x9d,0xa6,0x19,0x46,0x68,0x51,0x56,0x8b,0x32,0x09,0x1d,0xf5,0x51,0x6f,0x57 };
    const uint8_t CIPHERTEXT[] = { 0x6c,0x53,0x48,0x9f,0x6a,0x4b,0xd0,0xf7,0xcd,0x15,0xd2,0x0f,0x6e,0xbc,0x7e,0x64,0x9f,0xd9,0x5b,0x76,0xb1,0x07,0xe6,0xda,0xba,0x96,0x7c,0x8a,0x94,0x84,0x79,0x7f,0x29,0xa8,0xa2,0x82,0xee,0x31,0xc0,0x3f,0xae,0x4f,0x8e,0x9b,0x89,0x30,0xd5,0x47,0x3c,0x2e,0xd6,0x95,0xa3,0x47,0xe8,0x8b,0x7c,0xcd,0x62,0x37,0x6d,0x5e,0xbb,0x41 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMMT128-DECRYPT-4", "[ECB][MMT][128][DECRYPT][n4]") {
    const uint8_t KEY[] = { 0xcd,0x6a,0x33,0xab,0xb9,0x5d,0x7a,0xb9,0x29,0x80,0xf9,0xc2,0xb8,0x10,0xc9,0x0f };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x3f,0x09,0x8a,0xe7,0xe7,0x52,0x4d,0xdb,0x55,0x64,0x03,0xc5,0xd3,0xd0,0xb1,0x0e,0x5d,0xb6,0xc3,0x24,0x84,0x3c,0xa5,0x4a,0x47,0xe3,0x4a,0xd9,0xbd,0xbc,0xcc,0x93,0xa6,0x45,0xe9,0x6f,0x2e,0x98,0x65,0x17,0x51,0xf0,0xf1,0xa6,0x97,0x39,0x8e,0xa8,0x01,0xa6,0x90,0x79,0xc1,0x80,0x8b,0x6a,0x8e,0x3b,0xb0,0x2a,0x4c,0xf3,0x29,0x2f,0x1a,0x7a,0x05,0xb9,0x54,0x57,0x13,0x39,0xf7,0x89,0x9f,0x9a,0xaa,0x2a,0xe1,0xe9 };
    const uint8_t CIPHERTEXT[] = { 0x33,0xcb,0x1a,0x98,0xce,0x4b,0xe9,0x7f,0x5b,0x22,0x2a,0xa8,0x61,0xc9,0x45,0x64,0x3f,0x37,0x26,0x87,0xcb,0xf7,0xf8,0x19,0x3a,0x7d,0x30,0x4e,0x40,0xba,0xce,0xb8,0x77,0xee,0xdf,0xbc,0x05,0xbe,0x47,0x43,0x7a,0x86,0xbd,0xb1,0xf7,0xf0,0x17,0x1b,0x95,0xc6,0xc8,0xb5,0x04,0x04,0xa7,0x89,0x73,0x32,0xf2,0x6f,0xb0,0xf0,0x92,0x39,0x91,0xd3,0xa0,0x2e,0x92,0x6f,0x29,0xba,0xbf,0xb5,0x2e,0x63,0xd5,0x80,0xef,0xff };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMMT128-DECRYPT-5", "[ECB][MMT][128][DECRYPT][n5]") {
    const uint8_t KEY[] = { 0xff,0x71,0xb9,0xf6,0x31,0x1a,0x44,0x07,0x2d,0xdb,0x1a,0x77,0x48,0x8c,0x48,0x70 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x3d,0xfe,0x91,0x80,0x48,0xf4,0xc0,0xb0,0xb2,0x2f,0xbc,0x55,0xe5,0xaf,0x75,0x1c,0xf3,0xe6,0xce,0x34,0x8e,0xb9,0xa8,0x88,0x79,0x50,0x33,0xf6,0xdd,0x21,0x6a,0xfb,0xea,0x65,0xfc,0x8d,0xf4,0x1c,0x0c,0xe6,0xc7,0x31,0x6a,0x81,0x83,0xd3,0x60,0x60,0xbf,0x19,0x70,0x9f,0xe2,0xbe,0xc6,0xd1,0x3b,0xbd,0xf1,0xa4,0x34,0xcc,0x5b,0x8f,0x10,0xaa,0xdb,0x36,0x8c,0x26,0x9d,0x2d,0xc4,0x47,0x4a,0x1f,0x81,0x12,0x64,0x0f,0xe5,0x28,0x03,0xb1,0x88,0x3c,0xb7,0x75,0x67,0x43,0x10,0x0a,0x75,0x8d,0xd8,0x62 };
    const uint8_t CIPHERTEXT[] = { 0x19,0xd7,0x6b,0x38,0x6a,0x77,0x15,0xde,0xc7,0xaa,0xd8,0xbb,0x01,0xd1,0x26,0xc7,0x38,0x5a,0x43,0x87,0xf0,0x87,0xfa,0xec,0x67,0x71,0x8f,0x78,0x27,0x4c,0xf4,0xa2,0xd7,0xec,0x3f,0x7c,0x56,0x88,0x5c,0x93,0x0b,0xbf,0xff,0x16,0x76,0xd8,0xdd,0x3b,0x0b,0x4e,0x1c,0xdf,0x41,0x8c,0x08,0x6d,0xe6,0xf5,0x07,0x00,0xb5,0x27,0xcf,0xcc,0x2a,0x81,0xd6,0xba,0x95,0xe3,0x0a,0x52,0x6e,0xb4,0xc3,0xde,0xe8,0x2a,0xf6,0xcc,0xc8,0xc5,0xab,0x55,0x78,0x1d,0xb1,0x5c,0x57,0xde,0x90,0x99,0x54,0x11,0xbf,0xf6 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMMT128-DECRYPT-6", "[ECB][MMT][128][DECRYPT][n6]") {
    const uint8_t KEY[] = { 0x8e,0xc6,0xa5,0xa0,0x54,0xfe,0xa2,0xfc,0x8d,0xaf,0xb5,0x93,0x9a,0x4b,0xd7,0x88 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x6e,0x19,0xce,0xc7,0x75,0x59,0x5c,0x2f,0x76,0x8d,0xe3,0xbd,0xa3,0x68,0x2f,0xb4,0x02,0x6e,0xd1,0x88,0x9f,0xc3,0xde,0x11,0xbc,0x45,0xa2,0xa3,0xe2,0xb2,0x26,0x94,0xdd,0xaa,0xb3,0x27,0x4c,0x81,0xb2,0x92,0x04,0xfa,0x03,0x4e,0xed,0xac,0x56,0x4a,0x7d,0xfe,0x27,0xaa,0xbb,0x6f,0xf4,0x20,0xf9,0xaa,0x5a,0xba,0xdf,0x15,0xc7,0x46,0x76,0xef,0xea,0xbd,0x96,0xa7,0xff,0x24,0x91,0x81,0x3b,0xa5,0x3c,0xb5,0xab,0x76,0xea,0xcd,0x37,0x25,0x5a,0x28,0xda,0xec,0xbb,0xe5,0x80,0xf5,0xeb,0x77,0xf9,0xbc,0x03,0x39,0xe0,0xda,0x59,0xb2,0xb3,0x07,0xf5,0x29,0x74,0xb6,0x18,0x2c,0xb1,0x06 };
    const uint8_t CIPHERTEXT[] = { 0x4d,0x6f,0x97,0x29,0x46,0xa2,0xe4,0xca,0x05,0xbf,0xbe,0xec,0xd0,0x05,0x35,0xec,0xe6,0xc8,0x1e,0xd9,0x63,0xc4,0x16,0x70,0x63,0xb1,0xc3,0x4b,0x6a,0x18,0x5d,0x55,0x04,0x64,0x6d,0x81,0xa8,0x3c,0xd5,0xbc,0xe2,0x10,0x11,0x20,0xb2,0xf2,0xbc,0x6a,0x2f,0xa8,0x56,0xae,0x6f,0xff,0x44,0x49,0xab,0x62,0x18,0x18,0x9f,0xaa,0x13,0xe7,0x30,0x38,0xe8,0x2c,0x51,0x41,0xc3,0xf6,0x27,0x6a,0x8a,0x20,0x6b,0x95,0x63,0xca,0x11,0xfa,0x76,0x09,0x27,0x79,0xf4,0xde,0xff,0x2e,0x58,0x65,0x90,0x47,0xed,0x4f,0x1a,0x12,0x90,0x92,0x09,0x5a,0xb7,0x5f,0x1c,0xf4,0xb2,0x55,0xc6,0x95,0x31,0xf4 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMMT128-DECRYPT-7", "[ECB][MMT][128][DECRYPT][n7]") {
    const uint8_t KEY[] = { 0xb5,0x3e,0x54,0xb1,0xb0,0x9f,0x78,0xab,0xcd,0x6a,0xfa,0xc1,0xf7,0xe7,0xcd,0xa9 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x39,0x8d,0xb0,0x4b,0x45,0xa7,0x24,0x39,0x3e,0x4b,0xae,0xc8,0x6a,0x22,0x0f,0x22,0x35,0x8d,0xf1,0xbb,0xf0,0xca,0xb2,0x78,0xdc,0xfe,0xcf,0x7a,0x3f,0x8f,0x62,0x75,0xef,0x45,0xed,0x9f,0x03,0x9b,0xc1,0xf5,0x03,0x0c,0x3a,0x0c,0x24,0x5f,0xbb,0x6e,0xa0,0xbf,0xf3,0xe2,0xda,0x08,0x59,0xac,0x49,0x8d,0xb6,0x62,0x4a,0x57,0x20,0x23,0xde,0x7c,0x22,0x1b,0xf3,0x56,0x7f,0x51,0xe9,0x89,0x47,0x97,0x0d,0xfc,0x58,0x1b,0x3c,0xa6,0x70,0xab,0x92,0x95,0x3d,0x3b,0xdd,0x97,0xdb,0xf5,0xd6,0xbe,0xf8,0xaa,0x2f,0x31,0x50,0x0d,0x22,0x11,0x98,0xed,0x9f,0x23,0xb0,0x49,0xea,0xee,0xd6,0x76,0x83,0x08,0x30,0x34,0xb4,0xa5,0xa8,0x2a,0x0e,0x49,0x31,0x9e,0x36,0x8c,0x6f,0x55 };
    const uint8_t CIPHERTEXT[] = { 0x44,0x75,0x57,0xbd,0x15,0x61,0xb0,0x9a,0x08,0x2c,0xab,0xdb,0xf4,0x9b,0x06,0x12,0xb4,0x6c,0x97,0x93,0xdb,0x3c,0x98,0x7a,0xa4,0xa8,0x43,0xef,0x28,0xb3,0x9f,0xa8,0xd4,0x67,0x99,0xb0,0x19,0xc0,0x56,0x67,0x65,0xc5,0xc8,0xcb,0x53,0xf8,0x7f,0xf5,0x1f,0xf0,0xc2,0xe6,0x5c,0x45,0xdf,0x84,0xe9,0xac,0xbf,0xe0,0x21,0x63,0xbd,0xba,0x52,0xd0,0xb8,0x47,0x70,0x65,0x67,0x32,0x0b,0xc6,0xed,0xe0,0x7f,0x2e,0xae,0xf8,0x6b,0x0f,0x60,0x23,0x64,0xf8,0x65,0x10,0xea,0xbc,0x58,0xbc,0x9a,0xd1,0xe6,0xf0,0xa6,0xf6,0xdf,0x0b,0x83,0x18,0x8c,0x01,0xe1,0x77,0x44,0xa4,0xe0,0x05,0x3a,0x22,0x81,0x0e,0x99,0xcf,0x5a,0x1e,0xd3,0x25,0x8f,0x20,0x35,0x09,0xfd,0xc3,0xc0,0x50 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMMT128-DECRYPT-8", "[ECB][MMT][128][DECRYPT][n8]") {
    const uint8_t KEY[] = { 0x9e,0x79,0xb6,0x81,0xc5,0x7d,0x7f,0xeb,0x7d,0xb7,0xe8,0xa6,0xad,0x41,0x38,0x2c };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xa2,0xe1,0x9c,0x08,0xfa,0x20,0x46,0x40,0xb1,0xbc,0x73,0xbe,0xac,0x58,0xf8,0x1a,0x79,0x23,0xf3,0xef,0x2a,0x0a,0xff,0xcf,0x15,0x68,0xc9,0x17,0x9d,0x81,0x6c,0xf1,0xbd,0x16,0xb7,0x94,0x18,0xf0,0x26,0x6f,0x0f,0xf9,0x04,0xe0,0x60,0x45,0xf2,0x76,0xdf,0x18,0x7e,0xd7,0x2b,0x8f,0x66,0x41,0xb0,0x65,0xb8,0x54,0xa7,0xd3,0xf1,0x52,0xb8,0xe1,0x53,0xcd,0x77,0xec,0x60,0x5e,0x5b,0x75,0x45,0x42,0x45,0x74,0x5d,0xc0,0xe0,0xdc,0xfc,0x61,0x6f,0x52,0x46,0xf8,0x68,0xb6,0xee,0x5a,0x1d,0xf5,0x6c,0x49,0x06,0xc5,0xc3,0x4b,0xc4,0x23,0x09,0xd3,0x70,0x73,0x3e,0x50,0xd9,0xa1,0xad,0xdc,0x3f,0x37,0xcb,0xe4,0xb3,0x31,0xac,0x7d,0x3a,0x92,0x0c,0x79,0x44,0x84,0xa1,0x6b,0x05,0x59,0x9f,0x46,0xf4,0x20,0x46,0xa6,0xdc,0x90,0x63,0xb1,0xd5,0xa8,0xae,0x1f };
    const uint8_t CIPHERTEXT[] = { 0xfa,0x2e,0x97,0xbe,0xd2,0xf0,0xb7,0x6e,0xd2,0xf8,0xc1,0x27,0x5f,0x6d,0x50,0xec,0xfc,0x11,0x31,0x24,0x06,0x22,0xba,0x9d,0xa1,0x7e,0x5d,0xd0,0xf2,0x0a,0x7d,0x67,0x8f,0x53,0x7f,0xfc,0x33,0x76,0x25,0x24,0xb7,0x3e,0x17,0xac,0x3d,0x8d,0xc3,0x22,0xaf,0xfd,0x67,0x97,0x68,0xc6,0x6c,0xa4,0x30,0xe3,0xf6,0xab,0x6e,0x70,0xb9,0x5f,0x99,0x57,0x0e,0x87,0xf0,0x2b,0x46,0xff,0x6b,0x54,0x3e,0xff,0xf1,0x6d,0x33,0x9f,0xcb,0xea,0xd8,0x9b,0x59,0xfe,0xa6,0x54,0x03,0xbc,0x74,0x18,0x73,0x7c,0x47,0xa3,0x01,0x80,0x6b,0xe6,0x6f,0xd7,0xc3,0x07,0xd7,0x82,0x5d,0xa8,0xe1,0xd6,0x49,0x6c,0x39,0x21,0xac,0xb7,0x41,0x90,0x10,0xb6,0x03,0x50,0xfe,0xa0,0x69,0xf4,0xcf,0x3b,0xb0,0x17,0xbf,0xa1,0x1a,0x42,0x43,0x44,0xe3,0x10,0x9d,0x30,0x77,0x8f,0xad,0x90 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMMT128-DECRYPT-9", "[ECB][MMT][128][DECRYPT][n9]") {
    const uint8_t KEY[] = { 0x44,0xf0,0xee,0x62,0x6d,0x04,0x46,0xe0,0xa3,0x92,0x4c,0xfb,0x07,0x89,0x44,0xbb };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x9c,0x29,0xee,0xcb,0x2d,0xe0,0x42,0x54,0xfa,0xfb,0x89,0x6a,0x99,0x41,0x02,0xd1,0xda,0x30,0xdd,0xb4,0x9d,0x82,0x72,0x8e,0xb2,0x3d,0xbd,0x02,0x99,0x01,0xe9,0xb7,0x5b,0x3d,0x0a,0xee,0x03,0xf7,0xa0,0x5f,0x6c,0x85,0x2d,0x8f,0xad,0xa0,0xb5,0xc2,0x8e,0x8c,0x9a,0xed,0x33,0x4f,0xad,0x11,0x82,0x9d,0xf3,0xdf,0xad,0xc5,0xc2,0xe4,0x71,0xeb,0x41,0xaf,0x9e,0x48,0xa8,0xa4,0x65,0xe0,0x3d,0x5e,0xbd,0xb0,0x21,0x69,0x15,0x08,0x1f,0x3b,0x5a,0x0e,0xbb,0x23,0x08,0xdf,0xc2,0xd2,0x8e,0x5a,0x8b,0xa3,0xf3,0x2a,0xda,0xe4,0xc3,0x57,0x59,0x21,0xbc,0x65,0x7b,0x63,0xd4,0x6b,0xa5,0xa6,0x18,0x88,0x0e,0xe9,0xad,0x8a,0xf3,0xfb,0xa5,0x64,0x3a,0x50,0x26,0xfa,0xcd,0x7d,0x66,0x7c,0xe5,0x99,0x32,0x7f,0x93,0x6c,0xdd,0xa7,0xe1,0xbb,0x74,0x2a,0x33,0xa0,0x19,0x99,0x0b,0x76,0xbe,0x64,0x8a,0x6e,0xc7,0x25,0xda,0xed,0x54,0x0e,0xd9,0xe7 };
    const uint8_t CIPHERTEXT[] = { 0x93,0x1b,0x2f,0x5f,0x3a,0x58,0x20,0xd5,0x3a,0x6b,0xea,0xaa,0x64,0x31,0x08,0x3a,0x34,0x88,0xf4,0xeb,0x03,0xb0,0xf5,0xb5,0x7e,0xf8,0x38,0xe1,0x57,0x96,0x23,0x10,0x3b,0xd6,0xe6,0x80,0x03,0x77,0x53,0x8b,0x2e,0x51,0xef,0x70,0x8f,0x3c,0x49,0x56,0x43,0x2e,0x8a,0x8e,0xe6,0xa3,0x4e,0x19,0x06,0x42,0xb2,0x6a,0xd8,0xbd,0xae,0x6c,0x2a,0xf9,0xa6,0xc7,0x99,0x6f,0x3b,0x60,0x04,0xd2,0x67,0x1e,0x41,0xf1,0xc9,0xf4,0x0e,0xe0,0x3d,0x1c,0x4a,0x52,0xb0,0xa0,0x65,0x4a,0x33,0x1f,0x15,0xf3,0x4d,0xce,0x4a,0xcb,0x96,0xbd,0x65,0x07,0x81,0x5c,0xa4,0x34,0x7a,0x3d,0xe1,0x1a,0x31,0x1b,0x7d,0xe5,0x35,0x1c,0x97,0x87,0xc4,0x53,0x81,0x58,0xe2,0x89,0x74,0xff,0xa8,0x3d,0x82,0x96,0xdf,0xe9,0xcd,0x09,0xcd,0x87,0xf7,0xbf,0x4f,0x54,0xd9,0x7d,0x28,0xd4,0x78,0x87,0x99,0x16,0x34,0x08,0x32,0x39,0x43,0xb3,0xe7,0x2f,0x5e,0xab,0x66,0xc1 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

