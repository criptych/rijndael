#include "rijndael.h"
#include "catch.hpp"
#include <cstring>

static inline std::string buf2str(const uint8_t *buf, size_t len) {
    std::ostringstream ss; ss << std::hex << std::setfill('0');
    for (size_t i = 0; i < len; ++i) {
        ss << std::setw(2) << static_cast<int>(buf[i]) << ' ';
    }
    return ss.str();
}

TEST_CASE("CFB128MCT128-ENCRYPT-0", "[CFB128][MCT][128][ENCRYPT][n0]") {
    const uint8_t KEY[] = { 0x3d,0x20,0x13,0xd1,0x83,0x97,0x0f,0x00,0xd3,0x55,0x12,0x81,0xf2,0x54,0x3f,0xbd };
    const uint8_t IV[] = { 0x95,0x3e,0xb9,0x92,0x1a,0x7a,0xe4,0xb9,0xec,0x6d,0x11,0x5e,0xb7,0x20,0xf7,0xf0 };
    const uint8_t PLAINTEXT[] = { 0x25,0x90,0xad,0x2e,0x54,0x55,0xa6,0xa5,0xfe,0x61,0xa0,0x9e,0xa4,0x03,0x3c,0x81 };
    const uint8_t CIPHERTEXT[] = { 0x72,0xbe,0xed,0x95,0xea,0x22,0x39,0xd3,0xd0,0x87,0xcb,0xa7,0x51,0xe3,0x76,0x9e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-1", "[CFB128][MCT][128][ENCRYPT][n1]") {
    const uint8_t KEY[] = { 0x4f,0x9e,0xfe,0x44,0x69,0xb5,0x36,0xd3,0x03,0xd2,0xd9,0x26,0xa3,0xb7,0x49,0x23 };
    const uint8_t IV[] = { 0x72,0xbe,0xed,0x95,0xea,0x22,0x39,0xd3,0xd0,0x87,0xcb,0xa7,0x51,0xe3,0x76,0x9e };
    const uint8_t PLAINTEXT[] = { 0x2a,0xa3,0xc0,0x05,0xc1,0x71,0x4d,0x17,0xf2,0x39,0x77,0x69,0x77,0x38,0x9a,0xbd };
    const uint8_t CIPHERTEXT[] = { 0xca,0xd6,0x83,0x9f,0x9d,0x84,0x21,0x37,0x39,0xee,0x6a,0x2e,0xe9,0x75,0x28,0x15 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-2", "[CFB128][MCT][128][ENCRYPT][n2]") {
    const uint8_t KEY[] = { 0x85,0x48,0x7d,0xdb,0xf4,0x31,0x17,0xe4,0x3a,0x3c,0xb3,0x08,0x4a,0xc2,0x61,0x36 };
    const uint8_t IV[] = { 0xca,0xd6,0x83,0x9f,0x9d,0x84,0x21,0x37,0x39,0xee,0x6a,0x2e,0xe9,0x75,0x28,0x15 };
    const uint8_t PLAINTEXT[] = { 0x6f,0xf2,0x47,0xd4,0x80,0x9d,0x5c,0x2e,0x41,0x84,0x67,0xd0,0xe5,0x71,0x5f,0x21 };
    const uint8_t CIPHERTEXT[] = { 0xa9,0xff,0xe6,0xb9,0xfc,0x45,0x97,0x18,0xd4,0x5b,0x7d,0xd4,0xad,0x53,0x8e,0xca };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-3", "[CFB128][MCT][128][ENCRYPT][n3]") {
    const uint8_t KEY[] = { 0x2c,0xb7,0x9b,0x62,0x08,0x74,0x80,0xfc,0xee,0x67,0xce,0xdc,0xe7,0x91,0xef,0xfc };
    const uint8_t IV[] = { 0xa9,0xff,0xe6,0xb9,0xfc,0x45,0x97,0x18,0xd4,0x5b,0x7d,0xd4,0xad,0x53,0x8e,0xca };
    const uint8_t PLAINTEXT[] = { 0x81,0x9f,0x2a,0x63,0x69,0xb3,0x3f,0x74,0x60,0x8f,0x7a,0x3c,0x8e,0x1d,0x68,0x87 };
    const uint8_t CIPHERTEXT[] = { 0x9f,0x57,0x01,0xc1,0xd9,0x8c,0xf8,0xe2,0x84,0xe0,0x30,0x21,0xaa,0xeb,0xa9,0x26 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-4", "[CFB128][MCT][128][ENCRYPT][n4]") {
    const uint8_t KEY[] = { 0xb3,0xe0,0x9a,0xa3,0xd1,0xf8,0x78,0x1e,0x6a,0x87,0xfe,0xfd,0x4d,0x7a,0x46,0xda };
    const uint8_t IV[] = { 0x9f,0x57,0x01,0xc1,0xd9,0x8c,0xf8,0xe2,0x84,0xe0,0x30,0x21,0xaa,0xeb,0xa9,0x26 };
    const uint8_t PLAINTEXT[] = { 0x47,0x01,0x7d,0x85,0x5c,0x1e,0xc8,0x0d,0x6d,0x2c,0x87,0xb5,0x74,0xf7,0x62,0xc1 };
    const uint8_t CIPHERTEXT[] = { 0x32,0x4c,0xad,0xdc,0x35,0x88,0xaf,0xdc,0x72,0x47,0xc5,0xce,0x87,0xda,0x4f,0x04 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-5", "[CFB128][MCT][128][ENCRYPT][n5]") {
    const uint8_t KEY[] = { 0x81,0xac,0x37,0x7f,0xe4,0x70,0xd7,0xc2,0x18,0xc0,0x3b,0x33,0xca,0xa0,0x09,0xde };
    const uint8_t IV[] = { 0x32,0x4c,0xad,0xdc,0x35,0x88,0xaf,0xdc,0x72,0x47,0xc5,0xce,0x87,0xda,0x4f,0x04 };
    const uint8_t PLAINTEXT[] = { 0xdf,0xc9,0xcf,0x02,0x66,0xdc,0x98,0x96,0x8a,0xa3,0xb9,0x71,0x07,0xfa,0xa6,0x2f };
    const uint8_t CIPHERTEXT[] = { 0xa6,0xea,0xb3,0x02,0x5b,0xc1,0x2b,0x26,0x9e,0x42,0xf3,0x6b,0xcb,0x15,0x5c,0xfe };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-6", "[CFB128][MCT][128][ENCRYPT][n6]") {
    const uint8_t KEY[] = { 0x27,0x46,0x84,0x7d,0xbf,0xb1,0xfc,0xe4,0x86,0x82,0xc8,0x58,0x01,0xb5,0x55,0x20 };
    const uint8_t IV[] = { 0xa6,0xea,0xb3,0x02,0x5b,0xc1,0x2b,0x26,0x9e,0x42,0xf3,0x6b,0xcb,0x15,0x5c,0xfe };
    const uint8_t PLAINTEXT[] = { 0x02,0x6d,0xc0,0x21,0xed,0x80,0xcf,0x76,0x85,0x2d,0xd8,0x9f,0xc3,0x86,0x53,0x06 };
    const uint8_t CIPHERTEXT[] = { 0x45,0x90,0xea,0x41,0xcc,0x30,0x72,0x83,0x68,0xb3,0xd3,0xf5,0xd5,0xd6,0x31,0x17 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-7", "[CFB128][MCT][128][ENCRYPT][n7]") {
    const uint8_t KEY[] = { 0x62,0xd6,0x6e,0x3c,0x73,0x81,0x8e,0x67,0xee,0x31,0x1b,0xad,0xd4,0x63,0x64,0x37 };
    const uint8_t IV[] = { 0x45,0x90,0xea,0x41,0xcc,0x30,0x72,0x83,0x68,0xb3,0xd3,0xf5,0xd5,0xd6,0x31,0x17 };
    const uint8_t PLAINTEXT[] = { 0x30,0x68,0xaa,0xd9,0x84,0x5b,0xad,0xbc,0xa3,0xaa,0x4c,0xca,0x4c,0xb4,0x21,0xa1 };
    const uint8_t CIPHERTEXT[] = { 0x4d,0x61,0xb1,0xc2,0x18,0x06,0x21,0xe6,0x44,0x86,0xe4,0xc3,0xa3,0xda,0x38,0xf7 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-8", "[CFB128][MCT][128][ENCRYPT][n8]") {
    const uint8_t KEY[] = { 0x2f,0xb7,0xdf,0xfe,0x6b,0x87,0xaf,0x81,0xaa,0xb7,0xff,0x6e,0x77,0xb9,0x5c,0xc0 };
    const uint8_t IV[] = { 0x4d,0x61,0xb1,0xc2,0x18,0x06,0x21,0xe6,0x44,0x86,0xe4,0xc3,0xa3,0xda,0x38,0xf7 };
    const uint8_t PLAINTEXT[] = { 0x32,0x71,0x00,0x1f,0x61,0x9f,0x25,0xe7,0x5f,0xa4,0x65,0x6e,0x0a,0xc5,0xc6,0x13 };
    const uint8_t CIPHERTEXT[] = { 0xfa,0xe8,0xee,0x9a,0xe7,0x06,0xee,0x92,0xb4,0x78,0xf2,0x82,0xcd,0x96,0x63,0x20 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-9", "[CFB128][MCT][128][ENCRYPT][n9]") {
    const uint8_t KEY[] = { 0xd5,0x5f,0x31,0x64,0x8c,0x81,0x41,0x13,0x1e,0xcf,0x0d,0xec,0xba,0x2f,0x3f,0xe0 };
    const uint8_t IV[] = { 0xfa,0xe8,0xee,0x9a,0xe7,0x06,0xee,0x92,0xb4,0x78,0xf2,0x82,0xcd,0x96,0x63,0x20 };
    const uint8_t PLAINTEXT[] = { 0x51,0x7e,0x6b,0x98,0x2e,0x5a,0x4d,0x10,0x21,0x9b,0xd5,0xbf,0x6c,0x41,0xb4,0xf2 };
    const uint8_t CIPHERTEXT[] = { 0xe7,0x16,0xa4,0x05,0x99,0x9f,0xdb,0xd8,0x0c,0x03,0xc7,0x32,0x9f,0xf7,0x2d,0x38 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-10", "[CFB128][MCT][128][ENCRYPT][n10]") {
    const uint8_t KEY[] = { 0x32,0x49,0x95,0x61,0x15,0x1e,0x9a,0xcb,0x12,0xcc,0xca,0xde,0x25,0xd8,0x12,0xd8 };
    const uint8_t IV[] = { 0xe7,0x16,0xa4,0x05,0x99,0x9f,0xdb,0xd8,0x0c,0x03,0xc7,0x32,0x9f,0xf7,0x2d,0x38 };
    const uint8_t PLAINTEXT[] = { 0x2c,0x38,0x13,0xe8,0x22,0xbb,0x08,0x0b,0xec,0x82,0x9a,0xb4,0x2d,0xe2,0xe8,0x21 };
    const uint8_t CIPHERTEXT[] = { 0xfc,0x2c,0xce,0xfc,0x02,0x65,0x3b,0xef,0x50,0xf3,0x0d,0x38,0xdf,0x9c,0xcc,0x17 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-11", "[CFB128][MCT][128][ENCRYPT][n11]") {
    const uint8_t KEY[] = { 0xce,0x65,0x5b,0x9d,0x17,0x7b,0xa1,0x24,0x42,0x3f,0xc7,0xe6,0xfa,0x44,0xde,0xcf };
    const uint8_t IV[] = { 0xfc,0x2c,0xce,0xfc,0x02,0x65,0x3b,0xef,0x50,0xf3,0x0d,0x38,0xdf,0x9c,0xcc,0x17 };
    const uint8_t PLAINTEXT[] = { 0xbd,0xa0,0x21,0xc9,0x02,0x65,0xb4,0xfb,0x3c,0x81,0xfb,0x35,0xda,0x03,0xf5,0x71 };
    const uint8_t CIPHERTEXT[] = { 0x2f,0x0d,0x0c,0xc9,0x00,0x9e,0x40,0xa1,0xda,0x14,0xc2,0x24,0x14,0xa4,0xc6,0x0a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-12", "[CFB128][MCT][128][ENCRYPT][n12]") {
    const uint8_t KEY[] = { 0xe1,0x68,0x57,0x54,0x17,0xe5,0xe1,0x85,0x98,0x2b,0x05,0xc2,0xee,0xe0,0x18,0xc5 };
    const uint8_t IV[] = { 0x2f,0x0d,0x0c,0xc9,0x00,0x9e,0x40,0xa1,0xda,0x14,0xc2,0x24,0x14,0xa4,0xc6,0x0a };
    const uint8_t PLAINTEXT[] = { 0xa8,0x2b,0xdf,0x2c,0x7f,0x6f,0x12,0x4c,0xe5,0x82,0xde,0xdd,0x90,0x86,0x04,0x9d };
    const uint8_t CIPHERTEXT[] = { 0x63,0x29,0x3a,0x98,0x8a,0x02,0x04,0x22,0xe0,0x09,0x2a,0x2e,0x09,0x96,0xa5,0x0b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-13", "[CFB128][MCT][128][ENCRYPT][n13]") {
    const uint8_t KEY[] = { 0x82,0x41,0x6d,0xcc,0x9d,0xe7,0xe5,0xa7,0x78,0x22,0x2f,0xec,0xe7,0x76,0xbd,0xce };
    const uint8_t IV[] = { 0x63,0x29,0x3a,0x98,0x8a,0x02,0x04,0x22,0xe0,0x09,0x2a,0x2e,0x09,0x96,0xa5,0x0b };
    const uint8_t PLAINTEXT[] = { 0xbd,0x86,0xeb,0x2d,0x55,0x28,0x55,0xe4,0xa3,0x55,0xba,0xbd,0x5d,0x7b,0xb9,0xfa };
    const uint8_t CIPHERTEXT[] = { 0x7d,0x54,0x4d,0x65,0xd5,0x2b,0xbf,0x43,0x24,0x50,0x05,0x7c,0x65,0x34,0x2f,0x79 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-14", "[CFB128][MCT][128][ENCRYPT][n14]") {
    const uint8_t KEY[] = { 0xff,0x15,0x20,0xa9,0x48,0xcc,0x5a,0xe4,0x5c,0x72,0x2a,0x90,0x82,0x42,0x92,0xb7 };
    const uint8_t IV[] = { 0x7d,0x54,0x4d,0x65,0xd5,0x2b,0xbf,0x43,0x24,0x50,0x05,0x7c,0x65,0x34,0x2f,0x79 };
    const uint8_t PLAINTEXT[] = { 0x6d,0x38,0xca,0x31,0xb7,0x02,0x24,0x68,0xa7,0xda,0x2f,0xb9,0x89,0x78,0x91,0x2f };
    const uint8_t CIPHERTEXT[] = { 0x17,0x7b,0xcb,0xb8,0xaf,0x7f,0xfd,0x0a,0x25,0xa3,0x3f,0xeb,0x56,0x94,0x68,0x88 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-15", "[CFB128][MCT][128][ENCRYPT][n15]") {
    const uint8_t KEY[] = { 0xe8,0x6e,0xeb,0x11,0xe7,0xb3,0xa7,0xee,0x79,0xd1,0x15,0x7b,0xd4,0xd6,0xfa,0x3f };
    const uint8_t IV[] = { 0x17,0x7b,0xcb,0xb8,0xaf,0x7f,0xfd,0x0a,0x25,0xa3,0x3f,0xeb,0x56,0x94,0x68,0x88 };
    const uint8_t PLAINTEXT[] = { 0x77,0x0a,0x44,0x6f,0x60,0xcc,0x5f,0xb5,0xf2,0xc6,0xc5,0x90,0xf2,0x48,0x35,0x40 };
    const uint8_t CIPHERTEXT[] = { 0xbf,0x2a,0xb1,0x3b,0x0f,0xc0,0x72,0x18,0xa4,0x5a,0xed,0x13,0x7c,0xb6,0x01,0x7d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-16", "[CFB128][MCT][128][ENCRYPT][n16]") {
    const uint8_t KEY[] = { 0x57,0x44,0x5a,0x2a,0xe8,0x73,0xd5,0xf6,0xdd,0x8b,0xf8,0x68,0xa8,0x60,0xfb,0x42 };
    const uint8_t IV[] = { 0xbf,0x2a,0xb1,0x3b,0x0f,0xc0,0x72,0x18,0xa4,0x5a,0xed,0x13,0x7c,0xb6,0x01,0x7d };
    const uint8_t PLAINTEXT[] = { 0x9f,0x77,0xf5,0x8e,0xf2,0x50,0xd6,0xa2,0x24,0xed,0xca,0x41,0xc5,0x5e,0xea,0xa7 };
    const uint8_t CIPHERTEXT[] = { 0x63,0x9b,0xaa,0xab,0xa8,0x01,0x1b,0x4b,0x76,0x2e,0x60,0x88,0x68,0xe1,0xd3,0x61 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-17", "[CFB128][MCT][128][ENCRYPT][n17]") {
    const uint8_t KEY[] = { 0x34,0xdf,0xf0,0x81,0x40,0x72,0xce,0xbd,0xab,0xa5,0x98,0xe0,0xc0,0x81,0x28,0x23 };
    const uint8_t IV[] = { 0x63,0x9b,0xaa,0xab,0xa8,0x01,0x1b,0x4b,0x76,0x2e,0x60,0x88,0x68,0xe1,0xd3,0x61 };
    const uint8_t PLAINTEXT[] = { 0x02,0x30,0x76,0x81,0xae,0x16,0xac,0x2d,0x7f,0xfb,0x08,0x20,0x71,0xc0,0xf9,0x5b };
    const uint8_t CIPHERTEXT[] = { 0xb3,0x3c,0x29,0x4f,0x99,0x35,0xd7,0x6d,0x53,0x21,0xd3,0x2d,0xef,0xd4,0x8c,0x5d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-18", "[CFB128][MCT][128][ENCRYPT][n18]") {
    const uint8_t KEY[] = { 0x87,0xe3,0xd9,0xce,0xd9,0x47,0x19,0xd0,0xf8,0x84,0x4b,0xcd,0x2f,0x55,0xa4,0x7e };
    const uint8_t IV[] = { 0xb3,0x3c,0x29,0x4f,0x99,0x35,0xd7,0x6d,0x53,0x21,0xd3,0x2d,0xef,0xd4,0x8c,0x5d };
    const uint8_t PLAINTEXT[] = { 0xeb,0xb5,0xac,0x77,0xc7,0xb1,0x04,0x62,0x98,0x35,0x3e,0x2e,0xa1,0xfd,0x48,0x90 };
    const uint8_t CIPHERTEXT[] = { 0x60,0x24,0x8b,0xfc,0x45,0x7c,0x60,0xff,0xd6,0xfc,0x9d,0x91,0x1c,0x9f,0x7f,0xd8 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-19", "[CFB128][MCT][128][ENCRYPT][n19]") {
    const uint8_t KEY[] = { 0xe7,0xc7,0x52,0x32,0x9c,0x3b,0x79,0x2f,0x2e,0x78,0xd6,0x5c,0x33,0xca,0xdb,0xa6 };
    const uint8_t IV[] = { 0x60,0x24,0x8b,0xfc,0x45,0x7c,0x60,0xff,0xd6,0xfc,0x9d,0x91,0x1c,0x9f,0x7f,0xd8 };
    const uint8_t PLAINTEXT[] = { 0xe3,0xf8,0x4f,0x55,0x26,0x2c,0x7f,0xc2,0x31,0x0f,0x6b,0x56,0x9a,0xab,0xec,0xb6 };
    const uint8_t CIPHERTEXT[] = { 0x48,0xc9,0x99,0xfe,0x3f,0x44,0x5b,0x75,0xce,0x7a,0x6b,0x77,0x24,0xa9,0x61,0x99 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-20", "[CFB128][MCT][128][ENCRYPT][n20]") {
    const uint8_t KEY[] = { 0xaf,0x0e,0xcb,0xcc,0xa3,0x7f,0x22,0x5a,0xe0,0x02,0xbd,0x2b,0x17,0x63,0xba,0x3f };
    const uint8_t IV[] = { 0x48,0xc9,0x99,0xfe,0x3f,0x44,0x5b,0x75,0xce,0x7a,0x6b,0x77,0x24,0xa9,0x61,0x99 };
    const uint8_t PLAINTEXT[] = { 0xc7,0xc3,0xc3,0x98,0xba,0x19,0xd7,0xbc,0x89,0xea,0xe3,0x00,0x42,0xe6,0x29,0x86 };
    const uint8_t CIPHERTEXT[] = { 0x81,0xe5,0x6b,0xda,0x54,0xb4,0xec,0xeb,0x9b,0x4c,0xdb,0x76,0xa7,0x92,0xed,0x2b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-21", "[CFB128][MCT][128][ENCRYPT][n21]") {
    const uint8_t KEY[] = { 0x2e,0xeb,0xa0,0x16,0xf7,0xcb,0xce,0xb1,0x7b,0x4e,0x66,0x5d,0xb0,0xf1,0x57,0x14 };
    const uint8_t IV[] = { 0x81,0xe5,0x6b,0xda,0x54,0xb4,0xec,0xeb,0x9b,0x4c,0xdb,0x76,0xa7,0x92,0xed,0x2b };
    const uint8_t PLAINTEXT[] = { 0xe5,0x5a,0x43,0xf6,0x0f,0xa6,0x98,0x76,0xc0,0x9c,0xbd,0xef,0x95,0xc8,0x50,0x6f };
    const uint8_t CIPHERTEXT[] = { 0x0c,0xcb,0x1e,0x61,0xc2,0xa9,0x16,0x57,0x2f,0x4c,0x49,0x5a,0x1f,0xd6,0xd7,0xdf };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-22", "[CFB128][MCT][128][ENCRYPT][n22]") {
    const uint8_t KEY[] = { 0x22,0x20,0xbe,0x77,0x35,0x62,0xd8,0xe6,0x54,0x02,0x2f,0x07,0xaf,0x27,0x80,0xcb };
    const uint8_t IV[] = { 0x0c,0xcb,0x1e,0x61,0xc2,0xa9,0x16,0x57,0x2f,0x4c,0x49,0x5a,0x1f,0xd6,0xd7,0xdf };
    const uint8_t PLAINTEXT[] = { 0x8f,0x8d,0x99,0x07,0x9f,0xf0,0x7b,0x38,0x71,0x46,0xe1,0x52,0x5d,0x13,0x1d,0xe0 };
    const uint8_t CIPHERTEXT[] = { 0x4c,0xe0,0x7c,0x38,0xa4,0xed,0xb1,0x93,0x1f,0x6b,0xc0,0xf6,0x95,0x49,0x4a,0x90 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-23", "[CFB128][MCT][128][ENCRYPT][n23]") {
    const uint8_t KEY[] = { 0x6e,0xc0,0xc2,0x4f,0x91,0x8f,0x69,0x75,0x4b,0x69,0xef,0xf1,0x3a,0x6e,0xca,0x5b };
    const uint8_t IV[] = { 0x4c,0xe0,0x7c,0x38,0xa4,0xed,0xb1,0x93,0x1f,0x6b,0xc0,0xf6,0x95,0x49,0x4a,0x90 };
    const uint8_t PLAINTEXT[] = { 0x4a,0x99,0x5c,0xf3,0x8f,0xd1,0x92,0x9c,0x59,0x58,0xe0,0x3c,0x78,0x60,0xe3,0x53 };
    const uint8_t CIPHERTEXT[] = { 0x98,0xed,0x2b,0x60,0x1d,0xfa,0x66,0x86,0x07,0x4e,0x77,0x6a,0x3e,0xe1,0x04,0x64 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-24", "[CFB128][MCT][128][ENCRYPT][n24]") {
    const uint8_t KEY[] = { 0xf6,0x2d,0xe9,0x2f,0x8c,0x75,0x0f,0xf3,0x4c,0x27,0x98,0x9b,0x04,0x8f,0xce,0x3f };
    const uint8_t IV[] = { 0x98,0xed,0x2b,0x60,0x1d,0xfa,0x66,0x86,0x07,0x4e,0x77,0x6a,0x3e,0xe1,0x04,0x64 };
    const uint8_t PLAINTEXT[] = { 0xcb,0x54,0xcf,0xbd,0x55,0xa3,0x98,0x35,0xe7,0x04,0x7f,0xcf,0xad,0xe5,0x6d,0xa5 };
    const uint8_t CIPHERTEXT[] = { 0x93,0x6a,0x50,0x0b,0x0e,0xec,0x80,0x7e,0x27,0x39,0x64,0x8c,0x90,0x97,0x77,0xc5 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-25", "[CFB128][MCT][128][ENCRYPT][n25]") {
    const uint8_t KEY[] = { 0x65,0x47,0xb9,0x24,0x82,0x99,0x8f,0x8d,0x6b,0x1e,0xfc,0x17,0x94,0x18,0xb9,0xfa };
    const uint8_t IV[] = { 0x93,0x6a,0x50,0x0b,0x0e,0xec,0x80,0x7e,0x27,0x39,0x64,0x8c,0x90,0x97,0x77,0xc5 };
    const uint8_t PLAINTEXT[] = { 0x12,0x6e,0x2b,0x6e,0x36,0xf1,0xcb,0xf5,0xb8,0x79,0xc9,0x7d,0xe9,0x2c,0x72,0x35 };
    const uint8_t CIPHERTEXT[] = { 0xd7,0x58,0xdc,0xe1,0x58,0x2c,0x53,0x7b,0x48,0xe2,0x0f,0x3f,0xe8,0xc3,0x4c,0x4e };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-26", "[CFB128][MCT][128][ENCRYPT][n26]") {
    const uint8_t KEY[] = { 0xb2,0x1f,0x65,0xc5,0xda,0xb5,0xdc,0xf6,0x23,0xfc,0xf3,0x28,0x7c,0xdb,0xf5,0xb4 };
    const uint8_t IV[] = { 0xd7,0x58,0xdc,0xe1,0x58,0x2c,0x53,0x7b,0x48,0xe2,0x0f,0x3f,0xe8,0xc3,0x4c,0x4e };
    const uint8_t PLAINTEXT[] = { 0x4a,0x4d,0x77,0xa1,0xe5,0x4f,0x65,0x04,0x7c,0xcf,0x01,0xb0,0xa6,0x34,0xf2,0x0b };
    const uint8_t CIPHERTEXT[] = { 0xf8,0xc4,0x20,0xca,0xfa,0x12,0xf6,0x55,0xbd,0xe0,0x9b,0x80,0xc9,0xdb,0x33,0x0f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-27", "[CFB128][MCT][128][ENCRYPT][n27]") {
    const uint8_t KEY[] = { 0x4a,0xdb,0x45,0x0f,0x20,0xa7,0x2a,0xa3,0x9e,0x1c,0x68,0xa8,0xb5,0x00,0xc6,0xbb };
    const uint8_t IV[] = { 0xf8,0xc4,0x20,0xca,0xfa,0x12,0xf6,0x55,0xbd,0xe0,0x9b,0x80,0xc9,0xdb,0x33,0x0f };
    const uint8_t PLAINTEXT[] = { 0x52,0x73,0xe5,0xc6,0x4f,0x03,0x52,0x73,0xe9,0xab,0x53,0x33,0x81,0xcb,0x34,0x8b };
    const uint8_t CIPHERTEXT[] = { 0x84,0x98,0x72,0xc4,0x25,0xf1,0x89,0x1c,0xf0,0x73,0xcb,0xe5,0x34,0x61,0xed,0x96 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-28", "[CFB128][MCT][128][ENCRYPT][n28]") {
    const uint8_t KEY[] = { 0xce,0x43,0x37,0xcb,0x05,0x56,0xa3,0xbf,0x6e,0x6f,0xa3,0x4d,0x81,0x61,0x2b,0x2d };
    const uint8_t IV[] = { 0x84,0x98,0x72,0xc4,0x25,0xf1,0x89,0x1c,0xf0,0x73,0xcb,0xe5,0x34,0x61,0xed,0x96 };
    const uint8_t PLAINTEXT[] = { 0x47,0xbc,0x4e,0x22,0xda,0x5e,0x7a,0xf0,0x29,0x26,0x7f,0x86,0xca,0x4a,0xa3,0x5b };
    const uint8_t CIPHERTEXT[] = { 0x60,0x06,0x43,0x4f,0xd3,0xfb,0xa8,0xa4,0x2b,0x07,0x00,0x4d,0xc5,0x53,0xcf,0x7a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-29", "[CFB128][MCT][128][ENCRYPT][n29]") {
    const uint8_t KEY[] = { 0xae,0x45,0x74,0x84,0xd6,0xad,0x0b,0x1b,0x45,0x68,0xa3,0x00,0x44,0x32,0xe4,0x57 };
    const uint8_t IV[] = { 0x60,0x06,0x43,0x4f,0xd3,0xfb,0xa8,0xa4,0x2b,0x07,0x00,0x4d,0xc5,0x53,0xcf,0x7a };
    const uint8_t PLAINTEXT[] = { 0x73,0x03,0xa6,0x0f,0x9b,0xec,0x6f,0x5b,0xf3,0x25,0x5f,0xb7,0x28,0xc6,0x6a,0x8c };
    const uint8_t CIPHERTEXT[] = { 0x2a,0x20,0xe5,0x2f,0xfe,0x08,0x85,0xcd,0x86,0x62,0x98,0x61,0x60,0x40,0xd4,0xe2 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-30", "[CFB128][MCT][128][ENCRYPT][n30]") {
    const uint8_t KEY[] = { 0x84,0x65,0x91,0xab,0x28,0xa5,0x8e,0xd6,0xc3,0x0a,0x3b,0x61,0x24,0x72,0x30,0xb5 };
    const uint8_t IV[] = { 0x2a,0x20,0xe5,0x2f,0xfe,0x08,0x85,0xcd,0x86,0x62,0x98,0x61,0x60,0x40,0xd4,0xe2 };
    const uint8_t PLAINTEXT[] = { 0xc8,0x0a,0xd9,0xee,0xed,0xfe,0xb6,0xd3,0x4e,0x90,0x5e,0xa6,0x36,0xd5,0x0f,0xc2 };
    const uint8_t CIPHERTEXT[] = { 0x12,0x52,0xfe,0x1c,0x78,0x25,0xcd,0x4c,0x35,0x37,0x1e,0x15,0x9a,0xae,0xa1,0x4f };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-31", "[CFB128][MCT][128][ENCRYPT][n31]") {
    const uint8_t KEY[] = { 0x96,0x37,0x6f,0xb7,0x50,0x80,0x43,0x9a,0xf6,0x3d,0x25,0x74,0xbe,0xdc,0x91,0xfa };
    const uint8_t IV[] = { 0x12,0x52,0xfe,0x1c,0x78,0x25,0xcd,0x4c,0x35,0x37,0x1e,0x15,0x9a,0xae,0xa1,0x4f };
    const uint8_t PLAINTEXT[] = { 0x79,0x91,0xd5,0x6e,0xd7,0x39,0xb6,0x3e,0x45,0xde,0x99,0x61,0x58,0xb6,0xcd,0xec };
    const uint8_t CIPHERTEXT[] = { 0x95,0x68,0x19,0x38,0x23,0x87,0x86,0x14,0xbf,0x7a,0x4d,0x5f,0x26,0x31,0x7e,0x18 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-32", "[CFB128][MCT][128][ENCRYPT][n32]") {
    const uint8_t KEY[] = { 0x03,0x5f,0x76,0x8f,0x73,0x07,0xc5,0x8e,0x49,0x47,0x68,0x2b,0x98,0xed,0xef,0xe2 };
    const uint8_t IV[] = { 0x95,0x68,0x19,0x38,0x23,0x87,0x86,0x14,0xbf,0x7a,0x4d,0x5f,0x26,0x31,0x7e,0x18 };
    const uint8_t PLAINTEXT[] = { 0x22,0x80,0x4c,0x99,0x4d,0x7d,0x6a,0xc8,0x82,0x83,0x9c,0xdb,0x6e,0xd0,0x1e,0x99 };
    const uint8_t CIPHERTEXT[] = { 0xcd,0xa8,0x77,0x80,0x29,0x4f,0xd4,0xac,0xe2,0x17,0xd3,0x31,0x8e,0x42,0xd9,0x34 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-33", "[CFB128][MCT][128][ENCRYPT][n33]") {
    const uint8_t KEY[] = { 0xce,0xf7,0x01,0x0f,0x5a,0x48,0x11,0x22,0xab,0x50,0xbb,0x1a,0x16,0xaf,0x36,0xd6 };
    const uint8_t IV[] = { 0xcd,0xa8,0x77,0x80,0x29,0x4f,0xd4,0xac,0xe2,0x17,0xd3,0x31,0x8e,0x42,0xd9,0x34 };
    const uint8_t PLAINTEXT[] = { 0xe1,0x06,0x7e,0xbc,0x23,0x9b,0xf0,0xbb,0xa8,0x7e,0xc0,0x08,0x1b,0x7c,0xf9,0x85 };
    const uint8_t CIPHERTEXT[] = { 0xdb,0xfb,0xed,0x9a,0x9b,0xc7,0x90,0xe2,0x1d,0x95,0xa0,0x74,0xee,0x5c,0x23,0x68 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-34", "[CFB128][MCT][128][ENCRYPT][n34]") {
    const uint8_t KEY[] = { 0x15,0x0c,0xec,0x95,0xc1,0x8f,0x81,0xc0,0xb6,0xc5,0x1b,0x6e,0xf8,0xf3,0x15,0xbe };
    const uint8_t IV[] = { 0xdb,0xfb,0xed,0x9a,0x9b,0xc7,0x90,0xe2,0x1d,0x95,0xa0,0x74,0xee,0x5c,0x23,0x68 };
    const uint8_t PLAINTEXT[] = { 0xa5,0x52,0xfd,0x8c,0x65,0x51,0x5a,0xa2,0x3a,0x8a,0x5e,0xcc,0xe4,0x30,0xa1,0x13 };
    const uint8_t CIPHERTEXT[] = { 0x71,0x92,0x19,0x78,0xba,0x07,0x69,0xfd,0xa8,0xf2,0x9a,0x46,0x24,0xcf,0x9a,0x18 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-35", "[CFB128][MCT][128][ENCRYPT][n35]") {
    const uint8_t KEY[] = { 0x64,0x9e,0xf5,0xed,0x7b,0x88,0xe8,0x3d,0x1e,0x37,0x81,0x28,0xdc,0x3c,0x8f,0xa6 };
    const uint8_t IV[] = { 0x71,0x92,0x19,0x78,0xba,0x07,0x69,0xfd,0xa8,0xf2,0x9a,0x46,0x24,0xcf,0x9a,0x18 };
    const uint8_t PLAINTEXT[] = { 0xe2,0xe8,0x10,0x2b,0xd8,0xdb,0xcf,0x9b,0xf1,0x0d,0xb1,0xc2,0x74,0x45,0x5e,0x87 };
    const uint8_t CIPHERTEXT[] = { 0xd0,0x0a,0x4b,0xf1,0xcf,0x66,0xbe,0x78,0x55,0x82,0x9c,0x41,0xaa,0xce,0x47,0x50 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-36", "[CFB128][MCT][128][ENCRYPT][n36]") {
    const uint8_t KEY[] = { 0xb4,0x94,0xbe,0x1c,0xb4,0xee,0x56,0x45,0x4b,0xb5,0x1d,0x69,0x76,0xf2,0xc8,0xf6 };
    const uint8_t IV[] = { 0xd0,0x0a,0x4b,0xf1,0xcf,0x66,0xbe,0x78,0x55,0x82,0x9c,0x41,0xaa,0xce,0x47,0x50 };
    const uint8_t PLAINTEXT[] = { 0x83,0xc1,0xe0,0xe6,0x21,0x2e,0x17,0xee,0x9e,0xec,0x81,0x0c,0x70,0x35,0x9b,0xcc };
    const uint8_t CIPHERTEXT[] = { 0x46,0x4e,0xb0,0xa3,0x7f,0xd9,0x74,0xa4,0xde,0xa4,0x3c,0xf8,0xaa,0x72,0x20,0xf0 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-37", "[CFB128][MCT][128][ENCRYPT][n37]") {
    const uint8_t KEY[] = { 0xf2,0xda,0x0e,0xbf,0xcb,0x37,0x22,0xe1,0x95,0x11,0x21,0x91,0xdc,0x80,0xe8,0x06 };
    const uint8_t IV[] = { 0x46,0x4e,0xb0,0xa3,0x7f,0xd9,0x74,0xa4,0xde,0xa4,0x3c,0xf8,0xaa,0x72,0x20,0xf0 };
    const uint8_t PLAINTEXT[] = { 0xf3,0x09,0xb8,0x68,0x07,0x96,0xb4,0x3b,0x3d,0xb3,0xe9,0x45,0xdc,0x0a,0xae,0x04 };
    const uint8_t CIPHERTEXT[] = { 0x06,0x5a,0x9f,0xdd,0xe7,0xb5,0x68,0x9d,0x14,0x33,0xf3,0xcb,0xf0,0xbd,0x20,0x16 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-38", "[CFB128][MCT][128][ENCRYPT][n38]") {
    const uint8_t KEY[] = { 0xf4,0x80,0x91,0x62,0x2c,0x82,0x4a,0x7c,0x81,0x22,0xd2,0x5a,0x2c,0x3d,0xc8,0x10 };
    const uint8_t IV[] = { 0x06,0x5a,0x9f,0xdd,0xe7,0xb5,0x68,0x9d,0x14,0x33,0xf3,0xcb,0xf0,0xbd,0x20,0x16 };
    const uint8_t PLAINTEXT[] = { 0x0c,0xfd,0x9f,0xb9,0x62,0xcb,0xcf,0x67,0xf8,0x0e,0x53,0xee,0x5f,0x01,0xb1,0x10 };
    const uint8_t CIPHERTEXT[] = { 0xc3,0xa4,0x90,0xc7,0x1a,0x53,0x32,0x25,0xa8,0x8a,0x62,0xd8,0x78,0x94,0xf7,0x07 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-39", "[CFB128][MCT][128][ENCRYPT][n39]") {
    const uint8_t KEY[] = { 0x37,0x24,0x01,0xa5,0x36,0xd1,0x78,0x59,0x29,0xa8,0xb0,0x82,0x54,0xa9,0x3f,0x17 };
    const uint8_t IV[] = { 0xc3,0xa4,0x90,0xc7,0x1a,0x53,0x32,0x25,0xa8,0x8a,0x62,0xd8,0x78,0x94,0xf7,0x07 };
    const uint8_t PLAINTEXT[] = { 0xa8,0xdd,0x76,0x03,0x7c,0x01,0x9f,0x7a,0x2f,0x50,0x78,0x1b,0xa4,0x88,0xd3,0x4c };
    const uint8_t CIPHERTEXT[] = { 0x55,0x6a,0x82,0x0d,0x02,0x28,0xdd,0x44,0x0c,0x49,0x59,0xe0,0x98,0x44,0xe4,0x53 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-40", "[CFB128][MCT][128][ENCRYPT][n40]") {
    const uint8_t KEY[] = { 0x62,0x4e,0x83,0xa8,0x34,0xf9,0xa5,0x1d,0x25,0xe1,0xe9,0x62,0xcc,0xed,0xdb,0x44 };
    const uint8_t IV[] = { 0x55,0x6a,0x82,0x0d,0x02,0x28,0xdd,0x44,0x0c,0x49,0x59,0xe0,0x98,0x44,0xe4,0x53 };
    const uint8_t PLAINTEXT[] = { 0x61,0x34,0x91,0x7c,0x0e,0x30,0xe4,0x58,0xda,0xe9,0x44,0xd6,0x17,0xd4,0x94,0x20 };
    const uint8_t CIPHERTEXT[] = { 0x8a,0x9a,0x5c,0xca,0xe1,0x4c,0xd5,0xaf,0x55,0xea,0x03,0xfe,0xde,0x02,0x72,0x44 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-41", "[CFB128][MCT][128][ENCRYPT][n41]") {
    const uint8_t KEY[] = { 0xe8,0xd4,0xdf,0x62,0xd5,0xb5,0x70,0xb2,0x70,0x0b,0xea,0x9c,0x12,0xef,0xa9,0x00 };
    const uint8_t IV[] = { 0x8a,0x9a,0x5c,0xca,0xe1,0x4c,0xd5,0xaf,0x55,0xea,0x03,0xfe,0xde,0x02,0x72,0x44 };
    const uint8_t PLAINTEXT[] = { 0xee,0x63,0xb0,0x3c,0xab,0xff,0xf7,0x11,0x86,0x48,0x17,0x4e,0x61,0x9d,0xbe,0xd8 };
    const uint8_t CIPHERTEXT[] = { 0x14,0x7f,0x02,0x30,0xad,0x61,0x1c,0x78,0xd4,0x2b,0xf6,0x3f,0xec,0x61,0x7e,0xdb };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-42", "[CFB128][MCT][128][ENCRYPT][n42]") {
    const uint8_t KEY[] = { 0xfc,0xab,0xdd,0x52,0x78,0xd4,0x6c,0xca,0xa4,0x20,0x1c,0xa3,0xfe,0x8e,0xd7,0xdb };
    const uint8_t IV[] = { 0x14,0x7f,0x02,0x30,0xad,0x61,0x1c,0x78,0xd4,0x2b,0xf6,0x3f,0xec,0x61,0x7e,0xdb };
    const uint8_t PLAINTEXT[] = { 0xcc,0x45,0x3a,0xa6,0xac,0x7a,0x94,0xe0,0xd8,0x1a,0x0d,0x57,0xc5,0x1b,0x34,0xfb };
    const uint8_t CIPHERTEXT[] = { 0x62,0xb6,0x23,0xb9,0x32,0x67,0xf5,0xde,0x57,0xfb,0x18,0xf8,0x1d,0x6c,0x17,0x28 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-43", "[CFB128][MCT][128][ENCRYPT][n43]") {
    const uint8_t KEY[] = { 0x9e,0x1d,0xfe,0xeb,0x4a,0xb3,0x99,0x14,0xf3,0xdb,0x04,0x5b,0xe3,0xe2,0xc0,0xf3 };
    const uint8_t IV[] = { 0x62,0xb6,0x23,0xb9,0x32,0x67,0xf5,0xde,0x57,0xfb,0x18,0xf8,0x1d,0x6c,0x17,0x28 };
    const uint8_t PLAINTEXT[] = { 0x32,0x05,0x0f,0xa7,0xcb,0x11,0x57,0xa7,0x94,0xdf,0x25,0xd8,0x25,0x4e,0x40,0x8f };
    const uint8_t CIPHERTEXT[] = { 0xd2,0xda,0xc8,0x6b,0x93,0xb4,0x3c,0x6c,0xff,0xb3,0x92,0xae,0xfe,0x97,0xbe,0xac };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-44", "[CFB128][MCT][128][ENCRYPT][n44]") {
    const uint8_t KEY[] = { 0x4c,0xc7,0x36,0x80,0xd9,0x07,0xa5,0x78,0x0c,0x68,0x96,0xf5,0x1d,0x75,0x7e,0x5f };
    const uint8_t IV[] = { 0xd2,0xda,0xc8,0x6b,0x93,0xb4,0x3c,0x6c,0xff,0xb3,0x92,0xae,0xfe,0x97,0xbe,0xac };
    const uint8_t PLAINTEXT[] = { 0xb4,0x75,0x98,0xab,0x95,0xa7,0x22,0x95,0xd4,0xe6,0x37,0x6a,0x0f,0x1f,0x45,0x9f };
    const uint8_t CIPHERTEXT[] = { 0xcb,0xf4,0xad,0x8a,0x05,0xd0,0x46,0xf9,0x3e,0xdb,0x7c,0x75,0x2e,0x2e,0x10,0xd6 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-45", "[CFB128][MCT][128][ENCRYPT][n45]") {
    const uint8_t KEY[] = { 0x87,0x33,0x9b,0x0a,0xdc,0xd7,0xe3,0x81,0x32,0xb3,0xea,0x80,0x33,0x5b,0x6e,0x89 };
    const uint8_t IV[] = { 0xcb,0xf4,0xad,0x8a,0x05,0xd0,0x46,0xf9,0x3e,0xdb,0x7c,0x75,0x2e,0x2e,0x10,0xd6 };
    const uint8_t PLAINTEXT[] = { 0x95,0x9b,0x3a,0xce,0x85,0x30,0xda,0x08,0xa6,0x28,0xad,0x97,0xd6,0xa8,0x6b,0xd6 };
    const uint8_t CIPHERTEXT[] = { 0x34,0x09,0x87,0x40,0x1e,0x21,0x47,0xd7,0xf1,0xb6,0x1d,0x62,0x99,0xb4,0x1c,0x52 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-46", "[CFB128][MCT][128][ENCRYPT][n46]") {
    const uint8_t KEY[] = { 0xb3,0x3a,0x1c,0x4a,0xc2,0xf6,0xa4,0x56,0xc3,0x05,0xf7,0xe2,0xaa,0xef,0x72,0xdb };
    const uint8_t IV[] = { 0x34,0x09,0x87,0x40,0x1e,0x21,0x47,0xd7,0xf1,0xb6,0x1d,0x62,0x99,0xb4,0x1c,0x52 };
    const uint8_t PLAINTEXT[] = { 0x2d,0x61,0x32,0x5c,0x50,0x5c,0xff,0x97,0x7f,0x0a,0x4c,0x77,0xaa,0x49,0xdf,0x19 };
    const uint8_t CIPHERTEXT[] = { 0x37,0x98,0x9d,0x80,0xe3,0x64,0xac,0xca,0x97,0x6e,0x4a,0xfe,0xc3,0xf4,0x1f,0x04 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-47", "[CFB128][MCT][128][ENCRYPT][n47]") {
    const uint8_t KEY[] = { 0x84,0xa2,0x81,0xca,0x21,0x92,0x08,0x9c,0x54,0x6b,0xbd,0x1c,0x69,0x1b,0x6d,0xdf };
    const uint8_t IV[] = { 0x37,0x98,0x9d,0x80,0xe3,0x64,0xac,0xca,0x97,0x6e,0x4a,0xfe,0xc3,0xf4,0x1f,0x04 };
    const uint8_t PLAINTEXT[] = { 0xc4,0x62,0x13,0x2c,0xae,0x6f,0x4d,0x74,0xb6,0x55,0x72,0x2a,0x9f,0x82,0xc2,0x48 };
    const uint8_t CIPHERTEXT[] = { 0x49,0xb0,0x27,0xe0,0x85,0x80,0xcf,0x3a,0xb9,0x22,0x4c,0x99,0x33,0x3e,0x14,0x39 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-48", "[CFB128][MCT][128][ENCRYPT][n48]") {
    const uint8_t KEY[] = { 0xcd,0x12,0xa6,0x2a,0xa4,0x12,0xc7,0xa6,0xed,0x49,0xf1,0x85,0x5a,0x25,0x79,0xe6 };
    const uint8_t IV[] = { 0x49,0xb0,0x27,0xe0,0x85,0x80,0xcf,0x3a,0xb9,0x22,0x4c,0x99,0x33,0x3e,0x14,0x39 };
    const uint8_t PLAINTEXT[] = { 0x34,0x52,0x2d,0x5c,0xd2,0xd9,0xe2,0x27,0x2a,0x0f,0xf1,0x05,0x2c,0x03,0x01,0xb3 };
    const uint8_t CIPHERTEXT[] = { 0xf6,0x01,0x39,0x2d,0xfb,0x9b,0x71,0xc4,0x11,0x92,0x86,0x69,0xd1,0xd2,0xed,0xdd };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-49", "[CFB128][MCT][128][ENCRYPT][n49]") {
    const uint8_t KEY[] = { 0x3b,0x13,0x9f,0x07,0x5f,0x89,0xb6,0x62,0xfc,0xdb,0x77,0xec,0x8b,0xf7,0x94,0x3b };
    const uint8_t IV[] = { 0xf6,0x01,0x39,0x2d,0xfb,0x9b,0x71,0xc4,0x11,0x92,0x86,0x69,0xd1,0xd2,0xed,0xdd };
    const uint8_t PLAINTEXT[] = { 0x08,0xee,0x69,0x55,0xe2,0x68,0x32,0x5f,0x50,0x76,0x45,0x29,0x47,0x6a,0xd4,0x12 };
    const uint8_t CIPHERTEXT[] = { 0xa6,0x19,0xd8,0x4c,0x33,0x88,0xf0,0xfd,0x9a,0x57,0x94,0x51,0x26,0x5f,0x1e,0xe2 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-50", "[CFB128][MCT][128][ENCRYPT][n50]") {
    const uint8_t KEY[] = { 0x9d,0x0a,0x47,0x4b,0x6c,0x01,0x46,0x9f,0x66,0x8c,0xe3,0xbd,0xad,0xa8,0x8a,0xd9 };
    const uint8_t IV[] = { 0xa6,0x19,0xd8,0x4c,0x33,0x88,0xf0,0xfd,0x9a,0x57,0x94,0x51,0x26,0x5f,0x1e,0xe2 };
    const uint8_t PLAINTEXT[] = { 0x90,0xa5,0xf9,0x25,0xc2,0xc6,0x2f,0xd8,0x53,0x3f,0x57,0xf6,0x45,0x7c,0xb8,0xc6 };
    const uint8_t CIPHERTEXT[] = { 0xc1,0x7d,0xe4,0x14,0x65,0x3e,0xaf,0xb0,0x64,0x5d,0xa1,0x4f,0xa8,0x0c,0xe1,0xb5 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-51", "[CFB128][MCT][128][ENCRYPT][n51]") {
    const uint8_t KEY[] = { 0x5c,0x77,0xa3,0x5f,0x09,0x3f,0xe9,0x2f,0x02,0xd1,0x42,0xf2,0x05,0xa4,0x6b,0x6c };
    const uint8_t IV[] = { 0xc1,0x7d,0xe4,0x14,0x65,0x3e,0xaf,0xb0,0x64,0x5d,0xa1,0x4f,0xa8,0x0c,0xe1,0xb5 };
    const uint8_t PLAINTEXT[] = { 0x60,0x85,0x2e,0x0b,0xd1,0x0b,0x4e,0x92,0x2d,0x0a,0x07,0x34,0x12,0xa7,0xce,0xa1 };
    const uint8_t CIPHERTEXT[] = { 0x62,0x30,0x59,0x5c,0xb0,0x9a,0x14,0xaf,0x4e,0xf3,0xd5,0x67,0xe4,0x72,0x69,0x92 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-52", "[CFB128][MCT][128][ENCRYPT][n52]") {
    const uint8_t KEY[] = { 0x3e,0x47,0xfa,0x03,0xb9,0xa5,0xfd,0x80,0x4c,0x22,0x97,0x95,0xe1,0xd6,0x02,0xfe };
    const uint8_t IV[] = { 0x62,0x30,0x59,0x5c,0xb0,0x9a,0x14,0xaf,0x4e,0xf3,0xd5,0x67,0xe4,0x72,0x69,0x92 };
    const uint8_t PLAINTEXT[] = { 0xa9,0xdf,0xf2,0x03,0x1c,0x2b,0x08,0xb3,0xf2,0xee,0x70,0xa0,0x83,0x52,0x23,0x05 };
    const uint8_t CIPHERTEXT[] = { 0xfc,0x5a,0x36,0x61,0x8f,0x10,0x09,0xab,0x66,0x7e,0x5a,0x01,0xc8,0x1a,0x5d,0x4b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-53", "[CFB128][MCT][128][ENCRYPT][n53]") {
    const uint8_t KEY[] = { 0xc2,0x1d,0xcc,0x62,0x36,0xb5,0xf4,0x2b,0x2a,0x5c,0xcd,0x94,0x29,0xcc,0x5f,0xb5 };
    const uint8_t IV[] = { 0xfc,0x5a,0x36,0x61,0x8f,0x10,0x09,0xab,0x66,0x7e,0x5a,0x01,0xc8,0x1a,0x5d,0x4b };
    const uint8_t PLAINTEXT[] = { 0x9f,0xa9,0x89,0xa9,0x11,0x33,0xa0,0x5f,0xb4,0xf7,0x8d,0x54,0x50,0xa8,0x0f,0xab };
    const uint8_t CIPHERTEXT[] = { 0xe8,0xa1,0x62,0x47,0x33,0x16,0x0e,0xa0,0x59,0x33,0x4b,0x70,0x93,0x70,0xa8,0x6d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-54", "[CFB128][MCT][128][ENCRYPT][n54]") {
    const uint8_t KEY[] = { 0x2a,0xbc,0xae,0x25,0x05,0xa3,0xfa,0x8b,0x73,0x6f,0x86,0xe4,0xba,0xbc,0xf7,0xd8 };
    const uint8_t IV[] = { 0xe8,0xa1,0x62,0x47,0x33,0x16,0x0e,0xa0,0x59,0x33,0x4b,0x70,0x93,0x70,0xa8,0x6d };
    const uint8_t PLAINTEXT[] = { 0xdd,0x9a,0x5c,0x66,0xc4,0x44,0x67,0x88,0x43,0x5e,0x69,0x3c,0xe5,0xd4,0x21,0x80 };
    const uint8_t CIPHERTEXT[] = { 0xfe,0xf0,0x9e,0x27,0x63,0xce,0x68,0xe1,0x45,0xae,0x26,0xee,0x30,0x74,0x19,0xa8 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-55", "[CFB128][MCT][128][ENCRYPT][n55]") {
    const uint8_t KEY[] = { 0xd4,0x4c,0x30,0x02,0x66,0x6d,0x92,0x6a,0x36,0xc1,0xa0,0x0a,0x8a,0xc8,0xee,0x70 };
    const uint8_t IV[] = { 0xfe,0xf0,0x9e,0x27,0x63,0xce,0x68,0xe1,0x45,0xae,0x26,0xee,0x30,0x74,0x19,0xa8 };
    const uint8_t PLAINTEXT[] = { 0x29,0xef,0x17,0x03,0x4d,0x6a,0xc7,0x83,0xfb,0xa5,0x70,0x71,0xe9,0xd2,0x62,0xc6 };
    const uint8_t CIPHERTEXT[] = { 0x66,0x5c,0x5f,0x51,0x01,0xd7,0x3e,0x07,0xbf,0x61,0xe2,0x3c,0x2a,0x39,0x1b,0x62 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-56", "[CFB128][MCT][128][ENCRYPT][n56]") {
    const uint8_t KEY[] = { 0xb2,0x10,0x6f,0x53,0x67,0xba,0xac,0x6d,0x89,0xa0,0x42,0x36,0xa0,0xf1,0xf5,0x12 };
    const uint8_t IV[] = { 0x66,0x5c,0x5f,0x51,0x01,0xd7,0x3e,0x07,0xbf,0x61,0xe2,0x3c,0x2a,0x39,0x1b,0x62 };
    const uint8_t PLAINTEXT[] = { 0x8c,0x93,0xca,0x46,0xdc,0x74,0x9b,0x0e,0xd1,0x86,0x23,0xaa,0xce,0xb6,0x75,0xbe };
    const uint8_t CIPHERTEXT[] = { 0xad,0x84,0x01,0xb8,0x7e,0xda,0xc8,0x93,0x58,0x9f,0xd5,0x8a,0xcd,0x45,0xae,0x33 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-57", "[CFB128][MCT][128][ENCRYPT][n57]") {
    const uint8_t KEY[] = { 0x1f,0x94,0x6e,0xeb,0x19,0x60,0x64,0xfe,0xd1,0x3f,0x97,0xbc,0x6d,0xb4,0x5b,0x21 };
    const uint8_t IV[] = { 0xad,0x84,0x01,0xb8,0x7e,0xda,0xc8,0x93,0x58,0x9f,0xd5,0x8a,0xcd,0x45,0xae,0x33 };
    const uint8_t PLAINTEXT[] = { 0x0e,0xca,0xfe,0x30,0x1b,0x1f,0x08,0x22,0x1e,0x83,0xc7,0xdc,0x06,0x9f,0xf0,0x93 };
    const uint8_t CIPHERTEXT[] = { 0xaa,0x32,0x74,0xfa,0x92,0xbb,0x0e,0xe0,0xc1,0x92,0xa6,0x0e,0xc3,0x20,0x6c,0x95 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-58", "[CFB128][MCT][128][ENCRYPT][n58]") {
    const uint8_t KEY[] = { 0xb5,0xa6,0x1a,0x11,0x8b,0xdb,0x6a,0x1e,0x10,0xad,0x31,0xb2,0xae,0x94,0x37,0xb4 };
    const uint8_t IV[] = { 0xaa,0x32,0x74,0xfa,0x92,0xbb,0x0e,0xe0,0xc1,0x92,0xa6,0x0e,0xc3,0x20,0x6c,0x95 };
    const uint8_t PLAINTEXT[] = { 0x8b,0x74,0x21,0x3b,0xc9,0x54,0x79,0xdf,0x15,0x06,0x64,0x46,0xfe,0xbd,0xa2,0xeb };
    const uint8_t CIPHERTEXT[] = { 0x99,0x63,0x54,0xa6,0x15,0xdd,0xff,0x2b,0x05,0xf0,0xef,0xd7,0x7c,0x70,0xf1,0xe4 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-59", "[CFB128][MCT][128][ENCRYPT][n59]") {
    const uint8_t KEY[] = { 0x2c,0xc5,0x4e,0xb7,0x9e,0x06,0x95,0x35,0x15,0x5d,0xde,0x65,0xd2,0xe4,0xc6,0x50 };
    const uint8_t IV[] = { 0x99,0x63,0x54,0xa6,0x15,0xdd,0xff,0x2b,0x05,0xf0,0xef,0xd7,0x7c,0x70,0xf1,0xe4 };
    const uint8_t PLAINTEXT[] = { 0xd2,0x70,0x17,0xe6,0xb0,0x18,0x54,0xd2,0xd6,0x57,0xdc,0xf8,0x17,0x99,0x89,0xaf };
    const uint8_t CIPHERTEXT[] = { 0xfa,0x0d,0x62,0xaa,0x3b,0x5b,0x09,0x00,0xcb,0x24,0xa2,0xc5,0x2a,0x42,0x95,0x72 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-60", "[CFB128][MCT][128][ENCRYPT][n60]") {
    const uint8_t KEY[] = { 0xd6,0xc8,0x2c,0x1d,0xa5,0x5d,0x9c,0x35,0xde,0x79,0x7c,0xa0,0xf8,0xa6,0x53,0x22 };
    const uint8_t IV[] = { 0xfa,0x0d,0x62,0xaa,0x3b,0x5b,0x09,0x00,0xcb,0x24,0xa2,0xc5,0x2a,0x42,0x95,0x72 };
    const uint8_t PLAINTEXT[] = { 0x09,0x31,0x34,0x21,0x2a,0xfa,0xa9,0x45,0x33,0x64,0xd2,0x86,0xe2,0x6a,0xbb,0xcf };
    const uint8_t CIPHERTEXT[] = { 0xc5,0x92,0x20,0x29,0x4f,0x1b,0x61,0x1a,0x03,0x7d,0x66,0x7f,0x6d,0x69,0x2c,0xac };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-61", "[CFB128][MCT][128][ENCRYPT][n61]") {
    const uint8_t KEY[] = { 0x13,0x5a,0x0c,0x34,0xea,0x46,0xfd,0x2f,0xdd,0x04,0x1a,0xdf,0x95,0xcf,0x7f,0x8e };
    const uint8_t IV[] = { 0xc5,0x92,0x20,0x29,0x4f,0x1b,0x61,0x1a,0x03,0x7d,0x66,0x7f,0x6d,0x69,0x2c,0xac };
    const uint8_t PLAINTEXT[] = { 0x07,0xdd,0xf6,0xe7,0x80,0x2a,0xc0,0xc8,0x84,0xf1,0xe1,0xd2,0x24,0xf6,0x3d,0x68 };
    const uint8_t CIPHERTEXT[] = { 0x97,0xa0,0x9e,0xb0,0xda,0x7d,0x39,0xa8,0xf4,0x15,0xd5,0xa1,0x2b,0xed,0x35,0x7c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-62", "[CFB128][MCT][128][ENCRYPT][n62]") {
    const uint8_t KEY[] = { 0x84,0xfa,0x92,0x84,0x30,0x3b,0xc4,0x87,0x29,0x11,0xcf,0x7e,0xbe,0x22,0x4a,0xf2 };
    const uint8_t IV[] = { 0x97,0xa0,0x9e,0xb0,0xda,0x7d,0x39,0xa8,0xf4,0x15,0xd5,0xa1,0x2b,0xed,0x35,0x7c };
    const uint8_t PLAINTEXT[] = { 0xc2,0xb8,0x38,0x15,0x27,0x2b,0xc3,0x13,0x75,0x01,0xa9,0x72,0x6a,0xf7,0xec,0x25 };
    const uint8_t CIPHERTEXT[] = { 0x10,0x73,0xa0,0x05,0x0d,0x5a,0x1e,0x2e,0xd7,0x12,0x07,0x47,0x5b,0x55,0x2c,0x29 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-63", "[CFB128][MCT][128][ENCRYPT][n63]") {
    const uint8_t KEY[] = { 0x94,0x89,0x32,0x81,0x3d,0x61,0xda,0xa9,0xfe,0x03,0xc8,0x39,0xe5,0x77,0x66,0xdb };
    const uint8_t IV[] = { 0x10,0x73,0xa0,0x05,0x0d,0x5a,0x1e,0x2e,0xd7,0x12,0x07,0x47,0x5b,0x55,0x2c,0x29 };
    const uint8_t PLAINTEXT[] = { 0xd4,0xd5,0x33,0x55,0x22,0x64,0xaa,0xcc,0xb2,0x6a,0x31,0xf8,0x5b,0x80,0x33,0x40 };
    const uint8_t CIPHERTEXT[] = { 0xbf,0xf0,0x58,0x09,0x19,0x85,0x4e,0x0c,0x72,0x26,0x8e,0x2d,0x2e,0xfd,0xd5,0x09 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-64", "[CFB128][MCT][128][ENCRYPT][n64]") {
    const uint8_t KEY[] = { 0x2b,0x79,0x6a,0x88,0x24,0xe4,0x94,0xa5,0x8c,0x25,0x46,0x14,0xcb,0x8a,0xb3,0xd2 };
    const uint8_t IV[] = { 0xbf,0xf0,0x58,0x09,0x19,0x85,0x4e,0x0c,0x72,0x26,0x8e,0x2d,0x2e,0xfd,0xd5,0x09 };
    const uint8_t PLAINTEXT[] = { 0xca,0x7e,0xee,0xce,0xa1,0x6e,0xf1,0x4f,0x5f,0x0b,0xfe,0x57,0x9c,0x51,0xa4,0xc0 };
    const uint8_t CIPHERTEXT[] = { 0x54,0xd0,0x7e,0xcc,0x65,0x8f,0x8b,0x3a,0x4a,0xcc,0x08,0x64,0xa9,0x19,0xf7,0x8d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-65", "[CFB128][MCT][128][ENCRYPT][n65]") {
    const uint8_t KEY[] = { 0x7f,0xa9,0x14,0x44,0x41,0x6b,0x1f,0x9f,0xc6,0xe9,0x4e,0x70,0x62,0x93,0x44,0x5f };
    const uint8_t IV[] = { 0x54,0xd0,0x7e,0xcc,0x65,0x8f,0x8b,0x3a,0x4a,0xcc,0x08,0x64,0xa9,0x19,0xf7,0x8d };
    const uint8_t PLAINTEXT[] = { 0x82,0xa4,0x73,0xe7,0x16,0xb3,0x22,0x66,0xe8,0xa9,0x5d,0x43,0x9e,0x28,0x1e,0x47 };
    const uint8_t CIPHERTEXT[] = { 0x02,0x25,0xd4,0x54,0x3b,0xe3,0xac,0x3a,0xcb,0x45,0x90,0x91,0xa6,0xac,0xde,0xa9 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-66", "[CFB128][MCT][128][ENCRYPT][n66]") {
    const uint8_t KEY[] = { 0x7d,0x8c,0xc0,0x10,0x7a,0x88,0xb3,0xa5,0x0d,0xac,0xde,0xe1,0xc4,0x3f,0x9a,0xf6 };
    const uint8_t IV[] = { 0x02,0x25,0xd4,0x54,0x3b,0xe3,0xac,0x3a,0xcb,0x45,0x90,0x91,0xa6,0xac,0xde,0xa9 };
    const uint8_t PLAINTEXT[] = { 0xb9,0xba,0xc1,0xbe,0xd9,0x61,0xe8,0x88,0xba,0x38,0xf1,0x29,0xf0,0x7e,0x99,0xd3 };
    const uint8_t CIPHERTEXT[] = { 0x5c,0xfe,0x48,0x15,0x8c,0x7f,0x4c,0x2e,0xb7,0xc2,0xe4,0x13,0x3b,0x2d,0xdc,0x7a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-67", "[CFB128][MCT][128][ENCRYPT][n67]") {
    const uint8_t KEY[] = { 0x21,0x72,0x88,0x05,0xf6,0xf7,0xff,0x8b,0xba,0x6e,0x3a,0xf2,0xff,0x12,0x46,0x8c };
    const uint8_t IV[] = { 0x5c,0xfe,0x48,0x15,0x8c,0x7f,0x4c,0x2e,0xb7,0xc2,0xe4,0x13,0x3b,0x2d,0xdc,0x7a };
    const uint8_t PLAINTEXT[] = { 0x92,0xcd,0x53,0xe6,0x5b,0x7e,0x0d,0x1e,0x33,0x2a,0xa8,0x33,0x11,0x83,0xa8,0x3e };
    const uint8_t CIPHERTEXT[] = { 0xdd,0xc5,0x55,0xc5,0x47,0xf6,0xcc,0xa6,0x10,0x51,0xf3,0x28,0x53,0x66,0xd6,0xce };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-68", "[CFB128][MCT][128][ENCRYPT][n68]") {
    const uint8_t KEY[] = { 0xfc,0xb7,0xdd,0xc0,0xb1,0x01,0x33,0x2d,0xaa,0x3f,0xc9,0xda,0xac,0x74,0x90,0x42 };
    const uint8_t IV[] = { 0xdd,0xc5,0x55,0xc5,0x47,0xf6,0xcc,0xa6,0x10,0x51,0xf3,0x28,0x53,0x66,0xd6,0xce };
    const uint8_t PLAINTEXT[] = { 0x67,0xfc,0x1d,0x4f,0x78,0x57,0x7c,0x7a,0x07,0xe7,0xd0,0x57,0x50,0xcb,0xc7,0x74 };
    const uint8_t CIPHERTEXT[] = { 0x27,0x3b,0xfd,0x53,0x7b,0x64,0xf4,0x8d,0xf8,0xee,0xf8,0xa7,0x3e,0x9d,0xc2,0x10 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-69", "[CFB128][MCT][128][ENCRYPT][n69]") {
    const uint8_t KEY[] = { 0xdb,0x8c,0x20,0x93,0xca,0x65,0xc7,0xa0,0x52,0xd1,0x31,0x7d,0x92,0xe9,0x52,0x52 };
    const uint8_t IV[] = { 0x27,0x3b,0xfd,0x53,0x7b,0x64,0xf4,0x8d,0xf8,0xee,0xf8,0xa7,0x3e,0x9d,0xc2,0x10 };
    const uint8_t PLAINTEXT[] = { 0x02,0xdd,0xf6,0x0f,0x57,0x57,0x68,0x8e,0x2d,0xe8,0x69,0x35,0x7b,0xbd,0xc1,0x9b };
    const uint8_t CIPHERTEXT[] = { 0x62,0x7d,0x88,0xe5,0xd6,0xa2,0x57,0xe7,0x6b,0xbe,0x24,0x15,0x05,0xc9,0x29,0x98 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-70", "[CFB128][MCT][128][ENCRYPT][n70]") {
    const uint8_t KEY[] = { 0xb9,0xf1,0xa8,0x76,0x1c,0xc7,0x90,0x47,0x39,0x6f,0x15,0x68,0x97,0x20,0x7b,0xca };
    const uint8_t IV[] = { 0x62,0x7d,0x88,0xe5,0xd6,0xa2,0x57,0xe7,0x6b,0xbe,0x24,0x15,0x05,0xc9,0x29,0x98 };
    const uint8_t PLAINTEXT[] = { 0xa4,0x6c,0x40,0xb1,0x2e,0xcc,0xb2,0x7a,0x65,0x6b,0x55,0xe0,0x4d,0x56,0x80,0xf8 };
    const uint8_t CIPHERTEXT[] = { 0x04,0xc5,0xe3,0xd6,0x94,0x77,0x11,0x34,0x52,0x59,0x30,0x92,0xcc,0x9a,0xc1,0xe9 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-71", "[CFB128][MCT][128][ENCRYPT][n71]") {
    const uint8_t KEY[] = { 0xbd,0x34,0x4b,0xa0,0x88,0xb0,0x81,0x73,0x6b,0x36,0x25,0xfa,0x5b,0xba,0xba,0x23 };
    const uint8_t IV[] = { 0x04,0xc5,0xe3,0xd6,0x94,0x77,0x11,0x34,0x52,0x59,0x30,0x92,0xcc,0x9a,0xc1,0xe9 };
    const uint8_t PLAINTEXT[] = { 0xc2,0xc3,0x3a,0x18,0xdf,0x82,0x2b,0x4f,0x38,0x4c,0x9a,0x44,0x35,0x1e,0x17,0x22 };
    const uint8_t CIPHERTEXT[] = { 0x12,0x94,0x6c,0x83,0xc5,0x73,0x15,0x21,0x73,0xc6,0xa2,0x28,0x08,0x58,0x3d,0x04 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-72", "[CFB128][MCT][128][ENCRYPT][n72]") {
    const uint8_t KEY[] = { 0xaf,0xa0,0x27,0x23,0x4d,0xc3,0x94,0x52,0x18,0xf0,0x87,0xd2,0x53,0xe2,0x87,0x27 };
    const uint8_t IV[] = { 0x12,0x94,0x6c,0x83,0xc5,0x73,0x15,0x21,0x73,0xc6,0xa2,0x28,0x08,0x58,0x3d,0x04 };
    const uint8_t PLAINTEXT[] = { 0xe9,0x97,0xaf,0x26,0x52,0xc1,0x0c,0xc8,0x3b,0x92,0xf3,0x05,0x46,0x90,0x2c,0x59 };
    const uint8_t CIPHERTEXT[] = { 0xda,0x3b,0xef,0x0a,0x0b,0xcf,0xca,0xe7,0xa1,0x6c,0x76,0x3b,0xb0,0x98,0x44,0x12 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-73", "[CFB128][MCT][128][ENCRYPT][n73]") {
    const uint8_t KEY[] = { 0x75,0x9b,0xc8,0x29,0x46,0x0c,0x5e,0xb5,0xb9,0x9c,0xf1,0xe9,0xe3,0x7a,0xc3,0x35 };
    const uint8_t IV[] = { 0xda,0x3b,0xef,0x0a,0x0b,0xcf,0xca,0xe7,0xa1,0x6c,0x76,0x3b,0xb0,0x98,0x44,0x12 };
    const uint8_t PLAINTEXT[] = { 0x0e,0x74,0xb7,0xe6,0x60,0x63,0x3f,0xeb,0x0e,0x52,0xd3,0xc3,0x32,0x7a,0x09,0x96 };
    const uint8_t CIPHERTEXT[] = { 0x97,0x72,0xc8,0xca,0xdf,0xd1,0xfe,0xbc,0x19,0xe7,0xd3,0x93,0x77,0x87,0x6c,0xcf };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-74", "[CFB128][MCT][128][ENCRYPT][n74]") {
    const uint8_t KEY[] = { 0xe2,0xe9,0x00,0xe3,0x99,0xdd,0xa0,0x09,0xa0,0x7b,0x22,0x7a,0x94,0xfd,0xaf,0xfa };
    const uint8_t IV[] = { 0x97,0x72,0xc8,0xca,0xdf,0xd1,0xfe,0xbc,0x19,0xe7,0xd3,0x93,0x77,0x87,0x6c,0xcf };
    const uint8_t PLAINTEXT[] = { 0x9f,0x43,0x13,0x36,0x83,0x2c,0xbf,0xe0,0x51,0xc4,0xe8,0x71,0xa6,0x54,0x98,0x96 };
    const uint8_t CIPHERTEXT[] = { 0x34,0x3c,0x3a,0x7a,0x04,0x60,0x59,0xfc,0x0b,0xc2,0x2b,0xe6,0xfe,0x3b,0x94,0x48 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-75", "[CFB128][MCT][128][ENCRYPT][n75]") {
    const uint8_t KEY[] = { 0xd6,0xd5,0x3a,0x99,0x9d,0xbd,0xf9,0xf5,0xab,0xb9,0x09,0x9c,0x6a,0xc6,0x3b,0xb2 };
    const uint8_t IV[] = { 0x34,0x3c,0x3a,0x7a,0x04,0x60,0x59,0xfc,0x0b,0xc2,0x2b,0xe6,0xfe,0x3b,0x94,0x48 };
    const uint8_t PLAINTEXT[] = { 0xc9,0x9b,0xa6,0x99,0xfc,0x2b,0xa8,0x48,0x1d,0xd7,0x5b,0x7d,0xd5,0xd3,0x7f,0x43 };
    const uint8_t CIPHERTEXT[] = { 0x69,0x84,0x7c,0x97,0x3d,0x54,0x84,0xd5,0xca,0x51,0xe5,0xf6,0xbc,0xb8,0x11,0x68 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-76", "[CFB128][MCT][128][ENCRYPT][n76]") {
    const uint8_t KEY[] = { 0xbf,0x51,0x46,0x0e,0xa0,0xe9,0x7d,0x20,0x61,0xe8,0xec,0x6a,0xd6,0x7e,0x2a,0xda };
    const uint8_t IV[] = { 0x69,0x84,0x7c,0x97,0x3d,0x54,0x84,0xd5,0xca,0x51,0xe5,0xf6,0xbc,0xb8,0x11,0x68 };
    const uint8_t PLAINTEXT[] = { 0xef,0xe4,0xb0,0x87,0x75,0x91,0x3e,0x67,0x02,0x51,0xfe,0xd9,0xb0,0x79,0xef,0x01 };
    const uint8_t CIPHERTEXT[] = { 0x97,0x4b,0x1a,0x7b,0x95,0x1a,0x5d,0xef,0x75,0xa9,0xea,0xaa,0x2c,0xca,0x08,0xf2 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-77", "[CFB128][MCT][128][ENCRYPT][n77]") {
    const uint8_t KEY[] = { 0x28,0x1a,0x5c,0x75,0x35,0xf3,0x20,0xcf,0x14,0x41,0x06,0xc0,0xfa,0xb4,0x22,0x28 };
    const uint8_t IV[] = { 0x97,0x4b,0x1a,0x7b,0x95,0x1a,0x5d,0xef,0x75,0xa9,0xea,0xaa,0x2c,0xca,0x08,0xf2 };
    const uint8_t PLAINTEXT[] = { 0xe9,0x43,0x45,0x29,0x73,0x34,0xd2,0xc5,0x99,0x7d,0xba,0xf7,0x9a,0x7a,0x52,0xe4 };
    const uint8_t CIPHERTEXT[] = { 0x6d,0x69,0xf9,0xde,0x78,0x9d,0x76,0xd8,0xcf,0x82,0xc3,0x68,0x6a,0x6c,0x94,0xb3 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-78", "[CFB128][MCT][128][ENCRYPT][n78]") {
    const uint8_t KEY[] = { 0x45,0x73,0xa5,0xab,0x4d,0x6e,0x56,0x17,0xdb,0xc3,0xc5,0xa8,0x90,0xd8,0xb6,0x9b };
    const uint8_t IV[] = { 0x6d,0x69,0xf9,0xde,0x78,0x9d,0x76,0xd8,0xcf,0x82,0xc3,0x68,0x6a,0x6c,0x94,0xb3 };
    const uint8_t PLAINTEXT[] = { 0xe9,0xc5,0x9a,0x82,0xf9,0x82,0x25,0xcb,0xf7,0x66,0x36,0x56,0xe9,0x19,0xa7,0xd5 };
    const uint8_t CIPHERTEXT[] = { 0x88,0xbc,0x30,0x3f,0xe1,0x9e,0xe4,0xcf,0x5b,0x94,0xaa,0xf8,0xd0,0x08,0x76,0x38 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-79", "[CFB128][MCT][128][ENCRYPT][n79]") {
    const uint8_t KEY[] = { 0xcd,0xcf,0x95,0x94,0xac,0xf0,0xb2,0xd8,0x80,0x57,0x6f,0x50,0x40,0xd0,0xc0,0xa3 };
    const uint8_t IV[] = { 0x88,0xbc,0x30,0x3f,0xe1,0x9e,0xe4,0xcf,0x5b,0x94,0xaa,0xf8,0xd0,0x08,0x76,0x38 };
    const uint8_t PLAINTEXT[] = { 0x40,0xa4,0x6d,0x88,0x07,0xa8,0x29,0xfc,0x50,0x9c,0x1e,0x1a,0x67,0x2c,0xae,0xb4 };
    const uint8_t CIPHERTEXT[] = { 0x02,0xfc,0x3c,0xde,0xa1,0x09,0x1c,0x1b,0xd8,0xbb,0x43,0x32,0xce,0x2a,0x66,0x45 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-80", "[CFB128][MCT][128][ENCRYPT][n80]") {
    const uint8_t KEY[] = { 0xcf,0x33,0xa9,0x4a,0x0d,0xf9,0xae,0xc3,0x58,0xec,0x2c,0x62,0x8e,0xfa,0xa6,0xe6 };
    const uint8_t IV[] = { 0x02,0xfc,0x3c,0xde,0xa1,0x09,0x1c,0x1b,0xd8,0xbb,0x43,0x32,0xce,0x2a,0x66,0x45 };
    const uint8_t PLAINTEXT[] = { 0x43,0xd0,0xa3,0x9e,0x8d,0x88,0x8f,0x5a,0xc4,0x43,0x50,0x74,0x75,0x50,0xb8,0xd3 };
    const uint8_t CIPHERTEXT[] = { 0x0f,0x9c,0xdd,0xbf,0x32,0x14,0xcb,0xe0,0xa0,0xd5,0x9f,0x16,0x37,0xe0,0x7b,0x6b };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-81", "[CFB128][MCT][128][ENCRYPT][n81]") {
    const uint8_t KEY[] = { 0xc0,0xaf,0x74,0xf5,0x3f,0xed,0x65,0x23,0xf8,0x39,0xb3,0x74,0xb9,0x1a,0xdd,0x8d };
    const uint8_t IV[] = { 0x0f,0x9c,0xdd,0xbf,0x32,0x14,0xcb,0xe0,0xa0,0xd5,0x9f,0x16,0x37,0xe0,0x7b,0x6b };
    const uint8_t PLAINTEXT[] = { 0xd6,0x4e,0x77,0x09,0xf3,0xd1,0x7d,0x14,0x4c,0x45,0x95,0x44,0x6d,0xbf,0xfa,0xc6 };
    const uint8_t CIPHERTEXT[] = { 0x07,0x8a,0xa2,0xe8,0x54,0x38,0x53,0x64,0x6d,0x10,0xd6,0xdf,0x86,0x2c,0xee,0x13 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-82", "[CFB128][MCT][128][ENCRYPT][n82]") {
    const uint8_t KEY[] = { 0xc7,0x25,0xd6,0x1d,0x6b,0xd5,0x36,0x47,0x95,0x29,0x65,0xab,0x3f,0x36,0x33,0x9e };
    const uint8_t IV[] = { 0x07,0x8a,0xa2,0xe8,0x54,0x38,0x53,0x64,0x6d,0x10,0xd6,0xdf,0x86,0x2c,0xee,0x13 };
    const uint8_t PLAINTEXT[] = { 0x8e,0x12,0x9e,0xda,0x7c,0x92,0x04,0x2c,0x78,0x93,0x10,0x23,0x65,0x8c,0x7c,0xb0 };
    const uint8_t CIPHERTEXT[] = { 0x56,0xd9,0x9b,0x33,0xb0,0xc4,0x42,0xad,0x31,0x41,0x0e,0x97,0x3e,0xaa,0x17,0x15 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-83", "[CFB128][MCT][128][ENCRYPT][n83]") {
    const uint8_t KEY[] = { 0x91,0xfc,0x4d,0x2e,0xdb,0x11,0x74,0xea,0xa4,0x68,0x6b,0x3c,0x01,0x9c,0x24,0x8b };
    const uint8_t IV[] = { 0x56,0xd9,0x9b,0x33,0xb0,0xc4,0x42,0xad,0x31,0x41,0x0e,0x97,0x3e,0xaa,0x17,0x15 };
    const uint8_t PLAINTEXT[] = { 0x26,0xf2,0x3c,0x8b,0x1c,0xeb,0x65,0x39,0x00,0xfe,0xe3,0x61,0x30,0x39,0xb7,0x22 };
    const uint8_t CIPHERTEXT[] = { 0x19,0x93,0x0f,0x14,0xc5,0xab,0xdd,0x49,0x78,0x4b,0x1d,0x9a,0xa1,0x2f,0xe9,0x57 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-84", "[CFB128][MCT][128][ENCRYPT][n84]") {
    const uint8_t KEY[] = { 0x88,0x6f,0x42,0x3a,0x1e,0xba,0xa9,0xa3,0xdc,0x23,0x76,0xa6,0xa0,0xb3,0xcd,0xdc };
    const uint8_t IV[] = { 0x19,0x93,0x0f,0x14,0xc5,0xab,0xdd,0x49,0x78,0x4b,0x1d,0x9a,0xa1,0x2f,0xe9,0x57 };
    const uint8_t PLAINTEXT[] = { 0x6c,0xc3,0x0f,0x30,0x39,0x4c,0xa8,0xad,0xc2,0x99,0x19,0x46,0x08,0xa6,0x64,0x3b };
    const uint8_t CIPHERTEXT[] = { 0x0c,0x9f,0x80,0x5e,0x65,0x90,0x4a,0xe6,0x1e,0xa9,0xf9,0xa3,0x64,0xa9,0x8b,0xe2 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-85", "[CFB128][MCT][128][ENCRYPT][n85]") {
    const uint8_t KEY[] = { 0x84,0xf0,0xc2,0x64,0x7b,0x2a,0xe3,0x45,0xc2,0x8a,0x8f,0x05,0xc4,0x1a,0x46,0x3e };
    const uint8_t IV[] = { 0x0c,0x9f,0x80,0x5e,0x65,0x90,0x4a,0xe6,0x1e,0xa9,0xf9,0xa3,0x64,0xa9,0x8b,0xe2 };
    const uint8_t PLAINTEXT[] = { 0x66,0x3b,0x4f,0xfe,0xe0,0x3f,0x41,0xe6,0x88,0x4d,0xba,0x90,0x47,0x87,0xf5,0xaa };
    const uint8_t CIPHERTEXT[] = { 0x16,0x9d,0x34,0xe8,0xfe,0x1b,0x36,0xd5,0xcd,0x78,0x18,0x20,0x00,0xff,0xf6,0x2d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-86", "[CFB128][MCT][128][ENCRYPT][n86]") {
    const uint8_t KEY[] = { 0x92,0x6d,0xf6,0x8c,0x85,0x31,0xd5,0x90,0x0f,0xf2,0x97,0x25,0xc4,0xe5,0xb0,0x13 };
    const uint8_t IV[] = { 0x16,0x9d,0x34,0xe8,0xfe,0x1b,0x36,0xd5,0xcd,0x78,0x18,0x20,0x00,0xff,0xf6,0x2d };
    const uint8_t PLAINTEXT[] = { 0xf2,0xdd,0x8c,0xc7,0x0a,0x24,0x9b,0xf1,0xcb,0x2c,0x80,0xc7,0x83,0xfb,0xcd,0x52 };
    const uint8_t CIPHERTEXT[] = { 0x4f,0xf4,0xce,0x49,0x77,0x65,0x7a,0x94,0x7e,0xd3,0xef,0xce,0x9d,0x9c,0x7a,0xdd };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-87", "[CFB128][MCT][128][ENCRYPT][n87]") {
    const uint8_t KEY[] = { 0xdd,0x99,0x38,0xc5,0xf2,0x54,0xaf,0x04,0x71,0x21,0x78,0xeb,0x59,0x79,0xca,0xce };
    const uint8_t IV[] = { 0x4f,0xf4,0xce,0x49,0x77,0x65,0x7a,0x94,0x7e,0xd3,0xef,0xce,0x9d,0x9c,0x7a,0xdd };
    const uint8_t PLAINTEXT[] = { 0xc0,0xe7,0x6f,0xca,0x10,0x3f,0x37,0xd1,0x26,0x24,0x1e,0x73,0xd2,0xd1,0xd2,0xff };
    const uint8_t CIPHERTEXT[] = { 0xde,0xda,0x44,0x5a,0x08,0x27,0x86,0x5b,0x71,0x2f,0x23,0x9b,0x25,0xe1,0xe1,0x49 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-88", "[CFB128][MCT][128][ENCRYPT][n88]") {
    const uint8_t KEY[] = { 0x03,0x43,0x7c,0x9f,0xfa,0x73,0x29,0x5f,0x00,0x0e,0x5b,0x70,0x7c,0x98,0x2b,0x87 };
    const uint8_t IV[] = { 0xde,0xda,0x44,0x5a,0x08,0x27,0x86,0x5b,0x71,0x2f,0x23,0x9b,0x25,0xe1,0xe1,0x49 };
    const uint8_t PLAINTEXT[] = { 0x72,0x69,0x77,0xb8,0x3c,0xf7,0xbd,0xfd,0x83,0xbc,0xb8,0x2a,0x27,0xb9,0x51,0xfd };
    const uint8_t CIPHERTEXT[] = { 0xa8,0x26,0x0f,0xdc,0xdf,0xbd,0x60,0xc9,0x27,0x43,0x7b,0xf2,0xdd,0x2d,0x59,0x74 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-89", "[CFB128][MCT][128][ENCRYPT][n89]") {
    const uint8_t KEY[] = { 0xab,0x65,0x73,0x43,0x25,0xce,0x49,0x96,0x27,0x4d,0x20,0x82,0xa1,0xb5,0x72,0xf3 };
    const uint8_t IV[] = { 0xa8,0x26,0x0f,0xdc,0xdf,0xbd,0x60,0xc9,0x27,0x43,0x7b,0xf2,0xdd,0x2d,0x59,0x74 };
    const uint8_t PLAINTEXT[] = { 0x9e,0x95,0xdc,0x79,0xf3,0x10,0xd8,0x73,0x49,0xd3,0x2c,0x14,0x77,0x81,0xaa,0xe1 };
    const uint8_t CIPHERTEXT[] = { 0xcc,0xd1,0x44,0x66,0x10,0xd9,0x64,0x0d,0x8a,0xa7,0x56,0x2c,0x5f,0xaa,0xcf,0x9c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-90", "[CFB128][MCT][128][ENCRYPT][n90]") {
    const uint8_t KEY[] = { 0x67,0xb4,0x37,0x25,0x35,0x17,0x2d,0x9b,0xad,0xea,0x76,0xae,0xfe,0x1f,0xbd,0x6f };
    const uint8_t IV[] = { 0xcc,0xd1,0x44,0x66,0x10,0xd9,0x64,0x0d,0x8a,0xa7,0x56,0x2c,0x5f,0xaa,0xcf,0x9c };
    const uint8_t PLAINTEXT[] = { 0x26,0x1d,0xb0,0xab,0x7f,0xc2,0xc0,0x0b,0x40,0x2a,0xc1,0x03,0x3f,0x02,0x0e,0x29 };
    const uint8_t CIPHERTEXT[] = { 0x93,0xdf,0x04,0x97,0x23,0x89,0xc6,0x8a,0x97,0xe5,0xc5,0x52,0x8f,0x12,0x64,0x48 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-91", "[CFB128][MCT][128][ENCRYPT][n91]") {
    const uint8_t KEY[] = { 0xf4,0x6b,0x33,0xb2,0x16,0x9e,0xeb,0x11,0x3a,0x0f,0xb3,0xfc,0x71,0x0d,0xd9,0x27 };
    const uint8_t IV[] = { 0x93,0xdf,0x04,0x97,0x23,0x89,0xc6,0x8a,0x97,0xe5,0xc5,0x52,0x8f,0x12,0x64,0x48 };
    const uint8_t PLAINTEXT[] = { 0x0f,0x16,0x12,0xb8,0x33,0xba,0x20,0xa1,0xd5,0xae,0xcd,0xb9,0x9b,0xc2,0x97,0x50 };
    const uint8_t CIPHERTEXT[] = { 0x7a,0x3e,0xd9,0x98,0x9a,0x5b,0x29,0xde,0x60,0x6a,0xdd,0xcc,0x43,0x48,0x01,0x3a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-92", "[CFB128][MCT][128][ENCRYPT][n92]") {
    const uint8_t KEY[] = { 0x8e,0x55,0xea,0x2a,0x8c,0xc5,0xc2,0xcf,0x5a,0x65,0x6e,0x30,0x32,0x45,0xd8,0x1d };
    const uint8_t IV[] = { 0x7a,0x3e,0xd9,0x98,0x9a,0x5b,0x29,0xde,0x60,0x6a,0xdd,0xcc,0x43,0x48,0x01,0x3a };
    const uint8_t PLAINTEXT[] = { 0xa7,0x32,0x1b,0x71,0x52,0x58,0x8a,0xab,0x0c,0x56,0x6b,0xf4,0xd3,0x49,0x38,0x03 };
    const uint8_t CIPHERTEXT[] = { 0xa0,0xd7,0x63,0x14,0x01,0x46,0x05,0xdd,0x6b,0xae,0xcc,0x87,0xa8,0xe4,0x1a,0x00 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-93", "[CFB128][MCT][128][ENCRYPT][n93]") {
    const uint8_t KEY[] = { 0x2e,0x82,0x89,0x3e,0x8d,0x83,0xc7,0x12,0x31,0xcb,0xa2,0xb7,0x9a,0xa1,0xc2,0x1d };
    const uint8_t IV[] = { 0xa0,0xd7,0x63,0x14,0x01,0x46,0x05,0xdd,0x6b,0xae,0xcc,0x87,0xa8,0xe4,0x1a,0x00 };
    const uint8_t PLAINTEXT[] = { 0xd4,0xb4,0x5a,0xea,0xa7,0x04,0xb7,0xf5,0x96,0x01,0xde,0x84,0x18,0xeb,0xc3,0x0f };
    const uint8_t CIPHERTEXT[] = { 0x0f,0x28,0xd1,0x68,0x51,0x46,0x30,0x3f,0xeb,0x2f,0x2b,0x9c,0x00,0x98,0x66,0x93 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-94", "[CFB128][MCT][128][ENCRYPT][n94]") {
    const uint8_t KEY[] = { 0x21,0xaa,0x58,0x56,0xdc,0xc5,0xf7,0x2d,0xda,0xe4,0x89,0x2b,0x9a,0x39,0xa4,0x8e };
    const uint8_t IV[] = { 0x0f,0x28,0xd1,0x68,0x51,0x46,0x30,0x3f,0xeb,0x2f,0x2b,0x9c,0x00,0x98,0x66,0x93 };
    const uint8_t PLAINTEXT[] = { 0x6b,0x02,0xf3,0x72,0x1c,0x23,0x02,0x46,0x4a,0x65,0xb7,0xf8,0x77,0x36,0xb0,0xc2 };
    const uint8_t CIPHERTEXT[] = { 0xcc,0x60,0xd3,0x12,0x09,0xc5,0x8c,0x6f,0xa2,0xde,0xfa,0xf1,0xae,0xdf,0x79,0x08 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-95", "[CFB128][MCT][128][ENCRYPT][n95]") {
    const uint8_t KEY[] = { 0xed,0xca,0x8b,0x44,0xd5,0x00,0x7b,0x42,0x78,0x3a,0x73,0xda,0x34,0xe6,0xdd,0x86 };
    const uint8_t IV[] = { 0xcc,0x60,0xd3,0x12,0x09,0xc5,0x8c,0x6f,0xa2,0xde,0xfa,0xf1,0xae,0xdf,0x79,0x08 };
    const uint8_t PLAINTEXT[] = { 0xe9,0x17,0x49,0x43,0x7b,0xa1,0xa7,0xfb,0x3e,0xd3,0x2a,0x5f,0x54,0x43,0x53,0xc1 };
    const uint8_t CIPHERTEXT[] = { 0x76,0x0f,0x84,0x23,0x3f,0x91,0x0c,0xc5,0xf6,0xf2,0x9e,0x24,0xa9,0xb2,0x48,0xb5 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-96", "[CFB128][MCT][128][ENCRYPT][n96]") {
    const uint8_t KEY[] = { 0x9b,0xc5,0x0f,0x67,0xea,0x91,0x77,0x87,0x8e,0xc8,0xed,0xfe,0x9d,0x54,0x95,0x33 };
    const uint8_t IV[] = { 0x76,0x0f,0x84,0x23,0x3f,0x91,0x0c,0xc5,0xf6,0xf2,0x9e,0x24,0xa9,0xb2,0x48,0xb5 };
    const uint8_t PLAINTEXT[] = { 0x0a,0x5b,0x83,0x7f,0x78,0xe7,0xe8,0xd5,0xc6,0x60,0x09,0x63,0x97,0xd1,0x30,0x12 };
    const uint8_t CIPHERTEXT[] = { 0x58,0x3c,0x31,0x8f,0x81,0x01,0xb8,0xee,0xec,0xcd,0xe0,0xdd,0x99,0xd4,0xc1,0xb3 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-97", "[CFB128][MCT][128][ENCRYPT][n97]") {
    const uint8_t KEY[] = { 0xc3,0xf9,0x3e,0xe8,0x6b,0x90,0xcf,0x69,0x62,0x05,0x0d,0x23,0x04,0x80,0x54,0x80 };
    const uint8_t IV[] = { 0x58,0x3c,0x31,0x8f,0x81,0x01,0xb8,0xee,0xec,0xcd,0xe0,0xdd,0x99,0xd4,0xc1,0xb3 };
    const uint8_t PLAINTEXT[] = { 0x4a,0x59,0x3e,0x64,0x96,0x96,0xf2,0xed,0x55,0x73,0x34,0xd9,0x7f,0x3b,0x58,0x29 };
    const uint8_t CIPHERTEXT[] = { 0xb2,0x11,0x05,0xe8,0x12,0x06,0x4c,0x92,0x85,0x89,0x0d,0xe3,0x63,0x37,0xae,0x89 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-98", "[CFB128][MCT][128][ENCRYPT][n98]") {
    const uint8_t KEY[] = { 0x71,0xe8,0x3b,0x00,0x79,0x96,0x83,0xfb,0xe7,0x8c,0x00,0xc0,0x67,0xb7,0xfa,0x09 };
    const uint8_t IV[] = { 0xb2,0x11,0x05,0xe8,0x12,0x06,0x4c,0x92,0x85,0x89,0x0d,0xe3,0x63,0x37,0xae,0x89 };
    const uint8_t PLAINTEXT[] = { 0x08,0x90,0x70,0x42,0x4f,0x99,0x7b,0xa2,0x6b,0xc8,0xb9,0x72,0x0a,0x21,0xa9,0x46 };
    const uint8_t CIPHERTEXT[] = { 0x3a,0x8b,0x59,0x5d,0xd6,0xe0,0x6a,0x26,0x3f,0xaa,0x42,0x38,0x37,0x48,0x02,0x3c };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-ENCRYPT-99", "[CFB128][MCT][128][ENCRYPT][n99]") {
    const uint8_t KEY[] = { 0x4b,0x63,0x62,0x5d,0xaf,0x76,0xe9,0xdd,0xd8,0x26,0x42,0xf8,0x50,0xff,0xf8,0x35 };
    const uint8_t IV[] = { 0x3a,0x8b,0x59,0x5d,0xd6,0xe0,0x6a,0x26,0x3f,0xaa,0x42,0x38,0x37,0x48,0x02,0x3c };
    const uint8_t PLAINTEXT[] = { 0x46,0xf3,0x02,0x7d,0x20,0xa6,0xa9,0x7b,0x93,0x33,0x86,0x61,0x5a,0xfd,0xfa,0x24 };
    const uint8_t CIPHERTEXT[] = { 0x33,0x32,0x12,0xaa,0xd7,0x54,0x34,0x32,0x44,0x9e,0xb8,0x34,0x70,0x3b,0xd8,0xfe };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb128(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_encrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-0", "[CFB128][MCT][128][DECRYPT][n0]") {
    const uint8_t KEY[] = { 0x57,0xc4,0x96,0x42,0x83,0xdd,0xaa,0x25,0xc2,0xb2,0xba,0x8b,0x0a,0xad,0x92,0xe3 };
    const uint8_t IV[] = { 0xde,0x59,0x16,0xc8,0xa6,0x20,0xa4,0xb4,0x62,0xab,0x01,0xd9,0x77,0x1f,0xd6,0x13 };
    const uint8_t PLAINTEXT[] = { 0x59,0xcd,0xd6,0xcd,0xff,0x12,0x8f,0x0a,0x8e,0xdc,0xa9,0xc8,0xb6,0x7a,0xbb,0x3a };
    const uint8_t CIPHERTEXT[] = { 0x33,0xd8,0x9b,0xb0,0x04,0x3e,0x1f,0x43,0x2e,0x5c,0x37,0xe2,0xd6,0x0e,0x61,0xe6 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-1", "[CFB128][MCT][128][DECRYPT][n1]") {
    const uint8_t KEY[] = { 0x0e,0x09,0x40,0x8f,0x7c,0xcf,0x25,0x2f,0x4c,0x6e,0x13,0x43,0xbc,0xd7,0x29,0xd9 };
    const uint8_t IV[] = { 0x59,0xcd,0xd6,0xcd,0xff,0x12,0x8f,0x0a,0x8e,0xdc,0xa9,0xc8,0xb6,0x7a,0xbb,0x3a };
    const uint8_t PLAINTEXT[] = { 0x82,0x32,0xd7,0x3d,0xbe,0x46,0x49,0x34,0x3c,0xe6,0xc9,0x25,0x0a,0xcf,0x04,0x01 };
    const uint8_t CIPHERTEXT[] = { 0x84,0x14,0x1e,0xc7,0x85,0xbf,0xe4,0x35,0xb6,0x16,0xe3,0xd3,0x56,0x66,0x86,0x00 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-2", "[CFB128][MCT][128][DECRYPT][n2]") {
    const uint8_t KEY[] = { 0x8c,0x3b,0x97,0xb2,0xc2,0x89,0x6c,0x1b,0x70,0x88,0xda,0x66,0xb6,0x18,0x2d,0xd8 };
    const uint8_t IV[] = { 0x82,0x32,0xd7,0x3d,0xbe,0x46,0x49,0x34,0x3c,0xe6,0xc9,0x25,0x0a,0xcf,0x04,0x01 };
    const uint8_t PLAINTEXT[] = { 0xa1,0xb5,0xae,0x54,0xf6,0x8f,0xd5,0x5c,0x74,0xf6,0x1c,0x8a,0x3d,0x45,0x49,0x70 };
    const uint8_t CIPHERTEXT[] = { 0xd9,0x93,0x6c,0x35,0x97,0xca,0x6a,0x2a,0x9a,0x03,0x79,0x36,0x2c,0xa5,0x34,0x56 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-3", "[CFB128][MCT][128][DECRYPT][n3]") {
    const uint8_t KEY[] = { 0x2d,0x8e,0x39,0xe6,0x34,0x06,0xb9,0x47,0x04,0x7e,0xc6,0xec,0x8b,0x5d,0x64,0xa8 };
    const uint8_t IV[] = { 0xa1,0xb5,0xae,0x54,0xf6,0x8f,0xd5,0x5c,0x74,0xf6,0x1c,0x8a,0x3d,0x45,0x49,0x70 };
    const uint8_t PLAINTEXT[] = { 0x69,0xa8,0x7f,0x23,0x90,0xcc,0x11,0x6f,0x27,0x55,0x15,0x44,0xec,0xea,0x28,0x00 };
    const uint8_t CIPHERTEXT[] = { 0xa8,0xb2,0x5e,0x46,0x07,0x69,0x5f,0x7d,0x89,0xdb,0xfb,0xf3,0x36,0x4c,0x04,0xce };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-4", "[CFB128][MCT][128][DECRYPT][n4]") {
    const uint8_t KEY[] = { 0x44,0x26,0x46,0xc5,0xa4,0xca,0xa8,0x28,0x23,0x2b,0xd3,0xa8,0x67,0xb7,0x4c,0xa8 };
    const uint8_t IV[] = { 0x69,0xa8,0x7f,0x23,0x90,0xcc,0x11,0x6f,0x27,0x55,0x15,0x44,0xec,0xea,0x28,0x00 };
    const uint8_t PLAINTEXT[] = { 0xc9,0xe5,0xcd,0x18,0x6b,0xaa,0x02,0x8e,0x2c,0x88,0x7a,0xf8,0x3e,0xb0,0x1f,0x0b };
    const uint8_t CIPHERTEXT[] = { 0x68,0x34,0xae,0x8e,0x76,0xa4,0x60,0x1d,0x28,0x5d,0xe2,0x7e,0xb5,0x94,0x77,0xae };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-5", "[CFB128][MCT][128][DECRYPT][n5]") {
    const uint8_t KEY[] = { 0x8d,0xc3,0x8b,0xdd,0xcf,0x60,0xaa,0xa6,0x0f,0xa3,0xa9,0x50,0x59,0x07,0x53,0xa3 };
    const uint8_t IV[] = { 0xc9,0xe5,0xcd,0x18,0x6b,0xaa,0x02,0x8e,0x2c,0x88,0x7a,0xf8,0x3e,0xb0,0x1f,0x0b };
    const uint8_t PLAINTEXT[] = { 0x08,0x0e,0xff,0x91,0x47,0x8f,0xb7,0x26,0xd5,0x35,0x34,0x27,0xc3,0x49,0x2a,0x73 };
    const uint8_t CIPHERTEXT[] = { 0x94,0xb6,0x1e,0xef,0x2e,0xa3,0xbf,0xf8,0xe0,0x46,0x4f,0xaa,0x9d,0xe0,0x68,0x2f };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-6", "[CFB128][MCT][128][DECRYPT][n6]") {
    const uint8_t KEY[] = { 0x85,0xcd,0x74,0x4c,0x88,0xef,0x1d,0x80,0xda,0x96,0x9d,0x77,0x9a,0x4e,0x79,0xd0 };
    const uint8_t IV[] = { 0x08,0x0e,0xff,0x91,0x47,0x8f,0xb7,0x26,0xd5,0x35,0x34,0x27,0xc3,0x49,0x2a,0x73 };
    const uint8_t PLAINTEXT[] = { 0xd5,0x3b,0x69,0x06,0xdb,0xd1,0xfd,0xd1,0x21,0xfc,0x08,0x94,0xcc,0x50,0x10,0xa2 };
    const uint8_t CIPHERTEXT[] = { 0x12,0x71,0xc5,0xe4,0xdd,0xe8,0xac,0x5a,0x03,0x4f,0x36,0x3a,0x54,0x2a,0x39,0xf9 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-7", "[CFB128][MCT][128][DECRYPT][n7]") {
    const uint8_t KEY[] = { 0x50,0xf6,0x1d,0x4a,0x53,0x3e,0xe0,0x51,0xfb,0x6a,0x95,0xe3,0x56,0x1e,0x69,0x72 };
    const uint8_t IV[] = { 0xd5,0x3b,0x69,0x06,0xdb,0xd1,0xfd,0xd1,0x21,0xfc,0x08,0x94,0xcc,0x50,0x10,0xa2 };
    const uint8_t PLAINTEXT[] = { 0x89,0x9b,0x15,0x1a,0xb5,0x4e,0x37,0x67,0x22,0xe3,0x55,0x24,0x34,0xb6,0x4a,0x86 };
    const uint8_t CIPHERTEXT[] = { 0x88,0x61,0x9c,0x79,0xcd,0xfd,0xb6,0x9d,0x92,0xf4,0x7f,0x49,0x04,0x6c,0xf3,0x49 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-8", "[CFB128][MCT][128][DECRYPT][n8]") {
    const uint8_t KEY[] = { 0xd9,0x6d,0x08,0x50,0xe6,0x70,0xd7,0x36,0xd9,0x89,0xc0,0xc7,0x62,0xa8,0x23,0xf4 };
    const uint8_t IV[] = { 0x89,0x9b,0x15,0x1a,0xb5,0x4e,0x37,0x67,0x22,0xe3,0x55,0x24,0x34,0xb6,0x4a,0x86 };
    const uint8_t PLAINTEXT[] = { 0xeb,0x5e,0x31,0x6a,0x00,0x54,0x47,0x5f,0x13,0x16,0x36,0x5e,0x3b,0x00,0xe9,0x84 };
    const uint8_t CIPHERTEXT[] = { 0x08,0xdf,0xcc,0xb0,0xb5,0x98,0xe3,0xa2,0x29,0x81,0xec,0xd7,0xaa,0xc7,0xbd,0x38 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-9", "[CFB128][MCT][128][DECRYPT][n9]") {
    const uint8_t KEY[] = { 0x32,0x33,0x39,0x3a,0xe6,0x24,0x90,0x69,0xca,0x9f,0xf6,0x99,0x59,0xa8,0xca,0x70 };
    const uint8_t IV[] = { 0xeb,0x5e,0x31,0x6a,0x00,0x54,0x47,0x5f,0x13,0x16,0x36,0x5e,0x3b,0x00,0xe9,0x84 };
    const uint8_t PLAINTEXT[] = { 0x1c,0x9b,0xbe,0xd4,0x58,0xc0,0xcd,0x1c,0xa7,0x90,0xb4,0xcb,0x34,0x9b,0xd3,0x85 };
    const uint8_t CIPHERTEXT[] = { 0x66,0xcb,0x29,0xcf,0xf5,0x9f,0x16,0xdf,0x9c,0xe4,0x46,0x04,0xd2,0xac,0xe6,0x14 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-10", "[CFB128][MCT][128][DECRYPT][n10]") {
    const uint8_t KEY[] = { 0x2e,0xa8,0x87,0xee,0xbe,0xe4,0x5d,0x75,0x6d,0x0f,0x42,0x52,0x6d,0x33,0x19,0xf5 };
    const uint8_t IV[] = { 0x1c,0x9b,0xbe,0xd4,0x58,0xc0,0xcd,0x1c,0xa7,0x90,0xb4,0xcb,0x34,0x9b,0xd3,0x85 };
    const uint8_t PLAINTEXT[] = { 0xe7,0x6a,0x34,0xd0,0xed,0xc8,0x8d,0x36,0xd2,0xd0,0x9d,0x6e,0xa3,0xa1,0x4a,0xfa };
    const uint8_t CIPHERTEXT[] = { 0xd0,0x3b,0x45,0x96,0x0b,0x11,0x63,0x61,0x25,0x47,0x86,0x3e,0x48,0xf2,0x49,0x8a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-11", "[CFB128][MCT][128][DECRYPT][n11]") {
    const uint8_t KEY[] = { 0xc9,0xc2,0xb3,0x3e,0x53,0x2c,0xd0,0x43,0xbf,0xdf,0xdf,0x3c,0xce,0x92,0x53,0x0f };
    const uint8_t IV[] = { 0xe7,0x6a,0x34,0xd0,0xed,0xc8,0x8d,0x36,0xd2,0xd0,0x9d,0x6e,0xa3,0xa1,0x4a,0xfa };
    const uint8_t PLAINTEXT[] = { 0x7b,0xed,0x33,0x53,0xef,0x7e,0xdc,0x5a,0xec,0x22,0xd1,0x37,0xd9,0x1b,0x9a,0x77 };
    const uint8_t CIPHERTEXT[] = { 0xe6,0x9c,0xda,0x0f,0x10,0x03,0x2b,0xa3,0x6f,0x86,0x67,0x43,0x61,0xf4,0x41,0x47 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-12", "[CFB128][MCT][128][DECRYPT][n12]") {
    const uint8_t KEY[] = { 0xb2,0x2f,0x80,0x6d,0xbc,0x52,0x0c,0x19,0x53,0xfd,0x0e,0x0b,0x17,0x89,0xc9,0x78 };
    const uint8_t IV[] = { 0x7b,0xed,0x33,0x53,0xef,0x7e,0xdc,0x5a,0xec,0x22,0xd1,0x37,0xd9,0x1b,0x9a,0x77 };
    const uint8_t PLAINTEXT[] = { 0x04,0xf2,0x6a,0x57,0xc9,0x4d,0x46,0xa3,0xed,0x9c,0xb6,0xb5,0xd6,0x30,0x83,0x50 };
    const uint8_t CIPHERTEXT[] = { 0x42,0xe2,0x4a,0x31,0x16,0xf2,0xec,0x08,0x78,0x2c,0xfc,0x94,0x9c,0xea,0xbd,0x47 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-13", "[CFB128][MCT][128][DECRYPT][n13]") {
    const uint8_t KEY[] = { 0xb6,0xdd,0xea,0x3a,0x75,0x1f,0x4a,0xba,0xbe,0x61,0xb8,0xbe,0xc1,0xb9,0x4a,0x28 };
    const uint8_t IV[] = { 0x04,0xf2,0x6a,0x57,0xc9,0x4d,0x46,0xa3,0xed,0x9c,0xb6,0xb5,0xd6,0x30,0x83,0x50 };
    const uint8_t PLAINTEXT[] = { 0xc7,0x6e,0x97,0x73,0x09,0x12,0x92,0x55,0xad,0xc0,0x27,0x2c,0xa7,0xa6,0x6a,0xb9 };
    const uint8_t CIPHERTEXT[] = { 0x0d,0x5d,0xbe,0x56,0x1f,0x2f,0x5f,0xb7,0x7c,0x59,0x96,0x9b,0x26,0x07,0xdf,0xf5 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-14", "[CFB128][MCT][128][DECRYPT][n14]") {
    const uint8_t KEY[] = { 0x71,0xb3,0x7d,0x49,0x7c,0x0d,0xd8,0xef,0x13,0xa1,0x9f,0x92,0x66,0x1f,0x20,0x91 };
    const uint8_t IV[] = { 0xc7,0x6e,0x97,0x73,0x09,0x12,0x92,0x55,0xad,0xc0,0x27,0x2c,0xa7,0xa6,0x6a,0xb9 };
    const uint8_t PLAINTEXT[] = { 0x41,0x53,0x47,0x7f,0x66,0x4d,0xbf,0x7e,0x07,0xf2,0x65,0x32,0xe6,0x5a,0xa9,0xb5 };
    const uint8_t CIPHERTEXT[] = { 0x1b,0x3d,0x2c,0xc9,0x17,0x28,0x3f,0x86,0xee,0x6f,0x7f,0x52,0x70,0x5e,0x87,0xf4 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-15", "[CFB128][MCT][128][DECRYPT][n15]") {
    const uint8_t KEY[] = { 0x30,0xe0,0x3a,0x36,0x1a,0x40,0x67,0x91,0x14,0x53,0xfa,0xa0,0x80,0x45,0x89,0x24 };
    const uint8_t IV[] = { 0x41,0x53,0x47,0x7f,0x66,0x4d,0xbf,0x7e,0x07,0xf2,0x65,0x32,0xe6,0x5a,0xa9,0xb5 };
    const uint8_t PLAINTEXT[] = { 0xad,0x66,0x2c,0xec,0x26,0x72,0xb9,0x31,0xca,0x36,0xc5,0xfa,0xed,0xd9,0x3e,0x03 };
    const uint8_t CIPHERTEXT[] = { 0xe7,0x35,0x2c,0x28,0x7f,0x88,0xc3,0xb7,0x60,0x3b,0x41,0xa0,0xe0,0x98,0x32,0x49 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-16", "[CFB128][MCT][128][DECRYPT][n16]") {
    const uint8_t KEY[] = { 0x9d,0x86,0x16,0xda,0x3c,0x32,0xde,0xa0,0xde,0x65,0x3f,0x5a,0x6d,0x9c,0xb7,0x27 };
    const uint8_t IV[] = { 0xad,0x66,0x2c,0xec,0x26,0x72,0xb9,0x31,0xca,0x36,0xc5,0xfa,0xed,0xd9,0x3e,0x03 };
    const uint8_t PLAINTEXT[] = { 0x9b,0x37,0x7b,0x37,0x9a,0x4f,0x20,0x7b,0xd8,0x92,0x84,0x25,0xa8,0x82,0x7b,0xf8 };
    const uint8_t CIPHERTEXT[] = { 0x7c,0x69,0x44,0x6d,0x27,0x4d,0xfb,0xd7,0xe7,0x0d,0x10,0xd0,0xef,0x1d,0x0b,0xb0 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-17", "[CFB128][MCT][128][DECRYPT][n17]") {
    const uint8_t KEY[] = { 0x06,0xb1,0x6d,0xed,0xa6,0x7d,0xfe,0xdb,0x06,0xf7,0xbb,0x7f,0xc5,0x1e,0xcc,0xdf };
    const uint8_t IV[] = { 0x9b,0x37,0x7b,0x37,0x9a,0x4f,0x20,0x7b,0xd8,0x92,0x84,0x25,0xa8,0x82,0x7b,0xf8 };
    const uint8_t PLAINTEXT[] = { 0xfd,0xe8,0x42,0x40,0x66,0x7f,0xa1,0x4b,0xab,0x43,0x14,0x20,0xd9,0xf6,0xb9,0xa5 };
    const uint8_t CIPHERTEXT[] = { 0x8b,0xf5,0x00,0x9f,0xc4,0xca,0x01,0x94,0xfa,0x67,0x19,0x9d,0x2c,0x42,0x34,0x93 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-18", "[CFB128][MCT][128][DECRYPT][n18]") {
    const uint8_t KEY[] = { 0xfb,0x59,0x2f,0xad,0xc0,0x02,0x5f,0x90,0xad,0xb4,0xaf,0x5f,0x1c,0xe8,0x75,0x7a };
    const uint8_t IV[] = { 0xfd,0xe8,0x42,0x40,0x66,0x7f,0xa1,0x4b,0xab,0x43,0x14,0x20,0xd9,0xf6,0xb9,0xa5 };
    const uint8_t PLAINTEXT[] = { 0xe9,0xaa,0xa8,0xf1,0x31,0x44,0x7b,0xba,0x00,0x96,0xf7,0x7d,0x46,0x55,0x6a,0xa3 };
    const uint8_t CIPHERTEXT[] = { 0x0e,0xb8,0x70,0xba,0x48,0x08,0x30,0x8b,0x5f,0x64,0x8c,0x7b,0xed,0x8a,0xcd,0xd5 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-19", "[CFB128][MCT][128][DECRYPT][n19]") {
    const uint8_t KEY[] = { 0x12,0xf3,0x87,0x5c,0xf1,0x46,0x24,0x2a,0xad,0x22,0x58,0x22,0x5a,0xbd,0x1f,0xd9 };
    const uint8_t IV[] = { 0xe9,0xaa,0xa8,0xf1,0x31,0x44,0x7b,0xba,0x00,0x96,0xf7,0x7d,0x46,0x55,0x6a,0xa3 };
    const uint8_t PLAINTEXT[] = { 0x23,0x75,0x85,0x59,0x01,0x93,0xfc,0xf9,0x8a,0x83,0xe0,0x20,0xa9,0xd5,0x34,0x23 };
    const uint8_t CIPHERTEXT[] = { 0xf6,0xfd,0xe8,0x23,0x42,0x06,0xc0,0x54,0x7c,0x17,0x20,0xe6,0x21,0xd7,0x4b,0x1c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-20", "[CFB128][MCT][128][DECRYPT][n20]") {
    const uint8_t KEY[] = { 0x31,0x86,0x02,0x05,0xf0,0xd5,0xd8,0xd3,0x27,0xa1,0xb8,0x02,0xf3,0x68,0x2b,0xfa };
    const uint8_t IV[] = { 0x23,0x75,0x85,0x59,0x01,0x93,0xfc,0xf9,0x8a,0x83,0xe0,0x20,0xa9,0xd5,0x34,0x23 };
    const uint8_t PLAINTEXT[] = { 0x39,0xc4,0x5d,0xaf,0x17,0x00,0x9a,0xed,0xcd,0x6f,0x4a,0xec,0xb4,0x06,0x76,0x0d };
    const uint8_t CIPHERTEXT[] = { 0x88,0x17,0x78,0xf6,0x38,0x53,0xd5,0x9b,0xef,0xb4,0xcb,0x50,0xa7,0x72,0x2c,0x8b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-21", "[CFB128][MCT][128][DECRYPT][n21]") {
    const uint8_t KEY[] = { 0x08,0x42,0x5f,0xaa,0xe7,0xd5,0x42,0x3e,0xea,0xce,0xf2,0xee,0x47,0x6e,0x5d,0xf7 };
    const uint8_t IV[] = { 0x39,0xc4,0x5d,0xaf,0x17,0x00,0x9a,0xed,0xcd,0x6f,0x4a,0xec,0xb4,0x06,0x76,0x0d };
    const uint8_t PLAINTEXT[] = { 0xa2,0xfc,0x16,0xa0,0x9d,0xa3,0xde,0xfc,0x76,0xe2,0x42,0x45,0x8a,0xd7,0x9c,0xdc };
    const uint8_t CIPHERTEXT[] = { 0xd6,0x7a,0x32,0x48,0xcf,0x19,0xf3,0xe1,0x0a,0x01,0x1e,0x3f,0x41,0x79,0xbb,0xea };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-22", "[CFB128][MCT][128][DECRYPT][n22]") {
    const uint8_t KEY[] = { 0xaa,0xbe,0x49,0x0a,0x7a,0x76,0x9c,0xc2,0x9c,0x2c,0xb0,0xab,0xcd,0xb9,0xc1,0x2b };
    const uint8_t IV[] = { 0xa2,0xfc,0x16,0xa0,0x9d,0xa3,0xde,0xfc,0x76,0xe2,0x42,0x45,0x8a,0xd7,0x9c,0xdc };
    const uint8_t PLAINTEXT[] = { 0xa9,0x8a,0x47,0xee,0xb1,0x73,0xb0,0x42,0xc8,0x5d,0x47,0x8b,0x0e,0xed,0x91,0xac };
    const uint8_t CIPHERTEXT[] = { 0xa9,0x87,0xe6,0xe5,0x7b,0xe2,0x42,0xb6,0xe9,0xa6,0xdb,0x86,0xd0,0xad,0xa1,0x11 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-23", "[CFB128][MCT][128][DECRYPT][n23]") {
    const uint8_t KEY[] = { 0x03,0x34,0x0e,0xe4,0xcb,0x05,0x2c,0x80,0x54,0x71,0xf7,0x20,0xc3,0x54,0x50,0x87 };
    const uint8_t IV[] = { 0xa9,0x8a,0x47,0xee,0xb1,0x73,0xb0,0x42,0xc8,0x5d,0x47,0x8b,0x0e,0xed,0x91,0xac };
    const uint8_t PLAINTEXT[] = { 0xc0,0xb3,0xd1,0xe7,0xd4,0x9e,0xf6,0x16,0x62,0xc2,0xf5,0x65,0x90,0xbb,0x02,0xf4 };
    const uint8_t CIPHERTEXT[] = { 0xbb,0x46,0x9d,0xf9,0x40,0x6e,0x1c,0xa8,0xdd,0x40,0x3a,0xe1,0x1d,0x8e,0x91,0x2e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-24", "[CFB128][MCT][128][DECRYPT][n24]") {
    const uint8_t KEY[] = { 0xc3,0x87,0xdf,0x03,0x1f,0x9b,0xda,0x96,0x36,0xb3,0x02,0x45,0x53,0xef,0x52,0x73 };
    const uint8_t IV[] = { 0xc0,0xb3,0xd1,0xe7,0xd4,0x9e,0xf6,0x16,0x62,0xc2,0xf5,0x65,0x90,0xbb,0x02,0xf4 };
    const uint8_t PLAINTEXT[] = { 0x2b,0x5b,0xc3,0x0d,0xdc,0x3e,0x9a,0xd9,0x3c,0x4f,0xb6,0x6a,0x99,0x2b,0x9a,0x13 };
    const uint8_t CIPHERTEXT[] = { 0xec,0x10,0x55,0xd4,0x19,0x5c,0xf2,0xe9,0xaa,0xcd,0xa6,0x48,0xea,0x96,0x2c,0xc4 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-25", "[CFB128][MCT][128][DECRYPT][n25]") {
    const uint8_t KEY[] = { 0xe8,0xdc,0x1c,0x0e,0xc3,0xa5,0x40,0x4f,0x0a,0xfc,0xb4,0x2f,0xca,0xc4,0xc8,0x60 };
    const uint8_t IV[] = { 0x2b,0x5b,0xc3,0x0d,0xdc,0x3e,0x9a,0xd9,0x3c,0x4f,0xb6,0x6a,0x99,0x2b,0x9a,0x13 };
    const uint8_t PLAINTEXT[] = { 0x93,0x0a,0x03,0xa2,0x80,0x25,0x45,0x73,0x94,0xaa,0x9c,0x0c,0xd3,0xf4,0x6e,0x20 };
    const uint8_t CIPHERTEXT[] = { 0xa6,0xe1,0x9f,0xdd,0x97,0x96,0x19,0xf8,0x6b,0x34,0x1c,0x1e,0xf8,0xac,0x5c,0x0c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-26", "[CFB128][MCT][128][DECRYPT][n26]") {
    const uint8_t KEY[] = { 0x7b,0xd6,0x1f,0xac,0x43,0x80,0x05,0x3c,0x9e,0x56,0x28,0x23,0x19,0x30,0xa6,0x40 };
    const uint8_t IV[] = { 0x93,0x0a,0x03,0xa2,0x80,0x25,0x45,0x73,0x94,0xaa,0x9c,0x0c,0xd3,0xf4,0x6e,0x20 };
    const uint8_t PLAINTEXT[] = { 0xaa,0x3e,0x98,0xe0,0xc7,0xcd,0xb0,0x41,0xc7,0x93,0xc7,0x47,0xe2,0x36,0xd8,0x4b };
    const uint8_t CIPHERTEXT[] = { 0x43,0xb8,0x49,0xe5,0x5d,0xeb,0xf7,0x9f,0xb4,0x41,0x01,0x8a,0xa4,0x41,0x9a,0x58 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-27", "[CFB128][MCT][128][DECRYPT][n27]") {
    const uint8_t KEY[] = { 0xd1,0xe8,0x87,0x4c,0x84,0x4d,0xb5,0x7d,0x59,0xc5,0xef,0x64,0xfb,0x06,0x7e,0x0b };
    const uint8_t IV[] = { 0xaa,0x3e,0x98,0xe0,0xc7,0xcd,0xb0,0x41,0xc7,0x93,0xc7,0x47,0xe2,0x36,0xd8,0x4b };
    const uint8_t PLAINTEXT[] = { 0x7b,0x01,0x3b,0x8b,0xf8,0xba,0x02,0xd8,0x08,0xdc,0x20,0x88,0xf2,0x7b,0x08,0xa9 };
    const uint8_t CIPHERTEXT[] = { 0xa5,0xbf,0x76,0x18,0x4d,0x4a,0xe0,0x50,0x9a,0xb7,0xd4,0x06,0x69,0x1c,0xcd,0xd7 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-28", "[CFB128][MCT][128][DECRYPT][n28]") {
    const uint8_t KEY[] = { 0xaa,0xe9,0xbc,0xc7,0x7c,0xf7,0xb7,0xa5,0x51,0x19,0xcf,0xec,0x09,0x7d,0x76,0xa2 };
    const uint8_t IV[] = { 0x7b,0x01,0x3b,0x8b,0xf8,0xba,0x02,0xd8,0x08,0xdc,0x20,0x88,0xf2,0x7b,0x08,0xa9 };
    const uint8_t PLAINTEXT[] = { 0xff,0x19,0xc7,0xf1,0x7d,0xe2,0x6c,0x48,0x04,0x47,0x2e,0x94,0xc8,0xa7,0x05,0x89 };
    const uint8_t CIPHERTEXT[] = { 0x2d,0x0f,0xa5,0x15,0x7b,0xfd,0x13,0x86,0x8b,0xda,0x20,0x71,0xfc,0xde,0x1f,0x09 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-29", "[CFB128][MCT][128][DECRYPT][n29]") {
    const uint8_t KEY[] = { 0x55,0xf0,0x7b,0x36,0x01,0x15,0xdb,0xed,0x55,0x5e,0xe1,0x78,0xc1,0xda,0x73,0x2b };
    const uint8_t IV[] = { 0xff,0x19,0xc7,0xf1,0x7d,0xe2,0x6c,0x48,0x04,0x47,0x2e,0x94,0xc8,0xa7,0x05,0x89 };
    const uint8_t PLAINTEXT[] = { 0xba,0xc8,0xf0,0x73,0xbb,0x30,0x57,0x44,0x2d,0xa3,0x0c,0x21,0x33,0xa3,0x8b,0xb3 };
    const uint8_t CIPHERTEXT[] = { 0x6c,0xce,0xed,0x8a,0x80,0xad,0x55,0xe8,0x0d,0x46,0x0b,0x6b,0xe2,0x39,0xab,0x79 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-30", "[CFB128][MCT][128][DECRYPT][n30]") {
    const uint8_t KEY[] = { 0xef,0x38,0x8b,0x45,0xba,0x25,0x8c,0xa9,0x78,0xfd,0xed,0x59,0xf2,0x79,0xf8,0x98 };
    const uint8_t IV[] = { 0xba,0xc8,0xf0,0x73,0xbb,0x30,0x57,0x44,0x2d,0xa3,0x0c,0x21,0x33,0xa3,0x8b,0xb3 };
    const uint8_t PLAINTEXT[] = { 0x69,0xe0,0x15,0x3d,0x4f,0x59,0x9e,0xea,0x75,0xbb,0xc7,0x2e,0xce,0xc6,0xbe,0xc2 };
    const uint8_t CIPHERTEXT[] = { 0x46,0x69,0x8e,0x4f,0x8f,0x82,0xf4,0x98,0xd2,0x2e,0x12,0x3c,0x5f,0xe1,0x57,0xd7 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-31", "[CFB128][MCT][128][DECRYPT][n31]") {
    const uint8_t KEY[] = { 0x86,0xd8,0x9e,0x78,0xf5,0x7c,0x12,0x43,0x0d,0x46,0x2a,0x77,0x3c,0xbf,0x46,0x5a };
    const uint8_t IV[] = { 0x69,0xe0,0x15,0x3d,0x4f,0x59,0x9e,0xea,0x75,0xbb,0xc7,0x2e,0xce,0xc6,0xbe,0xc2 };
    const uint8_t PLAINTEXT[] = { 0x3d,0x40,0x5e,0xed,0x44,0xe5,0xc7,0x33,0x0c,0x1d,0x00,0x1f,0xbb,0xdf,0xe2,0xf8 };
    const uint8_t CIPHERTEXT[] = { 0x43,0x3d,0xf5,0x47,0x09,0xc5,0xca,0xc6,0x69,0xaf,0x02,0x56,0xcc,0xe0,0x77,0xa9 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-32", "[CFB128][MCT][128][DECRYPT][n32]") {
    const uint8_t KEY[] = { 0xbb,0x98,0xc0,0x95,0xb1,0x99,0xd5,0x70,0x01,0x5b,0x2a,0x68,0x87,0x60,0xa4,0xa2 };
    const uint8_t IV[] = { 0x3d,0x40,0x5e,0xed,0x44,0xe5,0xc7,0x33,0x0c,0x1d,0x00,0x1f,0xbb,0xdf,0xe2,0xf8 };
    const uint8_t PLAINTEXT[] = { 0xcd,0x55,0x18,0x67,0x15,0x64,0xa9,0x87,0xc1,0x85,0x10,0x0b,0x27,0xb3,0xc3,0x6c };
    const uint8_t CIPHERTEXT[] = { 0x6b,0xc6,0xfa,0x97,0x5e,0x5a,0xc5,0xf3,0x01,0x4f,0xc6,0xcf,0x7c,0x2f,0x0d,0xb6 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-33", "[CFB128][MCT][128][DECRYPT][n33]") {
    const uint8_t KEY[] = { 0x76,0xcd,0xd8,0xf2,0xa4,0xfd,0x7c,0xf7,0xc0,0xde,0x3a,0x63,0xa0,0xd3,0x67,0xce };
    const uint8_t IV[] = { 0xcd,0x55,0x18,0x67,0x15,0x64,0xa9,0x87,0xc1,0x85,0x10,0x0b,0x27,0xb3,0xc3,0x6c };
    const uint8_t PLAINTEXT[] = { 0x55,0x00,0xfa,0x05,0x73,0x97,0x67,0x9d,0x41,0x45,0x5a,0x90,0x58,0x89,0xb0,0x13 };
    const uint8_t CIPHERTEXT[] = { 0x42,0x3d,0xc6,0x2b,0xdc,0x54,0xc6,0x5b,0x1c,0x3f,0xcd,0x96,0xaa,0xa8,0x05,0xeb };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-34", "[CFB128][MCT][128][DECRYPT][n34]") {
    const uint8_t KEY[] = { 0x23,0xcd,0x22,0xf7,0xd7,0x6a,0x1b,0x6a,0x81,0x9b,0x60,0xf3,0xf8,0x5a,0xd7,0xdd };
    const uint8_t IV[] = { 0x55,0x00,0xfa,0x05,0x73,0x97,0x67,0x9d,0x41,0x45,0x5a,0x90,0x58,0x89,0xb0,0x13 };
    const uint8_t PLAINTEXT[] = { 0x11,0x4f,0xf4,0xc8,0xfb,0xbf,0x92,0xd0,0xc5,0x92,0x03,0x46,0x2e,0xd5,0xc6,0x6c };
    const uint8_t CIPHERTEXT[] = { 0x76,0x28,0xc7,0x99,0xda,0x9c,0x82,0xc0,0x6a,0xad,0xd4,0x0e,0x64,0xa3,0x49,0xd8 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-35", "[CFB128][MCT][128][DECRYPT][n35]") {
    const uint8_t KEY[] = { 0x32,0x82,0xd6,0x3f,0x2c,0xd5,0x89,0xba,0x44,0x09,0x63,0xb5,0xd6,0x8f,0x11,0xb1 };
    const uint8_t IV[] = { 0x11,0x4f,0xf4,0xc8,0xfb,0xbf,0x92,0xd0,0xc5,0x92,0x03,0x46,0x2e,0xd5,0xc6,0x6c };
    const uint8_t PLAINTEXT[] = { 0x7c,0xf6,0xa7,0x76,0x2b,0x0c,0xbe,0x0a,0x0f,0x41,0x8e,0x75,0x88,0x8a,0xcc,0x3f };
    const uint8_t CIPHERTEXT[] = { 0x2a,0xc5,0x98,0x53,0x59,0xdd,0xe8,0xa6,0x99,0xee,0x25,0xc1,0x57,0x65,0xaf,0x87 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-36", "[CFB128][MCT][128][DECRYPT][n36]") {
    const uint8_t KEY[] = { 0x4e,0x74,0x71,0x49,0x07,0xd9,0x37,0xb0,0x4b,0x48,0xed,0xc0,0x5e,0x05,0xdd,0x8e };
    const uint8_t IV[] = { 0x7c,0xf6,0xa7,0x76,0x2b,0x0c,0xbe,0x0a,0x0f,0x41,0x8e,0x75,0x88,0x8a,0xcc,0x3f };
    const uint8_t PLAINTEXT[] = { 0xad,0xed,0x93,0xe2,0xfc,0xdd,0x1f,0xe2,0x48,0xb9,0x78,0x2e,0x55,0x40,0x3e,0x4c };
    const uint8_t CIPHERTEXT[] = { 0xa4,0x6d,0x8c,0x24,0xa7,0xd7,0x61,0xf9,0x7f,0xea,0xfb,0x09,0x6a,0xfd,0x3e,0x12 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-37", "[CFB128][MCT][128][DECRYPT][n37]") {
    const uint8_t KEY[] = { 0xe3,0x99,0xe2,0xab,0xfb,0x04,0x28,0x52,0x03,0xf1,0x95,0xee,0x0b,0x45,0xe3,0xc2 };
    const uint8_t IV[] = { 0xad,0xed,0x93,0xe2,0xfc,0xdd,0x1f,0xe2,0x48,0xb9,0x78,0x2e,0x55,0x40,0x3e,0x4c };
    const uint8_t PLAINTEXT[] = { 0xa9,0xad,0x52,0xb7,0x2c,0x2e,0x4b,0x79,0x76,0xa0,0x6f,0xdf,0x9b,0x84,0x33,0x3d };
    const uint8_t CIPHERTEXT[] = { 0x16,0x98,0x8a,0x2b,0xc9,0xf3,0x23,0x28,0x25,0xa2,0x64,0xef,0xcc,0x8e,0x94,0x03 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-38", "[CFB128][MCT][128][DECRYPT][n38]") {
    const uint8_t KEY[] = { 0x4a,0x34,0xb0,0x1c,0xd7,0x2a,0x63,0x2b,0x75,0x51,0xfa,0x31,0x90,0xc1,0xd0,0xff };
    const uint8_t IV[] = { 0xa9,0xad,0x52,0xb7,0x2c,0x2e,0x4b,0x79,0x76,0xa0,0x6f,0xdf,0x9b,0x84,0x33,0x3d };
    const uint8_t PLAINTEXT[] = { 0x31,0xc6,0xd6,0x11,0x70,0xc8,0x95,0x80,0x3d,0x6e,0xa6,0xa3,0x8b,0x46,0x79,0x31 };
    const uint8_t CIPHERTEXT[] = { 0x10,0xa0,0x8c,0xaf,0xe7,0x84,0xa2,0x7e,0x40,0x47,0x5d,0x7b,0xcf,0x92,0x6b,0x92 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-39", "[CFB128][MCT][128][DECRYPT][n39]") {
    const uint8_t KEY[] = { 0x7b,0xf2,0x66,0x0d,0xa7,0xe2,0xf6,0xab,0x48,0x3f,0x5c,0x92,0x1b,0x87,0xa9,0xce };
    const uint8_t IV[] = { 0x31,0xc6,0xd6,0x11,0x70,0xc8,0x95,0x80,0x3d,0x6e,0xa6,0xa3,0x8b,0x46,0x79,0x31 };
    const uint8_t PLAINTEXT[] = { 0x0d,0x5c,0xef,0x5e,0x5b,0xd7,0x4b,0xf8,0xf6,0x69,0x06,0x6d,0x72,0x8b,0x4f,0x79 };
    const uint8_t CIPHERTEXT[] = { 0x5c,0x95,0x5e,0xb7,0xc3,0x89,0x38,0xed,0x68,0x12,0xe6,0x59,0x47,0xf1,0xfc,0xf6 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-40", "[CFB128][MCT][128][DECRYPT][n40]") {
    const uint8_t KEY[] = { 0x76,0xae,0x89,0x53,0xfc,0x35,0xbd,0x53,0xbe,0x56,0x5a,0xff,0x69,0x0c,0xe6,0xb7 };
    const uint8_t IV[] = { 0x0d,0x5c,0xef,0x5e,0x5b,0xd7,0x4b,0xf8,0xf6,0x69,0x06,0x6d,0x72,0x8b,0x4f,0x79 };
    const uint8_t PLAINTEXT[] = { 0x00,0x44,0x1b,0xbb,0xdd,0xdd,0xe1,0x7a,0x51,0x9a,0xfe,0xd9,0xc0,0x26,0x60,0x65 };
    const uint8_t CIPHERTEXT[] = { 0x0f,0x26,0x23,0xb9,0xf9,0xd1,0x9c,0x45,0xda,0x00,0xd0,0xce,0x6e,0x98,0xc5,0x33 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-41", "[CFB128][MCT][128][DECRYPT][n41]") {
    const uint8_t KEY[] = { 0x76,0xea,0x92,0xe8,0x21,0xe8,0x5c,0x29,0xef,0xcc,0xa4,0x26,0xa9,0x2a,0x86,0xd2 };
    const uint8_t IV[] = { 0x00,0x44,0x1b,0xbb,0xdd,0xdd,0xe1,0x7a,0x51,0x9a,0xfe,0xd9,0xc0,0x26,0x60,0x65 };
    const uint8_t PLAINTEXT[] = { 0xb2,0x12,0xb7,0x9a,0xbc,0x14,0xd9,0x0a,0xb4,0x6b,0x3b,0x60,0x98,0x96,0xb4,0xd5 };
    const uint8_t CIPHERTEXT[] = { 0xd1,0x36,0xb0,0x7e,0x25,0xb1,0x2a,0xf7,0x12,0xfe,0x4d,0x48,0xa8,0xa0,0x89,0xbd };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-42", "[CFB128][MCT][128][DECRYPT][n42]") {
    const uint8_t KEY[] = { 0xc4,0xf8,0x25,0x72,0x9d,0xfc,0x85,0x23,0x5b,0xa7,0x9f,0x46,0x31,0xbc,0x32,0x07 };
    const uint8_t IV[] = { 0xb2,0x12,0xb7,0x9a,0xbc,0x14,0xd9,0x0a,0xb4,0x6b,0x3b,0x60,0x98,0x96,0xb4,0xd5 };
    const uint8_t PLAINTEXT[] = { 0x88,0x6e,0xb1,0x48,0x76,0x4b,0x37,0xd6,0x3b,0x2b,0x70,0xf0,0xe3,0x21,0x3f,0x7c };
    const uint8_t CIPHERTEXT[] = { 0x42,0x95,0xd8,0xc1,0xf9,0x4c,0xb6,0xab,0x1c,0xd3,0x19,0xba,0x22,0x59,0x27,0x8e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-43", "[CFB128][MCT][128][DECRYPT][n43]") {
    const uint8_t KEY[] = { 0x4c,0x96,0x94,0x3a,0xeb,0xb7,0xb2,0xf5,0x60,0x8c,0xef,0xb6,0xd2,0x9d,0x0d,0x7b };
    const uint8_t IV[] = { 0x88,0x6e,0xb1,0x48,0x76,0x4b,0x37,0xd6,0x3b,0x2b,0x70,0xf0,0xe3,0x21,0x3f,0x7c };
    const uint8_t PLAINTEXT[] = { 0xbd,0xac,0xb0,0x4e,0x5f,0x72,0x51,0x0b,0xfc,0x86,0x95,0xe9,0xb3,0x8c,0x34,0x05 };
    const uint8_t CIPHERTEXT[] = { 0xa2,0x0f,0x5b,0x09,0x4c,0xf3,0x2b,0x38,0x0f,0x15,0xeb,0x68,0x8e,0x9c,0x33,0xc5 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-44", "[CFB128][MCT][128][DECRYPT][n44]") {
    const uint8_t KEY[] = { 0xf1,0x3a,0x24,0x74,0xb4,0xc5,0xe3,0xfe,0x9c,0x0a,0x7a,0x5f,0x61,0x11,0x39,0x7e };
    const uint8_t IV[] = { 0xbd,0xac,0xb0,0x4e,0x5f,0x72,0x51,0x0b,0xfc,0x86,0x95,0xe9,0xb3,0x8c,0x34,0x05 };
    const uint8_t PLAINTEXT[] = { 0x12,0xf2,0x39,0x03,0x8d,0x66,0x4c,0xf4,0x2d,0x88,0x94,0x4b,0x12,0xf7,0xd6,0xcd };
    const uint8_t CIPHERTEXT[] = { 0x60,0x94,0x57,0x63,0xda,0x80,0x47,0xd8,0x2a,0xac,0x58,0x12,0x4a,0xf2,0xb0,0xe7 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-45", "[CFB128][MCT][128][DECRYPT][n45]") {
    const uint8_t KEY[] = { 0xe3,0xc8,0x1d,0x77,0x39,0xa3,0xaf,0x0a,0xb1,0x82,0xee,0x14,0x73,0xe6,0xef,0xb3 };
    const uint8_t IV[] = { 0x12,0xf2,0x39,0x03,0x8d,0x66,0x4c,0xf4,0x2d,0x88,0x94,0x4b,0x12,0xf7,0xd6,0xcd };
    const uint8_t PLAINTEXT[] = { 0x0c,0xdc,0x74,0xc1,0xa6,0x9b,0x64,0x8a,0x5c,0xf2,0x8f,0xc9,0x30,0xbe,0x61,0x08 };
    const uint8_t CIPHERTEXT[] = { 0x02,0x7c,0xe8,0x2a,0x88,0xe9,0x93,0xfd,0x7d,0xe3,0x1e,0x67,0x60,0x89,0x4a,0xed };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-46", "[CFB128][MCT][128][DECRYPT][n46]") {
    const uint8_t KEY[] = { 0xef,0x14,0x69,0xb6,0x9f,0x38,0xcb,0x80,0xed,0x70,0x61,0xdd,0x43,0x58,0x8e,0xbb };
    const uint8_t IV[] = { 0x0c,0xdc,0x74,0xc1,0xa6,0x9b,0x64,0x8a,0x5c,0xf2,0x8f,0xc9,0x30,0xbe,0x61,0x08 };
    const uint8_t PLAINTEXT[] = { 0x8e,0x4a,0xbd,0x8e,0x91,0x42,0x17,0xdd,0x95,0xac,0x11,0xf4,0xbc,0xf0,0x54,0xde };
    const uint8_t CIPHERTEXT[] = { 0x89,0x74,0x6b,0x77,0x2b,0x9c,0xef,0xcf,0x00,0x70,0x77,0xc1,0x8e,0x40,0x41,0xff };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-47", "[CFB128][MCT][128][DECRYPT][n47]") {
    const uint8_t KEY[] = { 0x61,0x5e,0xd4,0x38,0x0e,0x7a,0xdc,0x5d,0x78,0xdc,0x70,0x29,0xff,0xa8,0xda,0x65 };
    const uint8_t IV[] = { 0x8e,0x4a,0xbd,0x8e,0x91,0x42,0x17,0xdd,0x95,0xac,0x11,0xf4,0xbc,0xf0,0x54,0xde };
    const uint8_t PLAINTEXT[] = { 0x51,0xfb,0x63,0x4e,0xb1,0xad,0x18,0x49,0xae,0xfa,0x8d,0x53,0xa4,0x0a,0x7e,0x27 };
    const uint8_t CIPHERTEXT[] = { 0xfc,0xcd,0xcd,0x8c,0x2a,0x85,0xcb,0xbf,0xdd,0xbb,0xd7,0x8d,0xe1,0x11,0xcc,0x0e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-48", "[CFB128][MCT][128][DECRYPT][n48]") {
    const uint8_t KEY[] = { 0x30,0xa5,0xb7,0x76,0xbf,0xd7,0xc4,0x14,0xd6,0x26,0xfd,0x7a,0x5b,0xa2,0xa4,0x42 };
    const uint8_t IV[] = { 0x51,0xfb,0x63,0x4e,0xb1,0xad,0x18,0x49,0xae,0xfa,0x8d,0x53,0xa4,0x0a,0x7e,0x27 };
    const uint8_t PLAINTEXT[] = { 0xc9,0x3e,0x18,0x74,0xe6,0x92,0xab,0x8c,0x1f,0x16,0x2f,0xe1,0xe8,0xa3,0x1e,0x07 };
    const uint8_t CIPHERTEXT[] = { 0xba,0xe6,0x9c,0xdc,0xf4,0x8a,0x5e,0xa6,0xca,0xe2,0x73,0xf2,0x7c,0xcc,0xb7,0x3c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-49", "[CFB128][MCT][128][DECRYPT][n49]") {
    const uint8_t KEY[] = { 0xf9,0x9b,0xaf,0x02,0x59,0x45,0x6f,0x98,0xc9,0x30,0xd2,0x9b,0xb3,0x01,0xba,0x45 };
    const uint8_t IV[] = { 0xc9,0x3e,0x18,0x74,0xe6,0x92,0xab,0x8c,0x1f,0x16,0x2f,0xe1,0xe8,0xa3,0x1e,0x07 };
    const uint8_t PLAINTEXT[] = { 0xdd,0xa9,0x2c,0xa6,0xeb,0x90,0xa7,0x28,0x5b,0xdb,0x5f,0xd2,0xbe,0xac,0x3c,0xd8 };
    const uint8_t CIPHERTEXT[] = { 0xf7,0x9c,0x26,0x5e,0x57,0xae,0xd1,0x95,0x9a,0x46,0x32,0x17,0xa3,0x2d,0x4c,0x6e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-50", "[CFB128][MCT][128][DECRYPT][n50]") {
    const uint8_t KEY[] = { 0x24,0x32,0x83,0xa4,0xb2,0xd5,0xc8,0xb0,0x92,0xeb,0x8d,0x49,0x0d,0xad,0x86,0x9d };
    const uint8_t IV[] = { 0xdd,0xa9,0x2c,0xa6,0xeb,0x90,0xa7,0x28,0x5b,0xdb,0x5f,0xd2,0xbe,0xac,0x3c,0xd8 };
    const uint8_t PLAINTEXT[] = { 0xfe,0x0b,0x7c,0x60,0xa2,0x96,0xeb,0x98,0xd0,0xb5,0x22,0x29,0xee,0x39,0x75,0x2b };
    const uint8_t CIPHERTEXT[] = { 0x70,0x67,0xeb,0x49,0x06,0x95,0x16,0xf8,0x59,0x0d,0x12,0x15,0x95,0x18,0x01,0xfe };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-51", "[CFB128][MCT][128][DECRYPT][n51]") {
    const uint8_t KEY[] = { 0xda,0x39,0xff,0xc4,0x10,0x43,0x23,0x28,0x42,0x5e,0xaf,0x60,0xe3,0x94,0xf3,0xb6 };
    const uint8_t IV[] = { 0xfe,0x0b,0x7c,0x60,0xa2,0x96,0xeb,0x98,0xd0,0xb5,0x22,0x29,0xee,0x39,0x75,0x2b };
    const uint8_t PLAINTEXT[] = { 0x06,0xfb,0x1c,0x4e,0xa7,0xa2,0x6c,0x24,0x43,0xf8,0x88,0x1f,0x12,0xef,0xb3,0xdf };
    const uint8_t CIPHERTEXT[] = { 0x3e,0x3f,0xa9,0xe5,0x06,0x7f,0xdf,0x23,0x6c,0x12,0x75,0xc5,0x06,0x84,0xeb,0xba };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-52", "[CFB128][MCT][128][DECRYPT][n52]") {
    const uint8_t KEY[] = { 0xdc,0xc2,0xe3,0x8a,0xb7,0xe1,0x4f,0x0c,0x01,0xa6,0x27,0x7f,0xf1,0x7b,0x40,0x69 };
    const uint8_t IV[] = { 0x06,0xfb,0x1c,0x4e,0xa7,0xa2,0x6c,0x24,0x43,0xf8,0x88,0x1f,0x12,0xef,0xb3,0xdf };
    const uint8_t PLAINTEXT[] = { 0xa1,0x0b,0xf7,0xaa,0xa1,0x95,0x8c,0x71,0x08,0x5a,0x3b,0x3a,0x5b,0x7f,0x0d,0xb7 };
    const uint8_t CIPHERTEXT[] = { 0x68,0xa2,0x2c,0x64,0x6b,0x98,0xd5,0xc3,0xe7,0xc1,0x73,0x68,0x75,0x0e,0x1a,0x2a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-53", "[CFB128][MCT][128][DECRYPT][n53]") {
    const uint8_t KEY[] = { 0x7d,0xc9,0x14,0x20,0x16,0x74,0xc3,0x7d,0x09,0xfc,0x1c,0x45,0xaa,0x04,0x4d,0xde };
    const uint8_t IV[] = { 0xa1,0x0b,0xf7,0xaa,0xa1,0x95,0x8c,0x71,0x08,0x5a,0x3b,0x3a,0x5b,0x7f,0x0d,0xb7 };
    const uint8_t PLAINTEXT[] = { 0x44,0x6e,0x3c,0xdd,0x1b,0x5d,0xc0,0x0c,0x1b,0xc9,0x96,0x6c,0xf4,0xe8,0x75,0xea };
    const uint8_t CIPHERTEXT[] = { 0xd3,0x47,0x1f,0xd7,0x4b,0xa9,0x63,0xd3,0x05,0x66,0x6c,0x6d,0x1f,0xb8,0x79,0x4a };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-54", "[CFB128][MCT][128][DECRYPT][n54]") {
    const uint8_t KEY[] = { 0x39,0xa7,0x28,0xfd,0x0d,0x29,0x03,0x71,0x12,0x35,0x8a,0x29,0x5e,0xec,0x38,0x34 };
    const uint8_t IV[] = { 0x44,0x6e,0x3c,0xdd,0x1b,0x5d,0xc0,0x0c,0x1b,0xc9,0x96,0x6c,0xf4,0xe8,0x75,0xea };
    const uint8_t PLAINTEXT[] = { 0xc2,0xd2,0x3e,0x15,0x07,0xb1,0x87,0x7b,0x73,0x2e,0x14,0x02,0xa1,0x7d,0x9b,0xb3 };
    const uint8_t CIPHERTEXT[] = { 0xc3,0xcb,0xa5,0x02,0x00,0x7c,0x09,0x95,0x1c,0x46,0x61,0x4a,0x04,0x3f,0x56,0x55 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-55", "[CFB128][MCT][128][DECRYPT][n55]") {
    const uint8_t KEY[] = { 0xfb,0x75,0x16,0xe8,0x0a,0x98,0x84,0x0a,0x61,0x1b,0x9e,0x2b,0xff,0x91,0xa3,0x87 };
    const uint8_t IV[] = { 0xc2,0xd2,0x3e,0x15,0x07,0xb1,0x87,0x7b,0x73,0x2e,0x14,0x02,0xa1,0x7d,0x9b,0xb3 };
    const uint8_t PLAINTEXT[] = { 0x6b,0xaf,0x09,0x98,0x4d,0xfb,0x74,0x28,0x22,0xab,0x83,0xc0,0x75,0xc6,0xfc,0xf2 };
    const uint8_t CIPHERTEXT[] = { 0x37,0x97,0xcd,0x1c,0x2b,0x5d,0x99,0x00,0x8c,0x8b,0x43,0x69,0x98,0x9e,0x5f,0x79 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-56", "[CFB128][MCT][128][DECRYPT][n56]") {
    const uint8_t KEY[] = { 0x90,0xda,0x1f,0x70,0x47,0x63,0xf0,0x22,0x43,0xb0,0x1d,0xeb,0x8a,0x57,0x5f,0x75 };
    const uint8_t IV[] = { 0x6b,0xaf,0x09,0x98,0x4d,0xfb,0x74,0x28,0x22,0xab,0x83,0xc0,0x75,0xc6,0xfc,0xf2 };
    const uint8_t PLAINTEXT[] = { 0x38,0x10,0x46,0x2c,0x6e,0xbd,0x25,0xfa,0xa2,0x7f,0x3b,0xcc,0x1c,0x13,0xeb,0xd4 };
    const uint8_t CIPHERTEXT[] = { 0xc5,0xbc,0xda,0x80,0xc0,0x0b,0x68,0x9d,0x53,0xeb,0xac,0xf8,0xb3,0x2c,0xa4,0x2b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-57", "[CFB128][MCT][128][DECRYPT][n57]") {
    const uint8_t KEY[] = { 0xa8,0xca,0x59,0x5c,0x29,0xde,0xd5,0xd8,0xe1,0xcf,0x26,0x27,0x96,0x44,0xb4,0xa1 };
    const uint8_t IV[] = { 0x38,0x10,0x46,0x2c,0x6e,0xbd,0x25,0xfa,0xa2,0x7f,0x3b,0xcc,0x1c,0x13,0xeb,0xd4 };
    const uint8_t PLAINTEXT[] = { 0x32,0xc6,0x1a,0xdc,0xed,0x2b,0x0e,0xfe,0x3f,0x97,0x44,0xbd,0x1e,0x7b,0xbc,0x64 };
    const uint8_t CIPHERTEXT[] = { 0x71,0x21,0xdb,0x04,0xc1,0x07,0x30,0x38,0x92,0x10,0xe4,0x34,0xaf,0x4d,0x4c,0x41 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-58", "[CFB128][MCT][128][DECRYPT][n58]") {
    const uint8_t KEY[] = { 0x9a,0x0c,0x43,0x80,0xc4,0xf5,0xdb,0x26,0xde,0x58,0x62,0x9a,0x88,0x3f,0x08,0xc5 };
    const uint8_t IV[] = { 0x32,0xc6,0x1a,0xdc,0xed,0x2b,0x0e,0xfe,0x3f,0x97,0x44,0xbd,0x1e,0x7b,0xbc,0x64 };
    const uint8_t PLAINTEXT[] = { 0x80,0xd8,0xca,0x3b,0x6e,0x7d,0xc5,0x60,0xd5,0x7c,0x0c,0x8a,0x7d,0xd4,0x6a,0x63 };
    const uint8_t CIPHERTEXT[] = { 0x9d,0xbe,0x57,0x26,0xa4,0x9e,0xd2,0x9f,0xe9,0x7b,0xe0,0xa3,0x00,0xc1,0x8e,0x74 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-59", "[CFB128][MCT][128][DECRYPT][n59]") {
    const uint8_t KEY[] = { 0x1a,0xd4,0x89,0xbb,0xaa,0x88,0x1e,0x46,0x0b,0x24,0x6e,0x10,0xf5,0xeb,0x62,0xa6 };
    const uint8_t IV[] = { 0x80,0xd8,0xca,0x3b,0x6e,0x7d,0xc5,0x60,0xd5,0x7c,0x0c,0x8a,0x7d,0xd4,0x6a,0x63 };
    const uint8_t PLAINTEXT[] = { 0x73,0xf2,0x2e,0xff,0xcd,0xaf,0xde,0x40,0x20,0x22,0xe4,0xbb,0x97,0xff,0x1c,0xdf };
    const uint8_t CIPHERTEXT[] = { 0xbc,0xe9,0x4b,0x54,0x72,0x09,0xd4,0x7c,0x7b,0x49,0x4e,0xf4,0x8e,0x61,0x67,0xb3 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-60", "[CFB128][MCT][128][DECRYPT][n60]") {
    const uint8_t KEY[] = { 0x69,0x26,0xa7,0x44,0x67,0x27,0xc0,0x06,0x2b,0x06,0x8a,0xab,0x62,0x14,0x7e,0x79 };
    const uint8_t IV[] = { 0x73,0xf2,0x2e,0xff,0xcd,0xaf,0xde,0x40,0x20,0x22,0xe4,0xbb,0x97,0xff,0x1c,0xdf };
    const uint8_t PLAINTEXT[] = { 0x5f,0xd0,0x13,0x79,0x84,0x8b,0xa8,0x70,0x02,0x79,0xd0,0x07,0xc6,0xe5,0xdc,0x9b };
    const uint8_t CIPHERTEXT[] = { 0x4a,0xe4,0x36,0x46,0x2f,0x42,0xc7,0x4a,0x4a,0x53,0x95,0x3d,0x0d,0x7b,0x8f,0xb4 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-61", "[CFB128][MCT][128][DECRYPT][n61]") {
    const uint8_t KEY[] = { 0x36,0xf6,0xb4,0x3d,0xe3,0xac,0x68,0x76,0x29,0x7f,0x5a,0xac,0xa4,0xf1,0xa2,0xe2 };
    const uint8_t IV[] = { 0x5f,0xd0,0x13,0x79,0x84,0x8b,0xa8,0x70,0x02,0x79,0xd0,0x07,0xc6,0xe5,0xdc,0x9b };
    const uint8_t PLAINTEXT[] = { 0x14,0x2e,0x2f,0xca,0x82,0xdc,0x45,0xff,0x49,0xf7,0x65,0xd0,0x22,0x03,0x92,0xd7 };
    const uint8_t CIPHERTEXT[] = { 0xc9,0x7c,0xd4,0xa4,0x15,0xb4,0xb0,0x27,0x61,0x39,0x5e,0x67,0x00,0x92,0x0e,0x8b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-62", "[CFB128][MCT][128][DECRYPT][n62]") {
    const uint8_t KEY[] = { 0x22,0xd8,0x9b,0xf7,0x61,0x70,0x2d,0x89,0x60,0x88,0x3f,0x7c,0x86,0xf2,0x30,0x35 };
    const uint8_t IV[] = { 0x14,0x2e,0x2f,0xca,0x82,0xdc,0x45,0xff,0x49,0xf7,0x65,0xd0,0x22,0x03,0x92,0xd7 };
    const uint8_t PLAINTEXT[] = { 0x35,0x54,0x64,0x2d,0x3a,0x5b,0x5d,0xcb,0x01,0xfe,0xf5,0xeb,0xd7,0x48,0x43,0xd2 };
    const uint8_t CIPHERTEXT[] = { 0x43,0x73,0xf4,0x3c,0xfd,0x1a,0xbe,0x94,0xc0,0x4e,0xdf,0xcb,0x17,0x1a,0x4a,0xc5 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-63", "[CFB128][MCT][128][DECRYPT][n63]") {
    const uint8_t KEY[] = { 0x17,0x8c,0xff,0xda,0x5b,0x2b,0x70,0x42,0x61,0x76,0xca,0x97,0x51,0xba,0x73,0xe7 };
    const uint8_t IV[] = { 0x35,0x54,0x64,0x2d,0x3a,0x5b,0x5d,0xcb,0x01,0xfe,0xf5,0xeb,0xd7,0x48,0x43,0xd2 };
    const uint8_t PLAINTEXT[] = { 0x4e,0x5b,0xc3,0x01,0xf3,0xf0,0xb4,0x38,0xa5,0xa6,0x7e,0x97,0xb8,0x98,0x7a,0xe7 };
    const uint8_t CIPHERTEXT[] = { 0x09,0x89,0xd5,0xab,0x15,0xf7,0xec,0xed,0xe5,0x13,0x9c,0x92,0xc2,0xde,0x31,0x1f };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-64", "[CFB128][MCT][128][DECRYPT][n64]") {
    const uint8_t KEY[] = { 0x59,0xd7,0x3c,0xdb,0xa8,0xdb,0xc4,0x7a,0xc4,0xd0,0xb4,0x00,0xe9,0x22,0x09,0x00 };
    const uint8_t IV[] = { 0x4e,0x5b,0xc3,0x01,0xf3,0xf0,0xb4,0x38,0xa5,0xa6,0x7e,0x97,0xb8,0x98,0x7a,0xe7 };
    const uint8_t PLAINTEXT[] = { 0x92,0x6a,0x78,0xb9,0x2e,0x46,0x80,0x5b,0x12,0x25,0xf4,0xb4,0x03,0x71,0x37,0x89 };
    const uint8_t CIPHERTEXT[] = { 0x4b,0xd4,0xe9,0xf2,0xf5,0x8c,0x7a,0x7d,0x29,0xdc,0x5a,0x10,0x22,0x12,0xce,0x43 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-65", "[CFB128][MCT][128][DECRYPT][n65]") {
    const uint8_t KEY[] = { 0xcb,0xbd,0x44,0x62,0x86,0x9d,0x44,0x21,0xd6,0xf5,0x40,0xb4,0xea,0x53,0x3e,0x89 };
    const uint8_t IV[] = { 0x92,0x6a,0x78,0xb9,0x2e,0x46,0x80,0x5b,0x12,0x25,0xf4,0xb4,0x03,0x71,0x37,0x89 };
    const uint8_t PLAINTEXT[] = { 0xe7,0x33,0x0e,0xbf,0x7f,0xe9,0xbc,0xb6,0xca,0x79,0x91,0xa6,0xfb,0x10,0xcf,0x80 };
    const uint8_t CIPHERTEXT[] = { 0x49,0xe3,0x05,0x50,0xcc,0x6a,0x9c,0x4d,0x43,0x11,0xcd,0xf7,0x4b,0x07,0x0a,0xad };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-66", "[CFB128][MCT][128][DECRYPT][n66]") {
    const uint8_t KEY[] = { 0x2c,0x8e,0x4a,0xdd,0xf9,0x74,0xf8,0x97,0x1c,0x8c,0xd1,0x12,0x11,0x43,0xf1,0x09 };
    const uint8_t IV[] = { 0xe7,0x33,0x0e,0xbf,0x7f,0xe9,0xbc,0xb6,0xca,0x79,0x91,0xa6,0xfb,0x10,0xcf,0x80 };
    const uint8_t PLAINTEXT[] = { 0xa9,0x3e,0x7f,0x94,0x4c,0x8a,0x00,0xa6,0x2a,0xf9,0x7b,0x77,0xc0,0x12,0x44,0x3a };
    const uint8_t CIPHERTEXT[] = { 0xc1,0xe6,0x15,0x73,0xb2,0x6b,0xa2,0x61,0xd7,0xc9,0x5a,0x19,0x79,0x06,0xdc,0xb3 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-67", "[CFB128][MCT][128][DECRYPT][n67]") {
    const uint8_t KEY[] = { 0x85,0xb0,0x35,0x49,0xb5,0xfe,0xf8,0x31,0x36,0x75,0xaa,0x65,0xd1,0x51,0xb5,0x33 };
    const uint8_t IV[] = { 0xa9,0x3e,0x7f,0x94,0x4c,0x8a,0x00,0xa6,0x2a,0xf9,0x7b,0x77,0xc0,0x12,0x44,0x3a };
    const uint8_t PLAINTEXT[] = { 0x13,0x37,0xf3,0x06,0x4b,0xf4,0xc3,0x59,0x6f,0x48,0xe3,0xcf,0xde,0xd1,0x34,0x26 };
    const uint8_t CIPHERTEXT[] = { 0x83,0x18,0xbd,0xe4,0xc3,0xf5,0x8c,0xff,0x06,0x7c,0x5e,0xce,0xc5,0xd6,0xb9,0xb1 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-68", "[CFB128][MCT][128][DECRYPT][n68]") {
    const uint8_t KEY[] = { 0x96,0x87,0xc6,0x4f,0xfe,0x0a,0x3b,0x68,0x59,0x3d,0x49,0xaa,0x0f,0x80,0x81,0x15 };
    const uint8_t IV[] = { 0x13,0x37,0xf3,0x06,0x4b,0xf4,0xc3,0x59,0x6f,0x48,0xe3,0xcf,0xde,0xd1,0x34,0x26 };
    const uint8_t PLAINTEXT[] = { 0x3f,0x8b,0x46,0x9f,0x48,0x33,0x93,0x8c,0xfc,0xa7,0xe0,0x10,0x0c,0xc7,0x0d,0x05 };
    const uint8_t CIPHERTEXT[] = { 0x02,0xd7,0xb1,0x1d,0x98,0x95,0x94,0xdd,0x70,0xa4,0x5f,0xbb,0x0e,0x13,0x97,0xc5 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-69", "[CFB128][MCT][128][DECRYPT][n69]") {
    const uint8_t KEY[] = { 0xa9,0x0c,0x80,0xd0,0xb6,0x39,0xa8,0xe4,0xa5,0x9a,0xa9,0xba,0x03,0x47,0x8c,0x10 };
    const uint8_t IV[] = { 0x3f,0x8b,0x46,0x9f,0x48,0x33,0x93,0x8c,0xfc,0xa7,0xe0,0x10,0x0c,0xc7,0x0d,0x05 };
    const uint8_t PLAINTEXT[] = { 0xf7,0x85,0x83,0x32,0xfe,0xc4,0xfe,0x2a,0x32,0x89,0x7d,0x86,0x3b,0x83,0xed,0x77 };
    const uint8_t CIPHERTEXT[] = { 0x3e,0xa7,0x52,0x58,0x5a,0x8a,0x32,0x84,0xd3,0x25,0x83,0xb0,0xbf,0x28,0x75,0xe9 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-70", "[CFB128][MCT][128][DECRYPT][n70]") {
    const uint8_t KEY[] = { 0x5e,0x89,0x03,0xe2,0x48,0xfd,0x56,0xce,0x97,0x13,0xd4,0x3c,0x38,0xc4,0x61,0x67 };
    const uint8_t IV[] = { 0xf7,0x85,0x83,0x32,0xfe,0xc4,0xfe,0x2a,0x32,0x89,0x7d,0x86,0x3b,0x83,0xed,0x77 };
    const uint8_t PLAINTEXT[] = { 0xa3,0x86,0xba,0xf3,0xde,0x15,0x86,0x09,0x53,0x2f,0x47,0x9f,0xec,0x05,0x8f,0x1b };
    const uint8_t CIPHERTEXT[] = { 0xb1,0x65,0x58,0xfb,0xf9,0xf4,0x20,0xa0,0x60,0x57,0xc3,0xc5,0xed,0x4f,0x18,0x97 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-71", "[CFB128][MCT][128][DECRYPT][n71]") {
    const uint8_t KEY[] = { 0xfd,0x0f,0xb9,0x11,0x96,0xe8,0xd0,0xc7,0xc4,0x3c,0x93,0xa3,0xd4,0xc1,0xee,0x7c };
    const uint8_t IV[] = { 0xa3,0x86,0xba,0xf3,0xde,0x15,0x86,0x09,0x53,0x2f,0x47,0x9f,0xec,0x05,0x8f,0x1b };
    const uint8_t PLAINTEXT[] = { 0x81,0x7d,0x96,0x5d,0xdb,0x65,0x9e,0x9f,0x0d,0x47,0x65,0x28,0x88,0x3b,0xe9,0xb4 };
    const uint8_t CIPHERTEXT[] = { 0x80,0x67,0x6f,0x9e,0xc7,0xa6,0x1c,0x09,0xe7,0x66,0xdf,0x01,0x6e,0x43,0xf8,0x42 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-72", "[CFB128][MCT][128][DECRYPT][n72]") {
    const uint8_t KEY[] = { 0x7c,0x72,0x2f,0x4c,0x4d,0x8d,0x4e,0x58,0xc9,0x7b,0xf6,0x8b,0x5c,0xfa,0x07,0xc8 };
    const uint8_t IV[] = { 0x81,0x7d,0x96,0x5d,0xdb,0x65,0x9e,0x9f,0x0d,0x47,0x65,0x28,0x88,0x3b,0xe9,0xb4 };
    const uint8_t PLAINTEXT[] = { 0x7f,0x86,0x98,0x42,0xb6,0xe7,0xcc,0xb1,0x06,0x43,0x16,0x5c,0x93,0x15,0x2d,0x5a };
    const uint8_t CIPHERTEXT[] = { 0x0b,0xc9,0x76,0x4d,0xc6,0x93,0x5b,0x5f,0x11,0x5f,0xb2,0x0d,0xae,0x2c,0x59,0x0e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-73", "[CFB128][MCT][128][DECRYPT][n73]") {
    const uint8_t KEY[] = { 0x03,0xf4,0xb7,0x0e,0xfb,0x6a,0x82,0xe9,0xcf,0x38,0xe0,0xd7,0xcf,0xef,0x2a,0x92 };
    const uint8_t IV[] = { 0x7f,0x86,0x98,0x42,0xb6,0xe7,0xcc,0xb1,0x06,0x43,0x16,0x5c,0x93,0x15,0x2d,0x5a };
    const uint8_t PLAINTEXT[] = { 0xce,0x9b,0xef,0x84,0x84,0xbe,0xa6,0x1a,0x0c,0x55,0xe9,0xc6,0x48,0x38,0x09,0xc9 };
    const uint8_t CIPHERTEXT[] = { 0x19,0x93,0x99,0x19,0x10,0xae,0xe2,0x1e,0x9f,0xf4,0x92,0x28,0xc6,0xf8,0xdb,0xe7 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-74", "[CFB128][MCT][128][DECRYPT][n74]") {
    const uint8_t KEY[] = { 0xcd,0x6f,0x58,0x8a,0x7f,0xd4,0x24,0xf3,0xc3,0x6d,0x09,0x11,0x87,0xd7,0x23,0x5b };
    const uint8_t IV[] = { 0xce,0x9b,0xef,0x84,0x84,0xbe,0xa6,0x1a,0x0c,0x55,0xe9,0xc6,0x48,0x38,0x09,0xc9 };
    const uint8_t PLAINTEXT[] = { 0x12,0xe9,0x47,0x12,0xf5,0x9b,0x92,0x64,0xf8,0xdc,0x08,0x3c,0x87,0x04,0x3c,0x85 };
    const uint8_t CIPHERTEXT[] = { 0xca,0x0f,0xc9,0x4c,0x70,0x9e,0xaa,0x79,0x6e,0x78,0x4b,0xba,0xce,0x81,0x4a,0x7b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-75", "[CFB128][MCT][128][DECRYPT][n75]") {
    const uint8_t KEY[] = { 0xdf,0x86,0x1f,0x98,0x8a,0x4f,0xb6,0x97,0x3b,0xb1,0x01,0x2d,0x00,0xd3,0x1f,0xde };
    const uint8_t IV[] = { 0x12,0xe9,0x47,0x12,0xf5,0x9b,0x92,0x64,0xf8,0xdc,0x08,0x3c,0x87,0x04,0x3c,0x85 };
    const uint8_t PLAINTEXT[] = { 0x23,0x20,0xa7,0xc5,0x0d,0xc4,0x64,0x92,0x89,0xaa,0xe8,0xb4,0x7d,0x15,0x32,0xb0 };
    const uint8_t CIPHERTEXT[] = { 0x41,0xa2,0x40,0xd6,0x4c,0x26,0xce,0xe5,0x04,0x98,0x0f,0x0a,0x08,0x00,0xd3,0x14 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-76", "[CFB128][MCT][128][DECRYPT][n76]") {
    const uint8_t KEY[] = { 0xfc,0xa6,0xb8,0x5d,0x87,0x8b,0xd2,0x05,0xb2,0x1b,0xe9,0x99,0x7d,0xc6,0x2d,0x6e };
    const uint8_t IV[] = { 0x23,0x20,0xa7,0xc5,0x0d,0xc4,0x64,0x92,0x89,0xaa,0xe8,0xb4,0x7d,0x15,0x32,0xb0 };
    const uint8_t PLAINTEXT[] = { 0xbd,0x4c,0xee,0x0d,0xe0,0x55,0xfe,0x92,0xaa,0xd7,0x04,0xbc,0x77,0xe0,0xad,0x8c };
    const uint8_t CIPHERTEXT[] = { 0x35,0x8f,0x91,0x2c,0xbe,0xf2,0xe0,0x1f,0x68,0xbc,0x5b,0x2e,0xab,0xc5,0x24,0xdd };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-77", "[CFB128][MCT][128][DECRYPT][n77]") {
    const uint8_t KEY[] = { 0x41,0xea,0x56,0x50,0x67,0xde,0x2c,0x97,0x18,0xcc,0xed,0x25,0x0a,0x26,0x80,0xe2 };
    const uint8_t IV[] = { 0xbd,0x4c,0xee,0x0d,0xe0,0x55,0xfe,0x92,0xaa,0xd7,0x04,0xbc,0x77,0xe0,0xad,0x8c };
    const uint8_t PLAINTEXT[] = { 0xe8,0x49,0x62,0x47,0x60,0xca,0xdc,0xae,0x77,0x25,0xf7,0x4f,0x05,0xf6,0x24,0x77 };
    const uint8_t CIPHERTEXT[] = { 0x9f,0x7f,0x68,0x8c,0xfb,0x44,0x40,0x20,0x1c,0x50,0xb2,0x36,0xb3,0x53,0x7d,0x57 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-78", "[CFB128][MCT][128][DECRYPT][n78]") {
    const uint8_t KEY[] = { 0xa9,0xa3,0x34,0x17,0x07,0x14,0xf0,0x39,0x6f,0xe9,0x1a,0x6a,0x0f,0xd0,0xa4,0x95 };
    const uint8_t IV[] = { 0xe8,0x49,0x62,0x47,0x60,0xca,0xdc,0xae,0x77,0x25,0xf7,0x4f,0x05,0xf6,0x24,0x77 };
    const uint8_t PLAINTEXT[] = { 0xce,0xa3,0x74,0x73,0x52,0x41,0xec,0xc5,0x2b,0xa6,0xc2,0x97,0xec,0xac,0x5e,0x93 };
    const uint8_t CIPHERTEXT[] = { 0x5d,0xac,0x9f,0x88,0xef,0x25,0xbc,0x66,0xe2,0x22,0x62,0x06,0x6a,0x40,0x2b,0x14 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-79", "[CFB128][MCT][128][DECRYPT][n79]") {
    const uint8_t KEY[] = { 0x67,0x00,0x40,0x64,0x55,0x55,0x1c,0xfc,0x44,0x4f,0xd8,0xfd,0xe3,0x7c,0xfa,0x06 };
    const uint8_t IV[] = { 0xce,0xa3,0x74,0x73,0x52,0x41,0xec,0xc5,0x2b,0xa6,0xc2,0x97,0xec,0xac,0x5e,0x93 };
    const uint8_t PLAINTEXT[] = { 0xe0,0x0c,0xbb,0x4f,0x79,0x9f,0xf4,0xce,0x59,0x6a,0x3c,0x39,0xd4,0xc9,0xa4,0x54 };
    const uint8_t CIPHERTEXT[] = { 0xc2,0x33,0x3e,0x4d,0xb8,0x99,0x45,0xbd,0x81,0x47,0xfb,0x7c,0x4e,0x4c,0xa0,0x81 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-80", "[CFB128][MCT][128][DECRYPT][n80]") {
    const uint8_t KEY[] = { 0x87,0x0c,0xfb,0x2b,0x2c,0xca,0xe8,0x32,0x1d,0x25,0xe4,0xc4,0x37,0xb5,0x5e,0x52 };
    const uint8_t IV[] = { 0xe0,0x0c,0xbb,0x4f,0x79,0x9f,0xf4,0xce,0x59,0x6a,0x3c,0x39,0xd4,0xc9,0xa4,0x54 };
    const uint8_t PLAINTEXT[] = { 0x89,0xe8,0x8c,0x80,0x9a,0xfd,0x9a,0x51,0xa2,0x58,0xee,0xd1,0x85,0x41,0x98,0x5f };
    const uint8_t CIPHERTEXT[] = { 0xd9,0xae,0xd5,0x6f,0xd1,0x42,0x30,0x24,0x4f,0x32,0x91,0xc0,0x35,0x04,0xcb,0xdf };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-81", "[CFB128][MCT][128][DECRYPT][n81]") {
    const uint8_t KEY[] = { 0x0e,0xe4,0x77,0xab,0xb6,0x37,0x72,0x63,0xbf,0x7d,0x0a,0x15,0xb2,0xf4,0xc6,0x0d };
    const uint8_t IV[] = { 0x89,0xe8,0x8c,0x80,0x9a,0xfd,0x9a,0x51,0xa2,0x58,0xee,0xd1,0x85,0x41,0x98,0x5f };
    const uint8_t PLAINTEXT[] = { 0x46,0xd9,0xae,0x7e,0x79,0x13,0xaf,0xea,0x3c,0x27,0x7b,0x84,0x54,0x2b,0xd4,0x74 };
    const uint8_t CIPHERTEXT[] = { 0x81,0x74,0x4a,0x7a,0x48,0x0b,0x08,0xfd,0xd9,0xb1,0xaa,0x06,0x90,0x39,0xa6,0x28 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-82", "[CFB128][MCT][128][DECRYPT][n82]") {
    const uint8_t KEY[] = { 0x48,0x3d,0xd9,0xd5,0xcf,0x24,0xdd,0x89,0x83,0x5a,0x71,0x91,0xe6,0xdf,0x12,0x79 };
    const uint8_t IV[] = { 0x46,0xd9,0xae,0x7e,0x79,0x13,0xaf,0xea,0x3c,0x27,0x7b,0x84,0x54,0x2b,0xd4,0x74 };
    const uint8_t PLAINTEXT[] = { 0xe2,0xf1,0xff,0x79,0x6a,0xe9,0x20,0x11,0xba,0x32,0x25,0xbc,0x2f,0xe7,0x05,0x67 };
    const uint8_t CIPHERTEXT[] = { 0x08,0x68,0xf3,0x83,0x75,0xb4,0x2d,0x92,0x75,0xd9,0x11,0x87,0xd5,0x19,0x74,0x1c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-83", "[CFB128][MCT][128][DECRYPT][n83]") {
    const uint8_t KEY[] = { 0xaa,0xcc,0x26,0xac,0xa5,0xcd,0xfd,0x98,0x39,0x68,0x54,0x2d,0xc9,0x38,0x17,0x1e };
    const uint8_t IV[] = { 0xe2,0xf1,0xff,0x79,0x6a,0xe9,0x20,0x11,0xba,0x32,0x25,0xbc,0x2f,0xe7,0x05,0x67 };
    const uint8_t PLAINTEXT[] = { 0x68,0xcb,0x5b,0x34,0x53,0x9b,0xe7,0x5c,0x81,0xea,0xe6,0x63,0xec,0x50,0x0b,0x6f };
    const uint8_t CIPHERTEXT[] = { 0x70,0x5c,0x7f,0x8c,0x4e,0x7d,0x43,0xa5,0x17,0x50,0x89,0xbd,0x7b,0xe9,0xe2,0x09 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-84", "[CFB128][MCT][128][DECRYPT][n84]") {
    const uint8_t KEY[] = { 0xc2,0x07,0x7d,0x98,0xf6,0x56,0x1a,0xc4,0xb8,0x82,0xb2,0x4e,0x25,0x68,0x1c,0x71 };
    const uint8_t IV[] = { 0x68,0xcb,0x5b,0x34,0x53,0x9b,0xe7,0x5c,0x81,0xea,0xe6,0x63,0xec,0x50,0x0b,0x6f };
    const uint8_t PLAINTEXT[] = { 0x46,0x8f,0x13,0x80,0x8a,0x8d,0x58,0x77,0x7d,0xc3,0x0a,0x39,0xae,0x80,0x1a,0x0f };
    const uint8_t CIPHERTEXT[] = { 0x44,0x60,0x7a,0x40,0x6b,0xfa,0x56,0xdd,0x14,0x6c,0xe8,0x50,0x31,0x01,0xce,0xad };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-85", "[CFB128][MCT][128][DECRYPT][n85]") {
    const uint8_t KEY[] = { 0x84,0x88,0x6e,0x18,0x7c,0xdb,0x42,0xb3,0xc5,0x41,0xb8,0x77,0x8b,0xe8,0x06,0x7e };
    const uint8_t IV[] = { 0x46,0x8f,0x13,0x80,0x8a,0x8d,0x58,0x77,0x7d,0xc3,0x0a,0x39,0xae,0x80,0x1a,0x0f };
    const uint8_t PLAINTEXT[] = { 0xa8,0x00,0x4f,0xa2,0x2d,0xeb,0x60,0x14,0x01,0x84,0xb6,0x43,0x9a,0x50,0x11,0xa6 };
    const uint8_t CIPHERTEXT[] = { 0x15,0x74,0x2e,0xa8,0x27,0xec,0xc6,0xfa,0xe3,0x65,0x94,0xc7,0x96,0xeb,0x0e,0x77 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-86", "[CFB128][MCT][128][DECRYPT][n86]") {
    const uint8_t KEY[] = { 0x2c,0x88,0x21,0xba,0x51,0x30,0x22,0xa7,0xc4,0xc5,0x0e,0x34,0x11,0xb8,0x17,0xd8 };
    const uint8_t IV[] = { 0xa8,0x00,0x4f,0xa2,0x2d,0xeb,0x60,0x14,0x01,0x84,0xb6,0x43,0x9a,0x50,0x11,0xa6 };
    const uint8_t PLAINTEXT[] = { 0x13,0xe2,0xe0,0xa9,0x2f,0x76,0xe4,0x0a,0xf7,0xa7,0xf5,0x28,0x42,0x48,0x66,0xac };
    const uint8_t CIPHERTEXT[] = { 0xf8,0x74,0x00,0xd7,0x26,0x6e,0x7c,0x6a,0x09,0x74,0xf7,0x53,0xc9,0xbc,0xc7,0xd1 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-87", "[CFB128][MCT][128][DECRYPT][n87]") {
    const uint8_t KEY[] = { 0x3f,0x6a,0xc1,0x13,0x7e,0x46,0xc6,0xad,0x33,0x62,0xfb,0x1c,0x53,0xf0,0x71,0x74 };
    const uint8_t IV[] = { 0x13,0xe2,0xe0,0xa9,0x2f,0x76,0xe4,0x0a,0xf7,0xa7,0xf5,0x28,0x42,0x48,0x66,0xac };
    const uint8_t PLAINTEXT[] = { 0x5f,0x0f,0x0c,0xd8,0x92,0x1f,0xc3,0xda,0xb0,0x3d,0x01,0xc2,0x9b,0x1c,0x8b,0x57 };
    const uint8_t CIPHERTEXT[] = { 0xa3,0x15,0x85,0xb5,0x68,0xb4,0x15,0xe1,0xe8,0x79,0x47,0x56,0x35,0xde,0xb3,0x6e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-88", "[CFB128][MCT][128][DECRYPT][n88]") {
    const uint8_t KEY[] = { 0x60,0x65,0xcd,0xcb,0xec,0x59,0x05,0x77,0x83,0x5f,0xfa,0xde,0xc8,0xec,0xfa,0x23 };
    const uint8_t IV[] = { 0x5f,0x0f,0x0c,0xd8,0x92,0x1f,0xc3,0xda,0xb0,0x3d,0x01,0xc2,0x9b,0x1c,0x8b,0x57 };
    const uint8_t PLAINTEXT[] = { 0x47,0xe6,0x9e,0xa5,0x61,0xf9,0x4d,0x22,0x26,0x4e,0x8d,0xd5,0xc5,0x18,0xd4,0x25 };
    const uint8_t CIPHERTEXT[] = { 0xfd,0xb6,0x61,0xb6,0xe9,0x7e,0xb6,0x2e,0x88,0x60,0xfa,0x99,0xb1,0xf9,0xb8,0x7f };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-89", "[CFB128][MCT][128][DECRYPT][n89]") {
    const uint8_t KEY[] = { 0x27,0x83,0x53,0x6e,0x8d,0xa0,0x48,0x55,0xa5,0x11,0x77,0x0b,0x0d,0xf4,0x2e,0x06 };
    const uint8_t IV[] = { 0x47,0xe6,0x9e,0xa5,0x61,0xf9,0x4d,0x22,0x26,0x4e,0x8d,0xd5,0xc5,0x18,0xd4,0x25 };
    const uint8_t PLAINTEXT[] = { 0xa0,0x49,0x67,0x37,0xf3,0xe0,0xe1,0x05,0x21,0x22,0x29,0x6b,0x55,0x01,0x26,0x6f };
    const uint8_t CIPHERTEXT[] = { 0x52,0x74,0xf1,0xef,0x69,0xa3,0xc5,0x40,0xd1,0x57,0xfa,0xba,0xf9,0x6d,0x1f,0x36 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-90", "[CFB128][MCT][128][DECRYPT][n90]") {
    const uint8_t KEY[] = { 0x87,0xca,0x34,0x59,0x7e,0x40,0xa9,0x50,0x84,0x33,0x5e,0x60,0x58,0xf5,0x08,0x69 };
    const uint8_t IV[] = { 0xa0,0x49,0x67,0x37,0xf3,0xe0,0xe1,0x05,0x21,0x22,0x29,0x6b,0x55,0x01,0x26,0x6f };
    const uint8_t PLAINTEXT[] = { 0x7e,0x92,0xbc,0x53,0x72,0x35,0x3e,0xac,0xc2,0x6f,0x71,0x59,0x3c,0x9d,0x0b,0x25 };
    const uint8_t CIPHERTEXT[] = { 0x3b,0x50,0xa0,0xd5,0x79,0x92,0x43,0x25,0xb9,0x33,0x32,0xa1,0xe2,0x12,0xa5,0x38 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-91", "[CFB128][MCT][128][DECRYPT][n91]") {
    const uint8_t KEY[] = { 0xf9,0x58,0x88,0x0a,0x0c,0x75,0x97,0xfc,0x46,0x5c,0x2f,0x39,0x64,0x68,0x03,0x4c };
    const uint8_t IV[] = { 0x7e,0x92,0xbc,0x53,0x72,0x35,0x3e,0xac,0xc2,0x6f,0x71,0x59,0x3c,0x9d,0x0b,0x25 };
    const uint8_t PLAINTEXT[] = { 0xd7,0x1a,0xf0,0x50,0x98,0xfe,0xe5,0x61,0x46,0xaa,0xb7,0x4b,0xa1,0xc1,0x29,0xda };
    const uint8_t CIPHERTEXT[] = { 0x3b,0x64,0x74,0xac,0x7a,0x3a,0x06,0xe0,0xe4,0x28,0xcd,0x1f,0x51,0xeb,0xb8,0x6b };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-92", "[CFB128][MCT][128][DECRYPT][n92]") {
    const uint8_t KEY[] = { 0x2e,0x42,0x78,0x5a,0x94,0x8b,0x72,0x9d,0x00,0xf6,0x98,0x72,0xc5,0xa9,0x2a,0x96 };
    const uint8_t IV[] = { 0xd7,0x1a,0xf0,0x50,0x98,0xfe,0xe5,0x61,0x46,0xaa,0xb7,0x4b,0xa1,0xc1,0x29,0xda };
    const uint8_t PLAINTEXT[] = { 0xdb,0x60,0xf6,0x85,0xcf,0x7c,0x9b,0x0d,0xef,0xc9,0x4b,0x7f,0x2d,0xf6,0xcd,0x64 };
    const uint8_t CIPHERTEXT[] = { 0xfe,0x0f,0xc1,0x1a,0x15,0x1c,0x3d,0x3d,0x73,0xda,0xf9,0x9d,0x1b,0xfd,0x7e,0xca };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-93", "[CFB128][MCT][128][DECRYPT][n93]") {
    const uint8_t KEY[] = { 0xf5,0x22,0x8e,0xdf,0x5b,0xf7,0xe9,0x90,0xef,0x3f,0xd3,0x0d,0xe8,0x5f,0xe7,0xf2 };
    const uint8_t IV[] = { 0xdb,0x60,0xf6,0x85,0xcf,0x7c,0x9b,0x0d,0xef,0xc9,0x4b,0x7f,0x2d,0xf6,0xcd,0x64 };
    const uint8_t PLAINTEXT[] = { 0x2f,0x92,0x4e,0x44,0x65,0xa6,0x40,0xb5,0x4b,0xf2,0x74,0xaf,0x7d,0x27,0x2b,0x44 };
    const uint8_t CIPHERTEXT[] = { 0x59,0x9d,0x8e,0x77,0x11,0x26,0xb8,0x8e,0xd8,0xfa,0xa5,0x79,0x65,0x6f,0x80,0xb1 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-94", "[CFB128][MCT][128][DECRYPT][n94]") {
    const uint8_t KEY[] = { 0xda,0xb0,0xc0,0x9b,0x3e,0x51,0xa9,0x25,0xa4,0xcd,0xa7,0xa2,0x95,0x78,0xcc,0xb6 };
    const uint8_t IV[] = { 0x2f,0x92,0x4e,0x44,0x65,0xa6,0x40,0xb5,0x4b,0xf2,0x74,0xaf,0x7d,0x27,0x2b,0x44 };
    const uint8_t PLAINTEXT[] = { 0x86,0xc0,0x96,0x6e,0xb6,0xaf,0x23,0x17,0x63,0xda,0x10,0xfe,0xd6,0xe3,0x12,0x83 };
    const uint8_t CIPHERTEXT[] = { 0x79,0xd9,0x58,0x88,0xf2,0x3b,0x98,0x99,0xac,0xa9,0x41,0x02,0xa6,0xe5,0xf2,0x3c };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-95", "[CFB128][MCT][128][DECRYPT][n95]") {
    const uint8_t KEY[] = { 0x5c,0x70,0x56,0xf5,0x88,0xfe,0x8a,0x32,0xc7,0x17,0xb7,0x5c,0x43,0x9b,0xde,0x35 };
    const uint8_t IV[] = { 0x86,0xc0,0x96,0x6e,0xb6,0xaf,0x23,0x17,0x63,0xda,0x10,0xfe,0xd6,0xe3,0x12,0x83 };
    const uint8_t PLAINTEXT[] = { 0x18,0xc0,0xae,0x7a,0x3f,0x7a,0xe0,0x2f,0xa6,0x59,0x8c,0xf5,0xbe,0x17,0x4b,0x49 };
    const uint8_t CIPHERTEXT[] = { 0x6c,0xbf,0xb6,0x2f,0xe3,0x02,0xca,0x6b,0x2f,0xb7,0xc5,0x35,0x30,0x2f,0x98,0x7d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-96", "[CFB128][MCT][128][DECRYPT][n96]") {
    const uint8_t KEY[] = { 0x44,0xb0,0xf8,0x8f,0xb7,0x84,0x6a,0x1d,0x61,0x4e,0x3b,0xa9,0xfd,0x8c,0x95,0x7c };
    const uint8_t IV[] = { 0x18,0xc0,0xae,0x7a,0x3f,0x7a,0xe0,0x2f,0xa6,0x59,0x8c,0xf5,0xbe,0x17,0x4b,0x49 };
    const uint8_t PLAINTEXT[] = { 0x02,0x2c,0x49,0x96,0xaa,0xa8,0xdb,0xfc,0xfa,0xd2,0x25,0x9a,0x9d,0x02,0xd7,0xe5 };
    const uint8_t CIPHERTEXT[] = { 0xf6,0x02,0xf5,0x78,0xaf,0xd6,0xef,0x74,0x29,0x5e,0xef,0xa8,0x7c,0xdd,0x87,0x0d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-97", "[CFB128][MCT][128][DECRYPT][n97]") {
    const uint8_t KEY[] = { 0x46,0x9c,0xb1,0x19,0x1d,0x2c,0xb1,0xe1,0x9b,0x9c,0x1e,0x33,0x60,0x8e,0x42,0x99 };
    const uint8_t IV[] = { 0x02,0x2c,0x49,0x96,0xaa,0xa8,0xdb,0xfc,0xfa,0xd2,0x25,0x9a,0x9d,0x02,0xd7,0xe5 };
    const uint8_t PLAINTEXT[] = { 0x16,0x99,0x00,0x9f,0x5b,0xdc,0x21,0xb8,0xb2,0xe7,0x08,0x93,0x99,0xfc,0x73,0xda };
    const uint8_t CIPHERTEXT[] = { 0xf2,0xeb,0x78,0xac,0xfb,0x88,0xbc,0xfa,0x98,0x48,0xeb,0x79,0xd2,0x7f,0x3a,0xf5 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-98", "[CFB128][MCT][128][DECRYPT][n98]") {
    const uint8_t KEY[] = { 0x50,0x05,0xb1,0x86,0x46,0xf0,0x90,0x59,0x29,0x7b,0x16,0xa0,0xf9,0x72,0x31,0x43 };
    const uint8_t IV[] = { 0x16,0x99,0x00,0x9f,0x5b,0xdc,0x21,0xb8,0xb2,0xe7,0x08,0x93,0x99,0xfc,0x73,0xda };
    const uint8_t PLAINTEXT[] = { 0x9e,0xc3,0x9c,0xd2,0xde,0xfd,0xf6,0x4d,0xa6,0x13,0x0a,0x0c,0x15,0x8b,0x4c,0x6e };
    const uint8_t CIPHERTEXT[] = { 0xcb,0x0c,0xd0,0x5f,0x48,0x27,0x55,0xca,0x08,0x09,0x6c,0x54,0x07,0x5e,0xd8,0x69 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB128MCT128-DECRYPT-99", "[CFB128][MCT][128][DECRYPT][n99]") {
    const uint8_t KEY[] = { 0xce,0xc6,0x2d,0x54,0x98,0x0d,0x66,0x14,0x8f,0x68,0x1c,0xac,0xec,0xf9,0x7d,0x2d };
    const uint8_t IV[] = { 0x9e,0xc3,0x9c,0xd2,0xde,0xfd,0xf6,0x4d,0xa6,0x13,0x0a,0x0c,0x15,0x8b,0x4c,0x6e };
    const uint8_t PLAINTEXT[] = { 0x9d,0x9b,0xdd,0xd8,0x00,0xe2,0xac,0x63,0x07,0x71,0xa9,0xfc,0x0d,0x0a,0x15,0x8e };
    const uint8_t CIPHERTEXT[] = { 0x78,0x53,0xbe,0xa2,0x92,0x9c,0xd8,0xea,0x7c,0x89,0x7b,0xa0,0x91,0x37,0xbc,0x86 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb128(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    for (size_t i = 0; i < 9999; ++i) aes_decrypt_cfb128(&state, RESULT, RESULT, sizeof(RESULT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

