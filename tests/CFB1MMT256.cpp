#include "rijndael.h"
#include "catch.hpp"
#include <cstring>

static inline std::string buf2str(const uint8_t *buf, size_t len) {
    std::ostringstream ss; ss << std::hex << std::setfill('0');
    for (size_t i = 0; i < len; ++i) {
        ss << std::setw(2) << static_cast<int>(buf[i]) << ' ';
    }
    return ss.str();
}

TEST_CASE("CFB1MMT256-ENCRYPT-0", "[CFB1][MMT][256][ENCRYPT][n0]") {
    const uint8_t KEY[] = { 0xcd,0x70,0x19,0x13,0x30,0xec,0xf3,0xd7,0x2e,0x54,0xd3,0x30,0x7e,0x92,0xcb,0x73,0x72,0xc3,0x54,0xca,0xd8,0x8c,0x4a,0x2d,0x1e,0xb1,0x38,0x8e,0xb9,0xe3,0xd6,0x54 };
    const uint8_t IV[] = { 0xe9,0xb4,0xaa,0xb6,0xf5,0x7d,0xc6,0x3a,0x22,0x0e,0x12,0x9e,0x5d,0x6e,0x04,0xd4 };
    const uint8_t PLAINTEXT[] = { 0x1 };
    const uint8_t CIPHERTEXT[] = { 0x1 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb1(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB1MMT256-ENCRYPT-1", "[CFB1][MMT][256][ENCRYPT][n1]") {
    const uint8_t KEY[] = { 0x5f,0x50,0xb9,0x3b,0x30,0xd2,0x9d,0x9a,0x38,0x8d,0x30,0xd2,0xfa,0x4e,0x20,0xaf,0xa0,0xe1,0x13,0x09,0x34,0x7b,0x83,0x47,0x13,0x55,0xcc,0x22,0x9f,0x9a,0x83,0xac };
    const uint8_t IV[] = { 0xcc,0x52,0x2a,0x95,0xea,0xdb,0x2c,0xf9,0xc4,0x83,0xd4,0x68,0x80,0x68,0x11,0x24 };
    const uint8_t PLAINTEXT[] = { 0x11 };
    const uint8_t CIPHERTEXT[] = { 0x01 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb1(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB1MMT256-ENCRYPT-2", "[CFB1][MMT][256][ENCRYPT][n2]") {
    const uint8_t KEY[] = { 0x75,0xcb,0x16,0xbe,0xdb,0x37,0x36,0x76,0xb4,0xee,0x93,0x1d,0xc3,0xf2,0x34,0x6f,0x67,0x77,0x8e,0xe2,0xcd,0x48,0x53,0x2c,0x64,0x67,0x8c,0x05,0x91,0xf3,0xe7,0x2e };
    const uint8_t IV[] = { 0x47,0x73,0x13,0xf6,0x76,0x2d,0x57,0x19,0x84,0xdd,0xf9,0x5d,0x78,0x00,0xd3,0x46 };
    const uint8_t PLAINTEXT[] = { 0x11,0x0 };
    const uint8_t CIPHERTEXT[] = { 0x01,0x0 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb1(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB1MMT256-ENCRYPT-3", "[CFB1][MMT][256][ENCRYPT][n3]") {
    const uint8_t KEY[] = { 0x17,0x74,0x22,0x7b,0x35,0xe5,0xa8,0x99,0x08,0x26,0xf8,0xb1,0xef,0x2a,0x09,0x66,0x4d,0xd2,0x06,0xcf,0x31,0x05,0x0a,0x28,0x37,0x03,0x29,0xc8,0xa9,0xf6,0xaf,0x53 };
    const uint8_t IV[] = { 0x59,0x53,0x42,0xcf,0x4a,0xe8,0x91,0xfb,0xba,0xf6,0x89,0xed,0x98,0x85,0xa1,0x8f };
    const uint8_t PLAINTEXT[] = { 0x01,0x00 };
    const uint8_t CIPHERTEXT[] = { 0x11,0x01 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb1(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB1MMT256-ENCRYPT-4", "[CFB1][MMT][256][ENCRYPT][n4]") {
    const uint8_t KEY[] = { 0xa2,0x1f,0x6c,0x29,0x35,0xb6,0xf5,0xe2,0x54,0xc4,0xd1,0x81,0x1a,0xc4,0x1a,0x0c,0x8b,0x7b,0x12,0x07,0x28,0x38,0x5d,0xdd,0xc1,0x5b,0x6e,0x82,0x8b,0x14,0x40,0x57 };
    const uint8_t IV[] = { 0x46,0x4b,0xa2,0x55,0x45,0xce,0xd8,0xb8,0x53,0x3c,0x02,0x1d,0xb9,0x8e,0xc6,0xe4 };
    const uint8_t PLAINTEXT[] = { 0x01,0x01,0x1 };
    const uint8_t CIPHERTEXT[] = { 0x10,0x01,0x0 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb1(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB1MMT256-ENCRYPT-5", "[CFB1][MMT][256][ENCRYPT][n5]") {
    const uint8_t KEY[] = { 0xfa,0xc3,0x6f,0x85,0x63,0x19,0xf4,0xa2,0x47,0xf5,0x06,0xb3,0x7b,0x66,0xcc,0x58,0xed,0x35,0x3b,0xbe,0xe4,0x17,0x7f,0x72,0x88,0x26,0x9c,0x77,0xa4,0x92,0x55,0x96 };
    const uint8_t IV[] = { 0x16,0xf8,0x91,0xb6,0x65,0x31,0xb3,0x2c,0xb1,0x80,0x6b,0x56,0x84,0x59,0x30,0x5c };
    const uint8_t PLAINTEXT[] = { 0x00,0x10,0x10 };
    const uint8_t CIPHERTEXT[] = { 0x01,0x00,0x00 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb1(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB1MMT256-ENCRYPT-6", "[CFB1][MMT][256][ENCRYPT][n6]") {
    const uint8_t KEY[] = { 0x93,0xc9,0x03,0x75,0xb0,0x77,0x28,0xb8,0x10,0x1b,0x35,0xe6,0xc2,0x95,0x58,0x0b,0xee,0x7c,0x9e,0x8b,0xbc,0x6d,0xfd,0x13,0x71,0xa3,0x97,0xcf,0xdc,0xc8,0x3d,0xde };
    const uint8_t IV[] = { 0xc1,0x46,0xc9,0x7c,0x61,0xa8,0x25,0x26,0x66,0xc7,0x75,0x6b,0x32,0xd7,0x2e,0xc1 };
    const uint8_t PLAINTEXT[] = { 0x10,0x01,0x01,0x1 };
    const uint8_t CIPHERTEXT[] = { 0x10,0x00,0x01,0x0 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb1(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB1MMT256-ENCRYPT-7", "[CFB1][MMT][256][ENCRYPT][n7]") {
    const uint8_t KEY[] = { 0xe0,0xcb,0xd3,0xd0,0x4c,0x6c,0x83,0x4c,0x76,0x53,0xdc,0x55,0x61,0xcb,0x0f,0x28,0xdf,0xa8,0xb1,0xd8,0x4c,0x2b,0x0f,0x4e,0x7b,0x25,0xc2,0x8e,0xf1,0x5f,0x83,0x3d };
    const uint8_t IV[] = { 0xa7,0xf2,0x79,0xe0,0x27,0x8c,0xa4,0xb7,0xda,0x10,0x80,0x29,0xb1,0x3c,0x26,0xf9 };
    const uint8_t PLAINTEXT[] = { 0x01,0x00,0x11,0x01 };
    const uint8_t CIPHERTEXT[] = { 0x10,0x00,0x00,0x10 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb1(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB1MMT256-ENCRYPT-8", "[CFB1][MMT][256][ENCRYPT][n8]") {
    const uint8_t KEY[] = { 0x3f,0xf2,0x71,0x1b,0xda,0xd9,0xdb,0xc7,0x5a,0x06,0x86,0x70,0xa3,0xa6,0x7d,0x45,0x34,0x04,0x6e,0x8f,0x43,0x50,0x5b,0x93,0x0f,0xa0,0x93,0xba,0x72,0x34,0xe1,0xef };
    const uint8_t IV[] = { 0x47,0x75,0x0d,0x10,0x13,0x91,0x75,0xe1,0xc5,0x52,0xef,0x79,0x29,0xe0,0x54,0x5f };
    const uint8_t PLAINTEXT[] = { 0x00,0x00,0x10,0x10,0x0 };
    const uint8_t CIPHERTEXT[] = { 0x01,0x01,0x11,0x00,0x1 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb1(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB1MMT256-ENCRYPT-9", "[CFB1][MMT][256][ENCRYPT][n9]") {
    const uint8_t KEY[] = { 0x7d,0xdb,0xb0,0xd8,0x1a,0x14,0x15,0xb7,0x92,0xae,0x85,0xee,0x97,0xe0,0x67,0x17,0xea,0xba,0xa3,0x4c,0xce,0xc0,0xb5,0xea,0xbe,0xd8,0x00,0x95,0x5b,0x66,0x64,0x7d };
    const uint8_t IV[] = { 0x51,0x69,0x6c,0xf4,0x55,0x31,0xd0,0xcc,0x02,0xd1,0x3d,0xe2,0xe8,0xe7,0xe4,0x74 };
    const uint8_t PLAINTEXT[] = { 0x10,0x00,0x00,0x00,0x10 };
    const uint8_t CIPHERTEXT[] = { 0x01,0x00,0x11,0x01,0x11 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_cfb1(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("CFB1MMT256-DECRYPT-0", "[CFB1][MMT][256][DECRYPT][n0]") {
    const uint8_t KEY[] = { 0xe9,0xf5,0x68,0x3a,0x70,0x40,0x2d,0x3d,0xb5,0xc5,0xd6,0xd5,0x76,0x25,0x16,0x36,0x2c,0xbb,0x67,0x49,0x28,0x6a,0xb4,0x96,0xe1,0x99,0x55,0x67,0x8d,0x7b,0x41,0x2a };
    const uint8_t IV[] = { 0xb7,0x63,0xd8,0xfe,0x2e,0x25,0x5b,0x56,0xc0,0xe0,0x19,0x90,0xfc,0xb6,0x3c,0x78 };
    const uint8_t PLAINTEXT[] = { 0x0 };
    const uint8_t CIPHERTEXT[] = { 0x0 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb1(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB1MMT256-DECRYPT-1", "[CFB1][MMT][256][DECRYPT][n1]") {
    const uint8_t KEY[] = { 0xdb,0x39,0x7e,0xc2,0x27,0x18,0xdb,0xff,0xb9,0xc9,0xd1,0x3d,0xe0,0xef,0xcd,0x46,0x11,0xbf,0x79,0x2b,0xe4,0xfc,0xe0,0xdc,0x5f,0x25,0xd4,0xf5,0x77,0xed,0x8c,0xdb };
    const uint8_t IV[] = { 0x06,0xe7,0xd9,0xb4,0xbc,0xce,0x49,0x35,0x0a,0xae,0x8a,0x0a,0x02,0x9f,0x66,0xa6 };
    const uint8_t PLAINTEXT[] = { 0x11 };
    const uint8_t CIPHERTEXT[] = { 0x00 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb1(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB1MMT256-DECRYPT-2", "[CFB1][MMT][256][DECRYPT][n2]") {
    const uint8_t KEY[] = { 0x15,0x0c,0xf2,0x50,0xb0,0x17,0x81,0xd6,0xca,0x03,0x48,0x1a,0x70,0xff,0xcf,0x5a,0x77,0xd9,0xb7,0x7f,0xb2,0x66,0x92,0xa2,0x68,0x25,0xf8,0xd0,0x04,0x1f,0xd7,0x0a };
    const uint8_t IV[] = { 0x31,0x94,0x34,0xa5,0x51,0x84,0xb6,0x6b,0x5b,0x93,0x43,0xd7,0x24,0x50,0x00,0x06 };
    const uint8_t PLAINTEXT[] = { 0x00,0x1 };
    const uint8_t CIPHERTEXT[] = { 0x11,0x0 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb1(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB1MMT256-DECRYPT-3", "[CFB1][MMT][256][DECRYPT][n3]") {
    const uint8_t KEY[] = { 0x58,0xfc,0x75,0x4f,0x9e,0x08,0xfb,0x00,0x03,0xb6,0x98,0x77,0xf8,0x07,0x58,0x5b,0x1e,0x64,0x10,0x02,0xfe,0x85,0xaa,0x7c,0xfa,0x93,0xbd,0xd3,0x83,0x89,0x61,0x91 };
    const uint8_t IV[] = { 0x11,0x35,0xed,0x8b,0xd5,0x39,0x35,0xf8,0xf7,0xd7,0x8d,0x94,0x73,0xab,0x79,0xe4 };
    const uint8_t PLAINTEXT[] = { 0x10,0x11 };
    const uint8_t CIPHERTEXT[] = { 0x10,0x10 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb1(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB1MMT256-DECRYPT-4", "[CFB1][MMT][256][DECRYPT][n4]") {
    const uint8_t KEY[] = { 0x26,0xa3,0xc9,0xf5,0x4a,0xab,0x98,0x0f,0xa0,0xff,0xe2,0xa5,0xc8,0x0a,0x71,0x22,0x0f,0x3b,0x0f,0xfe,0x9f,0x63,0x53,0x3f,0xf3,0x5e,0xba,0x40,0x8e,0xf5,0xf9,0xb1 };
    const uint8_t IV[] = { 0x48,0xed,0xb0,0x81,0x30,0x6c,0xce,0x98,0xde,0xce,0xa4,0x62,0xd9,0x0e,0x90,0xd6 };
    const uint8_t PLAINTEXT[] = { 0x01,0x10,0x0 };
    const uint8_t CIPHERTEXT[] = { 0x10,0x00,0x1 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb1(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB1MMT256-DECRYPT-5", "[CFB1][MMT][256][DECRYPT][n5]") {
    const uint8_t KEY[] = { 0x02,0x42,0x1e,0x26,0xea,0xf8,0xf2,0x06,0x74,0x17,0x97,0x4a,0x47,0xfd,0x05,0xdf,0x30,0x96,0x8b,0xa6,0x13,0x7c,0x62,0xbf,0x28,0x62,0x88,0x07,0x63,0xb2,0xcb,0xdf };
    const uint8_t IV[] = { 0xd9,0xf6,0x12,0xd7,0xeb,0x70,0xd2,0x4e,0xa1,0x41,0xc8,0x6c,0x86,0x14,0x08,0xc7 };
    const uint8_t PLAINTEXT[] = { 0x11,0x01,0x10 };
    const uint8_t CIPHERTEXT[] = { 0x01,0x11,0x00 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb1(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB1MMT256-DECRYPT-6", "[CFB1][MMT][256][DECRYPT][n6]") {
    const uint8_t KEY[] = { 0x41,0x06,0x87,0x03,0x48,0x41,0x2c,0x58,0xb7,0xe4,0xb3,0xb2,0x1e,0x8f,0x4e,0x48,0x68,0xd3,0x5d,0xcb,0x0e,0x95,0x40,0xed,0x8a,0xb3,0x69,0x24,0x0f,0xeb,0xb5,0xab };
    const uint8_t IV[] = { 0x69,0xc3,0xa2,0xf2,0x2b,0x2f,0x89,0xfa,0x1a,0x91,0x17,0x72,0x88,0x02,0xd3,0x57 };
    const uint8_t PLAINTEXT[] = { 0x00,0x10,0x01,0x0 };
    const uint8_t CIPHERTEXT[] = { 0x00,0x00,0x10,0x0 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb1(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB1MMT256-DECRYPT-7", "[CFB1][MMT][256][DECRYPT][n7]") {
    const uint8_t KEY[] = { 0xca,0xbf,0x91,0xbb,0x4a,0xa5,0xea,0xcb,0x08,0xdf,0x22,0xb4,0xde,0xef,0x80,0x2e,0xf2,0x70,0x05,0xcb,0xdd,0xa9,0xa9,0x2c,0x0d,0x62,0xe8,0x74,0x67,0xf6,0x7d,0xfd };
    const uint8_t IV[] = { 0xdf,0xa1,0x69,0x1b,0x58,0x57,0x26,0x83,0x7f,0x08,0xe4,0x18,0x96,0x7b,0x9d,0xf6 };
    const uint8_t PLAINTEXT[] = { 0x00,0x10,0x00,0x00 };
    const uint8_t CIPHERTEXT[] = { 0x11,0x00,0x01,0x01 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb1(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB1MMT256-DECRYPT-8", "[CFB1][MMT][256][DECRYPT][n8]") {
    const uint8_t KEY[] = { 0x64,0xd7,0x8d,0x31,0x1f,0x33,0x0f,0x23,0x23,0xdd,0x2e,0xae,0x05,0xe6,0x46,0x0f,0x27,0xf9,0xe3,0xf3,0x89,0xe3,0x31,0x24,0xe2,0x52,0xb4,0x68,0xf0,0xdd,0x39,0xa7 };
    const uint8_t IV[] = { 0x7b,0xa7,0xb7,0x39,0x50,0x26,0x7e,0x59,0xcf,0x49,0x77,0x8e,0x14,0x0b,0xbf,0x4c };
    const uint8_t PLAINTEXT[] = { 0x10,0x01,0x01,0x00,0x0 };
    const uint8_t CIPHERTEXT[] = { 0x10,0x01,0x00,0x11,0x1 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb1(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("CFB1MMT256-DECRYPT-9", "[CFB1][MMT][256][DECRYPT][n9]") {
    const uint8_t KEY[] = { 0xf6,0xfa,0xe4,0xf1,0x5d,0x91,0xfc,0x50,0x88,0x78,0x4f,0x84,0xa5,0x37,0x12,0x7e,0x32,0x63,0x55,0x9c,0x62,0x73,0x88,0x20,0xc2,0xcf,0x3d,0xe1,0x1c,0x2a,0x30,0x40 };
    const uint8_t IV[] = { 0x63,0x2e,0x9f,0x83,0x1f,0xa3,0x80,0x5e,0x52,0x02,0xbc,0xe0,0x6d,0x04,0xf9,0xa0 };
    const uint8_t PLAINTEXT[] = { 0x01,0x00,0x00,0x01,0x11 };
    const uint8_t CIPHERTEXT[] = { 0x11,0x11,0x01,0x11,0x00 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_cfb1(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

