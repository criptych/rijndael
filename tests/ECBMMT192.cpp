#include "rijndael.h"
#include "catch.hpp"
#include <cstring>

static inline std::string buf2str(const uint8_t *buf, size_t len) {
    std::ostringstream ss; ss << std::hex << std::setfill('0');
    for (size_t i = 0; i < len; ++i) {
        ss << std::setw(2) << static_cast<int>(buf[i]) << ' ';
    }
    return ss.str();
}

TEST_CASE("ECBMMT192-ENCRYPT-0", "[ECB][MMT][192][ENCRYPT][n0]") {
    const uint8_t KEY[] = { 0x61,0x39,0x6c,0x53,0x0c,0xc1,0x74,0x9a,0x5b,0xab,0x6f,0xbc,0xf9,0x06,0xfe,0x67,0x2d,0x0c,0x4a,0xb2,0x01,0xaf,0x45,0x54 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x60,0xbc,0xdb,0x94,0x16,0xba,0xc0,0x8d,0x7f,0xd0,0xd7,0x80,0x35,0x37,0x40,0xa5 };
    const uint8_t CIPHERTEXT[] = { 0x24,0xf4,0x0c,0x4e,0xec,0xd9,0xc4,0x98,0x25,0x00,0x0f,0xcb,0x49,0x72,0x64,0x7a };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMMT192-ENCRYPT-1", "[ECB][MMT][192][ENCRYPT][n1]") {
    const uint8_t KEY[] = { 0xc9,0xc8,0x6a,0x51,0x22,0x4e,0x5f,0x19,0x16,0xd3,0xf3,0x3a,0x60,0x2f,0x69,0x7a,0xfc,0x85,0x2a,0x2c,0x44,0xd3,0x0d,0x5f };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x64,0x14,0x5e,0x61,0xe6,0x1c,0xd9,0x6f,0x79,0x6b,0x18,0x74,0x64,0xfa,0xbb,0xde,0x6f,0x42,0xe6,0x93,0xf5,0x01,0xf1,0xd7,0x3b,0x3c,0x60,0x6f,0x00,0x80,0x15,0x06 };
    const uint8_t CIPHERTEXT[] = { 0x50,0x2a,0x73,0xe4,0x05,0x1c,0xfa,0xc8,0xfe,0x63,0x43,0x21,0x1a,0x12,0x9f,0x5a,0x5f,0x56,0x71,0x0c,0x41,0xb3,0x2c,0x84,0xda,0x97,0x8d,0xda,0x2c,0xec,0x34,0xad };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMMT192-ENCRYPT-2", "[ECB][MMT][192][ENCRYPT][n2]") {
    const uint8_t KEY[] = { 0xc4,0x85,0x49,0x19,0xc3,0x24,0xd3,0x81,0xbb,0xef,0x9b,0xea,0x77,0x11,0x72,0xf6,0xe4,0x56,0x3f,0xfb,0xd1,0xe1,0xe9,0x56 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x07,0xd3,0x78,0x1a,0x71,0xe8,0x7b,0x8c,0xf1,0x2c,0xac,0x46,0x16,0xf9,0xc7,0xa8,0x19,0xbe,0x57,0xa0,0x77,0x0a,0x7a,0x66,0xe0,0xe6,0xe4,0x69,0x50,0x68,0x26,0x89,0x7c,0x85,0x30,0x86,0x6f,0x27,0x15,0xb8,0x75,0x7f,0x0f,0x01,0x38,0x9d,0xc3,0x01 };
    const uint8_t CIPHERTEXT[] = { 0x0b,0x04,0x55,0x95,0x4e,0x47,0x7e,0x87,0xd1,0xa3,0x38,0x41,0x4f,0x8a,0xc4,0xd7,0x60,0xef,0xb7,0x0e,0x57,0x70,0xe5,0xd4,0x96,0xb3,0x11,0x52,0xcb,0x07,0xe9,0x31,0x63,0x78,0xf7,0xfd,0x38,0xc6,0x90,0x3b,0x31,0xd4,0xf1,0xb1,0xa5,0x39,0x31,0xaf };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMMT192-ENCRYPT-3", "[ECB][MMT][192][ENCRYPT][n3]") {
    const uint8_t KEY[] = { 0x3d,0xee,0xcf,0x7a,0x03,0x7e,0xbb,0x2a,0xda,0x80,0x5e,0x80,0x59,0xbf,0xae,0xae,0xbb,0x19,0x5c,0xac,0xe3,0x79,0xfc,0xd2 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x09,0x66,0x12,0xf4,0x11,0x1e,0xbd,0xb9,0xac,0xcf,0x5e,0xfb,0xb9,0x73,0x58,0x9e,0x5a,0x2c,0x91,0x03,0x40,0x7e,0xd2,0xda,0x29,0xbc,0x71,0x37,0xa6,0xc0,0x2d,0xe8,0x22,0xdf,0x59,0x07,0x20,0x1d,0x3d,0xcb,0xc4,0x9c,0xb9,0xa3,0x95,0x5b,0x2b,0x86,0x81,0x1d,0x93,0x84,0x22,0xa6,0xf5,0xa2,0x3f,0x2d,0xff,0xe4,0x96,0x0f,0xec,0xab };
    const uint8_t CIPHERTEXT[] = { 0xd3,0x75,0xe1,0xaf,0x5f,0xcd,0x03,0xe3,0x1d,0x0f,0x73,0x5f,0x6b,0xc5,0xd7,0xe7,0x73,0xbc,0x34,0xff,0x3e,0xb7,0x06,0xbe,0x85,0x84,0x2f,0x99,0x8e,0x4e,0x36,0x13,0x03,0x82,0x5b,0x84,0x81,0x70,0x60,0x8f,0x30,0x0a,0xd1,0xce,0xd8,0x48,0xb5,0x23,0x34,0x77,0xf5,0x37,0x10,0x50,0x3c,0x55,0x73,0x6a,0x73,0x05,0x95,0x59,0x99,0x64 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMMT192-ENCRYPT-4", "[ECB][MMT][192][ENCRYPT][n4]") {
    const uint8_t KEY[] = { 0x0c,0x03,0x33,0xd8,0xfe,0x3e,0x99,0xa1,0xee,0xcc,0x12,0x0d,0x6b,0x54,0xbb,0x8f,0xaa,0x88,0x8d,0x12,0x79,0x4d,0xe9,0x3e };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x6f,0x82,0x5a,0xd0,0xe2,0xfc,0xab,0xd8,0x11,0xdb,0x11,0xe2,0x84,0x0f,0x08,0x84,0x47,0x0b,0x87,0xea,0xa6,0x78,0xe3,0x29,0x34,0x2b,0xf0,0xd1,0x12,0x55,0x69,0xc1,0x6d,0xfa,0x92,0x40,0x49,0xa5,0x1b,0x49,0x7d,0x59,0x48,0x25,0xff,0xca,0x4f,0x40,0x62,0xcd,0x02,0x35,0x9d,0x0e,0xad,0x2b,0x0e,0x01,0x42,0x64,0xbf,0x1b,0xb3,0x13,0xe7,0x41,0xa0,0x6e,0xb4,0x81,0x32,0x05,0x47,0x00,0x47,0x52,0x01,0x33,0xcf,0x91 };
    const uint8_t CIPHERTEXT[] = { 0xe6,0x12,0x8a,0x9f,0xb4,0x97,0xb2,0xec,0x0d,0x0e,0x9f,0xe1,0xb2,0x4e,0x69,0x1e,0xa3,0x6c,0x06,0x28,0xeb,0x55,0x04,0x6b,0x2f,0x20,0xde,0x9d,0x28,0x1d,0xd9,0xdb,0xbb,0xea,0xa0,0x51,0x9a,0x48,0x75,0xd3,0x51,0x6b,0x15,0x02,0x23,0x30,0x16,0x3b,0x27,0x98,0xa9,0x10,0x2e,0xe9,0xd1,0x41,0xa3,0x41,0x6c,0x1a,0x27,0x74,0x42,0xd4,0xcf,0x1f,0xec,0x87,0xcc,0xea,0x57,0x1a,0x23,0xb9,0x1a,0x46,0x19,0x91,0xec,0x0d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMMT192-ENCRYPT-5", "[ECB][MMT][192][ENCRYPT][n5]") {
    const uint8_t KEY[] = { 0xb0,0x7d,0xa9,0x9f,0xbe,0x0b,0x19,0x3e,0x53,0x36,0x14,0x1a,0x98,0x19,0x97,0x4b,0x1a,0x9a,0x41,0x02,0x12,0x9d,0xb8,0x61 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x27,0x75,0x6c,0x11,0xf5,0x7c,0x40,0x16,0x9f,0x95,0xf2,0x51,0x41,0xfb,0x1a,0x07,0xd9,0x44,0x4d,0x86,0x4e,0x4c,0x43,0xb9,0xb1,0x6f,0x39,0xfb,0xc2,0xfb,0x95,0x29,0xb6,0xe4,0xc9,0xfb,0x37,0xba,0x79,0x94,0xad,0xd9,0xe0,0x57,0xbc,0xe0,0x70,0xfd,0x0d,0x64,0xb8,0xe4,0x52,0xe5,0x8b,0xaa,0x84,0x00,0x5f,0xfb,0x6f,0xe7,0xf3,0xa7,0x71,0x0f,0x35,0xf8,0x7f,0x28,0x62,0x42,0x68,0x52,0x6f,0xbb,0x5e,0x8e,0xa8,0x8d,0xb2,0x72,0x97,0x2a,0xdf,0x22,0x27,0xe0,0xca,0x7b,0x09,0xad,0x48,0x91,0x57,0x54 };
    const uint8_t CIPHERTEXT[] = { 0x75,0x16,0xe5,0x38,0x77,0x23,0x6e,0x93,0x1e,0x7f,0xba,0xe2,0x2e,0xd2,0xca,0x51,0x16,0xb7,0x2a,0x70,0x0f,0x6e,0x39,0x7c,0x2a,0xa4,0x7c,0x30,0x4b,0x3f,0x5c,0x2a,0x02,0x6d,0x89,0x83,0x1a,0x51,0x04,0xae,0x7b,0x73,0xef,0x48,0xde,0x70,0x9c,0x1b,0x9e,0x66,0x1a,0xe9,0x73,0xde,0xa6,0xbb,0x38,0x21,0x7a,0x76,0x50,0x22,0x8c,0xcc,0x6b,0x22,0x8b,0x33,0xf5,0x67,0x12,0x14,0x27,0xe9,0xf2,0x1c,0xbd,0x3e,0xc6,0xaa,0x35,0xeb,0xba,0x33,0x6f,0x51,0xed,0x8e,0x4b,0xf6,0xe7,0x5c,0x58,0x66,0xbc,0x20 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMMT192-ENCRYPT-6", "[ECB][MMT][192][ENCRYPT][n6]") {
    const uint8_t KEY[] = { 0x80,0xda,0x65,0x2b,0x18,0x44,0xda,0xfe,0x4f,0xd4,0xca,0x8c,0xcc,0x26,0xb5,0x64,0xb2,0x63,0x71,0x17,0x23,0xb6,0xcd,0x48 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x1e,0x49,0xe9,0x54,0x1e,0xd0,0xf9,0x70,0x23,0xf8,0x20,0x5e,0x71,0xfe,0x75,0x66,0x86,0x80,0xf1,0x2f,0xb5,0x90,0x2d,0x7a,0x11,0x06,0x6d,0x10,0x8c,0x1a,0xde,0xf9,0x60,0x32,0x1c,0xef,0xae,0xf8,0xf7,0x13,0x65,0xb0,0x77,0xde,0x66,0xc9,0x1e,0x59,0xe6,0xb1,0x6c,0x91,0x13,0xee,0xa9,0x45,0xfa,0x6b,0xde,0xe3,0xa8,0x0f,0x25,0xb3,0x8f,0x94,0x22,0x51,0x2c,0x97,0xd2,0x60,0xe7,0xeb,0x83,0x7d,0x3b,0x33,0x24,0x72,0x16,0xb0,0xbf,0xac,0x83,0x57,0x44,0xf0,0x86,0x27,0x88,0x49,0x47,0xb9,0x8d,0x45,0x73,0x19,0x04,0x60,0xe0,0xd4,0x10,0xc1,0x70,0x52,0x4d,0x24,0x37,0x66,0x11,0x18 };
    const uint8_t CIPHERTEXT[] = { 0xa4,0x7e,0x7d,0x0d,0x82,0x66,0x59,0x57,0x92,0xbc,0x98,0x0b,0xf3,0xc4,0x78,0x22,0x22,0x9e,0x44,0x28,0xcc,0x91,0xaa,0x1b,0x15,0x51,0x98,0x23,0xa1,0x33,0xdd,0x47,0x9a,0x46,0x64,0xec,0x84,0x08,0xb4,0xd9,0x30,0x17,0x60,0x45,0x4e,0xd2,0x03,0x72,0x79,0xd9,0x96,0xeb,0x1c,0xcc,0x98,0xdf,0x77,0x66,0x0a,0xa9,0x74,0x22,0xdc,0xa1,0xc5,0x4d,0x7b,0xfa,0xc3,0x72,0x23,0xd0,0xca,0xee,0x6a,0x6b,0x34,0xd7,0x60,0xe7,0x67,0xb9,0x59,0x5f,0x7f,0x3b,0xb6,0x31,0xd6,0x54,0x5a,0x74,0x42,0xd3,0x49,0x7a,0x7b,0x85,0x05,0x4e,0x8b,0x99,0xd2,0x4e,0x65,0xdf,0x98,0x5e,0x5b,0xcc,0xf4,0x50 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMMT192-ENCRYPT-7", "[ECB][MMT][192][ENCRYPT][n7]") {
    const uint8_t KEY[] = { 0x9a,0x35,0x95,0x4f,0x40,0x00,0x34,0xb2,0x9c,0x9f,0x85,0x76,0x6a,0x25,0x5c,0xf1,0x39,0x3d,0xcc,0xb8,0xd6,0xc9,0x3e,0x65 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x82,0x3f,0xad,0xe2,0x72,0x28,0x05,0xe4,0x94,0x8d,0xb5,0x76,0x39,0xcb,0xb6,0x7d,0x47,0x7d,0x4b,0x01,0x31,0x9d,0x92,0x78,0x26,0xec,0x59,0x47,0x89,0x93,0x34,0x86,0xa2,0x0a,0xcc,0x03,0x93,0x39,0x7a,0x8a,0x8d,0xdd,0x15,0x64,0x43,0x2e,0x08,0x1e,0x9f,0xbf,0xa7,0x8c,0xb4,0xa5,0xc3,0x0c,0xf5,0xdb,0x7b,0x0f,0xa4,0xe5,0x56,0xd6,0x8d,0xb4,0x8f,0x7a,0xf3,0xca,0xb0,0x2f,0xcb,0x9e,0x62,0xc9,0x28,0x42,0x84,0x80,0xf7,0x43,0x7a,0xf0,0xec,0xd1,0xc8,0x64,0xbc,0x1f,0xdf,0x53,0x8d,0x0d,0x36,0x2b,0xaa,0x05,0x9d,0x4e,0x7c,0x22,0xcf,0x5a,0xb6,0x98,0x46,0xae,0xcf,0x50,0x53,0x2a,0xb5,0xd2,0x6d,0x35,0xc0,0x68,0xca,0x05,0xe4,0x80,0x2c,0x1b,0x2c,0x53,0xfe,0x0c };
    const uint8_t CIPHERTEXT[] = { 0x52,0xc5,0x4e,0xc4,0x34,0x5e,0x77,0x6b,0x84,0x95,0x2f,0x58,0x03,0xad,0x3a,0x52,0xba,0x4c,0xfe,0xdb,0x32,0xc2,0xdc,0x14,0x6e,0xcc,0x88,0x13,0x70,0x5f,0x02,0xfd,0x3d,0x4d,0x55,0x90,0x27,0xe8,0x95,0xe2,0xba,0x29,0x71,0x03,0x96,0x27,0x24,0x36,0xc3,0x98,0xfa,0x12,0xba,0x02,0xc8,0x5c,0x02,0x94,0x7d,0xf8,0x03,0x56,0x47,0x33,0x4b,0xc6,0xc5,0x3e,0x1d,0x71,0x6f,0x58,0x22,0x06,0xc8,0x53,0x8f,0x39,0x77,0x84,0xc3,0xe4,0x2f,0x53,0x5b,0x68,0xe8,0x15,0x1b,0x3c,0xff,0x71,0xa8,0x2d,0x27,0x85,0xb0,0xeb,0x29,0x8f,0xf6,0x3a,0xeb,0xc5,0xd8,0x22,0x54,0x9f,0x44,0xfb,0xbc,0xf0,0xb6,0x91,0x14,0x32,0x3c,0x95,0x72,0xd0,0xbf,0x67,0x43,0x32,0xfa,0xc3,0xb5,0x7d };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMMT192-ENCRYPT-8", "[ECB][MMT][192][ENCRYPT][n8]") {
    const uint8_t KEY[] = { 0x28,0x0a,0x05,0xe6,0xba,0x05,0x42,0xe4,0xe1,0x6d,0xaf,0xe6,0x3d,0x73,0x8f,0xb4,0xc5,0x44,0x24,0x1b,0x66,0x26,0x72,0x9a };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xf4,0xd4,0x6d,0x6a,0xc9,0x96,0x9c,0xb6,0x99,0x4c,0x4f,0x5f,0x97,0xa5,0x86,0x34,0xe5,0x92,0x7e,0x52,0xbf,0xaa,0x82,0xa2,0xf7,0xcc,0x04,0xa3,0xa1,0x06,0xec,0x6a,0x0f,0xb5,0x30,0xe7,0x00,0xee,0xa5,0x69,0x14,0x1d,0x15,0x64,0x83,0xec,0x91,0x73,0x0f,0x67,0x08,0x99,0x37,0x5d,0x19,0xcc,0xae,0x09,0x26,0xb4,0x0b,0xf1,0xaa,0xb0,0xc2,0x0f,0xcc,0x1a,0x53,0x2f,0x34,0xcc,0xc1,0x98,0x1d,0xe2,0x46,0xee,0xab,0xc2,0x45,0x57,0x7f,0x5a,0x80,0xdd,0x8a,0xa9,0x8b,0x14,0x1e,0x81,0x81,0xfc,0x4b,0x8b,0xf5,0x28,0x68,0x8b,0x2b,0x20,0xf0,0xe5,0x88,0x05,0x90,0x61,0x48,0x73,0x7d,0x2b,0x6f,0xab,0x0b,0x1e,0x02,0xf2,0x7c,0x41,0x76,0x34,0x15,0x92,0x69,0xed,0x78,0x03,0x90,0x4a,0x2d,0xc3,0xf1,0x8b,0x82,0xbe,0x52,0xab,0x95,0x67,0xf1,0x43,0xaf,0xb5 };
    const uint8_t CIPHERTEXT[] = { 0xa6,0x13,0x76,0xae,0x4c,0x6f,0x8f,0xef,0x51,0x73,0x60,0x87,0xdd,0x54,0xdd,0xc6,0xcd,0x91,0x77,0x35,0x38,0x6f,0x73,0xff,0x95,0x88,0x4d,0x92,0x73,0x9d,0x1a,0xf4,0xa6,0x53,0x86,0xad,0x39,0x6f,0xa0,0x1d,0xef,0x9e,0x33,0x81,0x13,0x3e,0x23,0x57,0x50,0x62,0x15,0x51,0x9c,0x2e,0xbe,0xff,0xff,0x12,0xc3,0x5a,0x70,0xfb,0x14,0x9d,0x23,0xf0,0x35,0xd0,0x26,0xac,0x1d,0x24,0xe5,0xec,0x81,0xf5,0xc2,0x86,0x84,0xb4,0xa2,0x03,0xc2,0x9a,0xaf,0xfc,0x54,0x79,0x4c,0xab,0xd3,0x88,0x50,0x90,0xfc,0x87,0x1c,0xb8,0xd4,0x56,0x91,0x90,0xa3,0x9e,0x3d,0x34,0xdf,0x87,0xc3,0xe0,0x52,0x45,0xef,0x7d,0xe4,0x85,0x6d,0x10,0x3e,0x2a,0x78,0x03,0x61,0x11,0x5f,0x78,0xe2,0x27,0x62,0x2f,0x93,0xb7,0xf9,0xc2,0xfd,0x83,0x90,0xbf,0xaf,0x23,0xa0,0x6c,0xb3,0x48 };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMMT192-ENCRYPT-9", "[ECB][MMT][192][ENCRYPT][n9]") {
    const uint8_t KEY[] = { 0x4f,0x41,0xfa,0x4d,0x4a,0x25,0x10,0x0b,0x58,0x65,0x51,0x82,0x83,0x73,0xbc,0xca,0x55,0x40,0xc6,0x8e,0x9b,0xf8,0x45,0x62 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x7c,0x72,0x7b,0xd3,0xe7,0x04,0x8e,0x7a,0x89,0x95,0xb7,0xb1,0x16,0x9a,0xe4,0xb5,0xa5,0x5e,0x85,0x4b,0xb4,0xf7,0xa9,0x57,0x6d,0x78,0x63,0xab,0x28,0x68,0x73,0x1d,0x30,0x73,0x22,0xdc,0xca,0x60,0x6e,0x04,0x73,0x43,0x67,0x6f,0x6a,0xf4,0xd9,0xcf,0x6e,0xbf,0x2b,0xf9,0xc9,0x5d,0x87,0x84,0x8d,0x23,0x3c,0x93,0x1e,0x7a,0x60,0xef,0xf0,0x8f,0xb9,0x59,0x92,0x4c,0xde,0x1e,0xec,0x86,0x99,0xeb,0xc5,0x78,0x90,0xe3,0x88,0x70,0x24,0xef,0x47,0xc8,0x9a,0x55,0x00,0x18,0x78,0x8d,0x1f,0xaa,0x32,0x50,0x45,0x2e,0x06,0xf1,0x48,0xaf,0x25,0xf0,0x7b,0xc6,0x13,0xcd,0x2f,0x0e,0x50,0x1a,0x79,0xd7,0x38,0xd4,0x36,0x1f,0x28,0xf3,0x4d,0xbe,0xe2,0x40,0x34,0xe0,0x33,0x67,0xb6,0xb8,0xd3,0x4d,0xf3,0x73,0x8c,0xa3,0xa8,0x6b,0x9e,0xbc,0xb0,0x9e,0x63,0x9b,0xcb,0x5e,0x2f,0x51,0x9f,0x4a,0x7a,0x86,0xfc,0x7c,0x41,0x55,0x64,0x04,0xa9,0x5d };
    const uint8_t CIPHERTEXT[] = { 0x92,0x28,0x12,0xad,0x5f,0xea,0xcd,0xf1,0x1f,0xe7,0xfd,0xae,0x96,0x30,0x01,0x49,0x41,0x9e,0x31,0xcf,0xf5,0x40,0x61,0xb3,0xc5,0xed,0x27,0xfd,0xb8,0xb5,0x0c,0x9c,0x09,0x32,0xb5,0x22,0xa6,0xc0,0x4e,0x48,0x24,0x99,0xb0,0x11,0xef,0x3c,0x3e,0x9d,0xc5,0x6a,0x1a,0x61,0xcf,0xeb,0x78,0xb3,0x40,0x32,0xd2,0x6d,0xbd,0xc3,0xca,0xc5,0x1a,0x32,0x79,0xbc,0x93,0x4b,0x9b,0xce,0x2d,0x9c,0x19,0xbf,0x85,0x82,0x35,0x61,0x3b,0xa7,0x84,0xe4,0x8e,0x29,0x2d,0x22,0xc6,0xb5,0xa2,0x8e,0x1d,0x1b,0xb8,0x60,0x52,0x4f,0xb7,0xb5,0xf9,0xb3,0xd9,0xa5,0xf4,0xda,0x66,0xe3,0x40,0x58,0x5b,0xd2,0x49,0x6f,0xe6,0xd6,0x94,0x2d,0xb8,0xd0,0x5d,0x71,0x6f,0xec,0x03,0xb1,0x7d,0x19,0xab,0xb5,0x8b,0x33,0x33,0x2e,0x24,0xbe,0xae,0xc7,0x99,0x5d,0x69,0x52,0x53,0x64,0xfe,0x13,0x9a,0xa1,0xfd,0x62,0x05,0x46,0x68,0xc5,0x8f,0x23,0xf1,0xf9,0x4c,0xfd };
    aes_state state;
    uint8_t RESULT[sizeof(CIPHERTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_encrypt_ecb(&state, PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == sizeof(CIPHERTEXT));
    CAPTURE(buf2str(CIPHERTEXT, sizeof(CIPHERTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == 0);
}

TEST_CASE("ECBMMT192-DECRYPT-0", "[ECB][MMT][192][DECRYPT][n0]") {
    const uint8_t KEY[] = { 0xf2,0xd2,0xb8,0x22,0x80,0xc2,0x59,0x2e,0xcf,0xbc,0xf5,0x00,0xae,0x64,0x70,0x78,0xc9,0xc5,0x76,0x24,0xcd,0xe9,0xbf,0x6c };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x49,0xaa,0xbe,0x67,0xda,0x53,0x22,0xb6,0xe1,0x1d,0x63,0xb7,0x8b,0x5a,0x0e,0x15 };
    const uint8_t CIPHERTEXT[] = { 0x21,0xc8,0x22,0x9a,0x4d,0xce,0xaf,0x53,0x3f,0xe4,0xe9,0x6e,0xce,0xd4,0x82,0xa6 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMMT192-DECRYPT-1", "[ECB][MMT][192][DECRYPT][n1]") {
    const uint8_t KEY[] = { 0x4b,0xb8,0x34,0x29,0xfa,0xaa,0xa2,0x52,0x65,0xf6,0x5c,0x8e,0xbb,0x1c,0xaf,0x81,0x59,0x16,0x81,0x0d,0xef,0xe8,0x92,0x81 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x71,0xb8,0x05,0xfe,0xb5,0x6a,0xac,0xa2,0x20,0x49,0x07,0x3d,0xb1,0x0a,0xd6,0x96,0x75,0x1a,0x48,0x18,0xb7,0x00,0x5a,0xe3,0x5e,0xb3,0x11,0x1c,0xfe,0xaf,0xca,0xc8 };
    const uint8_t CIPHERTEXT[] = { 0xe7,0x41,0xf3,0x8e,0xd7,0x20,0x87,0x7b,0x53,0x26,0x4c,0xe8,0x1b,0xdf,0x2e,0x5e,0xa5,0xb9,0x71,0x63,0x71,0x0b,0xa2,0x9e,0x97,0x55,0xcd,0x3b,0xa2,0xca,0xf0,0x91 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMMT192-DECRYPT-2", "[ECB][MMT][192][DECRYPT][n2]") {
    const uint8_t KEY[] = { 0x2a,0xd0,0xdb,0x32,0x78,0xb7,0xf6,0xaf,0xd7,0x5a,0x0c,0xb6,0x2b,0x61,0x32,0xd3,0x64,0x49,0x01,0x0e,0xf5,0x09,0xa5,0xb6 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x79,0x91,0xec,0xf8,0xec,0x98,0xc6,0xda,0x6a,0x27,0xee,0x89,0x05,0x57,0x83,0xf7,0x30,0x2f,0x5c,0xb0,0x63,0xf9,0xc6,0x70,0x84,0x85,0x07,0x02,0xdf,0xc9,0xd6,0x48,0x34,0x53,0x6e,0xcf,0x52,0x4d,0xc1,0x0f,0x85,0x04,0xc1,0xb1,0x32,0x10,0x1c,0xe5 };
    const uint8_t CIPHERTEXT[] = { 0xd1,0x56,0x8d,0x45,0xf4,0x95,0x11,0x2f,0x12,0xe3,0x74,0x61,0xaa,0xcd,0xdb,0xfd,0xa7,0xa7,0x1d,0x0a,0x40,0xda,0xcb,0x6c,0x1d,0x7e,0x6e,0x13,0xbb,0x2c,0x0f,0x72,0x11,0x0d,0xfd,0x33,0x74,0x37,0xca,0x29,0xb8,0x3a,0x97,0x86,0x98,0xf5,0x91,0x4e };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMMT192-DECRYPT-3", "[ECB][MMT][192][DECRYPT][n3]") {
    const uint8_t KEY[] = { 0xb7,0xf4,0xc3,0x77,0xe6,0x23,0x3c,0x34,0x71,0x7e,0x7a,0xc9,0x04,0x0d,0x36,0x9a,0xc6,0x6c,0x6d,0x3f,0x3b,0x1e,0x62,0x7d };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x9b,0x54,0x0d,0x3e,0xb0,0xbf,0x52,0x21,0x0a,0xef,0xe3,0xb1,0x92,0x9b,0x3e,0x43,0x56,0x1c,0x41,0x10,0xfb,0x81,0x52,0x0d,0x41,0xd6,0x71,0xfc,0x0f,0x40,0x4d,0xcd,0xdd,0x87,0x9e,0xf4,0xa7,0x0f,0x93,0x31,0x1e,0x6b,0x03,0x4a,0x60,0x20,0xe2,0xb4,0xfd,0x51,0x61,0x74,0x8b,0x57,0xb6,0x1e,0x7c,0xbb,0xd1,0xd8,0xe1,0xd2,0xcf,0x42 };
    const uint8_t CIPHERTEXT[] = { 0xfd,0x71,0xfe,0xc9,0x85,0xa9,0x20,0x46,0xa5,0xc0,0xb6,0x33,0x11,0x2b,0xb2,0xcd,0xde,0x35,0x81,0xd9,0x8b,0xf4,0x32,0x3b,0x41,0x7b,0xdb,0xc5,0x5a,0x51,0x38,0x4d,0x21,0x22,0x96,0x02,0xd8,0xb5,0xef,0x00,0x00,0x1e,0x57,0x21,0xd4,0x35,0x96,0x16,0x17,0x46,0x17,0xb7,0x0f,0x0a,0x01,0x98,0xd2,0xd6,0xa3,0xdd,0xc0,0x13,0x15,0x4f };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMMT192-DECRYPT-4", "[ECB][MMT][192][DECRYPT][n4]") {
    const uint8_t KEY[] = { 0xf7,0x14,0xe6,0x21,0xc9,0x77,0x68,0xd8,0x2e,0xea,0x6b,0xf9,0x8e,0xbf,0x4a,0x82,0xc0,0x05,0x26,0x21,0x88,0xff,0x89,0x4a };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xf7,0x05,0x88,0x04,0x93,0x2f,0xea,0xe0,0x85,0x1a,0xca,0x9b,0xe5,0x00,0xc5,0x4e,0xc3,0x5b,0x35,0x52,0xdb,0xb1,0x41,0x7d,0x81,0xde,0x51,0xb0,0xb0,0xf3,0x20,0x9d,0xc9,0x99,0x30,0x23,0x69,0xf2,0x5b,0x1f,0x13,0x3d,0xfd,0xbd,0x9f,0xe5,0x0b,0x68,0x34,0x27,0x38,0x06,0xef,0x52,0x5c,0x61,0xec,0x4f,0x5e,0x88,0x71,0x4c,0xb9,0x45,0xb0,0xfa,0x64,0x81,0xce,0x75,0xbb,0xff,0x50,0xe8,0xee,0xce,0x15,0x27,0xba,0xa7 };
    const uint8_t CIPHERTEXT[] = { 0xe2,0x4f,0xf8,0x5f,0x7a,0xe7,0x52,0x26,0xdd,0xd3,0x93,0x97,0x2c,0x3f,0x83,0x6a,0x0f,0xc4,0xaa,0x13,0xf9,0x97,0xb8,0x96,0xae,0x01,0x24,0x9b,0x03,0x0f,0x12,0xc5,0xe5,0x8a,0x7a,0x40,0x9d,0x29,0x87,0x99,0x52,0x06,0x3d,0xd3,0xd0,0x4f,0x5f,0xb7,0x88,0x3e,0x90,0x6b,0xd7,0x4b,0xb8,0x46,0x8b,0xa0,0xa9,0xe3,0xa3,0xcd,0x03,0x74,0x56,0xbd,0x54,0x59,0x57,0xe8,0x84,0xf2,0x58,0xcb,0x71,0xb1,0xcd,0x95,0xd6,0x73 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMMT192-DECRYPT-5", "[ECB][MMT][192][DECRYPT][n5]") {
    const uint8_t KEY[] = { 0x7c,0x04,0x5f,0x66,0x3d,0x66,0x8e,0x1f,0x7b,0xa8,0x0f,0x06,0xd0,0xd2,0x5f,0xef,0xcb,0x00,0xb7,0x80,0x8a,0xaa,0x3e,0x95 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x48,0x24,0x66,0xfe,0x1b,0xcb,0xeb,0x5c,0xe8,0xd2,0x1e,0xb3,0xb2,0xc3,0x09,0x97,0xd3,0x6d,0x4d,0xd5,0x5f,0x21,0xe8,0x27,0x1a,0xd0,0xb1,0xb0,0xcb,0x12,0xbe,0x86,0x70,0x2e,0xda,0x38,0x79,0xdb,0x28,0x38,0xee,0x3a,0x55,0xfe,0x9a,0xef,0x70,0xc8,0x61,0x18,0xac,0x30,0xb4,0x40,0x30,0xb7,0xb5,0x3f,0x8b,0x21,0xda,0xba,0x1a,0x4c,0x01,0x37,0xf5,0x8e,0x18,0x32,0xaa,0x82,0x47,0x80,0x97,0x46,0xe3,0x3d,0xa9,0xa4,0x5b,0xa6,0x43,0x1d,0x26,0x15,0x46,0xa9,0x78,0x4c,0x32,0x1b,0xe3,0x60,0xd3,0x2e };
    const uint8_t CIPHERTEXT[] = { 0x2a,0x81,0xae,0x3d,0x39,0x7c,0x7c,0xd3,0xb9,0x74,0x6d,0xb4,0x3c,0xc0,0x4b,0x13,0x72,0x61,0xe5,0x12,0x4c,0x91,0x58,0xed,0x60,0x9e,0x8d,0x75,0x90,0xf9,0x03,0xc1,0xe6,0x8a,0xcf,0x20,0xc3,0x47,0xe1,0x51,0x39,0x05,0x88,0xf7,0xb5,0x8e,0x39,0x47,0xe1,0xf3,0x8c,0x04,0xc8,0x24,0x87,0xad,0x3c,0xbd,0x1f,0xf5,0x74,0x23,0xfc,0x73,0xfa,0xd0,0x7d,0x9b,0xc5,0xeb,0xfc,0xed,0xa1,0x1c,0x53,0x6c,0xd8,0x9e,0x9e,0x52,0x0b,0x96,0x43,0x02,0x61,0xa3,0x30,0x3e,0xe4,0xb6,0x64,0x9a,0x27,0x24,0xb1,0x30 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMMT192-DECRYPT-6", "[ECB][MMT][192][DECRYPT][n6]") {
    const uint8_t KEY[] = { 0x0b,0x4b,0xd7,0xbe,0x14,0xe2,0x39,0x62,0x0c,0x8e,0xb9,0x92,0xa4,0x8a,0xb5,0x0b,0x38,0x15,0x84,0x94,0x01,0xd0,0x4e,0x83 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x72,0x3e,0x9a,0x19,0xc8,0x52,0x6d,0x31,0x2c,0x75,0xbe,0xef,0x81,0xc3,0x98,0xdd,0x33,0x71,0x59,0x4f,0x98,0xe7,0x74,0x0e,0xd9,0xff,0xd6,0x5e,0x34,0x7f,0xde,0x28,0xcd,0x67,0x7f,0x58,0x28,0x49,0x30,0xc6,0xf4,0x5c,0x61,0x36,0x51,0x03,0xf2,0x4b,0xc2,0x80,0x34,0xfb,0x19,0xf1,0x65,0x49,0xe0,0xac,0xbc,0xaf,0x14,0x19,0x52,0xe4,0x4d,0xf1,0x9e,0x92,0x56,0x78,0x9a,0x50,0x54,0xe8,0x19,0x6e,0xb4,0xc5,0x2d,0xad,0x29,0xa5,0xe6,0x83,0xcc,0x66,0x8a,0x78,0xfa,0x43,0x52,0x6a,0x0f,0xc6,0x2c,0x88,0x22,0x94,0x48,0x09,0x8e,0xf3,0xd9,0xbc,0x23,0x7f,0xf4,0xf9,0x7a,0x2e,0x94,0x91 };
    const uint8_t CIPHERTEXT[] = { 0xfe,0x9a,0x6e,0x64,0xdc,0x5a,0x5e,0x48,0x5c,0x96,0xb8,0x54,0x29,0x9b,0xa3,0xe6,0xb9,0x58,0x61,0x07,0x80,0xc3,0x25,0xf1,0x64,0x78,0x25,0xcf,0x70,0xa3,0xf1,0xc3,0xcc,0x21,0x03,0x2d,0xed,0xe2,0x97,0x2b,0x09,0x92,0xbd,0x5c,0xce,0x78,0xac,0xea,0x53,0x9e,0x59,0xc7,0x4f,0x32,0x48,0x36,0x89,0x2c,0xa2,0x8e,0x8f,0x31,0x89,0x3a,0xab,0xb7,0xa8,0x05,0x13,0x6b,0x0e,0x95,0x60,0xcf,0x3c,0x34,0x41,0x28,0x7c,0xd7,0x71,0x97,0x75,0x58,0xe6,0x86,0xfd,0x07,0x4c,0x45,0x2e,0x61,0xb1,0xf5,0xbc,0x1f,0x82,0xa6,0x85,0x73,0xb6,0xbc,0x6a,0x8e,0x49,0x97,0x5e,0x65,0xec,0x73,0xbc,0xb5 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMMT192-DECRYPT-7", "[ECB][MMT][192][DECRYPT][n7]") {
    const uint8_t KEY[] = { 0xf5,0xbd,0x19,0x9c,0x43,0xe9,0x91,0x7d,0xfd,0xdf,0x84,0x64,0x48,0x3e,0xe6,0x05,0x58,0x7d,0x21,0xad,0x90,0x7f,0x5c,0x7b };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0x34,0xa8,0xcb,0xb7,0xaf,0xab,0x72,0xa8,0xe5,0x75,0x3f,0x04,0xa5,0xd1,0x87,0x26,0xf1,0xf0,0xa9,0xa9,0x2e,0x02,0xf5,0x93,0xd7,0x8d,0x28,0xc9,0xdd,0x50,0x37,0x7a,0xf7,0xbd,0x4e,0xfa,0x3e,0xeb,0x7b,0x71,0xca,0x7b,0xeb,0x42,0x01,0x61,0x35,0x80,0x88,0xe2,0xbd,0xc2,0x95,0xb6,0x5f,0xcb,0xe6,0x09,0x7f,0x71,0x78,0xa2,0x78,0xb6,0x01,0xa2,0x61,0x02,0xaf,0xd3,0x41,0xf8,0xc9,0x4f,0x89,0xb7,0x92,0xae,0x42,0x1f,0xcd,0x45,0x88,0x79,0x70,0x4e,0x92,0x24,0xf1,0x02,0xb6,0xce,0x20,0x4c,0x55,0xdf,0x73,0xe1,0x55,0x39,0xd2,0xfe,0x04,0xe8,0xdc,0x3e,0x25,0xe9,0xe8,0x93,0x99,0x4b,0x5a,0xe2,0x70,0x5d,0x65,0xc0,0x1e,0x05,0x86,0xca,0x4b,0x18,0xab,0xf1,0x4f,0x30 };
    const uint8_t CIPHERTEXT[] = { 0x55,0x7d,0x36,0x29,0xe7,0x1b,0xa5,0x44,0xa2,0x0a,0xba,0xa2,0xf3,0x14,0xe7,0x7b,0x84,0x4a,0xc7,0x91,0x60,0x9b,0x5f,0x63,0x59,0xa6,0xa5,0xa4,0xa7,0xcd,0x3e,0xeb,0xd1,0x8b,0x8c,0xac,0xd1,0x07,0xe8,0x67,0x73,0xe9,0x2c,0x1f,0xfe,0x6c,0x75,0x0e,0x16,0xb4,0x27,0x97,0xe1,0x63,0x31,0x7c,0x69,0x67,0x92,0x51,0x41,0x15,0x1c,0x31,0x6c,0x7c,0x77,0xaf,0x7a,0xf3,0x6a,0x0f,0xf4,0xf5,0x56,0xb7,0xfa,0x2f,0x03,0xe0,0x2b,0xd6,0x9f,0x91,0xc5,0x3e,0x04,0xce,0x0d,0xa9,0x3a,0x0d,0xf2,0x5d,0x3d,0xe9,0xed,0xf9,0x00,0x1a,0x2b,0x08,0xb1,0xa5,0xee,0xd7,0x3f,0x50,0x31,0x84,0x1a,0x59,0x8b,0x58,0x3a,0x67,0x55,0x56,0x62,0xc1,0x0f,0x14,0xa6,0xbe,0x00,0xca,0x2b,0x7d };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMMT192-DECRYPT-8", "[ECB][MMT][192][DECRYPT][n8]") {
    const uint8_t KEY[] = { 0x2f,0x81,0x18,0xdd,0x5b,0x2e,0xc4,0x01,0xb9,0xf5,0x01,0xcf,0x01,0x49,0xcb,0x65,0xac,0x45,0x1e,0xd9,0x43,0xe2,0x5e,0x15 };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xd0,0x9b,0x7a,0xa9,0x21,0x97,0xe1,0xa6,0xa4,0x2d,0x67,0xa0,0x20,0x91,0xbc,0x10,0xf8,0xb5,0x9c,0xfe,0xa9,0x63,0xd8,0xea,0x27,0x9e,0x8c,0xd4,0x6b,0x51,0x75,0x08,0x81,0x7a,0xab,0x5d,0x4a,0x76,0x27,0xea,0x39,0xad,0x27,0xb0,0x3a,0x3b,0x1c,0x61,0x0f,0x72,0x4b,0xad,0x22,0x99,0x6d,0x82,0x49,0xa4,0xea,0xb0,0x76,0xe3,0x09,0x11,0x00,0xda,0x1a,0xeb,0x20,0x69,0x8c,0x00,0x87,0x9b,0x1f,0x44,0x54,0x9c,0xc5,0x20,0x9a,0x0e,0xe3,0xa2,0xf8,0x97,0x35,0x5e,0xed,0x42,0x0c,0xfa,0x42,0xa1,0x41,0x94,0x4e,0x90,0x40,0x23,0xbc,0xd0,0x99,0xdd,0xa5,0x1e,0xb5,0x44,0x4a,0xdb,0xb3,0x0d,0x92,0x0f,0x88,0x7d,0xc0,0x43,0x62,0x78,0x3c,0x2f,0xed,0x4f,0x33,0x6d,0x5c,0x06,0x31,0xac,0xef,0x02,0x9d,0x95,0xb5,0x45,0xdc,0xf9,0xd0,0xc4,0x0d,0xf2,0xde,0x6b };
    const uint8_t CIPHERTEXT[] = { 0xc1,0x1a,0x65,0xac,0xcf,0x2f,0xaa,0x95,0x2d,0x07,0x87,0x13,0xb6,0xa7,0x3c,0x76,0x48,0xfe,0x4a,0x4b,0x0f,0x1c,0xd8,0x2d,0x06,0xa0,0x55,0xde,0xba,0x6f,0x5f,0x96,0x52,0xac,0xe3,0x9a,0xcc,0xe4,0x86,0x11,0x89,0x88,0x44,0x13,0x0c,0xa1,0x57,0x04,0xff,0xbf,0x5b,0x20,0x76,0x32,0xaf,0x56,0x78,0x7d,0x1e,0x5a,0xbc,0x08,0xbf,0xf6,0xb0,0x15,0x19,0xa1,0xbf,0xf5,0x8b,0x52,0xd4,0x7c,0xec,0x96,0x1a,0xb2,0x6e,0xe1,0x07,0xcb,0xc8,0x21,0x98,0x5a,0x94,0x99,0xde,0xc1,0xf5,0xed,0xb9,0xec,0x7e,0x79,0xe4,0x3f,0x4f,0xe7,0x31,0xcc,0x81,0x01,0x16,0xca,0xc5,0xc3,0x69,0x42,0x47,0xb5,0x68,0x0c,0xd9,0x78,0xfc,0xfa,0x4d,0x9e,0x3f,0x53,0x22,0xbf,0x3b,0x83,0x64,0xc8,0xf5,0x10,0xcd,0x97,0xaa,0xd0,0x30,0xc5,0x58,0x5a,0x18,0xc3,0x80,0xba,0xac,0x29 };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

TEST_CASE("ECBMMT192-DECRYPT-9", "[ECB][MMT][192][DECRYPT][n9]") {
    const uint8_t KEY[] = { 0x9c,0xc2,0x4e,0xa1,0xf1,0x95,0x9d,0x9a,0x97,0x2e,0x71,0x82,0xef,0x3b,0x4e,0x22,0xa9,0x7a,0x87,0xd0,0xda,0x7f,0xf6,0x4b };
    const uint8_t IV[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const uint8_t PLAINTEXT[] = { 0xb8,0xbb,0x5c,0xe5,0x3a,0x15,0xaa,0x6d,0xfd,0xf2,0xcb,0x61,0xbc,0x8e,0x36,0x17,0xd1,0xd0,0xfe,0xfe,0x9b,0xa5,0xd1,0x75,0x55,0x04,0x70,0xe3,0x23,0x97,0xf6,0xf3,0xb3,0xe6,0x5b,0x43,0xbd,0xed,0x2b,0x21,0xe5,0xc1,0x81,0xd3,0xc4,0xc4,0xc5,0x26,0xc4,0x1c,0xea,0xb0,0x44,0x28,0x95,0x08,0x45,0x80,0x48,0xb6,0x33,0x52,0xdf,0xc3,0x79,0xde,0x37,0x3f,0xd1,0x9a,0x2c,0x90,0x0c,0x43,0x52,0x4b,0x75,0x94,0x9e,0x67,0x7c,0xce,0xda,0x86,0x6f,0x7f,0x2b,0xcc,0x48,0x44,0xef,0x2e,0x5d,0xac,0x5b,0x80,0x4b,0x40,0x45,0xe6,0x57,0xc8,0x15,0x6d,0x1d,0xcd,0xb4,0x3c,0xbf,0x2f,0x5e,0x00,0xa4,0xf9,0x25,0x5e,0x3b,0xe2,0x43,0x94,0x36,0xc4,0xd0,0x44,0x9a,0x8d,0x2c,0x4c,0x1a,0x56,0xbe,0xce,0x98,0xea,0x0f,0xd6,0x8a,0xba,0xf1,0x23,0x98,0x03,0x99,0x94,0xae,0xbf,0xfc,0x69,0x2b,0x90,0x00,0xe5,0x80,0x47,0x9b,0x4f,0x4b,0x28,0xb5,0xfe };
    const uint8_t CIPHERTEXT[] = { 0x95,0x2f,0x45,0x46,0xa8,0xbf,0x71,0x66,0x96,0x49,0x17,0xec,0xe0,0x1b,0xda,0x3c,0x68,0x57,0xe4,0x27,0xce,0xf5,0xda,0x0f,0xf9,0x0b,0x0e,0x4b,0xf4,0x4c,0xf7,0xcc,0xfc,0xcf,0xdf,0x01,0xd7,0x13,0xdc,0xf9,0x67,0x3f,0x01,0xc8,0x7e,0xae,0xd5,0x2b,0xf4,0xaa,0x04,0x6f,0xf7,0x78,0x55,0x8e,0xa3,0x96,0xdc,0x9c,0xd2,0x40,0x71,0x61,0x36,0x38,0x61,0x48,0xa5,0xc7,0x63,0x78,0xb3,0xff,0xcd,0x40,0x86,0x44,0x07,0xb8,0xe6,0x0b,0x40,0xa5,0x94,0xe0,0x61,0x9e,0xdd,0xae,0x3f,0x6d,0x6e,0x3b,0x15,0xb8,0x6a,0xf2,0x31,0xe1,0xba,0xe5,0xed,0x2a,0xa5,0x12,0xe1,0x1d,0xa0,0xe5,0x57,0x2b,0x67,0xff,0xff,0x93,0x4c,0x36,0xe5,0x85,0xcf,0xdd,0x9f,0x87,0x70,0x45,0xcb,0x19,0xc1,0x83,0xb9,0x94,0xbf,0x74,0x64,0x58,0x62,0xff,0xa7,0x26,0x73,0x9a,0xad,0xcb,0x9e,0x10,0xaa,0xff,0xc8,0x81,0xc8,0x8c,0xa3,0xaa,0x65,0xb3,0x7f,0x66,0x7b,0xcb };
    aes_state state;
    uint8_t RESULT[sizeof(PLAINTEXT)];
    REQUIRE(aes_init_iv(&state, KEY, 8 * sizeof KEY, IV));
    CAPTURE(buf2str(KEY, sizeof(KEY)));
    CAPTURE(buf2str(IV, sizeof(IV)));
    REQUIRE(aes_decrypt_ecb(&state, CIPHERTEXT, RESULT, sizeof(CIPHERTEXT)) == sizeof(PLAINTEXT));
    CAPTURE(buf2str(PLAINTEXT, sizeof(PLAINTEXT)));
    CAPTURE(buf2str(RESULT, sizeof(RESULT)));
    REQUIRE(memcmp(PLAINTEXT, RESULT, sizeof(PLAINTEXT)) == 0);
}

